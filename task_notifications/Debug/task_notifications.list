
task_notifications.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007228  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08007428  08007428  00017428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074e0  080074e0  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  080074e0  080074e0  000174e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074e8  080074e8  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074e8  080074e8  000174e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074ec  080074ec  000174ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080074f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000010  08007500  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000b0  080075a0  000200b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005040  20000150  08007640  00020150  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20005190  08007640  00025190  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0002017e  2**0
                  CONTENTS, READONLY
 15 .debug_info   000209f1  00000000  00000000  000201c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00004079  00000000  00000000  00040bb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001a20  00000000  00000000  00044c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001463  00000000  00000000  00046650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00004695  00000000  00000000  00047ab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001e91c  00000000  00000000  0004c148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0010de90  00000000  00000000  0006aa64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00006f68  00000000  00000000  001788f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000064  00000000  00000000  0017f85c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000150 	.word	0x20000150
 800021c:	00000000 	.word	0x00000000
 8000220:	08007410 	.word	0x08007410

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000154 	.word	0x20000154
 800023c:	08007410 	.word	0x08007410

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b970 	b.w	8000538 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	460d      	mov	r5, r1
 8000278:	4604      	mov	r4, r0
 800027a:	460f      	mov	r7, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14a      	bne.n	8000316 <__udivmoddi4+0xa6>
 8000280:	428a      	cmp	r2, r1
 8000282:	4694      	mov	ip, r2
 8000284:	d965      	bls.n	8000352 <__udivmoddi4+0xe2>
 8000286:	fab2 f382 	clz	r3, r2
 800028a:	b143      	cbz	r3, 800029e <__udivmoddi4+0x2e>
 800028c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000290:	f1c3 0220 	rsb	r2, r3, #32
 8000294:	409f      	lsls	r7, r3
 8000296:	fa20 f202 	lsr.w	r2, r0, r2
 800029a:	4317      	orrs	r7, r2
 800029c:	409c      	lsls	r4, r3
 800029e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002a2:	fa1f f58c 	uxth.w	r5, ip
 80002a6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002aa:	0c22      	lsrs	r2, r4, #16
 80002ac:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002b4:	fb01 f005 	mul.w	r0, r1, r5
 80002b8:	4290      	cmp	r0, r2
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x62>
 80002bc:	eb1c 0202 	adds.w	r2, ip, r2
 80002c0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002c4:	f080 811c 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f240 8119 	bls.w	8000500 <__udivmoddi4+0x290>
 80002ce:	3902      	subs	r1, #2
 80002d0:	4462      	add	r2, ip
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002da:	fb0e 2210 	mls	r2, lr, r0, r2
 80002de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e2:	fb00 f505 	mul.w	r5, r0, r5
 80002e6:	42a5      	cmp	r5, r4
 80002e8:	d90a      	bls.n	8000300 <__udivmoddi4+0x90>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f2:	f080 8107 	bcs.w	8000504 <__udivmoddi4+0x294>
 80002f6:	42a5      	cmp	r5, r4
 80002f8:	f240 8104 	bls.w	8000504 <__udivmoddi4+0x294>
 80002fc:	4464      	add	r4, ip
 80002fe:	3802      	subs	r0, #2
 8000300:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000304:	1b64      	subs	r4, r4, r5
 8000306:	2100      	movs	r1, #0
 8000308:	b11e      	cbz	r6, 8000312 <__udivmoddi4+0xa2>
 800030a:	40dc      	lsrs	r4, r3
 800030c:	2300      	movs	r3, #0
 800030e:	e9c6 4300 	strd	r4, r3, [r6]
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0xbc>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80ed 	beq.w	80004fa <__udivmoddi4+0x28a>
 8000320:	2100      	movs	r1, #0
 8000322:	e9c6 0500 	strd	r0, r5, [r6]
 8000326:	4608      	mov	r0, r1
 8000328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032c:	fab3 f183 	clz	r1, r3
 8000330:	2900      	cmp	r1, #0
 8000332:	d149      	bne.n	80003c8 <__udivmoddi4+0x158>
 8000334:	42ab      	cmp	r3, r5
 8000336:	d302      	bcc.n	800033e <__udivmoddi4+0xce>
 8000338:	4282      	cmp	r2, r0
 800033a:	f200 80f8 	bhi.w	800052e <__udivmoddi4+0x2be>
 800033e:	1a84      	subs	r4, r0, r2
 8000340:	eb65 0203 	sbc.w	r2, r5, r3
 8000344:	2001      	movs	r0, #1
 8000346:	4617      	mov	r7, r2
 8000348:	2e00      	cmp	r6, #0
 800034a:	d0e2      	beq.n	8000312 <__udivmoddi4+0xa2>
 800034c:	e9c6 4700 	strd	r4, r7, [r6]
 8000350:	e7df      	b.n	8000312 <__udivmoddi4+0xa2>
 8000352:	b902      	cbnz	r2, 8000356 <__udivmoddi4+0xe6>
 8000354:	deff      	udf	#255	; 0xff
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8090 	bne.w	8000480 <__udivmoddi4+0x210>
 8000360:	1a8a      	subs	r2, r1, r2
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2101      	movs	r1, #1
 800036c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000370:	fb07 2015 	mls	r0, r7, r5, r2
 8000374:	0c22      	lsrs	r2, r4, #16
 8000376:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800037a:	fb0e f005 	mul.w	r0, lr, r5
 800037e:	4290      	cmp	r0, r2
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x124>
 8000382:	eb1c 0202 	adds.w	r2, ip, r2
 8000386:	f105 38ff 	add.w	r8, r5, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4290      	cmp	r0, r2
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2b8>
 8000392:	4645      	mov	r5, r8
 8000394:	1a12      	subs	r2, r2, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb2 f0f7 	udiv	r0, r2, r7
 800039c:	fb07 2210 	mls	r2, r7, r0, r2
 80003a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x14e>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x14c>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2c2>
 80003bc:	4610      	mov	r0, r2
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003c6:	e79f      	b.n	8000308 <__udivmoddi4+0x98>
 80003c8:	f1c1 0720 	rsb	r7, r1, #32
 80003cc:	408b      	lsls	r3, r1
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa05 f401 	lsl.w	r4, r5, r1
 80003da:	fa20 f307 	lsr.w	r3, r0, r7
 80003de:	40fd      	lsrs	r5, r7
 80003e0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e4:	4323      	orrs	r3, r4
 80003e6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ea:	fa1f fe8c 	uxth.w	lr, ip
 80003ee:	fb09 5518 	mls	r5, r9, r8, r5
 80003f2:	0c1c      	lsrs	r4, r3, #16
 80003f4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f8:	fb08 f50e 	mul.w	r5, r8, lr
 80003fc:	42a5      	cmp	r5, r4
 80003fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000402:	fa00 f001 	lsl.w	r0, r0, r1
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2b4>
 8000414:	42a5      	cmp	r5, r4
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2b4>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4464      	add	r4, ip
 8000420:	1b64      	subs	r4, r4, r5
 8000422:	b29d      	uxth	r5, r3
 8000424:	fbb4 f3f9 	udiv	r3, r4, r9
 8000428:	fb09 4413 	mls	r4, r9, r3, r4
 800042c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000430:	fb03 fe0e 	mul.w	lr, r3, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2ac>
 8000442:	45a6      	cmp	lr, r4
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2ac>
 8000446:	3b02      	subs	r3, #2
 8000448:	4464      	add	r4, ip
 800044a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800044e:	fba3 9502 	umull	r9, r5, r3, r2
 8000452:	eba4 040e 	sub.w	r4, r4, lr
 8000456:	42ac      	cmp	r4, r5
 8000458:	46c8      	mov	r8, r9
 800045a:	46ae      	mov	lr, r5
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x29c>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x298>
 8000460:	b156      	cbz	r6, 8000478 <__udivmoddi4+0x208>
 8000462:	ebb0 0208 	subs.w	r2, r0, r8
 8000466:	eb64 040e 	sbc.w	r4, r4, lr
 800046a:	fa04 f707 	lsl.w	r7, r4, r7
 800046e:	40ca      	lsrs	r2, r1
 8000470:	40cc      	lsrs	r4, r1
 8000472:	4317      	orrs	r7, r2
 8000474:	e9c6 7400 	strd	r7, r4, [r6]
 8000478:	4618      	mov	r0, r3
 800047a:	2100      	movs	r1, #0
 800047c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000480:	f1c3 0120 	rsb	r1, r3, #32
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	fa20 f201 	lsr.w	r2, r0, r1
 800048c:	fa25 f101 	lsr.w	r1, r5, r1
 8000490:	409d      	lsls	r5, r3
 8000492:	432a      	orrs	r2, r5
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a0:	fb07 1510 	mls	r5, r7, r0, r1
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004aa:	fb00 f50e 	mul.w	r5, r0, lr
 80004ae:	428d      	cmp	r5, r1
 80004b0:	fa04 f403 	lsl.w	r4, r4, r3
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x258>
 80004b6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004c0:	428d      	cmp	r5, r1
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1b49      	subs	r1, r1, r5
 80004ca:	b292      	uxth	r2, r2
 80004cc:	fbb1 f5f7 	udiv	r5, r1, r7
 80004d0:	fb07 1115 	mls	r1, r7, r5, r1
 80004d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d8:	fb05 f10e 	mul.w	r1, r5, lr
 80004dc:	4291      	cmp	r1, r2
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x282>
 80004e0:	eb1c 0202 	adds.w	r2, ip, r2
 80004e4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2a8>
 80004ea:	4291      	cmp	r1, r2
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2a8>
 80004ee:	3d02      	subs	r5, #2
 80004f0:	4462      	add	r2, ip
 80004f2:	1a52      	subs	r2, r2, r1
 80004f4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0xfc>
 80004fa:	4631      	mov	r1, r6
 80004fc:	4630      	mov	r0, r6
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xa2>
 8000500:	4639      	mov	r1, r7
 8000502:	e6e6      	b.n	80002d2 <__udivmoddi4+0x62>
 8000504:	4610      	mov	r0, r2
 8000506:	e6fb      	b.n	8000300 <__udivmoddi4+0x90>
 8000508:	4548      	cmp	r0, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000514:	3b01      	subs	r3, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000518:	4645      	mov	r5, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x282>
 800051c:	462b      	mov	r3, r5
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1da>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x258>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000528:	3d02      	subs	r5, #2
 800052a:	4462      	add	r2, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x124>
 800052e:	4608      	mov	r0, r1
 8000530:	e70a      	b.n	8000348 <__udivmoddi4+0xd8>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x14e>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f000 fd23 	bl	8000f8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f838 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000548:	f000 f954 	bl	80007f4 <MX_GPIO_Init>
  MX_ETH_Init();
 800054c:	f000 f8a6 	bl	800069c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000550:	f000 f8f2 	bl	8000738 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000554:	f000 f920 	bl	8000798 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000558:	f004 f850 	bl	80045fc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800055c:	4a0d      	ldr	r2, [pc, #52]	; (8000594 <main+0x58>)
 800055e:	2100      	movs	r1, #0
 8000560:	480d      	ldr	r0, [pc, #52]	; (8000598 <main+0x5c>)
 8000562:	f004 f8b5 	bl	80046d0 <osThreadNew>
 8000566:	4603      	mov	r3, r0
 8000568:	4a0c      	ldr	r2, [pc, #48]	; (800059c <main+0x60>)
 800056a:	6013      	str	r3, [r2, #0]

  /* creation of send */
  sendHandle = osThreadNew(startSend, NULL, &send_attributes);
 800056c:	4a0c      	ldr	r2, [pc, #48]	; (80005a0 <main+0x64>)
 800056e:	2100      	movs	r1, #0
 8000570:	480c      	ldr	r0, [pc, #48]	; (80005a4 <main+0x68>)
 8000572:	f004 f8ad 	bl	80046d0 <osThreadNew>
 8000576:	4603      	mov	r3, r0
 8000578:	4a0b      	ldr	r2, [pc, #44]	; (80005a8 <main+0x6c>)
 800057a:	6013      	str	r3, [r2, #0]

  /* creation of recv */
  recvHandle = osThreadNew(startRecv, NULL, &recv_attributes);
 800057c:	4a0b      	ldr	r2, [pc, #44]	; (80005ac <main+0x70>)
 800057e:	2100      	movs	r1, #0
 8000580:	480b      	ldr	r0, [pc, #44]	; (80005b0 <main+0x74>)
 8000582:	f004 f8a5 	bl	80046d0 <osThreadNew>
 8000586:	4603      	mov	r3, r0
 8000588:	4a0a      	ldr	r2, [pc, #40]	; (80005b4 <main+0x78>)
 800058a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800058c:	f004 f86a 	bl	8004664 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000590:	e7fe      	b.n	8000590 <main+0x54>
 8000592:	bf00      	nop
 8000594:	0800745c 	.word	0x0800745c
 8000598:	08000939 	.word	0x08000939
 800059c:	200007e4 	.word	0x200007e4
 80005a0:	08007480 	.word	0x08007480
 80005a4:	08000949 	.word	0x08000949
 80005a8:	200007e8 	.word	0x200007e8
 80005ac:	080074a4 	.word	0x080074a4
 80005b0:	080009bd 	.word	0x080009bd
 80005b4:	200007ec 	.word	0x200007ec

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	; 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 031c 	add.w	r3, r7, #28
 80005c2:	2234      	movs	r2, #52	; 0x34
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f006 fee8 	bl	800739c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 0308 	add.w	r3, r7, #8
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005dc:	f001 fc3c 	bl	8001e58 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	4b2c      	ldr	r3, [pc, #176]	; (8000694 <SystemClock_Config+0xdc>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	4a2b      	ldr	r2, [pc, #172]	; (8000694 <SystemClock_Config+0xdc>)
 80005e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ea:	6413      	str	r3, [r2, #64]	; 0x40
 80005ec:	4b29      	ldr	r3, [pc, #164]	; (8000694 <SystemClock_Config+0xdc>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005f8:	4b27      	ldr	r3, [pc, #156]	; (8000698 <SystemClock_Config+0xe0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000600:	4a25      	ldr	r2, [pc, #148]	; (8000698 <SystemClock_Config+0xe0>)
 8000602:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4b23      	ldr	r3, [pc, #140]	; (8000698 <SystemClock_Config+0xe0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000610:	603b      	str	r3, [r7, #0]
 8000612:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000614:	2301      	movs	r3, #1
 8000616:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000618:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800061c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061e:	2302      	movs	r3, #2
 8000620:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000622:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000626:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000628:	2304      	movs	r3, #4
 800062a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800062c:	2360      	movs	r3, #96	; 0x60
 800062e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000630:	2302      	movs	r3, #2
 8000632:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000634:	2304      	movs	r3, #4
 8000636:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000638:	2302      	movs	r3, #2
 800063a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 031c 	add.w	r3, r7, #28
 8000640:	4618      	mov	r0, r3
 8000642:	f001 fc69 	bl	8001f18 <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800064c:	f000 fa08 	bl	8000a60 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000650:	f001 fc12 	bl	8001e78 <HAL_PWREx_EnableOverDrive>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800065a:	f000 fa01 	bl	8000a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065e:	230f      	movs	r3, #15
 8000660:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000662:	2302      	movs	r3, #2
 8000664:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800066a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800066e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	2103      	movs	r1, #3
 800067a:	4618      	mov	r0, r3
 800067c:	f001 fefa 	bl	8002474 <HAL_RCC_ClockConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000686:	f000 f9eb 	bl	8000a60 <Error_Handler>
  }
}
 800068a:	bf00      	nop
 800068c:	3750      	adds	r7, #80	; 0x50
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800
 8000698:	40007000 	.word	0x40007000

0800069c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <MX_ETH_Init+0x84>)
 80006a2:	4a20      	ldr	r2, [pc, #128]	; (8000724 <MX_ETH_Init+0x88>)
 80006a4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006a6:	4b20      	ldr	r3, [pc, #128]	; (8000728 <MX_ETH_Init+0x8c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006ac:	4b1e      	ldr	r3, [pc, #120]	; (8000728 <MX_ETH_Init+0x8c>)
 80006ae:	2280      	movs	r2, #128	; 0x80
 80006b0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006b2:	4b1d      	ldr	r3, [pc, #116]	; (8000728 <MX_ETH_Init+0x8c>)
 80006b4:	22e1      	movs	r2, #225	; 0xe1
 80006b6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006b8:	4b1b      	ldr	r3, [pc, #108]	; (8000728 <MX_ETH_Init+0x8c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006be:	4b1a      	ldr	r3, [pc, #104]	; (8000728 <MX_ETH_Init+0x8c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006c4:	4b18      	ldr	r3, [pc, #96]	; (8000728 <MX_ETH_Init+0x8c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006ca:	4b15      	ldr	r3, [pc, #84]	; (8000720 <MX_ETH_Init+0x84>)
 80006cc:	4a16      	ldr	r2, [pc, #88]	; (8000728 <MX_ETH_Init+0x8c>)
 80006ce:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006d0:	4b13      	ldr	r3, [pc, #76]	; (8000720 <MX_ETH_Init+0x84>)
 80006d2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006d6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006d8:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_ETH_Init+0x84>)
 80006da:	4a14      	ldr	r2, [pc, #80]	; (800072c <MX_ETH_Init+0x90>)
 80006dc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006de:	4b10      	ldr	r3, [pc, #64]	; (8000720 <MX_ETH_Init+0x84>)
 80006e0:	4a13      	ldr	r2, [pc, #76]	; (8000730 <MX_ETH_Init+0x94>)
 80006e2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006e4:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_ETH_Init+0x84>)
 80006e6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80006ea:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006ec:	480c      	ldr	r0, [pc, #48]	; (8000720 <MX_ETH_Init+0x84>)
 80006ee:	f000 fd7f 	bl	80011f0 <HAL_ETH_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80006f8:	f000 f9b2 	bl	8000a60 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006fc:	2238      	movs	r2, #56	; 0x38
 80006fe:	2100      	movs	r1, #0
 8000700:	480c      	ldr	r0, [pc, #48]	; (8000734 <MX_ETH_Init+0x98>)
 8000702:	f006 fe4b 	bl	800739c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <MX_ETH_Init+0x98>)
 8000708:	2221      	movs	r2, #33	; 0x21
 800070a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_ETH_Init+0x98>)
 800070e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000712:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000714:	4b07      	ldr	r3, [pc, #28]	; (8000734 <MX_ETH_Init+0x98>)
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200001a4 	.word	0x200001a4
 8000724:	40028000 	.word	0x40028000
 8000728:	200007f0 	.word	0x200007f0
 800072c:	200000b0 	.word	0x200000b0
 8000730:	20000010 	.word	0x20000010
 8000734:	2000016c 	.word	0x2000016c

08000738 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <MX_USART3_UART_Init+0x58>)
 800073e:	4a15      	ldr	r2, [pc, #84]	; (8000794 <MX_USART3_UART_Init+0x5c>)
 8000740:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000742:	4b13      	ldr	r3, [pc, #76]	; (8000790 <MX_USART3_UART_Init+0x58>)
 8000744:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000748:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_USART3_UART_Init+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_USART3_UART_Init+0x58>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_USART3_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_USART3_UART_Init+0x58>)
 800075e:	220c      	movs	r2, #12
 8000760:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <MX_USART3_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_USART3_UART_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <MX_USART3_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_USART3_UART_Init+0x58>)
 8000776:	2200      	movs	r2, #0
 8000778:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_USART3_UART_Init+0x58>)
 800077c:	f002 ffda 	bl	8003734 <HAL_UART_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000786:	f000 f96b 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000254 	.word	0x20000254
 8000794:	40004800 	.word	0x40004800

08000798 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800079c:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007a2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a6:	2206      	movs	r2, #6
 80007a8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ac:	2202      	movs	r2, #2
 80007ae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b8:	2202      	movs	r2, #2
 80007ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007be:	2201      	movs	r2, #1
 80007c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007da:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007dc:	f001 f9f3 	bl	8001bc6 <HAL_PCD_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007e6:	f000 f93b 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200002dc 	.word	0x200002dc

080007f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08c      	sub	sp, #48	; 0x30
 80007f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080a:	4b47      	ldr	r3, [pc, #284]	; (8000928 <MX_GPIO_Init+0x134>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a46      	ldr	r2, [pc, #280]	; (8000928 <MX_GPIO_Init+0x134>)
 8000810:	f043 0304 	orr.w	r3, r3, #4
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b44      	ldr	r3, [pc, #272]	; (8000928 <MX_GPIO_Init+0x134>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0304 	and.w	r3, r3, #4
 800081e:	61bb      	str	r3, [r7, #24]
 8000820:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000822:	4b41      	ldr	r3, [pc, #260]	; (8000928 <MX_GPIO_Init+0x134>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a40      	ldr	r2, [pc, #256]	; (8000928 <MX_GPIO_Init+0x134>)
 8000828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b3e      	ldr	r3, [pc, #248]	; (8000928 <MX_GPIO_Init+0x134>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000836:	617b      	str	r3, [r7, #20]
 8000838:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b3b      	ldr	r3, [pc, #236]	; (8000928 <MX_GPIO_Init+0x134>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a3a      	ldr	r2, [pc, #232]	; (8000928 <MX_GPIO_Init+0x134>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b38      	ldr	r3, [pc, #224]	; (8000928 <MX_GPIO_Init+0x134>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	4b35      	ldr	r3, [pc, #212]	; (8000928 <MX_GPIO_Init+0x134>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a34      	ldr	r2, [pc, #208]	; (8000928 <MX_GPIO_Init+0x134>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b32      	ldr	r3, [pc, #200]	; (8000928 <MX_GPIO_Init+0x134>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800086a:	4b2f      	ldr	r3, [pc, #188]	; (8000928 <MX_GPIO_Init+0x134>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a2e      	ldr	r2, [pc, #184]	; (8000928 <MX_GPIO_Init+0x134>)
 8000870:	f043 0308 	orr.w	r3, r3, #8
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b2c      	ldr	r3, [pc, #176]	; (8000928 <MX_GPIO_Init+0x134>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0308 	and.w	r3, r3, #8
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000882:	4b29      	ldr	r3, [pc, #164]	; (8000928 <MX_GPIO_Init+0x134>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a28      	ldr	r2, [pc, #160]	; (8000928 <MX_GPIO_Init+0x134>)
 8000888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b26      	ldr	r3, [pc, #152]	; (8000928 <MX_GPIO_Init+0x134>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	f244 0181 	movw	r1, #16513	; 0x4081
 80008a0:	4822      	ldr	r0, [pc, #136]	; (800092c <MX_GPIO_Init+0x138>)
 80008a2:	f001 f977 	bl	8001b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2140      	movs	r1, #64	; 0x40
 80008aa:	4821      	ldr	r0, [pc, #132]	; (8000930 <MX_GPIO_Init+0x13c>)
 80008ac:	f001 f972 	bl	8001b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	481b      	ldr	r0, [pc, #108]	; (8000934 <MX_GPIO_Init+0x140>)
 80008c8:	f000 ffb8 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008cc:	f244 0381 	movw	r3, #16513	; 0x4081
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d2:	2301      	movs	r3, #1
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	4811      	ldr	r0, [pc, #68]	; (800092c <MX_GPIO_Init+0x138>)
 80008e6:	f000 ffa9 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ea:	2340      	movs	r3, #64	; 0x40
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	480b      	ldr	r0, [pc, #44]	; (8000930 <MX_GPIO_Init+0x13c>)
 8000902:	f000 ff9b 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000906:	2380      	movs	r3, #128	; 0x80
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090a:	2300      	movs	r3, #0
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_GPIO_Init+0x13c>)
 800091a:	f000 ff8f 	bl	800183c <HAL_GPIO_Init>

}
 800091e:	bf00      	nop
 8000920:	3730      	adds	r7, #48	; 0x30
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40023800 	.word	0x40023800
 800092c:	40020400 	.word	0x40020400
 8000930:	40021800 	.word	0x40021800
 8000934:	40020800 	.word	0x40020800

08000938 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	  for(;;)
	  {
	    osDelay(1);
 8000940:	2001      	movs	r0, #1
 8000942:	f003 ff6b 	bl	800481c <osDelay>
 8000946:	e7fb      	b.n	8000940 <StartDefaultTask+0x8>

08000948 <startSend>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startSend */
void startSend(void *argument)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//send the notification to recvTask - turning on the Red LED
		//since we're overwriting the value, even if another notification is pending
		//there is no need to check the return value (see docs for xTaskNofify in header)
		xTaskNotify( recvHandle, RED_LED_MASK, eSetValueWithoutOverwrite);
 8000950:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <startSend+0x70>)
 8000952:	6818      	ldr	r0, [r3, #0]
 8000954:	2300      	movs	r3, #0
 8000956:	2204      	movs	r2, #4
 8000958:	2101      	movs	r1, #1
 800095a:	f005 fc95 	bl	8006288 <xTaskGenericNotify>
		vTaskDelay(200);
 800095e:	20c8      	movs	r0, #200	; 0xc8
 8000960:	f004 ff26 	bl	80057b0 <vTaskDelay>

		xTaskNotify( recvHandle, BLUE_LED_MASK, eSetValueWithOverwrite);
 8000964:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <startSend+0x70>)
 8000966:	6818      	ldr	r0, [r3, #0]
 8000968:	2300      	movs	r3, #0
 800096a:	2203      	movs	r2, #3
 800096c:	2102      	movs	r1, #2
 800096e:	f005 fc8b 	bl	8006288 <xTaskGenericNotify>
		vTaskDelay(200);
 8000972:	20c8      	movs	r0, #200	; 0xc8
 8000974:	f004 ff1c 	bl	80057b0 <vTaskDelay>

		xTaskNotify( recvHandle, GREEN_LED_MASK, eSetValueWithOverwrite);
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <startSend+0x70>)
 800097a:	6818      	ldr	r0, [r3, #0]
 800097c:	2300      	movs	r3, #0
 800097e:	2203      	movs	r2, #3
 8000980:	2104      	movs	r1, #4
 8000982:	f005 fc81 	bl	8006288 <xTaskGenericNotify>
		vTaskDelay(200);
 8000986:	20c8      	movs	r0, #200	; 0xc8
 8000988:	f004 ff12 	bl	80057b0 <vTaskDelay>

		xTaskNotify( recvHandle, RED_LED_MASK | BLUE_LED_MASK | GREEN_LED_MASK, eSetValueWithOverwrite);
 800098c:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <startSend+0x70>)
 800098e:	6818      	ldr	r0, [r3, #0]
 8000990:	2300      	movs	r3, #0
 8000992:	2203      	movs	r2, #3
 8000994:	2107      	movs	r1, #7
 8000996:	f005 fc77 	bl	8006288 <xTaskGenericNotify>
		vTaskDelay(200);
 800099a:	20c8      	movs	r0, #200	; 0xc8
 800099c:	f004 ff08 	bl	80057b0 <vTaskDelay>

		xTaskNotify( recvHandle,0, eSetValueWithOverwrite);
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <startSend+0x70>)
 80009a2:	6818      	ldr	r0, [r3, #0]
 80009a4:	2300      	movs	r3, #0
 80009a6:	2203      	movs	r2, #3
 80009a8:	2100      	movs	r1, #0
 80009aa:	f005 fc6d 	bl	8006288 <xTaskGenericNotify>
		vTaskDelay(200);
 80009ae:	20c8      	movs	r0, #200	; 0xc8
 80009b0:	f004 fefe 	bl	80057b0 <vTaskDelay>
		xTaskNotify( recvHandle, RED_LED_MASK, eSetValueWithoutOverwrite);
 80009b4:	e7cc      	b.n	8000950 <startSend+0x8>
 80009b6:	bf00      	nop
 80009b8:	200007ec 	.word	0x200007ec

080009bc <startRecv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startRecv */
void startRecv(void *argument)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
	while(1)
	{
		//wait for hte next notification value, clearing it to 0
		//after receiving
		uint32_t notificationvalue = ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 80009c4:	f04f 31ff 	mov.w	r1, #4294967295
 80009c8:	2001      	movs	r0, #1
 80009ca:	f005 fc15 	bl	80061f8 <ulTaskNotifyTake>
 80009ce:	60f8      	str	r0, [r7, #12]
		if((notificationvalue & RED_LED_MASK) != 0)
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d005      	beq.n	80009e6 <startRecv+0x2a>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80009da:	2201      	movs	r2, #1
 80009dc:	2101      	movs	r1, #1
 80009de:	4816      	ldr	r0, [pc, #88]	; (8000a38 <startRecv+0x7c>)
 80009e0:	f001 f8d8 	bl	8001b94 <HAL_GPIO_WritePin>
 80009e4:	e004      	b.n	80009f0 <startRecv+0x34>
		else
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2101      	movs	r1, #1
 80009ea:	4813      	ldr	r0, [pc, #76]	; (8000a38 <startRecv+0x7c>)
 80009ec:	f001 f8d2 	bl	8001b94 <HAL_GPIO_WritePin>

		if((notificationvalue & BLUE_LED_MASK) != 0)
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d005      	beq.n	8000a06 <startRecv+0x4a>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80009fa:	2201      	movs	r2, #1
 80009fc:	2180      	movs	r1, #128	; 0x80
 80009fe:	480e      	ldr	r0, [pc, #56]	; (8000a38 <startRecv+0x7c>)
 8000a00:	f001 f8c8 	bl	8001b94 <HAL_GPIO_WritePin>
 8000a04:	e004      	b.n	8000a10 <startRecv+0x54>
		else
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2180      	movs	r1, #128	; 0x80
 8000a0a:	480b      	ldr	r0, [pc, #44]	; (8000a38 <startRecv+0x7c>)
 8000a0c:	f001 f8c2 	bl	8001b94 <HAL_GPIO_WritePin>

		if((notificationvalue & GREEN_LED_MASK) != 0)
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	f003 0304 	and.w	r3, r3, #4
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d006      	beq.n	8000a28 <startRecv+0x6c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a20:	4805      	ldr	r0, [pc, #20]	; (8000a38 <startRecv+0x7c>)
 8000a22:	f001 f8b7 	bl	8001b94 <HAL_GPIO_WritePin>
 8000a26:	e7cd      	b.n	80009c4 <startRecv+0x8>
		else
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a2e:	4802      	ldr	r0, [pc, #8]	; (8000a38 <startRecv+0x7c>)
 8000a30:	f001 f8b0 	bl	8001b94 <HAL_GPIO_WritePin>
	{
 8000a34:	e7c6      	b.n	80009c4 <startRecv+0x8>
 8000a36:	bf00      	nop
 8000a38:	40020400 	.word	0x40020400

08000a3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d101      	bne.n	8000a52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a4e:	f000 faa9 	bl	8000fa4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40001000 	.word	0x40001000

08000a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a64:	b672      	cpsid	i
}
 8000a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <Error_Handler+0x8>
	...

08000a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	4a10      	ldr	r2, [pc, #64]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8e:	4a0a      	ldr	r2, [pc, #40]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a94:	6453      	str	r3, [r2, #68]	; 0x44
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	210f      	movs	r1, #15
 8000aa6:	f06f 0001 	mvn.w	r0, #1
 8000aaa:	f000 fb77 	bl	800119c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800

08000abc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08e      	sub	sp, #56	; 0x38
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a4e      	ldr	r2, [pc, #312]	; (8000c14 <HAL_ETH_MspInit+0x158>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	f040 8096 	bne.w	8000c0c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000ae0:	4b4d      	ldr	r3, [pc, #308]	; (8000c18 <HAL_ETH_MspInit+0x15c>)
 8000ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae4:	4a4c      	ldr	r2, [pc, #304]	; (8000c18 <HAL_ETH_MspInit+0x15c>)
 8000ae6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aea:	6313      	str	r3, [r2, #48]	; 0x30
 8000aec:	4b4a      	ldr	r3, [pc, #296]	; (8000c18 <HAL_ETH_MspInit+0x15c>)
 8000aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000af4:	623b      	str	r3, [r7, #32]
 8000af6:	6a3b      	ldr	r3, [r7, #32]
 8000af8:	4b47      	ldr	r3, [pc, #284]	; (8000c18 <HAL_ETH_MspInit+0x15c>)
 8000afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afc:	4a46      	ldr	r2, [pc, #280]	; (8000c18 <HAL_ETH_MspInit+0x15c>)
 8000afe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b02:	6313      	str	r3, [r2, #48]	; 0x30
 8000b04:	4b44      	ldr	r3, [pc, #272]	; (8000c18 <HAL_ETH_MspInit+0x15c>)
 8000b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b0c:	61fb      	str	r3, [r7, #28]
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	4b41      	ldr	r3, [pc, #260]	; (8000c18 <HAL_ETH_MspInit+0x15c>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b14:	4a40      	ldr	r2, [pc, #256]	; (8000c18 <HAL_ETH_MspInit+0x15c>)
 8000b16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1c:	4b3e      	ldr	r3, [pc, #248]	; (8000c18 <HAL_ETH_MspInit+0x15c>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b24:	61bb      	str	r3, [r7, #24]
 8000b26:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b28:	4b3b      	ldr	r3, [pc, #236]	; (8000c18 <HAL_ETH_MspInit+0x15c>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2c:	4a3a      	ldr	r2, [pc, #232]	; (8000c18 <HAL_ETH_MspInit+0x15c>)
 8000b2e:	f043 0304 	orr.w	r3, r3, #4
 8000b32:	6313      	str	r3, [r2, #48]	; 0x30
 8000b34:	4b38      	ldr	r3, [pc, #224]	; (8000c18 <HAL_ETH_MspInit+0x15c>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b38:	f003 0304 	and.w	r3, r3, #4
 8000b3c:	617b      	str	r3, [r7, #20]
 8000b3e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b40:	4b35      	ldr	r3, [pc, #212]	; (8000c18 <HAL_ETH_MspInit+0x15c>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b44:	4a34      	ldr	r2, [pc, #208]	; (8000c18 <HAL_ETH_MspInit+0x15c>)
 8000b46:	f043 0301 	orr.w	r3, r3, #1
 8000b4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4c:	4b32      	ldr	r3, [pc, #200]	; (8000c18 <HAL_ETH_MspInit+0x15c>)
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b50:	f003 0301 	and.w	r3, r3, #1
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b58:	4b2f      	ldr	r3, [pc, #188]	; (8000c18 <HAL_ETH_MspInit+0x15c>)
 8000b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5c:	4a2e      	ldr	r2, [pc, #184]	; (8000c18 <HAL_ETH_MspInit+0x15c>)
 8000b5e:	f043 0302 	orr.w	r3, r3, #2
 8000b62:	6313      	str	r3, [r2, #48]	; 0x30
 8000b64:	4b2c      	ldr	r3, [pc, #176]	; (8000c18 <HAL_ETH_MspInit+0x15c>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b68:	f003 0302 	and.w	r3, r3, #2
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b70:	4b29      	ldr	r3, [pc, #164]	; (8000c18 <HAL_ETH_MspInit+0x15c>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b74:	4a28      	ldr	r2, [pc, #160]	; (8000c18 <HAL_ETH_MspInit+0x15c>)
 8000b76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7c:	4b26      	ldr	r3, [pc, #152]	; (8000c18 <HAL_ETH_MspInit+0x15c>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b88:	2332      	movs	r3, #50	; 0x32
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b94:	2303      	movs	r3, #3
 8000b96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b98:	230b      	movs	r3, #11
 8000b9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	481e      	ldr	r0, [pc, #120]	; (8000c1c <HAL_ETH_MspInit+0x160>)
 8000ba4:	f000 fe4a 	bl	800183c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ba8:	2386      	movs	r3, #134	; 0x86
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bb8:	230b      	movs	r3, #11
 8000bba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4817      	ldr	r0, [pc, #92]	; (8000c20 <HAL_ETH_MspInit+0x164>)
 8000bc4:	f000 fe3a 	bl	800183c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bda:	230b      	movs	r3, #11
 8000bdc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be2:	4619      	mov	r1, r3
 8000be4:	480f      	ldr	r0, [pc, #60]	; (8000c24 <HAL_ETH_MspInit+0x168>)
 8000be6:	f000 fe29 	bl	800183c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000bea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bfc:	230b      	movs	r3, #11
 8000bfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c04:	4619      	mov	r1, r3
 8000c06:	4808      	ldr	r0, [pc, #32]	; (8000c28 <HAL_ETH_MspInit+0x16c>)
 8000c08:	f000 fe18 	bl	800183c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c0c:	bf00      	nop
 8000c0e:	3738      	adds	r7, #56	; 0x38
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40028000 	.word	0x40028000
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020800 	.word	0x40020800
 8000c20:	40020000 	.word	0x40020000
 8000c24:	40020400 	.word	0x40020400
 8000c28:	40021800 	.word	0x40021800

08000c2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b0ae      	sub	sp, #184	; 0xb8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	2290      	movs	r2, #144	; 0x90
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f006 fba5 	bl	800739c <memset>
  if(huart->Instance==USART3)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a22      	ldr	r2, [pc, #136]	; (8000ce0 <HAL_UART_MspInit+0xb4>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d13c      	bne.n	8000cd6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c60:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c62:	2300      	movs	r3, #0
 8000c64:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f001 fe5a 	bl	8002924 <HAL_RCCEx_PeriphCLKConfig>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c76:	f7ff fef3 	bl	8000a60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <HAL_UART_MspInit+0xb8>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7e:	4a19      	ldr	r2, [pc, #100]	; (8000ce4 <HAL_UART_MspInit+0xb8>)
 8000c80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c84:	6413      	str	r3, [r2, #64]	; 0x40
 8000c86:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <HAL_UART_MspInit+0xb8>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c92:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <HAL_UART_MspInit+0xb8>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a13      	ldr	r2, [pc, #76]	; (8000ce4 <HAL_UART_MspInit+0xb8>)
 8000c98:	f043 0308 	orr.w	r3, r3, #8
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <HAL_UART_MspInit+0xb8>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0308 	and.w	r3, r3, #8
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000caa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cc4:	2307      	movs	r3, #7
 8000cc6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <HAL_UART_MspInit+0xbc>)
 8000cd2:	f000 fdb3 	bl	800183c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cd6:	bf00      	nop
 8000cd8:	37b8      	adds	r7, #184	; 0xb8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40004800 	.word	0x40004800
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020c00 	.word	0x40020c00

08000cec <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b0ae      	sub	sp, #184	; 0xb8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	2290      	movs	r2, #144	; 0x90
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f006 fb45 	bl	800739c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d1a:	d159      	bne.n	8000dd0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000d1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000d20:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f001 fdf9 	bl	8002924 <HAL_RCCEx_PeriphCLKConfig>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000d38:	f7ff fe92 	bl	8000a60 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3c:	4b26      	ldr	r3, [pc, #152]	; (8000dd8 <HAL_PCD_MspInit+0xec>)
 8000d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d40:	4a25      	ldr	r2, [pc, #148]	; (8000dd8 <HAL_PCD_MspInit+0xec>)
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	6313      	str	r3, [r2, #48]	; 0x30
 8000d48:	4b23      	ldr	r3, [pc, #140]	; (8000dd8 <HAL_PCD_MspInit+0xec>)
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d54:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d6e:	230a      	movs	r3, #10
 8000d70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d74:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4818      	ldr	r0, [pc, #96]	; (8000ddc <HAL_PCD_MspInit+0xf0>)
 8000d7c:	f000 fd5e 	bl	800183c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d94:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4810      	ldr	r0, [pc, #64]	; (8000ddc <HAL_PCD_MspInit+0xf0>)
 8000d9c:	f000 fd4e 	bl	800183c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000da0:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <HAL_PCD_MspInit+0xec>)
 8000da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000da4:	4a0c      	ldr	r2, [pc, #48]	; (8000dd8 <HAL_PCD_MspInit+0xec>)
 8000da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000daa:	6353      	str	r3, [r2, #52]	; 0x34
 8000dac:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <HAL_PCD_MspInit+0xec>)
 8000dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <HAL_PCD_MspInit+0xec>)
 8000dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbc:	4a06      	ldr	r2, [pc, #24]	; (8000dd8 <HAL_PCD_MspInit+0xec>)
 8000dbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc2:	6453      	str	r3, [r2, #68]	; 0x44
 8000dc4:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <HAL_PCD_MspInit+0xec>)
 8000dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000dd0:	bf00      	nop
 8000dd2:	37b8      	adds	r7, #184	; 0xb8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020000 	.word	0x40020000

08000de0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08e      	sub	sp, #56	; 0x38
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000de8:	2300      	movs	r3, #0
 8000dea:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000df0:	4b33      	ldr	r3, [pc, #204]	; (8000ec0 <HAL_InitTick+0xe0>)
 8000df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df4:	4a32      	ldr	r2, [pc, #200]	; (8000ec0 <HAL_InitTick+0xe0>)
 8000df6:	f043 0310 	orr.w	r3, r3, #16
 8000dfa:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfc:	4b30      	ldr	r3, [pc, #192]	; (8000ec0 <HAL_InitTick+0xe0>)
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e00:	f003 0310 	and.w	r3, r3, #16
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e08:	f107 0210 	add.w	r2, r7, #16
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	4611      	mov	r1, r2
 8000e12:	4618      	mov	r0, r3
 8000e14:	f001 fd54 	bl	80028c0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e18:	6a3b      	ldr	r3, [r7, #32]
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d103      	bne.n	8000e2a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e22:	f001 fd25 	bl	8002870 <HAL_RCC_GetPCLK1Freq>
 8000e26:	6378      	str	r0, [r7, #52]	; 0x34
 8000e28:	e004      	b.n	8000e34 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e2a:	f001 fd21 	bl	8002870 <HAL_RCC_GetPCLK1Freq>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e36:	4a23      	ldr	r2, [pc, #140]	; (8000ec4 <HAL_InitTick+0xe4>)
 8000e38:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3c:	0c9b      	lsrs	r3, r3, #18
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e42:	4b21      	ldr	r3, [pc, #132]	; (8000ec8 <HAL_InitTick+0xe8>)
 8000e44:	4a21      	ldr	r2, [pc, #132]	; (8000ecc <HAL_InitTick+0xec>)
 8000e46:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e48:	4b1f      	ldr	r3, [pc, #124]	; (8000ec8 <HAL_InitTick+0xe8>)
 8000e4a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e4e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e50:	4a1d      	ldr	r2, [pc, #116]	; (8000ec8 <HAL_InitTick+0xe8>)
 8000e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e54:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e56:	4b1c      	ldr	r3, [pc, #112]	; (8000ec8 <HAL_InitTick+0xe8>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5c:	4b1a      	ldr	r3, [pc, #104]	; (8000ec8 <HAL_InitTick+0xe8>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e62:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <HAL_InitTick+0xe8>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e68:	4817      	ldr	r0, [pc, #92]	; (8000ec8 <HAL_InitTick+0xe8>)
 8000e6a:	f002 f983 	bl	8003174 <HAL_TIM_Base_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000e74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d11b      	bne.n	8000eb4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e7c:	4812      	ldr	r0, [pc, #72]	; (8000ec8 <HAL_InitTick+0xe8>)
 8000e7e:	f002 f9db 	bl	8003238 <HAL_TIM_Base_Start_IT>
 8000e82:	4603      	mov	r3, r0
 8000e84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000e88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d111      	bne.n	8000eb4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e90:	2036      	movs	r0, #54	; 0x36
 8000e92:	f000 f99f 	bl	80011d4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2b0f      	cmp	r3, #15
 8000e9a:	d808      	bhi.n	8000eae <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	2036      	movs	r0, #54	; 0x36
 8000ea2:	f000 f97b 	bl	800119c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <HAL_InitTick+0xf0>)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6013      	str	r3, [r2, #0]
 8000eac:	e002      	b.n	8000eb4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000eb4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3738      	adds	r7, #56	; 0x38
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	431bde83 	.word	0x431bde83
 8000ec8:	200007f8 	.word	0x200007f8
 8000ecc:	40001000 	.word	0x40001000
 8000ed0:	20000004 	.word	0x20000004

08000ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <NMI_Handler+0x4>

08000eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <HardFault_Handler+0x4>

08000ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <MemManage_Handler+0x4>

08000ee6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <BusFault_Handler+0x4>

08000eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <UsageFault_Handler+0x4>

08000ef2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f04:	4802      	ldr	r0, [pc, #8]	; (8000f10 <TIM6_DAC_IRQHandler+0x10>)
 8000f06:	f002 fa0f 	bl	8003328 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200007f8 	.word	0x200007f8

08000f14 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <SystemInit+0x20>)
 8000f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f1e:	4a05      	ldr	r2, [pc, #20]	; (8000f34 <SystemInit+0x20>)
 8000f20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f3c:	480d      	ldr	r0, [pc, #52]	; (8000f74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f3e:	490e      	ldr	r1, [pc, #56]	; (8000f78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f40:	4a0e      	ldr	r2, [pc, #56]	; (8000f7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f44:	e002      	b.n	8000f4c <LoopCopyDataInit>

08000f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4a:	3304      	adds	r3, #4

08000f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f50:	d3f9      	bcc.n	8000f46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f52:	4a0b      	ldr	r2, [pc, #44]	; (8000f80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f54:	4c0b      	ldr	r4, [pc, #44]	; (8000f84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f58:	e001      	b.n	8000f5e <LoopFillZerobss>

08000f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f5c:	3204      	adds	r2, #4

08000f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f60:	d3fb      	bcc.n	8000f5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f62:	f7ff ffd7 	bl	8000f14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f66:	f006 fa21 	bl	80073ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6a:	f7ff fae7 	bl	800053c <main>
  bx  lr    
 8000f6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f70:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f78:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f7c:	080074f0 	.word	0x080074f0
  ldr r2, =_sbss
 8000f80:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8000f84:	20005190 	.word	0x20005190

08000f88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f88:	e7fe      	b.n	8000f88 <ADC_IRQHandler>

08000f8a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f8e:	2003      	movs	r0, #3
 8000f90:	f000 f8f9 	bl	8001186 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f94:	200f      	movs	r0, #15
 8000f96:	f7ff ff23 	bl	8000de0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f9a:	f7ff fd67 	bl	8000a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f9e:	2300      	movs	r3, #0
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_IncTick+0x20>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_IncTick+0x24>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <HAL_IncTick+0x24>)
 8000fb6:	6013      	str	r3, [r2, #0]
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20000008 	.word	0x20000008
 8000fc8:	20000844 	.word	0x20000844

08000fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd0:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <HAL_GetTick+0x14>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20000844 	.word	0x20000844

08000fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fec:	f7ff ffee 	bl	8000fcc <HAL_GetTick>
 8000ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ffc:	d005      	beq.n	800100a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <HAL_Delay+0x44>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	461a      	mov	r2, r3
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	4413      	add	r3, r2
 8001008:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800100a:	bf00      	nop
 800100c:	f7ff ffde 	bl	8000fcc <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	68fa      	ldr	r2, [r7, #12]
 8001018:	429a      	cmp	r2, r3
 800101a:	d8f7      	bhi.n	800100c <HAL_Delay+0x28>
  {
  }
}
 800101c:	bf00      	nop
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000008 	.word	0x20000008

0800102c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800103c:	4b0b      	ldr	r3, [pc, #44]	; (800106c <__NVIC_SetPriorityGrouping+0x40>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001048:	4013      	ands	r3, r2
 800104a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <__NVIC_SetPriorityGrouping+0x44>)
 8001056:	4313      	orrs	r3, r2
 8001058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105a:	4a04      	ldr	r2, [pc, #16]	; (800106c <__NVIC_SetPriorityGrouping+0x40>)
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	60d3      	str	r3, [r2, #12]
}
 8001060:	bf00      	nop
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000ed00 	.word	0xe000ed00
 8001070:	05fa0000 	.word	0x05fa0000

08001074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <__NVIC_GetPriorityGrouping+0x18>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	0a1b      	lsrs	r3, r3, #8
 800107e:	f003 0307 	and.w	r3, r3, #7
}
 8001082:	4618      	mov	r0, r3
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	db0b      	blt.n	80010ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	f003 021f 	and.w	r2, r3, #31
 80010a8:	4907      	ldr	r1, [pc, #28]	; (80010c8 <__NVIC_EnableIRQ+0x38>)
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	095b      	lsrs	r3, r3, #5
 80010b0:	2001      	movs	r0, #1
 80010b2:	fa00 f202 	lsl.w	r2, r0, r2
 80010b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000e100 	.word	0xe000e100

080010cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	6039      	str	r1, [r7, #0]
 80010d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	db0a      	blt.n	80010f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	490c      	ldr	r1, [pc, #48]	; (8001118 <__NVIC_SetPriority+0x4c>)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	0112      	lsls	r2, r2, #4
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	440b      	add	r3, r1
 80010f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f4:	e00a      	b.n	800110c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	4908      	ldr	r1, [pc, #32]	; (800111c <__NVIC_SetPriority+0x50>)
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	f003 030f 	and.w	r3, r3, #15
 8001102:	3b04      	subs	r3, #4
 8001104:	0112      	lsls	r2, r2, #4
 8001106:	b2d2      	uxtb	r2, r2
 8001108:	440b      	add	r3, r1
 800110a:	761a      	strb	r2, [r3, #24]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000e100 	.word	0xe000e100
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001120:	b480      	push	{r7}
 8001122:	b089      	sub	sp, #36	; 0x24
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	f1c3 0307 	rsb	r3, r3, #7
 800113a:	2b04      	cmp	r3, #4
 800113c:	bf28      	it	cs
 800113e:	2304      	movcs	r3, #4
 8001140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3304      	adds	r3, #4
 8001146:	2b06      	cmp	r3, #6
 8001148:	d902      	bls.n	8001150 <NVIC_EncodePriority+0x30>
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	3b03      	subs	r3, #3
 800114e:	e000      	b.n	8001152 <NVIC_EncodePriority+0x32>
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	f04f 32ff 	mov.w	r2, #4294967295
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43da      	mvns	r2, r3
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	401a      	ands	r2, r3
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001168:	f04f 31ff 	mov.w	r1, #4294967295
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	fa01 f303 	lsl.w	r3, r1, r3
 8001172:	43d9      	mvns	r1, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001178:	4313      	orrs	r3, r2
         );
}
 800117a:	4618      	mov	r0, r3
 800117c:	3724      	adds	r7, #36	; 0x24
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff ff4c 	bl	800102c <__NVIC_SetPriorityGrouping>
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
 80011a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ae:	f7ff ff61 	bl	8001074 <__NVIC_GetPriorityGrouping>
 80011b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	68b9      	ldr	r1, [r7, #8]
 80011b8:	6978      	ldr	r0, [r7, #20]
 80011ba:	f7ff ffb1 	bl	8001120 <NVIC_EncodePriority>
 80011be:	4602      	mov	r2, r0
 80011c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ff80 	bl	80010cc <__NVIC_SetPriority>
}
 80011cc:	bf00      	nop
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff ff54 	bl	8001090 <__NVIC_EnableIRQ>
}
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e06a      	b.n	80012d8 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001208:	2b00      	cmp	r3, #0
 800120a:	d106      	bne.n	800121a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2223      	movs	r2, #35	; 0x23
 8001210:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff fc51 	bl	8000abc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121a:	4b31      	ldr	r3, [pc, #196]	; (80012e0 <HAL_ETH_Init+0xf0>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	4a30      	ldr	r2, [pc, #192]	; (80012e0 <HAL_ETH_Init+0xf0>)
 8001220:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001224:	6453      	str	r3, [r2, #68]	; 0x44
 8001226:	4b2e      	ldr	r3, [pc, #184]	; (80012e0 <HAL_ETH_Init+0xf0>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001232:	4b2c      	ldr	r3, [pc, #176]	; (80012e4 <HAL_ETH_Init+0xf4>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	4a2b      	ldr	r2, [pc, #172]	; (80012e4 <HAL_ETH_Init+0xf4>)
 8001238:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800123c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800123e:	4b29      	ldr	r3, [pc, #164]	; (80012e4 <HAL_ETH_Init+0xf4>)
 8001240:	685a      	ldr	r2, [r3, #4]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	4927      	ldr	r1, [pc, #156]	; (80012e4 <HAL_ETH_Init+0xf4>)
 8001248:	4313      	orrs	r3, r2
 800124a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800124c:	4b25      	ldr	r3, [pc, #148]	; (80012e4 <HAL_ETH_Init+0xf4>)
 800124e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	6812      	ldr	r2, [r2, #0]
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001266:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001268:	f7ff feb0 	bl	8000fcc <HAL_GetTick>
 800126c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800126e:	e011      	b.n	8001294 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001270:	f7ff feac 	bl	8000fcc <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800127e:	d909      	bls.n	8001294 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2204      	movs	r2, #4
 8001284:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	22e0      	movs	r2, #224	; 0xe0
 800128c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e021      	b.n	80012d8 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1e4      	bne.n	8001270 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f000 f958 	bl	800155c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 f9ff 	bl	80016b0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f000 fa55 	bl	8001762 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	461a      	mov	r2, r3
 80012be:	2100      	movs	r1, #0
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f000 f9bd 	bl	8001640 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2210      	movs	r2, #16
 80012d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80012d6:	2300      	movs	r3, #0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40013800 	.word	0x40013800

080012e8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	4b51      	ldr	r3, [pc, #324]	; (8001444 <ETH_SetMACConfig+0x15c>)
 80012fe:	4013      	ands	r3, r2
 8001300:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	7c1b      	ldrb	r3, [r3, #16]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d102      	bne.n	8001310 <ETH_SetMACConfig+0x28>
 800130a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800130e:	e000      	b.n	8001312 <ETH_SetMACConfig+0x2a>
 8001310:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	7c5b      	ldrb	r3, [r3, #17]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d102      	bne.n	8001320 <ETH_SetMACConfig+0x38>
 800131a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800131e:	e000      	b.n	8001322 <ETH_SetMACConfig+0x3a>
 8001320:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001322:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001328:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	7fdb      	ldrb	r3, [r3, #31]
 800132e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001330:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001336:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	7f92      	ldrb	r2, [r2, #30]
 800133c:	2a00      	cmp	r2, #0
 800133e:	d102      	bne.n	8001346 <ETH_SetMACConfig+0x5e>
 8001340:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001344:	e000      	b.n	8001348 <ETH_SetMACConfig+0x60>
 8001346:	2200      	movs	r2, #0
                        macconf->Speed |
 8001348:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	7f1b      	ldrb	r3, [r3, #28]
 800134e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001350:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001356:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	791b      	ldrb	r3, [r3, #4]
 800135c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800135e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001366:	2a00      	cmp	r2, #0
 8001368:	d102      	bne.n	8001370 <ETH_SetMACConfig+0x88>
 800136a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800136e:	e000      	b.n	8001372 <ETH_SetMACConfig+0x8a>
 8001370:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001372:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	7bdb      	ldrb	r3, [r3, #15]
 8001378:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800137a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001380:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001388:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800138a:	4313      	orrs	r3, r2
 800138c:	68fa      	ldr	r2, [r7, #12]
 800138e:	4313      	orrs	r3, r2
 8001390:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013a2:	2001      	movs	r0, #1
 80013a4:	f7ff fe1e 	bl	8000fe4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	68fa      	ldr	r2, [r7, #12]
 80013ae:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80013b8:	68fa      	ldr	r2, [r7, #12]
 80013ba:	f64f 7341 	movw	r3, #65345	; 0xff41
 80013be:	4013      	ands	r3, r2
 80013c0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80013ce:	2a00      	cmp	r2, #0
 80013d0:	d101      	bne.n	80013d6 <ETH_SetMACConfig+0xee>
 80013d2:	2280      	movs	r2, #128	; 0x80
 80013d4:	e000      	b.n	80013d8 <ETH_SetMACConfig+0xf0>
 80013d6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013d8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80013de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80013e0:	683a      	ldr	r2, [r7, #0]
 80013e2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80013e6:	2a01      	cmp	r2, #1
 80013e8:	d101      	bne.n	80013ee <ETH_SetMACConfig+0x106>
 80013ea:	2208      	movs	r2, #8
 80013ec:	e000      	b.n	80013f0 <ETH_SetMACConfig+0x108>
 80013ee:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80013f0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80013f8:	2a01      	cmp	r2, #1
 80013fa:	d101      	bne.n	8001400 <ETH_SetMACConfig+0x118>
 80013fc:	2204      	movs	r2, #4
 80013fe:	e000      	b.n	8001402 <ETH_SetMACConfig+0x11a>
 8001400:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001402:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800140a:	2a01      	cmp	r2, #1
 800140c:	d101      	bne.n	8001412 <ETH_SetMACConfig+0x12a>
 800140e:	2202      	movs	r2, #2
 8001410:	e000      	b.n	8001414 <ETH_SetMACConfig+0x12c>
 8001412:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001414:	4313      	orrs	r3, r2
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	4313      	orrs	r3, r2
 800141a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800142c:	2001      	movs	r0, #1
 800142e:	f7ff fdd9 	bl	8000fe4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	619a      	str	r2, [r3, #24]
}
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	ff20810f 	.word	0xff20810f

08001448 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	4b3d      	ldr	r3, [pc, #244]	; (8001558 <ETH_SetDMAConfig+0x110>)
 8001462:	4013      	ands	r3, r2
 8001464:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	7b1b      	ldrb	r3, [r3, #12]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d102      	bne.n	8001474 <ETH_SetDMAConfig+0x2c>
 800146e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001472:	e000      	b.n	8001476 <ETH_SetDMAConfig+0x2e>
 8001474:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	7b5b      	ldrb	r3, [r3, #13]
 800147a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800147c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	7f52      	ldrb	r2, [r2, #29]
 8001482:	2a00      	cmp	r2, #0
 8001484:	d102      	bne.n	800148c <ETH_SetDMAConfig+0x44>
 8001486:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800148a:	e000      	b.n	800148e <ETH_SetDMAConfig+0x46>
 800148c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800148e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	7b9b      	ldrb	r3, [r3, #14]
 8001494:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001496:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800149c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	7f1b      	ldrb	r3, [r3, #28]
 80014a2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80014a4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	7f9b      	ldrb	r3, [r3, #30]
 80014aa:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80014ac:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80014b2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014ba:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80014bc:	4313      	orrs	r3, r2
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014cc:	461a      	mov	r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014de:	2001      	movs	r0, #1
 80014e0:	f7ff fd80 	bl	8000fe4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014ec:	461a      	mov	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	791b      	ldrb	r3, [r3, #4]
 80014f6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80014fc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001502:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001508:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001510:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001512:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001518:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800151a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001520:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	6812      	ldr	r2, [r2, #0]
 8001526:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800152a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800152e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800153c:	2001      	movs	r0, #1
 800153e:	f7ff fd51 	bl	8000fe4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800154a:	461a      	mov	r2, r3
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6013      	str	r3, [r2, #0]
}
 8001550:	bf00      	nop
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	f8de3f23 	.word	0xf8de3f23

0800155c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b0a6      	sub	sp, #152	; 0x98
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001564:	2301      	movs	r3, #1
 8001566:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800156a:	2301      	movs	r3, #1
 800156c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001570:	2300      	movs	r3, #0
 8001572:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001574:	2300      	movs	r3, #0
 8001576:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800157a:	2301      	movs	r3, #1
 800157c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001580:	2300      	movs	r3, #0
 8001582:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001586:	2301      	movs	r3, #1
 8001588:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001592:	2300      	movs	r3, #0
 8001594:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001598:	2300      	movs	r3, #0
 800159a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80015a6:	2300      	movs	r3, #0
 80015a8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80015ac:	2300      	movs	r3, #0
 80015ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80015be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015c2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80015c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80015d0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015d4:	4619      	mov	r1, r3
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff fe86 	bl	80012e8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80015dc:	2301      	movs	r3, #1
 80015de:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80015e0:	2301      	movs	r3, #1
 80015e2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80015e4:	2301      	movs	r3, #1
 80015e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80015ea:	2301      	movs	r3, #1
 80015ec:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80015fe:	2300      	movs	r3, #0
 8001600:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001602:	2301      	movs	r3, #1
 8001604:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001608:	2301      	movs	r3, #1
 800160a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800160c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001610:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001612:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001616:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001618:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800161c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800161e:	2301      	movs	r3, #1
 8001620:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001624:	2300      	movs	r3, #0
 8001626:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001628:	2300      	movs	r3, #0
 800162a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800162c:	f107 0308 	add.w	r3, r7, #8
 8001630:	4619      	mov	r1, r3
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff ff08 	bl	8001448 <ETH_SetDMAConfig>
}
 8001638:	bf00      	nop
 800163a:	3798      	adds	r7, #152	; 0x98
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001640:	b480      	push	{r7}
 8001642:	b087      	sub	sp, #28
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3305      	adds	r3, #5
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	021b      	lsls	r3, r3, #8
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	3204      	adds	r2, #4
 8001658:	7812      	ldrb	r2, [r2, #0]
 800165a:	4313      	orrs	r3, r2
 800165c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <ETH_MACAddressConfig+0x68>)
 8001662:	4413      	add	r3, r2
 8001664:	461a      	mov	r2, r3
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	3303      	adds	r3, #3
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	061a      	lsls	r2, r3, #24
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	3302      	adds	r3, #2
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	041b      	lsls	r3, r3, #16
 800167a:	431a      	orrs	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3301      	adds	r3, #1
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	021b      	lsls	r3, r3, #8
 8001684:	4313      	orrs	r3, r2
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	7812      	ldrb	r2, [r2, #0]
 800168a:	4313      	orrs	r3, r2
 800168c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <ETH_MACAddressConfig+0x6c>)
 8001692:	4413      	add	r3, r2
 8001694:	461a      	mov	r2, r3
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	6013      	str	r3, [r2, #0]
}
 800169a:	bf00      	nop
 800169c:	371c      	adds	r7, #28
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	40028040 	.word	0x40028040
 80016ac:	40028044 	.word	0x40028044

080016b0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80016b8:	2300      	movs	r3, #0
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	e03e      	b.n	800173c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68d9      	ldr	r1, [r3, #12]
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	4613      	mov	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	440b      	add	r3, r1
 80016ce:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	2200      	movs	r2, #0
 80016da:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	2200      	movs	r2, #0
 80016e6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80016e8:	68b9      	ldr	r1, [r7, #8]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	68fa      	ldr	r2, [r7, #12]
 80016ee:	3206      	adds	r2, #6
 80016f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2b02      	cmp	r3, #2
 8001704:	d80c      	bhi.n	8001720 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	68d9      	ldr	r1, [r3, #12]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	1c5a      	adds	r2, r3, #1
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	440b      	add	r3, r1
 8001718:	461a      	mov	r2, r3
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	e004      	b.n	800172a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	461a      	mov	r2, r3
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	3301      	adds	r3, #1
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2b03      	cmp	r3, #3
 8001740:	d9bd      	bls.n	80016be <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68da      	ldr	r2, [r3, #12]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001754:	611a      	str	r2, [r3, #16]
}
 8001756:	bf00      	nop
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001762:	b480      	push	{r7}
 8001764:	b085      	sub	sp, #20
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	e046      	b.n	80017fe <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6919      	ldr	r1, [r3, #16]
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	4613      	mov	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	440b      	add	r3, r1
 8001780:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	2200      	movs	r2, #0
 800178c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	2200      	movs	r2, #0
 8001798:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	2200      	movs	r2, #0
 800179e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	2200      	movs	r2, #0
 80017a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017ac:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80017b4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80017c2:	68b9      	ldr	r1, [r7, #8]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	3212      	adds	r2, #18
 80017ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d80c      	bhi.n	80017ee <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6919      	ldr	r1, [r3, #16]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	1c5a      	adds	r2, r3, #1
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	440b      	add	r3, r1
 80017e6:	461a      	mov	r2, r3
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	60da      	str	r2, [r3, #12]
 80017ec:	e004      	b.n	80017f8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	461a      	mov	r2, r3
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	3301      	adds	r3, #1
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2b03      	cmp	r3, #3
 8001802:	d9b5      	bls.n	8001770 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691a      	ldr	r2, [r3, #16]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800182e:	60da      	str	r2, [r3, #12]
}
 8001830:	bf00      	nop
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800183c:	b480      	push	{r7}
 800183e:	b089      	sub	sp, #36	; 0x24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001846:	2300      	movs	r3, #0
 8001848:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800184a:	2300      	movs	r3, #0
 800184c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800184e:	2300      	movs	r3, #0
 8001850:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001852:	2300      	movs	r3, #0
 8001854:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001856:	2300      	movs	r3, #0
 8001858:	61fb      	str	r3, [r7, #28]
 800185a:	e175      	b.n	8001b48 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800185c:	2201      	movs	r2, #1
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	4013      	ands	r3, r2
 800186e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	429a      	cmp	r2, r3
 8001876:	f040 8164 	bne.w	8001b42 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	2b01      	cmp	r3, #1
 8001884:	d005      	beq.n	8001892 <HAL_GPIO_Init+0x56>
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f003 0303 	and.w	r3, r3, #3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d130      	bne.n	80018f4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	2203      	movs	r2, #3
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43db      	mvns	r3, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4013      	ands	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	68da      	ldr	r2, [r3, #12]
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018c8:	2201      	movs	r2, #1
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4013      	ands	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	091b      	lsrs	r3, r3, #4
 80018de:	f003 0201 	and.w	r2, r3, #1
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 0303 	and.w	r3, r3, #3
 80018fc:	2b03      	cmp	r3, #3
 80018fe:	d017      	beq.n	8001930 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	2203      	movs	r2, #3
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4013      	ands	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4313      	orrs	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 0303 	and.w	r3, r3, #3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d123      	bne.n	8001984 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	08da      	lsrs	r2, r3, #3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3208      	adds	r2, #8
 8001944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001948:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	220f      	movs	r2, #15
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	691a      	ldr	r2, [r3, #16]
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	08da      	lsrs	r2, r3, #3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	3208      	adds	r2, #8
 800197e:	69b9      	ldr	r1, [r7, #24]
 8001980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	2203      	movs	r2, #3
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 0203 	and.w	r2, r3, #3
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f000 80be 	beq.w	8001b42 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c6:	4b66      	ldr	r3, [pc, #408]	; (8001b60 <HAL_GPIO_Init+0x324>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	4a65      	ldr	r2, [pc, #404]	; (8001b60 <HAL_GPIO_Init+0x324>)
 80019cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d0:	6453      	str	r3, [r2, #68]	; 0x44
 80019d2:	4b63      	ldr	r3, [pc, #396]	; (8001b60 <HAL_GPIO_Init+0x324>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80019de:	4a61      	ldr	r2, [pc, #388]	; (8001b64 <HAL_GPIO_Init+0x328>)
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	089b      	lsrs	r3, r3, #2
 80019e4:	3302      	adds	r3, #2
 80019e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	f003 0303 	and.w	r3, r3, #3
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	220f      	movs	r2, #15
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43db      	mvns	r3, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4013      	ands	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a58      	ldr	r2, [pc, #352]	; (8001b68 <HAL_GPIO_Init+0x32c>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d037      	beq.n	8001a7a <HAL_GPIO_Init+0x23e>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a57      	ldr	r2, [pc, #348]	; (8001b6c <HAL_GPIO_Init+0x330>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d031      	beq.n	8001a76 <HAL_GPIO_Init+0x23a>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a56      	ldr	r2, [pc, #344]	; (8001b70 <HAL_GPIO_Init+0x334>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d02b      	beq.n	8001a72 <HAL_GPIO_Init+0x236>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a55      	ldr	r2, [pc, #340]	; (8001b74 <HAL_GPIO_Init+0x338>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d025      	beq.n	8001a6e <HAL_GPIO_Init+0x232>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a54      	ldr	r2, [pc, #336]	; (8001b78 <HAL_GPIO_Init+0x33c>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d01f      	beq.n	8001a6a <HAL_GPIO_Init+0x22e>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a53      	ldr	r2, [pc, #332]	; (8001b7c <HAL_GPIO_Init+0x340>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d019      	beq.n	8001a66 <HAL_GPIO_Init+0x22a>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a52      	ldr	r2, [pc, #328]	; (8001b80 <HAL_GPIO_Init+0x344>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d013      	beq.n	8001a62 <HAL_GPIO_Init+0x226>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a51      	ldr	r2, [pc, #324]	; (8001b84 <HAL_GPIO_Init+0x348>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d00d      	beq.n	8001a5e <HAL_GPIO_Init+0x222>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a50      	ldr	r2, [pc, #320]	; (8001b88 <HAL_GPIO_Init+0x34c>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d007      	beq.n	8001a5a <HAL_GPIO_Init+0x21e>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a4f      	ldr	r2, [pc, #316]	; (8001b8c <HAL_GPIO_Init+0x350>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d101      	bne.n	8001a56 <HAL_GPIO_Init+0x21a>
 8001a52:	2309      	movs	r3, #9
 8001a54:	e012      	b.n	8001a7c <HAL_GPIO_Init+0x240>
 8001a56:	230a      	movs	r3, #10
 8001a58:	e010      	b.n	8001a7c <HAL_GPIO_Init+0x240>
 8001a5a:	2308      	movs	r3, #8
 8001a5c:	e00e      	b.n	8001a7c <HAL_GPIO_Init+0x240>
 8001a5e:	2307      	movs	r3, #7
 8001a60:	e00c      	b.n	8001a7c <HAL_GPIO_Init+0x240>
 8001a62:	2306      	movs	r3, #6
 8001a64:	e00a      	b.n	8001a7c <HAL_GPIO_Init+0x240>
 8001a66:	2305      	movs	r3, #5
 8001a68:	e008      	b.n	8001a7c <HAL_GPIO_Init+0x240>
 8001a6a:	2304      	movs	r3, #4
 8001a6c:	e006      	b.n	8001a7c <HAL_GPIO_Init+0x240>
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e004      	b.n	8001a7c <HAL_GPIO_Init+0x240>
 8001a72:	2302      	movs	r3, #2
 8001a74:	e002      	b.n	8001a7c <HAL_GPIO_Init+0x240>
 8001a76:	2301      	movs	r3, #1
 8001a78:	e000      	b.n	8001a7c <HAL_GPIO_Init+0x240>
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	69fa      	ldr	r2, [r7, #28]
 8001a7e:	f002 0203 	and.w	r2, r2, #3
 8001a82:	0092      	lsls	r2, r2, #2
 8001a84:	4093      	lsls	r3, r2
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a8c:	4935      	ldr	r1, [pc, #212]	; (8001b64 <HAL_GPIO_Init+0x328>)
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	089b      	lsrs	r3, r3, #2
 8001a92:	3302      	adds	r3, #2
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a9a:	4b3d      	ldr	r3, [pc, #244]	; (8001b90 <HAL_GPIO_Init+0x354>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001abe:	4a34      	ldr	r2, [pc, #208]	; (8001b90 <HAL_GPIO_Init+0x354>)
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ac4:	4b32      	ldr	r3, [pc, #200]	; (8001b90 <HAL_GPIO_Init+0x354>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ae8:	4a29      	ldr	r2, [pc, #164]	; (8001b90 <HAL_GPIO_Init+0x354>)
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001aee:	4b28      	ldr	r3, [pc, #160]	; (8001b90 <HAL_GPIO_Init+0x354>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	43db      	mvns	r3, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4013      	ands	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b12:	4a1f      	ldr	r2, [pc, #124]	; (8001b90 <HAL_GPIO_Init+0x354>)
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b18:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <HAL_GPIO_Init+0x354>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	43db      	mvns	r3, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d003      	beq.n	8001b3c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b3c:	4a14      	ldr	r2, [pc, #80]	; (8001b90 <HAL_GPIO_Init+0x354>)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3301      	adds	r3, #1
 8001b46:	61fb      	str	r3, [r7, #28]
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	2b0f      	cmp	r3, #15
 8001b4c:	f67f ae86 	bls.w	800185c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001b50:	bf00      	nop
 8001b52:	bf00      	nop
 8001b54:	3724      	adds	r7, #36	; 0x24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40013800 	.word	0x40013800
 8001b68:	40020000 	.word	0x40020000
 8001b6c:	40020400 	.word	0x40020400
 8001b70:	40020800 	.word	0x40020800
 8001b74:	40020c00 	.word	0x40020c00
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40021400 	.word	0x40021400
 8001b80:	40021800 	.word	0x40021800
 8001b84:	40021c00 	.word	0x40021c00
 8001b88:	40022000 	.word	0x40022000
 8001b8c:	40022400 	.word	0x40022400
 8001b90:	40013c00 	.word	0x40013c00

08001b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	807b      	strh	r3, [r7, #2]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ba4:	787b      	ldrb	r3, [r7, #1]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001baa:	887a      	ldrh	r2, [r7, #2]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001bb0:	e003      	b.n	8001bba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001bb2:	887b      	ldrh	r3, [r7, #2]
 8001bb4:	041a      	lsls	r2, r3, #16
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	619a      	str	r2, [r3, #24]
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bc8:	b08f      	sub	sp, #60	; 0x3c
 8001bca:	af0a      	add	r7, sp, #40	; 0x28
 8001bcc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e116      	b.n	8001e06 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d106      	bne.n	8001bf8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff f87a 	bl	8000cec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2203      	movs	r2, #3
 8001bfc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d102      	bne.n	8001c12 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f002 fa4c 	bl	80040b4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	603b      	str	r3, [r7, #0]
 8001c22:	687e      	ldr	r6, [r7, #4]
 8001c24:	466d      	mov	r5, sp
 8001c26:	f106 0410 	add.w	r4, r6, #16
 8001c2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c36:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c3a:	1d33      	adds	r3, r6, #4
 8001c3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c3e:	6838      	ldr	r0, [r7, #0]
 8001c40:	f002 f9e0 	bl	8004004 <USB_CoreInit>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d005      	beq.n	8001c56 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e0d7      	b.n	8001e06 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f002 fa3a 	bl	80040d6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c62:	2300      	movs	r3, #0
 8001c64:	73fb      	strb	r3, [r7, #15]
 8001c66:	e04a      	b.n	8001cfe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c68:	7bfa      	ldrb	r2, [r7, #15]
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	4413      	add	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	440b      	add	r3, r1
 8001c76:	333d      	adds	r3, #61	; 0x3d
 8001c78:	2201      	movs	r2, #1
 8001c7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c7c:	7bfa      	ldrb	r2, [r7, #15]
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	4413      	add	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	440b      	add	r3, r1
 8001c8a:	333c      	adds	r3, #60	; 0x3c
 8001c8c:	7bfa      	ldrb	r2, [r7, #15]
 8001c8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c90:	7bfa      	ldrb	r2, [r7, #15]
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
 8001c94:	b298      	uxth	r0, r3
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	4413      	add	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	3344      	adds	r3, #68	; 0x44
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ca8:	7bfa      	ldrb	r2, [r7, #15]
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	4613      	mov	r3, r2
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	4413      	add	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	3340      	adds	r3, #64	; 0x40
 8001cb8:	2200      	movs	r2, #0
 8001cba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cbc:	7bfa      	ldrb	r2, [r7, #15]
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	440b      	add	r3, r1
 8001cca:	3348      	adds	r3, #72	; 0x48
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cd0:	7bfa      	ldrb	r2, [r7, #15]
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	4413      	add	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	440b      	add	r3, r1
 8001cde:	334c      	adds	r3, #76	; 0x4c
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ce4:	7bfa      	ldrb	r2, [r7, #15]
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	4413      	add	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	3354      	adds	r3, #84	; 0x54
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	73fb      	strb	r3, [r7, #15]
 8001cfe:	7bfa      	ldrb	r2, [r7, #15]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d3af      	bcc.n	8001c68 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d08:	2300      	movs	r3, #0
 8001d0a:	73fb      	strb	r3, [r7, #15]
 8001d0c:	e044      	b.n	8001d98 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d0e:	7bfa      	ldrb	r2, [r7, #15]
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	4613      	mov	r3, r2
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	4413      	add	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001d20:	2200      	movs	r2, #0
 8001d22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d24:	7bfa      	ldrb	r2, [r7, #15]
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	4413      	add	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001d36:	7bfa      	ldrb	r2, [r7, #15]
 8001d38:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d3a:	7bfa      	ldrb	r2, [r7, #15]
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	4413      	add	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	440b      	add	r3, r1
 8001d48:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d50:	7bfa      	ldrb	r2, [r7, #15]
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	4613      	mov	r3, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	4413      	add	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d66:	7bfa      	ldrb	r2, [r7, #15]
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	4413      	add	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	440b      	add	r3, r1
 8001d74:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d7c:	7bfa      	ldrb	r2, [r7, #15]
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	4613      	mov	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	4413      	add	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	440b      	add	r3, r1
 8001d8a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
 8001d94:	3301      	adds	r3, #1
 8001d96:	73fb      	strb	r3, [r7, #15]
 8001d98:	7bfa      	ldrb	r2, [r7, #15]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d3b5      	bcc.n	8001d0e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	603b      	str	r3, [r7, #0]
 8001da8:	687e      	ldr	r6, [r7, #4]
 8001daa:	466d      	mov	r5, sp
 8001dac:	f106 0410 	add.w	r4, r6, #16
 8001db0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001db2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001db4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001db6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001db8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001dbc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001dc0:	1d33      	adds	r3, r6, #4
 8001dc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dc4:	6838      	ldr	r0, [r7, #0]
 8001dc6:	f002 f9d3 	bl	8004170 <USB_DevInit>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d005      	beq.n	8001ddc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e014      	b.n	8001e06 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d102      	bne.n	8001dfa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f80b 	bl	8001e10 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f002 fb91 	bl	8004526 <USB_DevDisconnect>

  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001e10 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e3e:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <HAL_PCDEx_ActivateLPM+0x44>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	10000003 	.word	0x10000003

08001e58 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e5c:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a04      	ldr	r2, [pc, #16]	; (8001e74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e66:	6013      	str	r3, [r2, #0]
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	40007000 	.word	0x40007000

08001e78 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e82:	4b23      	ldr	r3, [pc, #140]	; (8001f10 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	4a22      	ldr	r2, [pc, #136]	; (8001f10 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8e:	4b20      	ldr	r3, [pc, #128]	; (8001f10 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e96:	603b      	str	r3, [r7, #0]
 8001e98:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001e9a:	4b1e      	ldr	r3, [pc, #120]	; (8001f14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a1d      	ldr	r2, [pc, #116]	; (8001f14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ea6:	f7ff f891 	bl	8000fcc <HAL_GetTick>
 8001eaa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001eac:	e009      	b.n	8001ec2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001eae:	f7ff f88d 	bl	8000fcc <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ebc:	d901      	bls.n	8001ec2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e022      	b.n	8001f08 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001ec2:	4b14      	ldr	r3, [pc, #80]	; (8001f14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ece:	d1ee      	bne.n	8001eae <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001ed0:	4b10      	ldr	r3, [pc, #64]	; (8001f14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a0f      	ldr	r2, [pc, #60]	; (8001f14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ed6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eda:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001edc:	f7ff f876 	bl	8000fcc <HAL_GetTick>
 8001ee0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ee2:	e009      	b.n	8001ef8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ee4:	f7ff f872 	bl	8000fcc <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ef2:	d901      	bls.n	8001ef8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e007      	b.n	8001f08 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ef8:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f04:	d1ee      	bne.n	8001ee4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40007000 	.word	0x40007000

08001f18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001f20:	2300      	movs	r3, #0
 8001f22:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e29b      	b.n	8002466 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f000 8087 	beq.w	800204a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f3c:	4b96      	ldr	r3, [pc, #600]	; (8002198 <HAL_RCC_OscConfig+0x280>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 030c 	and.w	r3, r3, #12
 8001f44:	2b04      	cmp	r3, #4
 8001f46:	d00c      	beq.n	8001f62 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f48:	4b93      	ldr	r3, [pc, #588]	; (8002198 <HAL_RCC_OscConfig+0x280>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f003 030c 	and.w	r3, r3, #12
 8001f50:	2b08      	cmp	r3, #8
 8001f52:	d112      	bne.n	8001f7a <HAL_RCC_OscConfig+0x62>
 8001f54:	4b90      	ldr	r3, [pc, #576]	; (8002198 <HAL_RCC_OscConfig+0x280>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f60:	d10b      	bne.n	8001f7a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f62:	4b8d      	ldr	r3, [pc, #564]	; (8002198 <HAL_RCC_OscConfig+0x280>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d06c      	beq.n	8002048 <HAL_RCC_OscConfig+0x130>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d168      	bne.n	8002048 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e275      	b.n	8002466 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f82:	d106      	bne.n	8001f92 <HAL_RCC_OscConfig+0x7a>
 8001f84:	4b84      	ldr	r3, [pc, #528]	; (8002198 <HAL_RCC_OscConfig+0x280>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a83      	ldr	r2, [pc, #524]	; (8002198 <HAL_RCC_OscConfig+0x280>)
 8001f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f8e:	6013      	str	r3, [r2, #0]
 8001f90:	e02e      	b.n	8001ff0 <HAL_RCC_OscConfig+0xd8>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10c      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x9c>
 8001f9a:	4b7f      	ldr	r3, [pc, #508]	; (8002198 <HAL_RCC_OscConfig+0x280>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a7e      	ldr	r2, [pc, #504]	; (8002198 <HAL_RCC_OscConfig+0x280>)
 8001fa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fa4:	6013      	str	r3, [r2, #0]
 8001fa6:	4b7c      	ldr	r3, [pc, #496]	; (8002198 <HAL_RCC_OscConfig+0x280>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a7b      	ldr	r2, [pc, #492]	; (8002198 <HAL_RCC_OscConfig+0x280>)
 8001fac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fb0:	6013      	str	r3, [r2, #0]
 8001fb2:	e01d      	b.n	8001ff0 <HAL_RCC_OscConfig+0xd8>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fbc:	d10c      	bne.n	8001fd8 <HAL_RCC_OscConfig+0xc0>
 8001fbe:	4b76      	ldr	r3, [pc, #472]	; (8002198 <HAL_RCC_OscConfig+0x280>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a75      	ldr	r2, [pc, #468]	; (8002198 <HAL_RCC_OscConfig+0x280>)
 8001fc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fc8:	6013      	str	r3, [r2, #0]
 8001fca:	4b73      	ldr	r3, [pc, #460]	; (8002198 <HAL_RCC_OscConfig+0x280>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a72      	ldr	r2, [pc, #456]	; (8002198 <HAL_RCC_OscConfig+0x280>)
 8001fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	e00b      	b.n	8001ff0 <HAL_RCC_OscConfig+0xd8>
 8001fd8:	4b6f      	ldr	r3, [pc, #444]	; (8002198 <HAL_RCC_OscConfig+0x280>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a6e      	ldr	r2, [pc, #440]	; (8002198 <HAL_RCC_OscConfig+0x280>)
 8001fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fe2:	6013      	str	r3, [r2, #0]
 8001fe4:	4b6c      	ldr	r3, [pc, #432]	; (8002198 <HAL_RCC_OscConfig+0x280>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a6b      	ldr	r2, [pc, #428]	; (8002198 <HAL_RCC_OscConfig+0x280>)
 8001fea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d013      	beq.n	8002020 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff8:	f7fe ffe8 	bl	8000fcc <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002000:	f7fe ffe4 	bl	8000fcc <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b64      	cmp	r3, #100	; 0x64
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e229      	b.n	8002466 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002012:	4b61      	ldr	r3, [pc, #388]	; (8002198 <HAL_RCC_OscConfig+0x280>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0f0      	beq.n	8002000 <HAL_RCC_OscConfig+0xe8>
 800201e:	e014      	b.n	800204a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002020:	f7fe ffd4 	bl	8000fcc <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002028:	f7fe ffd0 	bl	8000fcc <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b64      	cmp	r3, #100	; 0x64
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e215      	b.n	8002466 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800203a:	4b57      	ldr	r3, [pc, #348]	; (8002198 <HAL_RCC_OscConfig+0x280>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f0      	bne.n	8002028 <HAL_RCC_OscConfig+0x110>
 8002046:	e000      	b.n	800204a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d069      	beq.n	800212a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002056:	4b50      	ldr	r3, [pc, #320]	; (8002198 <HAL_RCC_OscConfig+0x280>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 030c 	and.w	r3, r3, #12
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00b      	beq.n	800207a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002062:	4b4d      	ldr	r3, [pc, #308]	; (8002198 <HAL_RCC_OscConfig+0x280>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 030c 	and.w	r3, r3, #12
 800206a:	2b08      	cmp	r3, #8
 800206c:	d11c      	bne.n	80020a8 <HAL_RCC_OscConfig+0x190>
 800206e:	4b4a      	ldr	r3, [pc, #296]	; (8002198 <HAL_RCC_OscConfig+0x280>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d116      	bne.n	80020a8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800207a:	4b47      	ldr	r3, [pc, #284]	; (8002198 <HAL_RCC_OscConfig+0x280>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d005      	beq.n	8002092 <HAL_RCC_OscConfig+0x17a>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d001      	beq.n	8002092 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e1e9      	b.n	8002466 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002092:	4b41      	ldr	r3, [pc, #260]	; (8002198 <HAL_RCC_OscConfig+0x280>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	493d      	ldr	r1, [pc, #244]	; (8002198 <HAL_RCC_OscConfig+0x280>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020a6:	e040      	b.n	800212a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d023      	beq.n	80020f8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020b0:	4b39      	ldr	r3, [pc, #228]	; (8002198 <HAL_RCC_OscConfig+0x280>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a38      	ldr	r2, [pc, #224]	; (8002198 <HAL_RCC_OscConfig+0x280>)
 80020b6:	f043 0301 	orr.w	r3, r3, #1
 80020ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020bc:	f7fe ff86 	bl	8000fcc <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c4:	f7fe ff82 	bl	8000fcc <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e1c7      	b.n	8002466 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d6:	4b30      	ldr	r3, [pc, #192]	; (8002198 <HAL_RCC_OscConfig+0x280>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0f0      	beq.n	80020c4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e2:	4b2d      	ldr	r3, [pc, #180]	; (8002198 <HAL_RCC_OscConfig+0x280>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	4929      	ldr	r1, [pc, #164]	; (8002198 <HAL_RCC_OscConfig+0x280>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	600b      	str	r3, [r1, #0]
 80020f6:	e018      	b.n	800212a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020f8:	4b27      	ldr	r3, [pc, #156]	; (8002198 <HAL_RCC_OscConfig+0x280>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a26      	ldr	r2, [pc, #152]	; (8002198 <HAL_RCC_OscConfig+0x280>)
 80020fe:	f023 0301 	bic.w	r3, r3, #1
 8002102:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002104:	f7fe ff62 	bl	8000fcc <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800210c:	f7fe ff5e 	bl	8000fcc <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e1a3      	b.n	8002466 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800211e:	4b1e      	ldr	r3, [pc, #120]	; (8002198 <HAL_RCC_OscConfig+0x280>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f0      	bne.n	800210c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	2b00      	cmp	r3, #0
 8002134:	d038      	beq.n	80021a8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d019      	beq.n	8002172 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800213e:	4b16      	ldr	r3, [pc, #88]	; (8002198 <HAL_RCC_OscConfig+0x280>)
 8002140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002142:	4a15      	ldr	r2, [pc, #84]	; (8002198 <HAL_RCC_OscConfig+0x280>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800214a:	f7fe ff3f 	bl	8000fcc <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002152:	f7fe ff3b 	bl	8000fcc <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e180      	b.n	8002466 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002164:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <HAL_RCC_OscConfig+0x280>)
 8002166:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0f0      	beq.n	8002152 <HAL_RCC_OscConfig+0x23a>
 8002170:	e01a      	b.n	80021a8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002172:	4b09      	ldr	r3, [pc, #36]	; (8002198 <HAL_RCC_OscConfig+0x280>)
 8002174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002176:	4a08      	ldr	r2, [pc, #32]	; (8002198 <HAL_RCC_OscConfig+0x280>)
 8002178:	f023 0301 	bic.w	r3, r3, #1
 800217c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217e:	f7fe ff25 	bl	8000fcc <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002184:	e00a      	b.n	800219c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002186:	f7fe ff21 	bl	8000fcc <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d903      	bls.n	800219c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e166      	b.n	8002466 <HAL_RCC_OscConfig+0x54e>
 8002198:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800219c:	4b92      	ldr	r3, [pc, #584]	; (80023e8 <HAL_RCC_OscConfig+0x4d0>)
 800219e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1ee      	bne.n	8002186 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f000 80a4 	beq.w	80022fe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021b6:	4b8c      	ldr	r3, [pc, #560]	; (80023e8 <HAL_RCC_OscConfig+0x4d0>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10d      	bne.n	80021de <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80021c2:	4b89      	ldr	r3, [pc, #548]	; (80023e8 <HAL_RCC_OscConfig+0x4d0>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	4a88      	ldr	r2, [pc, #544]	; (80023e8 <HAL_RCC_OscConfig+0x4d0>)
 80021c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021cc:	6413      	str	r3, [r2, #64]	; 0x40
 80021ce:	4b86      	ldr	r3, [pc, #536]	; (80023e8 <HAL_RCC_OscConfig+0x4d0>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021da:	2301      	movs	r3, #1
 80021dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021de:	4b83      	ldr	r3, [pc, #524]	; (80023ec <HAL_RCC_OscConfig+0x4d4>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d118      	bne.n	800221c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80021ea:	4b80      	ldr	r3, [pc, #512]	; (80023ec <HAL_RCC_OscConfig+0x4d4>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a7f      	ldr	r2, [pc, #508]	; (80023ec <HAL_RCC_OscConfig+0x4d4>)
 80021f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021f6:	f7fe fee9 	bl	8000fcc <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021fe:	f7fe fee5 	bl	8000fcc <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b64      	cmp	r3, #100	; 0x64
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e12a      	b.n	8002466 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002210:	4b76      	ldr	r3, [pc, #472]	; (80023ec <HAL_RCC_OscConfig+0x4d4>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0f0      	beq.n	80021fe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d106      	bne.n	8002232 <HAL_RCC_OscConfig+0x31a>
 8002224:	4b70      	ldr	r3, [pc, #448]	; (80023e8 <HAL_RCC_OscConfig+0x4d0>)
 8002226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002228:	4a6f      	ldr	r2, [pc, #444]	; (80023e8 <HAL_RCC_OscConfig+0x4d0>)
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	6713      	str	r3, [r2, #112]	; 0x70
 8002230:	e02d      	b.n	800228e <HAL_RCC_OscConfig+0x376>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10c      	bne.n	8002254 <HAL_RCC_OscConfig+0x33c>
 800223a:	4b6b      	ldr	r3, [pc, #428]	; (80023e8 <HAL_RCC_OscConfig+0x4d0>)
 800223c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223e:	4a6a      	ldr	r2, [pc, #424]	; (80023e8 <HAL_RCC_OscConfig+0x4d0>)
 8002240:	f023 0301 	bic.w	r3, r3, #1
 8002244:	6713      	str	r3, [r2, #112]	; 0x70
 8002246:	4b68      	ldr	r3, [pc, #416]	; (80023e8 <HAL_RCC_OscConfig+0x4d0>)
 8002248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224a:	4a67      	ldr	r2, [pc, #412]	; (80023e8 <HAL_RCC_OscConfig+0x4d0>)
 800224c:	f023 0304 	bic.w	r3, r3, #4
 8002250:	6713      	str	r3, [r2, #112]	; 0x70
 8002252:	e01c      	b.n	800228e <HAL_RCC_OscConfig+0x376>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	2b05      	cmp	r3, #5
 800225a:	d10c      	bne.n	8002276 <HAL_RCC_OscConfig+0x35e>
 800225c:	4b62      	ldr	r3, [pc, #392]	; (80023e8 <HAL_RCC_OscConfig+0x4d0>)
 800225e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002260:	4a61      	ldr	r2, [pc, #388]	; (80023e8 <HAL_RCC_OscConfig+0x4d0>)
 8002262:	f043 0304 	orr.w	r3, r3, #4
 8002266:	6713      	str	r3, [r2, #112]	; 0x70
 8002268:	4b5f      	ldr	r3, [pc, #380]	; (80023e8 <HAL_RCC_OscConfig+0x4d0>)
 800226a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226c:	4a5e      	ldr	r2, [pc, #376]	; (80023e8 <HAL_RCC_OscConfig+0x4d0>)
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	6713      	str	r3, [r2, #112]	; 0x70
 8002274:	e00b      	b.n	800228e <HAL_RCC_OscConfig+0x376>
 8002276:	4b5c      	ldr	r3, [pc, #368]	; (80023e8 <HAL_RCC_OscConfig+0x4d0>)
 8002278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227a:	4a5b      	ldr	r2, [pc, #364]	; (80023e8 <HAL_RCC_OscConfig+0x4d0>)
 800227c:	f023 0301 	bic.w	r3, r3, #1
 8002280:	6713      	str	r3, [r2, #112]	; 0x70
 8002282:	4b59      	ldr	r3, [pc, #356]	; (80023e8 <HAL_RCC_OscConfig+0x4d0>)
 8002284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002286:	4a58      	ldr	r2, [pc, #352]	; (80023e8 <HAL_RCC_OscConfig+0x4d0>)
 8002288:	f023 0304 	bic.w	r3, r3, #4
 800228c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d015      	beq.n	80022c2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002296:	f7fe fe99 	bl	8000fcc <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800229c:	e00a      	b.n	80022b4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800229e:	f7fe fe95 	bl	8000fcc <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e0d8      	b.n	8002466 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b4:	4b4c      	ldr	r3, [pc, #304]	; (80023e8 <HAL_RCC_OscConfig+0x4d0>)
 80022b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0ee      	beq.n	800229e <HAL_RCC_OscConfig+0x386>
 80022c0:	e014      	b.n	80022ec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c2:	f7fe fe83 	bl	8000fcc <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022c8:	e00a      	b.n	80022e0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ca:	f7fe fe7f 	bl	8000fcc <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d8:	4293      	cmp	r3, r2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e0c2      	b.n	8002466 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e0:	4b41      	ldr	r3, [pc, #260]	; (80023e8 <HAL_RCC_OscConfig+0x4d0>)
 80022e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1ee      	bne.n	80022ca <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022ec:	7dfb      	ldrb	r3, [r7, #23]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d105      	bne.n	80022fe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022f2:	4b3d      	ldr	r3, [pc, #244]	; (80023e8 <HAL_RCC_OscConfig+0x4d0>)
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	4a3c      	ldr	r2, [pc, #240]	; (80023e8 <HAL_RCC_OscConfig+0x4d0>)
 80022f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 80ae 	beq.w	8002464 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002308:	4b37      	ldr	r3, [pc, #220]	; (80023e8 <HAL_RCC_OscConfig+0x4d0>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f003 030c 	and.w	r3, r3, #12
 8002310:	2b08      	cmp	r3, #8
 8002312:	d06d      	beq.n	80023f0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	2b02      	cmp	r3, #2
 800231a:	d14b      	bne.n	80023b4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800231c:	4b32      	ldr	r3, [pc, #200]	; (80023e8 <HAL_RCC_OscConfig+0x4d0>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a31      	ldr	r2, [pc, #196]	; (80023e8 <HAL_RCC_OscConfig+0x4d0>)
 8002322:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002326:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002328:	f7fe fe50 	bl	8000fcc <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002330:	f7fe fe4c 	bl	8000fcc <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e091      	b.n	8002466 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002342:	4b29      	ldr	r3, [pc, #164]	; (80023e8 <HAL_RCC_OscConfig+0x4d0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f0      	bne.n	8002330 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69da      	ldr	r2, [r3, #28]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235c:	019b      	lsls	r3, r3, #6
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002364:	085b      	lsrs	r3, r3, #1
 8002366:	3b01      	subs	r3, #1
 8002368:	041b      	lsls	r3, r3, #16
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002370:	061b      	lsls	r3, r3, #24
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002378:	071b      	lsls	r3, r3, #28
 800237a:	491b      	ldr	r1, [pc, #108]	; (80023e8 <HAL_RCC_OscConfig+0x4d0>)
 800237c:	4313      	orrs	r3, r2
 800237e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002380:	4b19      	ldr	r3, [pc, #100]	; (80023e8 <HAL_RCC_OscConfig+0x4d0>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a18      	ldr	r2, [pc, #96]	; (80023e8 <HAL_RCC_OscConfig+0x4d0>)
 8002386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800238a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238c:	f7fe fe1e 	bl	8000fcc <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002394:	f7fe fe1a 	bl	8000fcc <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e05f      	b.n	8002466 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023a6:	4b10      	ldr	r3, [pc, #64]	; (80023e8 <HAL_RCC_OscConfig+0x4d0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f0      	beq.n	8002394 <HAL_RCC_OscConfig+0x47c>
 80023b2:	e057      	b.n	8002464 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b4:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <HAL_RCC_OscConfig+0x4d0>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a0b      	ldr	r2, [pc, #44]	; (80023e8 <HAL_RCC_OscConfig+0x4d0>)
 80023ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c0:	f7fe fe04 	bl	8000fcc <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c8:	f7fe fe00 	bl	8000fcc <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e045      	b.n	8002466 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023da:	4b03      	ldr	r3, [pc, #12]	; (80023e8 <HAL_RCC_OscConfig+0x4d0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0x4b0>
 80023e6:	e03d      	b.n	8002464 <HAL_RCC_OscConfig+0x54c>
 80023e8:	40023800 	.word	0x40023800
 80023ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80023f0:	4b1f      	ldr	r3, [pc, #124]	; (8002470 <HAL_RCC_OscConfig+0x558>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d030      	beq.n	8002460 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002408:	429a      	cmp	r2, r3
 800240a:	d129      	bne.n	8002460 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002416:	429a      	cmp	r2, r3
 8002418:	d122      	bne.n	8002460 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002420:	4013      	ands	r3, r2
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002426:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002428:	4293      	cmp	r3, r2
 800242a:	d119      	bne.n	8002460 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002436:	085b      	lsrs	r3, r3, #1
 8002438:	3b01      	subs	r3, #1
 800243a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800243c:	429a      	cmp	r2, r3
 800243e:	d10f      	bne.n	8002460 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800244c:	429a      	cmp	r2, r3
 800244e:	d107      	bne.n	8002460 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800245c:	429a      	cmp	r2, r3
 800245e:	d001      	beq.n	8002464 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e000      	b.n	8002466 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40023800 	.word	0x40023800

08002474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800247e:	2300      	movs	r3, #0
 8002480:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e0d0      	b.n	800262e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800248c:	4b6a      	ldr	r3, [pc, #424]	; (8002638 <HAL_RCC_ClockConfig+0x1c4>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 030f 	and.w	r3, r3, #15
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d910      	bls.n	80024bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249a:	4b67      	ldr	r3, [pc, #412]	; (8002638 <HAL_RCC_ClockConfig+0x1c4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f023 020f 	bic.w	r2, r3, #15
 80024a2:	4965      	ldr	r1, [pc, #404]	; (8002638 <HAL_RCC_ClockConfig+0x1c4>)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024aa:	4b63      	ldr	r3, [pc, #396]	; (8002638 <HAL_RCC_ClockConfig+0x1c4>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d001      	beq.n	80024bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e0b8      	b.n	800262e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d020      	beq.n	800250a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d005      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024d4:	4b59      	ldr	r3, [pc, #356]	; (800263c <HAL_RCC_ClockConfig+0x1c8>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	4a58      	ldr	r2, [pc, #352]	; (800263c <HAL_RCC_ClockConfig+0x1c8>)
 80024da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0308 	and.w	r3, r3, #8
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d005      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024ec:	4b53      	ldr	r3, [pc, #332]	; (800263c <HAL_RCC_ClockConfig+0x1c8>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	4a52      	ldr	r2, [pc, #328]	; (800263c <HAL_RCC_ClockConfig+0x1c8>)
 80024f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024f8:	4b50      	ldr	r3, [pc, #320]	; (800263c <HAL_RCC_ClockConfig+0x1c8>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	494d      	ldr	r1, [pc, #308]	; (800263c <HAL_RCC_ClockConfig+0x1c8>)
 8002506:	4313      	orrs	r3, r2
 8002508:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d040      	beq.n	8002598 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d107      	bne.n	800252e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251e:	4b47      	ldr	r3, [pc, #284]	; (800263c <HAL_RCC_ClockConfig+0x1c8>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d115      	bne.n	8002556 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e07f      	b.n	800262e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d107      	bne.n	8002546 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002536:	4b41      	ldr	r3, [pc, #260]	; (800263c <HAL_RCC_ClockConfig+0x1c8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d109      	bne.n	8002556 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e073      	b.n	800262e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002546:	4b3d      	ldr	r3, [pc, #244]	; (800263c <HAL_RCC_ClockConfig+0x1c8>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e06b      	b.n	800262e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002556:	4b39      	ldr	r3, [pc, #228]	; (800263c <HAL_RCC_ClockConfig+0x1c8>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f023 0203 	bic.w	r2, r3, #3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	4936      	ldr	r1, [pc, #216]	; (800263c <HAL_RCC_ClockConfig+0x1c8>)
 8002564:	4313      	orrs	r3, r2
 8002566:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002568:	f7fe fd30 	bl	8000fcc <HAL_GetTick>
 800256c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256e:	e00a      	b.n	8002586 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002570:	f7fe fd2c 	bl	8000fcc <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	f241 3288 	movw	r2, #5000	; 0x1388
 800257e:	4293      	cmp	r3, r2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e053      	b.n	800262e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002586:	4b2d      	ldr	r3, [pc, #180]	; (800263c <HAL_RCC_ClockConfig+0x1c8>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 020c 	and.w	r2, r3, #12
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	429a      	cmp	r2, r3
 8002596:	d1eb      	bne.n	8002570 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002598:	4b27      	ldr	r3, [pc, #156]	; (8002638 <HAL_RCC_ClockConfig+0x1c4>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 030f 	and.w	r3, r3, #15
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d210      	bcs.n	80025c8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a6:	4b24      	ldr	r3, [pc, #144]	; (8002638 <HAL_RCC_ClockConfig+0x1c4>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f023 020f 	bic.w	r2, r3, #15
 80025ae:	4922      	ldr	r1, [pc, #136]	; (8002638 <HAL_RCC_ClockConfig+0x1c4>)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b6:	4b20      	ldr	r3, [pc, #128]	; (8002638 <HAL_RCC_ClockConfig+0x1c4>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d001      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e032      	b.n	800262e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d008      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025d4:	4b19      	ldr	r3, [pc, #100]	; (800263c <HAL_RCC_ClockConfig+0x1c8>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	4916      	ldr	r1, [pc, #88]	; (800263c <HAL_RCC_ClockConfig+0x1c8>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d009      	beq.n	8002606 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025f2:	4b12      	ldr	r3, [pc, #72]	; (800263c <HAL_RCC_ClockConfig+0x1c8>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	490e      	ldr	r1, [pc, #56]	; (800263c <HAL_RCC_ClockConfig+0x1c8>)
 8002602:	4313      	orrs	r3, r2
 8002604:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002606:	f000 f821 	bl	800264c <HAL_RCC_GetSysClockFreq>
 800260a:	4602      	mov	r2, r0
 800260c:	4b0b      	ldr	r3, [pc, #44]	; (800263c <HAL_RCC_ClockConfig+0x1c8>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	091b      	lsrs	r3, r3, #4
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	490a      	ldr	r1, [pc, #40]	; (8002640 <HAL_RCC_ClockConfig+0x1cc>)
 8002618:	5ccb      	ldrb	r3, [r1, r3]
 800261a:	fa22 f303 	lsr.w	r3, r2, r3
 800261e:	4a09      	ldr	r2, [pc, #36]	; (8002644 <HAL_RCC_ClockConfig+0x1d0>)
 8002620:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002622:	4b09      	ldr	r3, [pc, #36]	; (8002648 <HAL_RCC_ClockConfig+0x1d4>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7fe fbda 	bl	8000de0 <HAL_InitTick>

  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40023c00 	.word	0x40023c00
 800263c:	40023800 	.word	0x40023800
 8002640:	080074c8 	.word	0x080074c8
 8002644:	20000000 	.word	0x20000000
 8002648:	20000004 	.word	0x20000004

0800264c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800264c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002650:	b094      	sub	sp, #80	; 0x50
 8002652:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002654:	2300      	movs	r3, #0
 8002656:	647b      	str	r3, [r7, #68]	; 0x44
 8002658:	2300      	movs	r3, #0
 800265a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800265c:	2300      	movs	r3, #0
 800265e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002660:	2300      	movs	r3, #0
 8002662:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002664:	4b79      	ldr	r3, [pc, #484]	; (800284c <HAL_RCC_GetSysClockFreq+0x200>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f003 030c 	and.w	r3, r3, #12
 800266c:	2b08      	cmp	r3, #8
 800266e:	d00d      	beq.n	800268c <HAL_RCC_GetSysClockFreq+0x40>
 8002670:	2b08      	cmp	r3, #8
 8002672:	f200 80e1 	bhi.w	8002838 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002676:	2b00      	cmp	r3, #0
 8002678:	d002      	beq.n	8002680 <HAL_RCC_GetSysClockFreq+0x34>
 800267a:	2b04      	cmp	r3, #4
 800267c:	d003      	beq.n	8002686 <HAL_RCC_GetSysClockFreq+0x3a>
 800267e:	e0db      	b.n	8002838 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002680:	4b73      	ldr	r3, [pc, #460]	; (8002850 <HAL_RCC_GetSysClockFreq+0x204>)
 8002682:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002684:	e0db      	b.n	800283e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002686:	4b73      	ldr	r3, [pc, #460]	; (8002854 <HAL_RCC_GetSysClockFreq+0x208>)
 8002688:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800268a:	e0d8      	b.n	800283e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800268c:	4b6f      	ldr	r3, [pc, #444]	; (800284c <HAL_RCC_GetSysClockFreq+0x200>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002694:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002696:	4b6d      	ldr	r3, [pc, #436]	; (800284c <HAL_RCC_GetSysClockFreq+0x200>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d063      	beq.n	800276a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026a2:	4b6a      	ldr	r3, [pc, #424]	; (800284c <HAL_RCC_GetSysClockFreq+0x200>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	099b      	lsrs	r3, r3, #6
 80026a8:	2200      	movs	r2, #0
 80026aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80026ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80026ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026b4:	633b      	str	r3, [r7, #48]	; 0x30
 80026b6:	2300      	movs	r3, #0
 80026b8:	637b      	str	r3, [r7, #52]	; 0x34
 80026ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80026be:	4622      	mov	r2, r4
 80026c0:	462b      	mov	r3, r5
 80026c2:	f04f 0000 	mov.w	r0, #0
 80026c6:	f04f 0100 	mov.w	r1, #0
 80026ca:	0159      	lsls	r1, r3, #5
 80026cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026d0:	0150      	lsls	r0, r2, #5
 80026d2:	4602      	mov	r2, r0
 80026d4:	460b      	mov	r3, r1
 80026d6:	4621      	mov	r1, r4
 80026d8:	1a51      	subs	r1, r2, r1
 80026da:	6139      	str	r1, [r7, #16]
 80026dc:	4629      	mov	r1, r5
 80026de:	eb63 0301 	sbc.w	r3, r3, r1
 80026e2:	617b      	str	r3, [r7, #20]
 80026e4:	f04f 0200 	mov.w	r2, #0
 80026e8:	f04f 0300 	mov.w	r3, #0
 80026ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026f0:	4659      	mov	r1, fp
 80026f2:	018b      	lsls	r3, r1, #6
 80026f4:	4651      	mov	r1, sl
 80026f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026fa:	4651      	mov	r1, sl
 80026fc:	018a      	lsls	r2, r1, #6
 80026fe:	4651      	mov	r1, sl
 8002700:	ebb2 0801 	subs.w	r8, r2, r1
 8002704:	4659      	mov	r1, fp
 8002706:	eb63 0901 	sbc.w	r9, r3, r1
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	f04f 0300 	mov.w	r3, #0
 8002712:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002716:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800271a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800271e:	4690      	mov	r8, r2
 8002720:	4699      	mov	r9, r3
 8002722:	4623      	mov	r3, r4
 8002724:	eb18 0303 	adds.w	r3, r8, r3
 8002728:	60bb      	str	r3, [r7, #8]
 800272a:	462b      	mov	r3, r5
 800272c:	eb49 0303 	adc.w	r3, r9, r3
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	f04f 0300 	mov.w	r3, #0
 800273a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800273e:	4629      	mov	r1, r5
 8002740:	024b      	lsls	r3, r1, #9
 8002742:	4621      	mov	r1, r4
 8002744:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002748:	4621      	mov	r1, r4
 800274a:	024a      	lsls	r2, r1, #9
 800274c:	4610      	mov	r0, r2
 800274e:	4619      	mov	r1, r3
 8002750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002752:	2200      	movs	r2, #0
 8002754:	62bb      	str	r3, [r7, #40]	; 0x28
 8002756:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002758:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800275c:	f7fd fd70 	bl	8000240 <__aeabi_uldivmod>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4613      	mov	r3, r2
 8002766:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002768:	e058      	b.n	800281c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800276a:	4b38      	ldr	r3, [pc, #224]	; (800284c <HAL_RCC_GetSysClockFreq+0x200>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	099b      	lsrs	r3, r3, #6
 8002770:	2200      	movs	r2, #0
 8002772:	4618      	mov	r0, r3
 8002774:	4611      	mov	r1, r2
 8002776:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800277a:	623b      	str	r3, [r7, #32]
 800277c:	2300      	movs	r3, #0
 800277e:	627b      	str	r3, [r7, #36]	; 0x24
 8002780:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002784:	4642      	mov	r2, r8
 8002786:	464b      	mov	r3, r9
 8002788:	f04f 0000 	mov.w	r0, #0
 800278c:	f04f 0100 	mov.w	r1, #0
 8002790:	0159      	lsls	r1, r3, #5
 8002792:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002796:	0150      	lsls	r0, r2, #5
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	4641      	mov	r1, r8
 800279e:	ebb2 0a01 	subs.w	sl, r2, r1
 80027a2:	4649      	mov	r1, r9
 80027a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	f04f 0300 	mov.w	r3, #0
 80027b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027bc:	ebb2 040a 	subs.w	r4, r2, sl
 80027c0:	eb63 050b 	sbc.w	r5, r3, fp
 80027c4:	f04f 0200 	mov.w	r2, #0
 80027c8:	f04f 0300 	mov.w	r3, #0
 80027cc:	00eb      	lsls	r3, r5, #3
 80027ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027d2:	00e2      	lsls	r2, r4, #3
 80027d4:	4614      	mov	r4, r2
 80027d6:	461d      	mov	r5, r3
 80027d8:	4643      	mov	r3, r8
 80027da:	18e3      	adds	r3, r4, r3
 80027dc:	603b      	str	r3, [r7, #0]
 80027de:	464b      	mov	r3, r9
 80027e0:	eb45 0303 	adc.w	r3, r5, r3
 80027e4:	607b      	str	r3, [r7, #4]
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	f04f 0300 	mov.w	r3, #0
 80027ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027f2:	4629      	mov	r1, r5
 80027f4:	028b      	lsls	r3, r1, #10
 80027f6:	4621      	mov	r1, r4
 80027f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027fc:	4621      	mov	r1, r4
 80027fe:	028a      	lsls	r2, r1, #10
 8002800:	4610      	mov	r0, r2
 8002802:	4619      	mov	r1, r3
 8002804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002806:	2200      	movs	r2, #0
 8002808:	61bb      	str	r3, [r7, #24]
 800280a:	61fa      	str	r2, [r7, #28]
 800280c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002810:	f7fd fd16 	bl	8000240 <__aeabi_uldivmod>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	4613      	mov	r3, r2
 800281a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800281c:	4b0b      	ldr	r3, [pc, #44]	; (800284c <HAL_RCC_GetSysClockFreq+0x200>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	0c1b      	lsrs	r3, r3, #16
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	3301      	adds	r3, #1
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800282c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800282e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002830:	fbb2 f3f3 	udiv	r3, r2, r3
 8002834:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002836:	e002      	b.n	800283e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002838:	4b05      	ldr	r3, [pc, #20]	; (8002850 <HAL_RCC_GetSysClockFreq+0x204>)
 800283a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800283c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800283e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002840:	4618      	mov	r0, r3
 8002842:	3750      	adds	r7, #80	; 0x50
 8002844:	46bd      	mov	sp, r7
 8002846:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800284a:	bf00      	nop
 800284c:	40023800 	.word	0x40023800
 8002850:	00f42400 	.word	0x00f42400
 8002854:	007a1200 	.word	0x007a1200

08002858 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800285c:	4b03      	ldr	r3, [pc, #12]	; (800286c <HAL_RCC_GetHCLKFreq+0x14>)
 800285e:	681b      	ldr	r3, [r3, #0]
}
 8002860:	4618      	mov	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	20000000 	.word	0x20000000

08002870 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002874:	f7ff fff0 	bl	8002858 <HAL_RCC_GetHCLKFreq>
 8002878:	4602      	mov	r2, r0
 800287a:	4b05      	ldr	r3, [pc, #20]	; (8002890 <HAL_RCC_GetPCLK1Freq+0x20>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	0a9b      	lsrs	r3, r3, #10
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	4903      	ldr	r1, [pc, #12]	; (8002894 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002886:	5ccb      	ldrb	r3, [r1, r3]
 8002888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800288c:	4618      	mov	r0, r3
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40023800 	.word	0x40023800
 8002894:	080074d8 	.word	0x080074d8

08002898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800289c:	f7ff ffdc 	bl	8002858 <HAL_RCC_GetHCLKFreq>
 80028a0:	4602      	mov	r2, r0
 80028a2:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	0b5b      	lsrs	r3, r3, #13
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	4903      	ldr	r1, [pc, #12]	; (80028bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ae:	5ccb      	ldrb	r3, [r1, r3]
 80028b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40023800 	.word	0x40023800
 80028bc:	080074d8 	.word	0x080074d8

080028c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	220f      	movs	r2, #15
 80028ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80028d0:	4b12      	ldr	r3, [pc, #72]	; (800291c <HAL_RCC_GetClockConfig+0x5c>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 0203 	and.w	r2, r3, #3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80028dc:	4b0f      	ldr	r3, [pc, #60]	; (800291c <HAL_RCC_GetClockConfig+0x5c>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80028e8:	4b0c      	ldr	r3, [pc, #48]	; (800291c <HAL_RCC_GetClockConfig+0x5c>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80028f4:	4b09      	ldr	r3, [pc, #36]	; (800291c <HAL_RCC_GetClockConfig+0x5c>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	08db      	lsrs	r3, r3, #3
 80028fa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002902:	4b07      	ldr	r3, [pc, #28]	; (8002920 <HAL_RCC_GetClockConfig+0x60>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 020f 	and.w	r2, r3, #15
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	601a      	str	r2, [r3, #0]
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	40023800 	.word	0x40023800
 8002920:	40023c00 	.word	0x40023c00

08002924 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b088      	sub	sp, #32
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002930:	2300      	movs	r3, #0
 8002932:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002934:	2300      	movs	r3, #0
 8002936:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002938:	2300      	movs	r3, #0
 800293a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800293c:	2300      	movs	r3, #0
 800293e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b00      	cmp	r3, #0
 800294a:	d012      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800294c:	4b69      	ldr	r3, [pc, #420]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	4a68      	ldr	r2, [pc, #416]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002952:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002956:	6093      	str	r3, [r2, #8]
 8002958:	4b66      	ldr	r3, [pc, #408]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002960:	4964      	ldr	r1, [pc, #400]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002962:	4313      	orrs	r3, r2
 8002964:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800296e:	2301      	movs	r3, #1
 8002970:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d017      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800297e:	4b5d      	ldr	r3, [pc, #372]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002984:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298c:	4959      	ldr	r1, [pc, #356]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800298e:	4313      	orrs	r3, r2
 8002990:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002998:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800299c:	d101      	bne.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800299e:	2301      	movs	r3, #1
 80029a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80029aa:	2301      	movs	r3, #1
 80029ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d017      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029ba:	4b4e      	ldr	r3, [pc, #312]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	494a      	ldr	r1, [pc, #296]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029d8:	d101      	bne.n	80029de <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80029da:	2301      	movs	r3, #1
 80029dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80029e6:	2301      	movs	r3, #1
 80029e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80029f6:	2301      	movs	r3, #1
 80029f8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0320 	and.w	r3, r3, #32
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f000 808b 	beq.w	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a08:	4b3a      	ldr	r3, [pc, #232]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0c:	4a39      	ldr	r2, [pc, #228]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a12:	6413      	str	r3, [r2, #64]	; 0x40
 8002a14:	4b37      	ldr	r3, [pc, #220]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a20:	4b35      	ldr	r3, [pc, #212]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a34      	ldr	r2, [pc, #208]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a2c:	f7fe face 	bl	8000fcc <HAL_GetTick>
 8002a30:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a34:	f7fe faca 	bl	8000fcc <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b64      	cmp	r3, #100	; 0x64
 8002a40:	d901      	bls.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e38f      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a46:	4b2c      	ldr	r3, [pc, #176]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0f0      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a52:	4b28      	ldr	r3, [pc, #160]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a5a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d035      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d02e      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a70:	4b20      	ldr	r3, [pc, #128]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a78:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a7a:	4b1e      	ldr	r3, [pc, #120]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7e:	4a1d      	ldr	r2, [pc, #116]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a84:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a86:	4b1b      	ldr	r3, [pc, #108]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8a:	4a1a      	ldr	r2, [pc, #104]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a90:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002a92:	4a18      	ldr	r2, [pc, #96]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a98:	4b16      	ldr	r3, [pc, #88]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d114      	bne.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa4:	f7fe fa92 	bl	8000fcc <HAL_GetTick>
 8002aa8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aaa:	e00a      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aac:	f7fe fa8e 	bl	8000fcc <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e351      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac2:	4b0c      	ldr	r3, [pc, #48]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0ee      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ad6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ada:	d111      	bne.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002adc:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ae8:	4b04      	ldr	r3, [pc, #16]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002aea:	400b      	ands	r3, r1
 8002aec:	4901      	ldr	r1, [pc, #4]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	608b      	str	r3, [r1, #8]
 8002af2:	e00b      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002af4:	40023800 	.word	0x40023800
 8002af8:	40007000 	.word	0x40007000
 8002afc:	0ffffcff 	.word	0x0ffffcff
 8002b00:	4bac      	ldr	r3, [pc, #688]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	4aab      	ldr	r2, [pc, #684]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b06:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002b0a:	6093      	str	r3, [r2, #8]
 8002b0c:	4ba9      	ldr	r3, [pc, #676]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b18:	49a6      	ldr	r1, [pc, #664]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0310 	and.w	r3, r3, #16
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d010      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002b2a:	4ba2      	ldr	r3, [pc, #648]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b30:	4aa0      	ldr	r2, [pc, #640]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b36:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002b3a:	4b9e      	ldr	r3, [pc, #632]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b3c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b44:	499b      	ldr	r1, [pc, #620]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00a      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b58:	4b96      	ldr	r3, [pc, #600]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b66:	4993      	ldr	r1, [pc, #588]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00a      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b7a:	4b8e      	ldr	r3, [pc, #568]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b80:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b88:	498a      	ldr	r1, [pc, #552]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00a      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b9c:	4b85      	ldr	r3, [pc, #532]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002baa:	4982      	ldr	r1, [pc, #520]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00a      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002bbe:	4b7d      	ldr	r3, [pc, #500]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bcc:	4979      	ldr	r1, [pc, #484]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00a      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002be0:	4b74      	ldr	r3, [pc, #464]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be6:	f023 0203 	bic.w	r2, r3, #3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bee:	4971      	ldr	r1, [pc, #452]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00a      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c02:	4b6c      	ldr	r3, [pc, #432]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c08:	f023 020c 	bic.w	r2, r3, #12
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c10:	4968      	ldr	r1, [pc, #416]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00a      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c24:	4b63      	ldr	r3, [pc, #396]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c32:	4960      	ldr	r1, [pc, #384]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00a      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c46:	4b5b      	ldr	r3, [pc, #364]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c4c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c54:	4957      	ldr	r1, [pc, #348]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00a      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c68:	4b52      	ldr	r3, [pc, #328]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c76:	494f      	ldr	r1, [pc, #316]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00a      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002c8a:	4b4a      	ldr	r3, [pc, #296]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c90:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c98:	4946      	ldr	r1, [pc, #280]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00a      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002cac:	4b41      	ldr	r3, [pc, #260]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cba:	493e      	ldr	r1, [pc, #248]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00a      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002cce:	4b39      	ldr	r3, [pc, #228]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cdc:	4935      	ldr	r1, [pc, #212]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00a      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002cf0:	4b30      	ldr	r3, [pc, #192]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cfe:	492d      	ldr	r1, [pc, #180]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d011      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002d12:	4b28      	ldr	r3, [pc, #160]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d18:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d20:	4924      	ldr	r1, [pc, #144]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d30:	d101      	bne.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002d32:	2301      	movs	r3, #1
 8002d34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002d42:	2301      	movs	r3, #1
 8002d44:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d52:	4b18      	ldr	r3, [pc, #96]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d58:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d60:	4914      	ldr	r1, [pc, #80]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00b      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d74:	4b0f      	ldr	r3, [pc, #60]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d84:	490b      	ldr	r1, [pc, #44]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00f      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002d98:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002da8:	4902      	ldr	r1, [pc, #8]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002db0:	e002      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002db2:	bf00      	nop
 8002db4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00b      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002dc4:	4b8a      	ldr	r3, [pc, #552]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd4:	4986      	ldr	r1, [pc, #536]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00b      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002de8:	4b81      	ldr	r3, [pc, #516]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002df8:	497d      	ldr	r1, [pc, #500]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d006      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 80d6 	beq.w	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e14:	4b76      	ldr	r3, [pc, #472]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a75      	ldr	r2, [pc, #468]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e20:	f7fe f8d4 	bl	8000fcc <HAL_GetTick>
 8002e24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e26:	e008      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e28:	f7fe f8d0 	bl	8000fcc <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b64      	cmp	r3, #100	; 0x64
 8002e34:	d901      	bls.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e195      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e3a:	4b6d      	ldr	r3, [pc, #436]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f0      	bne.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d021      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d11d      	bne.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e5a:	4b65      	ldr	r3, [pc, #404]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e60:	0c1b      	lsrs	r3, r3, #16
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e68:	4b61      	ldr	r3, [pc, #388]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e6e:	0e1b      	lsrs	r3, r3, #24
 8002e70:	f003 030f 	and.w	r3, r3, #15
 8002e74:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	019a      	lsls	r2, r3, #6
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	041b      	lsls	r3, r3, #16
 8002e80:	431a      	orrs	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	061b      	lsls	r3, r3, #24
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	071b      	lsls	r3, r3, #28
 8002e8e:	4958      	ldr	r1, [pc, #352]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d004      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002eaa:	d00a      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d02e      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ec0:	d129      	bne.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ec2:	4b4b      	ldr	r3, [pc, #300]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ec8:	0c1b      	lsrs	r3, r3, #16
 8002eca:	f003 0303 	and.w	r3, r3, #3
 8002ece:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ed0:	4b47      	ldr	r3, [pc, #284]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ed6:	0f1b      	lsrs	r3, r3, #28
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	019a      	lsls	r2, r3, #6
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	041b      	lsls	r3, r3, #16
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	061b      	lsls	r3, r3, #24
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	071b      	lsls	r3, r3, #28
 8002ef6:	493e      	ldr	r1, [pc, #248]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002efe:	4b3c      	ldr	r3, [pc, #240]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f04:	f023 021f 	bic.w	r2, r3, #31
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	4938      	ldr	r1, [pc, #224]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d01d      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f22:	4b33      	ldr	r3, [pc, #204]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f28:	0e1b      	lsrs	r3, r3, #24
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f30:	4b2f      	ldr	r3, [pc, #188]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f36:	0f1b      	lsrs	r3, r3, #28
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	019a      	lsls	r2, r3, #6
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	041b      	lsls	r3, r3, #16
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	061b      	lsls	r3, r3, #24
 8002f50:	431a      	orrs	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	071b      	lsls	r3, r3, #28
 8002f56:	4926      	ldr	r1, [pc, #152]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d011      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	019a      	lsls	r2, r3, #6
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	041b      	lsls	r3, r3, #16
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	061b      	lsls	r3, r3, #24
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	071b      	lsls	r3, r3, #28
 8002f86:	491a      	ldr	r1, [pc, #104]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f8e:	4b18      	ldr	r3, [pc, #96]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a17      	ldr	r2, [pc, #92]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f9a:	f7fe f817 	bl	8000fcc <HAL_GetTick>
 8002f9e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fa2:	f7fe f813 	bl	8000fcc <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b64      	cmp	r3, #100	; 0x64
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e0d8      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fb4:	4b0e      	ldr	r3, [pc, #56]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0f0      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	f040 80ce 	bne.w	8003164 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002fc8:	4b09      	ldr	r3, [pc, #36]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a08      	ldr	r2, [pc, #32]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fd4:	f7fd fffa 	bl	8000fcc <HAL_GetTick>
 8002fd8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002fda:	e00b      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002fdc:	f7fd fff6 	bl	8000fcc <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b64      	cmp	r3, #100	; 0x64
 8002fe8:	d904      	bls.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e0bb      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002fee:	bf00      	nop
 8002ff0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ff4:	4b5e      	ldr	r3, [pc, #376]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ffc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003000:	d0ec      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003012:	2b00      	cmp	r3, #0
 8003014:	d009      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800301e:	2b00      	cmp	r3, #0
 8003020:	d02e      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	2b00      	cmp	r3, #0
 8003028:	d12a      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800302a:	4b51      	ldr	r3, [pc, #324]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800302c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003030:	0c1b      	lsrs	r3, r3, #16
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003038:	4b4d      	ldr	r3, [pc, #308]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800303a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303e:	0f1b      	lsrs	r3, r3, #28
 8003040:	f003 0307 	and.w	r3, r3, #7
 8003044:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	019a      	lsls	r2, r3, #6
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	041b      	lsls	r3, r3, #16
 8003050:	431a      	orrs	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	061b      	lsls	r3, r3, #24
 8003058:	431a      	orrs	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	071b      	lsls	r3, r3, #28
 800305e:	4944      	ldr	r1, [pc, #272]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003060:	4313      	orrs	r3, r2
 8003062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003066:	4b42      	ldr	r3, [pc, #264]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003068:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800306c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003074:	3b01      	subs	r3, #1
 8003076:	021b      	lsls	r3, r3, #8
 8003078:	493d      	ldr	r1, [pc, #244]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800307a:	4313      	orrs	r3, r2
 800307c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d022      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003090:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003094:	d11d      	bne.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003096:	4b36      	ldr	r3, [pc, #216]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309c:	0e1b      	lsrs	r3, r3, #24
 800309e:	f003 030f 	and.w	r3, r3, #15
 80030a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80030a4:	4b32      	ldr	r3, [pc, #200]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030aa:	0f1b      	lsrs	r3, r3, #28
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	019a      	lsls	r2, r3, #6
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	041b      	lsls	r3, r3, #16
 80030be:	431a      	orrs	r2, r3
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	061b      	lsls	r3, r3, #24
 80030c4:	431a      	orrs	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	071b      	lsls	r3, r3, #28
 80030ca:	4929      	ldr	r1, [pc, #164]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d028      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030de:	4b24      	ldr	r3, [pc, #144]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e4:	0e1b      	lsrs	r3, r3, #24
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80030ec:	4b20      	ldr	r3, [pc, #128]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f2:	0c1b      	lsrs	r3, r3, #16
 80030f4:	f003 0303 	and.w	r3, r3, #3
 80030f8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	019a      	lsls	r2, r3, #6
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	041b      	lsls	r3, r3, #16
 8003104:	431a      	orrs	r2, r3
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	061b      	lsls	r3, r3, #24
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	071b      	lsls	r3, r3, #28
 8003112:	4917      	ldr	r1, [pc, #92]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003114:	4313      	orrs	r3, r2
 8003116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800311a:	4b15      	ldr	r3, [pc, #84]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800311c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003120:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003128:	4911      	ldr	r1, [pc, #68]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800312a:	4313      	orrs	r3, r2
 800312c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003130:	4b0f      	ldr	r3, [pc, #60]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a0e      	ldr	r2, [pc, #56]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800313a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800313c:	f7fd ff46 	bl	8000fcc <HAL_GetTick>
 8003140:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003142:	e008      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003144:	f7fd ff42 	bl	8000fcc <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b64      	cmp	r3, #100	; 0x64
 8003150:	d901      	bls.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e007      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003156:	4b06      	ldr	r3, [pc, #24]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800315e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003162:	d1ef      	bne.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3720      	adds	r7, #32
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40023800 	.word	0x40023800

08003174 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e049      	b.n	800321a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d106      	bne.n	80031a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f841 	bl	8003222 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2202      	movs	r2, #2
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3304      	adds	r3, #4
 80031b0:	4619      	mov	r1, r3
 80031b2:	4610      	mov	r0, r2
 80031b4:	f000 fa00 	bl	80035b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
	...

08003238 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b01      	cmp	r3, #1
 800324a:	d001      	beq.n	8003250 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e054      	b.n	80032fa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2202      	movs	r2, #2
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68da      	ldr	r2, [r3, #12]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0201 	orr.w	r2, r2, #1
 8003266:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a26      	ldr	r2, [pc, #152]	; (8003308 <HAL_TIM_Base_Start_IT+0xd0>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d022      	beq.n	80032b8 <HAL_TIM_Base_Start_IT+0x80>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800327a:	d01d      	beq.n	80032b8 <HAL_TIM_Base_Start_IT+0x80>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a22      	ldr	r2, [pc, #136]	; (800330c <HAL_TIM_Base_Start_IT+0xd4>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d018      	beq.n	80032b8 <HAL_TIM_Base_Start_IT+0x80>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a21      	ldr	r2, [pc, #132]	; (8003310 <HAL_TIM_Base_Start_IT+0xd8>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d013      	beq.n	80032b8 <HAL_TIM_Base_Start_IT+0x80>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a1f      	ldr	r2, [pc, #124]	; (8003314 <HAL_TIM_Base_Start_IT+0xdc>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d00e      	beq.n	80032b8 <HAL_TIM_Base_Start_IT+0x80>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a1e      	ldr	r2, [pc, #120]	; (8003318 <HAL_TIM_Base_Start_IT+0xe0>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d009      	beq.n	80032b8 <HAL_TIM_Base_Start_IT+0x80>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a1c      	ldr	r2, [pc, #112]	; (800331c <HAL_TIM_Base_Start_IT+0xe4>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d004      	beq.n	80032b8 <HAL_TIM_Base_Start_IT+0x80>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a1b      	ldr	r2, [pc, #108]	; (8003320 <HAL_TIM_Base_Start_IT+0xe8>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d115      	bne.n	80032e4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689a      	ldr	r2, [r3, #8]
 80032be:	4b19      	ldr	r3, [pc, #100]	; (8003324 <HAL_TIM_Base_Start_IT+0xec>)
 80032c0:	4013      	ands	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2b06      	cmp	r3, #6
 80032c8:	d015      	beq.n	80032f6 <HAL_TIM_Base_Start_IT+0xbe>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d0:	d011      	beq.n	80032f6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f042 0201 	orr.w	r2, r2, #1
 80032e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032e2:	e008      	b.n	80032f6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0201 	orr.w	r2, r2, #1
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	e000      	b.n	80032f8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	40010000 	.word	0x40010000
 800330c:	40000400 	.word	0x40000400
 8003310:	40000800 	.word	0x40000800
 8003314:	40000c00 	.word	0x40000c00
 8003318:	40010400 	.word	0x40010400
 800331c:	40014000 	.word	0x40014000
 8003320:	40001800 	.word	0x40001800
 8003324:	00010007 	.word	0x00010007

08003328 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b02      	cmp	r3, #2
 800333c:	d122      	bne.n	8003384 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b02      	cmp	r3, #2
 800334a:	d11b      	bne.n	8003384 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f06f 0202 	mvn.w	r2, #2
 8003354:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f905 	bl	800357a <HAL_TIM_IC_CaptureCallback>
 8003370:	e005      	b.n	800337e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f8f7 	bl	8003566 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 f908 	bl	800358e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	f003 0304 	and.w	r3, r3, #4
 800338e:	2b04      	cmp	r3, #4
 8003390:	d122      	bne.n	80033d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b04      	cmp	r3, #4
 800339e:	d11b      	bne.n	80033d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f06f 0204 	mvn.w	r2, #4
 80033a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2202      	movs	r2, #2
 80033ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f8db 	bl	800357a <HAL_TIM_IC_CaptureCallback>
 80033c4:	e005      	b.n	80033d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f8cd 	bl	8003566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 f8de 	bl	800358e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	f003 0308 	and.w	r3, r3, #8
 80033e2:	2b08      	cmp	r3, #8
 80033e4:	d122      	bne.n	800342c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	f003 0308 	and.w	r3, r3, #8
 80033f0:	2b08      	cmp	r3, #8
 80033f2:	d11b      	bne.n	800342c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f06f 0208 	mvn.w	r2, #8
 80033fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2204      	movs	r2, #4
 8003402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	f003 0303 	and.w	r3, r3, #3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f8b1 	bl	800357a <HAL_TIM_IC_CaptureCallback>
 8003418:	e005      	b.n	8003426 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f8a3 	bl	8003566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 f8b4 	bl	800358e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	f003 0310 	and.w	r3, r3, #16
 8003436:	2b10      	cmp	r3, #16
 8003438:	d122      	bne.n	8003480 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	f003 0310 	and.w	r3, r3, #16
 8003444:	2b10      	cmp	r3, #16
 8003446:	d11b      	bne.n	8003480 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f06f 0210 	mvn.w	r2, #16
 8003450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2208      	movs	r2, #8
 8003456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f887 	bl	800357a <HAL_TIM_IC_CaptureCallback>
 800346c:	e005      	b.n	800347a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f879 	bl	8003566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f88a 	bl	800358e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b01      	cmp	r3, #1
 800348c:	d10e      	bne.n	80034ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b01      	cmp	r3, #1
 800349a:	d107      	bne.n	80034ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f06f 0201 	mvn.w	r2, #1
 80034a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7fd fac8 	bl	8000a3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b6:	2b80      	cmp	r3, #128	; 0x80
 80034b8:	d10e      	bne.n	80034d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c4:	2b80      	cmp	r3, #128	; 0x80
 80034c6:	d107      	bne.n	80034d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f91a 	bl	800370c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034e6:	d10e      	bne.n	8003506 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f2:	2b80      	cmp	r3, #128	; 0x80
 80034f4:	d107      	bne.n	8003506 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80034fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f90d 	bl	8003720 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003510:	2b40      	cmp	r3, #64	; 0x40
 8003512:	d10e      	bne.n	8003532 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351e:	2b40      	cmp	r3, #64	; 0x40
 8003520:	d107      	bne.n	8003532 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800352a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 f838 	bl	80035a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	f003 0320 	and.w	r3, r3, #32
 800353c:	2b20      	cmp	r3, #32
 800353e:	d10e      	bne.n	800355e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	f003 0320 	and.w	r3, r3, #32
 800354a:	2b20      	cmp	r3, #32
 800354c:	d107      	bne.n	800355e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f06f 0220 	mvn.w	r2, #32
 8003556:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 f8cd 	bl	80036f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800355e:	bf00      	nop
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
	...

080035b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a40      	ldr	r2, [pc, #256]	; (80036cc <TIM_Base_SetConfig+0x114>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d013      	beq.n	80035f8 <TIM_Base_SetConfig+0x40>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d6:	d00f      	beq.n	80035f8 <TIM_Base_SetConfig+0x40>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a3d      	ldr	r2, [pc, #244]	; (80036d0 <TIM_Base_SetConfig+0x118>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d00b      	beq.n	80035f8 <TIM_Base_SetConfig+0x40>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a3c      	ldr	r2, [pc, #240]	; (80036d4 <TIM_Base_SetConfig+0x11c>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d007      	beq.n	80035f8 <TIM_Base_SetConfig+0x40>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a3b      	ldr	r2, [pc, #236]	; (80036d8 <TIM_Base_SetConfig+0x120>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d003      	beq.n	80035f8 <TIM_Base_SetConfig+0x40>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a3a      	ldr	r2, [pc, #232]	; (80036dc <TIM_Base_SetConfig+0x124>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d108      	bne.n	800360a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	4313      	orrs	r3, r2
 8003608:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a2f      	ldr	r2, [pc, #188]	; (80036cc <TIM_Base_SetConfig+0x114>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d02b      	beq.n	800366a <TIM_Base_SetConfig+0xb2>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003618:	d027      	beq.n	800366a <TIM_Base_SetConfig+0xb2>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a2c      	ldr	r2, [pc, #176]	; (80036d0 <TIM_Base_SetConfig+0x118>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d023      	beq.n	800366a <TIM_Base_SetConfig+0xb2>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a2b      	ldr	r2, [pc, #172]	; (80036d4 <TIM_Base_SetConfig+0x11c>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d01f      	beq.n	800366a <TIM_Base_SetConfig+0xb2>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a2a      	ldr	r2, [pc, #168]	; (80036d8 <TIM_Base_SetConfig+0x120>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d01b      	beq.n	800366a <TIM_Base_SetConfig+0xb2>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a29      	ldr	r2, [pc, #164]	; (80036dc <TIM_Base_SetConfig+0x124>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d017      	beq.n	800366a <TIM_Base_SetConfig+0xb2>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a28      	ldr	r2, [pc, #160]	; (80036e0 <TIM_Base_SetConfig+0x128>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d013      	beq.n	800366a <TIM_Base_SetConfig+0xb2>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a27      	ldr	r2, [pc, #156]	; (80036e4 <TIM_Base_SetConfig+0x12c>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d00f      	beq.n	800366a <TIM_Base_SetConfig+0xb2>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a26      	ldr	r2, [pc, #152]	; (80036e8 <TIM_Base_SetConfig+0x130>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d00b      	beq.n	800366a <TIM_Base_SetConfig+0xb2>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a25      	ldr	r2, [pc, #148]	; (80036ec <TIM_Base_SetConfig+0x134>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d007      	beq.n	800366a <TIM_Base_SetConfig+0xb2>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a24      	ldr	r2, [pc, #144]	; (80036f0 <TIM_Base_SetConfig+0x138>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d003      	beq.n	800366a <TIM_Base_SetConfig+0xb2>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a23      	ldr	r2, [pc, #140]	; (80036f4 <TIM_Base_SetConfig+0x13c>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d108      	bne.n	800367c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	4313      	orrs	r3, r2
 800367a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	4313      	orrs	r3, r2
 8003688:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a0a      	ldr	r2, [pc, #40]	; (80036cc <TIM_Base_SetConfig+0x114>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d003      	beq.n	80036b0 <TIM_Base_SetConfig+0xf8>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a0c      	ldr	r2, [pc, #48]	; (80036dc <TIM_Base_SetConfig+0x124>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d103      	bne.n	80036b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	691a      	ldr	r2, [r3, #16]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	615a      	str	r2, [r3, #20]
}
 80036be:	bf00      	nop
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	40010000 	.word	0x40010000
 80036d0:	40000400 	.word	0x40000400
 80036d4:	40000800 	.word	0x40000800
 80036d8:	40000c00 	.word	0x40000c00
 80036dc:	40010400 	.word	0x40010400
 80036e0:	40014000 	.word	0x40014000
 80036e4:	40014400 	.word	0x40014400
 80036e8:	40014800 	.word	0x40014800
 80036ec:	40001800 	.word	0x40001800
 80036f0:	40001c00 	.word	0x40001c00
 80036f4:	40002000 	.word	0x40002000

080036f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e040      	b.n	80037c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800374a:	2b00      	cmp	r3, #0
 800374c:	d106      	bne.n	800375c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7fd fa68 	bl	8000c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2224      	movs	r2, #36	; 0x24
 8003760:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0201 	bic.w	r2, r2, #1
 8003770:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f82c 	bl	80037d0 <UART_SetConfig>
 8003778:	4603      	mov	r3, r0
 800377a:	2b01      	cmp	r3, #1
 800377c:	d101      	bne.n	8003782 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e022      	b.n	80037c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	2b00      	cmp	r3, #0
 8003788:	d002      	beq.n	8003790 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 fa84 	bl	8003c98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800379e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689a      	ldr	r2, [r3, #8]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f042 0201 	orr.w	r2, r2, #1
 80037be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 fb0b 	bl	8003ddc <UART_CheckIdleState>
 80037c6:	4603      	mov	r3, r0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b088      	sub	sp, #32
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037d8:	2300      	movs	r3, #0
 80037da:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	431a      	orrs	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	431a      	orrs	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	69db      	ldr	r3, [r3, #28]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	4ba6      	ldr	r3, [pc, #664]	; (8003a94 <UART_SetConfig+0x2c4>)
 80037fc:	4013      	ands	r3, r2
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6812      	ldr	r2, [r2, #0]
 8003802:	6979      	ldr	r1, [r7, #20]
 8003804:	430b      	orrs	r3, r1
 8003806:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	4313      	orrs	r3, r2
 800382c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	430a      	orrs	r2, r1
 8003840:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a94      	ldr	r2, [pc, #592]	; (8003a98 <UART_SetConfig+0x2c8>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d120      	bne.n	800388e <UART_SetConfig+0xbe>
 800384c:	4b93      	ldr	r3, [pc, #588]	; (8003a9c <UART_SetConfig+0x2cc>)
 800384e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003852:	f003 0303 	and.w	r3, r3, #3
 8003856:	2b03      	cmp	r3, #3
 8003858:	d816      	bhi.n	8003888 <UART_SetConfig+0xb8>
 800385a:	a201      	add	r2, pc, #4	; (adr r2, 8003860 <UART_SetConfig+0x90>)
 800385c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003860:	08003871 	.word	0x08003871
 8003864:	0800387d 	.word	0x0800387d
 8003868:	08003877 	.word	0x08003877
 800386c:	08003883 	.word	0x08003883
 8003870:	2301      	movs	r3, #1
 8003872:	77fb      	strb	r3, [r7, #31]
 8003874:	e150      	b.n	8003b18 <UART_SetConfig+0x348>
 8003876:	2302      	movs	r3, #2
 8003878:	77fb      	strb	r3, [r7, #31]
 800387a:	e14d      	b.n	8003b18 <UART_SetConfig+0x348>
 800387c:	2304      	movs	r3, #4
 800387e:	77fb      	strb	r3, [r7, #31]
 8003880:	e14a      	b.n	8003b18 <UART_SetConfig+0x348>
 8003882:	2308      	movs	r3, #8
 8003884:	77fb      	strb	r3, [r7, #31]
 8003886:	e147      	b.n	8003b18 <UART_SetConfig+0x348>
 8003888:	2310      	movs	r3, #16
 800388a:	77fb      	strb	r3, [r7, #31]
 800388c:	e144      	b.n	8003b18 <UART_SetConfig+0x348>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a83      	ldr	r2, [pc, #524]	; (8003aa0 <UART_SetConfig+0x2d0>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d132      	bne.n	80038fe <UART_SetConfig+0x12e>
 8003898:	4b80      	ldr	r3, [pc, #512]	; (8003a9c <UART_SetConfig+0x2cc>)
 800389a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389e:	f003 030c 	and.w	r3, r3, #12
 80038a2:	2b0c      	cmp	r3, #12
 80038a4:	d828      	bhi.n	80038f8 <UART_SetConfig+0x128>
 80038a6:	a201      	add	r2, pc, #4	; (adr r2, 80038ac <UART_SetConfig+0xdc>)
 80038a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ac:	080038e1 	.word	0x080038e1
 80038b0:	080038f9 	.word	0x080038f9
 80038b4:	080038f9 	.word	0x080038f9
 80038b8:	080038f9 	.word	0x080038f9
 80038bc:	080038ed 	.word	0x080038ed
 80038c0:	080038f9 	.word	0x080038f9
 80038c4:	080038f9 	.word	0x080038f9
 80038c8:	080038f9 	.word	0x080038f9
 80038cc:	080038e7 	.word	0x080038e7
 80038d0:	080038f9 	.word	0x080038f9
 80038d4:	080038f9 	.word	0x080038f9
 80038d8:	080038f9 	.word	0x080038f9
 80038dc:	080038f3 	.word	0x080038f3
 80038e0:	2300      	movs	r3, #0
 80038e2:	77fb      	strb	r3, [r7, #31]
 80038e4:	e118      	b.n	8003b18 <UART_SetConfig+0x348>
 80038e6:	2302      	movs	r3, #2
 80038e8:	77fb      	strb	r3, [r7, #31]
 80038ea:	e115      	b.n	8003b18 <UART_SetConfig+0x348>
 80038ec:	2304      	movs	r3, #4
 80038ee:	77fb      	strb	r3, [r7, #31]
 80038f0:	e112      	b.n	8003b18 <UART_SetConfig+0x348>
 80038f2:	2308      	movs	r3, #8
 80038f4:	77fb      	strb	r3, [r7, #31]
 80038f6:	e10f      	b.n	8003b18 <UART_SetConfig+0x348>
 80038f8:	2310      	movs	r3, #16
 80038fa:	77fb      	strb	r3, [r7, #31]
 80038fc:	e10c      	b.n	8003b18 <UART_SetConfig+0x348>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a68      	ldr	r2, [pc, #416]	; (8003aa4 <UART_SetConfig+0x2d4>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d120      	bne.n	800394a <UART_SetConfig+0x17a>
 8003908:	4b64      	ldr	r3, [pc, #400]	; (8003a9c <UART_SetConfig+0x2cc>)
 800390a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003912:	2b30      	cmp	r3, #48	; 0x30
 8003914:	d013      	beq.n	800393e <UART_SetConfig+0x16e>
 8003916:	2b30      	cmp	r3, #48	; 0x30
 8003918:	d814      	bhi.n	8003944 <UART_SetConfig+0x174>
 800391a:	2b20      	cmp	r3, #32
 800391c:	d009      	beq.n	8003932 <UART_SetConfig+0x162>
 800391e:	2b20      	cmp	r3, #32
 8003920:	d810      	bhi.n	8003944 <UART_SetConfig+0x174>
 8003922:	2b00      	cmp	r3, #0
 8003924:	d002      	beq.n	800392c <UART_SetConfig+0x15c>
 8003926:	2b10      	cmp	r3, #16
 8003928:	d006      	beq.n	8003938 <UART_SetConfig+0x168>
 800392a:	e00b      	b.n	8003944 <UART_SetConfig+0x174>
 800392c:	2300      	movs	r3, #0
 800392e:	77fb      	strb	r3, [r7, #31]
 8003930:	e0f2      	b.n	8003b18 <UART_SetConfig+0x348>
 8003932:	2302      	movs	r3, #2
 8003934:	77fb      	strb	r3, [r7, #31]
 8003936:	e0ef      	b.n	8003b18 <UART_SetConfig+0x348>
 8003938:	2304      	movs	r3, #4
 800393a:	77fb      	strb	r3, [r7, #31]
 800393c:	e0ec      	b.n	8003b18 <UART_SetConfig+0x348>
 800393e:	2308      	movs	r3, #8
 8003940:	77fb      	strb	r3, [r7, #31]
 8003942:	e0e9      	b.n	8003b18 <UART_SetConfig+0x348>
 8003944:	2310      	movs	r3, #16
 8003946:	77fb      	strb	r3, [r7, #31]
 8003948:	e0e6      	b.n	8003b18 <UART_SetConfig+0x348>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a56      	ldr	r2, [pc, #344]	; (8003aa8 <UART_SetConfig+0x2d8>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d120      	bne.n	8003996 <UART_SetConfig+0x1c6>
 8003954:	4b51      	ldr	r3, [pc, #324]	; (8003a9c <UART_SetConfig+0x2cc>)
 8003956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800395e:	2bc0      	cmp	r3, #192	; 0xc0
 8003960:	d013      	beq.n	800398a <UART_SetConfig+0x1ba>
 8003962:	2bc0      	cmp	r3, #192	; 0xc0
 8003964:	d814      	bhi.n	8003990 <UART_SetConfig+0x1c0>
 8003966:	2b80      	cmp	r3, #128	; 0x80
 8003968:	d009      	beq.n	800397e <UART_SetConfig+0x1ae>
 800396a:	2b80      	cmp	r3, #128	; 0x80
 800396c:	d810      	bhi.n	8003990 <UART_SetConfig+0x1c0>
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <UART_SetConfig+0x1a8>
 8003972:	2b40      	cmp	r3, #64	; 0x40
 8003974:	d006      	beq.n	8003984 <UART_SetConfig+0x1b4>
 8003976:	e00b      	b.n	8003990 <UART_SetConfig+0x1c0>
 8003978:	2300      	movs	r3, #0
 800397a:	77fb      	strb	r3, [r7, #31]
 800397c:	e0cc      	b.n	8003b18 <UART_SetConfig+0x348>
 800397e:	2302      	movs	r3, #2
 8003980:	77fb      	strb	r3, [r7, #31]
 8003982:	e0c9      	b.n	8003b18 <UART_SetConfig+0x348>
 8003984:	2304      	movs	r3, #4
 8003986:	77fb      	strb	r3, [r7, #31]
 8003988:	e0c6      	b.n	8003b18 <UART_SetConfig+0x348>
 800398a:	2308      	movs	r3, #8
 800398c:	77fb      	strb	r3, [r7, #31]
 800398e:	e0c3      	b.n	8003b18 <UART_SetConfig+0x348>
 8003990:	2310      	movs	r3, #16
 8003992:	77fb      	strb	r3, [r7, #31]
 8003994:	e0c0      	b.n	8003b18 <UART_SetConfig+0x348>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a44      	ldr	r2, [pc, #272]	; (8003aac <UART_SetConfig+0x2dc>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d125      	bne.n	80039ec <UART_SetConfig+0x21c>
 80039a0:	4b3e      	ldr	r3, [pc, #248]	; (8003a9c <UART_SetConfig+0x2cc>)
 80039a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039ae:	d017      	beq.n	80039e0 <UART_SetConfig+0x210>
 80039b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039b4:	d817      	bhi.n	80039e6 <UART_SetConfig+0x216>
 80039b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039ba:	d00b      	beq.n	80039d4 <UART_SetConfig+0x204>
 80039bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039c0:	d811      	bhi.n	80039e6 <UART_SetConfig+0x216>
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <UART_SetConfig+0x1fe>
 80039c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ca:	d006      	beq.n	80039da <UART_SetConfig+0x20a>
 80039cc:	e00b      	b.n	80039e6 <UART_SetConfig+0x216>
 80039ce:	2300      	movs	r3, #0
 80039d0:	77fb      	strb	r3, [r7, #31]
 80039d2:	e0a1      	b.n	8003b18 <UART_SetConfig+0x348>
 80039d4:	2302      	movs	r3, #2
 80039d6:	77fb      	strb	r3, [r7, #31]
 80039d8:	e09e      	b.n	8003b18 <UART_SetConfig+0x348>
 80039da:	2304      	movs	r3, #4
 80039dc:	77fb      	strb	r3, [r7, #31]
 80039de:	e09b      	b.n	8003b18 <UART_SetConfig+0x348>
 80039e0:	2308      	movs	r3, #8
 80039e2:	77fb      	strb	r3, [r7, #31]
 80039e4:	e098      	b.n	8003b18 <UART_SetConfig+0x348>
 80039e6:	2310      	movs	r3, #16
 80039e8:	77fb      	strb	r3, [r7, #31]
 80039ea:	e095      	b.n	8003b18 <UART_SetConfig+0x348>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a2f      	ldr	r2, [pc, #188]	; (8003ab0 <UART_SetConfig+0x2e0>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d125      	bne.n	8003a42 <UART_SetConfig+0x272>
 80039f6:	4b29      	ldr	r3, [pc, #164]	; (8003a9c <UART_SetConfig+0x2cc>)
 80039f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a04:	d017      	beq.n	8003a36 <UART_SetConfig+0x266>
 8003a06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a0a:	d817      	bhi.n	8003a3c <UART_SetConfig+0x26c>
 8003a0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a10:	d00b      	beq.n	8003a2a <UART_SetConfig+0x25a>
 8003a12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a16:	d811      	bhi.n	8003a3c <UART_SetConfig+0x26c>
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d003      	beq.n	8003a24 <UART_SetConfig+0x254>
 8003a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a20:	d006      	beq.n	8003a30 <UART_SetConfig+0x260>
 8003a22:	e00b      	b.n	8003a3c <UART_SetConfig+0x26c>
 8003a24:	2301      	movs	r3, #1
 8003a26:	77fb      	strb	r3, [r7, #31]
 8003a28:	e076      	b.n	8003b18 <UART_SetConfig+0x348>
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	77fb      	strb	r3, [r7, #31]
 8003a2e:	e073      	b.n	8003b18 <UART_SetConfig+0x348>
 8003a30:	2304      	movs	r3, #4
 8003a32:	77fb      	strb	r3, [r7, #31]
 8003a34:	e070      	b.n	8003b18 <UART_SetConfig+0x348>
 8003a36:	2308      	movs	r3, #8
 8003a38:	77fb      	strb	r3, [r7, #31]
 8003a3a:	e06d      	b.n	8003b18 <UART_SetConfig+0x348>
 8003a3c:	2310      	movs	r3, #16
 8003a3e:	77fb      	strb	r3, [r7, #31]
 8003a40:	e06a      	b.n	8003b18 <UART_SetConfig+0x348>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a1b      	ldr	r2, [pc, #108]	; (8003ab4 <UART_SetConfig+0x2e4>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d138      	bne.n	8003abe <UART_SetConfig+0x2ee>
 8003a4c:	4b13      	ldr	r3, [pc, #76]	; (8003a9c <UART_SetConfig+0x2cc>)
 8003a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a52:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003a56:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a5a:	d017      	beq.n	8003a8c <UART_SetConfig+0x2bc>
 8003a5c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a60:	d82a      	bhi.n	8003ab8 <UART_SetConfig+0x2e8>
 8003a62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a66:	d00b      	beq.n	8003a80 <UART_SetConfig+0x2b0>
 8003a68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a6c:	d824      	bhi.n	8003ab8 <UART_SetConfig+0x2e8>
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <UART_SetConfig+0x2aa>
 8003a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a76:	d006      	beq.n	8003a86 <UART_SetConfig+0x2b6>
 8003a78:	e01e      	b.n	8003ab8 <UART_SetConfig+0x2e8>
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	77fb      	strb	r3, [r7, #31]
 8003a7e:	e04b      	b.n	8003b18 <UART_SetConfig+0x348>
 8003a80:	2302      	movs	r3, #2
 8003a82:	77fb      	strb	r3, [r7, #31]
 8003a84:	e048      	b.n	8003b18 <UART_SetConfig+0x348>
 8003a86:	2304      	movs	r3, #4
 8003a88:	77fb      	strb	r3, [r7, #31]
 8003a8a:	e045      	b.n	8003b18 <UART_SetConfig+0x348>
 8003a8c:	2308      	movs	r3, #8
 8003a8e:	77fb      	strb	r3, [r7, #31]
 8003a90:	e042      	b.n	8003b18 <UART_SetConfig+0x348>
 8003a92:	bf00      	nop
 8003a94:	efff69f3 	.word	0xefff69f3
 8003a98:	40011000 	.word	0x40011000
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	40004400 	.word	0x40004400
 8003aa4:	40004800 	.word	0x40004800
 8003aa8:	40004c00 	.word	0x40004c00
 8003aac:	40005000 	.word	0x40005000
 8003ab0:	40011400 	.word	0x40011400
 8003ab4:	40007800 	.word	0x40007800
 8003ab8:	2310      	movs	r3, #16
 8003aba:	77fb      	strb	r3, [r7, #31]
 8003abc:	e02c      	b.n	8003b18 <UART_SetConfig+0x348>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a72      	ldr	r2, [pc, #456]	; (8003c8c <UART_SetConfig+0x4bc>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d125      	bne.n	8003b14 <UART_SetConfig+0x344>
 8003ac8:	4b71      	ldr	r3, [pc, #452]	; (8003c90 <UART_SetConfig+0x4c0>)
 8003aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ace:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003ad2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ad6:	d017      	beq.n	8003b08 <UART_SetConfig+0x338>
 8003ad8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003adc:	d817      	bhi.n	8003b0e <UART_SetConfig+0x33e>
 8003ade:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ae2:	d00b      	beq.n	8003afc <UART_SetConfig+0x32c>
 8003ae4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ae8:	d811      	bhi.n	8003b0e <UART_SetConfig+0x33e>
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <UART_SetConfig+0x326>
 8003aee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003af2:	d006      	beq.n	8003b02 <UART_SetConfig+0x332>
 8003af4:	e00b      	b.n	8003b0e <UART_SetConfig+0x33e>
 8003af6:	2300      	movs	r3, #0
 8003af8:	77fb      	strb	r3, [r7, #31]
 8003afa:	e00d      	b.n	8003b18 <UART_SetConfig+0x348>
 8003afc:	2302      	movs	r3, #2
 8003afe:	77fb      	strb	r3, [r7, #31]
 8003b00:	e00a      	b.n	8003b18 <UART_SetConfig+0x348>
 8003b02:	2304      	movs	r3, #4
 8003b04:	77fb      	strb	r3, [r7, #31]
 8003b06:	e007      	b.n	8003b18 <UART_SetConfig+0x348>
 8003b08:	2308      	movs	r3, #8
 8003b0a:	77fb      	strb	r3, [r7, #31]
 8003b0c:	e004      	b.n	8003b18 <UART_SetConfig+0x348>
 8003b0e:	2310      	movs	r3, #16
 8003b10:	77fb      	strb	r3, [r7, #31]
 8003b12:	e001      	b.n	8003b18 <UART_SetConfig+0x348>
 8003b14:	2310      	movs	r3, #16
 8003b16:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	69db      	ldr	r3, [r3, #28]
 8003b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b20:	d15b      	bne.n	8003bda <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003b22:	7ffb      	ldrb	r3, [r7, #31]
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d828      	bhi.n	8003b7a <UART_SetConfig+0x3aa>
 8003b28:	a201      	add	r2, pc, #4	; (adr r2, 8003b30 <UART_SetConfig+0x360>)
 8003b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b2e:	bf00      	nop
 8003b30:	08003b55 	.word	0x08003b55
 8003b34:	08003b5d 	.word	0x08003b5d
 8003b38:	08003b65 	.word	0x08003b65
 8003b3c:	08003b7b 	.word	0x08003b7b
 8003b40:	08003b6b 	.word	0x08003b6b
 8003b44:	08003b7b 	.word	0x08003b7b
 8003b48:	08003b7b 	.word	0x08003b7b
 8003b4c:	08003b7b 	.word	0x08003b7b
 8003b50:	08003b73 	.word	0x08003b73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b54:	f7fe fe8c 	bl	8002870 <HAL_RCC_GetPCLK1Freq>
 8003b58:	61b8      	str	r0, [r7, #24]
        break;
 8003b5a:	e013      	b.n	8003b84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b5c:	f7fe fe9c 	bl	8002898 <HAL_RCC_GetPCLK2Freq>
 8003b60:	61b8      	str	r0, [r7, #24]
        break;
 8003b62:	e00f      	b.n	8003b84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b64:	4b4b      	ldr	r3, [pc, #300]	; (8003c94 <UART_SetConfig+0x4c4>)
 8003b66:	61bb      	str	r3, [r7, #24]
        break;
 8003b68:	e00c      	b.n	8003b84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b6a:	f7fe fd6f 	bl	800264c <HAL_RCC_GetSysClockFreq>
 8003b6e:	61b8      	str	r0, [r7, #24]
        break;
 8003b70:	e008      	b.n	8003b84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b76:	61bb      	str	r3, [r7, #24]
        break;
 8003b78:	e004      	b.n	8003b84 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	77bb      	strb	r3, [r7, #30]
        break;
 8003b82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d074      	beq.n	8003c74 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	005a      	lsls	r2, r3, #1
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	085b      	lsrs	r3, r3, #1
 8003b94:	441a      	add	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	2b0f      	cmp	r3, #15
 8003ba4:	d916      	bls.n	8003bd4 <UART_SetConfig+0x404>
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bac:	d212      	bcs.n	8003bd4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	f023 030f 	bic.w	r3, r3, #15
 8003bb6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	085b      	lsrs	r3, r3, #1
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	f003 0307 	and.w	r3, r3, #7
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	89fb      	ldrh	r3, [r7, #14]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	89fa      	ldrh	r2, [r7, #14]
 8003bd0:	60da      	str	r2, [r3, #12]
 8003bd2:	e04f      	b.n	8003c74 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	77bb      	strb	r3, [r7, #30]
 8003bd8:	e04c      	b.n	8003c74 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bda:	7ffb      	ldrb	r3, [r7, #31]
 8003bdc:	2b08      	cmp	r3, #8
 8003bde:	d828      	bhi.n	8003c32 <UART_SetConfig+0x462>
 8003be0:	a201      	add	r2, pc, #4	; (adr r2, 8003be8 <UART_SetConfig+0x418>)
 8003be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be6:	bf00      	nop
 8003be8:	08003c0d 	.word	0x08003c0d
 8003bec:	08003c15 	.word	0x08003c15
 8003bf0:	08003c1d 	.word	0x08003c1d
 8003bf4:	08003c33 	.word	0x08003c33
 8003bf8:	08003c23 	.word	0x08003c23
 8003bfc:	08003c33 	.word	0x08003c33
 8003c00:	08003c33 	.word	0x08003c33
 8003c04:	08003c33 	.word	0x08003c33
 8003c08:	08003c2b 	.word	0x08003c2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c0c:	f7fe fe30 	bl	8002870 <HAL_RCC_GetPCLK1Freq>
 8003c10:	61b8      	str	r0, [r7, #24]
        break;
 8003c12:	e013      	b.n	8003c3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c14:	f7fe fe40 	bl	8002898 <HAL_RCC_GetPCLK2Freq>
 8003c18:	61b8      	str	r0, [r7, #24]
        break;
 8003c1a:	e00f      	b.n	8003c3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c1c:	4b1d      	ldr	r3, [pc, #116]	; (8003c94 <UART_SetConfig+0x4c4>)
 8003c1e:	61bb      	str	r3, [r7, #24]
        break;
 8003c20:	e00c      	b.n	8003c3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c22:	f7fe fd13 	bl	800264c <HAL_RCC_GetSysClockFreq>
 8003c26:	61b8      	str	r0, [r7, #24]
        break;
 8003c28:	e008      	b.n	8003c3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c2e:	61bb      	str	r3, [r7, #24]
        break;
 8003c30:	e004      	b.n	8003c3c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003c32:	2300      	movs	r3, #0
 8003c34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	77bb      	strb	r3, [r7, #30]
        break;
 8003c3a:	bf00      	nop
    }

    if (pclk != 0U)
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d018      	beq.n	8003c74 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	085a      	lsrs	r2, r3, #1
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	441a      	add	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c54:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	2b0f      	cmp	r3, #15
 8003c5a:	d909      	bls.n	8003c70 <UART_SetConfig+0x4a0>
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c62:	d205      	bcs.n	8003c70 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	60da      	str	r2, [r3, #12]
 8003c6e:	e001      	b.n	8003c74 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003c80:	7fbb      	ldrb	r3, [r7, #30]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3720      	adds	r7, #32
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	40007c00 	.word	0x40007c00
 8003c90:	40023800 	.word	0x40023800
 8003c94:	00f42400 	.word	0x00f42400

08003c98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00a      	beq.n	8003cc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00a      	beq.n	8003d06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	f003 0308 	and.w	r3, r3, #8
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	f003 0310 	and.w	r3, r3, #16
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00a      	beq.n	8003d4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	f003 0320 	and.w	r3, r3, #32
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d01a      	beq.n	8003dae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d96:	d10a      	bne.n	8003dae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00a      	beq.n	8003dd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	605a      	str	r2, [r3, #4]
  }
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af02      	add	r7, sp, #8
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003dec:	f7fd f8ee 	bl	8000fcc <HAL_GetTick>
 8003df0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0308 	and.w	r3, r3, #8
 8003dfc:	2b08      	cmp	r3, #8
 8003dfe:	d10e      	bne.n	8003e1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f831 	bl	8003e76 <UART_WaitOnFlagUntilTimeout>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e027      	b.n	8003e6e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d10e      	bne.n	8003e4a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f81b 	bl	8003e76 <UART_WaitOnFlagUntilTimeout>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e011      	b.n	8003e6e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2220      	movs	r2, #32
 8003e54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b09c      	sub	sp, #112	; 0x70
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	60f8      	str	r0, [r7, #12]
 8003e7e:	60b9      	str	r1, [r7, #8]
 8003e80:	603b      	str	r3, [r7, #0]
 8003e82:	4613      	mov	r3, r2
 8003e84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e86:	e0a7      	b.n	8003fd8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e8e:	f000 80a3 	beq.w	8003fd8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e92:	f7fd f89b 	bl	8000fcc <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d302      	bcc.n	8003ea8 <UART_WaitOnFlagUntilTimeout+0x32>
 8003ea2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d13f      	bne.n	8003f28 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eb0:	e853 3f00 	ldrex	r3, [r3]
 8003eb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eb8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ebc:	667b      	str	r3, [r7, #100]	; 0x64
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ec6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ec8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003ecc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ece:	e841 2300 	strex	r3, r2, [r1]
 8003ed2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003ed4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1e6      	bne.n	8003ea8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	3308      	adds	r3, #8
 8003ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ee4:	e853 3f00 	ldrex	r3, [r3]
 8003ee8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eec:	f023 0301 	bic.w	r3, r3, #1
 8003ef0:	663b      	str	r3, [r7, #96]	; 0x60
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3308      	adds	r3, #8
 8003ef8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003efa:	64ba      	str	r2, [r7, #72]	; 0x48
 8003efc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f02:	e841 2300 	strex	r3, r2, [r1]
 8003f06:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1e5      	bne.n	8003eda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2220      	movs	r2, #32
 8003f12:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2220      	movs	r2, #32
 8003f18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e068      	b.n	8003ffa <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0304 	and.w	r3, r3, #4
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d050      	beq.n	8003fd8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	69db      	ldr	r3, [r3, #28]
 8003f3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f44:	d148      	bne.n	8003fd8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f4e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f58:	e853 3f00 	ldrex	r3, [r3]
 8003f5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f64:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f6e:	637b      	str	r3, [r7, #52]	; 0x34
 8003f70:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f76:	e841 2300 	strex	r3, r2, [r1]
 8003f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1e6      	bne.n	8003f50 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	3308      	adds	r3, #8
 8003f88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	e853 3f00 	ldrex	r3, [r3]
 8003f90:	613b      	str	r3, [r7, #16]
   return(result);
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	f023 0301 	bic.w	r3, r3, #1
 8003f98:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	3308      	adds	r3, #8
 8003fa0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003fa2:	623a      	str	r2, [r7, #32]
 8003fa4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa6:	69f9      	ldr	r1, [r7, #28]
 8003fa8:	6a3a      	ldr	r2, [r7, #32]
 8003faa:	e841 2300 	strex	r3, r2, [r1]
 8003fae:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1e5      	bne.n	8003f82 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e010      	b.n	8003ffa <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	69da      	ldr	r2, [r3, #28]
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	bf0c      	ite	eq
 8003fe8:	2301      	moveq	r3, #1
 8003fea:	2300      	movne	r3, #0
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	461a      	mov	r2, r3
 8003ff0:	79fb      	ldrb	r3, [r7, #7]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	f43f af48 	beq.w	8003e88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3770      	adds	r7, #112	; 0x70
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
	...

08004004 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004004:	b084      	sub	sp, #16
 8004006:	b580      	push	{r7, lr}
 8004008:	b084      	sub	sp, #16
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
 800400e:	f107 001c 	add.w	r0, r7, #28
 8004012:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004018:	2b01      	cmp	r3, #1
 800401a:	d120      	bne.n	800405e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004020:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68da      	ldr	r2, [r3, #12]
 800402c:	4b20      	ldr	r3, [pc, #128]	; (80040b0 <USB_CoreInit+0xac>)
 800402e:	4013      	ands	r3, r2
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004042:	2b01      	cmp	r3, #1
 8004044:	d105      	bne.n	8004052 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 fa96 	bl	8004584 <USB_CoreReset>
 8004058:	4603      	mov	r3, r0
 800405a:	73fb      	strb	r3, [r7, #15]
 800405c:	e010      	b.n	8004080 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 fa8a 	bl	8004584 <USB_CoreReset>
 8004070:	4603      	mov	r3, r0
 8004072:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004078:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004082:	2b01      	cmp	r3, #1
 8004084:	d10b      	bne.n	800409e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f043 0206 	orr.w	r2, r3, #6
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f043 0220 	orr.w	r2, r3, #32
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800409e:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040aa:	b004      	add	sp, #16
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	ffbdffbf 	.word	0xffbdffbf

080040b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f023 0201 	bic.w	r2, r3, #1
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b084      	sub	sp, #16
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
 80040de:	460b      	mov	r3, r1
 80040e0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80040e2:	2300      	movs	r3, #0
 80040e4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80040f2:	78fb      	ldrb	r3, [r7, #3]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d115      	bne.n	8004124 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004104:	2001      	movs	r0, #1
 8004106:	f7fc ff6d 	bl	8000fe4 <HAL_Delay>
      ms++;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	3301      	adds	r3, #1
 800410e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 fa29 	bl	8004568 <USB_GetMode>
 8004116:	4603      	mov	r3, r0
 8004118:	2b01      	cmp	r3, #1
 800411a:	d01e      	beq.n	800415a <USB_SetCurrentMode+0x84>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2b31      	cmp	r3, #49	; 0x31
 8004120:	d9f0      	bls.n	8004104 <USB_SetCurrentMode+0x2e>
 8004122:	e01a      	b.n	800415a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004124:	78fb      	ldrb	r3, [r7, #3]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d115      	bne.n	8004156 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004136:	2001      	movs	r0, #1
 8004138:	f7fc ff54 	bl	8000fe4 <HAL_Delay>
      ms++;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	3301      	adds	r3, #1
 8004140:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 fa10 	bl	8004568 <USB_GetMode>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d005      	beq.n	800415a <USB_SetCurrentMode+0x84>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2b31      	cmp	r3, #49	; 0x31
 8004152:	d9f0      	bls.n	8004136 <USB_SetCurrentMode+0x60>
 8004154:	e001      	b.n	800415a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e005      	b.n	8004166 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2b32      	cmp	r3, #50	; 0x32
 800415e:	d101      	bne.n	8004164 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e000      	b.n	8004166 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
	...

08004170 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004170:	b084      	sub	sp, #16
 8004172:	b580      	push	{r7, lr}
 8004174:	b086      	sub	sp, #24
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
 800417a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800417e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004182:	2300      	movs	r3, #0
 8004184:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800418a:	2300      	movs	r3, #0
 800418c:	613b      	str	r3, [r7, #16]
 800418e:	e009      	b.n	80041a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	3340      	adds	r3, #64	; 0x40
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4413      	add	r3, r2
 800419a:	2200      	movs	r2, #0
 800419c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	3301      	adds	r3, #1
 80041a2:	613b      	str	r3, [r7, #16]
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	2b0e      	cmp	r3, #14
 80041a8:	d9f2      	bls.n	8004190 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80041aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d11c      	bne.n	80041ea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041be:	f043 0302 	orr.w	r3, r3, #2
 80041c2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	e005      	b.n	80041f6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80041fc:	461a      	mov	r2, r3
 80041fe:	2300      	movs	r3, #0
 8004200:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004208:	4619      	mov	r1, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004210:	461a      	mov	r2, r3
 8004212:	680b      	ldr	r3, [r1, #0]
 8004214:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004218:	2b01      	cmp	r3, #1
 800421a:	d10c      	bne.n	8004236 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800421c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800421e:	2b00      	cmp	r3, #0
 8004220:	d104      	bne.n	800422c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004222:	2100      	movs	r1, #0
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f965 	bl	80044f4 <USB_SetDevSpeed>
 800422a:	e008      	b.n	800423e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800422c:	2101      	movs	r1, #1
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f960 	bl	80044f4 <USB_SetDevSpeed>
 8004234:	e003      	b.n	800423e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004236:	2103      	movs	r1, #3
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 f95b 	bl	80044f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800423e:	2110      	movs	r1, #16
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f8f3 	bl	800442c <USB_FlushTxFifo>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 f91f 	bl	8004494 <USB_FlushRxFifo>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004266:	461a      	mov	r2, r3
 8004268:	2300      	movs	r3, #0
 800426a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004272:	461a      	mov	r2, r3
 8004274:	2300      	movs	r3, #0
 8004276:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800427e:	461a      	mov	r2, r3
 8004280:	2300      	movs	r3, #0
 8004282:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004284:	2300      	movs	r3, #0
 8004286:	613b      	str	r3, [r7, #16]
 8004288:	e043      	b.n	8004312 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	015a      	lsls	r2, r3, #5
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	4413      	add	r3, r2
 8004292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800429c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042a0:	d118      	bne.n	80042d4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10a      	bne.n	80042be <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	015a      	lsls	r2, r3, #5
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b4:	461a      	mov	r2, r3
 80042b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042ba:	6013      	str	r3, [r2, #0]
 80042bc:	e013      	b.n	80042e6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	015a      	lsls	r2, r3, #5
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4413      	add	r3, r2
 80042c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ca:	461a      	mov	r2, r3
 80042cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	e008      	b.n	80042e6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	015a      	lsls	r2, r3, #5
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	4413      	add	r3, r2
 80042dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e0:	461a      	mov	r2, r3
 80042e2:	2300      	movs	r3, #0
 80042e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	015a      	lsls	r2, r3, #5
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f2:	461a      	mov	r2, r3
 80042f4:	2300      	movs	r3, #0
 80042f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	015a      	lsls	r2, r3, #5
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	4413      	add	r3, r2
 8004300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004304:	461a      	mov	r2, r3
 8004306:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800430a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	3301      	adds	r3, #1
 8004310:	613b      	str	r3, [r7, #16]
 8004312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	429a      	cmp	r2, r3
 8004318:	d3b7      	bcc.n	800428a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800431a:	2300      	movs	r3, #0
 800431c:	613b      	str	r3, [r7, #16]
 800431e:	e043      	b.n	80043a8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	015a      	lsls	r2, r3, #5
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4413      	add	r3, r2
 8004328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004332:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004336:	d118      	bne.n	800436a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10a      	bne.n	8004354 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	015a      	lsls	r2, r3, #5
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	4413      	add	r3, r2
 8004346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800434a:	461a      	mov	r2, r3
 800434c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004350:	6013      	str	r3, [r2, #0]
 8004352:	e013      	b.n	800437c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	4413      	add	r3, r2
 800435c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004360:	461a      	mov	r2, r3
 8004362:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004366:	6013      	str	r3, [r2, #0]
 8004368:	e008      	b.n	800437c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	015a      	lsls	r2, r3, #5
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	4413      	add	r3, r2
 8004372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004376:	461a      	mov	r2, r3
 8004378:	2300      	movs	r3, #0
 800437a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	015a      	lsls	r2, r3, #5
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4413      	add	r3, r2
 8004384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004388:	461a      	mov	r2, r3
 800438a:	2300      	movs	r3, #0
 800438c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	015a      	lsls	r2, r3, #5
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	4413      	add	r3, r2
 8004396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800439a:	461a      	mov	r2, r3
 800439c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	3301      	adds	r3, #1
 80043a6:	613b      	str	r3, [r7, #16]
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d3b7      	bcc.n	8004320 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80043d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80043d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d105      	bne.n	80043e4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	f043 0210 	orr.w	r2, r3, #16
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	699a      	ldr	r2, [r3, #24]
 80043e8:	4b0e      	ldr	r3, [pc, #56]	; (8004424 <USB_DevInit+0x2b4>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80043f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d005      	beq.n	8004402 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	f043 0208 	orr.w	r2, r3, #8
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004404:	2b01      	cmp	r3, #1
 8004406:	d105      	bne.n	8004414 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	699a      	ldr	r2, [r3, #24]
 800440c:	4b06      	ldr	r3, [pc, #24]	; (8004428 <USB_DevInit+0x2b8>)
 800440e:	4313      	orrs	r3, r2
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004414:	7dfb      	ldrb	r3, [r7, #23]
}
 8004416:	4618      	mov	r0, r3
 8004418:	3718      	adds	r7, #24
 800441a:	46bd      	mov	sp, r7
 800441c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004420:	b004      	add	sp, #16
 8004422:	4770      	bx	lr
 8004424:	803c3800 	.word	0x803c3800
 8004428:	40000004 	.word	0x40000004

0800442c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004436:	2300      	movs	r3, #0
 8004438:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	3301      	adds	r3, #1
 800443e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	4a13      	ldr	r2, [pc, #76]	; (8004490 <USB_FlushTxFifo+0x64>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d901      	bls.n	800444c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e01b      	b.n	8004484 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	2b00      	cmp	r3, #0
 8004452:	daf2      	bge.n	800443a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004454:	2300      	movs	r3, #0
 8004456:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	019b      	lsls	r3, r3, #6
 800445c:	f043 0220 	orr.w	r2, r3, #32
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	3301      	adds	r3, #1
 8004468:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	4a08      	ldr	r2, [pc, #32]	; (8004490 <USB_FlushTxFifo+0x64>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d901      	bls.n	8004476 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e006      	b.n	8004484 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	f003 0320 	and.w	r3, r3, #32
 800447e:	2b20      	cmp	r3, #32
 8004480:	d0f0      	beq.n	8004464 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3714      	adds	r7, #20
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	00030d40 	.word	0x00030d40

08004494 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800449c:	2300      	movs	r3, #0
 800449e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	3301      	adds	r3, #1
 80044a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	4a11      	ldr	r2, [pc, #68]	; (80044f0 <USB_FlushRxFifo+0x5c>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d901      	bls.n	80044b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e018      	b.n	80044e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	daf2      	bge.n	80044a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80044ba:	2300      	movs	r3, #0
 80044bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2210      	movs	r2, #16
 80044c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	3301      	adds	r3, #1
 80044c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	4a08      	ldr	r2, [pc, #32]	; (80044f0 <USB_FlushRxFifo+0x5c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d901      	bls.n	80044d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e006      	b.n	80044e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	f003 0310 	and.w	r3, r3, #16
 80044de:	2b10      	cmp	r3, #16
 80044e0:	d0f0      	beq.n	80044c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3714      	adds	r7, #20
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	00030d40 	.word	0x00030d40

080044f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	460b      	mov	r3, r1
 80044fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	78fb      	ldrb	r3, [r7, #3]
 800450e:	68f9      	ldr	r1, [r7, #12]
 8004510:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004514:	4313      	orrs	r3, r2
 8004516:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3714      	adds	r7, #20
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr

08004526 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004526:	b480      	push	{r7}
 8004528:	b085      	sub	sp, #20
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004540:	f023 0303 	bic.w	r3, r3, #3
 8004544:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004554:	f043 0302 	orr.w	r3, r3, #2
 8004558:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3714      	adds	r7, #20
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	f003 0301 	and.w	r3, r3, #1
}
 8004578:	4618      	mov	r0, r3
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800458c:	2300      	movs	r3, #0
 800458e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	3301      	adds	r3, #1
 8004594:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	4a13      	ldr	r2, [pc, #76]	; (80045e8 <USB_CoreReset+0x64>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d901      	bls.n	80045a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e01b      	b.n	80045da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	daf2      	bge.n	8004590 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	f043 0201 	orr.w	r2, r3, #1
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	3301      	adds	r3, #1
 80045be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	4a09      	ldr	r2, [pc, #36]	; (80045e8 <USB_CoreReset+0x64>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d901      	bls.n	80045cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e006      	b.n	80045da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d0f0      	beq.n	80045ba <USB_CoreReset+0x36>

  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3714      	adds	r7, #20
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	00030d40 	.word	0x00030d40

080045ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80045ec:	b480      	push	{r7}
 80045ee:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80045f0:	bf00      	nop
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
	...

080045fc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004602:	f3ef 8305 	mrs	r3, IPSR
 8004606:	60bb      	str	r3, [r7, #8]
  return(result);
 8004608:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10f      	bne.n	800462e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800460e:	f3ef 8310 	mrs	r3, PRIMASK
 8004612:	607b      	str	r3, [r7, #4]
  return(result);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d105      	bne.n	8004626 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800461a:	f3ef 8311 	mrs	r3, BASEPRI
 800461e:	603b      	str	r3, [r7, #0]
  return(result);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d007      	beq.n	8004636 <osKernelInitialize+0x3a>
 8004626:	4b0e      	ldr	r3, [pc, #56]	; (8004660 <osKernelInitialize+0x64>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2b02      	cmp	r3, #2
 800462c:	d103      	bne.n	8004636 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800462e:	f06f 0305 	mvn.w	r3, #5
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	e00c      	b.n	8004650 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004636:	4b0a      	ldr	r3, [pc, #40]	; (8004660 <osKernelInitialize+0x64>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d105      	bne.n	800464a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800463e:	4b08      	ldr	r3, [pc, #32]	; (8004660 <osKernelInitialize+0x64>)
 8004640:	2201      	movs	r2, #1
 8004642:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004644:	2300      	movs	r3, #0
 8004646:	60fb      	str	r3, [r7, #12]
 8004648:	e002      	b.n	8004650 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800464a:	f04f 33ff 	mov.w	r3, #4294967295
 800464e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004650:	68fb      	ldr	r3, [r7, #12]
}
 8004652:	4618      	mov	r0, r3
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	20000848 	.word	0x20000848

08004664 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800466a:	f3ef 8305 	mrs	r3, IPSR
 800466e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004670:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10f      	bne.n	8004696 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004676:	f3ef 8310 	mrs	r3, PRIMASK
 800467a:	607b      	str	r3, [r7, #4]
  return(result);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d105      	bne.n	800468e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004682:	f3ef 8311 	mrs	r3, BASEPRI
 8004686:	603b      	str	r3, [r7, #0]
  return(result);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d007      	beq.n	800469e <osKernelStart+0x3a>
 800468e:	4b0f      	ldr	r3, [pc, #60]	; (80046cc <osKernelStart+0x68>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2b02      	cmp	r3, #2
 8004694:	d103      	bne.n	800469e <osKernelStart+0x3a>
    stat = osErrorISR;
 8004696:	f06f 0305 	mvn.w	r3, #5
 800469a:	60fb      	str	r3, [r7, #12]
 800469c:	e010      	b.n	80046c0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800469e:	4b0b      	ldr	r3, [pc, #44]	; (80046cc <osKernelStart+0x68>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d109      	bne.n	80046ba <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80046a6:	f7ff ffa1 	bl	80045ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80046aa:	4b08      	ldr	r3, [pc, #32]	; (80046cc <osKernelStart+0x68>)
 80046ac:	2202      	movs	r2, #2
 80046ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80046b0:	f001 f8b4 	bl	800581c <vTaskStartScheduler>
      stat = osOK;
 80046b4:	2300      	movs	r3, #0
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	e002      	b.n	80046c0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80046ba:	f04f 33ff 	mov.w	r3, #4294967295
 80046be:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80046c0:	68fb      	ldr	r3, [r7, #12]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	20000848 	.word	0x20000848

080046d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b090      	sub	sp, #64	; 0x40
 80046d4:	af04      	add	r7, sp, #16
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80046dc:	2300      	movs	r3, #0
 80046de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046e0:	f3ef 8305 	mrs	r3, IPSR
 80046e4:	61fb      	str	r3, [r7, #28]
  return(result);
 80046e6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f040 808f 	bne.w	800480c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046ee:	f3ef 8310 	mrs	r3, PRIMASK
 80046f2:	61bb      	str	r3, [r7, #24]
  return(result);
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d105      	bne.n	8004706 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046fa:	f3ef 8311 	mrs	r3, BASEPRI
 80046fe:	617b      	str	r3, [r7, #20]
  return(result);
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <osThreadNew+0x3e>
 8004706:	4b44      	ldr	r3, [pc, #272]	; (8004818 <osThreadNew+0x148>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2b02      	cmp	r3, #2
 800470c:	d07e      	beq.n	800480c <osThreadNew+0x13c>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d07b      	beq.n	800480c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004714:	2380      	movs	r3, #128	; 0x80
 8004716:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004718:	2318      	movs	r3, #24
 800471a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800471c:	2300      	movs	r3, #0
 800471e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004720:	f04f 33ff 	mov.w	r3, #4294967295
 8004724:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d045      	beq.n	80047b8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d002      	beq.n	800473a <osThreadNew+0x6a>
        name = attr->name;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d002      	beq.n	8004748 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	2b00      	cmp	r3, #0
 800474c:	d008      	beq.n	8004760 <osThreadNew+0x90>
 800474e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004750:	2b38      	cmp	r3, #56	; 0x38
 8004752:	d805      	bhi.n	8004760 <osThreadNew+0x90>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <osThreadNew+0x94>
        return (NULL);
 8004760:	2300      	movs	r3, #0
 8004762:	e054      	b.n	800480e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	089b      	lsrs	r3, r3, #2
 8004772:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00e      	beq.n	800479a <osThreadNew+0xca>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	2b5b      	cmp	r3, #91	; 0x5b
 8004782:	d90a      	bls.n	800479a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004788:	2b00      	cmp	r3, #0
 800478a:	d006      	beq.n	800479a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d002      	beq.n	800479a <osThreadNew+0xca>
        mem = 1;
 8004794:	2301      	movs	r3, #1
 8004796:	623b      	str	r3, [r7, #32]
 8004798:	e010      	b.n	80047bc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10c      	bne.n	80047bc <osThreadNew+0xec>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d108      	bne.n	80047bc <osThreadNew+0xec>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d104      	bne.n	80047bc <osThreadNew+0xec>
          mem = 0;
 80047b2:	2300      	movs	r3, #0
 80047b4:	623b      	str	r3, [r7, #32]
 80047b6:	e001      	b.n	80047bc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80047b8:	2300      	movs	r3, #0
 80047ba:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d110      	bne.n	80047e4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047ca:	9202      	str	r2, [sp, #8]
 80047cc:	9301      	str	r3, [sp, #4]
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	9300      	str	r3, [sp, #0]
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f000 fe3f 	bl	800545c <xTaskCreateStatic>
 80047de:	4603      	mov	r3, r0
 80047e0:	613b      	str	r3, [r7, #16]
 80047e2:	e013      	b.n	800480c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d110      	bne.n	800480c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80047ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	f107 0310 	add.w	r3, r7, #16
 80047f2:	9301      	str	r3, [sp, #4]
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	9300      	str	r3, [sp, #0]
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f000 fe90 	bl	8005522 <xTaskCreate>
 8004802:	4603      	mov	r3, r0
 8004804:	2b01      	cmp	r3, #1
 8004806:	d001      	beq.n	800480c <osThreadNew+0x13c>
          hTask = NULL;
 8004808:	2300      	movs	r3, #0
 800480a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800480c:	693b      	ldr	r3, [r7, #16]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3730      	adds	r7, #48	; 0x30
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	20000848 	.word	0x20000848

0800481c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800481c:	b580      	push	{r7, lr}
 800481e:	b086      	sub	sp, #24
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004824:	f3ef 8305 	mrs	r3, IPSR
 8004828:	613b      	str	r3, [r7, #16]
  return(result);
 800482a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800482c:	2b00      	cmp	r3, #0
 800482e:	d10f      	bne.n	8004850 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004830:	f3ef 8310 	mrs	r3, PRIMASK
 8004834:	60fb      	str	r3, [r7, #12]
  return(result);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d105      	bne.n	8004848 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800483c:	f3ef 8311 	mrs	r3, BASEPRI
 8004840:	60bb      	str	r3, [r7, #8]
  return(result);
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d007      	beq.n	8004858 <osDelay+0x3c>
 8004848:	4b0a      	ldr	r3, [pc, #40]	; (8004874 <osDelay+0x58>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2b02      	cmp	r3, #2
 800484e:	d103      	bne.n	8004858 <osDelay+0x3c>
    stat = osErrorISR;
 8004850:	f06f 0305 	mvn.w	r3, #5
 8004854:	617b      	str	r3, [r7, #20]
 8004856:	e007      	b.n	8004868 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004858:	2300      	movs	r3, #0
 800485a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d002      	beq.n	8004868 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 ffa4 	bl	80057b0 <vTaskDelay>
    }
  }

  return (stat);
 8004868:	697b      	ldr	r3, [r7, #20]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3718      	adds	r7, #24
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	20000848 	.word	0x20000848

08004878 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4a07      	ldr	r2, [pc, #28]	; (80048a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8004888:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	4a06      	ldr	r2, [pc, #24]	; (80048a8 <vApplicationGetIdleTaskMemory+0x30>)
 800488e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2280      	movs	r2, #128	; 0x80
 8004894:	601a      	str	r2, [r3, #0]
}
 8004896:	bf00      	nop
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	2000084c 	.word	0x2000084c
 80048a8:	200008a8 	.word	0x200008a8

080048ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4a07      	ldr	r2, [pc, #28]	; (80048d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80048bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	4a06      	ldr	r2, [pc, #24]	; (80048dc <vApplicationGetTimerTaskMemory+0x30>)
 80048c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048ca:	601a      	str	r2, [r3, #0]
}
 80048cc:	bf00      	nop
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr
 80048d8:	20000aa8 	.word	0x20000aa8
 80048dc:	20000b04 	.word	0x20000b04

080048e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f103 0208 	add.w	r2, r3, #8
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f04f 32ff 	mov.w	r2, #4294967295
 80048f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f103 0208 	add.w	r2, r3, #8
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f103 0208 	add.w	r2, r3, #8
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800492e:	bf00      	nop
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800493a:	b480      	push	{r7}
 800493c:	b085      	sub	sp, #20
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
 8004942:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	1c5a      	adds	r2, r3, #1
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	601a      	str	r2, [r3, #0]
}
 8004976:	bf00      	nop
 8004978:	3714      	adds	r7, #20
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004982:	b480      	push	{r7}
 8004984:	b085      	sub	sp, #20
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
 800498a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004998:	d103      	bne.n	80049a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	60fb      	str	r3, [r7, #12]
 80049a0:	e00c      	b.n	80049bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	3308      	adds	r3, #8
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	e002      	b.n	80049b0 <vListInsert+0x2e>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d2f6      	bcs.n	80049aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	1c5a      	adds	r2, r3, #1
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	601a      	str	r2, [r3, #0]
}
 80049e8:	bf00      	nop
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6892      	ldr	r2, [r2, #8]
 8004a0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	6852      	ldr	r2, [r2, #4]
 8004a14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d103      	bne.n	8004a28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689a      	ldr	r2, [r3, #8]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	1e5a      	subs	r2, r3, #1
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10c      	bne.n	8004a76 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a60:	b672      	cpsid	i
 8004a62:	f383 8811 	msr	BASEPRI, r3
 8004a66:	f3bf 8f6f 	isb	sy
 8004a6a:	f3bf 8f4f 	dsb	sy
 8004a6e:	b662      	cpsie	i
 8004a70:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a72:	bf00      	nop
 8004a74:	e7fe      	b.n	8004a74 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004a76:	f002 f981 	bl	8006d7c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a82:	68f9      	ldr	r1, [r7, #12]
 8004a84:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a86:	fb01 f303 	mul.w	r3, r1, r3
 8004a8a:	441a      	add	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	68f9      	ldr	r1, [r7, #12]
 8004aaa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004aac:	fb01 f303 	mul.w	r3, r1, r3
 8004ab0:	441a      	add	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	22ff      	movs	r2, #255	; 0xff
 8004aba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	22ff      	movs	r2, #255	; 0xff
 8004ac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d114      	bne.n	8004af6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d01a      	beq.n	8004b0a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	3310      	adds	r3, #16
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f001 f937 	bl	8005d4c <xTaskRemoveFromEventList>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d012      	beq.n	8004b0a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004ae4:	4b0c      	ldr	r3, [pc, #48]	; (8004b18 <xQueueGenericReset+0xd0>)
 8004ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	f3bf 8f6f 	isb	sy
 8004af4:	e009      	b.n	8004b0a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	3310      	adds	r3, #16
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7ff fef0 	bl	80048e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	3324      	adds	r3, #36	; 0x24
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7ff feeb 	bl	80048e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004b0a:	f002 f96b 	bl	8006de4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004b0e:	2301      	movs	r3, #1
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	e000ed04 	.word	0xe000ed04

08004b1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b08e      	sub	sp, #56	; 0x38
 8004b20:	af02      	add	r7, sp, #8
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
 8004b28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d10c      	bne.n	8004b4a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8004b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b34:	b672      	cpsid	i
 8004b36:	f383 8811 	msr	BASEPRI, r3
 8004b3a:	f3bf 8f6f 	isb	sy
 8004b3e:	f3bf 8f4f 	dsb	sy
 8004b42:	b662      	cpsie	i
 8004b44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b46:	bf00      	nop
 8004b48:	e7fe      	b.n	8004b48 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10c      	bne.n	8004b6a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8004b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b54:	b672      	cpsid	i
 8004b56:	f383 8811 	msr	BASEPRI, r3
 8004b5a:	f3bf 8f6f 	isb	sy
 8004b5e:	f3bf 8f4f 	dsb	sy
 8004b62:	b662      	cpsie	i
 8004b64:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b66:	bf00      	nop
 8004b68:	e7fe      	b.n	8004b68 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d002      	beq.n	8004b76 <xQueueGenericCreateStatic+0x5a>
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <xQueueGenericCreateStatic+0x5e>
 8004b76:	2301      	movs	r3, #1
 8004b78:	e000      	b.n	8004b7c <xQueueGenericCreateStatic+0x60>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10c      	bne.n	8004b9a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8004b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b84:	b672      	cpsid	i
 8004b86:	f383 8811 	msr	BASEPRI, r3
 8004b8a:	f3bf 8f6f 	isb	sy
 8004b8e:	f3bf 8f4f 	dsb	sy
 8004b92:	b662      	cpsie	i
 8004b94:	623b      	str	r3, [r7, #32]
}
 8004b96:	bf00      	nop
 8004b98:	e7fe      	b.n	8004b98 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d102      	bne.n	8004ba6 <xQueueGenericCreateStatic+0x8a>
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d101      	bne.n	8004baa <xQueueGenericCreateStatic+0x8e>
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e000      	b.n	8004bac <xQueueGenericCreateStatic+0x90>
 8004baa:	2300      	movs	r3, #0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10c      	bne.n	8004bca <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8004bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb4:	b672      	cpsid	i
 8004bb6:	f383 8811 	msr	BASEPRI, r3
 8004bba:	f3bf 8f6f 	isb	sy
 8004bbe:	f3bf 8f4f 	dsb	sy
 8004bc2:	b662      	cpsie	i
 8004bc4:	61fb      	str	r3, [r7, #28]
}
 8004bc6:	bf00      	nop
 8004bc8:	e7fe      	b.n	8004bc8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004bca:	2350      	movs	r3, #80	; 0x50
 8004bcc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	2b50      	cmp	r3, #80	; 0x50
 8004bd2:	d00c      	beq.n	8004bee <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8004bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd8:	b672      	cpsid	i
 8004bda:	f383 8811 	msr	BASEPRI, r3
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	f3bf 8f4f 	dsb	sy
 8004be6:	b662      	cpsie	i
 8004be8:	61bb      	str	r3, [r7, #24]
}
 8004bea:	bf00      	nop
 8004bec:	e7fe      	b.n	8004bec <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004bee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00d      	beq.n	8004c16 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c02:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	68b9      	ldr	r1, [r7, #8]
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 f805 	bl	8004c20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3730      	adds	r7, #48	; 0x30
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
 8004c2c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d103      	bne.n	8004c3c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	601a      	str	r2, [r3, #0]
 8004c3a:	e002      	b.n	8004c42 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c4e:	2101      	movs	r1, #1
 8004c50:	69b8      	ldr	r0, [r7, #24]
 8004c52:	f7ff fef9 	bl	8004a48 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	78fa      	ldrb	r2, [r7, #3]
 8004c5a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004c5e:	bf00      	nop
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
	...

08004c68 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b08e      	sub	sp, #56	; 0x38
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
 8004c74:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004c76:	2300      	movs	r3, #0
 8004c78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d10c      	bne.n	8004c9e <xQueueGenericSend+0x36>
	__asm volatile
 8004c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c88:	b672      	cpsid	i
 8004c8a:	f383 8811 	msr	BASEPRI, r3
 8004c8e:	f3bf 8f6f 	isb	sy
 8004c92:	f3bf 8f4f 	dsb	sy
 8004c96:	b662      	cpsie	i
 8004c98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c9a:	bf00      	nop
 8004c9c:	e7fe      	b.n	8004c9c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d103      	bne.n	8004cac <xQueueGenericSend+0x44>
 8004ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d101      	bne.n	8004cb0 <xQueueGenericSend+0x48>
 8004cac:	2301      	movs	r3, #1
 8004cae:	e000      	b.n	8004cb2 <xQueueGenericSend+0x4a>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10c      	bne.n	8004cd0 <xQueueGenericSend+0x68>
	__asm volatile
 8004cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cba:	b672      	cpsid	i
 8004cbc:	f383 8811 	msr	BASEPRI, r3
 8004cc0:	f3bf 8f6f 	isb	sy
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	b662      	cpsie	i
 8004cca:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ccc:	bf00      	nop
 8004cce:	e7fe      	b.n	8004cce <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d103      	bne.n	8004cde <xQueueGenericSend+0x76>
 8004cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d101      	bne.n	8004ce2 <xQueueGenericSend+0x7a>
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e000      	b.n	8004ce4 <xQueueGenericSend+0x7c>
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10c      	bne.n	8004d02 <xQueueGenericSend+0x9a>
	__asm volatile
 8004ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cec:	b672      	cpsid	i
 8004cee:	f383 8811 	msr	BASEPRI, r3
 8004cf2:	f3bf 8f6f 	isb	sy
 8004cf6:	f3bf 8f4f 	dsb	sy
 8004cfa:	b662      	cpsie	i
 8004cfc:	623b      	str	r3, [r7, #32]
}
 8004cfe:	bf00      	nop
 8004d00:	e7fe      	b.n	8004d00 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d02:	f001 f9e9 	bl	80060d8 <xTaskGetSchedulerState>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d102      	bne.n	8004d12 <xQueueGenericSend+0xaa>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <xQueueGenericSend+0xae>
 8004d12:	2301      	movs	r3, #1
 8004d14:	e000      	b.n	8004d18 <xQueueGenericSend+0xb0>
 8004d16:	2300      	movs	r3, #0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10c      	bne.n	8004d36 <xQueueGenericSend+0xce>
	__asm volatile
 8004d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d20:	b672      	cpsid	i
 8004d22:	f383 8811 	msr	BASEPRI, r3
 8004d26:	f3bf 8f6f 	isb	sy
 8004d2a:	f3bf 8f4f 	dsb	sy
 8004d2e:	b662      	cpsie	i
 8004d30:	61fb      	str	r3, [r7, #28]
}
 8004d32:	bf00      	nop
 8004d34:	e7fe      	b.n	8004d34 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d36:	f002 f821 	bl	8006d7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d302      	bcc.n	8004d4c <xQueueGenericSend+0xe4>
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d129      	bne.n	8004da0 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	68b9      	ldr	r1, [r7, #8]
 8004d50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d52:	f000 fa15 	bl	8005180 <prvCopyDataToQueue>
 8004d56:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d010      	beq.n	8004d82 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d62:	3324      	adds	r3, #36	; 0x24
 8004d64:	4618      	mov	r0, r3
 8004d66:	f000 fff1 	bl	8005d4c <xTaskRemoveFromEventList>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d013      	beq.n	8004d98 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004d70:	4b3f      	ldr	r3, [pc, #252]	; (8004e70 <xQueueGenericSend+0x208>)
 8004d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d76:	601a      	str	r2, [r3, #0]
 8004d78:	f3bf 8f4f 	dsb	sy
 8004d7c:	f3bf 8f6f 	isb	sy
 8004d80:	e00a      	b.n	8004d98 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d007      	beq.n	8004d98 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004d88:	4b39      	ldr	r3, [pc, #228]	; (8004e70 <xQueueGenericSend+0x208>)
 8004d8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d8e:	601a      	str	r2, [r3, #0]
 8004d90:	f3bf 8f4f 	dsb	sy
 8004d94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004d98:	f002 f824 	bl	8006de4 <vPortExitCritical>
				return pdPASS;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e063      	b.n	8004e68 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d103      	bne.n	8004dae <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004da6:	f002 f81d 	bl	8006de4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004daa:	2300      	movs	r3, #0
 8004dac:	e05c      	b.n	8004e68 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d106      	bne.n	8004dc2 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004db4:	f107 0314 	add.w	r3, r7, #20
 8004db8:	4618      	mov	r0, r3
 8004dba:	f001 f82d 	bl	8005e18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004dc2:	f002 f80f 	bl	8006de4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004dc6:	f000 fd93 	bl	80058f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004dca:	f001 ffd7 	bl	8006d7c <vPortEnterCritical>
 8004dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004dd4:	b25b      	sxtb	r3, r3
 8004dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dda:	d103      	bne.n	8004de4 <xQueueGenericSend+0x17c>
 8004ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004dea:	b25b      	sxtb	r3, r3
 8004dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df0:	d103      	bne.n	8004dfa <xQueueGenericSend+0x192>
 8004df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dfa:	f001 fff3 	bl	8006de4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004dfe:	1d3a      	adds	r2, r7, #4
 8004e00:	f107 0314 	add.w	r3, r7, #20
 8004e04:	4611      	mov	r1, r2
 8004e06:	4618      	mov	r0, r3
 8004e08:	f001 f81c 	bl	8005e44 <xTaskCheckForTimeOut>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d124      	bne.n	8004e5c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004e12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e14:	f000 faac 	bl	8005370 <prvIsQueueFull>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d018      	beq.n	8004e50 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e20:	3310      	adds	r3, #16
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	4611      	mov	r1, r2
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 ff3c 	bl	8005ca4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004e2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e2e:	f000 fa37 	bl	80052a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004e32:	f000 fd6b 	bl	800590c <xTaskResumeAll>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f47f af7c 	bne.w	8004d36 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8004e3e:	4b0c      	ldr	r3, [pc, #48]	; (8004e70 <xQueueGenericSend+0x208>)
 8004e40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e44:	601a      	str	r2, [r3, #0]
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	f3bf 8f6f 	isb	sy
 8004e4e:	e772      	b.n	8004d36 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e52:	f000 fa25 	bl	80052a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e56:	f000 fd59 	bl	800590c <xTaskResumeAll>
 8004e5a:	e76c      	b.n	8004d36 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004e5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e5e:	f000 fa1f 	bl	80052a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e62:	f000 fd53 	bl	800590c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004e66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3738      	adds	r7, #56	; 0x38
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	e000ed04 	.word	0xe000ed04

08004e74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b08e      	sub	sp, #56	; 0x38
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
 8004e80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10c      	bne.n	8004ea6 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8004e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e90:	b672      	cpsid	i
 8004e92:	f383 8811 	msr	BASEPRI, r3
 8004e96:	f3bf 8f6f 	isb	sy
 8004e9a:	f3bf 8f4f 	dsb	sy
 8004e9e:	b662      	cpsie	i
 8004ea0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ea2:	bf00      	nop
 8004ea4:	e7fe      	b.n	8004ea4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d103      	bne.n	8004eb4 <xQueueGenericSendFromISR+0x40>
 8004eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <xQueueGenericSendFromISR+0x44>
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e000      	b.n	8004eba <xQueueGenericSendFromISR+0x46>
 8004eb8:	2300      	movs	r3, #0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10c      	bne.n	8004ed8 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8004ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec2:	b672      	cpsid	i
 8004ec4:	f383 8811 	msr	BASEPRI, r3
 8004ec8:	f3bf 8f6f 	isb	sy
 8004ecc:	f3bf 8f4f 	dsb	sy
 8004ed0:	b662      	cpsie	i
 8004ed2:	623b      	str	r3, [r7, #32]
}
 8004ed4:	bf00      	nop
 8004ed6:	e7fe      	b.n	8004ed6 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d103      	bne.n	8004ee6 <xQueueGenericSendFromISR+0x72>
 8004ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d101      	bne.n	8004eea <xQueueGenericSendFromISR+0x76>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e000      	b.n	8004eec <xQueueGenericSendFromISR+0x78>
 8004eea:	2300      	movs	r3, #0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10c      	bne.n	8004f0a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8004ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef4:	b672      	cpsid	i
 8004ef6:	f383 8811 	msr	BASEPRI, r3
 8004efa:	f3bf 8f6f 	isb	sy
 8004efe:	f3bf 8f4f 	dsb	sy
 8004f02:	b662      	cpsie	i
 8004f04:	61fb      	str	r3, [r7, #28]
}
 8004f06:	bf00      	nop
 8004f08:	e7fe      	b.n	8004f08 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f0a:	f002 f81f 	bl	8006f4c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004f0e:	f3ef 8211 	mrs	r2, BASEPRI
 8004f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f16:	b672      	cpsid	i
 8004f18:	f383 8811 	msr	BASEPRI, r3
 8004f1c:	f3bf 8f6f 	isb	sy
 8004f20:	f3bf 8f4f 	dsb	sy
 8004f24:	b662      	cpsie	i
 8004f26:	61ba      	str	r2, [r7, #24]
 8004f28:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004f2a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d302      	bcc.n	8004f40 <xQueueGenericSendFromISR+0xcc>
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d12c      	bne.n	8004f9a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	68b9      	ldr	r1, [r7, #8]
 8004f4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f50:	f000 f916 	bl	8005180 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004f54:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5c:	d112      	bne.n	8004f84 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d016      	beq.n	8004f94 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f68:	3324      	adds	r3, #36	; 0x24
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 feee 	bl	8005d4c <xTaskRemoveFromEventList>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00e      	beq.n	8004f94 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00b      	beq.n	8004f94 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	601a      	str	r2, [r3, #0]
 8004f82:	e007      	b.n	8004f94 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f84:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f88:	3301      	adds	r3, #1
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	b25a      	sxtb	r2, r3
 8004f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004f94:	2301      	movs	r3, #1
 8004f96:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004f98:	e001      	b.n	8004f9e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8004f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004fa8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3738      	adds	r7, #56	; 0x38
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b08c      	sub	sp, #48	; 0x30
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10c      	bne.n	8004fe8 <xQueueReceive+0x34>
	__asm volatile
 8004fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd2:	b672      	cpsid	i
 8004fd4:	f383 8811 	msr	BASEPRI, r3
 8004fd8:	f3bf 8f6f 	isb	sy
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	b662      	cpsie	i
 8004fe2:	623b      	str	r3, [r7, #32]
}
 8004fe4:	bf00      	nop
 8004fe6:	e7fe      	b.n	8004fe6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d103      	bne.n	8004ff6 <xQueueReceive+0x42>
 8004fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <xQueueReceive+0x46>
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e000      	b.n	8004ffc <xQueueReceive+0x48>
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d10c      	bne.n	800501a <xQueueReceive+0x66>
	__asm volatile
 8005000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005004:	b672      	cpsid	i
 8005006:	f383 8811 	msr	BASEPRI, r3
 800500a:	f3bf 8f6f 	isb	sy
 800500e:	f3bf 8f4f 	dsb	sy
 8005012:	b662      	cpsie	i
 8005014:	61fb      	str	r3, [r7, #28]
}
 8005016:	bf00      	nop
 8005018:	e7fe      	b.n	8005018 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800501a:	f001 f85d 	bl	80060d8 <xTaskGetSchedulerState>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d102      	bne.n	800502a <xQueueReceive+0x76>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <xQueueReceive+0x7a>
 800502a:	2301      	movs	r3, #1
 800502c:	e000      	b.n	8005030 <xQueueReceive+0x7c>
 800502e:	2300      	movs	r3, #0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10c      	bne.n	800504e <xQueueReceive+0x9a>
	__asm volatile
 8005034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005038:	b672      	cpsid	i
 800503a:	f383 8811 	msr	BASEPRI, r3
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	b662      	cpsie	i
 8005048:	61bb      	str	r3, [r7, #24]
}
 800504a:	bf00      	nop
 800504c:	e7fe      	b.n	800504c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800504e:	f001 fe95 	bl	8006d7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005056:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505a:	2b00      	cmp	r3, #0
 800505c:	d01f      	beq.n	800509e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800505e:	68b9      	ldr	r1, [r7, #8]
 8005060:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005062:	f000 f8f7 	bl	8005254 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	1e5a      	subs	r2, r3, #1
 800506a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800506e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00f      	beq.n	8005096 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005078:	3310      	adds	r3, #16
 800507a:	4618      	mov	r0, r3
 800507c:	f000 fe66 	bl	8005d4c <xTaskRemoveFromEventList>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d007      	beq.n	8005096 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005086:	4b3d      	ldr	r3, [pc, #244]	; (800517c <xQueueReceive+0x1c8>)
 8005088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	f3bf 8f4f 	dsb	sy
 8005092:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005096:	f001 fea5 	bl	8006de4 <vPortExitCritical>
				return pdPASS;
 800509a:	2301      	movs	r3, #1
 800509c:	e069      	b.n	8005172 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d103      	bne.n	80050ac <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80050a4:	f001 fe9e 	bl	8006de4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80050a8:	2300      	movs	r3, #0
 80050aa:	e062      	b.n	8005172 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80050ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d106      	bne.n	80050c0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050b2:	f107 0310 	add.w	r3, r7, #16
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 feae 	bl	8005e18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050bc:	2301      	movs	r3, #1
 80050be:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050c0:	f001 fe90 	bl	8006de4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050c4:	f000 fc14 	bl	80058f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050c8:	f001 fe58 	bl	8006d7c <vPortEnterCritical>
 80050cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050d2:	b25b      	sxtb	r3, r3
 80050d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d8:	d103      	bne.n	80050e2 <xQueueReceive+0x12e>
 80050da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050e8:	b25b      	sxtb	r3, r3
 80050ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ee:	d103      	bne.n	80050f8 <xQueueReceive+0x144>
 80050f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050f8:	f001 fe74 	bl	8006de4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050fc:	1d3a      	adds	r2, r7, #4
 80050fe:	f107 0310 	add.w	r3, r7, #16
 8005102:	4611      	mov	r1, r2
 8005104:	4618      	mov	r0, r3
 8005106:	f000 fe9d 	bl	8005e44 <xTaskCheckForTimeOut>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d123      	bne.n	8005158 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005110:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005112:	f000 f917 	bl	8005344 <prvIsQueueEmpty>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d017      	beq.n	800514c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800511c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511e:	3324      	adds	r3, #36	; 0x24
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	4611      	mov	r1, r2
 8005124:	4618      	mov	r0, r3
 8005126:	f000 fdbd 	bl	8005ca4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800512a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800512c:	f000 f8b8 	bl	80052a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005130:	f000 fbec 	bl	800590c <xTaskResumeAll>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d189      	bne.n	800504e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800513a:	4b10      	ldr	r3, [pc, #64]	; (800517c <xQueueReceive+0x1c8>)
 800513c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005140:	601a      	str	r2, [r3, #0]
 8005142:	f3bf 8f4f 	dsb	sy
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	e780      	b.n	800504e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800514c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800514e:	f000 f8a7 	bl	80052a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005152:	f000 fbdb 	bl	800590c <xTaskResumeAll>
 8005156:	e77a      	b.n	800504e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005158:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800515a:	f000 f8a1 	bl	80052a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800515e:	f000 fbd5 	bl	800590c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005162:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005164:	f000 f8ee 	bl	8005344 <prvIsQueueEmpty>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	f43f af6f 	beq.w	800504e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005170:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005172:	4618      	mov	r0, r3
 8005174:	3730      	adds	r7, #48	; 0x30
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	e000ed04 	.word	0xe000ed04

08005180 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800518c:	2300      	movs	r3, #0
 800518e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005194:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10d      	bne.n	80051ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d14d      	bne.n	8005242 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f000 ffb2 	bl	8006114 <xTaskPriorityDisinherit>
 80051b0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	609a      	str	r2, [r3, #8]
 80051b8:	e043      	b.n	8005242 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d119      	bne.n	80051f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6858      	ldr	r0, [r3, #4]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c8:	461a      	mov	r2, r3
 80051ca:	68b9      	ldr	r1, [r7, #8]
 80051cc:	f002 f912 	bl	80073f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	685a      	ldr	r2, [r3, #4]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d8:	441a      	add	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d32b      	bcc.n	8005242 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	605a      	str	r2, [r3, #4]
 80051f2:	e026      	b.n	8005242 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	68d8      	ldr	r0, [r3, #12]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fc:	461a      	mov	r2, r3
 80051fe:	68b9      	ldr	r1, [r7, #8]
 8005200:	f002 f8f8 	bl	80073f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	68da      	ldr	r2, [r3, #12]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520c:	425b      	negs	r3, r3
 800520e:	441a      	add	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	68da      	ldr	r2, [r3, #12]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	429a      	cmp	r2, r3
 800521e:	d207      	bcs.n	8005230 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005228:	425b      	negs	r3, r3
 800522a:	441a      	add	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2b02      	cmp	r3, #2
 8005234:	d105      	bne.n	8005242 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d002      	beq.n	8005242 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	3b01      	subs	r3, #1
 8005240:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	1c5a      	adds	r2, r3, #1
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800524a:	697b      	ldr	r3, [r7, #20]
}
 800524c:	4618      	mov	r0, r3
 800524e:	3718      	adds	r7, #24
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005262:	2b00      	cmp	r3, #0
 8005264:	d018      	beq.n	8005298 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68da      	ldr	r2, [r3, #12]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	441a      	add	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	68da      	ldr	r2, [r3, #12]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	429a      	cmp	r2, r3
 800527e:	d303      	bcc.n	8005288 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68d9      	ldr	r1, [r3, #12]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005290:	461a      	mov	r2, r3
 8005292:	6838      	ldr	r0, [r7, #0]
 8005294:	f002 f8ae 	bl	80073f4 <memcpy>
	}
}
 8005298:	bf00      	nop
 800529a:	3708      	adds	r7, #8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80052a8:	f001 fd68 	bl	8006d7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052b4:	e011      	b.n	80052da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d012      	beq.n	80052e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	3324      	adds	r3, #36	; 0x24
 80052c2:	4618      	mov	r0, r3
 80052c4:	f000 fd42 	bl	8005d4c <xTaskRemoveFromEventList>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80052ce:	f000 fe1f 	bl	8005f10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80052d2:	7bfb      	ldrb	r3, [r7, #15]
 80052d4:	3b01      	subs	r3, #1
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	dce9      	bgt.n	80052b6 <prvUnlockQueue+0x16>
 80052e2:	e000      	b.n	80052e6 <prvUnlockQueue+0x46>
					break;
 80052e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	22ff      	movs	r2, #255	; 0xff
 80052ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80052ee:	f001 fd79 	bl	8006de4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80052f2:	f001 fd43 	bl	8006d7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80052fe:	e011      	b.n	8005324 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d012      	beq.n	800532e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	3310      	adds	r3, #16
 800530c:	4618      	mov	r0, r3
 800530e:	f000 fd1d 	bl	8005d4c <xTaskRemoveFromEventList>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d001      	beq.n	800531c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005318:	f000 fdfa 	bl	8005f10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800531c:	7bbb      	ldrb	r3, [r7, #14]
 800531e:	3b01      	subs	r3, #1
 8005320:	b2db      	uxtb	r3, r3
 8005322:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005324:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005328:	2b00      	cmp	r3, #0
 800532a:	dce9      	bgt.n	8005300 <prvUnlockQueue+0x60>
 800532c:	e000      	b.n	8005330 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800532e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	22ff      	movs	r2, #255	; 0xff
 8005334:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005338:	f001 fd54 	bl	8006de4 <vPortExitCritical>
}
 800533c:	bf00      	nop
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800534c:	f001 fd16 	bl	8006d7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005354:	2b00      	cmp	r3, #0
 8005356:	d102      	bne.n	800535e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005358:	2301      	movs	r3, #1
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	e001      	b.n	8005362 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800535e:	2300      	movs	r3, #0
 8005360:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005362:	f001 fd3f 	bl	8006de4 <vPortExitCritical>

	return xReturn;
 8005366:	68fb      	ldr	r3, [r7, #12]
}
 8005368:	4618      	mov	r0, r3
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005378:	f001 fd00 	bl	8006d7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005384:	429a      	cmp	r2, r3
 8005386:	d102      	bne.n	800538e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005388:	2301      	movs	r3, #1
 800538a:	60fb      	str	r3, [r7, #12]
 800538c:	e001      	b.n	8005392 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800538e:	2300      	movs	r3, #0
 8005390:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005392:	f001 fd27 	bl	8006de4 <vPortExitCritical>

	return xReturn;
 8005396:	68fb      	ldr	r3, [r7, #12]
}
 8005398:	4618      	mov	r0, r3
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053aa:	2300      	movs	r3, #0
 80053ac:	60fb      	str	r3, [r7, #12]
 80053ae:	e014      	b.n	80053da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80053b0:	4a0f      	ldr	r2, [pc, #60]	; (80053f0 <vQueueAddToRegistry+0x50>)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d10b      	bne.n	80053d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80053bc:	490c      	ldr	r1, [pc, #48]	; (80053f0 <vQueueAddToRegistry+0x50>)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	683a      	ldr	r2, [r7, #0]
 80053c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80053c6:	4a0a      	ldr	r2, [pc, #40]	; (80053f0 <vQueueAddToRegistry+0x50>)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	4413      	add	r3, r2
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80053d2:	e006      	b.n	80053e2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	3301      	adds	r3, #1
 80053d8:	60fb      	str	r3, [r7, #12]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2b07      	cmp	r3, #7
 80053de:	d9e7      	bls.n	80053b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80053e0:	bf00      	nop
 80053e2:	bf00      	nop
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	20000f04 	.word	0x20000f04

080053f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005404:	f001 fcba 	bl	8006d7c <vPortEnterCritical>
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800540e:	b25b      	sxtb	r3, r3
 8005410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005414:	d103      	bne.n	800541e <vQueueWaitForMessageRestricted+0x2a>
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005424:	b25b      	sxtb	r3, r3
 8005426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800542a:	d103      	bne.n	8005434 <vQueueWaitForMessageRestricted+0x40>
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005434:	f001 fcd6 	bl	8006de4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543c:	2b00      	cmp	r3, #0
 800543e:	d106      	bne.n	800544e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	3324      	adds	r3, #36	; 0x24
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	68b9      	ldr	r1, [r7, #8]
 8005448:	4618      	mov	r0, r3
 800544a:	f000 fc51 	bl	8005cf0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800544e:	6978      	ldr	r0, [r7, #20]
 8005450:	f7ff ff26 	bl	80052a0 <prvUnlockQueue>
	}
 8005454:	bf00      	nop
 8005456:	3718      	adds	r7, #24
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800545c:	b580      	push	{r7, lr}
 800545e:	b08e      	sub	sp, #56	; 0x38
 8005460:	af04      	add	r7, sp, #16
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
 8005468:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800546a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10c      	bne.n	800548a <xTaskCreateStatic+0x2e>
	__asm volatile
 8005470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005474:	b672      	cpsid	i
 8005476:	f383 8811 	msr	BASEPRI, r3
 800547a:	f3bf 8f6f 	isb	sy
 800547e:	f3bf 8f4f 	dsb	sy
 8005482:	b662      	cpsie	i
 8005484:	623b      	str	r3, [r7, #32]
}
 8005486:	bf00      	nop
 8005488:	e7fe      	b.n	8005488 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800548a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10c      	bne.n	80054aa <xTaskCreateStatic+0x4e>
	__asm volatile
 8005490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005494:	b672      	cpsid	i
 8005496:	f383 8811 	msr	BASEPRI, r3
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	b662      	cpsie	i
 80054a4:	61fb      	str	r3, [r7, #28]
}
 80054a6:	bf00      	nop
 80054a8:	e7fe      	b.n	80054a8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80054aa:	235c      	movs	r3, #92	; 0x5c
 80054ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	2b5c      	cmp	r3, #92	; 0x5c
 80054b2:	d00c      	beq.n	80054ce <xTaskCreateStatic+0x72>
	__asm volatile
 80054b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b8:	b672      	cpsid	i
 80054ba:	f383 8811 	msr	BASEPRI, r3
 80054be:	f3bf 8f6f 	isb	sy
 80054c2:	f3bf 8f4f 	dsb	sy
 80054c6:	b662      	cpsie	i
 80054c8:	61bb      	str	r3, [r7, #24]
}
 80054ca:	bf00      	nop
 80054cc:	e7fe      	b.n	80054cc <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80054ce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80054d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d01e      	beq.n	8005514 <xTaskCreateStatic+0xb8>
 80054d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d01b      	beq.n	8005514 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054de:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054e4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80054e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e8:	2202      	movs	r2, #2
 80054ea:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80054ee:	2300      	movs	r3, #0
 80054f0:	9303      	str	r3, [sp, #12]
 80054f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f4:	9302      	str	r3, [sp, #8]
 80054f6:	f107 0314 	add.w	r3, r7, #20
 80054fa:	9301      	str	r3, [sp, #4]
 80054fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fe:	9300      	str	r3, [sp, #0]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	68b9      	ldr	r1, [r7, #8]
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f000 f850 	bl	80055ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800550c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800550e:	f000 f8df 	bl	80056d0 <prvAddNewTaskToReadyList>
 8005512:	e001      	b.n	8005518 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8005514:	2300      	movs	r3, #0
 8005516:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005518:	697b      	ldr	r3, [r7, #20]
	}
 800551a:	4618      	mov	r0, r3
 800551c:	3728      	adds	r7, #40	; 0x28
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005522:	b580      	push	{r7, lr}
 8005524:	b08c      	sub	sp, #48	; 0x30
 8005526:	af04      	add	r7, sp, #16
 8005528:	60f8      	str	r0, [r7, #12]
 800552a:	60b9      	str	r1, [r7, #8]
 800552c:	603b      	str	r3, [r7, #0]
 800552e:	4613      	mov	r3, r2
 8005530:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005532:	88fb      	ldrh	r3, [r7, #6]
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4618      	mov	r0, r3
 8005538:	f001 fd4c 	bl	8006fd4 <pvPortMalloc>
 800553c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00e      	beq.n	8005562 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005544:	205c      	movs	r0, #92	; 0x5c
 8005546:	f001 fd45 	bl	8006fd4 <pvPortMalloc>
 800554a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d003      	beq.n	800555a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	631a      	str	r2, [r3, #48]	; 0x30
 8005558:	e005      	b.n	8005566 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800555a:	6978      	ldr	r0, [r7, #20]
 800555c:	f001 fe04 	bl	8007168 <vPortFree>
 8005560:	e001      	b.n	8005566 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005562:	2300      	movs	r3, #0
 8005564:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d017      	beq.n	800559c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005574:	88fa      	ldrh	r2, [r7, #6]
 8005576:	2300      	movs	r3, #0
 8005578:	9303      	str	r3, [sp, #12]
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	9302      	str	r3, [sp, #8]
 800557e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005580:	9301      	str	r3, [sp, #4]
 8005582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	68b9      	ldr	r1, [r7, #8]
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f000 f80e 	bl	80055ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005590:	69f8      	ldr	r0, [r7, #28]
 8005592:	f000 f89d 	bl	80056d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005596:	2301      	movs	r3, #1
 8005598:	61bb      	str	r3, [r7, #24]
 800559a:	e002      	b.n	80055a2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800559c:	f04f 33ff 	mov.w	r3, #4294967295
 80055a0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80055a2:	69bb      	ldr	r3, [r7, #24]
	}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3720      	adds	r7, #32
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b088      	sub	sp, #32
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
 80055b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80055ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055bc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	461a      	mov	r2, r3
 80055c4:	21a5      	movs	r1, #165	; 0xa5
 80055c6:	f001 fee9 	bl	800739c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80055ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055ce:	6879      	ldr	r1, [r7, #4]
 80055d0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80055d4:	440b      	add	r3, r1
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4413      	add	r3, r2
 80055da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	f023 0307 	bic.w	r3, r3, #7
 80055e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	f003 0307 	and.w	r3, r3, #7
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00c      	beq.n	8005608 <prvInitialiseNewTask+0x5c>
	__asm volatile
 80055ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f2:	b672      	cpsid	i
 80055f4:	f383 8811 	msr	BASEPRI, r3
 80055f8:	f3bf 8f6f 	isb	sy
 80055fc:	f3bf 8f4f 	dsb	sy
 8005600:	b662      	cpsie	i
 8005602:	617b      	str	r3, [r7, #20]
}
 8005604:	bf00      	nop
 8005606:	e7fe      	b.n	8005606 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d01f      	beq.n	800564e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800560e:	2300      	movs	r3, #0
 8005610:	61fb      	str	r3, [r7, #28]
 8005612:	e012      	b.n	800563a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	4413      	add	r3, r2
 800561a:	7819      	ldrb	r1, [r3, #0]
 800561c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	4413      	add	r3, r2
 8005622:	3334      	adds	r3, #52	; 0x34
 8005624:	460a      	mov	r2, r1
 8005626:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005628:	68ba      	ldr	r2, [r7, #8]
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	4413      	add	r3, r2
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d006      	beq.n	8005642 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	3301      	adds	r3, #1
 8005638:	61fb      	str	r3, [r7, #28]
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	2b0f      	cmp	r3, #15
 800563e:	d9e9      	bls.n	8005614 <prvInitialiseNewTask+0x68>
 8005640:	e000      	b.n	8005644 <prvInitialiseNewTask+0x98>
			{
				break;
 8005642:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005646:	2200      	movs	r2, #0
 8005648:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800564c:	e003      	b.n	8005656 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800564e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005658:	2b37      	cmp	r3, #55	; 0x37
 800565a:	d901      	bls.n	8005660 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800565c:	2337      	movs	r3, #55	; 0x37
 800565e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005662:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005664:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005668:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800566a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800566c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566e:	2200      	movs	r2, #0
 8005670:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005674:	3304      	adds	r3, #4
 8005676:	4618      	mov	r0, r3
 8005678:	f7ff f952 	bl	8004920 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800567c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567e:	3318      	adds	r3, #24
 8005680:	4618      	mov	r0, r3
 8005682:	f7ff f94d 	bl	8004920 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800568a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800568c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005694:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005698:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800569a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800569c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569e:	2200      	movs	r2, #0
 80056a0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80056a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	68f9      	ldr	r1, [r7, #12]
 80056ae:	69b8      	ldr	r0, [r7, #24]
 80056b0:	f001 fa58 	bl	8006b64 <pxPortInitialiseStack>
 80056b4:	4602      	mov	r2, r0
 80056b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80056ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d002      	beq.n	80056c6 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80056c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056c6:	bf00      	nop
 80056c8:	3720      	adds	r7, #32
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
	...

080056d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80056d8:	f001 fb50 	bl	8006d7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80056dc:	4b2d      	ldr	r3, [pc, #180]	; (8005794 <prvAddNewTaskToReadyList+0xc4>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	3301      	adds	r3, #1
 80056e2:	4a2c      	ldr	r2, [pc, #176]	; (8005794 <prvAddNewTaskToReadyList+0xc4>)
 80056e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80056e6:	4b2c      	ldr	r3, [pc, #176]	; (8005798 <prvAddNewTaskToReadyList+0xc8>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d109      	bne.n	8005702 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80056ee:	4a2a      	ldr	r2, [pc, #168]	; (8005798 <prvAddNewTaskToReadyList+0xc8>)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80056f4:	4b27      	ldr	r3, [pc, #156]	; (8005794 <prvAddNewTaskToReadyList+0xc4>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d110      	bne.n	800571e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80056fc:	f000 fc2c 	bl	8005f58 <prvInitialiseTaskLists>
 8005700:	e00d      	b.n	800571e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005702:	4b26      	ldr	r3, [pc, #152]	; (800579c <prvAddNewTaskToReadyList+0xcc>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d109      	bne.n	800571e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800570a:	4b23      	ldr	r3, [pc, #140]	; (8005798 <prvAddNewTaskToReadyList+0xc8>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005714:	429a      	cmp	r2, r3
 8005716:	d802      	bhi.n	800571e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005718:	4a1f      	ldr	r2, [pc, #124]	; (8005798 <prvAddNewTaskToReadyList+0xc8>)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800571e:	4b20      	ldr	r3, [pc, #128]	; (80057a0 <prvAddNewTaskToReadyList+0xd0>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	3301      	adds	r3, #1
 8005724:	4a1e      	ldr	r2, [pc, #120]	; (80057a0 <prvAddNewTaskToReadyList+0xd0>)
 8005726:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005728:	4b1d      	ldr	r3, [pc, #116]	; (80057a0 <prvAddNewTaskToReadyList+0xd0>)
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005734:	4b1b      	ldr	r3, [pc, #108]	; (80057a4 <prvAddNewTaskToReadyList+0xd4>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	429a      	cmp	r2, r3
 800573a:	d903      	bls.n	8005744 <prvAddNewTaskToReadyList+0x74>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005740:	4a18      	ldr	r2, [pc, #96]	; (80057a4 <prvAddNewTaskToReadyList+0xd4>)
 8005742:	6013      	str	r3, [r2, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005748:	4613      	mov	r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4413      	add	r3, r2
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4a15      	ldr	r2, [pc, #84]	; (80057a8 <prvAddNewTaskToReadyList+0xd8>)
 8005752:	441a      	add	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	3304      	adds	r3, #4
 8005758:	4619      	mov	r1, r3
 800575a:	4610      	mov	r0, r2
 800575c:	f7ff f8ed 	bl	800493a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005760:	f001 fb40 	bl	8006de4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005764:	4b0d      	ldr	r3, [pc, #52]	; (800579c <prvAddNewTaskToReadyList+0xcc>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00e      	beq.n	800578a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800576c:	4b0a      	ldr	r3, [pc, #40]	; (8005798 <prvAddNewTaskToReadyList+0xc8>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005776:	429a      	cmp	r2, r3
 8005778:	d207      	bcs.n	800578a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800577a:	4b0c      	ldr	r3, [pc, #48]	; (80057ac <prvAddNewTaskToReadyList+0xdc>)
 800577c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005780:	601a      	str	r2, [r3, #0]
 8005782:	f3bf 8f4f 	dsb	sy
 8005786:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800578a:	bf00      	nop
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	20001418 	.word	0x20001418
 8005798:	20000f44 	.word	0x20000f44
 800579c:	20001424 	.word	0x20001424
 80057a0:	20001434 	.word	0x20001434
 80057a4:	20001420 	.word	0x20001420
 80057a8:	20000f48 	.word	0x20000f48
 80057ac:	e000ed04 	.word	0xe000ed04

080057b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80057b8:	2300      	movs	r3, #0
 80057ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d019      	beq.n	80057f6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80057c2:	4b14      	ldr	r3, [pc, #80]	; (8005814 <vTaskDelay+0x64>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00c      	beq.n	80057e4 <vTaskDelay+0x34>
	__asm volatile
 80057ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ce:	b672      	cpsid	i
 80057d0:	f383 8811 	msr	BASEPRI, r3
 80057d4:	f3bf 8f6f 	isb	sy
 80057d8:	f3bf 8f4f 	dsb	sy
 80057dc:	b662      	cpsie	i
 80057de:	60bb      	str	r3, [r7, #8]
}
 80057e0:	bf00      	nop
 80057e2:	e7fe      	b.n	80057e2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80057e4:	f000 f884 	bl	80058f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80057e8:	2100      	movs	r1, #0
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 fe0a 	bl	8006404 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80057f0:	f000 f88c 	bl	800590c <xTaskResumeAll>
 80057f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d107      	bne.n	800580c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80057fc:	4b06      	ldr	r3, [pc, #24]	; (8005818 <vTaskDelay+0x68>)
 80057fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005802:	601a      	str	r2, [r3, #0]
 8005804:	f3bf 8f4f 	dsb	sy
 8005808:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800580c:	bf00      	nop
 800580e:	3710      	adds	r7, #16
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	20001440 	.word	0x20001440
 8005818:	e000ed04 	.word	0xe000ed04

0800581c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b08a      	sub	sp, #40	; 0x28
 8005820:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005822:	2300      	movs	r3, #0
 8005824:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005826:	2300      	movs	r3, #0
 8005828:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800582a:	463a      	mov	r2, r7
 800582c:	1d39      	adds	r1, r7, #4
 800582e:	f107 0308 	add.w	r3, r7, #8
 8005832:	4618      	mov	r0, r3
 8005834:	f7ff f820 	bl	8004878 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005838:	6839      	ldr	r1, [r7, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68ba      	ldr	r2, [r7, #8]
 800583e:	9202      	str	r2, [sp, #8]
 8005840:	9301      	str	r3, [sp, #4]
 8005842:	2300      	movs	r3, #0
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	2300      	movs	r3, #0
 8005848:	460a      	mov	r2, r1
 800584a:	4923      	ldr	r1, [pc, #140]	; (80058d8 <vTaskStartScheduler+0xbc>)
 800584c:	4823      	ldr	r0, [pc, #140]	; (80058dc <vTaskStartScheduler+0xc0>)
 800584e:	f7ff fe05 	bl	800545c <xTaskCreateStatic>
 8005852:	4603      	mov	r3, r0
 8005854:	4a22      	ldr	r2, [pc, #136]	; (80058e0 <vTaskStartScheduler+0xc4>)
 8005856:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005858:	4b21      	ldr	r3, [pc, #132]	; (80058e0 <vTaskStartScheduler+0xc4>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d002      	beq.n	8005866 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005860:	2301      	movs	r3, #1
 8005862:	617b      	str	r3, [r7, #20]
 8005864:	e001      	b.n	800586a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005866:	2300      	movs	r3, #0
 8005868:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d102      	bne.n	8005876 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005870:	f000 fe1c 	bl	80064ac <xTimerCreateTimerTask>
 8005874:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d118      	bne.n	80058ae <vTaskStartScheduler+0x92>
	__asm volatile
 800587c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005880:	b672      	cpsid	i
 8005882:	f383 8811 	msr	BASEPRI, r3
 8005886:	f3bf 8f6f 	isb	sy
 800588a:	f3bf 8f4f 	dsb	sy
 800588e:	b662      	cpsie	i
 8005890:	613b      	str	r3, [r7, #16]
}
 8005892:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005894:	4b13      	ldr	r3, [pc, #76]	; (80058e4 <vTaskStartScheduler+0xc8>)
 8005896:	f04f 32ff 	mov.w	r2, #4294967295
 800589a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800589c:	4b12      	ldr	r3, [pc, #72]	; (80058e8 <vTaskStartScheduler+0xcc>)
 800589e:	2201      	movs	r2, #1
 80058a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80058a2:	4b12      	ldr	r3, [pc, #72]	; (80058ec <vTaskStartScheduler+0xd0>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80058a8:	f001 f9ea 	bl	8006c80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80058ac:	e010      	b.n	80058d0 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b4:	d10c      	bne.n	80058d0 <vTaskStartScheduler+0xb4>
	__asm volatile
 80058b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ba:	b672      	cpsid	i
 80058bc:	f383 8811 	msr	BASEPRI, r3
 80058c0:	f3bf 8f6f 	isb	sy
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	b662      	cpsie	i
 80058ca:	60fb      	str	r3, [r7, #12]
}
 80058cc:	bf00      	nop
 80058ce:	e7fe      	b.n	80058ce <vTaskStartScheduler+0xb2>
}
 80058d0:	bf00      	nop
 80058d2:	3718      	adds	r7, #24
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	08007444 	.word	0x08007444
 80058dc:	08005f29 	.word	0x08005f29
 80058e0:	2000143c 	.word	0x2000143c
 80058e4:	20001438 	.word	0x20001438
 80058e8:	20001424 	.word	0x20001424
 80058ec:	2000141c 	.word	0x2000141c

080058f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80058f0:	b480      	push	{r7}
 80058f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80058f4:	4b04      	ldr	r3, [pc, #16]	; (8005908 <vTaskSuspendAll+0x18>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	3301      	adds	r3, #1
 80058fa:	4a03      	ldr	r2, [pc, #12]	; (8005908 <vTaskSuspendAll+0x18>)
 80058fc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80058fe:	bf00      	nop
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	20001440 	.word	0x20001440

0800590c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005912:	2300      	movs	r3, #0
 8005914:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005916:	2300      	movs	r3, #0
 8005918:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800591a:	4b43      	ldr	r3, [pc, #268]	; (8005a28 <xTaskResumeAll+0x11c>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10c      	bne.n	800593c <xTaskResumeAll+0x30>
	__asm volatile
 8005922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005926:	b672      	cpsid	i
 8005928:	f383 8811 	msr	BASEPRI, r3
 800592c:	f3bf 8f6f 	isb	sy
 8005930:	f3bf 8f4f 	dsb	sy
 8005934:	b662      	cpsie	i
 8005936:	603b      	str	r3, [r7, #0]
}
 8005938:	bf00      	nop
 800593a:	e7fe      	b.n	800593a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800593c:	f001 fa1e 	bl	8006d7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005940:	4b39      	ldr	r3, [pc, #228]	; (8005a28 <xTaskResumeAll+0x11c>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	3b01      	subs	r3, #1
 8005946:	4a38      	ldr	r2, [pc, #224]	; (8005a28 <xTaskResumeAll+0x11c>)
 8005948:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800594a:	4b37      	ldr	r3, [pc, #220]	; (8005a28 <xTaskResumeAll+0x11c>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d162      	bne.n	8005a18 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005952:	4b36      	ldr	r3, [pc, #216]	; (8005a2c <xTaskResumeAll+0x120>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d05e      	beq.n	8005a18 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800595a:	e02f      	b.n	80059bc <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800595c:	4b34      	ldr	r3, [pc, #208]	; (8005a30 <xTaskResumeAll+0x124>)
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	3318      	adds	r3, #24
 8005968:	4618      	mov	r0, r3
 800596a:	f7ff f843 	bl	80049f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	3304      	adds	r3, #4
 8005972:	4618      	mov	r0, r3
 8005974:	f7ff f83e 	bl	80049f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800597c:	4b2d      	ldr	r3, [pc, #180]	; (8005a34 <xTaskResumeAll+0x128>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	429a      	cmp	r2, r3
 8005982:	d903      	bls.n	800598c <xTaskResumeAll+0x80>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005988:	4a2a      	ldr	r2, [pc, #168]	; (8005a34 <xTaskResumeAll+0x128>)
 800598a:	6013      	str	r3, [r2, #0]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005990:	4613      	mov	r3, r2
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4a27      	ldr	r2, [pc, #156]	; (8005a38 <xTaskResumeAll+0x12c>)
 800599a:	441a      	add	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	3304      	adds	r3, #4
 80059a0:	4619      	mov	r1, r3
 80059a2:	4610      	mov	r0, r2
 80059a4:	f7fe ffc9 	bl	800493a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ac:	4b23      	ldr	r3, [pc, #140]	; (8005a3c <xTaskResumeAll+0x130>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d302      	bcc.n	80059bc <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80059b6:	4b22      	ldr	r3, [pc, #136]	; (8005a40 <xTaskResumeAll+0x134>)
 80059b8:	2201      	movs	r2, #1
 80059ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059bc:	4b1c      	ldr	r3, [pc, #112]	; (8005a30 <xTaskResumeAll+0x124>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1cb      	bne.n	800595c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80059ca:	f000 fb65 	bl	8006098 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80059ce:	4b1d      	ldr	r3, [pc, #116]	; (8005a44 <xTaskResumeAll+0x138>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d010      	beq.n	80059fc <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80059da:	f000 f847 	bl	8005a6c <xTaskIncrementTick>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d002      	beq.n	80059ea <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80059e4:	4b16      	ldr	r3, [pc, #88]	; (8005a40 <xTaskResumeAll+0x134>)
 80059e6:	2201      	movs	r2, #1
 80059e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	3b01      	subs	r3, #1
 80059ee:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1f1      	bne.n	80059da <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80059f6:	4b13      	ldr	r3, [pc, #76]	; (8005a44 <xTaskResumeAll+0x138>)
 80059f8:	2200      	movs	r2, #0
 80059fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80059fc:	4b10      	ldr	r3, [pc, #64]	; (8005a40 <xTaskResumeAll+0x134>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d009      	beq.n	8005a18 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005a04:	2301      	movs	r3, #1
 8005a06:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005a08:	4b0f      	ldr	r3, [pc, #60]	; (8005a48 <xTaskResumeAll+0x13c>)
 8005a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a0e:	601a      	str	r2, [r3, #0]
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a18:	f001 f9e4 	bl	8006de4 <vPortExitCritical>

	return xAlreadyYielded;
 8005a1c:	68bb      	ldr	r3, [r7, #8]
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	20001440 	.word	0x20001440
 8005a2c:	20001418 	.word	0x20001418
 8005a30:	200013d8 	.word	0x200013d8
 8005a34:	20001420 	.word	0x20001420
 8005a38:	20000f48 	.word	0x20000f48
 8005a3c:	20000f44 	.word	0x20000f44
 8005a40:	2000142c 	.word	0x2000142c
 8005a44:	20001428 	.word	0x20001428
 8005a48:	e000ed04 	.word	0xe000ed04

08005a4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005a52:	4b05      	ldr	r3, [pc, #20]	; (8005a68 <xTaskGetTickCount+0x1c>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005a58:	687b      	ldr	r3, [r7, #4]
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop
 8005a68:	2000141c 	.word	0x2000141c

08005a6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b086      	sub	sp, #24
 8005a70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005a72:	2300      	movs	r3, #0
 8005a74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a76:	4b50      	ldr	r3, [pc, #320]	; (8005bb8 <xTaskIncrementTick+0x14c>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f040 808b 	bne.w	8005b96 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005a80:	4b4e      	ldr	r3, [pc, #312]	; (8005bbc <xTaskIncrementTick+0x150>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	3301      	adds	r3, #1
 8005a86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005a88:	4a4c      	ldr	r2, [pc, #304]	; (8005bbc <xTaskIncrementTick+0x150>)
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d122      	bne.n	8005ada <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005a94:	4b4a      	ldr	r3, [pc, #296]	; (8005bc0 <xTaskIncrementTick+0x154>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00c      	beq.n	8005ab8 <xTaskIncrementTick+0x4c>
	__asm volatile
 8005a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa2:	b672      	cpsid	i
 8005aa4:	f383 8811 	msr	BASEPRI, r3
 8005aa8:	f3bf 8f6f 	isb	sy
 8005aac:	f3bf 8f4f 	dsb	sy
 8005ab0:	b662      	cpsie	i
 8005ab2:	603b      	str	r3, [r7, #0]
}
 8005ab4:	bf00      	nop
 8005ab6:	e7fe      	b.n	8005ab6 <xTaskIncrementTick+0x4a>
 8005ab8:	4b41      	ldr	r3, [pc, #260]	; (8005bc0 <xTaskIncrementTick+0x154>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	60fb      	str	r3, [r7, #12]
 8005abe:	4b41      	ldr	r3, [pc, #260]	; (8005bc4 <xTaskIncrementTick+0x158>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a3f      	ldr	r2, [pc, #252]	; (8005bc0 <xTaskIncrementTick+0x154>)
 8005ac4:	6013      	str	r3, [r2, #0]
 8005ac6:	4a3f      	ldr	r2, [pc, #252]	; (8005bc4 <xTaskIncrementTick+0x158>)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6013      	str	r3, [r2, #0]
 8005acc:	4b3e      	ldr	r3, [pc, #248]	; (8005bc8 <xTaskIncrementTick+0x15c>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	4a3d      	ldr	r2, [pc, #244]	; (8005bc8 <xTaskIncrementTick+0x15c>)
 8005ad4:	6013      	str	r3, [r2, #0]
 8005ad6:	f000 fadf 	bl	8006098 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ada:	4b3c      	ldr	r3, [pc, #240]	; (8005bcc <xTaskIncrementTick+0x160>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d349      	bcc.n	8005b78 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ae4:	4b36      	ldr	r3, [pc, #216]	; (8005bc0 <xTaskIncrementTick+0x154>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d104      	bne.n	8005af8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005aee:	4b37      	ldr	r3, [pc, #220]	; (8005bcc <xTaskIncrementTick+0x160>)
 8005af0:	f04f 32ff 	mov.w	r2, #4294967295
 8005af4:	601a      	str	r2, [r3, #0]
					break;
 8005af6:	e03f      	b.n	8005b78 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005af8:	4b31      	ldr	r3, [pc, #196]	; (8005bc0 <xTaskIncrementTick+0x154>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d203      	bcs.n	8005b18 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005b10:	4a2e      	ldr	r2, [pc, #184]	; (8005bcc <xTaskIncrementTick+0x160>)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005b16:	e02f      	b.n	8005b78 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	3304      	adds	r3, #4
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7fe ff69 	bl	80049f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d004      	beq.n	8005b34 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	3318      	adds	r3, #24
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7fe ff60 	bl	80049f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b38:	4b25      	ldr	r3, [pc, #148]	; (8005bd0 <xTaskIncrementTick+0x164>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d903      	bls.n	8005b48 <xTaskIncrementTick+0xdc>
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b44:	4a22      	ldr	r2, [pc, #136]	; (8005bd0 <xTaskIncrementTick+0x164>)
 8005b46:	6013      	str	r3, [r2, #0]
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4413      	add	r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4a1f      	ldr	r2, [pc, #124]	; (8005bd4 <xTaskIncrementTick+0x168>)
 8005b56:	441a      	add	r2, r3
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	3304      	adds	r3, #4
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	4610      	mov	r0, r2
 8005b60:	f7fe feeb 	bl	800493a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b68:	4b1b      	ldr	r3, [pc, #108]	; (8005bd8 <xTaskIncrementTick+0x16c>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d3b8      	bcc.n	8005ae4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005b72:	2301      	movs	r3, #1
 8005b74:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b76:	e7b5      	b.n	8005ae4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b78:	4b17      	ldr	r3, [pc, #92]	; (8005bd8 <xTaskIncrementTick+0x16c>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b7e:	4915      	ldr	r1, [pc, #84]	; (8005bd4 <xTaskIncrementTick+0x168>)
 8005b80:	4613      	mov	r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	4413      	add	r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	440b      	add	r3, r1
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d907      	bls.n	8005ba0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8005b90:	2301      	movs	r3, #1
 8005b92:	617b      	str	r3, [r7, #20]
 8005b94:	e004      	b.n	8005ba0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005b96:	4b11      	ldr	r3, [pc, #68]	; (8005bdc <xTaskIncrementTick+0x170>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	4a0f      	ldr	r2, [pc, #60]	; (8005bdc <xTaskIncrementTick+0x170>)
 8005b9e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005ba0:	4b0f      	ldr	r3, [pc, #60]	; (8005be0 <xTaskIncrementTick+0x174>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d001      	beq.n	8005bac <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005bac:	697b      	ldr	r3, [r7, #20]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3718      	adds	r7, #24
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	20001440 	.word	0x20001440
 8005bbc:	2000141c 	.word	0x2000141c
 8005bc0:	200013d0 	.word	0x200013d0
 8005bc4:	200013d4 	.word	0x200013d4
 8005bc8:	20001430 	.word	0x20001430
 8005bcc:	20001438 	.word	0x20001438
 8005bd0:	20001420 	.word	0x20001420
 8005bd4:	20000f48 	.word	0x20000f48
 8005bd8:	20000f44 	.word	0x20000f44
 8005bdc:	20001428 	.word	0x20001428
 8005be0:	2000142c 	.word	0x2000142c

08005be4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005bea:	4b29      	ldr	r3, [pc, #164]	; (8005c90 <vTaskSwitchContext+0xac>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005bf2:	4b28      	ldr	r3, [pc, #160]	; (8005c94 <vTaskSwitchContext+0xb0>)
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005bf8:	e043      	b.n	8005c82 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8005bfa:	4b26      	ldr	r3, [pc, #152]	; (8005c94 <vTaskSwitchContext+0xb0>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c00:	4b25      	ldr	r3, [pc, #148]	; (8005c98 <vTaskSwitchContext+0xb4>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	60fb      	str	r3, [r7, #12]
 8005c06:	e012      	b.n	8005c2e <vTaskSwitchContext+0x4a>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10c      	bne.n	8005c28 <vTaskSwitchContext+0x44>
	__asm volatile
 8005c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c12:	b672      	cpsid	i
 8005c14:	f383 8811 	msr	BASEPRI, r3
 8005c18:	f3bf 8f6f 	isb	sy
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	b662      	cpsie	i
 8005c22:	607b      	str	r3, [r7, #4]
}
 8005c24:	bf00      	nop
 8005c26:	e7fe      	b.n	8005c26 <vTaskSwitchContext+0x42>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	60fb      	str	r3, [r7, #12]
 8005c2e:	491b      	ldr	r1, [pc, #108]	; (8005c9c <vTaskSwitchContext+0xb8>)
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	4613      	mov	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	440b      	add	r3, r1
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d0e2      	beq.n	8005c08 <vTaskSwitchContext+0x24>
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	4613      	mov	r3, r2
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	4413      	add	r3, r2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4a13      	ldr	r2, [pc, #76]	; (8005c9c <vTaskSwitchContext+0xb8>)
 8005c4e:	4413      	add	r3, r2
 8005c50:	60bb      	str	r3, [r7, #8]
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	685a      	ldr	r2, [r3, #4]
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	605a      	str	r2, [r3, #4]
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	3308      	adds	r3, #8
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d104      	bne.n	8005c72 <vTaskSwitchContext+0x8e>
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	605a      	str	r2, [r3, #4]
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	4a09      	ldr	r2, [pc, #36]	; (8005ca0 <vTaskSwitchContext+0xbc>)
 8005c7a:	6013      	str	r3, [r2, #0]
 8005c7c:	4a06      	ldr	r2, [pc, #24]	; (8005c98 <vTaskSwitchContext+0xb4>)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6013      	str	r3, [r2, #0]
}
 8005c82:	bf00      	nop
 8005c84:	3714      	adds	r7, #20
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	20001440 	.word	0x20001440
 8005c94:	2000142c 	.word	0x2000142c
 8005c98:	20001420 	.word	0x20001420
 8005c9c:	20000f48 	.word	0x20000f48
 8005ca0:	20000f44 	.word	0x20000f44

08005ca4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d10c      	bne.n	8005cce <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8005cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb8:	b672      	cpsid	i
 8005cba:	f383 8811 	msr	BASEPRI, r3
 8005cbe:	f3bf 8f6f 	isb	sy
 8005cc2:	f3bf 8f4f 	dsb	sy
 8005cc6:	b662      	cpsie	i
 8005cc8:	60fb      	str	r3, [r7, #12]
}
 8005cca:	bf00      	nop
 8005ccc:	e7fe      	b.n	8005ccc <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005cce:	4b07      	ldr	r3, [pc, #28]	; (8005cec <vTaskPlaceOnEventList+0x48>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	3318      	adds	r3, #24
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f7fe fe53 	bl	8004982 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005cdc:	2101      	movs	r1, #1
 8005cde:	6838      	ldr	r0, [r7, #0]
 8005ce0:	f000 fb90 	bl	8006404 <prvAddCurrentTaskToDelayedList>
}
 8005ce4:	bf00      	nop
 8005ce6:	3710      	adds	r7, #16
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	20000f44 	.word	0x20000f44

08005cf0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d10c      	bne.n	8005d1c <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8005d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d06:	b672      	cpsid	i
 8005d08:	f383 8811 	msr	BASEPRI, r3
 8005d0c:	f3bf 8f6f 	isb	sy
 8005d10:	f3bf 8f4f 	dsb	sy
 8005d14:	b662      	cpsie	i
 8005d16:	617b      	str	r3, [r7, #20]
}
 8005d18:	bf00      	nop
 8005d1a:	e7fe      	b.n	8005d1a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d1c:	4b0a      	ldr	r3, [pc, #40]	; (8005d48 <vTaskPlaceOnEventListRestricted+0x58>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	3318      	adds	r3, #24
 8005d22:	4619      	mov	r1, r3
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f7fe fe08 	bl	800493a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d002      	beq.n	8005d36 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8005d30:	f04f 33ff 	mov.w	r3, #4294967295
 8005d34:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005d36:	6879      	ldr	r1, [r7, #4]
 8005d38:	68b8      	ldr	r0, [r7, #8]
 8005d3a:	f000 fb63 	bl	8006404 <prvAddCurrentTaskToDelayedList>
	}
 8005d3e:	bf00      	nop
 8005d40:	3718      	adds	r7, #24
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	20000f44 	.word	0x20000f44

08005d4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10c      	bne.n	8005d7c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8005d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d66:	b672      	cpsid	i
 8005d68:	f383 8811 	msr	BASEPRI, r3
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	f3bf 8f4f 	dsb	sy
 8005d74:	b662      	cpsie	i
 8005d76:	60fb      	str	r3, [r7, #12]
}
 8005d78:	bf00      	nop
 8005d7a:	e7fe      	b.n	8005d7a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	3318      	adds	r3, #24
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7fe fe37 	bl	80049f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d86:	4b1e      	ldr	r3, [pc, #120]	; (8005e00 <xTaskRemoveFromEventList+0xb4>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d11d      	bne.n	8005dca <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	3304      	adds	r3, #4
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7fe fe2e 	bl	80049f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d9c:	4b19      	ldr	r3, [pc, #100]	; (8005e04 <xTaskRemoveFromEventList+0xb8>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d903      	bls.n	8005dac <xTaskRemoveFromEventList+0x60>
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da8:	4a16      	ldr	r2, [pc, #88]	; (8005e04 <xTaskRemoveFromEventList+0xb8>)
 8005daa:	6013      	str	r3, [r2, #0]
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db0:	4613      	mov	r3, r2
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	4413      	add	r3, r2
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	4a13      	ldr	r2, [pc, #76]	; (8005e08 <xTaskRemoveFromEventList+0xbc>)
 8005dba:	441a      	add	r2, r3
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	3304      	adds	r3, #4
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	4610      	mov	r0, r2
 8005dc4:	f7fe fdb9 	bl	800493a <vListInsertEnd>
 8005dc8:	e005      	b.n	8005dd6 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	3318      	adds	r3, #24
 8005dce:	4619      	mov	r1, r3
 8005dd0:	480e      	ldr	r0, [pc, #56]	; (8005e0c <xTaskRemoveFromEventList+0xc0>)
 8005dd2:	f7fe fdb2 	bl	800493a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dda:	4b0d      	ldr	r3, [pc, #52]	; (8005e10 <xTaskRemoveFromEventList+0xc4>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d905      	bls.n	8005df0 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005de4:	2301      	movs	r3, #1
 8005de6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005de8:	4b0a      	ldr	r3, [pc, #40]	; (8005e14 <xTaskRemoveFromEventList+0xc8>)
 8005dea:	2201      	movs	r2, #1
 8005dec:	601a      	str	r2, [r3, #0]
 8005dee:	e001      	b.n	8005df4 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8005df0:	2300      	movs	r3, #0
 8005df2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005df4:	697b      	ldr	r3, [r7, #20]
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3718      	adds	r7, #24
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	20001440 	.word	0x20001440
 8005e04:	20001420 	.word	0x20001420
 8005e08:	20000f48 	.word	0x20000f48
 8005e0c:	200013d8 	.word	0x200013d8
 8005e10:	20000f44 	.word	0x20000f44
 8005e14:	2000142c 	.word	0x2000142c

08005e18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005e20:	4b06      	ldr	r3, [pc, #24]	; (8005e3c <vTaskInternalSetTimeOutState+0x24>)
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005e28:	4b05      	ldr	r3, [pc, #20]	; (8005e40 <vTaskInternalSetTimeOutState+0x28>)
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	605a      	str	r2, [r3, #4]
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr
 8005e3c:	20001430 	.word	0x20001430
 8005e40:	2000141c 	.word	0x2000141c

08005e44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b088      	sub	sp, #32
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10c      	bne.n	8005e6e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8005e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e58:	b672      	cpsid	i
 8005e5a:	f383 8811 	msr	BASEPRI, r3
 8005e5e:	f3bf 8f6f 	isb	sy
 8005e62:	f3bf 8f4f 	dsb	sy
 8005e66:	b662      	cpsie	i
 8005e68:	613b      	str	r3, [r7, #16]
}
 8005e6a:	bf00      	nop
 8005e6c:	e7fe      	b.n	8005e6c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10c      	bne.n	8005e8e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8005e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e78:	b672      	cpsid	i
 8005e7a:	f383 8811 	msr	BASEPRI, r3
 8005e7e:	f3bf 8f6f 	isb	sy
 8005e82:	f3bf 8f4f 	dsb	sy
 8005e86:	b662      	cpsie	i
 8005e88:	60fb      	str	r3, [r7, #12]
}
 8005e8a:	bf00      	nop
 8005e8c:	e7fe      	b.n	8005e8c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8005e8e:	f000 ff75 	bl	8006d7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005e92:	4b1d      	ldr	r3, [pc, #116]	; (8005f08 <xTaskCheckForTimeOut+0xc4>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	69ba      	ldr	r2, [r7, #24]
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eaa:	d102      	bne.n	8005eb2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005eac:	2300      	movs	r3, #0
 8005eae:	61fb      	str	r3, [r7, #28]
 8005eb0:	e023      	b.n	8005efa <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	4b15      	ldr	r3, [pc, #84]	; (8005f0c <xTaskCheckForTimeOut+0xc8>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d007      	beq.n	8005ece <xTaskCheckForTimeOut+0x8a>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	69ba      	ldr	r2, [r7, #24]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d302      	bcc.n	8005ece <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	61fb      	str	r3, [r7, #28]
 8005ecc:	e015      	b.n	8005efa <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d20b      	bcs.n	8005ef0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	1ad2      	subs	r2, r2, r3
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f7ff ff97 	bl	8005e18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005eea:	2300      	movs	r3, #0
 8005eec:	61fb      	str	r3, [r7, #28]
 8005eee:	e004      	b.n	8005efa <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005efa:	f000 ff73 	bl	8006de4 <vPortExitCritical>

	return xReturn;
 8005efe:	69fb      	ldr	r3, [r7, #28]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3720      	adds	r7, #32
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	2000141c 	.word	0x2000141c
 8005f0c:	20001430 	.word	0x20001430

08005f10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005f10:	b480      	push	{r7}
 8005f12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005f14:	4b03      	ldr	r3, [pc, #12]	; (8005f24 <vTaskMissedYield+0x14>)
 8005f16:	2201      	movs	r2, #1
 8005f18:	601a      	str	r2, [r3, #0]
}
 8005f1a:	bf00      	nop
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr
 8005f24:	2000142c 	.word	0x2000142c

08005f28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f30:	f000 f852 	bl	8005fd8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f34:	4b06      	ldr	r3, [pc, #24]	; (8005f50 <prvIdleTask+0x28>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d9f9      	bls.n	8005f30 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f3c:	4b05      	ldr	r3, [pc, #20]	; (8005f54 <prvIdleTask+0x2c>)
 8005f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f42:	601a      	str	r2, [r3, #0]
 8005f44:	f3bf 8f4f 	dsb	sy
 8005f48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005f4c:	e7f0      	b.n	8005f30 <prvIdleTask+0x8>
 8005f4e:	bf00      	nop
 8005f50:	20000f48 	.word	0x20000f48
 8005f54:	e000ed04 	.word	0xe000ed04

08005f58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f5e:	2300      	movs	r3, #0
 8005f60:	607b      	str	r3, [r7, #4]
 8005f62:	e00c      	b.n	8005f7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	4613      	mov	r3, r2
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	4413      	add	r3, r2
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4a12      	ldr	r2, [pc, #72]	; (8005fb8 <prvInitialiseTaskLists+0x60>)
 8005f70:	4413      	add	r3, r2
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7fe fcb4 	bl	80048e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	607b      	str	r3, [r7, #4]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2b37      	cmp	r3, #55	; 0x37
 8005f82:	d9ef      	bls.n	8005f64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005f84:	480d      	ldr	r0, [pc, #52]	; (8005fbc <prvInitialiseTaskLists+0x64>)
 8005f86:	f7fe fcab 	bl	80048e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005f8a:	480d      	ldr	r0, [pc, #52]	; (8005fc0 <prvInitialiseTaskLists+0x68>)
 8005f8c:	f7fe fca8 	bl	80048e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005f90:	480c      	ldr	r0, [pc, #48]	; (8005fc4 <prvInitialiseTaskLists+0x6c>)
 8005f92:	f7fe fca5 	bl	80048e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005f96:	480c      	ldr	r0, [pc, #48]	; (8005fc8 <prvInitialiseTaskLists+0x70>)
 8005f98:	f7fe fca2 	bl	80048e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005f9c:	480b      	ldr	r0, [pc, #44]	; (8005fcc <prvInitialiseTaskLists+0x74>)
 8005f9e:	f7fe fc9f 	bl	80048e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005fa2:	4b0b      	ldr	r3, [pc, #44]	; (8005fd0 <prvInitialiseTaskLists+0x78>)
 8005fa4:	4a05      	ldr	r2, [pc, #20]	; (8005fbc <prvInitialiseTaskLists+0x64>)
 8005fa6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005fa8:	4b0a      	ldr	r3, [pc, #40]	; (8005fd4 <prvInitialiseTaskLists+0x7c>)
 8005faa:	4a05      	ldr	r2, [pc, #20]	; (8005fc0 <prvInitialiseTaskLists+0x68>)
 8005fac:	601a      	str	r2, [r3, #0]
}
 8005fae:	bf00      	nop
 8005fb0:	3708      	adds	r7, #8
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	20000f48 	.word	0x20000f48
 8005fbc:	200013a8 	.word	0x200013a8
 8005fc0:	200013bc 	.word	0x200013bc
 8005fc4:	200013d8 	.word	0x200013d8
 8005fc8:	200013ec 	.word	0x200013ec
 8005fcc:	20001404 	.word	0x20001404
 8005fd0:	200013d0 	.word	0x200013d0
 8005fd4:	200013d4 	.word	0x200013d4

08005fd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fde:	e019      	b.n	8006014 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005fe0:	f000 fecc 	bl	8006d7c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fe4:	4b10      	ldr	r3, [pc, #64]	; (8006028 <prvCheckTasksWaitingTermination+0x50>)
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	3304      	adds	r3, #4
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7fe fcff 	bl	80049f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005ff6:	4b0d      	ldr	r3, [pc, #52]	; (800602c <prvCheckTasksWaitingTermination+0x54>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	4a0b      	ldr	r2, [pc, #44]	; (800602c <prvCheckTasksWaitingTermination+0x54>)
 8005ffe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006000:	4b0b      	ldr	r3, [pc, #44]	; (8006030 <prvCheckTasksWaitingTermination+0x58>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3b01      	subs	r3, #1
 8006006:	4a0a      	ldr	r2, [pc, #40]	; (8006030 <prvCheckTasksWaitingTermination+0x58>)
 8006008:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800600a:	f000 feeb 	bl	8006de4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f810 	bl	8006034 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006014:	4b06      	ldr	r3, [pc, #24]	; (8006030 <prvCheckTasksWaitingTermination+0x58>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1e1      	bne.n	8005fe0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800601c:	bf00      	nop
 800601e:	bf00      	nop
 8006020:	3708      	adds	r7, #8
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	200013ec 	.word	0x200013ec
 800602c:	20001418 	.word	0x20001418
 8006030:	20001400 	.word	0x20001400

08006034 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006042:	2b00      	cmp	r3, #0
 8006044:	d108      	bne.n	8006058 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604a:	4618      	mov	r0, r3
 800604c:	f001 f88c 	bl	8007168 <vPortFree>
				vPortFree( pxTCB );
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f001 f889 	bl	8007168 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006056:	e01a      	b.n	800608e <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800605e:	2b01      	cmp	r3, #1
 8006060:	d103      	bne.n	800606a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f001 f880 	bl	8007168 <vPortFree>
	}
 8006068:	e011      	b.n	800608e <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006070:	2b02      	cmp	r3, #2
 8006072:	d00c      	beq.n	800608e <prvDeleteTCB+0x5a>
	__asm volatile
 8006074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006078:	b672      	cpsid	i
 800607a:	f383 8811 	msr	BASEPRI, r3
 800607e:	f3bf 8f6f 	isb	sy
 8006082:	f3bf 8f4f 	dsb	sy
 8006086:	b662      	cpsie	i
 8006088:	60fb      	str	r3, [r7, #12]
}
 800608a:	bf00      	nop
 800608c:	e7fe      	b.n	800608c <prvDeleteTCB+0x58>
	}
 800608e:	bf00      	nop
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
	...

08006098 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800609e:	4b0c      	ldr	r3, [pc, #48]	; (80060d0 <prvResetNextTaskUnblockTime+0x38>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d104      	bne.n	80060b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80060a8:	4b0a      	ldr	r3, [pc, #40]	; (80060d4 <prvResetNextTaskUnblockTime+0x3c>)
 80060aa:	f04f 32ff 	mov.w	r2, #4294967295
 80060ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80060b0:	e008      	b.n	80060c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060b2:	4b07      	ldr	r3, [pc, #28]	; (80060d0 <prvResetNextTaskUnblockTime+0x38>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	4a04      	ldr	r2, [pc, #16]	; (80060d4 <prvResetNextTaskUnblockTime+0x3c>)
 80060c2:	6013      	str	r3, [r2, #0]
}
 80060c4:	bf00      	nop
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr
 80060d0:	200013d0 	.word	0x200013d0
 80060d4:	20001438 	.word	0x20001438

080060d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80060de:	4b0b      	ldr	r3, [pc, #44]	; (800610c <xTaskGetSchedulerState+0x34>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d102      	bne.n	80060ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80060e6:	2301      	movs	r3, #1
 80060e8:	607b      	str	r3, [r7, #4]
 80060ea:	e008      	b.n	80060fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060ec:	4b08      	ldr	r3, [pc, #32]	; (8006110 <xTaskGetSchedulerState+0x38>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d102      	bne.n	80060fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80060f4:	2302      	movs	r3, #2
 80060f6:	607b      	str	r3, [r7, #4]
 80060f8:	e001      	b.n	80060fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80060fa:	2300      	movs	r3, #0
 80060fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80060fe:	687b      	ldr	r3, [r7, #4]
	}
 8006100:	4618      	mov	r0, r3
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr
 800610c:	20001424 	.word	0x20001424
 8006110:	20001440 	.word	0x20001440

08006114 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006120:	2300      	movs	r3, #0
 8006122:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d05a      	beq.n	80061e0 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800612a:	4b30      	ldr	r3, [pc, #192]	; (80061ec <xTaskPriorityDisinherit+0xd8>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	429a      	cmp	r2, r3
 8006132:	d00c      	beq.n	800614e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8006134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006138:	b672      	cpsid	i
 800613a:	f383 8811 	msr	BASEPRI, r3
 800613e:	f3bf 8f6f 	isb	sy
 8006142:	f3bf 8f4f 	dsb	sy
 8006146:	b662      	cpsie	i
 8006148:	60fb      	str	r3, [r7, #12]
}
 800614a:	bf00      	nop
 800614c:	e7fe      	b.n	800614c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10c      	bne.n	8006170 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8006156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615a:	b672      	cpsid	i
 800615c:	f383 8811 	msr	BASEPRI, r3
 8006160:	f3bf 8f6f 	isb	sy
 8006164:	f3bf 8f4f 	dsb	sy
 8006168:	b662      	cpsie	i
 800616a:	60bb      	str	r3, [r7, #8]
}
 800616c:	bf00      	nop
 800616e:	e7fe      	b.n	800616e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006174:	1e5a      	subs	r2, r3, #1
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006182:	429a      	cmp	r2, r3
 8006184:	d02c      	beq.n	80061e0 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800618a:	2b00      	cmp	r3, #0
 800618c:	d128      	bne.n	80061e0 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	3304      	adds	r3, #4
 8006192:	4618      	mov	r0, r3
 8006194:	f7fe fc2e 	bl	80049f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b0:	4b0f      	ldr	r3, [pc, #60]	; (80061f0 <xTaskPriorityDisinherit+0xdc>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d903      	bls.n	80061c0 <xTaskPriorityDisinherit+0xac>
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061bc:	4a0c      	ldr	r2, [pc, #48]	; (80061f0 <xTaskPriorityDisinherit+0xdc>)
 80061be:	6013      	str	r3, [r2, #0]
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c4:	4613      	mov	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4a09      	ldr	r2, [pc, #36]	; (80061f4 <xTaskPriorityDisinherit+0xe0>)
 80061ce:	441a      	add	r2, r3
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	3304      	adds	r3, #4
 80061d4:	4619      	mov	r1, r3
 80061d6:	4610      	mov	r0, r2
 80061d8:	f7fe fbaf 	bl	800493a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80061dc:	2301      	movs	r3, #1
 80061de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80061e0:	697b      	ldr	r3, [r7, #20]
	}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3718      	adds	r7, #24
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	20000f44 	.word	0x20000f44
 80061f0:	20001420 	.word	0x20001420
 80061f4:	20000f48 	.word	0x20000f48

080061f8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8006202:	f000 fdbb 	bl	8006d7c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8006206:	4b1e      	ldr	r3, [pc, #120]	; (8006280 <ulTaskNotifyTake+0x88>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800620c:	2b00      	cmp	r3, #0
 800620e:	d113      	bne.n	8006238 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006210:	4b1b      	ldr	r3, [pc, #108]	; (8006280 <ulTaskNotifyTake+0x88>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00b      	beq.n	8006238 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006220:	2101      	movs	r1, #1
 8006222:	6838      	ldr	r0, [r7, #0]
 8006224:	f000 f8ee 	bl	8006404 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006228:	4b16      	ldr	r3, [pc, #88]	; (8006284 <ulTaskNotifyTake+0x8c>)
 800622a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800622e:	601a      	str	r2, [r3, #0]
 8006230:	f3bf 8f4f 	dsb	sy
 8006234:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006238:	f000 fdd4 	bl	8006de4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800623c:	f000 fd9e 	bl	8006d7c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8006240:	4b0f      	ldr	r3, [pc, #60]	; (8006280 <ulTaskNotifyTake+0x88>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006246:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00c      	beq.n	8006268 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d004      	beq.n	800625e <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8006254:	4b0a      	ldr	r3, [pc, #40]	; (8006280 <ulTaskNotifyTake+0x88>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2200      	movs	r2, #0
 800625a:	655a      	str	r2, [r3, #84]	; 0x54
 800625c:	e004      	b.n	8006268 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800625e:	4b08      	ldr	r3, [pc, #32]	; (8006280 <ulTaskNotifyTake+0x88>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	3a01      	subs	r2, #1
 8006266:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006268:	4b05      	ldr	r3, [pc, #20]	; (8006280 <ulTaskNotifyTake+0x88>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8006272:	f000 fdb7 	bl	8006de4 <vPortExitCritical>

		return ulReturn;
 8006276:	68fb      	ldr	r3, [r7, #12]
	}
 8006278:	4618      	mov	r0, r3
 800627a:	3710      	adds	r7, #16
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	20000f44 	.word	0x20000f44
 8006284:	e000ed04 	.word	0xe000ed04

08006288 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8006288:	b580      	push	{r7, lr}
 800628a:	b08a      	sub	sp, #40	; 0x28
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	603b      	str	r3, [r7, #0]
 8006294:	4613      	mov	r3, r2
 8006296:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8006298:	2301      	movs	r3, #1
 800629a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d10c      	bne.n	80062bc <xTaskGenericNotify+0x34>
	__asm volatile
 80062a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a6:	b672      	cpsid	i
 80062a8:	f383 8811 	msr	BASEPRI, r3
 80062ac:	f3bf 8f6f 	isb	sy
 80062b0:	f3bf 8f4f 	dsb	sy
 80062b4:	b662      	cpsie	i
 80062b6:	61bb      	str	r3, [r7, #24]
}
 80062b8:	bf00      	nop
 80062ba:	e7fe      	b.n	80062ba <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80062c0:	f000 fd5c 	bl	8006d7c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d003      	beq.n	80062d2 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80062ca:	6a3b      	ldr	r3, [r7, #32]
 80062cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80062d2:	6a3b      	ldr	r3, [r7, #32]
 80062d4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80062d8:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	2202      	movs	r2, #2
 80062de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 80062e2:	79fb      	ldrb	r3, [r7, #7]
 80062e4:	2b04      	cmp	r3, #4
 80062e6:	d828      	bhi.n	800633a <xTaskGenericNotify+0xb2>
 80062e8:	a201      	add	r2, pc, #4	; (adr r2, 80062f0 <xTaskGenericNotify+0x68>)
 80062ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ee:	bf00      	nop
 80062f0:	0800635f 	.word	0x0800635f
 80062f4:	08006305 	.word	0x08006305
 80062f8:	08006313 	.word	0x08006313
 80062fc:	0800631f 	.word	0x0800631f
 8006300:	08006327 	.word	0x08006327
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006304:	6a3b      	ldr	r3, [r7, #32]
 8006306:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	431a      	orrs	r2, r3
 800630c:	6a3b      	ldr	r3, [r7, #32]
 800630e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8006310:	e028      	b.n	8006364 <xTaskGenericNotify+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006312:	6a3b      	ldr	r3, [r7, #32]
 8006314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006316:	1c5a      	adds	r2, r3, #1
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800631c:	e022      	b.n	8006364 <xTaskGenericNotify+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800631e:	6a3b      	ldr	r3, [r7, #32]
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8006324:	e01e      	b.n	8006364 <xTaskGenericNotify+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006326:	7ffb      	ldrb	r3, [r7, #31]
 8006328:	2b02      	cmp	r3, #2
 800632a:	d003      	beq.n	8006334 <xTaskGenericNotify+0xac>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800632c:	6a3b      	ldr	r3, [r7, #32]
 800632e:	68ba      	ldr	r2, [r7, #8]
 8006330:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006332:	e017      	b.n	8006364 <xTaskGenericNotify+0xdc>
						xReturn = pdFAIL;
 8006334:	2300      	movs	r3, #0
 8006336:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8006338:	e014      	b.n	8006364 <xTaskGenericNotify+0xdc>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800633a:	6a3b      	ldr	r3, [r7, #32]
 800633c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800633e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006342:	d00e      	beq.n	8006362 <xTaskGenericNotify+0xda>
	__asm volatile
 8006344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006348:	b672      	cpsid	i
 800634a:	f383 8811 	msr	BASEPRI, r3
 800634e:	f3bf 8f6f 	isb	sy
 8006352:	f3bf 8f4f 	dsb	sy
 8006356:	b662      	cpsie	i
 8006358:	617b      	str	r3, [r7, #20]
}
 800635a:	bf00      	nop
 800635c:	e7fe      	b.n	800635c <xTaskGenericNotify+0xd4>
					break;
 800635e:	bf00      	nop
 8006360:	e000      	b.n	8006364 <xTaskGenericNotify+0xdc>

					break;
 8006362:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006364:	7ffb      	ldrb	r3, [r7, #31]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d13c      	bne.n	80063e4 <xTaskGenericNotify+0x15c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	3304      	adds	r3, #4
 800636e:	4618      	mov	r0, r3
 8006370:	f7fe fb40 	bl	80049f4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8006374:	6a3b      	ldr	r3, [r7, #32]
 8006376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006378:	4b1e      	ldr	r3, [pc, #120]	; (80063f4 <xTaskGenericNotify+0x16c>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	429a      	cmp	r2, r3
 800637e:	d903      	bls.n	8006388 <xTaskGenericNotify+0x100>
 8006380:	6a3b      	ldr	r3, [r7, #32]
 8006382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006384:	4a1b      	ldr	r2, [pc, #108]	; (80063f4 <xTaskGenericNotify+0x16c>)
 8006386:	6013      	str	r3, [r2, #0]
 8006388:	6a3b      	ldr	r3, [r7, #32]
 800638a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800638c:	4613      	mov	r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	4413      	add	r3, r2
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	4a18      	ldr	r2, [pc, #96]	; (80063f8 <xTaskGenericNotify+0x170>)
 8006396:	441a      	add	r2, r3
 8006398:	6a3b      	ldr	r3, [r7, #32]
 800639a:	3304      	adds	r3, #4
 800639c:	4619      	mov	r1, r3
 800639e:	4610      	mov	r0, r2
 80063a0:	f7fe facb 	bl	800493a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80063a4:	6a3b      	ldr	r3, [r7, #32]
 80063a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00c      	beq.n	80063c6 <xTaskGenericNotify+0x13e>
	__asm volatile
 80063ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b0:	b672      	cpsid	i
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	b662      	cpsie	i
 80063c0:	613b      	str	r3, [r7, #16]
}
 80063c2:	bf00      	nop
 80063c4:	e7fe      	b.n	80063c4 <xTaskGenericNotify+0x13c>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80063c6:	6a3b      	ldr	r3, [r7, #32]
 80063c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ca:	4b0c      	ldr	r3, [pc, #48]	; (80063fc <xTaskGenericNotify+0x174>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d907      	bls.n	80063e4 <xTaskGenericNotify+0x15c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80063d4:	4b0a      	ldr	r3, [pc, #40]	; (8006400 <xTaskGenericNotify+0x178>)
 80063d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063da:	601a      	str	r2, [r3, #0]
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80063e4:	f000 fcfe 	bl	8006de4 <vPortExitCritical>

		return xReturn;
 80063e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3728      	adds	r7, #40	; 0x28
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	20001420 	.word	0x20001420
 80063f8:	20000f48 	.word	0x20000f48
 80063fc:	20000f44 	.word	0x20000f44
 8006400:	e000ed04 	.word	0xe000ed04

08006404 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800640e:	4b21      	ldr	r3, [pc, #132]	; (8006494 <prvAddCurrentTaskToDelayedList+0x90>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006414:	4b20      	ldr	r3, [pc, #128]	; (8006498 <prvAddCurrentTaskToDelayedList+0x94>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	3304      	adds	r3, #4
 800641a:	4618      	mov	r0, r3
 800641c:	f7fe faea 	bl	80049f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006426:	d10a      	bne.n	800643e <prvAddCurrentTaskToDelayedList+0x3a>
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d007      	beq.n	800643e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800642e:	4b1a      	ldr	r3, [pc, #104]	; (8006498 <prvAddCurrentTaskToDelayedList+0x94>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	3304      	adds	r3, #4
 8006434:	4619      	mov	r1, r3
 8006436:	4819      	ldr	r0, [pc, #100]	; (800649c <prvAddCurrentTaskToDelayedList+0x98>)
 8006438:	f7fe fa7f 	bl	800493a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800643c:	e026      	b.n	800648c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4413      	add	r3, r2
 8006444:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006446:	4b14      	ldr	r3, [pc, #80]	; (8006498 <prvAddCurrentTaskToDelayedList+0x94>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68ba      	ldr	r2, [r7, #8]
 800644c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800644e:	68ba      	ldr	r2, [r7, #8]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	429a      	cmp	r2, r3
 8006454:	d209      	bcs.n	800646a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006456:	4b12      	ldr	r3, [pc, #72]	; (80064a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	4b0f      	ldr	r3, [pc, #60]	; (8006498 <prvAddCurrentTaskToDelayedList+0x94>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	3304      	adds	r3, #4
 8006460:	4619      	mov	r1, r3
 8006462:	4610      	mov	r0, r2
 8006464:	f7fe fa8d 	bl	8004982 <vListInsert>
}
 8006468:	e010      	b.n	800648c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800646a:	4b0e      	ldr	r3, [pc, #56]	; (80064a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	4b0a      	ldr	r3, [pc, #40]	; (8006498 <prvAddCurrentTaskToDelayedList+0x94>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	3304      	adds	r3, #4
 8006474:	4619      	mov	r1, r3
 8006476:	4610      	mov	r0, r2
 8006478:	f7fe fa83 	bl	8004982 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800647c:	4b0a      	ldr	r3, [pc, #40]	; (80064a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68ba      	ldr	r2, [r7, #8]
 8006482:	429a      	cmp	r2, r3
 8006484:	d202      	bcs.n	800648c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006486:	4a08      	ldr	r2, [pc, #32]	; (80064a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	6013      	str	r3, [r2, #0]
}
 800648c:	bf00      	nop
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	2000141c 	.word	0x2000141c
 8006498:	20000f44 	.word	0x20000f44
 800649c:	20001404 	.word	0x20001404
 80064a0:	200013d4 	.word	0x200013d4
 80064a4:	200013d0 	.word	0x200013d0
 80064a8:	20001438 	.word	0x20001438

080064ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b08a      	sub	sp, #40	; 0x28
 80064b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80064b2:	2300      	movs	r3, #0
 80064b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80064b6:	f000 fb15 	bl	8006ae4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80064ba:	4b1d      	ldr	r3, [pc, #116]	; (8006530 <xTimerCreateTimerTask+0x84>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d021      	beq.n	8006506 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80064c2:	2300      	movs	r3, #0
 80064c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80064c6:	2300      	movs	r3, #0
 80064c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80064ca:	1d3a      	adds	r2, r7, #4
 80064cc:	f107 0108 	add.w	r1, r7, #8
 80064d0:	f107 030c 	add.w	r3, r7, #12
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7fe f9e9 	bl	80048ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80064da:	6879      	ldr	r1, [r7, #4]
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	9202      	str	r2, [sp, #8]
 80064e2:	9301      	str	r3, [sp, #4]
 80064e4:	2302      	movs	r3, #2
 80064e6:	9300      	str	r3, [sp, #0]
 80064e8:	2300      	movs	r3, #0
 80064ea:	460a      	mov	r2, r1
 80064ec:	4911      	ldr	r1, [pc, #68]	; (8006534 <xTimerCreateTimerTask+0x88>)
 80064ee:	4812      	ldr	r0, [pc, #72]	; (8006538 <xTimerCreateTimerTask+0x8c>)
 80064f0:	f7fe ffb4 	bl	800545c <xTaskCreateStatic>
 80064f4:	4603      	mov	r3, r0
 80064f6:	4a11      	ldr	r2, [pc, #68]	; (800653c <xTimerCreateTimerTask+0x90>)
 80064f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80064fa:	4b10      	ldr	r3, [pc, #64]	; (800653c <xTimerCreateTimerTask+0x90>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d001      	beq.n	8006506 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006502:	2301      	movs	r3, #1
 8006504:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10c      	bne.n	8006526 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800650c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006510:	b672      	cpsid	i
 8006512:	f383 8811 	msr	BASEPRI, r3
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	b662      	cpsie	i
 8006520:	613b      	str	r3, [r7, #16]
}
 8006522:	bf00      	nop
 8006524:	e7fe      	b.n	8006524 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8006526:	697b      	ldr	r3, [r7, #20]
}
 8006528:	4618      	mov	r0, r3
 800652a:	3718      	adds	r7, #24
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	20001474 	.word	0x20001474
 8006534:	0800744c 	.word	0x0800744c
 8006538:	0800667d 	.word	0x0800667d
 800653c:	20001478 	.word	0x20001478

08006540 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b08a      	sub	sp, #40	; 0x28
 8006544:	af00      	add	r7, sp, #0
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	607a      	str	r2, [r7, #4]
 800654c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800654e:	2300      	movs	r3, #0
 8006550:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d10c      	bne.n	8006572 <xTimerGenericCommand+0x32>
	__asm volatile
 8006558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655c:	b672      	cpsid	i
 800655e:	f383 8811 	msr	BASEPRI, r3
 8006562:	f3bf 8f6f 	isb	sy
 8006566:	f3bf 8f4f 	dsb	sy
 800656a:	b662      	cpsie	i
 800656c:	623b      	str	r3, [r7, #32]
}
 800656e:	bf00      	nop
 8006570:	e7fe      	b.n	8006570 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006572:	4b1a      	ldr	r3, [pc, #104]	; (80065dc <xTimerGenericCommand+0x9c>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d02a      	beq.n	80065d0 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	2b05      	cmp	r3, #5
 800658a:	dc18      	bgt.n	80065be <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800658c:	f7ff fda4 	bl	80060d8 <xTaskGetSchedulerState>
 8006590:	4603      	mov	r3, r0
 8006592:	2b02      	cmp	r3, #2
 8006594:	d109      	bne.n	80065aa <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006596:	4b11      	ldr	r3, [pc, #68]	; (80065dc <xTimerGenericCommand+0x9c>)
 8006598:	6818      	ldr	r0, [r3, #0]
 800659a:	f107 0110 	add.w	r1, r7, #16
 800659e:	2300      	movs	r3, #0
 80065a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065a2:	f7fe fb61 	bl	8004c68 <xQueueGenericSend>
 80065a6:	6278      	str	r0, [r7, #36]	; 0x24
 80065a8:	e012      	b.n	80065d0 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80065aa:	4b0c      	ldr	r3, [pc, #48]	; (80065dc <xTimerGenericCommand+0x9c>)
 80065ac:	6818      	ldr	r0, [r3, #0]
 80065ae:	f107 0110 	add.w	r1, r7, #16
 80065b2:	2300      	movs	r3, #0
 80065b4:	2200      	movs	r2, #0
 80065b6:	f7fe fb57 	bl	8004c68 <xQueueGenericSend>
 80065ba:	6278      	str	r0, [r7, #36]	; 0x24
 80065bc:	e008      	b.n	80065d0 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80065be:	4b07      	ldr	r3, [pc, #28]	; (80065dc <xTimerGenericCommand+0x9c>)
 80065c0:	6818      	ldr	r0, [r3, #0]
 80065c2:	f107 0110 	add.w	r1, r7, #16
 80065c6:	2300      	movs	r3, #0
 80065c8:	683a      	ldr	r2, [r7, #0]
 80065ca:	f7fe fc53 	bl	8004e74 <xQueueGenericSendFromISR>
 80065ce:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80065d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3728      	adds	r7, #40	; 0x28
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	20001474 	.word	0x20001474

080065e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b088      	sub	sp, #32
 80065e4:	af02      	add	r7, sp, #8
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065ea:	4b23      	ldr	r3, [pc, #140]	; (8006678 <prvProcessExpiredTimer+0x98>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	3304      	adds	r3, #4
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7fe f9fb 	bl	80049f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006604:	f003 0304 	and.w	r3, r3, #4
 8006608:	2b00      	cmp	r3, #0
 800660a:	d024      	beq.n	8006656 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	699a      	ldr	r2, [r3, #24]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	18d1      	adds	r1, r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	6978      	ldr	r0, [r7, #20]
 800661a:	f000 f8d3 	bl	80067c4 <prvInsertTimerInActiveList>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d021      	beq.n	8006668 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006624:	2300      	movs	r3, #0
 8006626:	9300      	str	r3, [sp, #0]
 8006628:	2300      	movs	r3, #0
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	2100      	movs	r1, #0
 800662e:	6978      	ldr	r0, [r7, #20]
 8006630:	f7ff ff86 	bl	8006540 <xTimerGenericCommand>
 8006634:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d115      	bne.n	8006668 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800663c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006640:	b672      	cpsid	i
 8006642:	f383 8811 	msr	BASEPRI, r3
 8006646:	f3bf 8f6f 	isb	sy
 800664a:	f3bf 8f4f 	dsb	sy
 800664e:	b662      	cpsie	i
 8006650:	60fb      	str	r3, [r7, #12]
}
 8006652:	bf00      	nop
 8006654:	e7fe      	b.n	8006654 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800665c:	f023 0301 	bic.w	r3, r3, #1
 8006660:	b2da      	uxtb	r2, r3
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	6a1b      	ldr	r3, [r3, #32]
 800666c:	6978      	ldr	r0, [r7, #20]
 800666e:	4798      	blx	r3
}
 8006670:	bf00      	nop
 8006672:	3718      	adds	r7, #24
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	2000146c 	.word	0x2000146c

0800667c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006684:	f107 0308 	add.w	r3, r7, #8
 8006688:	4618      	mov	r0, r3
 800668a:	f000 f857 	bl	800673c <prvGetNextExpireTime>
 800668e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	4619      	mov	r1, r3
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f000 f803 	bl	80066a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800669a:	f000 f8d5 	bl	8006848 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800669e:	e7f1      	b.n	8006684 <prvTimerTask+0x8>

080066a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80066aa:	f7ff f921 	bl	80058f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80066ae:	f107 0308 	add.w	r3, r7, #8
 80066b2:	4618      	mov	r0, r3
 80066b4:	f000 f866 	bl	8006784 <prvSampleTimeNow>
 80066b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d130      	bne.n	8006722 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10a      	bne.n	80066dc <prvProcessTimerOrBlockTask+0x3c>
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d806      	bhi.n	80066dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80066ce:	f7ff f91d 	bl	800590c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80066d2:	68f9      	ldr	r1, [r7, #12]
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f7ff ff83 	bl	80065e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80066da:	e024      	b.n	8006726 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d008      	beq.n	80066f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80066e2:	4b13      	ldr	r3, [pc, #76]	; (8006730 <prvProcessTimerOrBlockTask+0x90>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d101      	bne.n	80066f0 <prvProcessTimerOrBlockTask+0x50>
 80066ec:	2301      	movs	r3, #1
 80066ee:	e000      	b.n	80066f2 <prvProcessTimerOrBlockTask+0x52>
 80066f0:	2300      	movs	r3, #0
 80066f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80066f4:	4b0f      	ldr	r3, [pc, #60]	; (8006734 <prvProcessTimerOrBlockTask+0x94>)
 80066f6:	6818      	ldr	r0, [r3, #0]
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	683a      	ldr	r2, [r7, #0]
 8006700:	4619      	mov	r1, r3
 8006702:	f7fe fe77 	bl	80053f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006706:	f7ff f901 	bl	800590c <xTaskResumeAll>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10a      	bne.n	8006726 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006710:	4b09      	ldr	r3, [pc, #36]	; (8006738 <prvProcessTimerOrBlockTask+0x98>)
 8006712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006716:	601a      	str	r2, [r3, #0]
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	f3bf 8f6f 	isb	sy
}
 8006720:	e001      	b.n	8006726 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006722:	f7ff f8f3 	bl	800590c <xTaskResumeAll>
}
 8006726:	bf00      	nop
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	20001470 	.word	0x20001470
 8006734:	20001474 	.word	0x20001474
 8006738:	e000ed04 	.word	0xe000ed04

0800673c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006744:	4b0e      	ldr	r3, [pc, #56]	; (8006780 <prvGetNextExpireTime+0x44>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d101      	bne.n	8006752 <prvGetNextExpireTime+0x16>
 800674e:	2201      	movs	r2, #1
 8006750:	e000      	b.n	8006754 <prvGetNextExpireTime+0x18>
 8006752:	2200      	movs	r2, #0
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d105      	bne.n	800676c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006760:	4b07      	ldr	r3, [pc, #28]	; (8006780 <prvGetNextExpireTime+0x44>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	60fb      	str	r3, [r7, #12]
 800676a:	e001      	b.n	8006770 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800676c:	2300      	movs	r3, #0
 800676e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006770:	68fb      	ldr	r3, [r7, #12]
}
 8006772:	4618      	mov	r0, r3
 8006774:	3714      	adds	r7, #20
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	2000146c 	.word	0x2000146c

08006784 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800678c:	f7ff f95e 	bl	8005a4c <xTaskGetTickCount>
 8006790:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006792:	4b0b      	ldr	r3, [pc, #44]	; (80067c0 <prvSampleTimeNow+0x3c>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	429a      	cmp	r2, r3
 800679a:	d205      	bcs.n	80067a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800679c:	f000 f93c 	bl	8006a18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	601a      	str	r2, [r3, #0]
 80067a6:	e002      	b.n	80067ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80067ae:	4a04      	ldr	r2, [pc, #16]	; (80067c0 <prvSampleTimeNow+0x3c>)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80067b4:	68fb      	ldr	r3, [r7, #12]
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3710      	adds	r7, #16
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	2000147c 	.word	0x2000147c

080067c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b086      	sub	sp, #24
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	607a      	str	r2, [r7, #4]
 80067d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80067d2:	2300      	movs	r3, #0
 80067d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	68ba      	ldr	r2, [r7, #8]
 80067da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80067e2:	68ba      	ldr	r2, [r7, #8]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d812      	bhi.n	8006810 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	1ad2      	subs	r2, r2, r3
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d302      	bcc.n	80067fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80067f8:	2301      	movs	r3, #1
 80067fa:	617b      	str	r3, [r7, #20]
 80067fc:	e01b      	b.n	8006836 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80067fe:	4b10      	ldr	r3, [pc, #64]	; (8006840 <prvInsertTimerInActiveList+0x7c>)
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	3304      	adds	r3, #4
 8006806:	4619      	mov	r1, r3
 8006808:	4610      	mov	r0, r2
 800680a:	f7fe f8ba 	bl	8004982 <vListInsert>
 800680e:	e012      	b.n	8006836 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	429a      	cmp	r2, r3
 8006816:	d206      	bcs.n	8006826 <prvInsertTimerInActiveList+0x62>
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	429a      	cmp	r2, r3
 800681e:	d302      	bcc.n	8006826 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006820:	2301      	movs	r3, #1
 8006822:	617b      	str	r3, [r7, #20]
 8006824:	e007      	b.n	8006836 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006826:	4b07      	ldr	r3, [pc, #28]	; (8006844 <prvInsertTimerInActiveList+0x80>)
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	3304      	adds	r3, #4
 800682e:	4619      	mov	r1, r3
 8006830:	4610      	mov	r0, r2
 8006832:	f7fe f8a6 	bl	8004982 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006836:	697b      	ldr	r3, [r7, #20]
}
 8006838:	4618      	mov	r0, r3
 800683a:	3718      	adds	r7, #24
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	20001470 	.word	0x20001470
 8006844:	2000146c 	.word	0x2000146c

08006848 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b08e      	sub	sp, #56	; 0x38
 800684c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800684e:	e0d0      	b.n	80069f2 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	da1a      	bge.n	800688c <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006856:	1d3b      	adds	r3, r7, #4
 8006858:	3304      	adds	r3, #4
 800685a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800685c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685e:	2b00      	cmp	r3, #0
 8006860:	d10c      	bne.n	800687c <prvProcessReceivedCommands+0x34>
	__asm volatile
 8006862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006866:	b672      	cpsid	i
 8006868:	f383 8811 	msr	BASEPRI, r3
 800686c:	f3bf 8f6f 	isb	sy
 8006870:	f3bf 8f4f 	dsb	sy
 8006874:	b662      	cpsie	i
 8006876:	61fb      	str	r3, [r7, #28]
}
 8006878:	bf00      	nop
 800687a:	e7fe      	b.n	800687a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800687c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006882:	6850      	ldr	r0, [r2, #4]
 8006884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006886:	6892      	ldr	r2, [r2, #8]
 8006888:	4611      	mov	r1, r2
 800688a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	f2c0 80af 	blt.w	80069f2 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689a:	695b      	ldr	r3, [r3, #20]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d004      	beq.n	80068aa <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a2:	3304      	adds	r3, #4
 80068a4:	4618      	mov	r0, r3
 80068a6:	f7fe f8a5 	bl	80049f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80068aa:	463b      	mov	r3, r7
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7ff ff69 	bl	8006784 <prvSampleTimeNow>
 80068b2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2b09      	cmp	r3, #9
 80068b8:	f200 809a 	bhi.w	80069f0 <prvProcessReceivedCommands+0x1a8>
 80068bc:	a201      	add	r2, pc, #4	; (adr r2, 80068c4 <prvProcessReceivedCommands+0x7c>)
 80068be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c2:	bf00      	nop
 80068c4:	080068ed 	.word	0x080068ed
 80068c8:	080068ed 	.word	0x080068ed
 80068cc:	080068ed 	.word	0x080068ed
 80068d0:	08006965 	.word	0x08006965
 80068d4:	08006979 	.word	0x08006979
 80068d8:	080069c7 	.word	0x080069c7
 80068dc:	080068ed 	.word	0x080068ed
 80068e0:	080068ed 	.word	0x080068ed
 80068e4:	08006965 	.word	0x08006965
 80068e8:	08006979 	.word	0x08006979
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80068ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068f2:	f043 0301 	orr.w	r3, r3, #1
 80068f6:	b2da      	uxtb	r2, r3
 80068f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80068fe:	68ba      	ldr	r2, [r7, #8]
 8006900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006902:	699b      	ldr	r3, [r3, #24]
 8006904:	18d1      	adds	r1, r2, r3
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800690a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800690c:	f7ff ff5a 	bl	80067c4 <prvInsertTimerInActiveList>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d06d      	beq.n	80069f2 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800691c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800691e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006920:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006924:	f003 0304 	and.w	r3, r3, #4
 8006928:	2b00      	cmp	r3, #0
 800692a:	d062      	beq.n	80069f2 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800692c:	68ba      	ldr	r2, [r7, #8]
 800692e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	441a      	add	r2, r3
 8006934:	2300      	movs	r3, #0
 8006936:	9300      	str	r3, [sp, #0]
 8006938:	2300      	movs	r3, #0
 800693a:	2100      	movs	r1, #0
 800693c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800693e:	f7ff fdff 	bl	8006540 <xTimerGenericCommand>
 8006942:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006944:	6a3b      	ldr	r3, [r7, #32]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d153      	bne.n	80069f2 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800694a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694e:	b672      	cpsid	i
 8006950:	f383 8811 	msr	BASEPRI, r3
 8006954:	f3bf 8f6f 	isb	sy
 8006958:	f3bf 8f4f 	dsb	sy
 800695c:	b662      	cpsie	i
 800695e:	61bb      	str	r3, [r7, #24]
}
 8006960:	bf00      	nop
 8006962:	e7fe      	b.n	8006962 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006966:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800696a:	f023 0301 	bic.w	r3, r3, #1
 800696e:	b2da      	uxtb	r2, r3
 8006970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006972:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006976:	e03c      	b.n	80069f2 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800697e:	f043 0301 	orr.w	r3, r3, #1
 8006982:	b2da      	uxtb	r2, r3
 8006984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006986:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d10c      	bne.n	80069b2 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8006998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699c:	b672      	cpsid	i
 800699e:	f383 8811 	msr	BASEPRI, r3
 80069a2:	f3bf 8f6f 	isb	sy
 80069a6:	f3bf 8f4f 	dsb	sy
 80069aa:	b662      	cpsie	i
 80069ac:	617b      	str	r3, [r7, #20]
}
 80069ae:	bf00      	nop
 80069b0:	e7fe      	b.n	80069b0 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80069b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b4:	699a      	ldr	r2, [r3, #24]
 80069b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b8:	18d1      	adds	r1, r2, r3
 80069ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069c0:	f7ff ff00 	bl	80067c4 <prvInsertTimerInActiveList>
					break;
 80069c4:	e015      	b.n	80069f2 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80069c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069cc:	f003 0302 	and.w	r3, r3, #2
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d103      	bne.n	80069dc <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80069d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069d6:	f000 fbc7 	bl	8007168 <vPortFree>
 80069da:	e00a      	b.n	80069f2 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069e2:	f023 0301 	bic.w	r3, r3, #1
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80069ee:	e000      	b.n	80069f2 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 80069f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80069f2:	4b08      	ldr	r3, [pc, #32]	; (8006a14 <prvProcessReceivedCommands+0x1cc>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	1d39      	adds	r1, r7, #4
 80069f8:	2200      	movs	r2, #0
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7fe fada 	bl	8004fb4 <xQueueReceive>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f47f af24 	bne.w	8006850 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006a08:	bf00      	nop
 8006a0a:	bf00      	nop
 8006a0c:	3730      	adds	r7, #48	; 0x30
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	20001474 	.word	0x20001474

08006a18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b088      	sub	sp, #32
 8006a1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a1e:	e04a      	b.n	8006ab6 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a20:	4b2e      	ldr	r3, [pc, #184]	; (8006adc <prvSwitchTimerLists+0xc4>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a2a:	4b2c      	ldr	r3, [pc, #176]	; (8006adc <prvSwitchTimerLists+0xc4>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	3304      	adds	r3, #4
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7fd ffdb 	bl	80049f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a4c:	f003 0304 	and.w	r3, r3, #4
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d030      	beq.n	8006ab6 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	693a      	ldr	r2, [r7, #16]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006a5e:	68ba      	ldr	r2, [r7, #8]
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d90e      	bls.n	8006a84 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a72:	4b1a      	ldr	r3, [pc, #104]	; (8006adc <prvSwitchTimerLists+0xc4>)
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	3304      	adds	r3, #4
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	4610      	mov	r0, r2
 8006a7e:	f7fd ff80 	bl	8004982 <vListInsert>
 8006a82:	e018      	b.n	8006ab6 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a84:	2300      	movs	r3, #0
 8006a86:	9300      	str	r3, [sp, #0]
 8006a88:	2300      	movs	r3, #0
 8006a8a:	693a      	ldr	r2, [r7, #16]
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	f7ff fd56 	bl	8006540 <xTimerGenericCommand>
 8006a94:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10c      	bne.n	8006ab6 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8006a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa0:	b672      	cpsid	i
 8006aa2:	f383 8811 	msr	BASEPRI, r3
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	b662      	cpsie	i
 8006ab0:	603b      	str	r3, [r7, #0]
}
 8006ab2:	bf00      	nop
 8006ab4:	e7fe      	b.n	8006ab4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006ab6:	4b09      	ldr	r3, [pc, #36]	; (8006adc <prvSwitchTimerLists+0xc4>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1af      	bne.n	8006a20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006ac0:	4b06      	ldr	r3, [pc, #24]	; (8006adc <prvSwitchTimerLists+0xc4>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006ac6:	4b06      	ldr	r3, [pc, #24]	; (8006ae0 <prvSwitchTimerLists+0xc8>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a04      	ldr	r2, [pc, #16]	; (8006adc <prvSwitchTimerLists+0xc4>)
 8006acc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006ace:	4a04      	ldr	r2, [pc, #16]	; (8006ae0 <prvSwitchTimerLists+0xc8>)
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	6013      	str	r3, [r2, #0]
}
 8006ad4:	bf00      	nop
 8006ad6:	3718      	adds	r7, #24
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	2000146c 	.word	0x2000146c
 8006ae0:	20001470 	.word	0x20001470

08006ae4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006aea:	f000 f947 	bl	8006d7c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006aee:	4b15      	ldr	r3, [pc, #84]	; (8006b44 <prvCheckForValidListAndQueue+0x60>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d120      	bne.n	8006b38 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006af6:	4814      	ldr	r0, [pc, #80]	; (8006b48 <prvCheckForValidListAndQueue+0x64>)
 8006af8:	f7fd fef2 	bl	80048e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006afc:	4813      	ldr	r0, [pc, #76]	; (8006b4c <prvCheckForValidListAndQueue+0x68>)
 8006afe:	f7fd feef 	bl	80048e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006b02:	4b13      	ldr	r3, [pc, #76]	; (8006b50 <prvCheckForValidListAndQueue+0x6c>)
 8006b04:	4a10      	ldr	r2, [pc, #64]	; (8006b48 <prvCheckForValidListAndQueue+0x64>)
 8006b06:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006b08:	4b12      	ldr	r3, [pc, #72]	; (8006b54 <prvCheckForValidListAndQueue+0x70>)
 8006b0a:	4a10      	ldr	r2, [pc, #64]	; (8006b4c <prvCheckForValidListAndQueue+0x68>)
 8006b0c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006b0e:	2300      	movs	r3, #0
 8006b10:	9300      	str	r3, [sp, #0]
 8006b12:	4b11      	ldr	r3, [pc, #68]	; (8006b58 <prvCheckForValidListAndQueue+0x74>)
 8006b14:	4a11      	ldr	r2, [pc, #68]	; (8006b5c <prvCheckForValidListAndQueue+0x78>)
 8006b16:	2110      	movs	r1, #16
 8006b18:	200a      	movs	r0, #10
 8006b1a:	f7fd ffff 	bl	8004b1c <xQueueGenericCreateStatic>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	4a08      	ldr	r2, [pc, #32]	; (8006b44 <prvCheckForValidListAndQueue+0x60>)
 8006b22:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006b24:	4b07      	ldr	r3, [pc, #28]	; (8006b44 <prvCheckForValidListAndQueue+0x60>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d005      	beq.n	8006b38 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006b2c:	4b05      	ldr	r3, [pc, #20]	; (8006b44 <prvCheckForValidListAndQueue+0x60>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	490b      	ldr	r1, [pc, #44]	; (8006b60 <prvCheckForValidListAndQueue+0x7c>)
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7fe fc34 	bl	80053a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b38:	f000 f954 	bl	8006de4 <vPortExitCritical>
}
 8006b3c:	bf00      	nop
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	20001474 	.word	0x20001474
 8006b48:	20001444 	.word	0x20001444
 8006b4c:	20001458 	.word	0x20001458
 8006b50:	2000146c 	.word	0x2000146c
 8006b54:	20001470 	.word	0x20001470
 8006b58:	20001520 	.word	0x20001520
 8006b5c:	20001480 	.word	0x20001480
 8006b60:	08007454 	.word	0x08007454

08006b64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	3b04      	subs	r3, #4
 8006b74:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006b7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	3b04      	subs	r3, #4
 8006b82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	f023 0201 	bic.w	r2, r3, #1
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	3b04      	subs	r3, #4
 8006b92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006b94:	4a0c      	ldr	r2, [pc, #48]	; (8006bc8 <pxPortInitialiseStack+0x64>)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	3b14      	subs	r3, #20
 8006b9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	3b04      	subs	r3, #4
 8006baa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f06f 0202 	mvn.w	r2, #2
 8006bb2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	3b20      	subs	r3, #32
 8006bb8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006bba:	68fb      	ldr	r3, [r7, #12]
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3714      	adds	r7, #20
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr
 8006bc8:	08006bcd 	.word	0x08006bcd

08006bcc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006bd6:	4b14      	ldr	r3, [pc, #80]	; (8006c28 <prvTaskExitError+0x5c>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bde:	d00c      	beq.n	8006bfa <prvTaskExitError+0x2e>
	__asm volatile
 8006be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be4:	b672      	cpsid	i
 8006be6:	f383 8811 	msr	BASEPRI, r3
 8006bea:	f3bf 8f6f 	isb	sy
 8006bee:	f3bf 8f4f 	dsb	sy
 8006bf2:	b662      	cpsie	i
 8006bf4:	60fb      	str	r3, [r7, #12]
}
 8006bf6:	bf00      	nop
 8006bf8:	e7fe      	b.n	8006bf8 <prvTaskExitError+0x2c>
	__asm volatile
 8006bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfe:	b672      	cpsid	i
 8006c00:	f383 8811 	msr	BASEPRI, r3
 8006c04:	f3bf 8f6f 	isb	sy
 8006c08:	f3bf 8f4f 	dsb	sy
 8006c0c:	b662      	cpsie	i
 8006c0e:	60bb      	str	r3, [r7, #8]
}
 8006c10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006c12:	bf00      	nop
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d0fc      	beq.n	8006c14 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c1a:	bf00      	nop
 8006c1c:	bf00      	nop
 8006c1e:	3714      	adds	r7, #20
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr
 8006c28:	2000000c 	.word	0x2000000c
 8006c2c:	00000000 	.word	0x00000000

08006c30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006c30:	4b07      	ldr	r3, [pc, #28]	; (8006c50 <pxCurrentTCBConst2>)
 8006c32:	6819      	ldr	r1, [r3, #0]
 8006c34:	6808      	ldr	r0, [r1, #0]
 8006c36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c3a:	f380 8809 	msr	PSP, r0
 8006c3e:	f3bf 8f6f 	isb	sy
 8006c42:	f04f 0000 	mov.w	r0, #0
 8006c46:	f380 8811 	msr	BASEPRI, r0
 8006c4a:	4770      	bx	lr
 8006c4c:	f3af 8000 	nop.w

08006c50 <pxCurrentTCBConst2>:
 8006c50:	20000f44 	.word	0x20000f44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006c54:	bf00      	nop
 8006c56:	bf00      	nop

08006c58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006c58:	4808      	ldr	r0, [pc, #32]	; (8006c7c <prvPortStartFirstTask+0x24>)
 8006c5a:	6800      	ldr	r0, [r0, #0]
 8006c5c:	6800      	ldr	r0, [r0, #0]
 8006c5e:	f380 8808 	msr	MSP, r0
 8006c62:	f04f 0000 	mov.w	r0, #0
 8006c66:	f380 8814 	msr	CONTROL, r0
 8006c6a:	b662      	cpsie	i
 8006c6c:	b661      	cpsie	f
 8006c6e:	f3bf 8f4f 	dsb	sy
 8006c72:	f3bf 8f6f 	isb	sy
 8006c76:	df00      	svc	0
 8006c78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006c7a:	bf00      	nop
 8006c7c:	e000ed08 	.word	0xe000ed08

08006c80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006c86:	4b37      	ldr	r3, [pc, #220]	; (8006d64 <xPortStartScheduler+0xe4>)
 8006c88:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	22ff      	movs	r2, #255	; 0xff
 8006c96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ca0:	78fb      	ldrb	r3, [r7, #3]
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ca8:	b2da      	uxtb	r2, r3
 8006caa:	4b2f      	ldr	r3, [pc, #188]	; (8006d68 <xPortStartScheduler+0xe8>)
 8006cac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006cae:	4b2f      	ldr	r3, [pc, #188]	; (8006d6c <xPortStartScheduler+0xec>)
 8006cb0:	2207      	movs	r2, #7
 8006cb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006cb4:	e009      	b.n	8006cca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006cb6:	4b2d      	ldr	r3, [pc, #180]	; (8006d6c <xPortStartScheduler+0xec>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	4a2b      	ldr	r2, [pc, #172]	; (8006d6c <xPortStartScheduler+0xec>)
 8006cbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006cc0:	78fb      	ldrb	r3, [r7, #3]
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	005b      	lsls	r3, r3, #1
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006cca:	78fb      	ldrb	r3, [r7, #3]
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cd2:	2b80      	cmp	r3, #128	; 0x80
 8006cd4:	d0ef      	beq.n	8006cb6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006cd6:	4b25      	ldr	r3, [pc, #148]	; (8006d6c <xPortStartScheduler+0xec>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f1c3 0307 	rsb	r3, r3, #7
 8006cde:	2b04      	cmp	r3, #4
 8006ce0:	d00c      	beq.n	8006cfc <xPortStartScheduler+0x7c>
	__asm volatile
 8006ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce6:	b672      	cpsid	i
 8006ce8:	f383 8811 	msr	BASEPRI, r3
 8006cec:	f3bf 8f6f 	isb	sy
 8006cf0:	f3bf 8f4f 	dsb	sy
 8006cf4:	b662      	cpsie	i
 8006cf6:	60bb      	str	r3, [r7, #8]
}
 8006cf8:	bf00      	nop
 8006cfa:	e7fe      	b.n	8006cfa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006cfc:	4b1b      	ldr	r3, [pc, #108]	; (8006d6c <xPortStartScheduler+0xec>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	021b      	lsls	r3, r3, #8
 8006d02:	4a1a      	ldr	r2, [pc, #104]	; (8006d6c <xPortStartScheduler+0xec>)
 8006d04:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d06:	4b19      	ldr	r3, [pc, #100]	; (8006d6c <xPortStartScheduler+0xec>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d0e:	4a17      	ldr	r2, [pc, #92]	; (8006d6c <xPortStartScheduler+0xec>)
 8006d10:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	b2da      	uxtb	r2, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d1a:	4b15      	ldr	r3, [pc, #84]	; (8006d70 <xPortStartScheduler+0xf0>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a14      	ldr	r2, [pc, #80]	; (8006d70 <xPortStartScheduler+0xf0>)
 8006d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d24:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d26:	4b12      	ldr	r3, [pc, #72]	; (8006d70 <xPortStartScheduler+0xf0>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a11      	ldr	r2, [pc, #68]	; (8006d70 <xPortStartScheduler+0xf0>)
 8006d2c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006d30:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d32:	f000 f8dd 	bl	8006ef0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d36:	4b0f      	ldr	r3, [pc, #60]	; (8006d74 <xPortStartScheduler+0xf4>)
 8006d38:	2200      	movs	r2, #0
 8006d3a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006d3c:	f000 f8fc 	bl	8006f38 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006d40:	4b0d      	ldr	r3, [pc, #52]	; (8006d78 <xPortStartScheduler+0xf8>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a0c      	ldr	r2, [pc, #48]	; (8006d78 <xPortStartScheduler+0xf8>)
 8006d46:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006d4a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006d4c:	f7ff ff84 	bl	8006c58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d50:	f7fe ff48 	bl	8005be4 <vTaskSwitchContext>
	prvTaskExitError();
 8006d54:	f7ff ff3a 	bl	8006bcc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	e000e400 	.word	0xe000e400
 8006d68:	20001570 	.word	0x20001570
 8006d6c:	20001574 	.word	0x20001574
 8006d70:	e000ed20 	.word	0xe000ed20
 8006d74:	2000000c 	.word	0x2000000c
 8006d78:	e000ef34 	.word	0xe000ef34

08006d7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
	__asm volatile
 8006d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d86:	b672      	cpsid	i
 8006d88:	f383 8811 	msr	BASEPRI, r3
 8006d8c:	f3bf 8f6f 	isb	sy
 8006d90:	f3bf 8f4f 	dsb	sy
 8006d94:	b662      	cpsie	i
 8006d96:	607b      	str	r3, [r7, #4]
}
 8006d98:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006d9a:	4b10      	ldr	r3, [pc, #64]	; (8006ddc <vPortEnterCritical+0x60>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	4a0e      	ldr	r2, [pc, #56]	; (8006ddc <vPortEnterCritical+0x60>)
 8006da2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006da4:	4b0d      	ldr	r3, [pc, #52]	; (8006ddc <vPortEnterCritical+0x60>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d111      	bne.n	8006dd0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006dac:	4b0c      	ldr	r3, [pc, #48]	; (8006de0 <vPortEnterCritical+0x64>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00c      	beq.n	8006dd0 <vPortEnterCritical+0x54>
	__asm volatile
 8006db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dba:	b672      	cpsid	i
 8006dbc:	f383 8811 	msr	BASEPRI, r3
 8006dc0:	f3bf 8f6f 	isb	sy
 8006dc4:	f3bf 8f4f 	dsb	sy
 8006dc8:	b662      	cpsie	i
 8006dca:	603b      	str	r3, [r7, #0]
}
 8006dcc:	bf00      	nop
 8006dce:	e7fe      	b.n	8006dce <vPortEnterCritical+0x52>
	}
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr
 8006ddc:	2000000c 	.word	0x2000000c
 8006de0:	e000ed04 	.word	0xe000ed04

08006de4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006dea:	4b13      	ldr	r3, [pc, #76]	; (8006e38 <vPortExitCritical+0x54>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d10c      	bne.n	8006e0c <vPortExitCritical+0x28>
	__asm volatile
 8006df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df6:	b672      	cpsid	i
 8006df8:	f383 8811 	msr	BASEPRI, r3
 8006dfc:	f3bf 8f6f 	isb	sy
 8006e00:	f3bf 8f4f 	dsb	sy
 8006e04:	b662      	cpsie	i
 8006e06:	607b      	str	r3, [r7, #4]
}
 8006e08:	bf00      	nop
 8006e0a:	e7fe      	b.n	8006e0a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006e0c:	4b0a      	ldr	r3, [pc, #40]	; (8006e38 <vPortExitCritical+0x54>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	3b01      	subs	r3, #1
 8006e12:	4a09      	ldr	r2, [pc, #36]	; (8006e38 <vPortExitCritical+0x54>)
 8006e14:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e16:	4b08      	ldr	r3, [pc, #32]	; (8006e38 <vPortExitCritical+0x54>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d105      	bne.n	8006e2a <vPortExitCritical+0x46>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	f383 8811 	msr	BASEPRI, r3
}
 8006e28:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e2a:	bf00      	nop
 8006e2c:	370c      	adds	r7, #12
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	2000000c 	.word	0x2000000c
 8006e3c:	00000000 	.word	0x00000000

08006e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e40:	f3ef 8009 	mrs	r0, PSP
 8006e44:	f3bf 8f6f 	isb	sy
 8006e48:	4b15      	ldr	r3, [pc, #84]	; (8006ea0 <pxCurrentTCBConst>)
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	f01e 0f10 	tst.w	lr, #16
 8006e50:	bf08      	it	eq
 8006e52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006e56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e5a:	6010      	str	r0, [r2, #0]
 8006e5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006e60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006e64:	b672      	cpsid	i
 8006e66:	f380 8811 	msr	BASEPRI, r0
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	b662      	cpsie	i
 8006e74:	f7fe feb6 	bl	8005be4 <vTaskSwitchContext>
 8006e78:	f04f 0000 	mov.w	r0, #0
 8006e7c:	f380 8811 	msr	BASEPRI, r0
 8006e80:	bc09      	pop	{r0, r3}
 8006e82:	6819      	ldr	r1, [r3, #0]
 8006e84:	6808      	ldr	r0, [r1, #0]
 8006e86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e8a:	f01e 0f10 	tst.w	lr, #16
 8006e8e:	bf08      	it	eq
 8006e90:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006e94:	f380 8809 	msr	PSP, r0
 8006e98:	f3bf 8f6f 	isb	sy
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop

08006ea0 <pxCurrentTCBConst>:
 8006ea0:	20000f44 	.word	0x20000f44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ea4:	bf00      	nop
 8006ea6:	bf00      	nop

08006ea8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
	__asm volatile
 8006eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb2:	b672      	cpsid	i
 8006eb4:	f383 8811 	msr	BASEPRI, r3
 8006eb8:	f3bf 8f6f 	isb	sy
 8006ebc:	f3bf 8f4f 	dsb	sy
 8006ec0:	b662      	cpsie	i
 8006ec2:	607b      	str	r3, [r7, #4]
}
 8006ec4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ec6:	f7fe fdd1 	bl	8005a6c <xTaskIncrementTick>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d003      	beq.n	8006ed8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006ed0:	4b06      	ldr	r3, [pc, #24]	; (8006eec <SysTick_Handler+0x44>)
 8006ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ed6:	601a      	str	r2, [r3, #0]
 8006ed8:	2300      	movs	r3, #0
 8006eda:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	f383 8811 	msr	BASEPRI, r3
}
 8006ee2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ee4:	bf00      	nop
 8006ee6:	3708      	adds	r7, #8
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	e000ed04 	.word	0xe000ed04

08006ef0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ef4:	4b0b      	ldr	r3, [pc, #44]	; (8006f24 <vPortSetupTimerInterrupt+0x34>)
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006efa:	4b0b      	ldr	r3, [pc, #44]	; (8006f28 <vPortSetupTimerInterrupt+0x38>)
 8006efc:	2200      	movs	r2, #0
 8006efe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f00:	4b0a      	ldr	r3, [pc, #40]	; (8006f2c <vPortSetupTimerInterrupt+0x3c>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a0a      	ldr	r2, [pc, #40]	; (8006f30 <vPortSetupTimerInterrupt+0x40>)
 8006f06:	fba2 2303 	umull	r2, r3, r2, r3
 8006f0a:	099b      	lsrs	r3, r3, #6
 8006f0c:	4a09      	ldr	r2, [pc, #36]	; (8006f34 <vPortSetupTimerInterrupt+0x44>)
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f12:	4b04      	ldr	r3, [pc, #16]	; (8006f24 <vPortSetupTimerInterrupt+0x34>)
 8006f14:	2207      	movs	r2, #7
 8006f16:	601a      	str	r2, [r3, #0]
}
 8006f18:	bf00      	nop
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	e000e010 	.word	0xe000e010
 8006f28:	e000e018 	.word	0xe000e018
 8006f2c:	20000000 	.word	0x20000000
 8006f30:	10624dd3 	.word	0x10624dd3
 8006f34:	e000e014 	.word	0xe000e014

08006f38 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006f38:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006f48 <vPortEnableVFP+0x10>
 8006f3c:	6801      	ldr	r1, [r0, #0]
 8006f3e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006f42:	6001      	str	r1, [r0, #0]
 8006f44:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006f46:	bf00      	nop
 8006f48:	e000ed88 	.word	0xe000ed88

08006f4c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006f52:	f3ef 8305 	mrs	r3, IPSR
 8006f56:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2b0f      	cmp	r3, #15
 8006f5c:	d916      	bls.n	8006f8c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006f5e:	4a19      	ldr	r2, [pc, #100]	; (8006fc4 <vPortValidateInterruptPriority+0x78>)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	4413      	add	r3, r2
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006f68:	4b17      	ldr	r3, [pc, #92]	; (8006fc8 <vPortValidateInterruptPriority+0x7c>)
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	7afa      	ldrb	r2, [r7, #11]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d20c      	bcs.n	8006f8c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8006f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f76:	b672      	cpsid	i
 8006f78:	f383 8811 	msr	BASEPRI, r3
 8006f7c:	f3bf 8f6f 	isb	sy
 8006f80:	f3bf 8f4f 	dsb	sy
 8006f84:	b662      	cpsie	i
 8006f86:	607b      	str	r3, [r7, #4]
}
 8006f88:	bf00      	nop
 8006f8a:	e7fe      	b.n	8006f8a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006f8c:	4b0f      	ldr	r3, [pc, #60]	; (8006fcc <vPortValidateInterruptPriority+0x80>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006f94:	4b0e      	ldr	r3, [pc, #56]	; (8006fd0 <vPortValidateInterruptPriority+0x84>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d90c      	bls.n	8006fb6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8006f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa0:	b672      	cpsid	i
 8006fa2:	f383 8811 	msr	BASEPRI, r3
 8006fa6:	f3bf 8f6f 	isb	sy
 8006faa:	f3bf 8f4f 	dsb	sy
 8006fae:	b662      	cpsie	i
 8006fb0:	603b      	str	r3, [r7, #0]
}
 8006fb2:	bf00      	nop
 8006fb4:	e7fe      	b.n	8006fb4 <vPortValidateInterruptPriority+0x68>
	}
 8006fb6:	bf00      	nop
 8006fb8:	3714      	adds	r7, #20
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	e000e3f0 	.word	0xe000e3f0
 8006fc8:	20001570 	.word	0x20001570
 8006fcc:	e000ed0c 	.word	0xe000ed0c
 8006fd0:	20001574 	.word	0x20001574

08006fd4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b08a      	sub	sp, #40	; 0x28
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006fe0:	f7fe fc86 	bl	80058f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006fe4:	4b5b      	ldr	r3, [pc, #364]	; (8007154 <pvPortMalloc+0x180>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d101      	bne.n	8006ff0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006fec:	f000 f91a 	bl	8007224 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ff0:	4b59      	ldr	r3, [pc, #356]	; (8007158 <pvPortMalloc+0x184>)
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f040 8092 	bne.w	8007122 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d01f      	beq.n	8007044 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8007004:	2208      	movs	r2, #8
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4413      	add	r3, r2
 800700a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f003 0307 	and.w	r3, r3, #7
 8007012:	2b00      	cmp	r3, #0
 8007014:	d016      	beq.n	8007044 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f023 0307 	bic.w	r3, r3, #7
 800701c:	3308      	adds	r3, #8
 800701e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f003 0307 	and.w	r3, r3, #7
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00c      	beq.n	8007044 <pvPortMalloc+0x70>
	__asm volatile
 800702a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702e:	b672      	cpsid	i
 8007030:	f383 8811 	msr	BASEPRI, r3
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	b662      	cpsie	i
 800703e:	617b      	str	r3, [r7, #20]
}
 8007040:	bf00      	nop
 8007042:	e7fe      	b.n	8007042 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d06b      	beq.n	8007122 <pvPortMalloc+0x14e>
 800704a:	4b44      	ldr	r3, [pc, #272]	; (800715c <pvPortMalloc+0x188>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	429a      	cmp	r2, r3
 8007052:	d866      	bhi.n	8007122 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007054:	4b42      	ldr	r3, [pc, #264]	; (8007160 <pvPortMalloc+0x18c>)
 8007056:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007058:	4b41      	ldr	r3, [pc, #260]	; (8007160 <pvPortMalloc+0x18c>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800705e:	e004      	b.n	800706a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8007060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007062:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800706a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	429a      	cmp	r2, r3
 8007072:	d903      	bls.n	800707c <pvPortMalloc+0xa8>
 8007074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d1f1      	bne.n	8007060 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800707c:	4b35      	ldr	r3, [pc, #212]	; (8007154 <pvPortMalloc+0x180>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007082:	429a      	cmp	r2, r3
 8007084:	d04d      	beq.n	8007122 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007086:	6a3b      	ldr	r3, [r7, #32]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2208      	movs	r2, #8
 800708c:	4413      	add	r3, r2
 800708e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	6a3b      	ldr	r3, [r7, #32]
 8007096:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709a:	685a      	ldr	r2, [r3, #4]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	1ad2      	subs	r2, r2, r3
 80070a0:	2308      	movs	r3, #8
 80070a2:	005b      	lsls	r3, r3, #1
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d921      	bls.n	80070ec <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80070a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4413      	add	r3, r2
 80070ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	f003 0307 	and.w	r3, r3, #7
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d00c      	beq.n	80070d4 <pvPortMalloc+0x100>
	__asm volatile
 80070ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070be:	b672      	cpsid	i
 80070c0:	f383 8811 	msr	BASEPRI, r3
 80070c4:	f3bf 8f6f 	isb	sy
 80070c8:	f3bf 8f4f 	dsb	sy
 80070cc:	b662      	cpsie	i
 80070ce:	613b      	str	r3, [r7, #16]
}
 80070d0:	bf00      	nop
 80070d2:	e7fe      	b.n	80070d2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80070d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d6:	685a      	ldr	r2, [r3, #4]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	1ad2      	subs	r2, r2, r3
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80070e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80070e6:	69b8      	ldr	r0, [r7, #24]
 80070e8:	f000 f8fe 	bl	80072e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80070ec:	4b1b      	ldr	r3, [pc, #108]	; (800715c <pvPortMalloc+0x188>)
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	4a19      	ldr	r2, [pc, #100]	; (800715c <pvPortMalloc+0x188>)
 80070f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80070fa:	4b18      	ldr	r3, [pc, #96]	; (800715c <pvPortMalloc+0x188>)
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	4b19      	ldr	r3, [pc, #100]	; (8007164 <pvPortMalloc+0x190>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	429a      	cmp	r2, r3
 8007104:	d203      	bcs.n	800710e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007106:	4b15      	ldr	r3, [pc, #84]	; (800715c <pvPortMalloc+0x188>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a16      	ldr	r2, [pc, #88]	; (8007164 <pvPortMalloc+0x190>)
 800710c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800710e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007110:	685a      	ldr	r2, [r3, #4]
 8007112:	4b11      	ldr	r3, [pc, #68]	; (8007158 <pvPortMalloc+0x184>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	431a      	orrs	r2, r3
 8007118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800711c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711e:	2200      	movs	r2, #0
 8007120:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007122:	f7fe fbf3 	bl	800590c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	f003 0307 	and.w	r3, r3, #7
 800712c:	2b00      	cmp	r3, #0
 800712e:	d00c      	beq.n	800714a <pvPortMalloc+0x176>
	__asm volatile
 8007130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007134:	b672      	cpsid	i
 8007136:	f383 8811 	msr	BASEPRI, r3
 800713a:	f3bf 8f6f 	isb	sy
 800713e:	f3bf 8f4f 	dsb	sy
 8007142:	b662      	cpsie	i
 8007144:	60fb      	str	r3, [r7, #12]
}
 8007146:	bf00      	nop
 8007148:	e7fe      	b.n	8007148 <pvPortMalloc+0x174>
	return pvReturn;
 800714a:	69fb      	ldr	r3, [r7, #28]
}
 800714c:	4618      	mov	r0, r3
 800714e:	3728      	adds	r7, #40	; 0x28
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}
 8007154:	20005180 	.word	0x20005180
 8007158:	2000518c 	.word	0x2000518c
 800715c:	20005184 	.word	0x20005184
 8007160:	20005178 	.word	0x20005178
 8007164:	20005188 	.word	0x20005188

08007168 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d04c      	beq.n	8007214 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800717a:	2308      	movs	r3, #8
 800717c:	425b      	negs	r3, r3
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	4413      	add	r3, r2
 8007182:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	4b23      	ldr	r3, [pc, #140]	; (800721c <vPortFree+0xb4>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4013      	ands	r3, r2
 8007192:	2b00      	cmp	r3, #0
 8007194:	d10c      	bne.n	80071b0 <vPortFree+0x48>
	__asm volatile
 8007196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719a:	b672      	cpsid	i
 800719c:	f383 8811 	msr	BASEPRI, r3
 80071a0:	f3bf 8f6f 	isb	sy
 80071a4:	f3bf 8f4f 	dsb	sy
 80071a8:	b662      	cpsie	i
 80071aa:	60fb      	str	r3, [r7, #12]
}
 80071ac:	bf00      	nop
 80071ae:	e7fe      	b.n	80071ae <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d00c      	beq.n	80071d2 <vPortFree+0x6a>
	__asm volatile
 80071b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071bc:	b672      	cpsid	i
 80071be:	f383 8811 	msr	BASEPRI, r3
 80071c2:	f3bf 8f6f 	isb	sy
 80071c6:	f3bf 8f4f 	dsb	sy
 80071ca:	b662      	cpsie	i
 80071cc:	60bb      	str	r3, [r7, #8]
}
 80071ce:	bf00      	nop
 80071d0:	e7fe      	b.n	80071d0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	685a      	ldr	r2, [r3, #4]
 80071d6:	4b11      	ldr	r3, [pc, #68]	; (800721c <vPortFree+0xb4>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4013      	ands	r3, r2
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d019      	beq.n	8007214 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d115      	bne.n	8007214 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	685a      	ldr	r2, [r3, #4]
 80071ec:	4b0b      	ldr	r3, [pc, #44]	; (800721c <vPortFree+0xb4>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	43db      	mvns	r3, r3
 80071f2:	401a      	ands	r2, r3
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80071f8:	f7fe fb7a 	bl	80058f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	685a      	ldr	r2, [r3, #4]
 8007200:	4b07      	ldr	r3, [pc, #28]	; (8007220 <vPortFree+0xb8>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4413      	add	r3, r2
 8007206:	4a06      	ldr	r2, [pc, #24]	; (8007220 <vPortFree+0xb8>)
 8007208:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800720a:	6938      	ldr	r0, [r7, #16]
 800720c:	f000 f86c 	bl	80072e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007210:	f7fe fb7c 	bl	800590c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007214:	bf00      	nop
 8007216:	3718      	adds	r7, #24
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	2000518c 	.word	0x2000518c
 8007220:	20005184 	.word	0x20005184

08007224 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800722a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800722e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007230:	4b27      	ldr	r3, [pc, #156]	; (80072d0 <prvHeapInit+0xac>)
 8007232:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f003 0307 	and.w	r3, r3, #7
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00c      	beq.n	8007258 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	3307      	adds	r3, #7
 8007242:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f023 0307 	bic.w	r3, r3, #7
 800724a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800724c:	68ba      	ldr	r2, [r7, #8]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	4a1f      	ldr	r2, [pc, #124]	; (80072d0 <prvHeapInit+0xac>)
 8007254:	4413      	add	r3, r2
 8007256:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800725c:	4a1d      	ldr	r2, [pc, #116]	; (80072d4 <prvHeapInit+0xb0>)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007262:	4b1c      	ldr	r3, [pc, #112]	; (80072d4 <prvHeapInit+0xb0>)
 8007264:	2200      	movs	r2, #0
 8007266:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	4413      	add	r3, r2
 800726e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007270:	2208      	movs	r2, #8
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	1a9b      	subs	r3, r3, r2
 8007276:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f023 0307 	bic.w	r3, r3, #7
 800727e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	4a15      	ldr	r2, [pc, #84]	; (80072d8 <prvHeapInit+0xb4>)
 8007284:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007286:	4b14      	ldr	r3, [pc, #80]	; (80072d8 <prvHeapInit+0xb4>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2200      	movs	r2, #0
 800728c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800728e:	4b12      	ldr	r3, [pc, #72]	; (80072d8 <prvHeapInit+0xb4>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2200      	movs	r2, #0
 8007294:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	1ad2      	subs	r2, r2, r3
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80072a4:	4b0c      	ldr	r3, [pc, #48]	; (80072d8 <prvHeapInit+0xb4>)
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	4a0a      	ldr	r2, [pc, #40]	; (80072dc <prvHeapInit+0xb8>)
 80072b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	4a09      	ldr	r2, [pc, #36]	; (80072e0 <prvHeapInit+0xbc>)
 80072ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80072bc:	4b09      	ldr	r3, [pc, #36]	; (80072e4 <prvHeapInit+0xc0>)
 80072be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80072c2:	601a      	str	r2, [r3, #0]
}
 80072c4:	bf00      	nop
 80072c6:	3714      	adds	r7, #20
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr
 80072d0:	20001578 	.word	0x20001578
 80072d4:	20005178 	.word	0x20005178
 80072d8:	20005180 	.word	0x20005180
 80072dc:	20005188 	.word	0x20005188
 80072e0:	20005184 	.word	0x20005184
 80072e4:	2000518c 	.word	0x2000518c

080072e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80072f0:	4b28      	ldr	r3, [pc, #160]	; (8007394 <prvInsertBlockIntoFreeList+0xac>)
 80072f2:	60fb      	str	r3, [r7, #12]
 80072f4:	e002      	b.n	80072fc <prvInsertBlockIntoFreeList+0x14>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	60fb      	str	r3, [r7, #12]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	429a      	cmp	r2, r3
 8007304:	d8f7      	bhi.n	80072f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	68ba      	ldr	r2, [r7, #8]
 8007310:	4413      	add	r3, r2
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	429a      	cmp	r2, r3
 8007316:	d108      	bne.n	800732a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	685a      	ldr	r2, [r3, #4]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	441a      	add	r2, r3
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	68ba      	ldr	r2, [r7, #8]
 8007334:	441a      	add	r2, r3
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	429a      	cmp	r2, r3
 800733c:	d118      	bne.n	8007370 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	4b15      	ldr	r3, [pc, #84]	; (8007398 <prvInsertBlockIntoFreeList+0xb0>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	429a      	cmp	r2, r3
 8007348:	d00d      	beq.n	8007366 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	685a      	ldr	r2, [r3, #4]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	441a      	add	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	601a      	str	r2, [r3, #0]
 8007364:	e008      	b.n	8007378 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007366:	4b0c      	ldr	r3, [pc, #48]	; (8007398 <prvInsertBlockIntoFreeList+0xb0>)
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	601a      	str	r2, [r3, #0]
 800736e:	e003      	b.n	8007378 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	429a      	cmp	r2, r3
 800737e:	d002      	beq.n	8007386 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007386:	bf00      	nop
 8007388:	3714      	adds	r7, #20
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	20005178 	.word	0x20005178
 8007398:	20005180 	.word	0x20005180

0800739c <memset>:
 800739c:	4402      	add	r2, r0
 800739e:	4603      	mov	r3, r0
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d100      	bne.n	80073a6 <memset+0xa>
 80073a4:	4770      	bx	lr
 80073a6:	f803 1b01 	strb.w	r1, [r3], #1
 80073aa:	e7f9      	b.n	80073a0 <memset+0x4>

080073ac <__libc_init_array>:
 80073ac:	b570      	push	{r4, r5, r6, lr}
 80073ae:	4d0d      	ldr	r5, [pc, #52]	; (80073e4 <__libc_init_array+0x38>)
 80073b0:	4c0d      	ldr	r4, [pc, #52]	; (80073e8 <__libc_init_array+0x3c>)
 80073b2:	1b64      	subs	r4, r4, r5
 80073b4:	10a4      	asrs	r4, r4, #2
 80073b6:	2600      	movs	r6, #0
 80073b8:	42a6      	cmp	r6, r4
 80073ba:	d109      	bne.n	80073d0 <__libc_init_array+0x24>
 80073bc:	4d0b      	ldr	r5, [pc, #44]	; (80073ec <__libc_init_array+0x40>)
 80073be:	4c0c      	ldr	r4, [pc, #48]	; (80073f0 <__libc_init_array+0x44>)
 80073c0:	f000 f826 	bl	8007410 <_init>
 80073c4:	1b64      	subs	r4, r4, r5
 80073c6:	10a4      	asrs	r4, r4, #2
 80073c8:	2600      	movs	r6, #0
 80073ca:	42a6      	cmp	r6, r4
 80073cc:	d105      	bne.n	80073da <__libc_init_array+0x2e>
 80073ce:	bd70      	pop	{r4, r5, r6, pc}
 80073d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80073d4:	4798      	blx	r3
 80073d6:	3601      	adds	r6, #1
 80073d8:	e7ee      	b.n	80073b8 <__libc_init_array+0xc>
 80073da:	f855 3b04 	ldr.w	r3, [r5], #4
 80073de:	4798      	blx	r3
 80073e0:	3601      	adds	r6, #1
 80073e2:	e7f2      	b.n	80073ca <__libc_init_array+0x1e>
 80073e4:	080074e8 	.word	0x080074e8
 80073e8:	080074e8 	.word	0x080074e8
 80073ec:	080074e8 	.word	0x080074e8
 80073f0:	080074ec 	.word	0x080074ec

080073f4 <memcpy>:
 80073f4:	440a      	add	r2, r1
 80073f6:	4291      	cmp	r1, r2
 80073f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80073fc:	d100      	bne.n	8007400 <memcpy+0xc>
 80073fe:	4770      	bx	lr
 8007400:	b510      	push	{r4, lr}
 8007402:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007406:	f803 4f01 	strb.w	r4, [r3, #1]!
 800740a:	4291      	cmp	r1, r2
 800740c:	d1f9      	bne.n	8007402 <memcpy+0xe>
 800740e:	bd10      	pop	{r4, pc}

08007410 <_init>:
 8007410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007412:	bf00      	nop
 8007414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007416:	bc08      	pop	{r3}
 8007418:	469e      	mov	lr, r3
 800741a:	4770      	bx	lr

0800741c <_fini>:
 800741c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800741e:	bf00      	nop
 8007420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007422:	bc08      	pop	{r3}
 8007424:	469e      	mov	lr, r3
 8007426:	4770      	bx	lr
