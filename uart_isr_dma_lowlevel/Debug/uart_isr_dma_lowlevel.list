
uart_isr_dma_lowlevel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2a0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  0800b4a0  0800b4a0  0001b4a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b690  0800b690  000201b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b690  0800b690  0001b690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b698  0800b698  000201b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b698  0800b698  0001b698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b69c  0800b69c  0001b69c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800b6a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000078  0800b718  00020078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000118  0800b7b8  00020118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005d78  200001b8  0800b858  000201b8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20005f30  0800b858  00025f30  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002c36f  00000000  00000000  000201e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004ddd  00000000  00000000  0004c555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002098  00000000  00000000  00051338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001ea0  00000000  00000000  000533d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00007cd2  00000000  00000000  00055270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00024099  00000000  00000000  0005cf42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001159f2  00000000  00000000  00080fdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001969cd  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008e20  00000000  00000000  00196a20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001b8 	.word	0x200001b8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b488 	.word	0x0800b488

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001bc 	.word	0x200001bc
 800023c:	0800b488 	.word	0x0800b488

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002d0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d332      	bcc.n	80002c2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d314      	bcc.n	8000290 <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000284:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000288:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800028a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028e:	4770      	bx	lr

08000290 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000290:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000292:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000294:	d319      	bcc.n	80002ca <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000296:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000298:	1b12      	subs	r2, r2, r4

0800029a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800029a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80002a2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a4:	d1f9      	bne.n	800029a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a8:	d005      	beq.n	80002b6 <_No2ChunkNeeded>

080002aa <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002aa:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002ae:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002b2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b4:	d1f9      	bne.n	80002aa <_LoopCopyAfterWrapAround>

080002b6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80002b6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002ba:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002bc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002be:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002c0:	4770      	bx	lr

080002c2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002c2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002c4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002c6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c8:	d2cd      	bcs.n	8000266 <_Case4>

080002ca <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002ca:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ce:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002d0:	200001d4 	.word	0x200001d4

080002d4 <__aeabi_uldivmod>:
 80002d4:	b953      	cbnz	r3, 80002ec <__aeabi_uldivmod+0x18>
 80002d6:	b94a      	cbnz	r2, 80002ec <__aeabi_uldivmod+0x18>
 80002d8:	2900      	cmp	r1, #0
 80002da:	bf08      	it	eq
 80002dc:	2800      	cmpeq	r0, #0
 80002de:	bf1c      	itt	ne
 80002e0:	f04f 31ff 	movne.w	r1, #4294967295
 80002e4:	f04f 30ff 	movne.w	r0, #4294967295
 80002e8:	f000 b974 	b.w	80005d4 <__aeabi_idiv0>
 80002ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f4:	f000 f806 	bl	8000304 <__udivmoddi4>
 80002f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000300:	b004      	add	sp, #16
 8000302:	4770      	bx	lr

08000304 <__udivmoddi4>:
 8000304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000308:	9d08      	ldr	r5, [sp, #32]
 800030a:	4604      	mov	r4, r0
 800030c:	468e      	mov	lr, r1
 800030e:	2b00      	cmp	r3, #0
 8000310:	d14d      	bne.n	80003ae <__udivmoddi4+0xaa>
 8000312:	428a      	cmp	r2, r1
 8000314:	4694      	mov	ip, r2
 8000316:	d969      	bls.n	80003ec <__udivmoddi4+0xe8>
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	b152      	cbz	r2, 8000334 <__udivmoddi4+0x30>
 800031e:	fa01 f302 	lsl.w	r3, r1, r2
 8000322:	f1c2 0120 	rsb	r1, r2, #32
 8000326:	fa20 f101 	lsr.w	r1, r0, r1
 800032a:	fa0c fc02 	lsl.w	ip, ip, r2
 800032e:	ea41 0e03 	orr.w	lr, r1, r3
 8000332:	4094      	lsls	r4, r2
 8000334:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000338:	0c21      	lsrs	r1, r4, #16
 800033a:	fbbe f6f8 	udiv	r6, lr, r8
 800033e:	fa1f f78c 	uxth.w	r7, ip
 8000342:	fb08 e316 	mls	r3, r8, r6, lr
 8000346:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034a:	fb06 f107 	mul.w	r1, r6, r7
 800034e:	4299      	cmp	r1, r3
 8000350:	d90a      	bls.n	8000368 <__udivmoddi4+0x64>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 811f 	bcs.w	800059c <__udivmoddi4+0x298>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 811c 	bls.w	800059c <__udivmoddi4+0x298>
 8000364:	3e02      	subs	r6, #2
 8000366:	4463      	add	r3, ip
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 f707 	mul.w	r7, r0, r7
 800037c:	42a7      	cmp	r7, r4
 800037e:	d90a      	bls.n	8000396 <__udivmoddi4+0x92>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f100 33ff 	add.w	r3, r0, #4294967295
 8000388:	f080 810a 	bcs.w	80005a0 <__udivmoddi4+0x29c>
 800038c:	42a7      	cmp	r7, r4
 800038e:	f240 8107 	bls.w	80005a0 <__udivmoddi4+0x29c>
 8000392:	4464      	add	r4, ip
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039a:	1be4      	subs	r4, r4, r7
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa4>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xc2>
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	f000 80ef 	beq.w	8000596 <__udivmoddi4+0x292>
 80003b8:	2600      	movs	r6, #0
 80003ba:	e9c5 0100 	strd	r0, r1, [r5]
 80003be:	4630      	mov	r0, r6
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f683 	clz	r6, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d14a      	bne.n	8000464 <__udivmoddi4+0x160>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd4>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80f9 	bhi.w	80005ca <__udivmoddi4+0x2c6>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	469e      	mov	lr, r3
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa4>
 80003e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa4>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xec>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 8092 	bne.w	800051e <__udivmoddi4+0x21a>
 80003fa:	eba1 010c 	sub.w	r1, r1, ip
 80003fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000402:	fa1f fe8c 	uxth.w	lr, ip
 8000406:	2601      	movs	r6, #1
 8000408:	0c20      	lsrs	r0, r4, #16
 800040a:	fbb1 f3f7 	udiv	r3, r1, r7
 800040e:	fb07 1113 	mls	r1, r7, r3, r1
 8000412:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000416:	fb0e f003 	mul.w	r0, lr, r3
 800041a:	4288      	cmp	r0, r1
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x12c>
 800041e:	eb1c 0101 	adds.w	r1, ip, r1
 8000422:	f103 38ff 	add.w	r8, r3, #4294967295
 8000426:	d202      	bcs.n	800042e <__udivmoddi4+0x12a>
 8000428:	4288      	cmp	r0, r1
 800042a:	f200 80cb 	bhi.w	80005c4 <__udivmoddi4+0x2c0>
 800042e:	4643      	mov	r3, r8
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1110 	mls	r1, r7, r0, r1
 800043c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000440:	fb0e fe00 	mul.w	lr, lr, r0
 8000444:	45a6      	cmp	lr, r4
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x156>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d202      	bcs.n	8000458 <__udivmoddi4+0x154>
 8000452:	45a6      	cmp	lr, r4
 8000454:	f200 80bb 	bhi.w	80005ce <__udivmoddi4+0x2ca>
 8000458:	4608      	mov	r0, r1
 800045a:	eba4 040e 	sub.w	r4, r4, lr
 800045e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000462:	e79c      	b.n	800039e <__udivmoddi4+0x9a>
 8000464:	f1c6 0720 	rsb	r7, r6, #32
 8000468:	40b3      	lsls	r3, r6
 800046a:	fa22 fc07 	lsr.w	ip, r2, r7
 800046e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000472:	fa20 f407 	lsr.w	r4, r0, r7
 8000476:	fa01 f306 	lsl.w	r3, r1, r6
 800047a:	431c      	orrs	r4, r3
 800047c:	40f9      	lsrs	r1, r7
 800047e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000482:	fa00 f306 	lsl.w	r3, r0, r6
 8000486:	fbb1 f8f9 	udiv	r8, r1, r9
 800048a:	0c20      	lsrs	r0, r4, #16
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	fb09 1118 	mls	r1, r9, r8, r1
 8000494:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000498:	fb08 f00e 	mul.w	r0, r8, lr
 800049c:	4288      	cmp	r0, r1
 800049e:	fa02 f206 	lsl.w	r2, r2, r6
 80004a2:	d90b      	bls.n	80004bc <__udivmoddi4+0x1b8>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004ac:	f080 8088 	bcs.w	80005c0 <__udivmoddi4+0x2bc>
 80004b0:	4288      	cmp	r0, r1
 80004b2:	f240 8085 	bls.w	80005c0 <__udivmoddi4+0x2bc>
 80004b6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	1a09      	subs	r1, r1, r0
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c4:	fb09 1110 	mls	r1, r9, r0, r1
 80004c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d0:	458e      	cmp	lr, r1
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x1e2>
 80004d4:	eb1c 0101 	adds.w	r1, ip, r1
 80004d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80004dc:	d26c      	bcs.n	80005b8 <__udivmoddi4+0x2b4>
 80004de:	458e      	cmp	lr, r1
 80004e0:	d96a      	bls.n	80005b8 <__udivmoddi4+0x2b4>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4461      	add	r1, ip
 80004e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ea:	fba0 9402 	umull	r9, r4, r0, r2
 80004ee:	eba1 010e 	sub.w	r1, r1, lr
 80004f2:	42a1      	cmp	r1, r4
 80004f4:	46c8      	mov	r8, r9
 80004f6:	46a6      	mov	lr, r4
 80004f8:	d356      	bcc.n	80005a8 <__udivmoddi4+0x2a4>
 80004fa:	d053      	beq.n	80005a4 <__udivmoddi4+0x2a0>
 80004fc:	b15d      	cbz	r5, 8000516 <__udivmoddi4+0x212>
 80004fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000502:	eb61 010e 	sbc.w	r1, r1, lr
 8000506:	fa01 f707 	lsl.w	r7, r1, r7
 800050a:	fa22 f306 	lsr.w	r3, r2, r6
 800050e:	40f1      	lsrs	r1, r6
 8000510:	431f      	orrs	r7, r3
 8000512:	e9c5 7100 	strd	r7, r1, [r5]
 8000516:	2600      	movs	r6, #0
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	f1c2 0320 	rsb	r3, r2, #32
 8000522:	40d8      	lsrs	r0, r3
 8000524:	fa0c fc02 	lsl.w	ip, ip, r2
 8000528:	fa21 f303 	lsr.w	r3, r1, r3
 800052c:	4091      	lsls	r1, r2
 800052e:	4301      	orrs	r1, r0
 8000530:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000534:	fa1f fe8c 	uxth.w	lr, ip
 8000538:	fbb3 f0f7 	udiv	r0, r3, r7
 800053c:	fb07 3610 	mls	r6, r7, r0, r3
 8000540:	0c0b      	lsrs	r3, r1, #16
 8000542:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000546:	fb00 f60e 	mul.w	r6, r0, lr
 800054a:	429e      	cmp	r6, r3
 800054c:	fa04 f402 	lsl.w	r4, r4, r2
 8000550:	d908      	bls.n	8000564 <__udivmoddi4+0x260>
 8000552:	eb1c 0303 	adds.w	r3, ip, r3
 8000556:	f100 38ff 	add.w	r8, r0, #4294967295
 800055a:	d22f      	bcs.n	80005bc <__udivmoddi4+0x2b8>
 800055c:	429e      	cmp	r6, r3
 800055e:	d92d      	bls.n	80005bc <__udivmoddi4+0x2b8>
 8000560:	3802      	subs	r0, #2
 8000562:	4463      	add	r3, ip
 8000564:	1b9b      	subs	r3, r3, r6
 8000566:	b289      	uxth	r1, r1
 8000568:	fbb3 f6f7 	udiv	r6, r3, r7
 800056c:	fb07 3316 	mls	r3, r7, r6, r3
 8000570:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000574:	fb06 f30e 	mul.w	r3, r6, lr
 8000578:	428b      	cmp	r3, r1
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x28a>
 800057c:	eb1c 0101 	adds.w	r1, ip, r1
 8000580:	f106 38ff 	add.w	r8, r6, #4294967295
 8000584:	d216      	bcs.n	80005b4 <__udivmoddi4+0x2b0>
 8000586:	428b      	cmp	r3, r1
 8000588:	d914      	bls.n	80005b4 <__udivmoddi4+0x2b0>
 800058a:	3e02      	subs	r6, #2
 800058c:	4461      	add	r1, ip
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000594:	e738      	b.n	8000408 <__udivmoddi4+0x104>
 8000596:	462e      	mov	r6, r5
 8000598:	4628      	mov	r0, r5
 800059a:	e705      	b.n	80003a8 <__udivmoddi4+0xa4>
 800059c:	4606      	mov	r6, r0
 800059e:	e6e3      	b.n	8000368 <__udivmoddi4+0x64>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6f8      	b.n	8000396 <__udivmoddi4+0x92>
 80005a4:	454b      	cmp	r3, r9
 80005a6:	d2a9      	bcs.n	80004fc <__udivmoddi4+0x1f8>
 80005a8:	ebb9 0802 	subs.w	r8, r9, r2
 80005ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b0:	3801      	subs	r0, #1
 80005b2:	e7a3      	b.n	80004fc <__udivmoddi4+0x1f8>
 80005b4:	4646      	mov	r6, r8
 80005b6:	e7ea      	b.n	800058e <__udivmoddi4+0x28a>
 80005b8:	4620      	mov	r0, r4
 80005ba:	e794      	b.n	80004e6 <__udivmoddi4+0x1e2>
 80005bc:	4640      	mov	r0, r8
 80005be:	e7d1      	b.n	8000564 <__udivmoddi4+0x260>
 80005c0:	46d0      	mov	r8, sl
 80005c2:	e77b      	b.n	80004bc <__udivmoddi4+0x1b8>
 80005c4:	3b02      	subs	r3, #2
 80005c6:	4461      	add	r1, ip
 80005c8:	e732      	b.n	8000430 <__udivmoddi4+0x12c>
 80005ca:	4630      	mov	r0, r6
 80005cc:	e709      	b.n	80003e2 <__udivmoddi4+0xde>
 80005ce:	4464      	add	r4, ip
 80005d0:	3802      	subs	r0, #2
 80005d2:	e742      	b.n	800045a <__udivmoddi4+0x156>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80005de:	4b26      	ldr	r3, [pc, #152]	; (8000678 <_DoInit+0xa0>)
 80005e0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80005e2:	22a8      	movs	r2, #168	; 0xa8
 80005e4:	2100      	movs	r1, #0
 80005e6:	6838      	ldr	r0, [r7, #0]
 80005e8:	f00a fe84 	bl	800b2f4 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	2203      	movs	r2, #3
 80005f0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	2203      	movs	r2, #3
 80005f6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	4a20      	ldr	r2, [pc, #128]	; (800067c <_DoInit+0xa4>)
 80005fc:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	4a1f      	ldr	r2, [pc, #124]	; (8000680 <_DoInit+0xa8>)
 8000602:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800060a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	2200      	movs	r2, #0
 8000610:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	2200      	movs	r2, #0
 8000616:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	2200      	movs	r2, #0
 800061c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	4a16      	ldr	r2, [pc, #88]	; (800067c <_DoInit+0xa4>)
 8000622:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	4a17      	ldr	r2, [pc, #92]	; (8000684 <_DoInit+0xac>)
 8000628:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	2210      	movs	r2, #16
 800062e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	2200      	movs	r2, #0
 8000634:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	2200      	movs	r2, #0
 800063a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	2200      	movs	r2, #0
 8000640:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000642:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	e00c      	b.n	8000666 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f1c3 030f 	rsb	r3, r3, #15
 8000652:	4a0d      	ldr	r2, [pc, #52]	; (8000688 <_DoInit+0xb0>)
 8000654:	5cd1      	ldrb	r1, [r2, r3]
 8000656:	683a      	ldr	r2, [r7, #0]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4413      	add	r3, r2
 800065c:	460a      	mov	r2, r1
 800065e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	3301      	adds	r3, #1
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2b0f      	cmp	r3, #15
 800066a:	d9ef      	bls.n	800064c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800066c:	f3bf 8f5f 	dmb	sy
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	200001d4 	.word	0x200001d4
 800067c:	0800b4a0 	.word	0x0800b4a0
 8000680:	2000027c 	.word	0x2000027c
 8000684:	2000067c 	.word	0x2000067c
 8000688:	0800b57c 	.word	0x0800b57c

0800068c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b08c      	sub	sp, #48	; 0x30
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8000698:	4b3e      	ldr	r3, [pc, #248]	; (8000794 <SEGGER_RTT_ReadNoLock+0x108>)
 800069a:	623b      	str	r3, [r7, #32]
 800069c:	6a3b      	ldr	r3, [r7, #32]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d101      	bne.n	80006aa <SEGGER_RTT_ReadNoLock+0x1e>
 80006a6:	f7ff ff97 	bl	80005d8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80006aa:	68fa      	ldr	r2, [r7, #12]
 80006ac:	4613      	mov	r3, r2
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	4413      	add	r3, r2
 80006b2:	00db      	lsls	r3, r3, #3
 80006b4:	3360      	adds	r3, #96	; 0x60
 80006b6:	4a37      	ldr	r2, [pc, #220]	; (8000794 <SEGGER_RTT_ReadNoLock+0x108>)
 80006b8:	4413      	add	r3, r2
 80006ba:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	691b      	ldr	r3, [r3, #16]
 80006c4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80006c6:	69fb      	ldr	r3, [r7, #28]
 80006c8:	68db      	ldr	r3, [r3, #12]
 80006ca:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80006cc:	2300      	movs	r3, #0
 80006ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80006d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006d2:	69bb      	ldr	r3, [r7, #24]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d92b      	bls.n	8000730 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80006d8:	69fb      	ldr	r3, [r7, #28]
 80006da:	689a      	ldr	r2, [r3, #8]
 80006dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006de:	1ad3      	subs	r3, r2, r3
 80006e0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80006e2:	697a      	ldr	r2, [r7, #20]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4293      	cmp	r3, r2
 80006e8:	bf28      	it	cs
 80006ea:	4613      	movcs	r3, r2
 80006ec:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	685a      	ldr	r2, [r3, #4]
 80006f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006f4:	4413      	add	r3, r2
 80006f6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80006f8:	697a      	ldr	r2, [r7, #20]
 80006fa:	6939      	ldr	r1, [r7, #16]
 80006fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006fe:	f00a fdeb 	bl	800b2d8 <memcpy>
    NumBytesRead += NumBytesRem;
 8000702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	4413      	add	r3, r2
 8000708:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800070a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	4413      	add	r3, r2
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	1ad3      	subs	r3, r2, r3
 8000718:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800071a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	4413      	add	r3, r2
 8000720:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	689b      	ldr	r3, [r3, #8]
 8000726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000728:	429a      	cmp	r2, r3
 800072a:	d101      	bne.n	8000730 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800072c:	2300      	movs	r3, #0
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8000730:	69ba      	ldr	r2, [r7, #24]
 8000732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000734:	1ad3      	subs	r3, r2, r3
 8000736:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8000738:	697a      	ldr	r2, [r7, #20]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4293      	cmp	r3, r2
 800073e:	bf28      	it	cs
 8000740:	4613      	movcs	r3, r2
 8000742:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d019      	beq.n	800077e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	685a      	ldr	r2, [r3, #4]
 800074e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000750:	4413      	add	r3, r2
 8000752:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8000754:	697a      	ldr	r2, [r7, #20]
 8000756:	6939      	ldr	r1, [r7, #16]
 8000758:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800075a:	f00a fdbd 	bl	800b2d8 <memcpy>
    NumBytesRead += NumBytesRem;
 800075e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	4413      	add	r3, r2
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8000766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	4413      	add	r3, r2
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	1ad3      	subs	r3, r2, r3
 8000774:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8000776:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	4413      	add	r3, r2
 800077c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800077e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000780:	2b00      	cmp	r3, #0
 8000782:	d002      	beq.n	800078a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000788:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800078a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800078c:	4618      	mov	r0, r3
 800078e:	3730      	adds	r7, #48	; 0x30
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200001d4 	.word	0x200001d4

08000798 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
 80007a4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80007a6:	4b3d      	ldr	r3, [pc, #244]	; (800089c <SEGGER_RTT_AllocUpBuffer+0x104>)
 80007a8:	61bb      	str	r3, [r7, #24]
 80007aa:	69bb      	ldr	r3, [r7, #24]
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d101      	bne.n	80007b8 <SEGGER_RTT_AllocUpBuffer+0x20>
 80007b4:	f7ff ff10 	bl	80005d8 <_DoInit>
  SEGGER_RTT_LOCK();
 80007b8:	f3ef 8311 	mrs	r3, BASEPRI
 80007bc:	f04f 0120 	mov.w	r1, #32
 80007c0:	f381 8811 	msr	BASEPRI, r1
 80007c4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80007c6:	4b35      	ldr	r3, [pc, #212]	; (800089c <SEGGER_RTT_AllocUpBuffer+0x104>)
 80007c8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80007ce:	6939      	ldr	r1, [r7, #16]
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	1c5a      	adds	r2, r3, #1
 80007d4:	4613      	mov	r3, r2
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	4413      	add	r3, r2
 80007da:	00db      	lsls	r3, r3, #3
 80007dc:	440b      	add	r3, r1
 80007de:	3304      	adds	r3, #4
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d008      	beq.n	80007f8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	3301      	adds	r3, #1
 80007ea:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80007ec:	693b      	ldr	r3, [r7, #16]
 80007ee:	691b      	ldr	r3, [r3, #16]
 80007f0:	69fa      	ldr	r2, [r7, #28]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	dbeb      	blt.n	80007ce <SEGGER_RTT_AllocUpBuffer+0x36>
 80007f6:	e000      	b.n	80007fa <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80007f8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	691b      	ldr	r3, [r3, #16]
 80007fe:	69fa      	ldr	r2, [r7, #28]
 8000800:	429a      	cmp	r2, r3
 8000802:	da3f      	bge.n	8000884 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8000804:	6939      	ldr	r1, [r7, #16]
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	1c5a      	adds	r2, r3, #1
 800080a:	4613      	mov	r3, r2
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	4413      	add	r3, r2
 8000810:	00db      	lsls	r3, r3, #3
 8000812:	440b      	add	r3, r1
 8000814:	68fa      	ldr	r2, [r7, #12]
 8000816:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8000818:	6939      	ldr	r1, [r7, #16]
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	1c5a      	adds	r2, r3, #1
 800081e:	4613      	mov	r3, r2
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	4413      	add	r3, r2
 8000824:	00db      	lsls	r3, r3, #3
 8000826:	440b      	add	r3, r1
 8000828:	3304      	adds	r3, #4
 800082a:	68ba      	ldr	r2, [r7, #8]
 800082c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800082e:	6939      	ldr	r1, [r7, #16]
 8000830:	69fa      	ldr	r2, [r7, #28]
 8000832:	4613      	mov	r3, r2
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	4413      	add	r3, r2
 8000838:	00db      	lsls	r3, r3, #3
 800083a:	440b      	add	r3, r1
 800083c:	3320      	adds	r3, #32
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8000842:	6939      	ldr	r1, [r7, #16]
 8000844:	69fa      	ldr	r2, [r7, #28]
 8000846:	4613      	mov	r3, r2
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	4413      	add	r3, r2
 800084c:	00db      	lsls	r3, r3, #3
 800084e:	440b      	add	r3, r1
 8000850:	3328      	adds	r3, #40	; 0x28
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8000856:	6939      	ldr	r1, [r7, #16]
 8000858:	69fa      	ldr	r2, [r7, #28]
 800085a:	4613      	mov	r3, r2
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	4413      	add	r3, r2
 8000860:	00db      	lsls	r3, r3, #3
 8000862:	440b      	add	r3, r1
 8000864:	3324      	adds	r3, #36	; 0x24
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800086a:	6939      	ldr	r1, [r7, #16]
 800086c:	69fa      	ldr	r2, [r7, #28]
 800086e:	4613      	mov	r3, r2
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	4413      	add	r3, r2
 8000874:	00db      	lsls	r3, r3, #3
 8000876:	440b      	add	r3, r1
 8000878:	332c      	adds	r3, #44	; 0x2c
 800087a:	683a      	ldr	r2, [r7, #0]
 800087c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800087e:	f3bf 8f5f 	dmb	sy
 8000882:	e002      	b.n	800088a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8000884:	f04f 33ff 	mov.w	r3, #4294967295
 8000888:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8000890:	69fb      	ldr	r3, [r7, #28]
}
 8000892:	4618      	mov	r0, r3
 8000894:	3720      	adds	r7, #32
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200001d4 	.word	0x200001d4

080008a0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	; 0x28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
 80008ac:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80008ae:	4b21      	ldr	r3, [pc, #132]	; (8000934 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80008b0:	623b      	str	r3, [r7, #32]
 80008b2:	6a3b      	ldr	r3, [r7, #32]
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d101      	bne.n	80008c0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80008bc:	f7ff fe8c 	bl	80005d8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80008c0:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80008c2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	2b02      	cmp	r3, #2
 80008c8:	d82c      	bhi.n	8000924 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80008ca:	f3ef 8311 	mrs	r3, BASEPRI
 80008ce:	f04f 0120 	mov.w	r1, #32
 80008d2:	f381 8811 	msr	BASEPRI, r1
 80008d6:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80008d8:	68fa      	ldr	r2, [r7, #12]
 80008da:	4613      	mov	r3, r2
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	4413      	add	r3, r2
 80008e0:	00db      	lsls	r3, r3, #3
 80008e2:	3360      	adds	r3, #96	; 0x60
 80008e4:	69fa      	ldr	r2, [r7, #28]
 80008e6:	4413      	add	r3, r2
 80008e8:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d00e      	beq.n	800090e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	68ba      	ldr	r2, [r7, #8]
 80008f4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	683a      	ldr	r2, [r7, #0]
 8000900:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000912:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000914:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8000918:	69bb      	ldr	r3, [r7, #24]
 800091a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
 8000922:	e002      	b.n	800092a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8000924:	f04f 33ff 	mov.w	r3, #4294967295
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800092c:	4618      	mov	r0, r3
 800092e:	3728      	adds	r7, #40	; 0x28
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200001d4 	.word	0x200001d4

08000938 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8000938:	b480      	push	{r7}
 800093a:	b087      	sub	sp, #28
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	1c5a      	adds	r2, r3, #1
 800094c:	60fa      	str	r2, [r7, #12]
 800094e:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2b80      	cmp	r3, #128	; 0x80
 8000954:	d90a      	bls.n	800096c <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8000956:	2380      	movs	r3, #128	; 0x80
 8000958:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 800095a:	e007      	b.n	800096c <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 800095c:	68ba      	ldr	r2, [r7, #8]
 800095e:	1c53      	adds	r3, r2, #1
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	1c59      	adds	r1, r3, #1
 8000966:	60f9      	str	r1, [r7, #12]
 8000968:	7812      	ldrb	r2, [r2, #0]
 800096a:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	1e5a      	subs	r2, r3, #1
 8000970:	607a      	str	r2, [r7, #4]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d003      	beq.n	800097e <_EncodeStr+0x46>
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d1ee      	bne.n	800095c <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800097e:	68ba      	ldr	r2, [r7, #8]
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	b2da      	uxtb	r2, r3
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 800098a:	68fb      	ldr	r3, [r7, #12]
}
 800098c:	4618      	mov	r0, r3
 800098e:	371c      	adds	r7, #28
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3307      	adds	r3, #7
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80009b6:	4b35      	ldr	r3, [pc, #212]	; (8000a8c <_HandleIncomingPacket+0xdc>)
 80009b8:	7e1b      	ldrb	r3, [r3, #24]
 80009ba:	4618      	mov	r0, r3
 80009bc:	1cfb      	adds	r3, r7, #3
 80009be:	2201      	movs	r2, #1
 80009c0:	4619      	mov	r1, r3
 80009c2:	f7ff fe63 	bl	800068c <SEGGER_RTT_ReadNoLock>
 80009c6:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d052      	beq.n	8000a74 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 80009ce:	78fb      	ldrb	r3, [r7, #3]
 80009d0:	2b80      	cmp	r3, #128	; 0x80
 80009d2:	d031      	beq.n	8000a38 <_HandleIncomingPacket+0x88>
 80009d4:	2b80      	cmp	r3, #128	; 0x80
 80009d6:	dc40      	bgt.n	8000a5a <_HandleIncomingPacket+0xaa>
 80009d8:	2b07      	cmp	r3, #7
 80009da:	dc15      	bgt.n	8000a08 <_HandleIncomingPacket+0x58>
 80009dc:	2b00      	cmp	r3, #0
 80009de:	dd3c      	ble.n	8000a5a <_HandleIncomingPacket+0xaa>
 80009e0:	3b01      	subs	r3, #1
 80009e2:	2b06      	cmp	r3, #6
 80009e4:	d839      	bhi.n	8000a5a <_HandleIncomingPacket+0xaa>
 80009e6:	a201      	add	r2, pc, #4	; (adr r2, 80009ec <_HandleIncomingPacket+0x3c>)
 80009e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ec:	08000a0f 	.word	0x08000a0f
 80009f0:	08000a15 	.word	0x08000a15
 80009f4:	08000a1b 	.word	0x08000a1b
 80009f8:	08000a21 	.word	0x08000a21
 80009fc:	08000a27 	.word	0x08000a27
 8000a00:	08000a2d 	.word	0x08000a2d
 8000a04:	08000a33 	.word	0x08000a33
 8000a08:	2b7f      	cmp	r3, #127	; 0x7f
 8000a0a:	d035      	beq.n	8000a78 <_HandleIncomingPacket+0xc8>
 8000a0c:	e025      	b.n	8000a5a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8000a0e:	f000 fbe5 	bl	80011dc <SEGGER_SYSVIEW_Start>
      break;
 8000a12:	e036      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8000a14:	f000 fc9c 	bl	8001350 <SEGGER_SYSVIEW_Stop>
      break;
 8000a18:	e033      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8000a1a:	f000 fe75 	bl	8001708 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8000a1e:	e030      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8000a20:	f000 fe3a 	bl	8001698 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8000a24:	e02d      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8000a26:	f000 fcb9 	bl	800139c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8000a2a:	e02a      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8000a2c:	f000 ffa4 	bl	8001978 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8000a30:	e027      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8000a32:	f000 ff83 	bl	800193c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8000a36:	e024      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <_HandleIncomingPacket+0xdc>)
 8000a3a:	7e1b      	ldrb	r3, [r3, #24]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	1cfb      	adds	r3, r7, #3
 8000a40:	2201      	movs	r2, #1
 8000a42:	4619      	mov	r1, r3
 8000a44:	f7ff fe22 	bl	800068c <SEGGER_RTT_ReadNoLock>
 8000a48:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d015      	beq.n	8000a7c <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8000a50:	78fb      	ldrb	r3, [r7, #3]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 fee8 	bl	8001828 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8000a58:	e010      	b.n	8000a7c <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8000a5a:	78fb      	ldrb	r3, [r7, #3]
 8000a5c:	b25b      	sxtb	r3, r3
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	da0e      	bge.n	8000a80 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000a62:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <_HandleIncomingPacket+0xdc>)
 8000a64:	7e1b      	ldrb	r3, [r3, #24]
 8000a66:	4618      	mov	r0, r3
 8000a68:	1cfb      	adds	r3, r7, #3
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f7ff fe0d 	bl	800068c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8000a72:	e005      	b.n	8000a80 <_HandleIncomingPacket+0xd0>
    }
  }
 8000a74:	bf00      	nop
 8000a76:	e004      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
      break;
 8000a78:	bf00      	nop
 8000a7a:	e002      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
      break;
 8000a7c:	bf00      	nop
 8000a7e:	e000      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
      break;
 8000a80:	bf00      	nop
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000a94 	.word	0x20000a94

08000a90 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08c      	sub	sp, #48	; 0x30
 8000a94:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8000a96:	2301      	movs	r3, #1
 8000a98:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000aa4:	4b31      	ldr	r3, [pc, #196]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000aa6:	695b      	ldr	r3, [r3, #20]
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000aaa:	e00b      	b.n	8000ac4 <_TrySendOverflowPacket+0x34>
 8000aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ab2:	1c59      	adds	r1, r3, #1
 8000ab4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8000ab6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000aba:	b2d2      	uxtb	r2, r2
 8000abc:	701a      	strb	r2, [r3, #0]
 8000abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac0:	09db      	lsrs	r3, r3, #7
 8000ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ac8:	d8f0      	bhi.n	8000aac <_TrySendOverflowPacket+0x1c>
 8000aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000acc:	1c5a      	adds	r2, r3, #1
 8000ace:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000ad0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ad2:	b2d2      	uxtb	r2, r2
 8000ad4:	701a      	strb	r2, [r3, #0]
 8000ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ad8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000ada:	4b25      	ldr	r3, [pc, #148]	; (8000b70 <_TrySendOverflowPacket+0xe0>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000ae0:	4b22      	ldr	r3, [pc, #136]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	1ad3      	subs	r3, r2, r3
 8000ae8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	623b      	str	r3, [r7, #32]
 8000af2:	e00b      	b.n	8000b0c <_TrySendOverflowPacket+0x7c>
 8000af4:	6a3b      	ldr	r3, [r7, #32]
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afa:	1c59      	adds	r1, r3, #1
 8000afc:	6279      	str	r1, [r7, #36]	; 0x24
 8000afe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000b02:	b2d2      	uxtb	r2, r2
 8000b04:	701a      	strb	r2, [r3, #0]
 8000b06:	6a3b      	ldr	r3, [r7, #32]
 8000b08:	09db      	lsrs	r3, r3, #7
 8000b0a:	623b      	str	r3, [r7, #32]
 8000b0c:	6a3b      	ldr	r3, [r7, #32]
 8000b0e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b10:	d8f0      	bhi.n	8000af4 <_TrySendOverflowPacket+0x64>
 8000b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b14:	1c5a      	adds	r2, r3, #1
 8000b16:	627a      	str	r2, [r7, #36]	; 0x24
 8000b18:	6a3a      	ldr	r2, [r7, #32]
 8000b1a:	b2d2      	uxtb	r2, r2
 8000b1c:	701a      	strb	r2, [r3, #0]
 8000b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b20:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8000b22:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b24:	785b      	ldrb	r3, [r3, #1]
 8000b26:	4618      	mov	r0, r3
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	69fa      	ldr	r2, [r7, #28]
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	461a      	mov	r2, r3
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	4619      	mov	r1, r3
 8000b34:	f7ff fb84 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d009      	beq.n	8000b56 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000b42:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	3b01      	subs	r3, #1
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b52:	701a      	strb	r2, [r3, #0]
 8000b54:	e004      	b.n	8000b60 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8000b56:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	4a03      	ldr	r2, [pc, #12]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b5e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8000b60:	693b      	ldr	r3, [r7, #16]
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3730      	adds	r7, #48	; 0x30
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000a94 	.word	0x20000a94
 8000b70:	e0001004 	.word	0xe0001004

08000b74 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8000b80:	4b98      	ldr	r3, [pc, #608]	; (8000de4 <_SendPacket+0x270>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d010      	beq.n	8000baa <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8000b88:	4b96      	ldr	r3, [pc, #600]	; (8000de4 <_SendPacket+0x270>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	f000 812d 	beq.w	8000dec <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8000b92:	4b94      	ldr	r3, [pc, #592]	; (8000de4 <_SendPacket+0x270>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d109      	bne.n	8000bae <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8000b9a:	f7ff ff79 	bl	8000a90 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8000b9e:	4b91      	ldr	r3, [pc, #580]	; (8000de4 <_SendPacket+0x270>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	f040 8124 	bne.w	8000df0 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8000ba8:	e001      	b.n	8000bae <_SendPacket+0x3a>
    goto Send;
 8000baa:	bf00      	nop
 8000bac:	e000      	b.n	8000bb0 <_SendPacket+0x3c>
Send:
 8000bae:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b1f      	cmp	r3, #31
 8000bb4:	d809      	bhi.n	8000bca <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8000bb6:	4b8b      	ldr	r3, [pc, #556]	; (8000de4 <_SendPacket+0x270>)
 8000bb8:	69da      	ldr	r2, [r3, #28]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8000bc0:	f003 0301 	and.w	r3, r3, #1
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	f040 8115 	bne.w	8000df4 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2b17      	cmp	r3, #23
 8000bce:	d807      	bhi.n	8000be0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	701a      	strb	r2, [r3, #0]
 8000bde:	e0c4      	b.n	8000d6a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8000be0:	68ba      	ldr	r2, [r7, #8]
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	2b7f      	cmp	r3, #127	; 0x7f
 8000bec:	d912      	bls.n	8000c14 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	09da      	lsrs	r2, r3, #7
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	3a01      	subs	r2, #1
 8000c06:	60fa      	str	r2, [r7, #12]
 8000c08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	701a      	strb	r2, [r3, #0]
 8000c12:	e006      	b.n	8000c22 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2b7e      	cmp	r3, #126	; 0x7e
 8000c26:	d807      	bhi.n	8000c38 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	701a      	strb	r2, [r3, #0]
 8000c36:	e098      	b.n	8000d6a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c3e:	d212      	bcs.n	8000c66 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	09da      	lsrs	r2, r3, #7
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	b2d2      	uxtb	r2, r2
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	3a01      	subs	r2, #1
 8000c58:	60fa      	str	r2, [r7, #12]
 8000c5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	701a      	strb	r2, [r3, #0]
 8000c64:	e081      	b.n	8000d6a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000c6c:	d21d      	bcs.n	8000caa <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	0b9a      	lsrs	r2, r3, #14
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	3b01      	subs	r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	09db      	lsrs	r3, r3, #7
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	68fa      	ldr	r2, [r7, #12]
 8000c86:	3a01      	subs	r2, #1
 8000c88:	60fa      	str	r2, [r7, #12]
 8000c8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	68fa      	ldr	r2, [r7, #12]
 8000c9a:	3a01      	subs	r2, #1
 8000c9c:	60fa      	str	r2, [r7, #12]
 8000c9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	701a      	strb	r2, [r3, #0]
 8000ca8:	e05f      	b.n	8000d6a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000cb0:	d228      	bcs.n	8000d04 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	0d5a      	lsrs	r2, r3, #21
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	b2d2      	uxtb	r2, r2
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	0b9b      	lsrs	r3, r3, #14
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	68fa      	ldr	r2, [r7, #12]
 8000cca:	3a01      	subs	r2, #1
 8000ccc:	60fa      	str	r2, [r7, #12]
 8000cce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	09db      	lsrs	r3, r3, #7
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	3a01      	subs	r2, #1
 8000ce2:	60fa      	str	r2, [r7, #12]
 8000ce4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	3a01      	subs	r2, #1
 8000cf6:	60fa      	str	r2, [r7, #12]
 8000cf8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	701a      	strb	r2, [r3, #0]
 8000d02:	e032      	b.n	8000d6a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	0f1a      	lsrs	r2, r3, #28
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	0d5b      	lsrs	r3, r3, #21
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	3a01      	subs	r2, #1
 8000d1e:	60fa      	str	r2, [r7, #12]
 8000d20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	0b9b      	lsrs	r3, r3, #14
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	68fa      	ldr	r2, [r7, #12]
 8000d32:	3a01      	subs	r2, #1
 8000d34:	60fa      	str	r2, [r7, #12]
 8000d36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	09db      	lsrs	r3, r3, #7
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	60fa      	str	r2, [r7, #12]
 8000d4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	3a01      	subs	r2, #1
 8000d5e:	60fa      	str	r2, [r7, #12]
 8000d60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000d6a:	4b1f      	ldr	r3, [pc, #124]	; (8000de8 <_SendPacket+0x274>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000d70:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <_SendPacket+0x270>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	623b      	str	r3, [r7, #32]
 8000d82:	e00b      	b.n	8000d9c <_SendPacket+0x228>
 8000d84:	6a3b      	ldr	r3, [r7, #32]
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8a:	1c59      	adds	r1, r3, #1
 8000d8c:	6279      	str	r1, [r7, #36]	; 0x24
 8000d8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	701a      	strb	r2, [r3, #0]
 8000d96:	6a3b      	ldr	r3, [r7, #32]
 8000d98:	09db      	lsrs	r3, r3, #7
 8000d9a:	623b      	str	r3, [r7, #32]
 8000d9c:	6a3b      	ldr	r3, [r7, #32]
 8000d9e:	2b7f      	cmp	r3, #127	; 0x7f
 8000da0:	d8f0      	bhi.n	8000d84 <_SendPacket+0x210>
 8000da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da4:	1c5a      	adds	r2, r3, #1
 8000da6:	627a      	str	r2, [r7, #36]	; 0x24
 8000da8:	6a3a      	ldr	r2, [r7, #32]
 8000daa:	b2d2      	uxtb	r2, r2
 8000dac:	701a      	strb	r2, [r3, #0]
 8000dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db0:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <_SendPacket+0x270>)
 8000db4:	785b      	ldrb	r3, [r3, #1]
 8000db6:	4618      	mov	r0, r3
 8000db8:	68ba      	ldr	r2, [r7, #8]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	68f9      	ldr	r1, [r7, #12]
 8000dc2:	f7ff fa3d 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000dc6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d003      	beq.n	8000dd6 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000dce:	4a05      	ldr	r2, [pc, #20]	; (8000de4 <_SendPacket+0x270>)
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	60d3      	str	r3, [r2, #12]
 8000dd4:	e00f      	b.n	8000df6 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8000dd6:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <_SendPacket+0x270>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4b01      	ldr	r3, [pc, #4]	; (8000de4 <_SendPacket+0x270>)
 8000de0:	701a      	strb	r2, [r3, #0]
 8000de2:	e008      	b.n	8000df6 <_SendPacket+0x282>
 8000de4:	20000a94 	.word	0x20000a94
 8000de8:	e0001004 	.word	0xe0001004
    goto SendDone;
 8000dec:	bf00      	nop
 8000dee:	e002      	b.n	8000df6 <_SendPacket+0x282>
      goto SendDone;
 8000df0:	bf00      	nop
 8000df2:	e000      	b.n	8000df6 <_SendPacket+0x282>
      goto SendDone;
 8000df4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <_SendPacket+0x2d4>)
 8000df8:	7e1b      	ldrb	r3, [r3, #24]
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4a13      	ldr	r2, [pc, #76]	; (8000e4c <_SendPacket+0x2d8>)
 8000dfe:	460b      	mov	r3, r1
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	440b      	add	r3, r1
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	4413      	add	r3, r2
 8000e08:	336c      	adds	r3, #108	; 0x6c
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <_SendPacket+0x2d4>)
 8000e0e:	7e1b      	ldrb	r3, [r3, #24]
 8000e10:	4618      	mov	r0, r3
 8000e12:	490e      	ldr	r1, [pc, #56]	; (8000e4c <_SendPacket+0x2d8>)
 8000e14:	4603      	mov	r3, r0
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	4403      	add	r3, r0
 8000e1a:	00db      	lsls	r3, r3, #3
 8000e1c:	440b      	add	r3, r1
 8000e1e:	3370      	adds	r3, #112	; 0x70
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d00b      	beq.n	8000e3e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8000e26:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <_SendPacket+0x2d4>)
 8000e28:	789b      	ldrb	r3, [r3, #2]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d107      	bne.n	8000e3e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <_SendPacket+0x2d4>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8000e34:	f7ff fdbc 	bl	80009b0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <_SendPacket+0x2d4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8000e3e:	bf00      	nop
 8000e40:	3728      	adds	r7, #40	; 0x28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000a94 	.word	0x20000a94
 8000e4c:	200001d4 	.word	0x200001d4

08000e50 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b0a2      	sub	sp, #136	; 0x88
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
#endif
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 8000e66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e68:	1c5a      	adds	r2, r3, #1
 8000e6a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 8000e72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d01d      	beq.n	8000eb6 <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 8000e7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000e7e:	2b25      	cmp	r3, #37	; 0x25
 8000e80:	d1f1      	bne.n	8000e66 <_VPrintHost+0x16>
      c = *p;
 8000e82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = (U32)(va_arg(*pParamList, int));
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	1d19      	adds	r1, r3, #4
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	6011      	str	r1, [r2, #0]
 8000e94:	6819      	ldr	r1, [r3, #0]
 8000e96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000e9a:	1c5a      	adds	r2, r3, #1
 8000e9c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8000ea0:	460a      	mov	r2, r1
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	3388      	adds	r3, #136	; 0x88
 8000ea6:	443b      	add	r3, r7
 8000ea8:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 8000eac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000eb0:	2b10      	cmp	r3, #16
 8000eb2:	d002      	beq.n	8000eba <_VPrintHost+0x6a>
    c = *p++;
 8000eb4:	e7d7      	b.n	8000e66 <_VPrintHost+0x16>
      break;
 8000eb6:	bf00      	nop
 8000eb8:	e000      	b.n	8000ebc <_VPrintHost+0x6c>
        break;
 8000eba:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 8000ebc:	f3ef 8311 	mrs	r3, BASEPRI
 8000ec0:	f04f 0120 	mov.w	r1, #32
 8000ec4:	f381 8811 	msr	BASEPRI, r1
 8000ec8:	65bb      	str	r3, [r7, #88]	; 0x58
 8000eca:	483f      	ldr	r0, [pc, #252]	; (8000fc8 <_VPrintHost+0x178>)
 8000ecc:	f7ff fd64 	bl	8000998 <_PreparePacket>
 8000ed0:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8000ed2:	2280      	movs	r2, #128	; 0x80
 8000ed4:	68f9      	ldr	r1, [r7, #12]
 8000ed6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000ed8:	f7ff fd2e 	bl	8000938 <_EncodeStr>
 8000edc:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 8000ede:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ee0:	677b      	str	r3, [r7, #116]	; 0x74
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	673b      	str	r3, [r7, #112]	; 0x70
 8000ee6:	e00b      	b.n	8000f00 <_VPrintHost+0xb0>
 8000ee8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000eee:	1c59      	adds	r1, r3, #1
 8000ef0:	6779      	str	r1, [r7, #116]	; 0x74
 8000ef2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	701a      	strb	r2, [r3, #0]
 8000efa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000efc:	09db      	lsrs	r3, r3, #7
 8000efe:	673b      	str	r3, [r7, #112]	; 0x70
 8000f00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f02:	2b7f      	cmp	r3, #127	; 0x7f
 8000f04:	d8f0      	bhi.n	8000ee8 <_VPrintHost+0x98>
 8000f06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f08:	1c5a      	adds	r2, r3, #1
 8000f0a:	677a      	str	r2, [r7, #116]	; 0x74
 8000f0c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	701a      	strb	r2, [r3, #0]
 8000f12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f14:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 8000f16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000f1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000f1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f20:	e00b      	b.n	8000f3a <_VPrintHost+0xea>
 8000f22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f28:	1c59      	adds	r1, r3, #1
 8000f2a:	66f9      	str	r1, [r7, #108]	; 0x6c
 8000f2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	701a      	strb	r2, [r3, #0]
 8000f34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f36:	09db      	lsrs	r3, r3, #7
 8000f38:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f3c:	2b7f      	cmp	r3, #127	; 0x7f
 8000f3e:	d8f0      	bhi.n	8000f22 <_VPrintHost+0xd2>
 8000f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f42:	1c5a      	adds	r2, r3, #1
 8000f44:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000f46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	701a      	strb	r2, [r3, #0]
 8000f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f4e:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8000f58:	e022      	b.n	8000fa0 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 8000f5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f5c:	667b      	str	r3, [r7, #100]	; 0x64
 8000f5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	663b      	str	r3, [r7, #96]	; 0x60
 8000f66:	e00b      	b.n	8000f80 <_VPrintHost+0x130>
 8000f68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f6e:	1c59      	adds	r1, r3, #1
 8000f70:	6679      	str	r1, [r7, #100]	; 0x64
 8000f72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	701a      	strb	r2, [r3, #0]
 8000f7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f7c:	09db      	lsrs	r3, r3, #7
 8000f7e:	663b      	str	r3, [r7, #96]	; 0x60
 8000f80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f82:	2b7f      	cmp	r3, #127	; 0x7f
 8000f84:	d8f0      	bhi.n	8000f68 <_VPrintHost+0x118>
 8000f86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f88:	1c5a      	adds	r2, r3, #1
 8000f8a:	667a      	str	r2, [r7, #100]	; 0x64
 8000f8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	701a      	strb	r2, [r3, #0]
 8000f92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f94:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 8000f96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f9a:	3304      	adds	r3, #4
 8000f9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8000fa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000fa4:	1e5a      	subs	r2, r3, #1
 8000fa6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d1d5      	bne.n	8000f5a <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8000fae:	221a      	movs	r2, #26
 8000fb0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000fb2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000fb4:	f7ff fdde 	bl	8000b74 <_SendPacket>
    RECORD_END();
 8000fb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000fba:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 8000fbe:	2300      	movs	r3, #0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3788      	adds	r7, #136	; 0x88
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000ac4 	.word	0x20000ac4

08000fcc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af02      	add	r7, sp, #8
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
 8000fd8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fe0:	4917      	ldr	r1, [pc, #92]	; (8001040 <SEGGER_SYSVIEW_Init+0x74>)
 8000fe2:	4818      	ldr	r0, [pc, #96]	; (8001044 <SEGGER_SYSVIEW_Init+0x78>)
 8000fe4:	f7ff fbd8 	bl	8000798 <SEGGER_RTT_AllocUpBuffer>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	4b16      	ldr	r3, [pc, #88]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8000fee:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8000ff2:	785a      	ldrb	r2, [r3, #1]
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8000ff6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8000ff8:	4b13      	ldr	r3, [pc, #76]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8000ffa:	7e1b      	ldrb	r3, [r3, #24]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	2300      	movs	r3, #0
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2308      	movs	r3, #8
 8001004:	4a11      	ldr	r2, [pc, #68]	; (800104c <SEGGER_SYSVIEW_Init+0x80>)
 8001006:	490f      	ldr	r1, [pc, #60]	; (8001044 <SEGGER_SYSVIEW_Init+0x78>)
 8001008:	f7ff fc4a 	bl	80008a0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <SEGGER_SYSVIEW_Init+0x84>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a0c      	ldr	r2, [pc, #48]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8001018:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800101a:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8001020:	4a09      	ldr	r2, [pc, #36]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8001026:	4a08      	ldr	r2, [pc, #32]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800102c:	4a06      	ldr	r2, [pc, #24]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8001032:	4b05      	ldr	r3, [pc, #20]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	2000068c 	.word	0x2000068c
 8001044:	0800b4b4 	.word	0x0800b4b4
 8001048:	20000a94 	.word	0x20000a94
 800104c:	20000a8c 	.word	0x20000a8c
 8001050:	e0001004 	.word	0xe0001004

08001054 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800105c:	4a04      	ldr	r2, [pc, #16]	; (8001070 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6113      	str	r3, [r2, #16]
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000a94 	.word	0x20000a94

08001074 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800107c:	f3ef 8311 	mrs	r3, BASEPRI
 8001080:	f04f 0120 	mov.w	r1, #32
 8001084:	f381 8811 	msr	BASEPRI, r1
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	4808      	ldr	r0, [pc, #32]	; (80010ac <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800108c:	f7ff fc84 	bl	8000998 <_PreparePacket>
 8001090:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	68b9      	ldr	r1, [r7, #8]
 8001096:	68b8      	ldr	r0, [r7, #8]
 8001098:	f7ff fd6c 	bl	8000b74 <_SendPacket>
  RECORD_END();
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f383 8811 	msr	BASEPRI, r3
}
 80010a2:	bf00      	nop
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000ac4 	.word	0x20000ac4

080010b0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80010ba:	f3ef 8311 	mrs	r3, BASEPRI
 80010be:	f04f 0120 	mov.w	r1, #32
 80010c2:	f381 8811 	msr	BASEPRI, r1
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	4816      	ldr	r0, [pc, #88]	; (8001124 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80010ca:	f7ff fc65 	bl	8000998 <_PreparePacket>
 80010ce:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	61fb      	str	r3, [r7, #28]
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	61bb      	str	r3, [r7, #24]
 80010dc:	e00b      	b.n	80010f6 <SEGGER_SYSVIEW_RecordU32+0x46>
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	1c59      	adds	r1, r3, #1
 80010e6:	61f9      	str	r1, [r7, #28]
 80010e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	701a      	strb	r2, [r3, #0]
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	09db      	lsrs	r3, r3, #7
 80010f4:	61bb      	str	r3, [r7, #24]
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	2b7f      	cmp	r3, #127	; 0x7f
 80010fa:	d8f0      	bhi.n	80010de <SEGGER_SYSVIEW_RecordU32+0x2e>
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	1c5a      	adds	r2, r3, #1
 8001100:	61fa      	str	r2, [r7, #28]
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	701a      	strb	r2, [r3, #0]
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	68f9      	ldr	r1, [r7, #12]
 8001110:	6938      	ldr	r0, [r7, #16]
 8001112:	f7ff fd2f 	bl	8000b74 <_SendPacket>
  RECORD_END();
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	f383 8811 	msr	BASEPRI, r3
}
 800111c:	bf00      	nop
 800111e:	3720      	adds	r7, #32
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000ac4 	.word	0x20000ac4

08001128 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b08c      	sub	sp, #48	; 0x30
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8001134:	f3ef 8311 	mrs	r3, BASEPRI
 8001138:	f04f 0120 	mov.w	r1, #32
 800113c:	f381 8811 	msr	BASEPRI, r1
 8001140:	61fb      	str	r3, [r7, #28]
 8001142:	4825      	ldr	r0, [pc, #148]	; (80011d8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8001144:	f7ff fc28 	bl	8000998 <_PreparePacket>
 8001148:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	62bb      	str	r3, [r7, #40]	; 0x28
 8001156:	e00b      	b.n	8001170 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8001158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115a:	b2da      	uxtb	r2, r3
 800115c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800115e:	1c59      	adds	r1, r3, #1
 8001160:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001162:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	701a      	strb	r2, [r3, #0]
 800116a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116c:	09db      	lsrs	r3, r3, #7
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001172:	2b7f      	cmp	r3, #127	; 0x7f
 8001174:	d8f0      	bhi.n	8001158 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8001176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001178:	1c5a      	adds	r2, r3, #1
 800117a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800117c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	701a      	strb	r2, [r3, #0]
 8001182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001184:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	623b      	str	r3, [r7, #32]
 800118e:	e00b      	b.n	80011a8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8001190:	6a3b      	ldr	r3, [r7, #32]
 8001192:	b2da      	uxtb	r2, r3
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	1c59      	adds	r1, r3, #1
 8001198:	6279      	str	r1, [r7, #36]	; 0x24
 800119a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	701a      	strb	r2, [r3, #0]
 80011a2:	6a3b      	ldr	r3, [r7, #32]
 80011a4:	09db      	lsrs	r3, r3, #7
 80011a6:	623b      	str	r3, [r7, #32]
 80011a8:	6a3b      	ldr	r3, [r7, #32]
 80011aa:	2b7f      	cmp	r3, #127	; 0x7f
 80011ac:	d8f0      	bhi.n	8001190 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	1c5a      	adds	r2, r3, #1
 80011b2:	627a      	str	r2, [r7, #36]	; 0x24
 80011b4:	6a3a      	ldr	r2, [r7, #32]
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	701a      	strb	r2, [r3, #0]
 80011ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011bc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	6979      	ldr	r1, [r7, #20]
 80011c2:	69b8      	ldr	r0, [r7, #24]
 80011c4:	f7ff fcd6 	bl	8000b74 <_SendPacket>
  RECORD_END();
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f383 8811 	msr	BASEPRI, r3
}
 80011ce:	bf00      	nop
 80011d0:	3730      	adds	r7, #48	; 0x30
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000ac4 	.word	0x20000ac4

080011dc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08c      	sub	sp, #48	; 0x30
 80011e0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80011e2:	4b58      	ldr	r3, [pc, #352]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80011e8:	f3ef 8311 	mrs	r3, BASEPRI
 80011ec:	f04f 0120 	mov.w	r1, #32
 80011f0:	f381 8811 	msr	BASEPRI, r1
 80011f4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80011f6:	4b53      	ldr	r3, [pc, #332]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 80011f8:	785b      	ldrb	r3, [r3, #1]
 80011fa:	220a      	movs	r2, #10
 80011fc:	4952      	ldr	r1, [pc, #328]	; (8001348 <SEGGER_SYSVIEW_Start+0x16c>)
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f81e 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800120a:	200a      	movs	r0, #10
 800120c:	f7ff ff32 	bl	8001074 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001210:	f3ef 8311 	mrs	r3, BASEPRI
 8001214:	f04f 0120 	mov.w	r1, #32
 8001218:	f381 8811 	msr	BASEPRI, r1
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	484b      	ldr	r0, [pc, #300]	; (800134c <SEGGER_SYSVIEW_Start+0x170>)
 8001220:	f7ff fbba 	bl	8000998 <_PreparePacket>
 8001224:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800122e:	4b45      	ldr	r3, [pc, #276]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28
 8001234:	e00b      	b.n	800124e <SEGGER_SYSVIEW_Start+0x72>
 8001236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001238:	b2da      	uxtb	r2, r3
 800123a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800123c:	1c59      	adds	r1, r3, #1
 800123e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001240:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	701a      	strb	r2, [r3, #0]
 8001248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800124a:	09db      	lsrs	r3, r3, #7
 800124c:	62bb      	str	r3, [r7, #40]	; 0x28
 800124e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001250:	2b7f      	cmp	r3, #127	; 0x7f
 8001252:	d8f0      	bhi.n	8001236 <SEGGER_SYSVIEW_Start+0x5a>
 8001254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001256:	1c5a      	adds	r2, r3, #1
 8001258:	62fa      	str	r2, [r7, #44]	; 0x2c
 800125a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	701a      	strb	r2, [r3, #0]
 8001260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001262:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
 8001268:	4b36      	ldr	r3, [pc, #216]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	623b      	str	r3, [r7, #32]
 800126e:	e00b      	b.n	8001288 <SEGGER_SYSVIEW_Start+0xac>
 8001270:	6a3b      	ldr	r3, [r7, #32]
 8001272:	b2da      	uxtb	r2, r3
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001276:	1c59      	adds	r1, r3, #1
 8001278:	6279      	str	r1, [r7, #36]	; 0x24
 800127a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800127e:	b2d2      	uxtb	r2, r2
 8001280:	701a      	strb	r2, [r3, #0]
 8001282:	6a3b      	ldr	r3, [r7, #32]
 8001284:	09db      	lsrs	r3, r3, #7
 8001286:	623b      	str	r3, [r7, #32]
 8001288:	6a3b      	ldr	r3, [r7, #32]
 800128a:	2b7f      	cmp	r3, #127	; 0x7f
 800128c:	d8f0      	bhi.n	8001270 <SEGGER_SYSVIEW_Start+0x94>
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	1c5a      	adds	r2, r3, #1
 8001292:	627a      	str	r2, [r7, #36]	; 0x24
 8001294:	6a3a      	ldr	r2, [r7, #32]
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	701a      	strb	r2, [r3, #0]
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	61fb      	str	r3, [r7, #28]
 80012a2:	4b28      	ldr	r3, [pc, #160]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 80012a4:	691b      	ldr	r3, [r3, #16]
 80012a6:	61bb      	str	r3, [r7, #24]
 80012a8:	e00b      	b.n	80012c2 <SEGGER_SYSVIEW_Start+0xe6>
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	1c59      	adds	r1, r3, #1
 80012b2:	61f9      	str	r1, [r7, #28]
 80012b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	701a      	strb	r2, [r3, #0]
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	09db      	lsrs	r3, r3, #7
 80012c0:	61bb      	str	r3, [r7, #24]
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	2b7f      	cmp	r3, #127	; 0x7f
 80012c6:	d8f0      	bhi.n	80012aa <SEGGER_SYSVIEW_Start+0xce>
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	1c5a      	adds	r2, r3, #1
 80012cc:	61fa      	str	r2, [r7, #28]
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	701a      	strb	r2, [r3, #0]
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	2300      	movs	r3, #0
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	e00b      	b.n	80012fa <SEGGER_SYSVIEW_Start+0x11e>
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	1c59      	adds	r1, r3, #1
 80012ea:	6179      	str	r1, [r7, #20]
 80012ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	701a      	strb	r2, [r3, #0]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	09db      	lsrs	r3, r3, #7
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	2b7f      	cmp	r3, #127	; 0x7f
 80012fe:	d8f0      	bhi.n	80012e2 <SEGGER_SYSVIEW_Start+0x106>
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	1c5a      	adds	r2, r3, #1
 8001304:	617a      	str	r2, [r7, #20]
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	701a      	strb	r2, [r3, #0]
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8001310:	2218      	movs	r2, #24
 8001312:	6839      	ldr	r1, [r7, #0]
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff fc2d 	bl	8000b74 <_SendPacket>
      RECORD_END();
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 8001322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001324:	2b00      	cmp	r3, #0
 8001326:	d002      	beq.n	800132e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 800132a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800132e:	f000 f9eb 	bl	8001708 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8001332:	f000 f9b1 	bl	8001698 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8001336:	f000 fb1f 	bl	8001978 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800133a:	bf00      	nop
 800133c:	3730      	adds	r7, #48	; 0x30
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000a94 	.word	0x20000a94
 8001348:	0800b590 	.word	0x0800b590
 800134c:	20000ac4 	.word	0x20000ac4

08001350 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8001356:	f3ef 8311 	mrs	r3, BASEPRI
 800135a:	f04f 0120 	mov.w	r1, #32
 800135e:	f381 8811 	msr	BASEPRI, r1
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	480b      	ldr	r0, [pc, #44]	; (8001394 <SEGGER_SYSVIEW_Stop+0x44>)
 8001366:	f7ff fb17 	bl	8000998 <_PreparePacket>
 800136a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800136c:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <SEGGER_SYSVIEW_Stop+0x48>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d007      	beq.n	8001384 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8001374:	220b      	movs	r2, #11
 8001376:	6839      	ldr	r1, [r7, #0]
 8001378:	6838      	ldr	r0, [r7, #0]
 800137a:	f7ff fbfb 	bl	8000b74 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <SEGGER_SYSVIEW_Stop+0x48>)
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f383 8811 	msr	BASEPRI, r3
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000ac4 	.word	0x20000ac4
 8001398:	20000a94 	.word	0x20000a94

0800139c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b08c      	sub	sp, #48	; 0x30
 80013a0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80013a2:	f3ef 8311 	mrs	r3, BASEPRI
 80013a6:	f04f 0120 	mov.w	r1, #32
 80013aa:	f381 8811 	msr	BASEPRI, r1
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	4845      	ldr	r0, [pc, #276]	; (80014c8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80013b2:	f7ff faf1 	bl	8000998 <_PreparePacket>
 80013b6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013c0:	4b42      	ldr	r3, [pc, #264]	; (80014cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80013c6:	e00b      	b.n	80013e0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80013c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ce:	1c59      	adds	r1, r3, #1
 80013d0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80013d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	701a      	strb	r2, [r3, #0]
 80013da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013dc:	09db      	lsrs	r3, r3, #7
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28
 80013e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e2:	2b7f      	cmp	r3, #127	; 0x7f
 80013e4:	d8f0      	bhi.n	80013c8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80013e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e8:	1c5a      	adds	r2, r3, #1
 80013ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80013ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	701a      	strb	r2, [r3, #0]
 80013f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
 80013fa:	4b34      	ldr	r3, [pc, #208]	; (80014cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	623b      	str	r3, [r7, #32]
 8001400:	e00b      	b.n	800141a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	b2da      	uxtb	r2, r3
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	1c59      	adds	r1, r3, #1
 800140a:	6279      	str	r1, [r7, #36]	; 0x24
 800140c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001410:	b2d2      	uxtb	r2, r2
 8001412:	701a      	strb	r2, [r3, #0]
 8001414:	6a3b      	ldr	r3, [r7, #32]
 8001416:	09db      	lsrs	r3, r3, #7
 8001418:	623b      	str	r3, [r7, #32]
 800141a:	6a3b      	ldr	r3, [r7, #32]
 800141c:	2b7f      	cmp	r3, #127	; 0x7f
 800141e:	d8f0      	bhi.n	8001402 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	1c5a      	adds	r2, r3, #1
 8001424:	627a      	str	r2, [r7, #36]	; 0x24
 8001426:	6a3a      	ldr	r2, [r7, #32]
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	701a      	strb	r2, [r3, #0]
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	61fb      	str	r3, [r7, #28]
 8001434:	4b25      	ldr	r3, [pc, #148]	; (80014cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	61bb      	str	r3, [r7, #24]
 800143a:	e00b      	b.n	8001454 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	b2da      	uxtb	r2, r3
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	1c59      	adds	r1, r3, #1
 8001444:	61f9      	str	r1, [r7, #28]
 8001446:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	701a      	strb	r2, [r3, #0]
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	09db      	lsrs	r3, r3, #7
 8001452:	61bb      	str	r3, [r7, #24]
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	2b7f      	cmp	r3, #127	; 0x7f
 8001458:	d8f0      	bhi.n	800143c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	1c5a      	adds	r2, r3, #1
 800145e:	61fa      	str	r2, [r7, #28]
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	701a      	strb	r2, [r3, #0]
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	617b      	str	r3, [r7, #20]
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	e00b      	b.n	800148c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	b2da      	uxtb	r2, r3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	1c59      	adds	r1, r3, #1
 800147c:	6179      	str	r1, [r7, #20]
 800147e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	701a      	strb	r2, [r3, #0]
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	09db      	lsrs	r3, r3, #7
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	2b7f      	cmp	r3, #127	; 0x7f
 8001490:	d8f0      	bhi.n	8001474 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	1c5a      	adds	r2, r3, #1
 8001496:	617a      	str	r2, [r7, #20]
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	701a      	strb	r2, [r3, #0]
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80014a2:	2218      	movs	r2, #24
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	68b8      	ldr	r0, [r7, #8]
 80014a8:	f7ff fb64 	bl	8000b74 <_SendPacket>
  RECORD_END();
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80014b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d002      	beq.n	80014c0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80014ba:	4b04      	ldr	r3, [pc, #16]	; (80014cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80014bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014be:	4798      	blx	r3
  }
}
 80014c0:	bf00      	nop
 80014c2:	3730      	adds	r7, #48	; 0x30
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000ac4 	.word	0x20000ac4
 80014cc:	20000a94 	.word	0x20000a94

080014d0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b092      	sub	sp, #72	; 0x48
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80014d8:	f3ef 8311 	mrs	r3, BASEPRI
 80014dc:	f04f 0120 	mov.w	r1, #32
 80014e0:	f381 8811 	msr	BASEPRI, r1
 80014e4:	617b      	str	r3, [r7, #20]
 80014e6:	486a      	ldr	r0, [pc, #424]	; (8001690 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80014e8:	f7ff fa56 	bl	8000998 <_PreparePacket>
 80014ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	647b      	str	r3, [r7, #68]	; 0x44
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	4b66      	ldr	r3, [pc, #408]	; (8001694 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	643b      	str	r3, [r7, #64]	; 0x40
 8001502:	e00b      	b.n	800151c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8001504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001506:	b2da      	uxtb	r2, r3
 8001508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800150a:	1c59      	adds	r1, r3, #1
 800150c:	6479      	str	r1, [r7, #68]	; 0x44
 800150e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	701a      	strb	r2, [r3, #0]
 8001516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001518:	09db      	lsrs	r3, r3, #7
 800151a:	643b      	str	r3, [r7, #64]	; 0x40
 800151c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800151e:	2b7f      	cmp	r3, #127	; 0x7f
 8001520:	d8f0      	bhi.n	8001504 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8001522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	647a      	str	r2, [r7, #68]	; 0x44
 8001528:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	701a      	strb	r2, [r3, #0]
 800152e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001530:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	63bb      	str	r3, [r7, #56]	; 0x38
 800153c:	e00b      	b.n	8001556 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800153e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001540:	b2da      	uxtb	r2, r3
 8001542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001544:	1c59      	adds	r1, r3, #1
 8001546:	63f9      	str	r1, [r7, #60]	; 0x3c
 8001548:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	701a      	strb	r2, [r3, #0]
 8001550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001552:	09db      	lsrs	r3, r3, #7
 8001554:	63bb      	str	r3, [r7, #56]	; 0x38
 8001556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001558:	2b7f      	cmp	r3, #127	; 0x7f
 800155a:	d8f0      	bhi.n	800153e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800155c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001562:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	701a      	strb	r2, [r3, #0]
 8001568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800156a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2220      	movs	r2, #32
 8001572:	4619      	mov	r1, r3
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	f7ff f9df 	bl	8000938 <_EncodeStr>
 800157a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800157c:	2209      	movs	r2, #9
 800157e:	68f9      	ldr	r1, [r7, #12]
 8001580:	6938      	ldr	r0, [r7, #16]
 8001582:	f7ff faf7 	bl	8000b74 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	637b      	str	r3, [r7, #52]	; 0x34
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	4b40      	ldr	r3, [pc, #256]	; (8001694 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	633b      	str	r3, [r7, #48]	; 0x30
 800159a:	e00b      	b.n	80015b4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800159c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015a2:	1c59      	adds	r1, r3, #1
 80015a4:	6379      	str	r1, [r7, #52]	; 0x34
 80015a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	701a      	strb	r2, [r3, #0]
 80015ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b0:	09db      	lsrs	r3, r3, #7
 80015b2:	633b      	str	r3, [r7, #48]	; 0x30
 80015b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b6:	2b7f      	cmp	r3, #127	; 0x7f
 80015b8:	d8f0      	bhi.n	800159c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80015ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015bc:	1c5a      	adds	r2, r3, #1
 80015be:	637a      	str	r2, [r7, #52]	; 0x34
 80015c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	701a      	strb	r2, [r3, #0]
 80015c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80015d4:	e00b      	b.n	80015ee <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80015d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015dc:	1c59      	adds	r1, r3, #1
 80015de:	62f9      	str	r1, [r7, #44]	; 0x2c
 80015e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	701a      	strb	r2, [r3, #0]
 80015e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ea:	09db      	lsrs	r3, r3, #7
 80015ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80015ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f0:	2b7f      	cmp	r3, #127	; 0x7f
 80015f2:	d8f0      	bhi.n	80015d6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80015f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f6:	1c5a      	adds	r2, r3, #1
 80015f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80015fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	701a      	strb	r2, [r3, #0]
 8001600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001602:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	623b      	str	r3, [r7, #32]
 800160e:	e00b      	b.n	8001628 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8001610:	6a3b      	ldr	r3, [r7, #32]
 8001612:	b2da      	uxtb	r2, r3
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	1c59      	adds	r1, r3, #1
 8001618:	6279      	str	r1, [r7, #36]	; 0x24
 800161a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	701a      	strb	r2, [r3, #0]
 8001622:	6a3b      	ldr	r3, [r7, #32]
 8001624:	09db      	lsrs	r3, r3, #7
 8001626:	623b      	str	r3, [r7, #32]
 8001628:	6a3b      	ldr	r3, [r7, #32]
 800162a:	2b7f      	cmp	r3, #127	; 0x7f
 800162c:	d8f0      	bhi.n	8001610 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	1c5a      	adds	r2, r3, #1
 8001632:	627a      	str	r2, [r7, #36]	; 0x24
 8001634:	6a3a      	ldr	r2, [r7, #32]
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	701a      	strb	r2, [r3, #0]
 800163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	61fb      	str	r3, [r7, #28]
 8001642:	2300      	movs	r3, #0
 8001644:	61bb      	str	r3, [r7, #24]
 8001646:	e00b      	b.n	8001660 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	b2da      	uxtb	r2, r3
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	1c59      	adds	r1, r3, #1
 8001650:	61f9      	str	r1, [r7, #28]
 8001652:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	701a      	strb	r2, [r3, #0]
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	09db      	lsrs	r3, r3, #7
 800165e:	61bb      	str	r3, [r7, #24]
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	2b7f      	cmp	r3, #127	; 0x7f
 8001664:	d8f0      	bhi.n	8001648 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	1c5a      	adds	r2, r3, #1
 800166a:	61fa      	str	r2, [r7, #28]
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	701a      	strb	r2, [r3, #0]
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8001676:	2215      	movs	r2, #21
 8001678:	68f9      	ldr	r1, [r7, #12]
 800167a:	6938      	ldr	r0, [r7, #16]
 800167c:	f7ff fa7a 	bl	8000b74 <_SendPacket>
  RECORD_END();
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	f383 8811 	msr	BASEPRI, r3
}
 8001686:	bf00      	nop
 8001688:	3748      	adds	r7, #72	; 0x48
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000ac4 	.word	0x20000ac4
 8001694:	20000a94 	.word	0x20000a94

08001698 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800169c:	4b07      	ldr	r3, [pc, #28]	; (80016bc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d008      	beq.n	80016b6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80016a4:	4b05      	ldr	r3, [pc, #20]	; (80016bc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80016ae:	4b03      	ldr	r3, [pc, #12]	; (80016bc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	4798      	blx	r3
  }
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000a94 	.word	0x20000a94

080016c0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80016c8:	f3ef 8311 	mrs	r3, BASEPRI
 80016cc:	f04f 0120 	mov.w	r1, #32
 80016d0:	f381 8811 	msr	BASEPRI, r1
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	480b      	ldr	r0, [pc, #44]	; (8001704 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80016d8:	f7ff f95e 	bl	8000998 <_PreparePacket>
 80016dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80016de:	2280      	movs	r2, #128	; 0x80
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	6938      	ldr	r0, [r7, #16]
 80016e4:	f7ff f928 	bl	8000938 <_EncodeStr>
 80016e8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80016ea:	220e      	movs	r2, #14
 80016ec:	68f9      	ldr	r1, [r7, #12]
 80016ee:	6938      	ldr	r0, [r7, #16]
 80016f0:	f7ff fa40 	bl	8000b74 <_SendPacket>
  RECORD_END();
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	f383 8811 	msr	BASEPRI, r3
}
 80016fa:	bf00      	nop
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000ac4 	.word	0x20000ac4

08001708 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d01a      	beq.n	800174c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8001716:	4b13      	ldr	r3, [pc, #76]	; (8001764 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d015      	beq.n	800174c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8001720:	4b10      	ldr	r3, [pc, #64]	; (8001764 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4798      	blx	r3
 8001728:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800172c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800172e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	000a      	movs	r2, r1
 800173c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800173e:	4613      	mov	r3, r2
 8001740:	461a      	mov	r2, r3
 8001742:	4621      	mov	r1, r4
 8001744:	200d      	movs	r0, #13
 8001746:	f7ff fcef 	bl	8001128 <SEGGER_SYSVIEW_RecordU32x2>
 800174a:	e006      	b.n	800175a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4619      	mov	r1, r3
 8001752:	200c      	movs	r0, #12
 8001754:	f7ff fcac 	bl	80010b0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8001758:	bf00      	nop
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	bd90      	pop	{r4, r7, pc}
 8001762:	bf00      	nop
 8001764:	20000a94 	.word	0x20000a94
 8001768:	e0001004 	.word	0xe0001004

0800176c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8001772:	f3ef 8311 	mrs	r3, BASEPRI
 8001776:	f04f 0120 	mov.w	r1, #32
 800177a:	f381 8811 	msr	BASEPRI, r1
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	4819      	ldr	r0, [pc, #100]	; (80017e8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8001782:	f7ff f909 	bl	8000998 <_PreparePacket>
 8001786:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800178c:	4b17      	ldr	r3, [pc, #92]	; (80017ec <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001794:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	617b      	str	r3, [r7, #20]
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	e00b      	b.n	80017b8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	1c59      	adds	r1, r3, #1
 80017a8:	6179      	str	r1, [r7, #20]
 80017aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	701a      	strb	r2, [r3, #0]
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	09db      	lsrs	r3, r3, #7
 80017b6:	613b      	str	r3, [r7, #16]
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	2b7f      	cmp	r3, #127	; 0x7f
 80017bc:	d8f0      	bhi.n	80017a0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	1c5a      	adds	r2, r3, #1
 80017c2:	617a      	str	r2, [r7, #20]
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	701a      	strb	r2, [r3, #0]
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80017ce:	2202      	movs	r2, #2
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	68b8      	ldr	r0, [r7, #8]
 80017d4:	f7ff f9ce 	bl	8000b74 <_SendPacket>
  RECORD_END();
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f383 8811 	msr	BASEPRI, r3
}
 80017de:	bf00      	nop
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000ac4 	.word	0x20000ac4
 80017ec:	e000ed04 	.word	0xe000ed04

080017f0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80017f6:	f3ef 8311 	mrs	r3, BASEPRI
 80017fa:	f04f 0120 	mov.w	r1, #32
 80017fe:	f381 8811 	msr	BASEPRI, r1
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	4807      	ldr	r0, [pc, #28]	; (8001824 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8001806:	f7ff f8c7 	bl	8000998 <_PreparePacket>
 800180a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800180c:	2203      	movs	r2, #3
 800180e:	6839      	ldr	r1, [r7, #0]
 8001810:	6838      	ldr	r0, [r7, #0]
 8001812:	f7ff f9af 	bl	8000b74 <_SendPacket>
  RECORD_END();
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f383 8811 	msr	BASEPRI, r3
}
 800181c:	bf00      	nop
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000ac4 	.word	0x20000ac4

08001828 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b08c      	sub	sp, #48	; 0x30
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8001832:	4b40      	ldr	r3, [pc, #256]	; (8001934 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d077      	beq.n	800192a <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800183a:	4b3e      	ldr	r3, [pc, #248]	; (8001934 <SEGGER_SYSVIEW_SendModule+0x10c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8001840:	2300      	movs	r3, #0
 8001842:	62bb      	str	r3, [r7, #40]	; 0x28
 8001844:	e008      	b.n	8001858 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8001846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184e:	2b00      	cmp	r3, #0
 8001850:	d007      	beq.n	8001862 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8001852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001854:	3301      	adds	r3, #1
 8001856:	62bb      	str	r3, [r7, #40]	; 0x28
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800185c:	429a      	cmp	r2, r3
 800185e:	d3f2      	bcc.n	8001846 <SEGGER_SYSVIEW_SendModule+0x1e>
 8001860:	e000      	b.n	8001864 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8001862:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8001864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001866:	2b00      	cmp	r3, #0
 8001868:	d055      	beq.n	8001916 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800186a:	f3ef 8311 	mrs	r3, BASEPRI
 800186e:	f04f 0120 	mov.w	r1, #32
 8001872:	f381 8811 	msr	BASEPRI, r1
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	482f      	ldr	r0, [pc, #188]	; (8001938 <SEGGER_SYSVIEW_SendModule+0x110>)
 800187a:	f7ff f88d 	bl	8000998 <_PreparePacket>
 800187e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	623b      	str	r3, [r7, #32]
 800188c:	e00b      	b.n	80018a6 <SEGGER_SYSVIEW_SendModule+0x7e>
 800188e:	6a3b      	ldr	r3, [r7, #32]
 8001890:	b2da      	uxtb	r2, r3
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	1c59      	adds	r1, r3, #1
 8001896:	6279      	str	r1, [r7, #36]	; 0x24
 8001898:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	701a      	strb	r2, [r3, #0]
 80018a0:	6a3b      	ldr	r3, [r7, #32]
 80018a2:	09db      	lsrs	r3, r3, #7
 80018a4:	623b      	str	r3, [r7, #32]
 80018a6:	6a3b      	ldr	r3, [r7, #32]
 80018a8:	2b7f      	cmp	r3, #127	; 0x7f
 80018aa:	d8f0      	bhi.n	800188e <SEGGER_SYSVIEW_SendModule+0x66>
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	1c5a      	adds	r2, r3, #1
 80018b0:	627a      	str	r2, [r7, #36]	; 0x24
 80018b2:	6a3a      	ldr	r2, [r7, #32]
 80018b4:	b2d2      	uxtb	r2, r2
 80018b6:	701a      	strb	r2, [r3, #0]
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	61fb      	str	r3, [r7, #28]
 80018c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	61bb      	str	r3, [r7, #24]
 80018c6:	e00b      	b.n	80018e0 <SEGGER_SYSVIEW_SendModule+0xb8>
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	1c59      	adds	r1, r3, #1
 80018d0:	61f9      	str	r1, [r7, #28]
 80018d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	701a      	strb	r2, [r3, #0]
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	09db      	lsrs	r3, r3, #7
 80018de:	61bb      	str	r3, [r7, #24]
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	2b7f      	cmp	r3, #127	; 0x7f
 80018e4:	d8f0      	bhi.n	80018c8 <SEGGER_SYSVIEW_SendModule+0xa0>
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	1c5a      	adds	r2, r3, #1
 80018ea:	61fa      	str	r2, [r7, #28]
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	701a      	strb	r2, [r3, #0]
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80018f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2280      	movs	r2, #128	; 0x80
 80018fc:	4619      	mov	r1, r3
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	f7ff f81a 	bl	8000938 <_EncodeStr>
 8001904:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8001906:	2216      	movs	r2, #22
 8001908:	68f9      	ldr	r1, [r7, #12]
 800190a:	6938      	ldr	r0, [r7, #16]
 800190c:	f7ff f932 	bl	8000b74 <_SendPacket>
      RECORD_END();
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8001916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001918:	2b00      	cmp	r3, #0
 800191a:	d006      	beq.n	800192a <SEGGER_SYSVIEW_SendModule+0x102>
 800191c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d002      	beq.n	800192a <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8001924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	4798      	blx	r3
    }
  }
}
 800192a:	bf00      	nop
 800192c:	3730      	adds	r7, #48	; 0x30
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000abc 	.word	0x20000abc
 8001938:	20000ac4 	.word	0x20000ac4

0800193c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8001942:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00f      	beq.n	800196a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800194a:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d002      	beq.n	800195e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f2      	bne.n	8001950 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20000abc 	.word	0x20000abc

08001978 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800197e:	f3ef 8311 	mrs	r3, BASEPRI
 8001982:	f04f 0120 	mov.w	r1, #32
 8001986:	f381 8811 	msr	BASEPRI, r1
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	4817      	ldr	r0, [pc, #92]	; (80019ec <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800198e:	f7ff f803 	bl	8000998 <_PreparePacket>
 8001992:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	e00b      	b.n	80019bc <SEGGER_SYSVIEW_SendNumModules+0x44>
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	1c59      	adds	r1, r3, #1
 80019ac:	6179      	str	r1, [r7, #20]
 80019ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	701a      	strb	r2, [r3, #0]
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	09db      	lsrs	r3, r3, #7
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	2b7f      	cmp	r3, #127	; 0x7f
 80019c0:	d8f0      	bhi.n	80019a4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	1c5a      	adds	r2, r3, #1
 80019c6:	617a      	str	r2, [r7, #20]
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	701a      	strb	r2, [r3, #0]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80019d2:	221b      	movs	r2, #27
 80019d4:	6879      	ldr	r1, [r7, #4]
 80019d6:	68b8      	ldr	r0, [r7, #8]
 80019d8:	f7ff f8cc 	bl	8000b74 <_SendPacket>
  RECORD_END();
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f383 8811 	msr	BASEPRI, r3
}
 80019e2:	bf00      	nop
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000ac4 	.word	0x20000ac4
 80019f0:	20000ac0 	.word	0x20000ac0

080019f4 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 80019f4:	b40f      	push	{r0, r1, r2, r3}
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	461a      	mov	r2, r3
 8001a06:	2100      	movs	r1, #0
 8001a08:	6938      	ldr	r0, [r7, #16]
 8001a0a:	f7ff fa21 	bl	8000e50 <_VPrintHost>
  va_end(ParamList);
#endif
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a18:	b004      	add	sp, #16
 8001a1a:	4770      	bx	lr

08001a1c <SEGGER_SYSVIEW_Print>:
*    Print a string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Print(const char* s) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08a      	sub	sp, #40	; 0x28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8001a24:	f3ef 8311 	mrs	r3, BASEPRI
 8001a28:	f04f 0120 	mov.w	r1, #32
 8001a2c:	f381 8811 	msr	BASEPRI, r1
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	4827      	ldr	r0, [pc, #156]	; (8001ad0 <SEGGER_SYSVIEW_Print+0xb4>)
 8001a34:	f7fe ffb0 	bl	8000998 <_PreparePacket>
 8001a38:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8001a3a:	2280      	movs	r2, #128	; 0x80
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	6938      	ldr	r0, [r7, #16]
 8001a40:	f7fe ff7a 	bl	8000938 <_EncodeStr>
 8001a44:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_LOG);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	623b      	str	r3, [r7, #32]
 8001a4e:	e00b      	b.n	8001a68 <SEGGER_SYSVIEW_Print+0x4c>
 8001a50:	6a3b      	ldr	r3, [r7, #32]
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	1c59      	adds	r1, r3, #1
 8001a58:	6279      	str	r1, [r7, #36]	; 0x24
 8001a5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	701a      	strb	r2, [r3, #0]
 8001a62:	6a3b      	ldr	r3, [r7, #32]
 8001a64:	09db      	lsrs	r3, r3, #7
 8001a66:	623b      	str	r3, [r7, #32]
 8001a68:	6a3b      	ldr	r3, [r7, #32]
 8001a6a:	2b7f      	cmp	r3, #127	; 0x7f
 8001a6c:	d8f0      	bhi.n	8001a50 <SEGGER_SYSVIEW_Print+0x34>
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a70:	1c5a      	adds	r2, r3, #1
 8001a72:	627a      	str	r2, [r7, #36]	; 0x24
 8001a74:	6a3a      	ldr	r2, [r7, #32]
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	701a      	strb	r2, [r3, #0]
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	61fb      	str	r3, [r7, #28]
 8001a82:	2300      	movs	r3, #0
 8001a84:	61bb      	str	r3, [r7, #24]
 8001a86:	e00b      	b.n	8001aa0 <SEGGER_SYSVIEW_Print+0x84>
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	1c59      	adds	r1, r3, #1
 8001a90:	61f9      	str	r1, [r7, #28]
 8001a92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	701a      	strb	r2, [r3, #0]
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	09db      	lsrs	r3, r3, #7
 8001a9e:	61bb      	str	r3, [r7, #24]
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	2b7f      	cmp	r3, #127	; 0x7f
 8001aa4:	d8f0      	bhi.n	8001a88 <SEGGER_SYSVIEW_Print+0x6c>
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	1c5a      	adds	r2, r3, #1
 8001aaa:	61fa      	str	r2, [r7, #28]
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	701a      	strb	r2, [r3, #0]
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8001ab6:	221a      	movs	r2, #26
 8001ab8:	68f9      	ldr	r1, [r7, #12]
 8001aba:	6938      	ldr	r0, [r7, #16]
 8001abc:	f7ff f85a 	bl	8000b74 <_SendPacket>
  RECORD_END();
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f383 8811 	msr	BASEPRI, r3
}
 8001ac6:	bf00      	nop
 8001ac8:	3728      	adds	r7, #40	; 0x28
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000ac4 	.word	0x20000ac4

08001ad4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001ad8:	4803      	ldr	r0, [pc, #12]	; (8001ae8 <_cbSendSystemDesc+0x14>)
 8001ada:	f7ff fdf1 	bl	80016c0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001ade:	4803      	ldr	r0, [pc, #12]	; (8001aec <_cbSendSystemDesc+0x18>)
 8001ae0:	f7ff fdee 	bl	80016c0 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	0800b4bc 	.word	0x0800b4bc
 8001aec:	0800b4f0 	.word	0x0800b4f0

08001af0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001af4:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <SEGGER_SYSVIEW_Conf+0x20>)
 8001af6:	6818      	ldr	r0, [r3, #0]
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <SEGGER_SYSVIEW_Conf+0x20>)
 8001afa:	6819      	ldr	r1, [r3, #0]
 8001afc:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <SEGGER_SYSVIEW_Conf+0x24>)
 8001afe:	4a06      	ldr	r2, [pc, #24]	; (8001b18 <SEGGER_SYSVIEW_Conf+0x28>)
 8001b00:	f7ff fa64 	bl	8000fcc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001b04:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001b08:	f7ff faa4 	bl	8001054 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	20000004 	.word	0x20000004
 8001b14:	08001ad5 	.word	0x08001ad5
 8001b18:	0800b59c 	.word	0x0800b59c

08001b1c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001b22:	2300      	movs	r3, #0
 8001b24:	607b      	str	r3, [r7, #4]
 8001b26:	e048      	b.n	8001bba <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8001b28:	4929      	ldr	r1, [pc, #164]	; (8001bd0 <_cbSendTaskList+0xb4>)
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	440b      	add	r3, r1
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f007 ffcd 	bl	8009ad8 <uxTaskGetStackHighWaterMark>
 8001b3e:	4601      	mov	r1, r0
 8001b40:	4823      	ldr	r0, [pc, #140]	; (8001bd0 <_cbSendTaskList+0xb4>)
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	4613      	mov	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4403      	add	r3, r0
 8001b4e:	3310      	adds	r3, #16
 8001b50:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8001b52:	491f      	ldr	r1, [pc, #124]	; (8001bd0 <_cbSendTaskList+0xb4>)
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	4613      	mov	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	440b      	add	r3, r1
 8001b60:	6818      	ldr	r0, [r3, #0]
 8001b62:	491b      	ldr	r1, [pc, #108]	; (8001bd0 <_cbSendTaskList+0xb4>)
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	4613      	mov	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	440b      	add	r3, r1
 8001b70:	3304      	adds	r3, #4
 8001b72:	6819      	ldr	r1, [r3, #0]
 8001b74:	4c16      	ldr	r4, [pc, #88]	; (8001bd0 <_cbSendTaskList+0xb4>)
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4423      	add	r3, r4
 8001b82:	3308      	adds	r3, #8
 8001b84:	681c      	ldr	r4, [r3, #0]
 8001b86:	4d12      	ldr	r5, [pc, #72]	; (8001bd0 <_cbSendTaskList+0xb4>)
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	442b      	add	r3, r5
 8001b94:	330c      	adds	r3, #12
 8001b96:	681d      	ldr	r5, [r3, #0]
 8001b98:	4e0d      	ldr	r6, [pc, #52]	; (8001bd0 <_cbSendTaskList+0xb4>)
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4433      	add	r3, r6
 8001ba6:	3310      	adds	r3, #16
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	462b      	mov	r3, r5
 8001bae:	4622      	mov	r2, r4
 8001bb0:	f000 f855 	bl	8001c5e <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	607b      	str	r3, [r7, #4]
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <_cbSendTaskList+0xb8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d3b1      	bcc.n	8001b28 <_cbSendTaskList+0xc>
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000ba8 	.word	0x20000ba8
 8001bd4:	20000c48 	.word	0x20000c48

08001bd8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001be0:	f007 fc62 	bl	80094a8 <xTaskGetTickCountFromISR>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2200      	movs	r2, #0
 8001be8:	469a      	mov	sl, r3
 8001bea:	4693      	mov	fp, r2
 8001bec:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001bf0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	f04f 0a00 	mov.w	sl, #0
 8001bfc:	f04f 0b00 	mov.w	fp, #0
 8001c00:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8001c04:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8001c08:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8001c0c:	4652      	mov	r2, sl
 8001c0e:	465b      	mov	r3, fp
 8001c10:	1a14      	subs	r4, r2, r0
 8001c12:	eb63 0501 	sbc.w	r5, r3, r1
 8001c16:	f04f 0200 	mov.w	r2, #0
 8001c1a:	f04f 0300 	mov.w	r3, #0
 8001c1e:	00ab      	lsls	r3, r5, #2
 8001c20:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8001c24:	00a2      	lsls	r2, r4, #2
 8001c26:	4614      	mov	r4, r2
 8001c28:	461d      	mov	r5, r3
 8001c2a:	eb14 0800 	adds.w	r8, r4, r0
 8001c2e:	eb45 0901 	adc.w	r9, r5, r1
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	f04f 0300 	mov.w	r3, #0
 8001c3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c46:	4690      	mov	r8, r2
 8001c48:	4699      	mov	r9, r3
 8001c4a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8001c4e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001c52:	4610      	mov	r0, r2
 8001c54:	4619      	mov	r1, r3
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001c5e <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b08a      	sub	sp, #40	; 0x28
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	60f8      	str	r0, [r7, #12]
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	607a      	str	r2, [r7, #4]
 8001c6a:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	2214      	movs	r2, #20
 8001c72:	2100      	movs	r1, #0
 8001c74:	4618      	mov	r0, r3
 8001c76:	f009 fb3d 	bl	800b2f4 <memset>
  TaskInfo.TaskID     = TaskID;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001c8e:	f107 0314 	add.w	r3, r7, #20
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff fc1c 	bl	80014d0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001c98:	bf00      	nop
 8001c9a:	3728      	adds	r7, #40	; 0x28
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <__NVIC_SetPriorityGrouping+0x40>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cce:	4a04      	ldr	r2, [pc, #16]	; (8001ce0 <__NVIC_SetPriorityGrouping+0x40>)
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	60d3      	str	r3, [r2, #12]
}
 8001cd4:	bf00      	nop
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	e000ed00 	.word	0xe000ed00
 8001ce4:	05fa0000 	.word	0x05fa0000

08001ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	db0b      	blt.n	8001d12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	f003 021f 	and.w	r2, r3, #31
 8001d00:	4907      	ldr	r1, [pc, #28]	; (8001d20 <__NVIC_EnableIRQ+0x38>)
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	095b      	lsrs	r3, r3, #5
 8001d08:	2001      	movs	r0, #1
 8001d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	e000e100 	.word	0xe000e100

08001d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	6039      	str	r1, [r7, #0]
 8001d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	db0a      	blt.n	8001d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	490c      	ldr	r1, [pc, #48]	; (8001d70 <__NVIC_SetPriority+0x4c>)
 8001d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d42:	0112      	lsls	r2, r2, #4
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	440b      	add	r3, r1
 8001d48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d4c:	e00a      	b.n	8001d64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	4908      	ldr	r1, [pc, #32]	; (8001d74 <__NVIC_SetPriority+0x50>)
 8001d54:	79fb      	ldrb	r3, [r7, #7]
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	3b04      	subs	r3, #4
 8001d5c:	0112      	lsls	r2, r2, #4
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	440b      	add	r3, r1
 8001d62:	761a      	strb	r2, [r3, #24]
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	e000e100 	.word	0xe000e100
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d7c:	f000 ff35 	bl	8002bea <HAL_Init>

  /* USER CODE BEGIN Init */
  SEGGER_SYSVIEW_Conf();
 8001d80:	f7ff feb6 	bl	8001af0 <SEGGER_SYSVIEW_Conf>
  NVIC_SetPriorityGrouping(0);
 8001d84:	2000      	movs	r0, #0
 8001d86:	f7ff ff8b 	bl	8001ca0 <__NVIC_SetPriorityGrouping>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d8a:	f000 f863 	bl	8001e54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d8e:	f000 f9fd 	bl	800218c <MX_GPIO_Init>
  MX_DMA_Init();
 8001d92:	f000 f9dd 	bl	8002150 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001d96:	f000 f97d 	bl	8002094 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001d9a:	f000 f9ab 	bl	80020f4 <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 8001d9e:	f000 f919 	bl	8001fd4 <MX_UART4_Init>
  MX_ETH_Init();
 8001da2:	f000 f8c9 	bl	8001f38 <MX_ETH_Init>
  MX_USART2_UART_Init();
 8001da6:	f000 f945 	bl	8002034 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001daa:	f005 fce7 	bl	800777c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  rxStream = xStreamBufferCreate(100, 1);
 8001dae:	2200      	movs	r2, #0
 8001db0:	2101      	movs	r1, #1
 8001db2:	2064      	movs	r0, #100	; 0x64
 8001db4:	f006 fcec 	bl	8008790 <xStreamBufferGenericCreate>
 8001db8:	4603      	mov	r3, r0
 8001dba:	4a18      	ldr	r2, [pc, #96]	; (8001e1c <main+0xa4>)
 8001dbc:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of startUart4Traffic */
  startUart4TrafficHandle = osTimerNew(startUart4TrafficEntry, osTimerOnce, NULL, &startUart4Traffic_attributes);
 8001dbe:	4b18      	ldr	r3, [pc, #96]	; (8001e20 <main+0xa8>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	4817      	ldr	r0, [pc, #92]	; (8001e24 <main+0xac>)
 8001dc6:	f005 fe2d 	bl	8007a24 <osTimerNew>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	4a16      	ldr	r2, [pc, #88]	; (8001e28 <main+0xb0>)
 8001dce:	6013      	str	r3, [r2, #0]

  /* creation of uart4Send */
  uart4SendHandle = osTimerNew(uart4SendEntry, osTimerPeriodic, NULL, &uart4Send_attributes);
 8001dd0:	4b16      	ldr	r3, [pc, #88]	; (8001e2c <main+0xb4>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	4816      	ldr	r0, [pc, #88]	; (8001e30 <main+0xb8>)
 8001dd8:	f005 fe24 	bl	8007a24 <osTimerNew>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	4a15      	ldr	r2, [pc, #84]	; (8001e34 <main+0xbc>)
 8001de0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  osTimerStart(startUart4TrafficHandle, 500 / portTICK_PERIOD_MS);
 8001de2:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <main+0xb0>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001dea:	4618      	mov	r0, r3
 8001dec:	f005 fe9e 	bl	8007b2c <osTimerStart>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001df0:	4a11      	ldr	r2, [pc, #68]	; (8001e38 <main+0xc0>)
 8001df2:	2100      	movs	r1, #0
 8001df4:	4811      	ldr	r0, [pc, #68]	; (8001e3c <main+0xc4>)
 8001df6:	f005 fd2b 	bl	8007850 <osThreadNew>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	4a10      	ldr	r2, [pc, #64]	; (8001e40 <main+0xc8>)
 8001dfe:	6013      	str	r3, [r2, #0]

  /* creation of uartPrintTask */
  //uartPrintTaskHandle = osThreadNew(uartPrintTaskEntry, NULL, &uartPrintTask_attributes);
  uartPrintTaskHandle = osThreadNew(uartPrintOutTask, NULL, &uartPrintTask_attributes);
 8001e00:	4a10      	ldr	r2, [pc, #64]	; (8001e44 <main+0xcc>)
 8001e02:	2100      	movs	r1, #0
 8001e04:	4810      	ldr	r0, [pc, #64]	; (8001e48 <main+0xd0>)
 8001e06:	f005 fd23 	bl	8007850 <osThreadNew>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	4a0f      	ldr	r2, [pc, #60]	; (8001e4c <main+0xd4>)
 8001e0e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001e10:	f005 fce8 	bl	80077e4 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    SEGGER_SYSVIEW_PrintfHost("problem");
 8001e14:	480e      	ldr	r0, [pc, #56]	; (8001e50 <main+0xd8>)
 8001e16:	f7ff fded 	bl	80019f4 <SEGGER_SYSVIEW_PrintfHost>
 8001e1a:	e7fb      	b.n	8001e14 <main+0x9c>
 8001e1c:	20000cc8 	.word	0x20000cc8
 8001e20:	0800b5f0 	.word	0x0800b5f0
 8001e24:	080024c1 	.word	0x080024c1
 8001e28:	200014c0 	.word	0x200014c0
 8001e2c:	0800b600 	.word	0x0800b600
 8001e30:	080024e5 	.word	0x080024e5
 8001e34:	200014c4 	.word	0x200014c4
 8001e38:	0800b5a8 	.word	0x0800b5a8
 8001e3c:	0800249d 	.word	0x0800249d
 8001e40:	200014b8 	.word	0x200014b8
 8001e44:	0800b5cc 	.word	0x0800b5cc
 8001e48:	0800238d 	.word	0x0800238d
 8001e4c:	200014bc 	.word	0x200014bc
 8001e50:	0800b53c 	.word	0x0800b53c

08001e54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b094      	sub	sp, #80	; 0x50
 8001e58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e5a:	f107 031c 	add.w	r3, r7, #28
 8001e5e:	2234      	movs	r2, #52	; 0x34
 8001e60:	2100      	movs	r1, #0
 8001e62:	4618      	mov	r0, r3
 8001e64:	f009 fa46 	bl	800b2f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e68:	f107 0308 	add.w	r3, r7, #8
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	60da      	str	r2, [r3, #12]
 8001e76:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001e78:	f002 fa64 	bl	8004344 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e7c:	4b2c      	ldr	r3, [pc, #176]	; (8001f30 <SystemClock_Config+0xdc>)
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e80:	4a2b      	ldr	r2, [pc, #172]	; (8001f30 <SystemClock_Config+0xdc>)
 8001e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e86:	6413      	str	r3, [r2, #64]	; 0x40
 8001e88:	4b29      	ldr	r3, [pc, #164]	; (8001f30 <SystemClock_Config+0xdc>)
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e90:	607b      	str	r3, [r7, #4]
 8001e92:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e94:	4b27      	ldr	r3, [pc, #156]	; (8001f34 <SystemClock_Config+0xe0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e9c:	4a25      	ldr	r2, [pc, #148]	; (8001f34 <SystemClock_Config+0xe0>)
 8001e9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ea2:	6013      	str	r3, [r2, #0]
 8001ea4:	4b23      	ldr	r3, [pc, #140]	; (8001f34 <SystemClock_Config+0xe0>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001eac:	603b      	str	r3, [r7, #0]
 8001eae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001eb4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001eb8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ebe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ec2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ec4:	2304      	movs	r3, #4
 8001ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001ec8:	2360      	movs	r3, #96	; 0x60
 8001eca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ed0:	2304      	movs	r3, #4
 8001ed2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ed8:	f107 031c 	add.w	r3, r7, #28
 8001edc:	4618      	mov	r0, r3
 8001ede:	f002 fa91 	bl	8004404 <HAL_RCC_OscConfig>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001ee8:	f000 fb26 	bl	8002538 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001eec:	f002 fa3a 	bl	8004364 <HAL_PWREx_EnableOverDrive>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001ef6:	f000 fb1f 	bl	8002538 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001efa:	230f      	movs	r3, #15
 8001efc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001efe:	2302      	movs	r3, #2
 8001f00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001f10:	f107 0308 	add.w	r3, r7, #8
 8001f14:	2103      	movs	r1, #3
 8001f16:	4618      	mov	r0, r3
 8001f18:	f002 fd22 	bl	8004960 <HAL_RCC_ClockConfig>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001f22:	f000 fb09 	bl	8002538 <Error_Handler>
  }
}
 8001f26:	bf00      	nop
 8001f28:	3750      	adds	r7, #80	; 0x50
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40007000 	.word	0x40007000

08001f38 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001f3c:	4b1f      	ldr	r3, [pc, #124]	; (8001fbc <MX_ETH_Init+0x84>)
 8001f3e:	4a20      	ldr	r2, [pc, #128]	; (8001fc0 <MX_ETH_Init+0x88>)
 8001f40:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001f42:	4b20      	ldr	r3, [pc, #128]	; (8001fc4 <MX_ETH_Init+0x8c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001f48:	4b1e      	ldr	r3, [pc, #120]	; (8001fc4 <MX_ETH_Init+0x8c>)
 8001f4a:	2280      	movs	r2, #128	; 0x80
 8001f4c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001f4e:	4b1d      	ldr	r3, [pc, #116]	; (8001fc4 <MX_ETH_Init+0x8c>)
 8001f50:	22e1      	movs	r2, #225	; 0xe1
 8001f52:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001f54:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <MX_ETH_Init+0x8c>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001f5a:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <MX_ETH_Init+0x8c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001f60:	4b18      	ldr	r3, [pc, #96]	; (8001fc4 <MX_ETH_Init+0x8c>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001f66:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <MX_ETH_Init+0x84>)
 8001f68:	4a16      	ldr	r2, [pc, #88]	; (8001fc4 <MX_ETH_Init+0x8c>)
 8001f6a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001f6c:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <MX_ETH_Init+0x84>)
 8001f6e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001f72:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <MX_ETH_Init+0x84>)
 8001f76:	4a14      	ldr	r2, [pc, #80]	; (8001fc8 <MX_ETH_Init+0x90>)
 8001f78:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <MX_ETH_Init+0x84>)
 8001f7c:	4a13      	ldr	r2, [pc, #76]	; (8001fcc <MX_ETH_Init+0x94>)
 8001f7e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001f80:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <MX_ETH_Init+0x84>)
 8001f82:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001f86:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001f88:	480c      	ldr	r0, [pc, #48]	; (8001fbc <MX_ETH_Init+0x84>)
 8001f8a:	f001 fba7 	bl	80036dc <HAL_ETH_Init>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001f94:	f000 fad0 	bl	8002538 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001f98:	2238      	movs	r2, #56	; 0x38
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	480c      	ldr	r0, [pc, #48]	; (8001fd0 <MX_ETH_Init+0x98>)
 8001f9e:	f009 f9a9 	bl	800b2f4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <MX_ETH_Init+0x98>)
 8001fa4:	2221      	movs	r2, #33	; 0x21
 8001fa6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001fa8:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <MX_ETH_Init+0x98>)
 8001faa:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001fae:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001fb0:	4b07      	ldr	r3, [pc, #28]	; (8001fd0 <MX_ETH_Init+0x98>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000d08 	.word	0x20000d08
 8001fc0:	40028000 	.word	0x40028000
 8001fc4:	200014c8 	.word	0x200014c8
 8001fc8:	20000118 	.word	0x20000118
 8001fcc:	20000078 	.word	0x20000078
 8001fd0:	20000cd0 	.word	0x20000cd0

08001fd4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001fd8:	4b14      	ldr	r3, [pc, #80]	; (800202c <MX_UART4_Init+0x58>)
 8001fda:	4a15      	ldr	r2, [pc, #84]	; (8002030 <MX_UART4_Init+0x5c>)
 8001fdc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001fde:	4b13      	ldr	r3, [pc, #76]	; (800202c <MX_UART4_Init+0x58>)
 8001fe0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fe4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001fe6:	4b11      	ldr	r3, [pc, #68]	; (800202c <MX_UART4_Init+0x58>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001fec:	4b0f      	ldr	r3, [pc, #60]	; (800202c <MX_UART4_Init+0x58>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001ff2:	4b0e      	ldr	r3, [pc, #56]	; (800202c <MX_UART4_Init+0x58>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001ff8:	4b0c      	ldr	r3, [pc, #48]	; (800202c <MX_UART4_Init+0x58>)
 8001ffa:	220c      	movs	r2, #12
 8001ffc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ffe:	4b0b      	ldr	r3, [pc, #44]	; (800202c <MX_UART4_Init+0x58>)
 8002000:	2200      	movs	r2, #0
 8002002:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002004:	4b09      	ldr	r3, [pc, #36]	; (800202c <MX_UART4_Init+0x58>)
 8002006:	2200      	movs	r2, #0
 8002008:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800200a:	4b08      	ldr	r3, [pc, #32]	; (800202c <MX_UART4_Init+0x58>)
 800200c:	2200      	movs	r2, #0
 800200e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002010:	4b06      	ldr	r3, [pc, #24]	; (800202c <MX_UART4_Init+0x58>)
 8002012:	2200      	movs	r2, #0
 8002014:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002016:	4805      	ldr	r0, [pc, #20]	; (800202c <MX_UART4_Init+0x58>)
 8002018:	f003 fe02 	bl	8005c20 <HAL_UART_Init>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002022:	f000 fa89 	bl	8002538 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000db8 	.word	0x20000db8
 8002030:	40004c00 	.word	0x40004c00

08002034 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002038:	4b14      	ldr	r3, [pc, #80]	; (800208c <MX_USART2_UART_Init+0x58>)
 800203a:	4a15      	ldr	r2, [pc, #84]	; (8002090 <MX_USART2_UART_Init+0x5c>)
 800203c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800203e:	4b13      	ldr	r3, [pc, #76]	; (800208c <MX_USART2_UART_Init+0x58>)
 8002040:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002044:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002046:	4b11      	ldr	r3, [pc, #68]	; (800208c <MX_USART2_UART_Init+0x58>)
 8002048:	2200      	movs	r2, #0
 800204a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800204c:	4b0f      	ldr	r3, [pc, #60]	; (800208c <MX_USART2_UART_Init+0x58>)
 800204e:	2200      	movs	r2, #0
 8002050:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002052:	4b0e      	ldr	r3, [pc, #56]	; (800208c <MX_USART2_UART_Init+0x58>)
 8002054:	2200      	movs	r2, #0
 8002056:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002058:	4b0c      	ldr	r3, [pc, #48]	; (800208c <MX_USART2_UART_Init+0x58>)
 800205a:	220c      	movs	r2, #12
 800205c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800205e:	4b0b      	ldr	r3, [pc, #44]	; (800208c <MX_USART2_UART_Init+0x58>)
 8002060:	2200      	movs	r2, #0
 8002062:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002064:	4b09      	ldr	r3, [pc, #36]	; (800208c <MX_USART2_UART_Init+0x58>)
 8002066:	2200      	movs	r2, #0
 8002068:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800206a:	4b08      	ldr	r3, [pc, #32]	; (800208c <MX_USART2_UART_Init+0x58>)
 800206c:	2200      	movs	r2, #0
 800206e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <MX_USART2_UART_Init+0x58>)
 8002072:	2200      	movs	r2, #0
 8002074:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002076:	4805      	ldr	r0, [pc, #20]	; (800208c <MX_USART2_UART_Init+0x58>)
 8002078:	f003 fdd2 	bl	8005c20 <HAL_UART_Init>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002082:	f000 fa59 	bl	8002538 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000e40 	.word	0x20000e40
 8002090:	40004400 	.word	0x40004400

08002094 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002098:	4b14      	ldr	r3, [pc, #80]	; (80020ec <MX_USART3_UART_Init+0x58>)
 800209a:	4a15      	ldr	r2, [pc, #84]	; (80020f0 <MX_USART3_UART_Init+0x5c>)
 800209c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800209e:	4b13      	ldr	r3, [pc, #76]	; (80020ec <MX_USART3_UART_Init+0x58>)
 80020a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020a6:	4b11      	ldr	r3, [pc, #68]	; (80020ec <MX_USART3_UART_Init+0x58>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020ac:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <MX_USART3_UART_Init+0x58>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020b2:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <MX_USART3_UART_Init+0x58>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020b8:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <MX_USART3_UART_Init+0x58>)
 80020ba:	220c      	movs	r2, #12
 80020bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020be:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <MX_USART3_UART_Init+0x58>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020c4:	4b09      	ldr	r3, [pc, #36]	; (80020ec <MX_USART3_UART_Init+0x58>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020ca:	4b08      	ldr	r3, [pc, #32]	; (80020ec <MX_USART3_UART_Init+0x58>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020d0:	4b06      	ldr	r3, [pc, #24]	; (80020ec <MX_USART3_UART_Init+0x58>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020d6:	4805      	ldr	r0, [pc, #20]	; (80020ec <MX_USART3_UART_Init+0x58>)
 80020d8:	f003 fda2 	bl	8005c20 <HAL_UART_Init>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80020e2:	f000 fa29 	bl	8002538 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20000ec8 	.word	0x20000ec8
 80020f0:	40004800 	.word	0x40004800

080020f4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80020f8:	4b14      	ldr	r3, [pc, #80]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80020fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002100:	4b12      	ldr	r3, [pc, #72]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002102:	2206      	movs	r2, #6
 8002104:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002106:	4b11      	ldr	r3, [pc, #68]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002108:	2202      	movs	r2, #2
 800210a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800210c:	4b0f      	ldr	r3, [pc, #60]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800210e:	2200      	movs	r2, #0
 8002110:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002112:	4b0e      	ldr	r3, [pc, #56]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002114:	2202      	movs	r2, #2
 8002116:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002118:	4b0c      	ldr	r3, [pc, #48]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800211a:	2201      	movs	r2, #1
 800211c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800211e:	4b0b      	ldr	r3, [pc, #44]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002120:	2200      	movs	r2, #0
 8002122:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002124:	4b09      	ldr	r3, [pc, #36]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002126:	2200      	movs	r2, #0
 8002128:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800212a:	4b08      	ldr	r3, [pc, #32]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800212c:	2201      	movs	r2, #1
 800212e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002130:	4b06      	ldr	r3, [pc, #24]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002132:	2200      	movs	r2, #0
 8002134:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002136:	4805      	ldr	r0, [pc, #20]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002138:	f001 ffbb 	bl	80040b2 <HAL_PCD_Init>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002142:	f000 f9f9 	bl	8002538 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000fb0 	.word	0x20000fb0

08002150 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002156:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <MX_DMA_Init+0x38>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	4a0b      	ldr	r2, [pc, #44]	; (8002188 <MX_DMA_Init+0x38>)
 800215c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002160:	6313      	str	r3, [r2, #48]	; 0x30
 8002162:	4b09      	ldr	r3, [pc, #36]	; (8002188 <MX_DMA_Init+0x38>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800216a:	607b      	str	r3, [r7, #4]
 800216c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800216e:	2200      	movs	r2, #0
 8002170:	2105      	movs	r1, #5
 8002172:	2010      	movs	r0, #16
 8002174:	f000 fe42 	bl	8002dfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002178:	2010      	movs	r0, #16
 800217a:	f000 fe5b 	bl	8002e34 <HAL_NVIC_EnableIRQ>

}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40023800 	.word	0x40023800

0800218c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08c      	sub	sp, #48	; 0x30
 8002190:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002192:	f107 031c 	add.w	r3, r7, #28
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	605a      	str	r2, [r3, #4]
 800219c:	609a      	str	r2, [r3, #8]
 800219e:	60da      	str	r2, [r3, #12]
 80021a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021a2:	4b47      	ldr	r3, [pc, #284]	; (80022c0 <MX_GPIO_Init+0x134>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	4a46      	ldr	r2, [pc, #280]	; (80022c0 <MX_GPIO_Init+0x134>)
 80021a8:	f043 0304 	orr.w	r3, r3, #4
 80021ac:	6313      	str	r3, [r2, #48]	; 0x30
 80021ae:	4b44      	ldr	r3, [pc, #272]	; (80022c0 <MX_GPIO_Init+0x134>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	f003 0304 	and.w	r3, r3, #4
 80021b6:	61bb      	str	r3, [r7, #24]
 80021b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021ba:	4b41      	ldr	r3, [pc, #260]	; (80022c0 <MX_GPIO_Init+0x134>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	4a40      	ldr	r2, [pc, #256]	; (80022c0 <MX_GPIO_Init+0x134>)
 80021c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021c4:	6313      	str	r3, [r2, #48]	; 0x30
 80021c6:	4b3e      	ldr	r3, [pc, #248]	; (80022c0 <MX_GPIO_Init+0x134>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d2:	4b3b      	ldr	r3, [pc, #236]	; (80022c0 <MX_GPIO_Init+0x134>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	4a3a      	ldr	r2, [pc, #232]	; (80022c0 <MX_GPIO_Init+0x134>)
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	6313      	str	r3, [r2, #48]	; 0x30
 80021de:	4b38      	ldr	r3, [pc, #224]	; (80022c0 <MX_GPIO_Init+0x134>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	613b      	str	r3, [r7, #16]
 80021e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ea:	4b35      	ldr	r3, [pc, #212]	; (80022c0 <MX_GPIO_Init+0x134>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	4a34      	ldr	r2, [pc, #208]	; (80022c0 <MX_GPIO_Init+0x134>)
 80021f0:	f043 0302 	orr.w	r3, r3, #2
 80021f4:	6313      	str	r3, [r2, #48]	; 0x30
 80021f6:	4b32      	ldr	r3, [pc, #200]	; (80022c0 <MX_GPIO_Init+0x134>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002202:	4b2f      	ldr	r3, [pc, #188]	; (80022c0 <MX_GPIO_Init+0x134>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	4a2e      	ldr	r2, [pc, #184]	; (80022c0 <MX_GPIO_Init+0x134>)
 8002208:	f043 0308 	orr.w	r3, r3, #8
 800220c:	6313      	str	r3, [r2, #48]	; 0x30
 800220e:	4b2c      	ldr	r3, [pc, #176]	; (80022c0 <MX_GPIO_Init+0x134>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800221a:	4b29      	ldr	r3, [pc, #164]	; (80022c0 <MX_GPIO_Init+0x134>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	4a28      	ldr	r2, [pc, #160]	; (80022c0 <MX_GPIO_Init+0x134>)
 8002220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002224:	6313      	str	r3, [r2, #48]	; 0x30
 8002226:	4b26      	ldr	r3, [pc, #152]	; (80022c0 <MX_GPIO_Init+0x134>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800222e:	607b      	str	r3, [r7, #4]
 8002230:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002232:	2200      	movs	r2, #0
 8002234:	f244 0181 	movw	r1, #16513	; 0x4081
 8002238:	4822      	ldr	r0, [pc, #136]	; (80022c4 <MX_GPIO_Init+0x138>)
 800223a:	f001 ff21 	bl	8004080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800223e:	2200      	movs	r2, #0
 8002240:	2140      	movs	r1, #64	; 0x40
 8002242:	4821      	ldr	r0, [pc, #132]	; (80022c8 <MX_GPIO_Init+0x13c>)
 8002244:	f001 ff1c 	bl	8004080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002248:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800224c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800224e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002252:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002258:	f107 031c 	add.w	r3, r7, #28
 800225c:	4619      	mov	r1, r3
 800225e:	481b      	ldr	r0, [pc, #108]	; (80022cc <MX_GPIO_Init+0x140>)
 8002260:	f001 fd62 	bl	8003d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002264:	f244 0381 	movw	r3, #16513	; 0x4081
 8002268:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800226a:	2301      	movs	r3, #1
 800226c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002272:	2300      	movs	r3, #0
 8002274:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002276:	f107 031c 	add.w	r3, r7, #28
 800227a:	4619      	mov	r1, r3
 800227c:	4811      	ldr	r0, [pc, #68]	; (80022c4 <MX_GPIO_Init+0x138>)
 800227e:	f001 fd53 	bl	8003d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002282:	2340      	movs	r3, #64	; 0x40
 8002284:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002286:	2301      	movs	r3, #1
 8002288:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228a:	2300      	movs	r3, #0
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228e:	2300      	movs	r3, #0
 8002290:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002292:	f107 031c 	add.w	r3, r7, #28
 8002296:	4619      	mov	r1, r3
 8002298:	480b      	ldr	r0, [pc, #44]	; (80022c8 <MX_GPIO_Init+0x13c>)
 800229a:	f001 fd45 	bl	8003d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800229e:	2380      	movs	r3, #128	; 0x80
 80022a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022a2:	2300      	movs	r3, #0
 80022a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80022aa:	f107 031c 	add.w	r3, r7, #28
 80022ae:	4619      	mov	r1, r3
 80022b0:	4805      	ldr	r0, [pc, #20]	; (80022c8 <MX_GPIO_Init+0x13c>)
 80022b2:	f001 fd39 	bl	8003d28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022b6:	bf00      	nop
 80022b8:	3730      	adds	r7, #48	; 0x30
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40020400 	.word	0x40020400
 80022c8:	40021800 	.word	0x40021800
 80022cc:	40020800 	.word	0x40020800

080022d0 <startReceiveDMA>:

/* USER CODE BEGIN 4 */

int32_t startReceiveDMA( uint8_t* Buffer, uint_fast16_t Len )
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
	if(!rxInProgress && (Buffer != NULL))
 80022da:	4b20      	ldr	r3, [pc, #128]	; (800235c <startReceiveDMA+0x8c>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	f083 0301 	eor.w	r3, r3, #1
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d033      	beq.n	8002350 <startReceiveDMA+0x80>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d030      	beq.n	8002350 <startReceiveDMA+0x80>
	{
		rxInProgress = true;
 80022ee:	4b1b      	ldr	r3, [pc, #108]	; (800235c <startReceiveDMA+0x8c>)
 80022f0:	2201      	movs	r2, #1
 80022f2:	701a      	strb	r2, [r3, #0]
		rxLen = Len;
 80022f4:	4a1a      	ldr	r2, [pc, #104]	; (8002360 <startReceiveDMA+0x90>)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	6013      	str	r3, [r2, #0]

		//get the DMA peripheral ready to receive data immediately before enabling UART
		//so there is no chance of overrun
		//dma stream enable bit must be toggled before a transfer will properly restart
		__HAL_DMA_DISABLE(&usart2DmaRx);
 80022fa:	4b1a      	ldr	r3, [pc, #104]	; (8002364 <startReceiveDMA+0x94>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4b18      	ldr	r3, [pc, #96]	; (8002364 <startReceiveDMA+0x94>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 0201 	bic.w	r2, r2, #1
 8002308:	601a      	str	r2, [r3, #0]
		MX_DMA_Init();
 800230a:	f7ff ff21 	bl	8002150 <MX_DMA_Init>
		if(HAL_DMA_Start(&usart2DmaRx, (uint32_t)&(USART2->RDR), (uint32_t) Buffer, Len) != HAL_OK)
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	4915      	ldr	r1, [pc, #84]	; (8002368 <startReceiveDMA+0x98>)
 8002314:	4813      	ldr	r0, [pc, #76]	; (8002364 <startReceiveDMA+0x94>)
 8002316:	f000 fe49 	bl	8002fac <HAL_DMA_Start>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d002      	beq.n	8002326 <startReceiveDMA+0x56>
		{
			return -1;
 8002320:	f04f 33ff 	mov.w	r3, #4294967295
 8002324:	e016      	b.n	8002354 <startReceiveDMA+0x84>
		}

		//enable the UART
		//clears error flags
		USART2->ICR |= (USART_ICR_FECF | USART_ICR_PECF |
 8002326:	4b11      	ldr	r3, [pc, #68]	; (800236c <startReceiveDMA+0x9c>)
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	4a10      	ldr	r2, [pc, #64]	; (800236c <startReceiveDMA+0x9c>)
 800232c:	f043 030f 	orr.w	r3, r3, #15
 8002330:	6213      	str	r3, [r2, #32]
		//we'll wind up with a lot of noise on the line (the way the ISR is written will
		//cause a transfer to terminate if there are any errors are detected, rather than simply
		//continue with what data it can).  In practice, most of the "errors" at baudrates below
		//460800 are noise detection
//		USART2->CR3 |= (USART_CR3_EIE);	//enable error interrupts
		NVIC_SetPriority(USART2_IRQn, 6);
 8002332:	2106      	movs	r1, #6
 8002334:	2026      	movs	r0, #38	; 0x26
 8002336:	f7ff fcf5 	bl	8001d24 <__NVIC_SetPriority>
		NVIC_EnableIRQ(USART2_IRQn);
 800233a:	2026      	movs	r0, #38	; 0x26
 800233c:	f7ff fcd4 	bl	8001ce8 <__NVIC_EnableIRQ>
		USART2->CR1 |= (USART_CR1_UE);
 8002340:	4b0a      	ldr	r3, [pc, #40]	; (800236c <startReceiveDMA+0x9c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a09      	ldr	r2, [pc, #36]	; (800236c <startReceiveDMA+0x9c>)
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	6013      	str	r3, [r2, #0]
		return 0;
 800234c:	2300      	movs	r3, #0
 800234e:	e001      	b.n	8002354 <startReceiveDMA+0x84>
	}

	return -1;
 8002350:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002354:	4618      	mov	r0, r3
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20000cac 	.word	0x20000cac
 8002360:	20000cb0 	.word	0x20000cb0
 8002364:	20000c4c 	.word	0x20000c4c
 8002368:	40004424 	.word	0x40004424
 800236c:	40004400 	.word	0x40004400

08002370 <stopReceiveDMA>:

void stopReceiveDMA( void )
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
	rxInProgress = false;
 8002374:	4b03      	ldr	r3, [pc, #12]	; (8002384 <stopReceiveDMA+0x14>)
 8002376:	2200      	movs	r2, #0
 8002378:	701a      	strb	r2, [r3, #0]
	HAL_DMA_Abort(&usart2DmaRx);
 800237a:	4803      	ldr	r0, [pc, #12]	; (8002388 <stopReceiveDMA+0x18>)
 800237c:	f000 feb1 	bl	80030e2 <HAL_DMA_Abort>
}
 8002380:	bf00      	nop
 8002382:	bd80      	pop	{r7, pc}
 8002384:	20000cac 	.word	0x20000cac
 8002388:	20000c4c 	.word	0x20000c4c

0800238c <uartPrintOutTask>:
void uartPrintOutTask( void* NotUsed)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b088      	sub	sp, #32
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
	uint8_t rxBufferedData[20];
	uint8_t numBytesReceived = 16;
 8002394:	2310      	movs	r3, #16
 8002396:	77fb      	strb	r3, [r7, #31]

	MX_DMA_Init();
 8002398:	f7ff feda 	bl	8002150 <MX_DMA_Init>
	//STM_UartInit(USART2, BAUDRATE, NULL, &usart2DmaRx);
	MX_USART2_UART_Init();
 800239c:	f7ff fe4a 	bl	8002034 <MX_USART2_UART_Init>
	while(1)
	{
		//SEGGER_SYSVIEW_PrintfHost("Printer task");
		memset(rxBufferedData, 0, 20);
 80023a0:	f107 0308 	add.w	r3, r7, #8
 80023a4:	2214      	movs	r2, #20
 80023a6:	2100      	movs	r1, #0
 80023a8:	4618      	mov	r0, r3
 80023aa:	f008 ffa3 	bl	800b2f4 <memset>
		startReceiveDMA(rxData, expectedLen);
 80023ae:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <uartPrintOutTask+0x68>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	4619      	mov	r1, r3
 80023b4:	4810      	ldr	r0, [pc, #64]	; (80023f8 <uartPrintOutTask+0x6c>)
 80023b6:	f7ff ff8b 	bl	80022d0 <startReceiveDMA>
		uint8_t numBytes = xStreamBufferReceive(	rxStream,
 80023ba:	4b10      	ldr	r3, [pc, #64]	; (80023fc <uartPrintOutTask+0x70>)
 80023bc:	6818      	ldr	r0, [r3, #0]
 80023be:	7ffa      	ldrb	r2, [r7, #31]
 80023c0:	f107 0108 	add.w	r1, r7, #8
 80023c4:	2364      	movs	r3, #100	; 0x64
 80023c6:	f006 fb2d 	bl	8008a24 <xStreamBufferReceive>
 80023ca:	4603      	mov	r3, r0
 80023cc:	77bb      	strb	r3, [r7, #30]
													rxBufferedData,
													numBytesReceived,
													100 );
		if(numBytes > 0)
 80023ce:	7fbb      	ldrb	r3, [r7, #30]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d008      	beq.n	80023e6 <uartPrintOutTask+0x5a>
		{
			SEGGER_SYSVIEW_PrintfHost("received: ");
 80023d4:	480a      	ldr	r0, [pc, #40]	; (8002400 <uartPrintOutTask+0x74>)
 80023d6:	f7ff fb0d 	bl	80019f4 <SEGGER_SYSVIEW_PrintfHost>
			SEGGER_SYSVIEW_Print((char*)rxBufferedData);
 80023da:	f107 0308 	add.w	r3, r7, #8
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff fb1c 	bl	8001a1c <SEGGER_SYSVIEW_Print>
 80023e4:	e7dc      	b.n	80023a0 <uartPrintOutTask+0x14>
		}
		else
		{
	        stopReceiveDMA();
 80023e6:	f7ff ffc3 	bl	8002370 <stopReceiveDMA>
			SEGGER_SYSVIEW_PrintfHost("timeout");
 80023ea:	4806      	ldr	r0, [pc, #24]	; (8002404 <uartPrintOutTask+0x78>)
 80023ec:	f7ff fb02 	bl	80019f4 <SEGGER_SYSVIEW_PrintfHost>
	{
 80023f0:	e7d6      	b.n	80023a0 <uartPrintOutTask+0x14>
 80023f2:	bf00      	nop
 80023f4:	20000000 	.word	0x20000000
 80023f8:	20000cb4 	.word	0x20000cb4
 80023fc:	20000cc8 	.word	0x20000cc8
 8002400:	0800b544 	.word	0x0800b544
 8002404:	0800b550 	.word	0x0800b550

08002408 <DMA1_Stream5_IRQHandler>:
		}
	}
}

void DMA1_Stream5_IRQHandler(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800240e:	481b      	ldr	r0, [pc, #108]	; (800247c <DMA1_Stream5_IRQHandler+0x74>)
 8002410:	f000 fefa 	bl	8003208 <HAL_DMA_IRQHandler>
  //SEGGER_SYSVIEW_PrintfHost("irq");
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8002414:	2300      	movs	r3, #0
 8002416:	607b      	str	r3, [r7, #4]
	SEGGER_SYSVIEW_RecordEnterISR();
 8002418:	f7ff f9a8 	bl	800176c <SEGGER_SYSVIEW_RecordEnterISR>

	if(rxInProgress && (DMA1->HISR & DMA_HISR_TCIF5))
 800241c:	4b18      	ldr	r3, [pc, #96]	; (8002480 <DMA1_Stream5_IRQHandler+0x78>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d01a      	beq.n	800245a <DMA1_Stream5_IRQHandler+0x52>
 8002424:	4b17      	ldr	r3, [pc, #92]	; (8002484 <DMA1_Stream5_IRQHandler+0x7c>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800242c:	2b00      	cmp	r3, #0
 800242e:	d014      	beq.n	800245a <DMA1_Stream5_IRQHandler+0x52>
	{
		rxInProgress = false;
 8002430:	4b13      	ldr	r3, [pc, #76]	; (8002480 <DMA1_Stream5_IRQHandler+0x78>)
 8002432:	2200      	movs	r2, #0
 8002434:	701a      	strb	r2, [r3, #0]
		DMA1->HIFCR |= DMA_HIFCR_CTCIF5;
 8002436:	4b13      	ldr	r3, [pc, #76]	; (8002484 <DMA1_Stream5_IRQHandler+0x7c>)
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	4a12      	ldr	r2, [pc, #72]	; (8002484 <DMA1_Stream5_IRQHandler+0x7c>)
 800243c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002440:	60d3      	str	r3, [r2, #12]
		xStreamBufferSendFromISR(	rxStream,
 8002442:	4b11      	ldr	r3, [pc, #68]	; (8002488 <DMA1_Stream5_IRQHandler+0x80>)
 8002444:	6818      	ldr	r0, [r3, #0]
 8002446:	4b11      	ldr	r3, [pc, #68]	; (800248c <DMA1_Stream5_IRQHandler+0x84>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	461a      	mov	r2, r3
									rxData,
									expectedLen - DMA1_Stream5->NDTR,
 800244c:	4b10      	ldr	r3, [pc, #64]	; (8002490 <DMA1_Stream5_IRQHandler+0x88>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	1ad2      	subs	r2, r2, r3
		xStreamBufferSendFromISR(	rxStream,
 8002452:	1d3b      	adds	r3, r7, #4
 8002454:	490f      	ldr	r1, [pc, #60]	; (8002494 <DMA1_Stream5_IRQHandler+0x8c>)
 8002456:	f006 fa31 	bl	80088bc <xStreamBufferSendFromISR>
									&xHigherPriorityTaskWoken);
	}
	SEGGER_SYSVIEW_RecordExitISR();
 800245a:	f7ff f9c9 	bl	80017f0 <SEGGER_SYSVIEW_RecordExitISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d007      	beq.n	8002474 <DMA1_Stream5_IRQHandler+0x6c>
 8002464:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <DMA1_Stream5_IRQHandler+0x90>)
 8002466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	f3bf 8f4f 	dsb	sy
 8002470:	f3bf 8f6f 	isb	sy
  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002474:	bf00      	nop
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20000f50 	.word	0x20000f50
 8002480:	20000cac 	.word	0x20000cac
 8002484:	40026000 	.word	0x40026000
 8002488:	20000cc8 	.word	0x20000cc8
 800248c:	20000000 	.word	0x20000000
 8002490:	40026088 	.word	0x40026088
 8002494:	20000cb4 	.word	0x20000cb4
 8002498:	e000ed04 	.word	0xe000ed04

0800249c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80024a4:	2001      	movs	r0, #1
 80024a6:	f005 fa79 	bl	800799c <osDelay>
    //SEGGER_SYSVIEW_PrintfHost("def");
    HAL_UART_Receive_DMA (&huart2, uart2dmaMsg, 2);
 80024aa:	2202      	movs	r2, #2
 80024ac:	4902      	ldr	r1, [pc, #8]	; (80024b8 <StartDefaultTask+0x1c>)
 80024ae:	4803      	ldr	r0, [pc, #12]	; (80024bc <StartDefaultTask+0x20>)
 80024b0:	f003 fc87 	bl	8005dc2 <HAL_UART_Receive_DMA>
    osDelay(1);
 80024b4:	e7f6      	b.n	80024a4 <StartDefaultTask+0x8>
 80024b6:	bf00      	nop
 80024b8:	20000ccc 	.word	0x20000ccc
 80024bc:	20000e40 	.word	0x20000e40

080024c0 <startUart4TrafficEntry>:
  /* USER CODE END uartPrintTaskEntry */
}

/* startUart4TrafficEntry function */
void startUart4TrafficEntry(void *argument)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startUart4TrafficEntry */
  osTimerStart(uart4SendHandle, 500 / portTICK_PERIOD_MS);
 80024c8:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <startUart4TrafficEntry+0x20>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80024d0:	4618      	mov	r0, r3
 80024d2:	f005 fb2b 	bl	8007b2c <osTimerStart>

  /* USER CODE END startUart4TrafficEntry */
}
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	200014c4 	.word	0x200014c4

080024e4 <uart4SendEntry>:

/* uart4SendEntry function */
void uart4SendEntry(void *argument)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uart4SendEntry */
	SEGGER_SYSVIEW_PrintfHost("UART 4 Send");
 80024ec:	4806      	ldr	r0, [pc, #24]	; (8002508 <uart4SendEntry+0x24>)
 80024ee:	f7ff fa81 	bl	80019f4 <SEGGER_SYSVIEW_PrintfHost>
	HAL_UART_Transmit(&huart4, uart4Msg, sizeof(uart4Msg), 100);
 80024f2:	2364      	movs	r3, #100	; 0x64
 80024f4:	2201      	movs	r2, #1
 80024f6:	4905      	ldr	r1, [pc, #20]	; (800250c <uart4SendEntry+0x28>)
 80024f8:	4805      	ldr	r0, [pc, #20]	; (8002510 <uart4SendEntry+0x2c>)
 80024fa:	f003 fbdf 	bl	8005cbc <HAL_UART_Transmit>
  /* USER CODE END uart4SendEntry */
}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	0800b558 	.word	0x0800b558
 800250c:	0800b5a4 	.word	0x0800b5a4
 8002510:	20000db8 	.word	0x20000db8

08002514 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a04      	ldr	r2, [pc, #16]	; (8002534 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d101      	bne.n	800252a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002526:	f000 fb6d 	bl	8002c04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40010000 	.word	0x40010000

08002538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800253c:	b672      	cpsid	i
}
 800253e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002540:	e7fe      	b.n	8002540 <Error_Handler+0x8>
	...

08002544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800254a:	4b11      	ldr	r3, [pc, #68]	; (8002590 <HAL_MspInit+0x4c>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	4a10      	ldr	r2, [pc, #64]	; (8002590 <HAL_MspInit+0x4c>)
 8002550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002554:	6413      	str	r3, [r2, #64]	; 0x40
 8002556:	4b0e      	ldr	r3, [pc, #56]	; (8002590 <HAL_MspInit+0x4c>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255e:	607b      	str	r3, [r7, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002562:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <HAL_MspInit+0x4c>)
 8002564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002566:	4a0a      	ldr	r2, [pc, #40]	; (8002590 <HAL_MspInit+0x4c>)
 8002568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800256c:	6453      	str	r3, [r2, #68]	; 0x44
 800256e:	4b08      	ldr	r3, [pc, #32]	; (8002590 <HAL_MspInit+0x4c>)
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002576:	603b      	str	r3, [r7, #0]
 8002578:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	210f      	movs	r1, #15
 800257e:	f06f 0001 	mvn.w	r0, #1
 8002582:	f000 fc3b 	bl	8002dfc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40023800 	.word	0x40023800

08002594 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b08e      	sub	sp, #56	; 0x38
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800259c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	609a      	str	r2, [r3, #8]
 80025a8:	60da      	str	r2, [r3, #12]
 80025aa:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a4e      	ldr	r2, [pc, #312]	; (80026ec <HAL_ETH_MspInit+0x158>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	f040 8096 	bne.w	80026e4 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80025b8:	4b4d      	ldr	r3, [pc, #308]	; (80026f0 <HAL_ETH_MspInit+0x15c>)
 80025ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025bc:	4a4c      	ldr	r2, [pc, #304]	; (80026f0 <HAL_ETH_MspInit+0x15c>)
 80025be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025c2:	6313      	str	r3, [r2, #48]	; 0x30
 80025c4:	4b4a      	ldr	r3, [pc, #296]	; (80026f0 <HAL_ETH_MspInit+0x15c>)
 80025c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025cc:	623b      	str	r3, [r7, #32]
 80025ce:	6a3b      	ldr	r3, [r7, #32]
 80025d0:	4b47      	ldr	r3, [pc, #284]	; (80026f0 <HAL_ETH_MspInit+0x15c>)
 80025d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d4:	4a46      	ldr	r2, [pc, #280]	; (80026f0 <HAL_ETH_MspInit+0x15c>)
 80025d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025da:	6313      	str	r3, [r2, #48]	; 0x30
 80025dc:	4b44      	ldr	r3, [pc, #272]	; (80026f0 <HAL_ETH_MspInit+0x15c>)
 80025de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025e4:	61fb      	str	r3, [r7, #28]
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	4b41      	ldr	r3, [pc, #260]	; (80026f0 <HAL_ETH_MspInit+0x15c>)
 80025ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ec:	4a40      	ldr	r2, [pc, #256]	; (80026f0 <HAL_ETH_MspInit+0x15c>)
 80025ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80025f2:	6313      	str	r3, [r2, #48]	; 0x30
 80025f4:	4b3e      	ldr	r3, [pc, #248]	; (80026f0 <HAL_ETH_MspInit+0x15c>)
 80025f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025fc:	61bb      	str	r3, [r7, #24]
 80025fe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002600:	4b3b      	ldr	r3, [pc, #236]	; (80026f0 <HAL_ETH_MspInit+0x15c>)
 8002602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002604:	4a3a      	ldr	r2, [pc, #232]	; (80026f0 <HAL_ETH_MspInit+0x15c>)
 8002606:	f043 0304 	orr.w	r3, r3, #4
 800260a:	6313      	str	r3, [r2, #48]	; 0x30
 800260c:	4b38      	ldr	r3, [pc, #224]	; (80026f0 <HAL_ETH_MspInit+0x15c>)
 800260e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	617b      	str	r3, [r7, #20]
 8002616:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002618:	4b35      	ldr	r3, [pc, #212]	; (80026f0 <HAL_ETH_MspInit+0x15c>)
 800261a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261c:	4a34      	ldr	r2, [pc, #208]	; (80026f0 <HAL_ETH_MspInit+0x15c>)
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	6313      	str	r3, [r2, #48]	; 0x30
 8002624:	4b32      	ldr	r3, [pc, #200]	; (80026f0 <HAL_ETH_MspInit+0x15c>)
 8002626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	613b      	str	r3, [r7, #16]
 800262e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002630:	4b2f      	ldr	r3, [pc, #188]	; (80026f0 <HAL_ETH_MspInit+0x15c>)
 8002632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002634:	4a2e      	ldr	r2, [pc, #184]	; (80026f0 <HAL_ETH_MspInit+0x15c>)
 8002636:	f043 0302 	orr.w	r3, r3, #2
 800263a:	6313      	str	r3, [r2, #48]	; 0x30
 800263c:	4b2c      	ldr	r3, [pc, #176]	; (80026f0 <HAL_ETH_MspInit+0x15c>)
 800263e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002648:	4b29      	ldr	r3, [pc, #164]	; (80026f0 <HAL_ETH_MspInit+0x15c>)
 800264a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264c:	4a28      	ldr	r2, [pc, #160]	; (80026f0 <HAL_ETH_MspInit+0x15c>)
 800264e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002652:	6313      	str	r3, [r2, #48]	; 0x30
 8002654:	4b26      	ldr	r3, [pc, #152]	; (80026f0 <HAL_ETH_MspInit+0x15c>)
 8002656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800265c:	60bb      	str	r3, [r7, #8]
 800265e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002660:	2332      	movs	r3, #50	; 0x32
 8002662:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002664:	2302      	movs	r3, #2
 8002666:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800266c:	2303      	movs	r3, #3
 800266e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002670:	230b      	movs	r3, #11
 8002672:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002678:	4619      	mov	r1, r3
 800267a:	481e      	ldr	r0, [pc, #120]	; (80026f4 <HAL_ETH_MspInit+0x160>)
 800267c:	f001 fb54 	bl	8003d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002680:	2386      	movs	r3, #134	; 0x86
 8002682:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002684:	2302      	movs	r3, #2
 8002686:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002688:	2300      	movs	r3, #0
 800268a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800268c:	2303      	movs	r3, #3
 800268e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002690:	230b      	movs	r3, #11
 8002692:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002698:	4619      	mov	r1, r3
 800269a:	4817      	ldr	r0, [pc, #92]	; (80026f8 <HAL_ETH_MspInit+0x164>)
 800269c:	f001 fb44 	bl	8003d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80026a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a6:	2302      	movs	r3, #2
 80026a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ae:	2303      	movs	r3, #3
 80026b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80026b2:	230b      	movs	r3, #11
 80026b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80026b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ba:	4619      	mov	r1, r3
 80026bc:	480f      	ldr	r0, [pc, #60]	; (80026fc <HAL_ETH_MspInit+0x168>)
 80026be:	f001 fb33 	bl	8003d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80026c2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80026c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c8:	2302      	movs	r3, #2
 80026ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d0:	2303      	movs	r3, #3
 80026d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80026d4:	230b      	movs	r3, #11
 80026d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026dc:	4619      	mov	r1, r3
 80026de:	4808      	ldr	r0, [pc, #32]	; (8002700 <HAL_ETH_MspInit+0x16c>)
 80026e0:	f001 fb22 	bl	8003d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80026e4:	bf00      	nop
 80026e6:	3738      	adds	r7, #56	; 0x38
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40028000 	.word	0x40028000
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40020800 	.word	0x40020800
 80026f8:	40020000 	.word	0x40020000
 80026fc:	40020400 	.word	0x40020400
 8002700:	40021800 	.word	0x40021800

08002704 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b0b2      	sub	sp, #200	; 0xc8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800270c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	60da      	str	r2, [r3, #12]
 800271a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800271c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002720:	2290      	movs	r2, #144	; 0x90
 8002722:	2100      	movs	r1, #0
 8002724:	4618      	mov	r0, r3
 8002726:	f008 fde5 	bl	800b2f4 <memset>
  if(huart->Instance==UART4)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a7f      	ldr	r2, [pc, #508]	; (800292c <HAL_UART_MspInit+0x228>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d13d      	bne.n	80027b0 <HAL_UART_MspInit+0xac>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002734:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002738:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800273a:	2300      	movs	r3, #0
 800273c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800273e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002742:	4618      	mov	r0, r3
 8002744:	f002 fb64 	bl	8004e10 <HAL_RCCEx_PeriphCLKConfig>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800274e:	f7ff fef3 	bl	8002538 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002752:	4b77      	ldr	r3, [pc, #476]	; (8002930 <HAL_UART_MspInit+0x22c>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	4a76      	ldr	r2, [pc, #472]	; (8002930 <HAL_UART_MspInit+0x22c>)
 8002758:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800275c:	6413      	str	r3, [r2, #64]	; 0x40
 800275e:	4b74      	ldr	r3, [pc, #464]	; (8002930 <HAL_UART_MspInit+0x22c>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002766:	623b      	str	r3, [r7, #32]
 8002768:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800276a:	4b71      	ldr	r3, [pc, #452]	; (8002930 <HAL_UART_MspInit+0x22c>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	4a70      	ldr	r2, [pc, #448]	; (8002930 <HAL_UART_MspInit+0x22c>)
 8002770:	f043 0304 	orr.w	r3, r3, #4
 8002774:	6313      	str	r3, [r2, #48]	; 0x30
 8002776:	4b6e      	ldr	r3, [pc, #440]	; (8002930 <HAL_UART_MspInit+0x22c>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	f003 0304 	and.w	r3, r3, #4
 800277e:	61fb      	str	r3, [r7, #28]
 8002780:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002782:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002786:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278a:	2302      	movs	r3, #2
 800278c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002790:	2300      	movs	r3, #0
 8002792:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002796:	2303      	movs	r3, #3
 8002798:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800279c:	2308      	movs	r3, #8
 800279e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027a2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80027a6:	4619      	mov	r1, r3
 80027a8:	4862      	ldr	r0, [pc, #392]	; (8002934 <HAL_UART_MspInit+0x230>)
 80027aa:	f001 fabd 	bl	8003d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80027ae:	e0b8      	b.n	8002922 <HAL_UART_MspInit+0x21e>
  else if(huart->Instance==USART2)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a60      	ldr	r2, [pc, #384]	; (8002938 <HAL_UART_MspInit+0x234>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d171      	bne.n	800289e <HAL_UART_MspInit+0x19a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80027ba:	2380      	movs	r3, #128	; 0x80
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80027be:	2300      	movs	r3, #0
 80027c0:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027c6:	4618      	mov	r0, r3
 80027c8:	f002 fb22 	bl	8004e10 <HAL_RCCEx_PeriphCLKConfig>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 80027d2:	f7ff feb1 	bl	8002538 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027d6:	4b56      	ldr	r3, [pc, #344]	; (8002930 <HAL_UART_MspInit+0x22c>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	4a55      	ldr	r2, [pc, #340]	; (8002930 <HAL_UART_MspInit+0x22c>)
 80027dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027e0:	6413      	str	r3, [r2, #64]	; 0x40
 80027e2:	4b53      	ldr	r3, [pc, #332]	; (8002930 <HAL_UART_MspInit+0x22c>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ea:	61bb      	str	r3, [r7, #24]
 80027ec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027ee:	4b50      	ldr	r3, [pc, #320]	; (8002930 <HAL_UART_MspInit+0x22c>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	4a4f      	ldr	r2, [pc, #316]	; (8002930 <HAL_UART_MspInit+0x22c>)
 80027f4:	f043 0308 	orr.w	r3, r3, #8
 80027f8:	6313      	str	r3, [r2, #48]	; 0x30
 80027fa:	4b4d      	ldr	r3, [pc, #308]	; (8002930 <HAL_UART_MspInit+0x22c>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	f003 0308 	and.w	r3, r3, #8
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002806:	2360      	movs	r3, #96	; 0x60
 8002808:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280c:	2302      	movs	r3, #2
 800280e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002812:	2300      	movs	r3, #0
 8002814:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002818:	2303      	movs	r3, #3
 800281a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800281e:	2307      	movs	r3, #7
 8002820:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002824:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002828:	4619      	mov	r1, r3
 800282a:	4844      	ldr	r0, [pc, #272]	; (800293c <HAL_UART_MspInit+0x238>)
 800282c:	f001 fa7c 	bl	8003d28 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002830:	4b43      	ldr	r3, [pc, #268]	; (8002940 <HAL_UART_MspInit+0x23c>)
 8002832:	4a44      	ldr	r2, [pc, #272]	; (8002944 <HAL_UART_MspInit+0x240>)
 8002834:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002836:	4b42      	ldr	r3, [pc, #264]	; (8002940 <HAL_UART_MspInit+0x23c>)
 8002838:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800283c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800283e:	4b40      	ldr	r3, [pc, #256]	; (8002940 <HAL_UART_MspInit+0x23c>)
 8002840:	2200      	movs	r2, #0
 8002842:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002844:	4b3e      	ldr	r3, [pc, #248]	; (8002940 <HAL_UART_MspInit+0x23c>)
 8002846:	2200      	movs	r2, #0
 8002848:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800284a:	4b3d      	ldr	r3, [pc, #244]	; (8002940 <HAL_UART_MspInit+0x23c>)
 800284c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002850:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002852:	4b3b      	ldr	r3, [pc, #236]	; (8002940 <HAL_UART_MspInit+0x23c>)
 8002854:	2200      	movs	r2, #0
 8002856:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002858:	4b39      	ldr	r3, [pc, #228]	; (8002940 <HAL_UART_MspInit+0x23c>)
 800285a:	2200      	movs	r2, #0
 800285c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800285e:	4b38      	ldr	r3, [pc, #224]	; (8002940 <HAL_UART_MspInit+0x23c>)
 8002860:	2200      	movs	r2, #0
 8002862:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002864:	4b36      	ldr	r3, [pc, #216]	; (8002940 <HAL_UART_MspInit+0x23c>)
 8002866:	2200      	movs	r2, #0
 8002868:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800286a:	4b35      	ldr	r3, [pc, #212]	; (8002940 <HAL_UART_MspInit+0x23c>)
 800286c:	2200      	movs	r2, #0
 800286e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002870:	4833      	ldr	r0, [pc, #204]	; (8002940 <HAL_UART_MspInit+0x23c>)
 8002872:	f000 faed 	bl	8002e50 <HAL_DMA_Init>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <HAL_UART_MspInit+0x17c>
      Error_Handler();
 800287c:	f7ff fe5c 	bl	8002538 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a2f      	ldr	r2, [pc, #188]	; (8002940 <HAL_UART_MspInit+0x23c>)
 8002884:	675a      	str	r2, [r3, #116]	; 0x74
 8002886:	4a2e      	ldr	r2, [pc, #184]	; (8002940 <HAL_UART_MspInit+0x23c>)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800288c:	2200      	movs	r2, #0
 800288e:	2105      	movs	r1, #5
 8002890:	2026      	movs	r0, #38	; 0x26
 8002892:	f000 fab3 	bl	8002dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002896:	2026      	movs	r0, #38	; 0x26
 8002898:	f000 facc 	bl	8002e34 <HAL_NVIC_EnableIRQ>
}
 800289c:	e041      	b.n	8002922 <HAL_UART_MspInit+0x21e>
  else if(huart->Instance==USART3)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a29      	ldr	r2, [pc, #164]	; (8002948 <HAL_UART_MspInit+0x244>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d13c      	bne.n	8002922 <HAL_UART_MspInit+0x21e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80028a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80028ae:	2300      	movs	r3, #0
 80028b0:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028b6:	4618      	mov	r0, r3
 80028b8:	f002 faaa 	bl	8004e10 <HAL_RCCEx_PeriphCLKConfig>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_UART_MspInit+0x1c2>
      Error_Handler();
 80028c2:	f7ff fe39 	bl	8002538 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80028c6:	4b1a      	ldr	r3, [pc, #104]	; (8002930 <HAL_UART_MspInit+0x22c>)
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	4a19      	ldr	r2, [pc, #100]	; (8002930 <HAL_UART_MspInit+0x22c>)
 80028cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028d0:	6413      	str	r3, [r2, #64]	; 0x40
 80028d2:	4b17      	ldr	r3, [pc, #92]	; (8002930 <HAL_UART_MspInit+0x22c>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028da:	613b      	str	r3, [r7, #16]
 80028dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028de:	4b14      	ldr	r3, [pc, #80]	; (8002930 <HAL_UART_MspInit+0x22c>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	4a13      	ldr	r2, [pc, #76]	; (8002930 <HAL_UART_MspInit+0x22c>)
 80028e4:	f043 0308 	orr.w	r3, r3, #8
 80028e8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ea:	4b11      	ldr	r3, [pc, #68]	; (8002930 <HAL_UART_MspInit+0x22c>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	f003 0308 	and.w	r3, r3, #8
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80028f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fe:	2302      	movs	r3, #2
 8002900:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002904:	2300      	movs	r3, #0
 8002906:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800290a:	2303      	movs	r3, #3
 800290c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002910:	2307      	movs	r3, #7
 8002912:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002916:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800291a:	4619      	mov	r1, r3
 800291c:	4807      	ldr	r0, [pc, #28]	; (800293c <HAL_UART_MspInit+0x238>)
 800291e:	f001 fa03 	bl	8003d28 <HAL_GPIO_Init>
}
 8002922:	bf00      	nop
 8002924:	37c8      	adds	r7, #200	; 0xc8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40004c00 	.word	0x40004c00
 8002930:	40023800 	.word	0x40023800
 8002934:	40020800 	.word	0x40020800
 8002938:	40004400 	.word	0x40004400
 800293c:	40020c00 	.word	0x40020c00
 8002940:	20000f50 	.word	0x20000f50
 8002944:	40026088 	.word	0x40026088
 8002948:	40004800 	.word	0x40004800

0800294c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b0ae      	sub	sp, #184	; 0xb8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002954:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	605a      	str	r2, [r3, #4]
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	60da      	str	r2, [r3, #12]
 8002962:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002964:	f107 0314 	add.w	r3, r7, #20
 8002968:	2290      	movs	r2, #144	; 0x90
 800296a:	2100      	movs	r1, #0
 800296c:	4618      	mov	r0, r3
 800296e:	f008 fcc1 	bl	800b2f4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800297a:	d159      	bne.n	8002a30 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800297c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002980:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002982:	2300      	movs	r3, #0
 8002984:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002988:	f107 0314 	add.w	r3, r7, #20
 800298c:	4618      	mov	r0, r3
 800298e:	f002 fa3f 	bl	8004e10 <HAL_RCCEx_PeriphCLKConfig>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002998:	f7ff fdce 	bl	8002538 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800299c:	4b26      	ldr	r3, [pc, #152]	; (8002a38 <HAL_PCD_MspInit+0xec>)
 800299e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a0:	4a25      	ldr	r2, [pc, #148]	; (8002a38 <HAL_PCD_MspInit+0xec>)
 80029a2:	f043 0301 	orr.w	r3, r3, #1
 80029a6:	6313      	str	r3, [r2, #48]	; 0x30
 80029a8:	4b23      	ldr	r3, [pc, #140]	; (8002a38 <HAL_PCD_MspInit+0xec>)
 80029aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	613b      	str	r3, [r7, #16]
 80029b2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80029b4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80029b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029bc:	2302      	movs	r3, #2
 80029be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c2:	2300      	movs	r3, #0
 80029c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c8:	2303      	movs	r3, #3
 80029ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80029ce:	230a      	movs	r3, #10
 80029d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80029d8:	4619      	mov	r1, r3
 80029da:	4818      	ldr	r0, [pc, #96]	; (8002a3c <HAL_PCD_MspInit+0xf0>)
 80029dc:	f001 f9a4 	bl	8003d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80029e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029e8:	2300      	movs	r3, #0
 80029ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ee:	2300      	movs	r3, #0
 80029f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80029f4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80029f8:	4619      	mov	r1, r3
 80029fa:	4810      	ldr	r0, [pc, #64]	; (8002a3c <HAL_PCD_MspInit+0xf0>)
 80029fc:	f001 f994 	bl	8003d28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002a00:	4b0d      	ldr	r3, [pc, #52]	; (8002a38 <HAL_PCD_MspInit+0xec>)
 8002a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a04:	4a0c      	ldr	r2, [pc, #48]	; (8002a38 <HAL_PCD_MspInit+0xec>)
 8002a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a0a:	6353      	str	r3, [r2, #52]	; 0x34
 8002a0c:	4b0a      	ldr	r3, [pc, #40]	; (8002a38 <HAL_PCD_MspInit+0xec>)
 8002a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	4b07      	ldr	r3, [pc, #28]	; (8002a38 <HAL_PCD_MspInit+0xec>)
 8002a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1c:	4a06      	ldr	r2, [pc, #24]	; (8002a38 <HAL_PCD_MspInit+0xec>)
 8002a1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a22:	6453      	str	r3, [r2, #68]	; 0x44
 8002a24:	4b04      	ldr	r3, [pc, #16]	; (8002a38 <HAL_PCD_MspInit+0xec>)
 8002a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a2c:	60bb      	str	r3, [r7, #8]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002a30:	bf00      	nop
 8002a32:	37b8      	adds	r7, #184	; 0xb8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	40020000 	.word	0x40020000

08002a40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08c      	sub	sp, #48	; 0x30
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002a50:	4b2e      	ldr	r3, [pc, #184]	; (8002b0c <HAL_InitTick+0xcc>)
 8002a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a54:	4a2d      	ldr	r2, [pc, #180]	; (8002b0c <HAL_InitTick+0xcc>)
 8002a56:	f043 0301 	orr.w	r3, r3, #1
 8002a5a:	6453      	str	r3, [r2, #68]	; 0x44
 8002a5c:	4b2b      	ldr	r3, [pc, #172]	; (8002b0c <HAL_InitTick+0xcc>)
 8002a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a68:	f107 020c 	add.w	r2, r7, #12
 8002a6c:	f107 0310 	add.w	r3, r7, #16
 8002a70:	4611      	mov	r1, r2
 8002a72:	4618      	mov	r0, r3
 8002a74:	f002 f99a 	bl	8004dac <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002a78:	f002 f984 	bl	8004d84 <HAL_RCC_GetPCLK2Freq>
 8002a7c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a80:	4a23      	ldr	r2, [pc, #140]	; (8002b10 <HAL_InitTick+0xd0>)
 8002a82:	fba2 2303 	umull	r2, r3, r2, r3
 8002a86:	0c9b      	lsrs	r3, r3, #18
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002a8c:	4b21      	ldr	r3, [pc, #132]	; (8002b14 <HAL_InitTick+0xd4>)
 8002a8e:	4a22      	ldr	r2, [pc, #136]	; (8002b18 <HAL_InitTick+0xd8>)
 8002a90:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002a92:	4b20      	ldr	r3, [pc, #128]	; (8002b14 <HAL_InitTick+0xd4>)
 8002a94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a98:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002a9a:	4a1e      	ldr	r2, [pc, #120]	; (8002b14 <HAL_InitTick+0xd4>)
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002aa0:	4b1c      	ldr	r3, [pc, #112]	; (8002b14 <HAL_InitTick+0xd4>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aa6:	4b1b      	ldr	r3, [pc, #108]	; (8002b14 <HAL_InitTick+0xd4>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aac:	4b19      	ldr	r3, [pc, #100]	; (8002b14 <HAL_InitTick+0xd4>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002ab2:	4818      	ldr	r0, [pc, #96]	; (8002b14 <HAL_InitTick+0xd4>)
 8002ab4:	f002 fdd4 	bl	8005660 <HAL_TIM_Base_Init>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002abe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d11b      	bne.n	8002afe <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002ac6:	4813      	ldr	r0, [pc, #76]	; (8002b14 <HAL_InitTick+0xd4>)
 8002ac8:	f002 fe2c 	bl	8005724 <HAL_TIM_Base_Start_IT>
 8002acc:	4603      	mov	r3, r0
 8002ace:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002ad2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d111      	bne.n	8002afe <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002ada:	2019      	movs	r0, #25
 8002adc:	f000 f9aa 	bl	8002e34 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b0f      	cmp	r3, #15
 8002ae4:	d808      	bhi.n	8002af8 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	6879      	ldr	r1, [r7, #4]
 8002aea:	2019      	movs	r0, #25
 8002aec:	f000 f986 	bl	8002dfc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002af0:	4a0a      	ldr	r2, [pc, #40]	; (8002b1c <HAL_InitTick+0xdc>)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	e002      	b.n	8002afe <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002afe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3730      	adds	r7, #48	; 0x30
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	431bde83 	.word	0x431bde83
 8002b14:	200014d0 	.word	0x200014d0
 8002b18:	40010000 	.word	0x40010000
 8002b1c:	20000008 	.word	0x20000008

08002b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b24:	e7fe      	b.n	8002b24 <NMI_Handler+0x4>

08002b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b26:	b480      	push	{r7}
 8002b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b2a:	e7fe      	b.n	8002b2a <HardFault_Handler+0x4>

08002b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b30:	e7fe      	b.n	8002b30 <MemManage_Handler+0x4>

08002b32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b32:	b480      	push	{r7}
 8002b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b36:	e7fe      	b.n	8002b36 <BusFault_Handler+0x4>

08002b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b3c:	e7fe      	b.n	8002b3c <UsageFault_Handler+0x4>

08002b3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b42:	bf00      	nop
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b50:	4802      	ldr	r0, [pc, #8]	; (8002b5c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002b52:	f002 fe5f 	bl	8005814 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002b56:	bf00      	nop
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	200014d0 	.word	0x200014d0

08002b60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b64:	4802      	ldr	r0, [pc, #8]	; (8002b70 <USART2_IRQHandler+0x10>)
 8002b66:	f003 f971 	bl	8005e4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b6a:	bf00      	nop
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	20000e40 	.word	0x20000e40

08002b74 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b78:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <SystemInit+0x20>)
 8002b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7e:	4a05      	ldr	r2, [pc, #20]	; (8002b94 <SystemInit+0x20>)
 8002b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b88:	bf00      	nop
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	e000ed00 	.word	0xe000ed00

08002b98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b9c:	480d      	ldr	r0, [pc, #52]	; (8002bd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b9e:	490e      	ldr	r1, [pc, #56]	; (8002bd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ba0:	4a0e      	ldr	r2, [pc, #56]	; (8002bdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ba4:	e002      	b.n	8002bac <LoopCopyDataInit>

08002ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002baa:	3304      	adds	r3, #4

08002bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bb0:	d3f9      	bcc.n	8002ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bb2:	4a0b      	ldr	r2, [pc, #44]	; (8002be0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002bb4:	4c0b      	ldr	r4, [pc, #44]	; (8002be4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bb8:	e001      	b.n	8002bbe <LoopFillZerobss>

08002bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bbc:	3204      	adds	r2, #4

08002bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bc0:	d3fb      	bcc.n	8002bba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002bc2:	f7ff ffd7 	bl	8002b74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bc6:	f008 fb61 	bl	800b28c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bca:	f7ff f8d5 	bl	8001d78 <main>
  bx  lr    
 8002bce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002bd0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bd8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002bdc:	0800b6a0 	.word	0x0800b6a0
  ldr r2, =_sbss
 8002be0:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 8002be4:	20005f30 	.word	0x20005f30

08002be8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002be8:	e7fe      	b.n	8002be8 <ADC_IRQHandler>

08002bea <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bee:	2003      	movs	r0, #3
 8002bf0:	f000 f8f9 	bl	8002de6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bf4:	200f      	movs	r0, #15
 8002bf6:	f7ff ff23 	bl	8002a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bfa:	f7ff fca3 	bl	8002544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c08:	4b06      	ldr	r3, [pc, #24]	; (8002c24 <HAL_IncTick+0x20>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <HAL_IncTick+0x24>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4413      	add	r3, r2
 8002c14:	4a04      	ldr	r2, [pc, #16]	; (8002c28 <HAL_IncTick+0x24>)
 8002c16:	6013      	str	r3, [r2, #0]
}
 8002c18:	bf00      	nop
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	2000000c 	.word	0x2000000c
 8002c28:	2000151c 	.word	0x2000151c

08002c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c30:	4b03      	ldr	r3, [pc, #12]	; (8002c40 <HAL_GetTick+0x14>)
 8002c32:	681b      	ldr	r3, [r3, #0]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	2000151c 	.word	0x2000151c

08002c44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c4c:	f7ff ffee 	bl	8002c2c <HAL_GetTick>
 8002c50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c5c:	d005      	beq.n	8002c6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c5e:	4b0a      	ldr	r3, [pc, #40]	; (8002c88 <HAL_Delay+0x44>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	461a      	mov	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	4413      	add	r3, r2
 8002c68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c6a:	bf00      	nop
 8002c6c:	f7ff ffde 	bl	8002c2c <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d8f7      	bhi.n	8002c6c <HAL_Delay+0x28>
  {
  }
}
 8002c7c:	bf00      	nop
 8002c7e:	bf00      	nop
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	2000000c 	.word	0x2000000c

08002c8c <__NVIC_SetPriorityGrouping>:
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ccc <__NVIC_SetPriorityGrouping+0x40>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ca8:	4013      	ands	r3, r2
 8002caa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002cb4:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cba:	4a04      	ldr	r2, [pc, #16]	; (8002ccc <__NVIC_SetPriorityGrouping+0x40>)
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	60d3      	str	r3, [r2, #12]
}
 8002cc0:	bf00      	nop
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	e000ed00 	.word	0xe000ed00
 8002cd0:	05fa0000 	.word	0x05fa0000

08002cd4 <__NVIC_GetPriorityGrouping>:
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cd8:	4b04      	ldr	r3, [pc, #16]	; (8002cec <__NVIC_GetPriorityGrouping+0x18>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	0a1b      	lsrs	r3, r3, #8
 8002cde:	f003 0307 	and.w	r3, r3, #7
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	e000ed00 	.word	0xe000ed00

08002cf0 <__NVIC_EnableIRQ>:
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	db0b      	blt.n	8002d1a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d02:	79fb      	ldrb	r3, [r7, #7]
 8002d04:	f003 021f 	and.w	r2, r3, #31
 8002d08:	4907      	ldr	r1, [pc, #28]	; (8002d28 <__NVIC_EnableIRQ+0x38>)
 8002d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0e:	095b      	lsrs	r3, r3, #5
 8002d10:	2001      	movs	r0, #1
 8002d12:	fa00 f202 	lsl.w	r2, r0, r2
 8002d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	e000e100 	.word	0xe000e100

08002d2c <__NVIC_SetPriority>:
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	6039      	str	r1, [r7, #0]
 8002d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	db0a      	blt.n	8002d56 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	490c      	ldr	r1, [pc, #48]	; (8002d78 <__NVIC_SetPriority+0x4c>)
 8002d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4a:	0112      	lsls	r2, r2, #4
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	440b      	add	r3, r1
 8002d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002d54:	e00a      	b.n	8002d6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	4908      	ldr	r1, [pc, #32]	; (8002d7c <__NVIC_SetPriority+0x50>)
 8002d5c:	79fb      	ldrb	r3, [r7, #7]
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	3b04      	subs	r3, #4
 8002d64:	0112      	lsls	r2, r2, #4
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	440b      	add	r3, r1
 8002d6a:	761a      	strb	r2, [r3, #24]
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	e000e100 	.word	0xe000e100
 8002d7c:	e000ed00 	.word	0xe000ed00

08002d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b089      	sub	sp, #36	; 0x24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	f1c3 0307 	rsb	r3, r3, #7
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	bf28      	it	cs
 8002d9e:	2304      	movcs	r3, #4
 8002da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	3304      	adds	r3, #4
 8002da6:	2b06      	cmp	r3, #6
 8002da8:	d902      	bls.n	8002db0 <NVIC_EncodePriority+0x30>
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	3b03      	subs	r3, #3
 8002dae:	e000      	b.n	8002db2 <NVIC_EncodePriority+0x32>
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db4:	f04f 32ff 	mov.w	r2, #4294967295
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	43da      	mvns	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	401a      	ands	r2, r3
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd2:	43d9      	mvns	r1, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd8:	4313      	orrs	r3, r2
         );
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3724      	adds	r7, #36	; 0x24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b082      	sub	sp, #8
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7ff ff4c 	bl	8002c8c <__NVIC_SetPriorityGrouping>
}
 8002df4:	bf00      	nop
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
 8002e08:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e0e:	f7ff ff61 	bl	8002cd4 <__NVIC_GetPriorityGrouping>
 8002e12:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	68b9      	ldr	r1, [r7, #8]
 8002e18:	6978      	ldr	r0, [r7, #20]
 8002e1a:	f7ff ffb1 	bl	8002d80 <NVIC_EncodePriority>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e24:	4611      	mov	r1, r2
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff ff80 	bl	8002d2c <__NVIC_SetPriority>
}
 8002e2c:	bf00      	nop
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff ff54 	bl	8002cf0 <__NVIC_EnableIRQ>
}
 8002e48:	bf00      	nop
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e5c:	f7ff fee6 	bl	8002c2c <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e099      	b.n	8002fa0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0201 	bic.w	r2, r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e8c:	e00f      	b.n	8002eae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e8e:	f7ff fecd 	bl	8002c2c <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b05      	cmp	r3, #5
 8002e9a:	d908      	bls.n	8002eae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2203      	movs	r2, #3
 8002ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e078      	b.n	8002fa0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1e8      	bne.n	8002e8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	4b38      	ldr	r3, [pc, #224]	; (8002fa8 <HAL_DMA_Init+0x158>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ee6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ef2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d107      	bne.n	8002f18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f10:	4313      	orrs	r3, r2
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	f023 0307 	bic.w	r3, r3, #7
 8002f2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d117      	bne.n	8002f72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00e      	beq.n	8002f72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 fb45 	bl	80035e4 <DMA_CheckFifoParam>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d008      	beq.n	8002f72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2240      	movs	r2, #64	; 0x40
 8002f64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e016      	b.n	8002fa0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 fafc 	bl	8003578 <DMA_CalcBaseAndBitshift>
 8002f80:	4603      	mov	r3, r0
 8002f82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f88:	223f      	movs	r2, #63	; 0x3f
 8002f8a:	409a      	lsls	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3718      	adds	r7, #24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	e010803f 	.word	0xe010803f

08002fac <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
 8002fb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d101      	bne.n	8002fcc <HAL_DMA_Start+0x20>
 8002fc8:	2302      	movs	r3, #2
 8002fca:	e026      	b.n	800301a <HAL_DMA_Start+0x6e>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d115      	bne.n	800300c <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	68b9      	ldr	r1, [r7, #8]
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 fa91 	bl	800351c <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f042 0201 	orr.w	r2, r2, #1
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	e005      	b.n	8003018 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003014:	2302      	movs	r3, #2
 8003016:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8003018:	7dfb      	ldrb	r3, [r7, #23]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b086      	sub	sp, #24
 8003026:	af00      	add	r7, sp, #0
 8003028:	60f8      	str	r0, [r7, #12]
 800302a:	60b9      	str	r1, [r7, #8]
 800302c:	607a      	str	r2, [r7, #4]
 800302e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003030:	2300      	movs	r3, #0
 8003032:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003038:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <HAL_DMA_Start_IT+0x26>
 8003044:	2302      	movs	r3, #2
 8003046:	e048      	b.n	80030da <HAL_DMA_Start_IT+0xb8>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b01      	cmp	r3, #1
 800305a:	d137      	bne.n	80030cc <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2202      	movs	r2, #2
 8003060:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	68b9      	ldr	r1, [r7, #8]
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f000 fa53 	bl	800351c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307a:	223f      	movs	r2, #63	; 0x3f
 800307c:	409a      	lsls	r2, r3
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f042 0216 	orr.w	r2, r2, #22
 8003090:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	695a      	ldr	r2, [r3, #20]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030a0:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d007      	beq.n	80030ba <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f042 0208 	orr.w	r2, r2, #8
 80030b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f042 0201 	orr.w	r2, r2, #1
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	e005      	b.n	80030d8 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80030d4:	2302      	movs	r3, #2
 80030d6:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80030d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3718      	adds	r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b084      	sub	sp, #16
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80030f0:	f7ff fd9c 	bl	8002c2c <HAL_GetTick>
 80030f4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d008      	beq.n	8003114 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2280      	movs	r2, #128	; 0x80
 8003106:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e052      	b.n	80031ba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0216 	bic.w	r2, r2, #22
 8003122:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695a      	ldr	r2, [r3, #20]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003132:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003138:	2b00      	cmp	r3, #0
 800313a:	d103      	bne.n	8003144 <HAL_DMA_Abort+0x62>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003140:	2b00      	cmp	r3, #0
 8003142:	d007      	beq.n	8003154 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0208 	bic.w	r2, r2, #8
 8003152:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 0201 	bic.w	r2, r2, #1
 8003162:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003164:	e013      	b.n	800318e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003166:	f7ff fd61 	bl	8002c2c <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b05      	cmp	r3, #5
 8003172:	d90c      	bls.n	800318e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2220      	movs	r2, #32
 8003178:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2203      	movs	r2, #3
 800317e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e015      	b.n	80031ba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1e4      	bne.n	8003166 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a0:	223f      	movs	r2, #63	; 0x3f
 80031a2:	409a      	lsls	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d004      	beq.n	80031e0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2280      	movs	r2, #128	; 0x80
 80031da:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e00c      	b.n	80031fa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2205      	movs	r2, #5
 80031e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0201 	bic.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
	...

08003208 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003210:	2300      	movs	r3, #0
 8003212:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003214:	4b8e      	ldr	r3, [pc, #568]	; (8003450 <HAL_DMA_IRQHandler+0x248>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a8e      	ldr	r2, [pc, #568]	; (8003454 <HAL_DMA_IRQHandler+0x24c>)
 800321a:	fba2 2303 	umull	r2, r3, r2, r3
 800321e:	0a9b      	lsrs	r3, r3, #10
 8003220:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003226:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003232:	2208      	movs	r2, #8
 8003234:	409a      	lsls	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	4013      	ands	r3, r2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d01a      	beq.n	8003274 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b00      	cmp	r3, #0
 800324a:	d013      	beq.n	8003274 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 0204 	bic.w	r2, r2, #4
 800325a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003260:	2208      	movs	r2, #8
 8003262:	409a      	lsls	r2, r3
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326c:	f043 0201 	orr.w	r2, r3, #1
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003278:	2201      	movs	r2, #1
 800327a:	409a      	lsls	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4013      	ands	r3, r2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d012      	beq.n	80032aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00b      	beq.n	80032aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003296:	2201      	movs	r2, #1
 8003298:	409a      	lsls	r2, r3
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a2:	f043 0202 	orr.w	r2, r3, #2
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ae:	2204      	movs	r2, #4
 80032b0:	409a      	lsls	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	4013      	ands	r3, r2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d012      	beq.n	80032e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00b      	beq.n	80032e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032cc:	2204      	movs	r2, #4
 80032ce:	409a      	lsls	r2, r3
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d8:	f043 0204 	orr.w	r2, r3, #4
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e4:	2210      	movs	r2, #16
 80032e6:	409a      	lsls	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4013      	ands	r3, r2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d043      	beq.n	8003378 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d03c      	beq.n	8003378 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003302:	2210      	movs	r2, #16
 8003304:	409a      	lsls	r2, r3
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d018      	beq.n	800334a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d108      	bne.n	8003338 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	2b00      	cmp	r3, #0
 800332c:	d024      	beq.n	8003378 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	4798      	blx	r3
 8003336:	e01f      	b.n	8003378 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800333c:	2b00      	cmp	r3, #0
 800333e:	d01b      	beq.n	8003378 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	4798      	blx	r3
 8003348:	e016      	b.n	8003378 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003354:	2b00      	cmp	r3, #0
 8003356:	d107      	bne.n	8003368 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0208 	bic.w	r2, r2, #8
 8003366:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337c:	2220      	movs	r2, #32
 800337e:	409a      	lsls	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4013      	ands	r3, r2
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 808f 	beq.w	80034a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0310 	and.w	r3, r3, #16
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 8087 	beq.w	80034a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339e:	2220      	movs	r2, #32
 80033a0:	409a      	lsls	r2, r3
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b05      	cmp	r3, #5
 80033b0:	d136      	bne.n	8003420 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 0216 	bic.w	r2, r2, #22
 80033c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	695a      	ldr	r2, [r3, #20]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d103      	bne.n	80033e2 <HAL_DMA_IRQHandler+0x1da>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d007      	beq.n	80033f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 0208 	bic.w	r2, r2, #8
 80033f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f6:	223f      	movs	r2, #63	; 0x3f
 80033f8:	409a      	lsls	r2, r3
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003412:	2b00      	cmp	r3, #0
 8003414:	d07e      	beq.n	8003514 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	4798      	blx	r3
        }
        return;
 800341e:	e079      	b.n	8003514 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d01d      	beq.n	800346a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10d      	bne.n	8003458 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003440:	2b00      	cmp	r3, #0
 8003442:	d031      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	4798      	blx	r3
 800344c:	e02c      	b.n	80034a8 <HAL_DMA_IRQHandler+0x2a0>
 800344e:	bf00      	nop
 8003450:	20000004 	.word	0x20000004
 8003454:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800345c:	2b00      	cmp	r3, #0
 800345e:	d023      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	4798      	blx	r3
 8003468:	e01e      	b.n	80034a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10f      	bne.n	8003498 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0210 	bic.w	r2, r2, #16
 8003486:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d032      	beq.n	8003516 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d022      	beq.n	8003502 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2205      	movs	r2, #5
 80034c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0201 	bic.w	r2, r2, #1
 80034d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	3301      	adds	r3, #1
 80034d8:	60bb      	str	r3, [r7, #8]
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d307      	bcc.n	80034f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1f2      	bne.n	80034d4 <HAL_DMA_IRQHandler+0x2cc>
 80034ee:	e000      	b.n	80034f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80034f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003506:	2b00      	cmp	r3, #0
 8003508:	d005      	beq.n	8003516 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	4798      	blx	r3
 8003512:	e000      	b.n	8003516 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003514:	bf00      	nop
    }
  }
}
 8003516:	3718      	adds	r7, #24
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
 8003528:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003538:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	2b40      	cmp	r3, #64	; 0x40
 8003548:	d108      	bne.n	800355c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800355a:	e007      	b.n	800356c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	60da      	str	r2, [r3, #12]
}
 800356c:	bf00      	nop
 800356e:	3714      	adds	r7, #20
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	b2db      	uxtb	r3, r3
 8003586:	3b10      	subs	r3, #16
 8003588:	4a13      	ldr	r2, [pc, #76]	; (80035d8 <DMA_CalcBaseAndBitshift+0x60>)
 800358a:	fba2 2303 	umull	r2, r3, r2, r3
 800358e:	091b      	lsrs	r3, r3, #4
 8003590:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003592:	4a12      	ldr	r2, [pc, #72]	; (80035dc <DMA_CalcBaseAndBitshift+0x64>)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	4413      	add	r3, r2
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	461a      	mov	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d908      	bls.n	80035b8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	461a      	mov	r2, r3
 80035ac:	4b0c      	ldr	r3, [pc, #48]	; (80035e0 <DMA_CalcBaseAndBitshift+0x68>)
 80035ae:	4013      	ands	r3, r2
 80035b0:	1d1a      	adds	r2, r3, #4
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	659a      	str	r2, [r3, #88]	; 0x58
 80035b6:	e006      	b.n	80035c6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	461a      	mov	r2, r3
 80035be:	4b08      	ldr	r3, [pc, #32]	; (80035e0 <DMA_CalcBaseAndBitshift+0x68>)
 80035c0:	4013      	ands	r3, r2
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3714      	adds	r7, #20
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	aaaaaaab 	.word	0xaaaaaaab
 80035dc:	0800b628 	.word	0x0800b628
 80035e0:	fffffc00 	.word	0xfffffc00

080035e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035ec:	2300      	movs	r3, #0
 80035ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d11f      	bne.n	800363e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2b03      	cmp	r3, #3
 8003602:	d856      	bhi.n	80036b2 <DMA_CheckFifoParam+0xce>
 8003604:	a201      	add	r2, pc, #4	; (adr r2, 800360c <DMA_CheckFifoParam+0x28>)
 8003606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360a:	bf00      	nop
 800360c:	0800361d 	.word	0x0800361d
 8003610:	0800362f 	.word	0x0800362f
 8003614:	0800361d 	.word	0x0800361d
 8003618:	080036b3 	.word	0x080036b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003620:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d046      	beq.n	80036b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800362c:	e043      	b.n	80036b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003632:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003636:	d140      	bne.n	80036ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800363c:	e03d      	b.n	80036ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003646:	d121      	bne.n	800368c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2b03      	cmp	r3, #3
 800364c:	d837      	bhi.n	80036be <DMA_CheckFifoParam+0xda>
 800364e:	a201      	add	r2, pc, #4	; (adr r2, 8003654 <DMA_CheckFifoParam+0x70>)
 8003650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003654:	08003665 	.word	0x08003665
 8003658:	0800366b 	.word	0x0800366b
 800365c:	08003665 	.word	0x08003665
 8003660:	0800367d 	.word	0x0800367d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	73fb      	strb	r3, [r7, #15]
      break;
 8003668:	e030      	b.n	80036cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d025      	beq.n	80036c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800367a:	e022      	b.n	80036c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003680:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003684:	d11f      	bne.n	80036c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800368a:	e01c      	b.n	80036c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	2b02      	cmp	r3, #2
 8003690:	d903      	bls.n	800369a <DMA_CheckFifoParam+0xb6>
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2b03      	cmp	r3, #3
 8003696:	d003      	beq.n	80036a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003698:	e018      	b.n	80036cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	73fb      	strb	r3, [r7, #15]
      break;
 800369e:	e015      	b.n	80036cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00e      	beq.n	80036ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	73fb      	strb	r3, [r7, #15]
      break;
 80036b0:	e00b      	b.n	80036ca <DMA_CheckFifoParam+0xe6>
      break;
 80036b2:	bf00      	nop
 80036b4:	e00a      	b.n	80036cc <DMA_CheckFifoParam+0xe8>
      break;
 80036b6:	bf00      	nop
 80036b8:	e008      	b.n	80036cc <DMA_CheckFifoParam+0xe8>
      break;
 80036ba:	bf00      	nop
 80036bc:	e006      	b.n	80036cc <DMA_CheckFifoParam+0xe8>
      break;
 80036be:	bf00      	nop
 80036c0:	e004      	b.n	80036cc <DMA_CheckFifoParam+0xe8>
      break;
 80036c2:	bf00      	nop
 80036c4:	e002      	b.n	80036cc <DMA_CheckFifoParam+0xe8>
      break;   
 80036c6:	bf00      	nop
 80036c8:	e000      	b.n	80036cc <DMA_CheckFifoParam+0xe8>
      break;
 80036ca:	bf00      	nop
    }
  } 
  
  return status; 
 80036cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop

080036dc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e06a      	b.n	80037c4 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d106      	bne.n	8003706 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2223      	movs	r2, #35	; 0x23
 80036fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f7fe ff47 	bl	8002594 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003706:	4b31      	ldr	r3, [pc, #196]	; (80037cc <HAL_ETH_Init+0xf0>)
 8003708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370a:	4a30      	ldr	r2, [pc, #192]	; (80037cc <HAL_ETH_Init+0xf0>)
 800370c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003710:	6453      	str	r3, [r2, #68]	; 0x44
 8003712:	4b2e      	ldr	r3, [pc, #184]	; (80037cc <HAL_ETH_Init+0xf0>)
 8003714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800371a:	60bb      	str	r3, [r7, #8]
 800371c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800371e:	4b2c      	ldr	r3, [pc, #176]	; (80037d0 <HAL_ETH_Init+0xf4>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	4a2b      	ldr	r2, [pc, #172]	; (80037d0 <HAL_ETH_Init+0xf4>)
 8003724:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003728:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800372a:	4b29      	ldr	r3, [pc, #164]	; (80037d0 <HAL_ETH_Init+0xf4>)
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	4927      	ldr	r1, [pc, #156]	; (80037d0 <HAL_ETH_Init+0xf4>)
 8003734:	4313      	orrs	r3, r2
 8003736:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003738:	4b25      	ldr	r3, [pc, #148]	; (80037d0 <HAL_ETH_Init+0xf4>)
 800373a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6812      	ldr	r2, [r2, #0]
 800374a:	f043 0301 	orr.w	r3, r3, #1
 800374e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003752:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003754:	f7ff fa6a 	bl	8002c2c <HAL_GetTick>
 8003758:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800375a:	e011      	b.n	8003780 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800375c:	f7ff fa66 	bl	8002c2c <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800376a:	d909      	bls.n	8003780 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2204      	movs	r2, #4
 8003770:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	22e0      	movs	r2, #224	; 0xe0
 8003778:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e021      	b.n	80037c4 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1e4      	bne.n	800375c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f958 	bl	8003a48 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f9ff 	bl	8003b9c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 fa55 	bl	8003c4e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	461a      	mov	r2, r3
 80037aa:	2100      	movs	r1, #0
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 f9bd 	bl	8003b2c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2210      	movs	r2, #16
 80037be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40023800 	.word	0x40023800
 80037d0:	40013800 	.word	0x40013800

080037d4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	4b51      	ldr	r3, [pc, #324]	; (8003930 <ETH_SetMACConfig+0x15c>)
 80037ea:	4013      	ands	r3, r2
 80037ec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	7c1b      	ldrb	r3, [r3, #16]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d102      	bne.n	80037fc <ETH_SetMACConfig+0x28>
 80037f6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80037fa:	e000      	b.n	80037fe <ETH_SetMACConfig+0x2a>
 80037fc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	7c5b      	ldrb	r3, [r3, #17]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d102      	bne.n	800380c <ETH_SetMACConfig+0x38>
 8003806:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800380a:	e000      	b.n	800380e <ETH_SetMACConfig+0x3a>
 800380c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800380e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003814:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	7fdb      	ldrb	r3, [r3, #31]
 800381a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800381c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003822:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	7f92      	ldrb	r2, [r2, #30]
 8003828:	2a00      	cmp	r2, #0
 800382a:	d102      	bne.n	8003832 <ETH_SetMACConfig+0x5e>
 800382c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003830:	e000      	b.n	8003834 <ETH_SetMACConfig+0x60>
 8003832:	2200      	movs	r2, #0
                        macconf->Speed |
 8003834:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	7f1b      	ldrb	r3, [r3, #28]
 800383a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800383c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003842:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	791b      	ldrb	r3, [r3, #4]
 8003848:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800384a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003852:	2a00      	cmp	r2, #0
 8003854:	d102      	bne.n	800385c <ETH_SetMACConfig+0x88>
 8003856:	f44f 7200 	mov.w	r2, #512	; 0x200
 800385a:	e000      	b.n	800385e <ETH_SetMACConfig+0x8a>
 800385c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800385e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	7bdb      	ldrb	r3, [r3, #15]
 8003864:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003866:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800386c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003874:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003876:	4313      	orrs	r3, r2
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	4313      	orrs	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800388e:	2001      	movs	r0, #1
 8003890:	f7ff f9d8 	bl	8002c44 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80038aa:	4013      	ands	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038b2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80038ba:	2a00      	cmp	r2, #0
 80038bc:	d101      	bne.n	80038c2 <ETH_SetMACConfig+0xee>
 80038be:	2280      	movs	r2, #128	; 0x80
 80038c0:	e000      	b.n	80038c4 <ETH_SetMACConfig+0xf0>
 80038c2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80038c4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80038ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80038d2:	2a01      	cmp	r2, #1
 80038d4:	d101      	bne.n	80038da <ETH_SetMACConfig+0x106>
 80038d6:	2208      	movs	r2, #8
 80038d8:	e000      	b.n	80038dc <ETH_SetMACConfig+0x108>
 80038da:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80038dc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80038e4:	2a01      	cmp	r2, #1
 80038e6:	d101      	bne.n	80038ec <ETH_SetMACConfig+0x118>
 80038e8:	2204      	movs	r2, #4
 80038ea:	e000      	b.n	80038ee <ETH_SetMACConfig+0x11a>
 80038ec:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80038ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80038f6:	2a01      	cmp	r2, #1
 80038f8:	d101      	bne.n	80038fe <ETH_SetMACConfig+0x12a>
 80038fa:	2202      	movs	r2, #2
 80038fc:	e000      	b.n	8003900 <ETH_SetMACConfig+0x12c>
 80038fe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003900:	4313      	orrs	r3, r2
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	4313      	orrs	r3, r2
 8003906:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003918:	2001      	movs	r0, #1
 800391a:	f7ff f993 	bl	8002c44 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	619a      	str	r2, [r3, #24]
}
 8003926:	bf00      	nop
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	ff20810f 	.word	0xff20810f

08003934 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	4b3d      	ldr	r3, [pc, #244]	; (8003a44 <ETH_SetDMAConfig+0x110>)
 800394e:	4013      	ands	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	7b1b      	ldrb	r3, [r3, #12]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d102      	bne.n	8003960 <ETH_SetDMAConfig+0x2c>
 800395a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800395e:	e000      	b.n	8003962 <ETH_SetDMAConfig+0x2e>
 8003960:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	7b5b      	ldrb	r3, [r3, #13]
 8003966:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003968:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	7f52      	ldrb	r2, [r2, #29]
 800396e:	2a00      	cmp	r2, #0
 8003970:	d102      	bne.n	8003978 <ETH_SetDMAConfig+0x44>
 8003972:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003976:	e000      	b.n	800397a <ETH_SetDMAConfig+0x46>
 8003978:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800397a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	7b9b      	ldrb	r3, [r3, #14]
 8003980:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003982:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003988:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	7f1b      	ldrb	r3, [r3, #28]
 800398e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003990:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	7f9b      	ldrb	r3, [r3, #30]
 8003996:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003998:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800399e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039a6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80039a8:	4313      	orrs	r3, r2
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039b8:	461a      	mov	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80039ca:	2001      	movs	r0, #1
 80039cc:	f7ff f93a 	bl	8002c44 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039d8:	461a      	mov	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	791b      	ldrb	r3, [r3, #4]
 80039e2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80039e8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80039ee:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80039f4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039fc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80039fe:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a04:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003a06:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003a0c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6812      	ldr	r2, [r2, #0]
 8003a12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a1a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a28:	2001      	movs	r0, #1
 8003a2a:	f7ff f90b 	bl	8002c44 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a36:	461a      	mov	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6013      	str	r3, [r2, #0]
}
 8003a3c:	bf00      	nop
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	f8de3f23 	.word	0xf8de3f23

08003a48 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b0a6      	sub	sp, #152	; 0x98
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003a50:	2301      	movs	r3, #1
 8003a52:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003a56:	2301      	movs	r3, #1
 8003a58:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003a60:	2300      	movs	r3, #0
 8003a62:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003a66:	2301      	movs	r3, #1
 8003a68:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003a72:	2301      	movs	r3, #1
 8003a74:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003a84:	2300      	movs	r3, #0
 8003a86:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003a92:	2300      	movs	r3, #0
 8003a94:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003aaa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003aae:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003ab0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003abc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7ff fe86 	bl	80037d4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003acc:	2301      	movs	r3, #1
 8003ace:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003ada:	2300      	movs	r3, #0
 8003adc:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003aea:	2300      	movs	r3, #0
 8003aec:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003aee:	2301      	movs	r3, #1
 8003af0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003af4:	2301      	movs	r3, #1
 8003af6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003af8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003afc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003afe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b02:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003b04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b08:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003b10:	2300      	movs	r3, #0
 8003b12:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003b14:	2300      	movs	r3, #0
 8003b16:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003b18:	f107 0308 	add.w	r3, r7, #8
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7ff ff08 	bl	8003934 <ETH_SetDMAConfig>
}
 8003b24:	bf00      	nop
 8003b26:	3798      	adds	r7, #152	; 0x98
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b087      	sub	sp, #28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3305      	adds	r3, #5
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	021b      	lsls	r3, r3, #8
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	3204      	adds	r2, #4
 8003b44:	7812      	ldrb	r2, [r2, #0]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	4b11      	ldr	r3, [pc, #68]	; (8003b94 <ETH_MACAddressConfig+0x68>)
 8003b4e:	4413      	add	r3, r2
 8003b50:	461a      	mov	r2, r3
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	3303      	adds	r3, #3
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	061a      	lsls	r2, r3, #24
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	3302      	adds	r3, #2
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	041b      	lsls	r3, r3, #16
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	021b      	lsls	r3, r3, #8
 8003b70:	4313      	orrs	r3, r2
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	7812      	ldrb	r2, [r2, #0]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <ETH_MACAddressConfig+0x6c>)
 8003b7e:	4413      	add	r3, r2
 8003b80:	461a      	mov	r2, r3
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	6013      	str	r3, [r2, #0]
}
 8003b86:	bf00      	nop
 8003b88:	371c      	adds	r7, #28
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	40028040 	.word	0x40028040
 8003b98:	40028044 	.word	0x40028044

08003b9c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	60fb      	str	r3, [r7, #12]
 8003ba8:	e03e      	b.n	8003c28 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68d9      	ldr	r1, [r3, #12]
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	00db      	lsls	r3, r3, #3
 8003bb8:	440b      	add	r3, r1
 8003bba:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003bd4:	68b9      	ldr	r1, [r7, #8]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	3206      	adds	r2, #6
 8003bdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d80c      	bhi.n	8003c0c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68d9      	ldr	r1, [r3, #12]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4413      	add	r3, r2
 8003c00:	00db      	lsls	r3, r3, #3
 8003c02:	440b      	add	r3, r1
 8003c04:	461a      	mov	r2, r3
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	60da      	str	r2, [r3, #12]
 8003c0a:	e004      	b.n	8003c16 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	461a      	mov	r2, r3
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	3301      	adds	r3, #1
 8003c26:	60fb      	str	r3, [r7, #12]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2b03      	cmp	r3, #3
 8003c2c:	d9bd      	bls.n	8003baa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68da      	ldr	r2, [r3, #12]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c40:	611a      	str	r2, [r3, #16]
}
 8003c42:	bf00      	nop
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b085      	sub	sp, #20
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003c56:	2300      	movs	r3, #0
 8003c58:	60fb      	str	r3, [r7, #12]
 8003c5a:	e046      	b.n	8003cea <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6919      	ldr	r1, [r3, #16]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	4613      	mov	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	440b      	add	r3, r1
 8003c6c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	2200      	movs	r2, #0
 8003c78:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	2200      	movs	r2, #0
 8003c84:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003c98:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003ca0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003cae:	68b9      	ldr	r1, [r7, #8]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	3212      	adds	r2, #18
 8003cb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d80c      	bhi.n	8003cda <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6919      	ldr	r1, [r3, #16]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	1c5a      	adds	r2, r3, #1
 8003cc8:	4613      	mov	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	440b      	add	r3, r1
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	60da      	str	r2, [r3, #12]
 8003cd8:	e004      	b.n	8003ce4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2b03      	cmp	r3, #3
 8003cee:	d9b5      	bls.n	8003c5c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691a      	ldr	r2, [r3, #16]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d1a:	60da      	str	r2, [r3, #12]
}
 8003d1c:	bf00      	nop
 8003d1e:	3714      	adds	r7, #20
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b089      	sub	sp, #36	; 0x24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003d32:	2300      	movs	r3, #0
 8003d34:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003d36:	2300      	movs	r3, #0
 8003d38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003d42:	2300      	movs	r3, #0
 8003d44:	61fb      	str	r3, [r7, #28]
 8003d46:	e175      	b.n	8004034 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003d48:	2201      	movs	r2, #1
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	f040 8164 	bne.w	800402e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f003 0303 	and.w	r3, r3, #3
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d005      	beq.n	8003d7e <HAL_GPIO_Init+0x56>
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f003 0303 	and.w	r3, r3, #3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d130      	bne.n	8003de0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	2203      	movs	r2, #3
 8003d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8e:	43db      	mvns	r3, r3
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	4013      	ands	r3, r2
 8003d94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	68da      	ldr	r2, [r3, #12]
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003db4:	2201      	movs	r2, #1
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbc:	43db      	mvns	r3, r3
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	091b      	lsrs	r3, r3, #4
 8003dca:	f003 0201 	and.w	r2, r3, #1
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f003 0303 	and.w	r3, r3, #3
 8003de8:	2b03      	cmp	r3, #3
 8003dea:	d017      	beq.n	8003e1c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	2203      	movs	r2, #3
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	43db      	mvns	r3, r3
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	4013      	ands	r3, r2
 8003e02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f003 0303 	and.w	r3, r3, #3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d123      	bne.n	8003e70 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	08da      	lsrs	r2, r3, #3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3208      	adds	r2, #8
 8003e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	f003 0307 	and.w	r3, r3, #7
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	220f      	movs	r2, #15
 8003e40:	fa02 f303 	lsl.w	r3, r2, r3
 8003e44:	43db      	mvns	r3, r3
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	691a      	ldr	r2, [r3, #16]
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	f003 0307 	and.w	r3, r3, #7
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	08da      	lsrs	r2, r3, #3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	3208      	adds	r2, #8
 8003e6a:	69b9      	ldr	r1, [r7, #24]
 8003e6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	2203      	movs	r2, #3
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	43db      	mvns	r3, r3
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	4013      	ands	r3, r2
 8003e86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f003 0203 	and.w	r2, r3, #3
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 80be 	beq.w	800402e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eb2:	4b66      	ldr	r3, [pc, #408]	; (800404c <HAL_GPIO_Init+0x324>)
 8003eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb6:	4a65      	ldr	r2, [pc, #404]	; (800404c <HAL_GPIO_Init+0x324>)
 8003eb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8003ebe:	4b63      	ldr	r3, [pc, #396]	; (800404c <HAL_GPIO_Init+0x324>)
 8003ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ec6:	60fb      	str	r3, [r7, #12]
 8003ec8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003eca:	4a61      	ldr	r2, [pc, #388]	; (8004050 <HAL_GPIO_Init+0x328>)
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	089b      	lsrs	r3, r3, #2
 8003ed0:	3302      	adds	r3, #2
 8003ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	f003 0303 	and.w	r3, r3, #3
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	220f      	movs	r2, #15
 8003ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee6:	43db      	mvns	r3, r3
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	4013      	ands	r3, r2
 8003eec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a58      	ldr	r2, [pc, #352]	; (8004054 <HAL_GPIO_Init+0x32c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d037      	beq.n	8003f66 <HAL_GPIO_Init+0x23e>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a57      	ldr	r2, [pc, #348]	; (8004058 <HAL_GPIO_Init+0x330>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d031      	beq.n	8003f62 <HAL_GPIO_Init+0x23a>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a56      	ldr	r2, [pc, #344]	; (800405c <HAL_GPIO_Init+0x334>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d02b      	beq.n	8003f5e <HAL_GPIO_Init+0x236>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a55      	ldr	r2, [pc, #340]	; (8004060 <HAL_GPIO_Init+0x338>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d025      	beq.n	8003f5a <HAL_GPIO_Init+0x232>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a54      	ldr	r2, [pc, #336]	; (8004064 <HAL_GPIO_Init+0x33c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d01f      	beq.n	8003f56 <HAL_GPIO_Init+0x22e>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a53      	ldr	r2, [pc, #332]	; (8004068 <HAL_GPIO_Init+0x340>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d019      	beq.n	8003f52 <HAL_GPIO_Init+0x22a>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a52      	ldr	r2, [pc, #328]	; (800406c <HAL_GPIO_Init+0x344>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d013      	beq.n	8003f4e <HAL_GPIO_Init+0x226>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a51      	ldr	r2, [pc, #324]	; (8004070 <HAL_GPIO_Init+0x348>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d00d      	beq.n	8003f4a <HAL_GPIO_Init+0x222>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a50      	ldr	r2, [pc, #320]	; (8004074 <HAL_GPIO_Init+0x34c>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d007      	beq.n	8003f46 <HAL_GPIO_Init+0x21e>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a4f      	ldr	r2, [pc, #316]	; (8004078 <HAL_GPIO_Init+0x350>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d101      	bne.n	8003f42 <HAL_GPIO_Init+0x21a>
 8003f3e:	2309      	movs	r3, #9
 8003f40:	e012      	b.n	8003f68 <HAL_GPIO_Init+0x240>
 8003f42:	230a      	movs	r3, #10
 8003f44:	e010      	b.n	8003f68 <HAL_GPIO_Init+0x240>
 8003f46:	2308      	movs	r3, #8
 8003f48:	e00e      	b.n	8003f68 <HAL_GPIO_Init+0x240>
 8003f4a:	2307      	movs	r3, #7
 8003f4c:	e00c      	b.n	8003f68 <HAL_GPIO_Init+0x240>
 8003f4e:	2306      	movs	r3, #6
 8003f50:	e00a      	b.n	8003f68 <HAL_GPIO_Init+0x240>
 8003f52:	2305      	movs	r3, #5
 8003f54:	e008      	b.n	8003f68 <HAL_GPIO_Init+0x240>
 8003f56:	2304      	movs	r3, #4
 8003f58:	e006      	b.n	8003f68 <HAL_GPIO_Init+0x240>
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e004      	b.n	8003f68 <HAL_GPIO_Init+0x240>
 8003f5e:	2302      	movs	r3, #2
 8003f60:	e002      	b.n	8003f68 <HAL_GPIO_Init+0x240>
 8003f62:	2301      	movs	r3, #1
 8003f64:	e000      	b.n	8003f68 <HAL_GPIO_Init+0x240>
 8003f66:	2300      	movs	r3, #0
 8003f68:	69fa      	ldr	r2, [r7, #28]
 8003f6a:	f002 0203 	and.w	r2, r2, #3
 8003f6e:	0092      	lsls	r2, r2, #2
 8003f70:	4093      	lsls	r3, r2
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003f78:	4935      	ldr	r1, [pc, #212]	; (8004050 <HAL_GPIO_Init+0x328>)
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	089b      	lsrs	r3, r3, #2
 8003f7e:	3302      	adds	r3, #2
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f86:	4b3d      	ldr	r3, [pc, #244]	; (800407c <HAL_GPIO_Init+0x354>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	43db      	mvns	r3, r3
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	4013      	ands	r3, r2
 8003f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003faa:	4a34      	ldr	r2, [pc, #208]	; (800407c <HAL_GPIO_Init+0x354>)
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fb0:	4b32      	ldr	r3, [pc, #200]	; (800407c <HAL_GPIO_Init+0x354>)
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	43db      	mvns	r3, r3
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d003      	beq.n	8003fd4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fd4:	4a29      	ldr	r2, [pc, #164]	; (800407c <HAL_GPIO_Init+0x354>)
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003fda:	4b28      	ldr	r3, [pc, #160]	; (800407c <HAL_GPIO_Init+0x354>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	43db      	mvns	r3, r3
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003ff6:	69ba      	ldr	r2, [r7, #24]
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ffe:	4a1f      	ldr	r2, [pc, #124]	; (800407c <HAL_GPIO_Init+0x354>)
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004004:	4b1d      	ldr	r3, [pc, #116]	; (800407c <HAL_GPIO_Init+0x354>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	43db      	mvns	r3, r3
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	4013      	ands	r3, r2
 8004012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d003      	beq.n	8004028 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	4313      	orrs	r3, r2
 8004026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004028:	4a14      	ldr	r2, [pc, #80]	; (800407c <HAL_GPIO_Init+0x354>)
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	3301      	adds	r3, #1
 8004032:	61fb      	str	r3, [r7, #28]
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	2b0f      	cmp	r3, #15
 8004038:	f67f ae86 	bls.w	8003d48 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800403c:	bf00      	nop
 800403e:	bf00      	nop
 8004040:	3724      	adds	r7, #36	; 0x24
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	40023800 	.word	0x40023800
 8004050:	40013800 	.word	0x40013800
 8004054:	40020000 	.word	0x40020000
 8004058:	40020400 	.word	0x40020400
 800405c:	40020800 	.word	0x40020800
 8004060:	40020c00 	.word	0x40020c00
 8004064:	40021000 	.word	0x40021000
 8004068:	40021400 	.word	0x40021400
 800406c:	40021800 	.word	0x40021800
 8004070:	40021c00 	.word	0x40021c00
 8004074:	40022000 	.word	0x40022000
 8004078:	40022400 	.word	0x40022400
 800407c:	40013c00 	.word	0x40013c00

08004080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	460b      	mov	r3, r1
 800408a:	807b      	strh	r3, [r7, #2]
 800408c:	4613      	mov	r3, r2
 800408e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004090:	787b      	ldrb	r3, [r7, #1]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004096:	887a      	ldrh	r2, [r7, #2]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800409c:	e003      	b.n	80040a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800409e:	887b      	ldrh	r3, [r7, #2]
 80040a0:	041a      	lsls	r2, r3, #16
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	619a      	str	r2, [r3, #24]
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80040b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040b4:	b08f      	sub	sp, #60	; 0x3c
 80040b6:	af0a      	add	r7, sp, #40	; 0x28
 80040b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e116      	b.n	80042f2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d106      	bne.n	80040e4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7fe fc34 	bl	800294c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2203      	movs	r2, #3
 80040e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d102      	bne.n	80040fe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f003 f896 	bl	8007234 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	603b      	str	r3, [r7, #0]
 800410e:	687e      	ldr	r6, [r7, #4]
 8004110:	466d      	mov	r5, sp
 8004112:	f106 0410 	add.w	r4, r6, #16
 8004116:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004118:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800411a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800411c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800411e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004122:	e885 0003 	stmia.w	r5, {r0, r1}
 8004126:	1d33      	adds	r3, r6, #4
 8004128:	cb0e      	ldmia	r3, {r1, r2, r3}
 800412a:	6838      	ldr	r0, [r7, #0]
 800412c:	f003 f82a 	bl	8007184 <USB_CoreInit>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d005      	beq.n	8004142 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2202      	movs	r2, #2
 800413a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e0d7      	b.n	80042f2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2100      	movs	r1, #0
 8004148:	4618      	mov	r0, r3
 800414a:	f003 f884 	bl	8007256 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800414e:	2300      	movs	r3, #0
 8004150:	73fb      	strb	r3, [r7, #15]
 8004152:	e04a      	b.n	80041ea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004154:	7bfa      	ldrb	r2, [r7, #15]
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	4613      	mov	r3, r2
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	4413      	add	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	440b      	add	r3, r1
 8004162:	333d      	adds	r3, #61	; 0x3d
 8004164:	2201      	movs	r2, #1
 8004166:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004168:	7bfa      	ldrb	r2, [r7, #15]
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	4613      	mov	r3, r2
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	4413      	add	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	333c      	adds	r3, #60	; 0x3c
 8004178:	7bfa      	ldrb	r2, [r7, #15]
 800417a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800417c:	7bfa      	ldrb	r2, [r7, #15]
 800417e:	7bfb      	ldrb	r3, [r7, #15]
 8004180:	b298      	uxth	r0, r3
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	4613      	mov	r3, r2
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	4413      	add	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	440b      	add	r3, r1
 800418e:	3344      	adds	r3, #68	; 0x44
 8004190:	4602      	mov	r2, r0
 8004192:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004194:	7bfa      	ldrb	r2, [r7, #15]
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	4613      	mov	r3, r2
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	4413      	add	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	440b      	add	r3, r1
 80041a2:	3340      	adds	r3, #64	; 0x40
 80041a4:	2200      	movs	r2, #0
 80041a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80041a8:	7bfa      	ldrb	r2, [r7, #15]
 80041aa:	6879      	ldr	r1, [r7, #4]
 80041ac:	4613      	mov	r3, r2
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	4413      	add	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	440b      	add	r3, r1
 80041b6:	3348      	adds	r3, #72	; 0x48
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80041bc:	7bfa      	ldrb	r2, [r7, #15]
 80041be:	6879      	ldr	r1, [r7, #4]
 80041c0:	4613      	mov	r3, r2
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	4413      	add	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	440b      	add	r3, r1
 80041ca:	334c      	adds	r3, #76	; 0x4c
 80041cc:	2200      	movs	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80041d0:	7bfa      	ldrb	r2, [r7, #15]
 80041d2:	6879      	ldr	r1, [r7, #4]
 80041d4:	4613      	mov	r3, r2
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	4413      	add	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	440b      	add	r3, r1
 80041de:	3354      	adds	r3, #84	; 0x54
 80041e0:	2200      	movs	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041e4:	7bfb      	ldrb	r3, [r7, #15]
 80041e6:	3301      	adds	r3, #1
 80041e8:	73fb      	strb	r3, [r7, #15]
 80041ea:	7bfa      	ldrb	r2, [r7, #15]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d3af      	bcc.n	8004154 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041f4:	2300      	movs	r3, #0
 80041f6:	73fb      	strb	r3, [r7, #15]
 80041f8:	e044      	b.n	8004284 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80041fa:	7bfa      	ldrb	r2, [r7, #15]
 80041fc:	6879      	ldr	r1, [r7, #4]
 80041fe:	4613      	mov	r3, r2
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	4413      	add	r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	440b      	add	r3, r1
 8004208:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800420c:	2200      	movs	r2, #0
 800420e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004210:	7bfa      	ldrb	r2, [r7, #15]
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	4613      	mov	r3, r2
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	4413      	add	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	440b      	add	r3, r1
 800421e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004222:	7bfa      	ldrb	r2, [r7, #15]
 8004224:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004226:	7bfa      	ldrb	r2, [r7, #15]
 8004228:	6879      	ldr	r1, [r7, #4]
 800422a:	4613      	mov	r3, r2
 800422c:	00db      	lsls	r3, r3, #3
 800422e:	4413      	add	r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	440b      	add	r3, r1
 8004234:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004238:	2200      	movs	r2, #0
 800423a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800423c:	7bfa      	ldrb	r2, [r7, #15]
 800423e:	6879      	ldr	r1, [r7, #4]
 8004240:	4613      	mov	r3, r2
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	4413      	add	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	440b      	add	r3, r1
 800424a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800424e:	2200      	movs	r2, #0
 8004250:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004252:	7bfa      	ldrb	r2, [r7, #15]
 8004254:	6879      	ldr	r1, [r7, #4]
 8004256:	4613      	mov	r3, r2
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	4413      	add	r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	440b      	add	r3, r1
 8004260:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004264:	2200      	movs	r2, #0
 8004266:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004268:	7bfa      	ldrb	r2, [r7, #15]
 800426a:	6879      	ldr	r1, [r7, #4]
 800426c:	4613      	mov	r3, r2
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	4413      	add	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	440b      	add	r3, r1
 8004276:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800427a:	2200      	movs	r2, #0
 800427c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800427e:	7bfb      	ldrb	r3, [r7, #15]
 8004280:	3301      	adds	r3, #1
 8004282:	73fb      	strb	r3, [r7, #15]
 8004284:	7bfa      	ldrb	r2, [r7, #15]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	429a      	cmp	r2, r3
 800428c:	d3b5      	bcc.n	80041fa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	603b      	str	r3, [r7, #0]
 8004294:	687e      	ldr	r6, [r7, #4]
 8004296:	466d      	mov	r5, sp
 8004298:	f106 0410 	add.w	r4, r6, #16
 800429c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800429e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80042a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80042ac:	1d33      	adds	r3, r6, #4
 80042ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042b0:	6838      	ldr	r0, [r7, #0]
 80042b2:	f003 f81d 	bl	80072f0 <USB_DevInit>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d005      	beq.n	80042c8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2202      	movs	r2, #2
 80042c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e014      	b.n	80042f2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d102      	bne.n	80042e6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 f80b 	bl	80042fc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f003 f9db 	bl	80076a6 <USB_DevDisconnect>

  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080042fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800432a:	4b05      	ldr	r3, [pc, #20]	; (8004340 <HAL_PCDEx_ActivateLPM+0x44>)
 800432c:	4313      	orrs	r3, r2
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	10000003 	.word	0x10000003

08004344 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004344:	b480      	push	{r7}
 8004346:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004348:	4b05      	ldr	r3, [pc, #20]	; (8004360 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a04      	ldr	r2, [pc, #16]	; (8004360 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800434e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004352:	6013      	str	r3, [r2, #0]
}
 8004354:	bf00      	nop
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	40007000 	.word	0x40007000

08004364 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800436a:	2300      	movs	r3, #0
 800436c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800436e:	4b23      	ldr	r3, [pc, #140]	; (80043fc <HAL_PWREx_EnableOverDrive+0x98>)
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	4a22      	ldr	r2, [pc, #136]	; (80043fc <HAL_PWREx_EnableOverDrive+0x98>)
 8004374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004378:	6413      	str	r3, [r2, #64]	; 0x40
 800437a:	4b20      	ldr	r3, [pc, #128]	; (80043fc <HAL_PWREx_EnableOverDrive+0x98>)
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004382:	603b      	str	r3, [r7, #0]
 8004384:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004386:	4b1e      	ldr	r3, [pc, #120]	; (8004400 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a1d      	ldr	r2, [pc, #116]	; (8004400 <HAL_PWREx_EnableOverDrive+0x9c>)
 800438c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004390:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004392:	f7fe fc4b 	bl	8002c2c <HAL_GetTick>
 8004396:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004398:	e009      	b.n	80043ae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800439a:	f7fe fc47 	bl	8002c2c <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043a8:	d901      	bls.n	80043ae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e022      	b.n	80043f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80043ae:	4b14      	ldr	r3, [pc, #80]	; (8004400 <HAL_PWREx_EnableOverDrive+0x9c>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ba:	d1ee      	bne.n	800439a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80043bc:	4b10      	ldr	r3, [pc, #64]	; (8004400 <HAL_PWREx_EnableOverDrive+0x9c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a0f      	ldr	r2, [pc, #60]	; (8004400 <HAL_PWREx_EnableOverDrive+0x9c>)
 80043c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043c8:	f7fe fc30 	bl	8002c2c <HAL_GetTick>
 80043cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80043ce:	e009      	b.n	80043e4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80043d0:	f7fe fc2c 	bl	8002c2c <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043de:	d901      	bls.n	80043e4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e007      	b.n	80043f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80043e4:	4b06      	ldr	r3, [pc, #24]	; (8004400 <HAL_PWREx_EnableOverDrive+0x9c>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043f0:	d1ee      	bne.n	80043d0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	40023800 	.word	0x40023800
 8004400:	40007000 	.word	0x40007000

08004404 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800440c:	2300      	movs	r3, #0
 800440e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e29b      	b.n	8004952 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 8087 	beq.w	8004536 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004428:	4b96      	ldr	r3, [pc, #600]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f003 030c 	and.w	r3, r3, #12
 8004430:	2b04      	cmp	r3, #4
 8004432:	d00c      	beq.n	800444e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004434:	4b93      	ldr	r3, [pc, #588]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f003 030c 	and.w	r3, r3, #12
 800443c:	2b08      	cmp	r3, #8
 800443e:	d112      	bne.n	8004466 <HAL_RCC_OscConfig+0x62>
 8004440:	4b90      	ldr	r3, [pc, #576]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004448:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800444c:	d10b      	bne.n	8004466 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800444e:	4b8d      	ldr	r3, [pc, #564]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d06c      	beq.n	8004534 <HAL_RCC_OscConfig+0x130>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d168      	bne.n	8004534 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e275      	b.n	8004952 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800446e:	d106      	bne.n	800447e <HAL_RCC_OscConfig+0x7a>
 8004470:	4b84      	ldr	r3, [pc, #528]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a83      	ldr	r2, [pc, #524]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800447a:	6013      	str	r3, [r2, #0]
 800447c:	e02e      	b.n	80044dc <HAL_RCC_OscConfig+0xd8>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10c      	bne.n	80044a0 <HAL_RCC_OscConfig+0x9c>
 8004486:	4b7f      	ldr	r3, [pc, #508]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a7e      	ldr	r2, [pc, #504]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 800448c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004490:	6013      	str	r3, [r2, #0]
 8004492:	4b7c      	ldr	r3, [pc, #496]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a7b      	ldr	r2, [pc, #492]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004498:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	e01d      	b.n	80044dc <HAL_RCC_OscConfig+0xd8>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044a8:	d10c      	bne.n	80044c4 <HAL_RCC_OscConfig+0xc0>
 80044aa:	4b76      	ldr	r3, [pc, #472]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a75      	ldr	r2, [pc, #468]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80044b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	4b73      	ldr	r3, [pc, #460]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a72      	ldr	r2, [pc, #456]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80044bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	e00b      	b.n	80044dc <HAL_RCC_OscConfig+0xd8>
 80044c4:	4b6f      	ldr	r3, [pc, #444]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a6e      	ldr	r2, [pc, #440]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80044ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ce:	6013      	str	r3, [r2, #0]
 80044d0:	4b6c      	ldr	r3, [pc, #432]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a6b      	ldr	r2, [pc, #428]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80044d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d013      	beq.n	800450c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e4:	f7fe fba2 	bl	8002c2c <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044ec:	f7fe fb9e 	bl	8002c2c <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b64      	cmp	r3, #100	; 0x64
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e229      	b.n	8004952 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044fe:	4b61      	ldr	r3, [pc, #388]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0f0      	beq.n	80044ec <HAL_RCC_OscConfig+0xe8>
 800450a:	e014      	b.n	8004536 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450c:	f7fe fb8e 	bl	8002c2c <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004514:	f7fe fb8a 	bl	8002c2c <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b64      	cmp	r3, #100	; 0x64
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e215      	b.n	8004952 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004526:	4b57      	ldr	r3, [pc, #348]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f0      	bne.n	8004514 <HAL_RCC_OscConfig+0x110>
 8004532:	e000      	b.n	8004536 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d069      	beq.n	8004616 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004542:	4b50      	ldr	r3, [pc, #320]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 030c 	and.w	r3, r3, #12
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00b      	beq.n	8004566 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800454e:	4b4d      	ldr	r3, [pc, #308]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 030c 	and.w	r3, r3, #12
 8004556:	2b08      	cmp	r3, #8
 8004558:	d11c      	bne.n	8004594 <HAL_RCC_OscConfig+0x190>
 800455a:	4b4a      	ldr	r3, [pc, #296]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d116      	bne.n	8004594 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004566:	4b47      	ldr	r3, [pc, #284]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d005      	beq.n	800457e <HAL_RCC_OscConfig+0x17a>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d001      	beq.n	800457e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e1e9      	b.n	8004952 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457e:	4b41      	ldr	r3, [pc, #260]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	493d      	ldr	r1, [pc, #244]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 800458e:	4313      	orrs	r3, r2
 8004590:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004592:	e040      	b.n	8004616 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d023      	beq.n	80045e4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800459c:	4b39      	ldr	r3, [pc, #228]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a38      	ldr	r2, [pc, #224]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80045a2:	f043 0301 	orr.w	r3, r3, #1
 80045a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a8:	f7fe fb40 	bl	8002c2c <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045b0:	f7fe fb3c 	bl	8002c2c <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e1c7      	b.n	8004952 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045c2:	4b30      	ldr	r3, [pc, #192]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0f0      	beq.n	80045b0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ce:	4b2d      	ldr	r3, [pc, #180]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	4929      	ldr	r1, [pc, #164]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	600b      	str	r3, [r1, #0]
 80045e2:	e018      	b.n	8004616 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045e4:	4b27      	ldr	r3, [pc, #156]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a26      	ldr	r2, [pc, #152]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80045ea:	f023 0301 	bic.w	r3, r3, #1
 80045ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f0:	f7fe fb1c 	bl	8002c2c <HAL_GetTick>
 80045f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045f6:	e008      	b.n	800460a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045f8:	f7fe fb18 	bl	8002c2c <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e1a3      	b.n	8004952 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800460a:	4b1e      	ldr	r3, [pc, #120]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1f0      	bne.n	80045f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0308 	and.w	r3, r3, #8
 800461e:	2b00      	cmp	r3, #0
 8004620:	d038      	beq.n	8004694 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d019      	beq.n	800465e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800462a:	4b16      	ldr	r3, [pc, #88]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 800462c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800462e:	4a15      	ldr	r2, [pc, #84]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004630:	f043 0301 	orr.w	r3, r3, #1
 8004634:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004636:	f7fe faf9 	bl	8002c2c <HAL_GetTick>
 800463a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800463c:	e008      	b.n	8004650 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800463e:	f7fe faf5 	bl	8002c2c <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d901      	bls.n	8004650 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e180      	b.n	8004952 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004650:	4b0c      	ldr	r3, [pc, #48]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0f0      	beq.n	800463e <HAL_RCC_OscConfig+0x23a>
 800465c:	e01a      	b.n	8004694 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800465e:	4b09      	ldr	r3, [pc, #36]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004662:	4a08      	ldr	r2, [pc, #32]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004664:	f023 0301 	bic.w	r3, r3, #1
 8004668:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800466a:	f7fe fadf 	bl	8002c2c <HAL_GetTick>
 800466e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004670:	e00a      	b.n	8004688 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004672:	f7fe fadb 	bl	8002c2c <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b02      	cmp	r3, #2
 800467e:	d903      	bls.n	8004688 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e166      	b.n	8004952 <HAL_RCC_OscConfig+0x54e>
 8004684:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004688:	4b92      	ldr	r3, [pc, #584]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 800468a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1ee      	bne.n	8004672 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 80a4 	beq.w	80047ea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046a2:	4b8c      	ldr	r3, [pc, #560]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10d      	bne.n	80046ca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80046ae:	4b89      	ldr	r3, [pc, #548]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	4a88      	ldr	r2, [pc, #544]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 80046b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046b8:	6413      	str	r3, [r2, #64]	; 0x40
 80046ba:	4b86      	ldr	r3, [pc, #536]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c2:	60bb      	str	r3, [r7, #8]
 80046c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046c6:	2301      	movs	r3, #1
 80046c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046ca:	4b83      	ldr	r3, [pc, #524]	; (80048d8 <HAL_RCC_OscConfig+0x4d4>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d118      	bne.n	8004708 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80046d6:	4b80      	ldr	r3, [pc, #512]	; (80048d8 <HAL_RCC_OscConfig+0x4d4>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a7f      	ldr	r2, [pc, #508]	; (80048d8 <HAL_RCC_OscConfig+0x4d4>)
 80046dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046e2:	f7fe faa3 	bl	8002c2c <HAL_GetTick>
 80046e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046e8:	e008      	b.n	80046fc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ea:	f7fe fa9f 	bl	8002c2c <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b64      	cmp	r3, #100	; 0x64
 80046f6:	d901      	bls.n	80046fc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e12a      	b.n	8004952 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046fc:	4b76      	ldr	r3, [pc, #472]	; (80048d8 <HAL_RCC_OscConfig+0x4d4>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004704:	2b00      	cmp	r3, #0
 8004706:	d0f0      	beq.n	80046ea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d106      	bne.n	800471e <HAL_RCC_OscConfig+0x31a>
 8004710:	4b70      	ldr	r3, [pc, #448]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 8004712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004714:	4a6f      	ldr	r2, [pc, #444]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 8004716:	f043 0301 	orr.w	r3, r3, #1
 800471a:	6713      	str	r3, [r2, #112]	; 0x70
 800471c:	e02d      	b.n	800477a <HAL_RCC_OscConfig+0x376>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10c      	bne.n	8004740 <HAL_RCC_OscConfig+0x33c>
 8004726:	4b6b      	ldr	r3, [pc, #428]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 8004728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472a:	4a6a      	ldr	r2, [pc, #424]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 800472c:	f023 0301 	bic.w	r3, r3, #1
 8004730:	6713      	str	r3, [r2, #112]	; 0x70
 8004732:	4b68      	ldr	r3, [pc, #416]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 8004734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004736:	4a67      	ldr	r2, [pc, #412]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 8004738:	f023 0304 	bic.w	r3, r3, #4
 800473c:	6713      	str	r3, [r2, #112]	; 0x70
 800473e:	e01c      	b.n	800477a <HAL_RCC_OscConfig+0x376>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	2b05      	cmp	r3, #5
 8004746:	d10c      	bne.n	8004762 <HAL_RCC_OscConfig+0x35e>
 8004748:	4b62      	ldr	r3, [pc, #392]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 800474a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474c:	4a61      	ldr	r2, [pc, #388]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 800474e:	f043 0304 	orr.w	r3, r3, #4
 8004752:	6713      	str	r3, [r2, #112]	; 0x70
 8004754:	4b5f      	ldr	r3, [pc, #380]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 8004756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004758:	4a5e      	ldr	r2, [pc, #376]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 800475a:	f043 0301 	orr.w	r3, r3, #1
 800475e:	6713      	str	r3, [r2, #112]	; 0x70
 8004760:	e00b      	b.n	800477a <HAL_RCC_OscConfig+0x376>
 8004762:	4b5c      	ldr	r3, [pc, #368]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 8004764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004766:	4a5b      	ldr	r2, [pc, #364]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 8004768:	f023 0301 	bic.w	r3, r3, #1
 800476c:	6713      	str	r3, [r2, #112]	; 0x70
 800476e:	4b59      	ldr	r3, [pc, #356]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 8004770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004772:	4a58      	ldr	r2, [pc, #352]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 8004774:	f023 0304 	bic.w	r3, r3, #4
 8004778:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d015      	beq.n	80047ae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004782:	f7fe fa53 	bl	8002c2c <HAL_GetTick>
 8004786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004788:	e00a      	b.n	80047a0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800478a:	f7fe fa4f 	bl	8002c2c <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	f241 3288 	movw	r2, #5000	; 0x1388
 8004798:	4293      	cmp	r3, r2
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e0d8      	b.n	8004952 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a0:	4b4c      	ldr	r3, [pc, #304]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 80047a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0ee      	beq.n	800478a <HAL_RCC_OscConfig+0x386>
 80047ac:	e014      	b.n	80047d8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ae:	f7fe fa3d 	bl	8002c2c <HAL_GetTick>
 80047b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047b4:	e00a      	b.n	80047cc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047b6:	f7fe fa39 	bl	8002c2c <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e0c2      	b.n	8004952 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047cc:	4b41      	ldr	r3, [pc, #260]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 80047ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d0:	f003 0302 	and.w	r3, r3, #2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1ee      	bne.n	80047b6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047d8:	7dfb      	ldrb	r3, [r7, #23]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d105      	bne.n	80047ea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047de:	4b3d      	ldr	r3, [pc, #244]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	4a3c      	ldr	r2, [pc, #240]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 80047e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f000 80ae 	beq.w	8004950 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047f4:	4b37      	ldr	r3, [pc, #220]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f003 030c 	and.w	r3, r3, #12
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	d06d      	beq.n	80048dc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	2b02      	cmp	r3, #2
 8004806:	d14b      	bne.n	80048a0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004808:	4b32      	ldr	r3, [pc, #200]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a31      	ldr	r2, [pc, #196]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 800480e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004812:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004814:	f7fe fa0a 	bl	8002c2c <HAL_GetTick>
 8004818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800481a:	e008      	b.n	800482e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800481c:	f7fe fa06 	bl	8002c2c <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e091      	b.n	8004952 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800482e:	4b29      	ldr	r3, [pc, #164]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1f0      	bne.n	800481c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69da      	ldr	r2, [r3, #28]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	431a      	orrs	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004848:	019b      	lsls	r3, r3, #6
 800484a:	431a      	orrs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004850:	085b      	lsrs	r3, r3, #1
 8004852:	3b01      	subs	r3, #1
 8004854:	041b      	lsls	r3, r3, #16
 8004856:	431a      	orrs	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485c:	061b      	lsls	r3, r3, #24
 800485e:	431a      	orrs	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004864:	071b      	lsls	r3, r3, #28
 8004866:	491b      	ldr	r1, [pc, #108]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 8004868:	4313      	orrs	r3, r2
 800486a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800486c:	4b19      	ldr	r3, [pc, #100]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a18      	ldr	r2, [pc, #96]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 8004872:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004876:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004878:	f7fe f9d8 	bl	8002c2c <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004880:	f7fe f9d4 	bl	8002c2c <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e05f      	b.n	8004952 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004892:	4b10      	ldr	r3, [pc, #64]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0f0      	beq.n	8004880 <HAL_RCC_OscConfig+0x47c>
 800489e:	e057      	b.n	8004950 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048a0:	4b0c      	ldr	r3, [pc, #48]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a0b      	ldr	r2, [pc, #44]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 80048a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ac:	f7fe f9be 	bl	8002c2c <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048b2:	e008      	b.n	80048c6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048b4:	f7fe f9ba 	bl	8002c2c <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e045      	b.n	8004952 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048c6:	4b03      	ldr	r3, [pc, #12]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1f0      	bne.n	80048b4 <HAL_RCC_OscConfig+0x4b0>
 80048d2:	e03d      	b.n	8004950 <HAL_RCC_OscConfig+0x54c>
 80048d4:	40023800 	.word	0x40023800
 80048d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80048dc:	4b1f      	ldr	r3, [pc, #124]	; (800495c <HAL_RCC_OscConfig+0x558>)
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d030      	beq.n	800494c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d129      	bne.n	800494c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004902:	429a      	cmp	r2, r3
 8004904:	d122      	bne.n	800494c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800490c:	4013      	ands	r3, r2
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004912:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004914:	4293      	cmp	r3, r2
 8004916:	d119      	bne.n	800494c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004922:	085b      	lsrs	r3, r3, #1
 8004924:	3b01      	subs	r3, #1
 8004926:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004928:	429a      	cmp	r2, r3
 800492a:	d10f      	bne.n	800494c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004936:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004938:	429a      	cmp	r2, r3
 800493a:	d107      	bne.n	800494c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004946:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004948:	429a      	cmp	r2, r3
 800494a:	d001      	beq.n	8004950 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e000      	b.n	8004952 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3718      	adds	r7, #24
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	40023800 	.word	0x40023800

08004960 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800496a:	2300      	movs	r3, #0
 800496c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e0d0      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004978:	4b6a      	ldr	r3, [pc, #424]	; (8004b24 <HAL_RCC_ClockConfig+0x1c4>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 030f 	and.w	r3, r3, #15
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	429a      	cmp	r2, r3
 8004984:	d910      	bls.n	80049a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004986:	4b67      	ldr	r3, [pc, #412]	; (8004b24 <HAL_RCC_ClockConfig+0x1c4>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f023 020f 	bic.w	r2, r3, #15
 800498e:	4965      	ldr	r1, [pc, #404]	; (8004b24 <HAL_RCC_ClockConfig+0x1c4>)
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	4313      	orrs	r3, r2
 8004994:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004996:	4b63      	ldr	r3, [pc, #396]	; (8004b24 <HAL_RCC_ClockConfig+0x1c4>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 030f 	and.w	r3, r3, #15
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d001      	beq.n	80049a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e0b8      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d020      	beq.n	80049f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d005      	beq.n	80049cc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049c0:	4b59      	ldr	r3, [pc, #356]	; (8004b28 <HAL_RCC_ClockConfig+0x1c8>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	4a58      	ldr	r2, [pc, #352]	; (8004b28 <HAL_RCC_ClockConfig+0x1c8>)
 80049c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0308 	and.w	r3, r3, #8
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d005      	beq.n	80049e4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049d8:	4b53      	ldr	r3, [pc, #332]	; (8004b28 <HAL_RCC_ClockConfig+0x1c8>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	4a52      	ldr	r2, [pc, #328]	; (8004b28 <HAL_RCC_ClockConfig+0x1c8>)
 80049de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049e4:	4b50      	ldr	r3, [pc, #320]	; (8004b28 <HAL_RCC_ClockConfig+0x1c8>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	494d      	ldr	r1, [pc, #308]	; (8004b28 <HAL_RCC_ClockConfig+0x1c8>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d040      	beq.n	8004a84 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d107      	bne.n	8004a1a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a0a:	4b47      	ldr	r3, [pc, #284]	; (8004b28 <HAL_RCC_ClockConfig+0x1c8>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d115      	bne.n	8004a42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e07f      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d107      	bne.n	8004a32 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a22:	4b41      	ldr	r3, [pc, #260]	; (8004b28 <HAL_RCC_ClockConfig+0x1c8>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d109      	bne.n	8004a42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e073      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a32:	4b3d      	ldr	r3, [pc, #244]	; (8004b28 <HAL_RCC_ClockConfig+0x1c8>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e06b      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a42:	4b39      	ldr	r3, [pc, #228]	; (8004b28 <HAL_RCC_ClockConfig+0x1c8>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f023 0203 	bic.w	r2, r3, #3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	4936      	ldr	r1, [pc, #216]	; (8004b28 <HAL_RCC_ClockConfig+0x1c8>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a54:	f7fe f8ea 	bl	8002c2c <HAL_GetTick>
 8004a58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a5a:	e00a      	b.n	8004a72 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a5c:	f7fe f8e6 	bl	8002c2c <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e053      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a72:	4b2d      	ldr	r3, [pc, #180]	; (8004b28 <HAL_RCC_ClockConfig+0x1c8>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f003 020c 	and.w	r2, r3, #12
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d1eb      	bne.n	8004a5c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a84:	4b27      	ldr	r3, [pc, #156]	; (8004b24 <HAL_RCC_ClockConfig+0x1c4>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 030f 	and.w	r3, r3, #15
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d210      	bcs.n	8004ab4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a92:	4b24      	ldr	r3, [pc, #144]	; (8004b24 <HAL_RCC_ClockConfig+0x1c4>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f023 020f 	bic.w	r2, r3, #15
 8004a9a:	4922      	ldr	r1, [pc, #136]	; (8004b24 <HAL_RCC_ClockConfig+0x1c4>)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aa2:	4b20      	ldr	r3, [pc, #128]	; (8004b24 <HAL_RCC_ClockConfig+0x1c4>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 030f 	and.w	r3, r3, #15
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d001      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e032      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d008      	beq.n	8004ad2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ac0:	4b19      	ldr	r3, [pc, #100]	; (8004b28 <HAL_RCC_ClockConfig+0x1c8>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	4916      	ldr	r1, [pc, #88]	; (8004b28 <HAL_RCC_ClockConfig+0x1c8>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0308 	and.w	r3, r3, #8
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d009      	beq.n	8004af2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ade:	4b12      	ldr	r3, [pc, #72]	; (8004b28 <HAL_RCC_ClockConfig+0x1c8>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	490e      	ldr	r1, [pc, #56]	; (8004b28 <HAL_RCC_ClockConfig+0x1c8>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004af2:	f000 f821 	bl	8004b38 <HAL_RCC_GetSysClockFreq>
 8004af6:	4602      	mov	r2, r0
 8004af8:	4b0b      	ldr	r3, [pc, #44]	; (8004b28 <HAL_RCC_ClockConfig+0x1c8>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	091b      	lsrs	r3, r3, #4
 8004afe:	f003 030f 	and.w	r3, r3, #15
 8004b02:	490a      	ldr	r1, [pc, #40]	; (8004b2c <HAL_RCC_ClockConfig+0x1cc>)
 8004b04:	5ccb      	ldrb	r3, [r1, r3]
 8004b06:	fa22 f303 	lsr.w	r3, r2, r3
 8004b0a:	4a09      	ldr	r2, [pc, #36]	; (8004b30 <HAL_RCC_ClockConfig+0x1d0>)
 8004b0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b0e:	4b09      	ldr	r3, [pc, #36]	; (8004b34 <HAL_RCC_ClockConfig+0x1d4>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7fd ff94 	bl	8002a40 <HAL_InitTick>

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	40023c00 	.word	0x40023c00
 8004b28:	40023800 	.word	0x40023800
 8004b2c:	0800b610 	.word	0x0800b610
 8004b30:	20000004 	.word	0x20000004
 8004b34:	20000008 	.word	0x20000008

08004b38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b3c:	b094      	sub	sp, #80	; 0x50
 8004b3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004b40:	2300      	movs	r3, #0
 8004b42:	647b      	str	r3, [r7, #68]	; 0x44
 8004b44:	2300      	movs	r3, #0
 8004b46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b48:	2300      	movs	r3, #0
 8004b4a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b50:	4b79      	ldr	r3, [pc, #484]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f003 030c 	and.w	r3, r3, #12
 8004b58:	2b08      	cmp	r3, #8
 8004b5a:	d00d      	beq.n	8004b78 <HAL_RCC_GetSysClockFreq+0x40>
 8004b5c:	2b08      	cmp	r3, #8
 8004b5e:	f200 80e1 	bhi.w	8004d24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d002      	beq.n	8004b6c <HAL_RCC_GetSysClockFreq+0x34>
 8004b66:	2b04      	cmp	r3, #4
 8004b68:	d003      	beq.n	8004b72 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b6a:	e0db      	b.n	8004d24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b6c:	4b73      	ldr	r3, [pc, #460]	; (8004d3c <HAL_RCC_GetSysClockFreq+0x204>)
 8004b6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b70:	e0db      	b.n	8004d2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b72:	4b73      	ldr	r3, [pc, #460]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x208>)
 8004b74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b76:	e0d8      	b.n	8004d2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b78:	4b6f      	ldr	r3, [pc, #444]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b80:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004b82:	4b6d      	ldr	r3, [pc, #436]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d063      	beq.n	8004c56 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b8e:	4b6a      	ldr	r3, [pc, #424]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	099b      	lsrs	r3, r3, #6
 8004b94:	2200      	movs	r2, #0
 8004b96:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b98:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ba0:	633b      	str	r3, [r7, #48]	; 0x30
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ba6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004baa:	4622      	mov	r2, r4
 8004bac:	462b      	mov	r3, r5
 8004bae:	f04f 0000 	mov.w	r0, #0
 8004bb2:	f04f 0100 	mov.w	r1, #0
 8004bb6:	0159      	lsls	r1, r3, #5
 8004bb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bbc:	0150      	lsls	r0, r2, #5
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	4621      	mov	r1, r4
 8004bc4:	1a51      	subs	r1, r2, r1
 8004bc6:	6139      	str	r1, [r7, #16]
 8004bc8:	4629      	mov	r1, r5
 8004bca:	eb63 0301 	sbc.w	r3, r3, r1
 8004bce:	617b      	str	r3, [r7, #20]
 8004bd0:	f04f 0200 	mov.w	r2, #0
 8004bd4:	f04f 0300 	mov.w	r3, #0
 8004bd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bdc:	4659      	mov	r1, fp
 8004bde:	018b      	lsls	r3, r1, #6
 8004be0:	4651      	mov	r1, sl
 8004be2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004be6:	4651      	mov	r1, sl
 8004be8:	018a      	lsls	r2, r1, #6
 8004bea:	4651      	mov	r1, sl
 8004bec:	ebb2 0801 	subs.w	r8, r2, r1
 8004bf0:	4659      	mov	r1, fp
 8004bf2:	eb63 0901 	sbc.w	r9, r3, r1
 8004bf6:	f04f 0200 	mov.w	r2, #0
 8004bfa:	f04f 0300 	mov.w	r3, #0
 8004bfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c0a:	4690      	mov	r8, r2
 8004c0c:	4699      	mov	r9, r3
 8004c0e:	4623      	mov	r3, r4
 8004c10:	eb18 0303 	adds.w	r3, r8, r3
 8004c14:	60bb      	str	r3, [r7, #8]
 8004c16:	462b      	mov	r3, r5
 8004c18:	eb49 0303 	adc.w	r3, r9, r3
 8004c1c:	60fb      	str	r3, [r7, #12]
 8004c1e:	f04f 0200 	mov.w	r2, #0
 8004c22:	f04f 0300 	mov.w	r3, #0
 8004c26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c2a:	4629      	mov	r1, r5
 8004c2c:	024b      	lsls	r3, r1, #9
 8004c2e:	4621      	mov	r1, r4
 8004c30:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c34:	4621      	mov	r1, r4
 8004c36:	024a      	lsls	r2, r1, #9
 8004c38:	4610      	mov	r0, r2
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c3e:	2200      	movs	r2, #0
 8004c40:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c48:	f7fb fb44 	bl	80002d4 <__aeabi_uldivmod>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	460b      	mov	r3, r1
 8004c50:	4613      	mov	r3, r2
 8004c52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c54:	e058      	b.n	8004d08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c56:	4b38      	ldr	r3, [pc, #224]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	099b      	lsrs	r3, r3, #6
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	4618      	mov	r0, r3
 8004c60:	4611      	mov	r1, r2
 8004c62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c66:	623b      	str	r3, [r7, #32]
 8004c68:	2300      	movs	r3, #0
 8004c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c70:	4642      	mov	r2, r8
 8004c72:	464b      	mov	r3, r9
 8004c74:	f04f 0000 	mov.w	r0, #0
 8004c78:	f04f 0100 	mov.w	r1, #0
 8004c7c:	0159      	lsls	r1, r3, #5
 8004c7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c82:	0150      	lsls	r0, r2, #5
 8004c84:	4602      	mov	r2, r0
 8004c86:	460b      	mov	r3, r1
 8004c88:	4641      	mov	r1, r8
 8004c8a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c8e:	4649      	mov	r1, r9
 8004c90:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c94:	f04f 0200 	mov.w	r2, #0
 8004c98:	f04f 0300 	mov.w	r3, #0
 8004c9c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ca0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ca4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ca8:	ebb2 040a 	subs.w	r4, r2, sl
 8004cac:	eb63 050b 	sbc.w	r5, r3, fp
 8004cb0:	f04f 0200 	mov.w	r2, #0
 8004cb4:	f04f 0300 	mov.w	r3, #0
 8004cb8:	00eb      	lsls	r3, r5, #3
 8004cba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cbe:	00e2      	lsls	r2, r4, #3
 8004cc0:	4614      	mov	r4, r2
 8004cc2:	461d      	mov	r5, r3
 8004cc4:	4643      	mov	r3, r8
 8004cc6:	18e3      	adds	r3, r4, r3
 8004cc8:	603b      	str	r3, [r7, #0]
 8004cca:	464b      	mov	r3, r9
 8004ccc:	eb45 0303 	adc.w	r3, r5, r3
 8004cd0:	607b      	str	r3, [r7, #4]
 8004cd2:	f04f 0200 	mov.w	r2, #0
 8004cd6:	f04f 0300 	mov.w	r3, #0
 8004cda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cde:	4629      	mov	r1, r5
 8004ce0:	028b      	lsls	r3, r1, #10
 8004ce2:	4621      	mov	r1, r4
 8004ce4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ce8:	4621      	mov	r1, r4
 8004cea:	028a      	lsls	r2, r1, #10
 8004cec:	4610      	mov	r0, r2
 8004cee:	4619      	mov	r1, r3
 8004cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	61bb      	str	r3, [r7, #24]
 8004cf6:	61fa      	str	r2, [r7, #28]
 8004cf8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cfc:	f7fb faea 	bl	80002d4 <__aeabi_uldivmod>
 8004d00:	4602      	mov	r2, r0
 8004d02:	460b      	mov	r3, r1
 8004d04:	4613      	mov	r3, r2
 8004d06:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004d08:	4b0b      	ldr	r3, [pc, #44]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	0c1b      	lsrs	r3, r3, #16
 8004d0e:	f003 0303 	and.w	r3, r3, #3
 8004d12:	3301      	adds	r3, #1
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004d18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d22:	e002      	b.n	8004d2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d24:	4b05      	ldr	r3, [pc, #20]	; (8004d3c <HAL_RCC_GetSysClockFreq+0x204>)
 8004d26:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3750      	adds	r7, #80	; 0x50
 8004d30:	46bd      	mov	sp, r7
 8004d32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d36:	bf00      	nop
 8004d38:	40023800 	.word	0x40023800
 8004d3c:	00f42400 	.word	0x00f42400
 8004d40:	007a1200 	.word	0x007a1200

08004d44 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d44:	b480      	push	{r7}
 8004d46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d48:	4b03      	ldr	r3, [pc, #12]	; (8004d58 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	20000004 	.word	0x20000004

08004d5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d60:	f7ff fff0 	bl	8004d44 <HAL_RCC_GetHCLKFreq>
 8004d64:	4602      	mov	r2, r0
 8004d66:	4b05      	ldr	r3, [pc, #20]	; (8004d7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	0a9b      	lsrs	r3, r3, #10
 8004d6c:	f003 0307 	and.w	r3, r3, #7
 8004d70:	4903      	ldr	r1, [pc, #12]	; (8004d80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d72:	5ccb      	ldrb	r3, [r1, r3]
 8004d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	40023800 	.word	0x40023800
 8004d80:	0800b620 	.word	0x0800b620

08004d84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d88:	f7ff ffdc 	bl	8004d44 <HAL_RCC_GetHCLKFreq>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	4b05      	ldr	r3, [pc, #20]	; (8004da4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	0b5b      	lsrs	r3, r3, #13
 8004d94:	f003 0307 	and.w	r3, r3, #7
 8004d98:	4903      	ldr	r1, [pc, #12]	; (8004da8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d9a:	5ccb      	ldrb	r3, [r1, r3]
 8004d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	40023800 	.word	0x40023800
 8004da8:	0800b620 	.word	0x0800b620

08004dac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	220f      	movs	r2, #15
 8004dba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004dbc:	4b12      	ldr	r3, [pc, #72]	; (8004e08 <HAL_RCC_GetClockConfig+0x5c>)
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f003 0203 	and.w	r2, r3, #3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004dc8:	4b0f      	ldr	r3, [pc, #60]	; (8004e08 <HAL_RCC_GetClockConfig+0x5c>)
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004dd4:	4b0c      	ldr	r3, [pc, #48]	; (8004e08 <HAL_RCC_GetClockConfig+0x5c>)
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004de0:	4b09      	ldr	r3, [pc, #36]	; (8004e08 <HAL_RCC_GetClockConfig+0x5c>)
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	08db      	lsrs	r3, r3, #3
 8004de6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004dee:	4b07      	ldr	r3, [pc, #28]	; (8004e0c <HAL_RCC_GetClockConfig+0x60>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 020f 	and.w	r2, r3, #15
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	601a      	str	r2, [r3, #0]
}
 8004dfa:	bf00      	nop
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	40023800 	.word	0x40023800
 8004e0c:	40023c00 	.word	0x40023c00

08004e10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b088      	sub	sp, #32
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004e20:	2300      	movs	r3, #0
 8004e22:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004e24:	2300      	movs	r3, #0
 8004e26:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d012      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e38:	4b69      	ldr	r3, [pc, #420]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	4a68      	ldr	r2, [pc, #416]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e3e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004e42:	6093      	str	r3, [r2, #8]
 8004e44:	4b66      	ldr	r3, [pc, #408]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e4c:	4964      	ldr	r1, [pc, #400]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d017      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e6a:	4b5d      	ldr	r3, [pc, #372]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e78:	4959      	ldr	r1, [pc, #356]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e88:	d101      	bne.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004e96:	2301      	movs	r3, #1
 8004e98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d017      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ea6:	4b4e      	ldr	r3, [pc, #312]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004eac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb4:	494a      	ldr	r1, [pc, #296]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ec4:	d101      	bne.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0320 	and.w	r3, r3, #32
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f000 808b 	beq.w	800500a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ef4:	4b3a      	ldr	r3, [pc, #232]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef8:	4a39      	ldr	r2, [pc, #228]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004efe:	6413      	str	r3, [r2, #64]	; 0x40
 8004f00:	4b37      	ldr	r3, [pc, #220]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f08:	60bb      	str	r3, [r7, #8]
 8004f0a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f0c:	4b35      	ldr	r3, [pc, #212]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a34      	ldr	r2, [pc, #208]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f18:	f7fd fe88 	bl	8002c2c <HAL_GetTick>
 8004f1c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f20:	f7fd fe84 	bl	8002c2c <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b64      	cmp	r3, #100	; 0x64
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e38f      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004f32:	4b2c      	ldr	r3, [pc, #176]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d0f0      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f3e:	4b28      	ldr	r3, [pc, #160]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f46:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d035      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d02e      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f5c:	4b20      	ldr	r3, [pc, #128]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f64:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f66:	4b1e      	ldr	r3, [pc, #120]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6a:	4a1d      	ldr	r2, [pc, #116]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f70:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f72:	4b1b      	ldr	r3, [pc, #108]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f76:	4a1a      	ldr	r2, [pc, #104]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f7c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004f7e:	4a18      	ldr	r2, [pc, #96]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f84:	4b16      	ldr	r3, [pc, #88]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f88:	f003 0301 	and.w	r3, r3, #1
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d114      	bne.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f90:	f7fd fe4c 	bl	8002c2c <HAL_GetTick>
 8004f94:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f96:	e00a      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f98:	f7fd fe48 	bl	8002c2c <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d901      	bls.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e351      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fae:	4b0c      	ldr	r3, [pc, #48]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d0ee      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fc6:	d111      	bne.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004fc8:	4b05      	ldr	r3, [pc, #20]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004fd4:	4b04      	ldr	r3, [pc, #16]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004fd6:	400b      	ands	r3, r1
 8004fd8:	4901      	ldr	r1, [pc, #4]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	608b      	str	r3, [r1, #8]
 8004fde:	e00b      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004fe0:	40023800 	.word	0x40023800
 8004fe4:	40007000 	.word	0x40007000
 8004fe8:	0ffffcff 	.word	0x0ffffcff
 8004fec:	4bac      	ldr	r3, [pc, #688]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	4aab      	ldr	r2, [pc, #684]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ff2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004ff6:	6093      	str	r3, [r2, #8]
 8004ff8:	4ba9      	ldr	r3, [pc, #676]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ffa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005004:	49a6      	ldr	r1, [pc, #664]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005006:	4313      	orrs	r3, r2
 8005008:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0310 	and.w	r3, r3, #16
 8005012:	2b00      	cmp	r3, #0
 8005014:	d010      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005016:	4ba2      	ldr	r3, [pc, #648]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005018:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800501c:	4aa0      	ldr	r2, [pc, #640]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800501e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005022:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005026:	4b9e      	ldr	r3, [pc, #632]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005028:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005030:	499b      	ldr	r1, [pc, #620]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005032:	4313      	orrs	r3, r2
 8005034:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00a      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005044:	4b96      	ldr	r3, [pc, #600]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800504a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005052:	4993      	ldr	r1, [pc, #588]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005054:	4313      	orrs	r3, r2
 8005056:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00a      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005066:	4b8e      	ldr	r3, [pc, #568]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005074:	498a      	ldr	r1, [pc, #552]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005076:	4313      	orrs	r3, r2
 8005078:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00a      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005088:	4b85      	ldr	r3, [pc, #532]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800508a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800508e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005096:	4982      	ldr	r1, [pc, #520]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005098:	4313      	orrs	r3, r2
 800509a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00a      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80050aa:	4b7d      	ldr	r3, [pc, #500]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b8:	4979      	ldr	r1, [pc, #484]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00a      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050cc:	4b74      	ldr	r3, [pc, #464]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d2:	f023 0203 	bic.w	r2, r3, #3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050da:	4971      	ldr	r1, [pc, #452]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00a      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050ee:	4b6c      	ldr	r3, [pc, #432]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f4:	f023 020c 	bic.w	r2, r3, #12
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050fc:	4968      	ldr	r1, [pc, #416]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00a      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005110:	4b63      	ldr	r3, [pc, #396]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005116:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800511e:	4960      	ldr	r1, [pc, #384]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005120:	4313      	orrs	r3, r2
 8005122:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00a      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005132:	4b5b      	ldr	r3, [pc, #364]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005138:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005140:	4957      	ldr	r1, [pc, #348]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005142:	4313      	orrs	r3, r2
 8005144:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00a      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005154:	4b52      	ldr	r3, [pc, #328]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800515a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005162:	494f      	ldr	r1, [pc, #316]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005164:	4313      	orrs	r3, r2
 8005166:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00a      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005176:	4b4a      	ldr	r3, [pc, #296]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800517c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005184:	4946      	ldr	r1, [pc, #280]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005186:	4313      	orrs	r3, r2
 8005188:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00a      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005198:	4b41      	ldr	r3, [pc, #260]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800519a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800519e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051a6:	493e      	ldr	r1, [pc, #248]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00a      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80051ba:	4b39      	ldr	r3, [pc, #228]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051c8:	4935      	ldr	r1, [pc, #212]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00a      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80051dc:	4b30      	ldr	r3, [pc, #192]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051ea:	492d      	ldr	r1, [pc, #180]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d011      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80051fe:	4b28      	ldr	r3, [pc, #160]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005204:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800520c:	4924      	ldr	r1, [pc, #144]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800520e:	4313      	orrs	r3, r2
 8005210:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005218:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800521c:	d101      	bne.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800521e:	2301      	movs	r3, #1
 8005220:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0308 	and.w	r3, r3, #8
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800522e:	2301      	movs	r3, #1
 8005230:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00a      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800523e:	4b18      	ldr	r3, [pc, #96]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005244:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800524c:	4914      	ldr	r1, [pc, #80]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800524e:	4313      	orrs	r3, r2
 8005250:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00b      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005260:	4b0f      	ldr	r3, [pc, #60]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005266:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005270:	490b      	ldr	r1, [pc, #44]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005272:	4313      	orrs	r3, r2
 8005274:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00f      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005284:	4b06      	ldr	r3, [pc, #24]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800528a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005294:	4902      	ldr	r1, [pc, #8]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005296:	4313      	orrs	r3, r2
 8005298:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800529c:	e002      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800529e:	bf00      	nop
 80052a0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00b      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80052b0:	4b8a      	ldr	r3, [pc, #552]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052b6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c0:	4986      	ldr	r1, [pc, #536]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00b      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80052d4:	4b81      	ldr	r3, [pc, #516]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052da:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052e4:	497d      	ldr	r1, [pc, #500]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d006      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f000 80d6 	beq.w	80054ac <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005300:	4b76      	ldr	r3, [pc, #472]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a75      	ldr	r2, [pc, #468]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005306:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800530a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800530c:	f7fd fc8e 	bl	8002c2c <HAL_GetTick>
 8005310:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005312:	e008      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005314:	f7fd fc8a 	bl	8002c2c <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b64      	cmp	r3, #100	; 0x64
 8005320:	d901      	bls.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e195      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005326:	4b6d      	ldr	r3, [pc, #436]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1f0      	bne.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b00      	cmp	r3, #0
 800533c:	d021      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005342:	2b00      	cmp	r3, #0
 8005344:	d11d      	bne.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005346:	4b65      	ldr	r3, [pc, #404]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005348:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800534c:	0c1b      	lsrs	r3, r3, #16
 800534e:	f003 0303 	and.w	r3, r3, #3
 8005352:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005354:	4b61      	ldr	r3, [pc, #388]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005356:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800535a:	0e1b      	lsrs	r3, r3, #24
 800535c:	f003 030f 	and.w	r3, r3, #15
 8005360:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	019a      	lsls	r2, r3, #6
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	041b      	lsls	r3, r3, #16
 800536c:	431a      	orrs	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	061b      	lsls	r3, r3, #24
 8005372:	431a      	orrs	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	071b      	lsls	r3, r3, #28
 800537a:	4958      	ldr	r1, [pc, #352]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800537c:	4313      	orrs	r3, r2
 800537e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d004      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005392:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005396:	d00a      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d02e      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053ac:	d129      	bne.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80053ae:	4b4b      	ldr	r3, [pc, #300]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053b4:	0c1b      	lsrs	r3, r3, #16
 80053b6:	f003 0303 	and.w	r3, r3, #3
 80053ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80053bc:	4b47      	ldr	r3, [pc, #284]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053c2:	0f1b      	lsrs	r3, r3, #28
 80053c4:	f003 0307 	and.w	r3, r3, #7
 80053c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	019a      	lsls	r2, r3, #6
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	041b      	lsls	r3, r3, #16
 80053d4:	431a      	orrs	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	061b      	lsls	r3, r3, #24
 80053dc:	431a      	orrs	r2, r3
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	071b      	lsls	r3, r3, #28
 80053e2:	493e      	ldr	r1, [pc, #248]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80053ea:	4b3c      	ldr	r3, [pc, #240]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053f0:	f023 021f 	bic.w	r2, r3, #31
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f8:	3b01      	subs	r3, #1
 80053fa:	4938      	ldr	r1, [pc, #224]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d01d      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800540e:	4b33      	ldr	r3, [pc, #204]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005410:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005414:	0e1b      	lsrs	r3, r3, #24
 8005416:	f003 030f 	and.w	r3, r3, #15
 800541a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800541c:	4b2f      	ldr	r3, [pc, #188]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800541e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005422:	0f1b      	lsrs	r3, r3, #28
 8005424:	f003 0307 	and.w	r3, r3, #7
 8005428:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	019a      	lsls	r2, r3, #6
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	041b      	lsls	r3, r3, #16
 8005436:	431a      	orrs	r2, r3
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	061b      	lsls	r3, r3, #24
 800543c:	431a      	orrs	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	071b      	lsls	r3, r3, #28
 8005442:	4926      	ldr	r1, [pc, #152]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005444:	4313      	orrs	r3, r2
 8005446:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d011      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	019a      	lsls	r2, r3, #6
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	041b      	lsls	r3, r3, #16
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	061b      	lsls	r3, r3, #24
 800546a:	431a      	orrs	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	071b      	lsls	r3, r3, #28
 8005472:	491a      	ldr	r1, [pc, #104]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005474:	4313      	orrs	r3, r2
 8005476:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800547a:	4b18      	ldr	r3, [pc, #96]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a17      	ldr	r2, [pc, #92]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005480:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005484:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005486:	f7fd fbd1 	bl	8002c2c <HAL_GetTick>
 800548a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800548c:	e008      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800548e:	f7fd fbcd 	bl	8002c2c <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	2b64      	cmp	r3, #100	; 0x64
 800549a:	d901      	bls.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e0d8      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054a0:	4b0e      	ldr	r3, [pc, #56]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d0f0      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	f040 80ce 	bne.w	8005650 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80054b4:	4b09      	ldr	r3, [pc, #36]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a08      	ldr	r2, [pc, #32]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054c0:	f7fd fbb4 	bl	8002c2c <HAL_GetTick>
 80054c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80054c6:	e00b      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80054c8:	f7fd fbb0 	bl	8002c2c <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b64      	cmp	r3, #100	; 0x64
 80054d4:	d904      	bls.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e0bb      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80054da:	bf00      	nop
 80054dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80054e0:	4b5e      	ldr	r3, [pc, #376]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054ec:	d0ec      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d009      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800550a:	2b00      	cmp	r3, #0
 800550c:	d02e      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005512:	2b00      	cmp	r3, #0
 8005514:	d12a      	bne.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005516:	4b51      	ldr	r3, [pc, #324]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800551c:	0c1b      	lsrs	r3, r3, #16
 800551e:	f003 0303 	and.w	r3, r3, #3
 8005522:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005524:	4b4d      	ldr	r3, [pc, #308]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800552a:	0f1b      	lsrs	r3, r3, #28
 800552c:	f003 0307 	and.w	r3, r3, #7
 8005530:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	019a      	lsls	r2, r3, #6
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	041b      	lsls	r3, r3, #16
 800553c:	431a      	orrs	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	061b      	lsls	r3, r3, #24
 8005544:	431a      	orrs	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	071b      	lsls	r3, r3, #28
 800554a:	4944      	ldr	r1, [pc, #272]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800554c:	4313      	orrs	r3, r2
 800554e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005552:	4b42      	ldr	r3, [pc, #264]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005554:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005558:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005560:	3b01      	subs	r3, #1
 8005562:	021b      	lsls	r3, r3, #8
 8005564:	493d      	ldr	r1, [pc, #244]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005566:	4313      	orrs	r3, r2
 8005568:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d022      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800557c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005580:	d11d      	bne.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005582:	4b36      	ldr	r3, [pc, #216]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005588:	0e1b      	lsrs	r3, r3, #24
 800558a:	f003 030f 	and.w	r3, r3, #15
 800558e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005590:	4b32      	ldr	r3, [pc, #200]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005596:	0f1b      	lsrs	r3, r3, #28
 8005598:	f003 0307 	and.w	r3, r3, #7
 800559c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	019a      	lsls	r2, r3, #6
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	041b      	lsls	r3, r3, #16
 80055aa:	431a      	orrs	r2, r3
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	061b      	lsls	r3, r3, #24
 80055b0:	431a      	orrs	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	071b      	lsls	r3, r3, #28
 80055b6:	4929      	ldr	r1, [pc, #164]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0308 	and.w	r3, r3, #8
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d028      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80055ca:	4b24      	ldr	r3, [pc, #144]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d0:	0e1b      	lsrs	r3, r3, #24
 80055d2:	f003 030f 	and.w	r3, r3, #15
 80055d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80055d8:	4b20      	ldr	r3, [pc, #128]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055de:	0c1b      	lsrs	r3, r3, #16
 80055e0:	f003 0303 	and.w	r3, r3, #3
 80055e4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	019a      	lsls	r2, r3, #6
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	041b      	lsls	r3, r3, #16
 80055f0:	431a      	orrs	r2, r3
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	061b      	lsls	r3, r3, #24
 80055f6:	431a      	orrs	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	69db      	ldr	r3, [r3, #28]
 80055fc:	071b      	lsls	r3, r3, #28
 80055fe:	4917      	ldr	r1, [pc, #92]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005600:	4313      	orrs	r3, r2
 8005602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005606:	4b15      	ldr	r3, [pc, #84]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005608:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800560c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005614:	4911      	ldr	r1, [pc, #68]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005616:	4313      	orrs	r3, r2
 8005618:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800561c:	4b0f      	ldr	r3, [pc, #60]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a0e      	ldr	r2, [pc, #56]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005626:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005628:	f7fd fb00 	bl	8002c2c <HAL_GetTick>
 800562c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800562e:	e008      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005630:	f7fd fafc 	bl	8002c2c <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b64      	cmp	r3, #100	; 0x64
 800563c:	d901      	bls.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e007      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005642:	4b06      	ldr	r3, [pc, #24]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800564a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800564e:	d1ef      	bne.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3720      	adds	r7, #32
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	40023800 	.word	0x40023800

08005660 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d101      	bne.n	8005672 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e049      	b.n	8005706 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d106      	bne.n	800568c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f841 	bl	800570e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2202      	movs	r2, #2
 8005690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	3304      	adds	r3, #4
 800569c:	4619      	mov	r1, r3
 800569e:	4610      	mov	r0, r2
 80056a0:	f000 fa00 	bl	8005aa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3708      	adds	r7, #8
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800570e:	b480      	push	{r7}
 8005710:	b083      	sub	sp, #12
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005716:	bf00      	nop
 8005718:	370c      	adds	r7, #12
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
	...

08005724 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b01      	cmp	r3, #1
 8005736:	d001      	beq.n	800573c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e054      	b.n	80057e6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2202      	movs	r2, #2
 8005740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68da      	ldr	r2, [r3, #12]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f042 0201 	orr.w	r2, r2, #1
 8005752:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a26      	ldr	r2, [pc, #152]	; (80057f4 <HAL_TIM_Base_Start_IT+0xd0>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d022      	beq.n	80057a4 <HAL_TIM_Base_Start_IT+0x80>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005766:	d01d      	beq.n	80057a4 <HAL_TIM_Base_Start_IT+0x80>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a22      	ldr	r2, [pc, #136]	; (80057f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d018      	beq.n	80057a4 <HAL_TIM_Base_Start_IT+0x80>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a21      	ldr	r2, [pc, #132]	; (80057fc <HAL_TIM_Base_Start_IT+0xd8>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d013      	beq.n	80057a4 <HAL_TIM_Base_Start_IT+0x80>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a1f      	ldr	r2, [pc, #124]	; (8005800 <HAL_TIM_Base_Start_IT+0xdc>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d00e      	beq.n	80057a4 <HAL_TIM_Base_Start_IT+0x80>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a1e      	ldr	r2, [pc, #120]	; (8005804 <HAL_TIM_Base_Start_IT+0xe0>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d009      	beq.n	80057a4 <HAL_TIM_Base_Start_IT+0x80>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a1c      	ldr	r2, [pc, #112]	; (8005808 <HAL_TIM_Base_Start_IT+0xe4>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d004      	beq.n	80057a4 <HAL_TIM_Base_Start_IT+0x80>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a1b      	ldr	r2, [pc, #108]	; (800580c <HAL_TIM_Base_Start_IT+0xe8>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d115      	bne.n	80057d0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689a      	ldr	r2, [r3, #8]
 80057aa:	4b19      	ldr	r3, [pc, #100]	; (8005810 <HAL_TIM_Base_Start_IT+0xec>)
 80057ac:	4013      	ands	r3, r2
 80057ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2b06      	cmp	r3, #6
 80057b4:	d015      	beq.n	80057e2 <HAL_TIM_Base_Start_IT+0xbe>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057bc:	d011      	beq.n	80057e2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f042 0201 	orr.w	r2, r2, #1
 80057cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ce:	e008      	b.n	80057e2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f042 0201 	orr.w	r2, r2, #1
 80057de:	601a      	str	r2, [r3, #0]
 80057e0:	e000      	b.n	80057e4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3714      	adds	r7, #20
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	40010000 	.word	0x40010000
 80057f8:	40000400 	.word	0x40000400
 80057fc:	40000800 	.word	0x40000800
 8005800:	40000c00 	.word	0x40000c00
 8005804:	40010400 	.word	0x40010400
 8005808:	40014000 	.word	0x40014000
 800580c:	40001800 	.word	0x40001800
 8005810:	00010007 	.word	0x00010007

08005814 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	f003 0302 	and.w	r3, r3, #2
 8005826:	2b02      	cmp	r3, #2
 8005828:	d122      	bne.n	8005870 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	f003 0302 	and.w	r3, r3, #2
 8005834:	2b02      	cmp	r3, #2
 8005836:	d11b      	bne.n	8005870 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f06f 0202 	mvn.w	r2, #2
 8005840:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	f003 0303 	and.w	r3, r3, #3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d003      	beq.n	800585e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 f905 	bl	8005a66 <HAL_TIM_IC_CaptureCallback>
 800585c:	e005      	b.n	800586a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f8f7 	bl	8005a52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 f908 	bl	8005a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	f003 0304 	and.w	r3, r3, #4
 800587a:	2b04      	cmp	r3, #4
 800587c:	d122      	bne.n	80058c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	f003 0304 	and.w	r3, r3, #4
 8005888:	2b04      	cmp	r3, #4
 800588a:	d11b      	bne.n	80058c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f06f 0204 	mvn.w	r2, #4
 8005894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2202      	movs	r2, #2
 800589a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d003      	beq.n	80058b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f8db 	bl	8005a66 <HAL_TIM_IC_CaptureCallback>
 80058b0:	e005      	b.n	80058be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 f8cd 	bl	8005a52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 f8de 	bl	8005a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	f003 0308 	and.w	r3, r3, #8
 80058ce:	2b08      	cmp	r3, #8
 80058d0:	d122      	bne.n	8005918 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f003 0308 	and.w	r3, r3, #8
 80058dc:	2b08      	cmp	r3, #8
 80058de:	d11b      	bne.n	8005918 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f06f 0208 	mvn.w	r2, #8
 80058e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2204      	movs	r2, #4
 80058ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	f003 0303 	and.w	r3, r3, #3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d003      	beq.n	8005906 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f8b1 	bl	8005a66 <HAL_TIM_IC_CaptureCallback>
 8005904:	e005      	b.n	8005912 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f8a3 	bl	8005a52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 f8b4 	bl	8005a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	f003 0310 	and.w	r3, r3, #16
 8005922:	2b10      	cmp	r3, #16
 8005924:	d122      	bne.n	800596c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	f003 0310 	and.w	r3, r3, #16
 8005930:	2b10      	cmp	r3, #16
 8005932:	d11b      	bne.n	800596c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f06f 0210 	mvn.w	r2, #16
 800593c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2208      	movs	r2, #8
 8005942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	69db      	ldr	r3, [r3, #28]
 800594a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800594e:	2b00      	cmp	r3, #0
 8005950:	d003      	beq.n	800595a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f887 	bl	8005a66 <HAL_TIM_IC_CaptureCallback>
 8005958:	e005      	b.n	8005966 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 f879 	bl	8005a52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 f88a 	bl	8005a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	f003 0301 	and.w	r3, r3, #1
 8005976:	2b01      	cmp	r3, #1
 8005978:	d10e      	bne.n	8005998 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	f003 0301 	and.w	r3, r3, #1
 8005984:	2b01      	cmp	r3, #1
 8005986:	d107      	bne.n	8005998 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f06f 0201 	mvn.w	r2, #1
 8005990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f7fc fdbe 	bl	8002514 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059a2:	2b80      	cmp	r3, #128	; 0x80
 80059a4:	d10e      	bne.n	80059c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059b0:	2b80      	cmp	r3, #128	; 0x80
 80059b2:	d107      	bne.n	80059c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f91a 	bl	8005bf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059d2:	d10e      	bne.n	80059f2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059de:	2b80      	cmp	r3, #128	; 0x80
 80059e0:	d107      	bne.n	80059f2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80059ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 f90d 	bl	8005c0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059fc:	2b40      	cmp	r3, #64	; 0x40
 80059fe:	d10e      	bne.n	8005a1e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0a:	2b40      	cmp	r3, #64	; 0x40
 8005a0c:	d107      	bne.n	8005a1e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 f838 	bl	8005a8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	f003 0320 	and.w	r3, r3, #32
 8005a28:	2b20      	cmp	r3, #32
 8005a2a:	d10e      	bne.n	8005a4a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	f003 0320 	and.w	r3, r3, #32
 8005a36:	2b20      	cmp	r3, #32
 8005a38:	d107      	bne.n	8005a4a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f06f 0220 	mvn.w	r2, #32
 8005a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 f8cd 	bl	8005be4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a4a:	bf00      	nop
 8005a4c:	3708      	adds	r7, #8
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a52:	b480      	push	{r7}
 8005a54:	b083      	sub	sp, #12
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a5a:	bf00      	nop
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr

08005a66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b083      	sub	sp, #12
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a6e:	bf00      	nop
 8005a70:	370c      	adds	r7, #12
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr

08005a7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	b083      	sub	sp, #12
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a82:	bf00      	nop
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b083      	sub	sp, #12
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a96:	bf00      	nop
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
	...

08005aa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a40      	ldr	r2, [pc, #256]	; (8005bb8 <TIM_Base_SetConfig+0x114>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d013      	beq.n	8005ae4 <TIM_Base_SetConfig+0x40>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ac2:	d00f      	beq.n	8005ae4 <TIM_Base_SetConfig+0x40>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a3d      	ldr	r2, [pc, #244]	; (8005bbc <TIM_Base_SetConfig+0x118>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d00b      	beq.n	8005ae4 <TIM_Base_SetConfig+0x40>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a3c      	ldr	r2, [pc, #240]	; (8005bc0 <TIM_Base_SetConfig+0x11c>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d007      	beq.n	8005ae4 <TIM_Base_SetConfig+0x40>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a3b      	ldr	r2, [pc, #236]	; (8005bc4 <TIM_Base_SetConfig+0x120>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d003      	beq.n	8005ae4 <TIM_Base_SetConfig+0x40>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a3a      	ldr	r2, [pc, #232]	; (8005bc8 <TIM_Base_SetConfig+0x124>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d108      	bne.n	8005af6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a2f      	ldr	r2, [pc, #188]	; (8005bb8 <TIM_Base_SetConfig+0x114>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d02b      	beq.n	8005b56 <TIM_Base_SetConfig+0xb2>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b04:	d027      	beq.n	8005b56 <TIM_Base_SetConfig+0xb2>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a2c      	ldr	r2, [pc, #176]	; (8005bbc <TIM_Base_SetConfig+0x118>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d023      	beq.n	8005b56 <TIM_Base_SetConfig+0xb2>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a2b      	ldr	r2, [pc, #172]	; (8005bc0 <TIM_Base_SetConfig+0x11c>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d01f      	beq.n	8005b56 <TIM_Base_SetConfig+0xb2>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a2a      	ldr	r2, [pc, #168]	; (8005bc4 <TIM_Base_SetConfig+0x120>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d01b      	beq.n	8005b56 <TIM_Base_SetConfig+0xb2>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a29      	ldr	r2, [pc, #164]	; (8005bc8 <TIM_Base_SetConfig+0x124>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d017      	beq.n	8005b56 <TIM_Base_SetConfig+0xb2>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a28      	ldr	r2, [pc, #160]	; (8005bcc <TIM_Base_SetConfig+0x128>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d013      	beq.n	8005b56 <TIM_Base_SetConfig+0xb2>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a27      	ldr	r2, [pc, #156]	; (8005bd0 <TIM_Base_SetConfig+0x12c>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d00f      	beq.n	8005b56 <TIM_Base_SetConfig+0xb2>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a26      	ldr	r2, [pc, #152]	; (8005bd4 <TIM_Base_SetConfig+0x130>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d00b      	beq.n	8005b56 <TIM_Base_SetConfig+0xb2>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a25      	ldr	r2, [pc, #148]	; (8005bd8 <TIM_Base_SetConfig+0x134>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d007      	beq.n	8005b56 <TIM_Base_SetConfig+0xb2>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a24      	ldr	r2, [pc, #144]	; (8005bdc <TIM_Base_SetConfig+0x138>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d003      	beq.n	8005b56 <TIM_Base_SetConfig+0xb2>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a23      	ldr	r2, [pc, #140]	; (8005be0 <TIM_Base_SetConfig+0x13c>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d108      	bne.n	8005b68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a0a      	ldr	r2, [pc, #40]	; (8005bb8 <TIM_Base_SetConfig+0x114>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d003      	beq.n	8005b9c <TIM_Base_SetConfig+0xf8>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a0c      	ldr	r2, [pc, #48]	; (8005bc8 <TIM_Base_SetConfig+0x124>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d103      	bne.n	8005ba4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	691a      	ldr	r2, [r3, #16]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	615a      	str	r2, [r3, #20]
}
 8005baa:	bf00      	nop
 8005bac:	3714      	adds	r7, #20
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	40010000 	.word	0x40010000
 8005bbc:	40000400 	.word	0x40000400
 8005bc0:	40000800 	.word	0x40000800
 8005bc4:	40000c00 	.word	0x40000c00
 8005bc8:	40010400 	.word	0x40010400
 8005bcc:	40014000 	.word	0x40014000
 8005bd0:	40014400 	.word	0x40014400
 8005bd4:	40014800 	.word	0x40014800
 8005bd8:	40001800 	.word	0x40001800
 8005bdc:	40001c00 	.word	0x40001c00
 8005be0:	40002000 	.word	0x40002000

08005be4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d101      	bne.n	8005c32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e040      	b.n	8005cb4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d106      	bne.n	8005c48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f7fc fd5e 	bl	8002704 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2224      	movs	r2, #36	; 0x24
 8005c4c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f022 0201 	bic.w	r2, r2, #1
 8005c5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 fc1a 	bl	8006498 <UART_SetConfig>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d101      	bne.n	8005c6e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e022      	b.n	8005cb4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d002      	beq.n	8005c7c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 fe72 	bl	8006960 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	685a      	ldr	r2, [r3, #4]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	689a      	ldr	r2, [r3, #8]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f042 0201 	orr.w	r2, r2, #1
 8005caa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 fef9 	bl	8006aa4 <UART_CheckIdleState>
 8005cb2:	4603      	mov	r3, r0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3708      	adds	r7, #8
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b08a      	sub	sp, #40	; 0x28
 8005cc0:	af02      	add	r7, sp, #8
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	603b      	str	r3, [r7, #0]
 8005cc8:	4613      	mov	r3, r2
 8005cca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cd0:	2b20      	cmp	r3, #32
 8005cd2:	d171      	bne.n	8005db8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d002      	beq.n	8005ce0 <HAL_UART_Transmit+0x24>
 8005cda:	88fb      	ldrh	r3, [r7, #6]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d101      	bne.n	8005ce4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e06a      	b.n	8005dba <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2221      	movs	r2, #33	; 0x21
 8005cf0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cf2:	f7fc ff9b 	bl	8002c2c <HAL_GetTick>
 8005cf6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	88fa      	ldrh	r2, [r7, #6]
 8005cfc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	88fa      	ldrh	r2, [r7, #6]
 8005d04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d10:	d108      	bne.n	8005d24 <HAL_UART_Transmit+0x68>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d104      	bne.n	8005d24 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	61bb      	str	r3, [r7, #24]
 8005d22:	e003      	b.n	8005d2c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d2c:	e02c      	b.n	8005d88 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	2200      	movs	r2, #0
 8005d36:	2180      	movs	r1, #128	; 0x80
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f000 ff00 	bl	8006b3e <UART_WaitOnFlagUntilTimeout>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d001      	beq.n	8005d48 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e038      	b.n	8005dba <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10b      	bne.n	8005d66 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	881b      	ldrh	r3, [r3, #0]
 8005d52:	461a      	mov	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d5c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	3302      	adds	r3, #2
 8005d62:	61bb      	str	r3, [r7, #24]
 8005d64:	e007      	b.n	8005d76 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	781a      	ldrb	r2, [r3, #0]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	3301      	adds	r3, #1
 8005d74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1cc      	bne.n	8005d2e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	9300      	str	r3, [sp, #0]
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	2140      	movs	r1, #64	; 0x40
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f000 fecd 	bl	8006b3e <UART_WaitOnFlagUntilTimeout>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d001      	beq.n	8005dae <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e005      	b.n	8005dba <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2220      	movs	r2, #32
 8005db2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005db4:	2300      	movs	r3, #0
 8005db6:	e000      	b.n	8005dba <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005db8:	2302      	movs	r3, #2
  }
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3720      	adds	r7, #32
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b08a      	sub	sp, #40	; 0x28
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	60f8      	str	r0, [r7, #12]
 8005dca:	60b9      	str	r1, [r7, #8]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dd6:	2b20      	cmp	r3, #32
 8005dd8:	d132      	bne.n	8005e40 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d002      	beq.n	8005de6 <HAL_UART_Receive_DMA+0x24>
 8005de0:	88fb      	ldrh	r3, [r7, #6]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d101      	bne.n	8005dea <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e02b      	b.n	8005e42 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d018      	beq.n	8005e30 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	e853 3f00 	ldrex	r3, [r3]
 8005e0a:	613b      	str	r3, [r7, #16]
   return(result);
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e12:	627b      	str	r3, [r7, #36]	; 0x24
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	461a      	mov	r2, r3
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1c:	623b      	str	r3, [r7, #32]
 8005e1e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e20:	69f9      	ldr	r1, [r7, #28]
 8005e22:	6a3a      	ldr	r2, [r7, #32]
 8005e24:	e841 2300 	strex	r3, r2, [r1]
 8005e28:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d1e6      	bne.n	8005dfe <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005e30:	88fb      	ldrh	r3, [r7, #6]
 8005e32:	461a      	mov	r2, r3
 8005e34:	68b9      	ldr	r1, [r7, #8]
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f000 ff48 	bl	8006ccc <UART_Start_Receive_DMA>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	e000      	b.n	8005e42 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005e40:	2302      	movs	r3, #2
  }
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3728      	adds	r7, #40	; 0x28
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
	...

08005e4c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b0ba      	sub	sp, #232	; 0xe8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	69db      	ldr	r3, [r3, #28]
 8005e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e72:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005e76:	f640 030f 	movw	r3, #2063	; 0x80f
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005e80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d115      	bne.n	8005eb4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e8c:	f003 0320 	and.w	r3, r3, #32
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00f      	beq.n	8005eb4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e98:	f003 0320 	and.w	r3, r3, #32
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d009      	beq.n	8005eb4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f000 82ac 	beq.w	8006402 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	4798      	blx	r3
      }
      return;
 8005eb2:	e2a6      	b.n	8006402 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005eb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f000 8117 	beq.w	80060ec <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005ebe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d106      	bne.n	8005ed8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005eca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005ece:	4b85      	ldr	r3, [pc, #532]	; (80060e4 <HAL_UART_IRQHandler+0x298>)
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f000 810a 	beq.w	80060ec <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d011      	beq.n	8005f08 <HAL_UART_IRQHandler+0xbc>
 8005ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00b      	beq.n	8005f08 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005efe:	f043 0201 	orr.w	r2, r3, #1
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f0c:	f003 0302 	and.w	r3, r3, #2
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d011      	beq.n	8005f38 <HAL_UART_IRQHandler+0xec>
 8005f14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f18:	f003 0301 	and.w	r3, r3, #1
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00b      	beq.n	8005f38 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2202      	movs	r2, #2
 8005f26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f2e:	f043 0204 	orr.w	r2, r3, #4
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f3c:	f003 0304 	and.w	r3, r3, #4
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d011      	beq.n	8005f68 <HAL_UART_IRQHandler+0x11c>
 8005f44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f48:	f003 0301 	and.w	r3, r3, #1
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00b      	beq.n	8005f68 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2204      	movs	r2, #4
 8005f56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f5e:	f043 0202 	orr.w	r2, r3, #2
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f6c:	f003 0308 	and.w	r3, r3, #8
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d017      	beq.n	8005fa4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f78:	f003 0320 	and.w	r3, r3, #32
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d105      	bne.n	8005f8c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005f80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f84:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00b      	beq.n	8005fa4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2208      	movs	r2, #8
 8005f92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f9a:	f043 0208 	orr.w	r2, r3, #8
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d012      	beq.n	8005fd6 <HAL_UART_IRQHandler+0x18a>
 8005fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00c      	beq.n	8005fd6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fcc:	f043 0220 	orr.w	r2, r3, #32
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f000 8212 	beq.w	8006406 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fe6:	f003 0320 	and.w	r3, r3, #32
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00d      	beq.n	800600a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ff2:	f003 0320 	and.w	r3, r3, #32
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d007      	beq.n	800600a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d003      	beq.n	800600a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006010:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800601e:	2b40      	cmp	r3, #64	; 0x40
 8006020:	d005      	beq.n	800602e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006022:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006026:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800602a:	2b00      	cmp	r3, #0
 800602c:	d04f      	beq.n	80060ce <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 ff12 	bl	8006e58 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603e:	2b40      	cmp	r3, #64	; 0x40
 8006040:	d141      	bne.n	80060c6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	3308      	adds	r3, #8
 8006048:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006050:	e853 3f00 	ldrex	r3, [r3]
 8006054:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006058:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800605c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006060:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3308      	adds	r3, #8
 800606a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800606e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006072:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006076:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800607a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800607e:	e841 2300 	strex	r3, r2, [r1]
 8006082:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006086:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1d9      	bne.n	8006042 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006092:	2b00      	cmp	r3, #0
 8006094:	d013      	beq.n	80060be <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800609a:	4a13      	ldr	r2, [pc, #76]	; (80060e8 <HAL_UART_IRQHandler+0x29c>)
 800609c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7fd f88d 	bl	80031c2 <HAL_DMA_Abort_IT>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d017      	beq.n	80060de <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80060b8:	4610      	mov	r0, r2
 80060ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060bc:	e00f      	b.n	80060de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f9ca 	bl	8006458 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060c4:	e00b      	b.n	80060de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f9c6 	bl	8006458 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060cc:	e007      	b.n	80060de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f9c2 	bl	8006458 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80060dc:	e193      	b.n	8006406 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060de:	bf00      	nop
    return;
 80060e0:	e191      	b.n	8006406 <HAL_UART_IRQHandler+0x5ba>
 80060e2:	bf00      	nop
 80060e4:	04000120 	.word	0x04000120
 80060e8:	08007105 	.word	0x08007105

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	f040 814c 	bne.w	800638e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80060f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060fa:	f003 0310 	and.w	r3, r3, #16
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f000 8145 	beq.w	800638e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006108:	f003 0310 	and.w	r3, r3, #16
 800610c:	2b00      	cmp	r3, #0
 800610e:	f000 813e 	beq.w	800638e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2210      	movs	r2, #16
 8006118:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006124:	2b40      	cmp	r3, #64	; 0x40
 8006126:	f040 80b6 	bne.w	8006296 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006136:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800613a:	2b00      	cmp	r3, #0
 800613c:	f000 8165 	beq.w	800640a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006146:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800614a:	429a      	cmp	r2, r3
 800614c:	f080 815d 	bcs.w	800640a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006156:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800615e:	69db      	ldr	r3, [r3, #28]
 8006160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006164:	f000 8086 	beq.w	8006274 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006170:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006174:	e853 3f00 	ldrex	r3, [r3]
 8006178:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800617c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006180:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006184:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	461a      	mov	r2, r3
 800618e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006192:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006196:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800619e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80061a2:	e841 2300 	strex	r3, r2, [r1]
 80061a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80061aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1da      	bne.n	8006168 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	3308      	adds	r3, #8
 80061b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061bc:	e853 3f00 	ldrex	r3, [r3]
 80061c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80061c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061c4:	f023 0301 	bic.w	r3, r3, #1
 80061c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	3308      	adds	r3, #8
 80061d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80061d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80061da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80061de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80061e2:	e841 2300 	strex	r3, r2, [r1]
 80061e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80061e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1e1      	bne.n	80061b2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	3308      	adds	r3, #8
 80061f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061f8:	e853 3f00 	ldrex	r3, [r3]
 80061fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80061fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006200:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006204:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	3308      	adds	r3, #8
 800620e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006212:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006214:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006216:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006218:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800621a:	e841 2300 	strex	r3, r2, [r1]
 800621e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006220:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1e3      	bne.n	80061ee <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2220      	movs	r2, #32
 800622a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800623c:	e853 3f00 	ldrex	r3, [r3]
 8006240:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006244:	f023 0310 	bic.w	r3, r3, #16
 8006248:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	461a      	mov	r2, r3
 8006252:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006256:	65bb      	str	r3, [r7, #88]	; 0x58
 8006258:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800625c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800625e:	e841 2300 	strex	r3, r2, [r1]
 8006262:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1e4      	bne.n	8006234 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800626e:	4618      	mov	r0, r3
 8006270:	f7fc ff37 	bl	80030e2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2202      	movs	r2, #2
 8006278:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006286:	b29b      	uxth	r3, r3
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	b29b      	uxth	r3, r3
 800628c:	4619      	mov	r1, r3
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 f8ec 	bl	800646c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006294:	e0b9      	b.n	800640a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f000 80ab 	beq.w	800640e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80062b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f000 80a6 	beq.w	800640e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ca:	e853 3f00 	ldrex	r3, [r3]
 80062ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80062d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	461a      	mov	r2, r3
 80062e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062e4:	647b      	str	r3, [r7, #68]	; 0x44
 80062e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062ec:	e841 2300 	strex	r3, r2, [r1]
 80062f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1e4      	bne.n	80062c2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	3308      	adds	r3, #8
 80062fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006302:	e853 3f00 	ldrex	r3, [r3]
 8006306:	623b      	str	r3, [r7, #32]
   return(result);
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	f023 0301 	bic.w	r3, r3, #1
 800630e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	3308      	adds	r3, #8
 8006318:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800631c:	633a      	str	r2, [r7, #48]	; 0x30
 800631e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006320:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006322:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006324:	e841 2300 	strex	r3, r2, [r1]
 8006328:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800632a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1e3      	bne.n	80062f8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2220      	movs	r2, #32
 8006334:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	e853 3f00 	ldrex	r3, [r3]
 8006350:	60fb      	str	r3, [r7, #12]
   return(result);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f023 0310 	bic.w	r3, r3, #16
 8006358:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	461a      	mov	r2, r3
 8006362:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006366:	61fb      	str	r3, [r7, #28]
 8006368:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636a:	69b9      	ldr	r1, [r7, #24]
 800636c:	69fa      	ldr	r2, [r7, #28]
 800636e:	e841 2300 	strex	r3, r2, [r1]
 8006372:	617b      	str	r3, [r7, #20]
   return(result);
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1e4      	bne.n	8006344 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2202      	movs	r2, #2
 800637e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006380:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006384:	4619      	mov	r1, r3
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f870 	bl	800646c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800638c:	e03f      	b.n	800640e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800638e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006392:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00e      	beq.n	80063b8 <HAL_UART_IRQHandler+0x56c>
 800639a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800639e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d008      	beq.n	80063b8 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80063ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 f867 	bl	8006484 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063b6:	e02d      	b.n	8006414 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80063b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00e      	beq.n	80063e2 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80063c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d008      	beq.n	80063e2 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d01c      	beq.n	8006412 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	4798      	blx	r3
    }
    return;
 80063e0:	e017      	b.n	8006412 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80063e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d012      	beq.n	8006414 <HAL_UART_IRQHandler+0x5c8>
 80063ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00c      	beq.n	8006414 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fe98 	bl	8007130 <UART_EndTransmit_IT>
    return;
 8006400:	e008      	b.n	8006414 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006402:	bf00      	nop
 8006404:	e006      	b.n	8006414 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006406:	bf00      	nop
 8006408:	e004      	b.n	8006414 <HAL_UART_IRQHandler+0x5c8>
      return;
 800640a:	bf00      	nop
 800640c:	e002      	b.n	8006414 <HAL_UART_IRQHandler+0x5c8>
      return;
 800640e:	bf00      	nop
 8006410:	e000      	b.n	8006414 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006412:	bf00      	nop
  }

}
 8006414:	37e8      	adds	r7, #232	; 0xe8
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop

0800641c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800644c:	bf00      	nop
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	460b      	mov	r3, r1
 8006476:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006478:	bf00      	nop
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b088      	sub	sp, #32
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064a0:	2300      	movs	r3, #0
 80064a2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	689a      	ldr	r2, [r3, #8]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	431a      	orrs	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	695b      	ldr	r3, [r3, #20]
 80064b2:	431a      	orrs	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	69db      	ldr	r3, [r3, #28]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	4ba6      	ldr	r3, [pc, #664]	; (800675c <UART_SetConfig+0x2c4>)
 80064c4:	4013      	ands	r3, r2
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	6812      	ldr	r2, [r2, #0]
 80064ca:	6979      	ldr	r1, [r7, #20]
 80064cc:	430b      	orrs	r3, r1
 80064ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	68da      	ldr	r2, [r3, #12]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	430a      	orrs	r2, r1
 80064e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a1b      	ldr	r3, [r3, #32]
 80064f0:	697a      	ldr	r2, [r7, #20]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	697a      	ldr	r2, [r7, #20]
 8006506:	430a      	orrs	r2, r1
 8006508:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a94      	ldr	r2, [pc, #592]	; (8006760 <UART_SetConfig+0x2c8>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d120      	bne.n	8006556 <UART_SetConfig+0xbe>
 8006514:	4b93      	ldr	r3, [pc, #588]	; (8006764 <UART_SetConfig+0x2cc>)
 8006516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800651a:	f003 0303 	and.w	r3, r3, #3
 800651e:	2b03      	cmp	r3, #3
 8006520:	d816      	bhi.n	8006550 <UART_SetConfig+0xb8>
 8006522:	a201      	add	r2, pc, #4	; (adr r2, 8006528 <UART_SetConfig+0x90>)
 8006524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006528:	08006539 	.word	0x08006539
 800652c:	08006545 	.word	0x08006545
 8006530:	0800653f 	.word	0x0800653f
 8006534:	0800654b 	.word	0x0800654b
 8006538:	2301      	movs	r3, #1
 800653a:	77fb      	strb	r3, [r7, #31]
 800653c:	e150      	b.n	80067e0 <UART_SetConfig+0x348>
 800653e:	2302      	movs	r3, #2
 8006540:	77fb      	strb	r3, [r7, #31]
 8006542:	e14d      	b.n	80067e0 <UART_SetConfig+0x348>
 8006544:	2304      	movs	r3, #4
 8006546:	77fb      	strb	r3, [r7, #31]
 8006548:	e14a      	b.n	80067e0 <UART_SetConfig+0x348>
 800654a:	2308      	movs	r3, #8
 800654c:	77fb      	strb	r3, [r7, #31]
 800654e:	e147      	b.n	80067e0 <UART_SetConfig+0x348>
 8006550:	2310      	movs	r3, #16
 8006552:	77fb      	strb	r3, [r7, #31]
 8006554:	e144      	b.n	80067e0 <UART_SetConfig+0x348>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a83      	ldr	r2, [pc, #524]	; (8006768 <UART_SetConfig+0x2d0>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d132      	bne.n	80065c6 <UART_SetConfig+0x12e>
 8006560:	4b80      	ldr	r3, [pc, #512]	; (8006764 <UART_SetConfig+0x2cc>)
 8006562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006566:	f003 030c 	and.w	r3, r3, #12
 800656a:	2b0c      	cmp	r3, #12
 800656c:	d828      	bhi.n	80065c0 <UART_SetConfig+0x128>
 800656e:	a201      	add	r2, pc, #4	; (adr r2, 8006574 <UART_SetConfig+0xdc>)
 8006570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006574:	080065a9 	.word	0x080065a9
 8006578:	080065c1 	.word	0x080065c1
 800657c:	080065c1 	.word	0x080065c1
 8006580:	080065c1 	.word	0x080065c1
 8006584:	080065b5 	.word	0x080065b5
 8006588:	080065c1 	.word	0x080065c1
 800658c:	080065c1 	.word	0x080065c1
 8006590:	080065c1 	.word	0x080065c1
 8006594:	080065af 	.word	0x080065af
 8006598:	080065c1 	.word	0x080065c1
 800659c:	080065c1 	.word	0x080065c1
 80065a0:	080065c1 	.word	0x080065c1
 80065a4:	080065bb 	.word	0x080065bb
 80065a8:	2300      	movs	r3, #0
 80065aa:	77fb      	strb	r3, [r7, #31]
 80065ac:	e118      	b.n	80067e0 <UART_SetConfig+0x348>
 80065ae:	2302      	movs	r3, #2
 80065b0:	77fb      	strb	r3, [r7, #31]
 80065b2:	e115      	b.n	80067e0 <UART_SetConfig+0x348>
 80065b4:	2304      	movs	r3, #4
 80065b6:	77fb      	strb	r3, [r7, #31]
 80065b8:	e112      	b.n	80067e0 <UART_SetConfig+0x348>
 80065ba:	2308      	movs	r3, #8
 80065bc:	77fb      	strb	r3, [r7, #31]
 80065be:	e10f      	b.n	80067e0 <UART_SetConfig+0x348>
 80065c0:	2310      	movs	r3, #16
 80065c2:	77fb      	strb	r3, [r7, #31]
 80065c4:	e10c      	b.n	80067e0 <UART_SetConfig+0x348>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a68      	ldr	r2, [pc, #416]	; (800676c <UART_SetConfig+0x2d4>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d120      	bne.n	8006612 <UART_SetConfig+0x17a>
 80065d0:	4b64      	ldr	r3, [pc, #400]	; (8006764 <UART_SetConfig+0x2cc>)
 80065d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80065da:	2b30      	cmp	r3, #48	; 0x30
 80065dc:	d013      	beq.n	8006606 <UART_SetConfig+0x16e>
 80065de:	2b30      	cmp	r3, #48	; 0x30
 80065e0:	d814      	bhi.n	800660c <UART_SetConfig+0x174>
 80065e2:	2b20      	cmp	r3, #32
 80065e4:	d009      	beq.n	80065fa <UART_SetConfig+0x162>
 80065e6:	2b20      	cmp	r3, #32
 80065e8:	d810      	bhi.n	800660c <UART_SetConfig+0x174>
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d002      	beq.n	80065f4 <UART_SetConfig+0x15c>
 80065ee:	2b10      	cmp	r3, #16
 80065f0:	d006      	beq.n	8006600 <UART_SetConfig+0x168>
 80065f2:	e00b      	b.n	800660c <UART_SetConfig+0x174>
 80065f4:	2300      	movs	r3, #0
 80065f6:	77fb      	strb	r3, [r7, #31]
 80065f8:	e0f2      	b.n	80067e0 <UART_SetConfig+0x348>
 80065fa:	2302      	movs	r3, #2
 80065fc:	77fb      	strb	r3, [r7, #31]
 80065fe:	e0ef      	b.n	80067e0 <UART_SetConfig+0x348>
 8006600:	2304      	movs	r3, #4
 8006602:	77fb      	strb	r3, [r7, #31]
 8006604:	e0ec      	b.n	80067e0 <UART_SetConfig+0x348>
 8006606:	2308      	movs	r3, #8
 8006608:	77fb      	strb	r3, [r7, #31]
 800660a:	e0e9      	b.n	80067e0 <UART_SetConfig+0x348>
 800660c:	2310      	movs	r3, #16
 800660e:	77fb      	strb	r3, [r7, #31]
 8006610:	e0e6      	b.n	80067e0 <UART_SetConfig+0x348>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a56      	ldr	r2, [pc, #344]	; (8006770 <UART_SetConfig+0x2d8>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d120      	bne.n	800665e <UART_SetConfig+0x1c6>
 800661c:	4b51      	ldr	r3, [pc, #324]	; (8006764 <UART_SetConfig+0x2cc>)
 800661e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006622:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006626:	2bc0      	cmp	r3, #192	; 0xc0
 8006628:	d013      	beq.n	8006652 <UART_SetConfig+0x1ba>
 800662a:	2bc0      	cmp	r3, #192	; 0xc0
 800662c:	d814      	bhi.n	8006658 <UART_SetConfig+0x1c0>
 800662e:	2b80      	cmp	r3, #128	; 0x80
 8006630:	d009      	beq.n	8006646 <UART_SetConfig+0x1ae>
 8006632:	2b80      	cmp	r3, #128	; 0x80
 8006634:	d810      	bhi.n	8006658 <UART_SetConfig+0x1c0>
 8006636:	2b00      	cmp	r3, #0
 8006638:	d002      	beq.n	8006640 <UART_SetConfig+0x1a8>
 800663a:	2b40      	cmp	r3, #64	; 0x40
 800663c:	d006      	beq.n	800664c <UART_SetConfig+0x1b4>
 800663e:	e00b      	b.n	8006658 <UART_SetConfig+0x1c0>
 8006640:	2300      	movs	r3, #0
 8006642:	77fb      	strb	r3, [r7, #31]
 8006644:	e0cc      	b.n	80067e0 <UART_SetConfig+0x348>
 8006646:	2302      	movs	r3, #2
 8006648:	77fb      	strb	r3, [r7, #31]
 800664a:	e0c9      	b.n	80067e0 <UART_SetConfig+0x348>
 800664c:	2304      	movs	r3, #4
 800664e:	77fb      	strb	r3, [r7, #31]
 8006650:	e0c6      	b.n	80067e0 <UART_SetConfig+0x348>
 8006652:	2308      	movs	r3, #8
 8006654:	77fb      	strb	r3, [r7, #31]
 8006656:	e0c3      	b.n	80067e0 <UART_SetConfig+0x348>
 8006658:	2310      	movs	r3, #16
 800665a:	77fb      	strb	r3, [r7, #31]
 800665c:	e0c0      	b.n	80067e0 <UART_SetConfig+0x348>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a44      	ldr	r2, [pc, #272]	; (8006774 <UART_SetConfig+0x2dc>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d125      	bne.n	80066b4 <UART_SetConfig+0x21c>
 8006668:	4b3e      	ldr	r3, [pc, #248]	; (8006764 <UART_SetConfig+0x2cc>)
 800666a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800666e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006672:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006676:	d017      	beq.n	80066a8 <UART_SetConfig+0x210>
 8006678:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800667c:	d817      	bhi.n	80066ae <UART_SetConfig+0x216>
 800667e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006682:	d00b      	beq.n	800669c <UART_SetConfig+0x204>
 8006684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006688:	d811      	bhi.n	80066ae <UART_SetConfig+0x216>
 800668a:	2b00      	cmp	r3, #0
 800668c:	d003      	beq.n	8006696 <UART_SetConfig+0x1fe>
 800668e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006692:	d006      	beq.n	80066a2 <UART_SetConfig+0x20a>
 8006694:	e00b      	b.n	80066ae <UART_SetConfig+0x216>
 8006696:	2300      	movs	r3, #0
 8006698:	77fb      	strb	r3, [r7, #31]
 800669a:	e0a1      	b.n	80067e0 <UART_SetConfig+0x348>
 800669c:	2302      	movs	r3, #2
 800669e:	77fb      	strb	r3, [r7, #31]
 80066a0:	e09e      	b.n	80067e0 <UART_SetConfig+0x348>
 80066a2:	2304      	movs	r3, #4
 80066a4:	77fb      	strb	r3, [r7, #31]
 80066a6:	e09b      	b.n	80067e0 <UART_SetConfig+0x348>
 80066a8:	2308      	movs	r3, #8
 80066aa:	77fb      	strb	r3, [r7, #31]
 80066ac:	e098      	b.n	80067e0 <UART_SetConfig+0x348>
 80066ae:	2310      	movs	r3, #16
 80066b0:	77fb      	strb	r3, [r7, #31]
 80066b2:	e095      	b.n	80067e0 <UART_SetConfig+0x348>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a2f      	ldr	r2, [pc, #188]	; (8006778 <UART_SetConfig+0x2e0>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d125      	bne.n	800670a <UART_SetConfig+0x272>
 80066be:	4b29      	ldr	r3, [pc, #164]	; (8006764 <UART_SetConfig+0x2cc>)
 80066c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80066c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066cc:	d017      	beq.n	80066fe <UART_SetConfig+0x266>
 80066ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066d2:	d817      	bhi.n	8006704 <UART_SetConfig+0x26c>
 80066d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066d8:	d00b      	beq.n	80066f2 <UART_SetConfig+0x25a>
 80066da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066de:	d811      	bhi.n	8006704 <UART_SetConfig+0x26c>
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d003      	beq.n	80066ec <UART_SetConfig+0x254>
 80066e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066e8:	d006      	beq.n	80066f8 <UART_SetConfig+0x260>
 80066ea:	e00b      	b.n	8006704 <UART_SetConfig+0x26c>
 80066ec:	2301      	movs	r3, #1
 80066ee:	77fb      	strb	r3, [r7, #31]
 80066f0:	e076      	b.n	80067e0 <UART_SetConfig+0x348>
 80066f2:	2302      	movs	r3, #2
 80066f4:	77fb      	strb	r3, [r7, #31]
 80066f6:	e073      	b.n	80067e0 <UART_SetConfig+0x348>
 80066f8:	2304      	movs	r3, #4
 80066fa:	77fb      	strb	r3, [r7, #31]
 80066fc:	e070      	b.n	80067e0 <UART_SetConfig+0x348>
 80066fe:	2308      	movs	r3, #8
 8006700:	77fb      	strb	r3, [r7, #31]
 8006702:	e06d      	b.n	80067e0 <UART_SetConfig+0x348>
 8006704:	2310      	movs	r3, #16
 8006706:	77fb      	strb	r3, [r7, #31]
 8006708:	e06a      	b.n	80067e0 <UART_SetConfig+0x348>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a1b      	ldr	r2, [pc, #108]	; (800677c <UART_SetConfig+0x2e4>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d138      	bne.n	8006786 <UART_SetConfig+0x2ee>
 8006714:	4b13      	ldr	r3, [pc, #76]	; (8006764 <UART_SetConfig+0x2cc>)
 8006716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800671a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800671e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006722:	d017      	beq.n	8006754 <UART_SetConfig+0x2bc>
 8006724:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006728:	d82a      	bhi.n	8006780 <UART_SetConfig+0x2e8>
 800672a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800672e:	d00b      	beq.n	8006748 <UART_SetConfig+0x2b0>
 8006730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006734:	d824      	bhi.n	8006780 <UART_SetConfig+0x2e8>
 8006736:	2b00      	cmp	r3, #0
 8006738:	d003      	beq.n	8006742 <UART_SetConfig+0x2aa>
 800673a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800673e:	d006      	beq.n	800674e <UART_SetConfig+0x2b6>
 8006740:	e01e      	b.n	8006780 <UART_SetConfig+0x2e8>
 8006742:	2300      	movs	r3, #0
 8006744:	77fb      	strb	r3, [r7, #31]
 8006746:	e04b      	b.n	80067e0 <UART_SetConfig+0x348>
 8006748:	2302      	movs	r3, #2
 800674a:	77fb      	strb	r3, [r7, #31]
 800674c:	e048      	b.n	80067e0 <UART_SetConfig+0x348>
 800674e:	2304      	movs	r3, #4
 8006750:	77fb      	strb	r3, [r7, #31]
 8006752:	e045      	b.n	80067e0 <UART_SetConfig+0x348>
 8006754:	2308      	movs	r3, #8
 8006756:	77fb      	strb	r3, [r7, #31]
 8006758:	e042      	b.n	80067e0 <UART_SetConfig+0x348>
 800675a:	bf00      	nop
 800675c:	efff69f3 	.word	0xefff69f3
 8006760:	40011000 	.word	0x40011000
 8006764:	40023800 	.word	0x40023800
 8006768:	40004400 	.word	0x40004400
 800676c:	40004800 	.word	0x40004800
 8006770:	40004c00 	.word	0x40004c00
 8006774:	40005000 	.word	0x40005000
 8006778:	40011400 	.word	0x40011400
 800677c:	40007800 	.word	0x40007800
 8006780:	2310      	movs	r3, #16
 8006782:	77fb      	strb	r3, [r7, #31]
 8006784:	e02c      	b.n	80067e0 <UART_SetConfig+0x348>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a72      	ldr	r2, [pc, #456]	; (8006954 <UART_SetConfig+0x4bc>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d125      	bne.n	80067dc <UART_SetConfig+0x344>
 8006790:	4b71      	ldr	r3, [pc, #452]	; (8006958 <UART_SetConfig+0x4c0>)
 8006792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006796:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800679a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800679e:	d017      	beq.n	80067d0 <UART_SetConfig+0x338>
 80067a0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80067a4:	d817      	bhi.n	80067d6 <UART_SetConfig+0x33e>
 80067a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067aa:	d00b      	beq.n	80067c4 <UART_SetConfig+0x32c>
 80067ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067b0:	d811      	bhi.n	80067d6 <UART_SetConfig+0x33e>
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d003      	beq.n	80067be <UART_SetConfig+0x326>
 80067b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067ba:	d006      	beq.n	80067ca <UART_SetConfig+0x332>
 80067bc:	e00b      	b.n	80067d6 <UART_SetConfig+0x33e>
 80067be:	2300      	movs	r3, #0
 80067c0:	77fb      	strb	r3, [r7, #31]
 80067c2:	e00d      	b.n	80067e0 <UART_SetConfig+0x348>
 80067c4:	2302      	movs	r3, #2
 80067c6:	77fb      	strb	r3, [r7, #31]
 80067c8:	e00a      	b.n	80067e0 <UART_SetConfig+0x348>
 80067ca:	2304      	movs	r3, #4
 80067cc:	77fb      	strb	r3, [r7, #31]
 80067ce:	e007      	b.n	80067e0 <UART_SetConfig+0x348>
 80067d0:	2308      	movs	r3, #8
 80067d2:	77fb      	strb	r3, [r7, #31]
 80067d4:	e004      	b.n	80067e0 <UART_SetConfig+0x348>
 80067d6:	2310      	movs	r3, #16
 80067d8:	77fb      	strb	r3, [r7, #31]
 80067da:	e001      	b.n	80067e0 <UART_SetConfig+0x348>
 80067dc:	2310      	movs	r3, #16
 80067de:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	69db      	ldr	r3, [r3, #28]
 80067e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067e8:	d15b      	bne.n	80068a2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80067ea:	7ffb      	ldrb	r3, [r7, #31]
 80067ec:	2b08      	cmp	r3, #8
 80067ee:	d828      	bhi.n	8006842 <UART_SetConfig+0x3aa>
 80067f0:	a201      	add	r2, pc, #4	; (adr r2, 80067f8 <UART_SetConfig+0x360>)
 80067f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f6:	bf00      	nop
 80067f8:	0800681d 	.word	0x0800681d
 80067fc:	08006825 	.word	0x08006825
 8006800:	0800682d 	.word	0x0800682d
 8006804:	08006843 	.word	0x08006843
 8006808:	08006833 	.word	0x08006833
 800680c:	08006843 	.word	0x08006843
 8006810:	08006843 	.word	0x08006843
 8006814:	08006843 	.word	0x08006843
 8006818:	0800683b 	.word	0x0800683b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800681c:	f7fe fa9e 	bl	8004d5c <HAL_RCC_GetPCLK1Freq>
 8006820:	61b8      	str	r0, [r7, #24]
        break;
 8006822:	e013      	b.n	800684c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006824:	f7fe faae 	bl	8004d84 <HAL_RCC_GetPCLK2Freq>
 8006828:	61b8      	str	r0, [r7, #24]
        break;
 800682a:	e00f      	b.n	800684c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800682c:	4b4b      	ldr	r3, [pc, #300]	; (800695c <UART_SetConfig+0x4c4>)
 800682e:	61bb      	str	r3, [r7, #24]
        break;
 8006830:	e00c      	b.n	800684c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006832:	f7fe f981 	bl	8004b38 <HAL_RCC_GetSysClockFreq>
 8006836:	61b8      	str	r0, [r7, #24]
        break;
 8006838:	e008      	b.n	800684c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800683a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800683e:	61bb      	str	r3, [r7, #24]
        break;
 8006840:	e004      	b.n	800684c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006842:	2300      	movs	r3, #0
 8006844:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	77bb      	strb	r3, [r7, #30]
        break;
 800684a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d074      	beq.n	800693c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	005a      	lsls	r2, r3, #1
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	085b      	lsrs	r3, r3, #1
 800685c:	441a      	add	r2, r3
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	fbb2 f3f3 	udiv	r3, r2, r3
 8006866:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	2b0f      	cmp	r3, #15
 800686c:	d916      	bls.n	800689c <UART_SetConfig+0x404>
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006874:	d212      	bcs.n	800689c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	b29b      	uxth	r3, r3
 800687a:	f023 030f 	bic.w	r3, r3, #15
 800687e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	085b      	lsrs	r3, r3, #1
 8006884:	b29b      	uxth	r3, r3
 8006886:	f003 0307 	and.w	r3, r3, #7
 800688a:	b29a      	uxth	r2, r3
 800688c:	89fb      	ldrh	r3, [r7, #14]
 800688e:	4313      	orrs	r3, r2
 8006890:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	89fa      	ldrh	r2, [r7, #14]
 8006898:	60da      	str	r2, [r3, #12]
 800689a:	e04f      	b.n	800693c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	77bb      	strb	r3, [r7, #30]
 80068a0:	e04c      	b.n	800693c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068a2:	7ffb      	ldrb	r3, [r7, #31]
 80068a4:	2b08      	cmp	r3, #8
 80068a6:	d828      	bhi.n	80068fa <UART_SetConfig+0x462>
 80068a8:	a201      	add	r2, pc, #4	; (adr r2, 80068b0 <UART_SetConfig+0x418>)
 80068aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ae:	bf00      	nop
 80068b0:	080068d5 	.word	0x080068d5
 80068b4:	080068dd 	.word	0x080068dd
 80068b8:	080068e5 	.word	0x080068e5
 80068bc:	080068fb 	.word	0x080068fb
 80068c0:	080068eb 	.word	0x080068eb
 80068c4:	080068fb 	.word	0x080068fb
 80068c8:	080068fb 	.word	0x080068fb
 80068cc:	080068fb 	.word	0x080068fb
 80068d0:	080068f3 	.word	0x080068f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068d4:	f7fe fa42 	bl	8004d5c <HAL_RCC_GetPCLK1Freq>
 80068d8:	61b8      	str	r0, [r7, #24]
        break;
 80068da:	e013      	b.n	8006904 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068dc:	f7fe fa52 	bl	8004d84 <HAL_RCC_GetPCLK2Freq>
 80068e0:	61b8      	str	r0, [r7, #24]
        break;
 80068e2:	e00f      	b.n	8006904 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068e4:	4b1d      	ldr	r3, [pc, #116]	; (800695c <UART_SetConfig+0x4c4>)
 80068e6:	61bb      	str	r3, [r7, #24]
        break;
 80068e8:	e00c      	b.n	8006904 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068ea:	f7fe f925 	bl	8004b38 <HAL_RCC_GetSysClockFreq>
 80068ee:	61b8      	str	r0, [r7, #24]
        break;
 80068f0:	e008      	b.n	8006904 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068f6:	61bb      	str	r3, [r7, #24]
        break;
 80068f8:	e004      	b.n	8006904 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80068fa:	2300      	movs	r3, #0
 80068fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	77bb      	strb	r3, [r7, #30]
        break;
 8006902:	bf00      	nop
    }

    if (pclk != 0U)
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d018      	beq.n	800693c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	085a      	lsrs	r2, r3, #1
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	441a      	add	r2, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	fbb2 f3f3 	udiv	r3, r2, r3
 800691c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	2b0f      	cmp	r3, #15
 8006922:	d909      	bls.n	8006938 <UART_SetConfig+0x4a0>
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800692a:	d205      	bcs.n	8006938 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	b29a      	uxth	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	60da      	str	r2, [r3, #12]
 8006936:	e001      	b.n	800693c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006948:	7fbb      	ldrb	r3, [r7, #30]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3720      	adds	r7, #32
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	40007c00 	.word	0x40007c00
 8006958:	40023800 	.word	0x40023800
 800695c:	00f42400 	.word	0x00f42400

08006960 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696c:	f003 0301 	and.w	r3, r3, #1
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00a      	beq.n	800698a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	430a      	orrs	r2, r1
 8006988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698e:	f003 0302 	and.w	r3, r3, #2
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00a      	beq.n	80069ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	430a      	orrs	r2, r1
 80069aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b0:	f003 0304 	and.w	r3, r3, #4
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00a      	beq.n	80069ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	430a      	orrs	r2, r1
 80069cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d2:	f003 0308 	and.w	r3, r3, #8
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00a      	beq.n	80069f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	430a      	orrs	r2, r1
 80069ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f4:	f003 0310 	and.w	r3, r3, #16
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00a      	beq.n	8006a12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a16:	f003 0320 	and.w	r3, r3, #32
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00a      	beq.n	8006a34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	430a      	orrs	r2, r1
 8006a32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d01a      	beq.n	8006a76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	430a      	orrs	r2, r1
 8006a54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a5e:	d10a      	bne.n	8006a76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	430a      	orrs	r2, r1
 8006a74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00a      	beq.n	8006a98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	430a      	orrs	r2, r1
 8006a96:	605a      	str	r2, [r3, #4]
  }
}
 8006a98:	bf00      	nop
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b086      	sub	sp, #24
 8006aa8:	af02      	add	r7, sp, #8
 8006aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ab4:	f7fc f8ba 	bl	8002c2c <HAL_GetTick>
 8006ab8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0308 	and.w	r3, r3, #8
 8006ac4:	2b08      	cmp	r3, #8
 8006ac6:	d10e      	bne.n	8006ae6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ac8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 f831 	bl	8006b3e <UART_WaitOnFlagUntilTimeout>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d001      	beq.n	8006ae6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e027      	b.n	8006b36 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 0304 	and.w	r3, r3, #4
 8006af0:	2b04      	cmp	r3, #4
 8006af2:	d10e      	bne.n	8006b12 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006af4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006af8:	9300      	str	r3, [sp, #0]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 f81b 	bl	8006b3e <UART_WaitOnFlagUntilTimeout>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d001      	beq.n	8006b12 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	e011      	b.n	8006b36 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2220      	movs	r2, #32
 8006b16:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2220      	movs	r2, #32
 8006b1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b09c      	sub	sp, #112	; 0x70
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	60f8      	str	r0, [r7, #12]
 8006b46:	60b9      	str	r1, [r7, #8]
 8006b48:	603b      	str	r3, [r7, #0]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b4e:	e0a7      	b.n	8006ca0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b56:	f000 80a3 	beq.w	8006ca0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b5a:	f7fc f867 	bl	8002c2c <HAL_GetTick>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d302      	bcc.n	8006b70 <UART_WaitOnFlagUntilTimeout+0x32>
 8006b6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d13f      	bne.n	8006bf0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b78:	e853 3f00 	ldrex	r3, [r3]
 8006b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b84:	667b      	str	r3, [r7, #100]	; 0x64
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b90:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006b94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b96:	e841 2300 	strex	r3, r2, [r1]
 8006b9a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006b9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1e6      	bne.n	8006b70 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	3308      	adds	r3, #8
 8006ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bac:	e853 3f00 	ldrex	r3, [r3]
 8006bb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb4:	f023 0301 	bic.w	r3, r3, #1
 8006bb8:	663b      	str	r3, [r7, #96]	; 0x60
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	3308      	adds	r3, #8
 8006bc0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006bc2:	64ba      	str	r2, [r7, #72]	; 0x48
 8006bc4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006bc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bca:	e841 2300 	strex	r3, r2, [r1]
 8006bce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1e5      	bne.n	8006ba2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2220      	movs	r2, #32
 8006bda:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2220      	movs	r2, #32
 8006be0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	e068      	b.n	8006cc2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 0304 	and.w	r3, r3, #4
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d050      	beq.n	8006ca0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	69db      	ldr	r3, [r3, #28]
 8006c04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c0c:	d148      	bne.n	8006ca0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c16:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c20:	e853 3f00 	ldrex	r3, [r3]
 8006c24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	461a      	mov	r2, r3
 8006c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c36:	637b      	str	r3, [r7, #52]	; 0x34
 8006c38:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c3e:	e841 2300 	strex	r3, r2, [r1]
 8006c42:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1e6      	bne.n	8006c18 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	3308      	adds	r3, #8
 8006c50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	e853 3f00 	ldrex	r3, [r3]
 8006c58:	613b      	str	r3, [r7, #16]
   return(result);
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	f023 0301 	bic.w	r3, r3, #1
 8006c60:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	3308      	adds	r3, #8
 8006c68:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c6a:	623a      	str	r2, [r7, #32]
 8006c6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6e:	69f9      	ldr	r1, [r7, #28]
 8006c70:	6a3a      	ldr	r2, [r7, #32]
 8006c72:	e841 2300 	strex	r3, r2, [r1]
 8006c76:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1e5      	bne.n	8006c4a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2220      	movs	r2, #32
 8006c82:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2220      	movs	r2, #32
 8006c88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2220      	movs	r2, #32
 8006c90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	e010      	b.n	8006cc2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	69da      	ldr	r2, [r3, #28]
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	4013      	ands	r3, r2
 8006caa:	68ba      	ldr	r2, [r7, #8]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	bf0c      	ite	eq
 8006cb0:	2301      	moveq	r3, #1
 8006cb2:	2300      	movne	r3, #0
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	79fb      	ldrb	r3, [r7, #7]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	f43f af48 	beq.w	8006b50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3770      	adds	r7, #112	; 0x70
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
	...

08006ccc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b096      	sub	sp, #88	; 0x58
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	68ba      	ldr	r2, [r7, #8]
 8006cde:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	88fa      	ldrh	r2, [r7, #6]
 8006ce4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2222      	movs	r2, #34	; 0x22
 8006cf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d028      	beq.n	8006d52 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d04:	4a3e      	ldr	r2, [pc, #248]	; (8006e00 <UART_Start_Receive_DMA+0x134>)
 8006d06:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d0c:	4a3d      	ldr	r2, [pc, #244]	; (8006e04 <UART_Start_Receive_DMA+0x138>)
 8006d0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d14:	4a3c      	ldr	r2, [pc, #240]	; (8006e08 <UART_Start_Receive_DMA+0x13c>)
 8006d16:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	3324      	adds	r3, #36	; 0x24
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d30:	461a      	mov	r2, r3
 8006d32:	88fb      	ldrh	r3, [r7, #6]
 8006d34:	f7fc f975 	bl	8003022 <HAL_DMA_Start_IT>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d009      	beq.n	8006d52 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2210      	movs	r2, #16
 8006d42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2220      	movs	r2, #32
 8006d4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e051      	b.n	8006df6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d018      	beq.n	8006d8c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d62:	e853 3f00 	ldrex	r3, [r3]
 8006d66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d6e:	657b      	str	r3, [r7, #84]	; 0x54
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	461a      	mov	r2, r3
 8006d76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d78:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d7a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d80:	e841 2300 	strex	r3, r2, [r1]
 8006d84:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006d86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1e6      	bne.n	8006d5a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	3308      	adds	r3, #8
 8006d92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d96:	e853 3f00 	ldrex	r3, [r3]
 8006d9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9e:	f043 0301 	orr.w	r3, r3, #1
 8006da2:	653b      	str	r3, [r7, #80]	; 0x50
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	3308      	adds	r3, #8
 8006daa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006dac:	637a      	str	r2, [r7, #52]	; 0x34
 8006dae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006db2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006db4:	e841 2300 	strex	r3, r2, [r1]
 8006db8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d1e5      	bne.n	8006d8c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	3308      	adds	r3, #8
 8006dc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	e853 3f00 	ldrex	r3, [r3]
 8006dce:	613b      	str	r3, [r7, #16]
   return(result);
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	3308      	adds	r3, #8
 8006dde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006de0:	623a      	str	r2, [r7, #32]
 8006de2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de4:	69f9      	ldr	r1, [r7, #28]
 8006de6:	6a3a      	ldr	r2, [r7, #32]
 8006de8:	e841 2300 	strex	r3, r2, [r1]
 8006dec:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d1e5      	bne.n	8006dc0 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3758      	adds	r7, #88	; 0x58
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	08006f21 	.word	0x08006f21
 8006e04:	08007049 	.word	0x08007049
 8006e08:	08007087 	.word	0x08007087

08006e0c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b089      	sub	sp, #36	; 0x24
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	e853 3f00 	ldrex	r3, [r3]
 8006e20:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006e28:	61fb      	str	r3, [r7, #28]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	61bb      	str	r3, [r7, #24]
 8006e34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e36:	6979      	ldr	r1, [r7, #20]
 8006e38:	69ba      	ldr	r2, [r7, #24]
 8006e3a:	e841 2300 	strex	r3, r2, [r1]
 8006e3e:	613b      	str	r3, [r7, #16]
   return(result);
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1e6      	bne.n	8006e14 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2220      	movs	r2, #32
 8006e4a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8006e4c:	bf00      	nop
 8006e4e:	3724      	adds	r7, #36	; 0x24
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b095      	sub	sp, #84	; 0x54
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e68:	e853 3f00 	ldrex	r3, [r3]
 8006e6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e7e:	643b      	str	r3, [r7, #64]	; 0x40
 8006e80:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e86:	e841 2300 	strex	r3, r2, [r1]
 8006e8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d1e6      	bne.n	8006e60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	3308      	adds	r3, #8
 8006e98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9a:	6a3b      	ldr	r3, [r7, #32]
 8006e9c:	e853 3f00 	ldrex	r3, [r3]
 8006ea0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	f023 0301 	bic.w	r3, r3, #1
 8006ea8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	3308      	adds	r3, #8
 8006eb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006eb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006eb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006eb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006eba:	e841 2300 	strex	r3, r2, [r1]
 8006ebe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1e5      	bne.n	8006e92 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d118      	bne.n	8006f00 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	e853 3f00 	ldrex	r3, [r3]
 8006eda:	60bb      	str	r3, [r7, #8]
   return(result);
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	f023 0310 	bic.w	r3, r3, #16
 8006ee2:	647b      	str	r3, [r7, #68]	; 0x44
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	461a      	mov	r2, r3
 8006eea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eec:	61bb      	str	r3, [r7, #24]
 8006eee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef0:	6979      	ldr	r1, [r7, #20]
 8006ef2:	69ba      	ldr	r2, [r7, #24]
 8006ef4:	e841 2300 	strex	r3, r2, [r1]
 8006ef8:	613b      	str	r3, [r7, #16]
   return(result);
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d1e6      	bne.n	8006ece <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2220      	movs	r2, #32
 8006f04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006f14:	bf00      	nop
 8006f16:	3754      	adds	r7, #84	; 0x54
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b09c      	sub	sp, #112	; 0x70
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	69db      	ldr	r3, [r3, #28]
 8006f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f36:	d071      	beq.n	800701c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8006f38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f48:	e853 3f00 	ldrex	r3, [r3]
 8006f4c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f54:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f5e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f60:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f62:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f66:	e841 2300 	strex	r3, r2, [r1]
 8006f6a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d1e6      	bne.n	8006f40 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	3308      	adds	r3, #8
 8006f78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7c:	e853 3f00 	ldrex	r3, [r3]
 8006f80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f84:	f023 0301 	bic.w	r3, r3, #1
 8006f88:	667b      	str	r3, [r7, #100]	; 0x64
 8006f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	3308      	adds	r3, #8
 8006f90:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006f92:	647a      	str	r2, [r7, #68]	; 0x44
 8006f94:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f9a:	e841 2300 	strex	r3, r2, [r1]
 8006f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d1e5      	bne.n	8006f72 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	3308      	adds	r3, #8
 8006fac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb0:	e853 3f00 	ldrex	r3, [r3]
 8006fb4:	623b      	str	r3, [r7, #32]
   return(result);
 8006fb6:	6a3b      	ldr	r3, [r7, #32]
 8006fb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fbc:	663b      	str	r3, [r7, #96]	; 0x60
 8006fbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	3308      	adds	r3, #8
 8006fc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006fc6:	633a      	str	r2, [r7, #48]	; 0x30
 8006fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fce:	e841 2300 	strex	r3, r2, [r1]
 8006fd2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1e5      	bne.n	8006fa6 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fdc:	2220      	movs	r2, #32
 8006fde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d118      	bne.n	800701c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	e853 3f00 	ldrex	r3, [r3]
 8006ff6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f023 0310 	bic.w	r3, r3, #16
 8006ffe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	461a      	mov	r2, r3
 8007006:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007008:	61fb      	str	r3, [r7, #28]
 800700a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700c:	69b9      	ldr	r1, [r7, #24]
 800700e:	69fa      	ldr	r2, [r7, #28]
 8007010:	e841 2300 	strex	r3, r2, [r1]
 8007014:	617b      	str	r3, [r7, #20]
   return(result);
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d1e6      	bne.n	8006fea <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800701c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800701e:	2200      	movs	r2, #0
 8007020:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007026:	2b01      	cmp	r3, #1
 8007028:	d107      	bne.n	800703a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800702a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800702c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007030:	4619      	mov	r1, r3
 8007032:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007034:	f7ff fa1a 	bl	800646c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007038:	e002      	b.n	8007040 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800703a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800703c:	f7ff f9f8 	bl	8006430 <HAL_UART_RxCpltCallback>
}
 8007040:	bf00      	nop
 8007042:	3770      	adds	r7, #112	; 0x70
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007054:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2201      	movs	r2, #1
 800705a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007060:	2b01      	cmp	r3, #1
 8007062:	d109      	bne.n	8007078 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800706a:	085b      	lsrs	r3, r3, #1
 800706c:	b29b      	uxth	r3, r3
 800706e:	4619      	mov	r1, r3
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f7ff f9fb 	bl	800646c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007076:	e002      	b.n	800707e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f7ff f9e3 	bl	8006444 <HAL_UART_RxHalfCpltCallback>
}
 800707e:	bf00      	nop
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}

08007086 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007086:	b580      	push	{r7, lr}
 8007088:	b086      	sub	sp, #24
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007092:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007098:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070a0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ac:	2b80      	cmp	r3, #128	; 0x80
 80070ae:	d109      	bne.n	80070c4 <UART_DMAError+0x3e>
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	2b21      	cmp	r3, #33	; 0x21
 80070b4:	d106      	bne.n	80070c4 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80070be:	6978      	ldr	r0, [r7, #20]
 80070c0:	f7ff fea4 	bl	8006e0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ce:	2b40      	cmp	r3, #64	; 0x40
 80070d0:	d109      	bne.n	80070e6 <UART_DMAError+0x60>
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2b22      	cmp	r3, #34	; 0x22
 80070d6:	d106      	bne.n	80070e6 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	2200      	movs	r2, #0
 80070dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80070e0:	6978      	ldr	r0, [r7, #20]
 80070e2:	f7ff feb9 	bl	8006e58 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070ec:	f043 0210 	orr.w	r2, r3, #16
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070f6:	6978      	ldr	r0, [r7, #20]
 80070f8:	f7ff f9ae 	bl	8006458 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070fc:	bf00      	nop
 80070fe:	3718      	adds	r7, #24
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007110:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f7ff f998 	bl	8006458 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007128:	bf00      	nop
 800712a:	3710      	adds	r7, #16
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b088      	sub	sp, #32
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	e853 3f00 	ldrex	r3, [r3]
 8007144:	60bb      	str	r3, [r7, #8]
   return(result);
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800714c:	61fb      	str	r3, [r7, #28]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	461a      	mov	r2, r3
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	61bb      	str	r3, [r7, #24]
 8007158:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715a:	6979      	ldr	r1, [r7, #20]
 800715c:	69ba      	ldr	r2, [r7, #24]
 800715e:	e841 2300 	strex	r3, r2, [r1]
 8007162:	613b      	str	r3, [r7, #16]
   return(result);
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1e6      	bne.n	8007138 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2220      	movs	r2, #32
 800716e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f7ff f950 	bl	800641c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800717c:	bf00      	nop
 800717e:	3720      	adds	r7, #32
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007184:	b084      	sub	sp, #16
 8007186:	b580      	push	{r7, lr}
 8007188:	b084      	sub	sp, #16
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
 800718e:	f107 001c 	add.w	r0, r7, #28
 8007192:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007198:	2b01      	cmp	r3, #1
 800719a:	d120      	bne.n	80071de <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	68da      	ldr	r2, [r3, #12]
 80071ac:	4b20      	ldr	r3, [pc, #128]	; (8007230 <USB_CoreInit+0xac>)
 80071ae:	4013      	ands	r3, r2
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80071c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d105      	bne.n	80071d2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fa96 	bl	8007704 <USB_CoreReset>
 80071d8:	4603      	mov	r3, r0
 80071da:	73fb      	strb	r3, [r7, #15]
 80071dc:	e010      	b.n	8007200 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 fa8a 	bl	8007704 <USB_CoreReset>
 80071f0:	4603      	mov	r3, r0
 80071f2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007202:	2b01      	cmp	r3, #1
 8007204:	d10b      	bne.n	800721e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	f043 0206 	orr.w	r2, r3, #6
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	f043 0220 	orr.w	r2, r3, #32
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800721e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007220:	4618      	mov	r0, r3
 8007222:	3710      	adds	r7, #16
 8007224:	46bd      	mov	sp, r7
 8007226:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800722a:	b004      	add	sp, #16
 800722c:	4770      	bx	lr
 800722e:	bf00      	nop
 8007230:	ffbdffbf 	.word	0xffbdffbf

08007234 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	f023 0201 	bic.w	r2, r3, #1
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	370c      	adds	r7, #12
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr

08007256 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b084      	sub	sp, #16
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
 800725e:	460b      	mov	r3, r1
 8007260:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007262:	2300      	movs	r3, #0
 8007264:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007272:	78fb      	ldrb	r3, [r7, #3]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d115      	bne.n	80072a4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007284:	2001      	movs	r0, #1
 8007286:	f7fb fcdd 	bl	8002c44 <HAL_Delay>
      ms++;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	3301      	adds	r3, #1
 800728e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 fa29 	bl	80076e8 <USB_GetMode>
 8007296:	4603      	mov	r3, r0
 8007298:	2b01      	cmp	r3, #1
 800729a:	d01e      	beq.n	80072da <USB_SetCurrentMode+0x84>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2b31      	cmp	r3, #49	; 0x31
 80072a0:	d9f0      	bls.n	8007284 <USB_SetCurrentMode+0x2e>
 80072a2:	e01a      	b.n	80072da <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80072a4:	78fb      	ldrb	r3, [r7, #3]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d115      	bne.n	80072d6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80072b6:	2001      	movs	r0, #1
 80072b8:	f7fb fcc4 	bl	8002c44 <HAL_Delay>
      ms++;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	3301      	adds	r3, #1
 80072c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 fa10 	bl	80076e8 <USB_GetMode>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d005      	beq.n	80072da <USB_SetCurrentMode+0x84>
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2b31      	cmp	r3, #49	; 0x31
 80072d2:	d9f0      	bls.n	80072b6 <USB_SetCurrentMode+0x60>
 80072d4:	e001      	b.n	80072da <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e005      	b.n	80072e6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2b32      	cmp	r3, #50	; 0x32
 80072de:	d101      	bne.n	80072e4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	e000      	b.n	80072e6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
	...

080072f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80072f0:	b084      	sub	sp, #16
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b086      	sub	sp, #24
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
 80072fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80072fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007302:	2300      	movs	r3, #0
 8007304:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800730a:	2300      	movs	r3, #0
 800730c:	613b      	str	r3, [r7, #16]
 800730e:	e009      	b.n	8007324 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	3340      	adds	r3, #64	; 0x40
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	4413      	add	r3, r2
 800731a:	2200      	movs	r2, #0
 800731c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	3301      	adds	r3, #1
 8007322:	613b      	str	r3, [r7, #16]
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	2b0e      	cmp	r3, #14
 8007328:	d9f2      	bls.n	8007310 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800732a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800732c:	2b00      	cmp	r3, #0
 800732e:	d11c      	bne.n	800736a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	68fa      	ldr	r2, [r7, #12]
 800733a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800733e:	f043 0302 	orr.w	r3, r3, #2
 8007342:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007348:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	601a      	str	r2, [r3, #0]
 8007368:	e005      	b.n	8007376 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800737c:	461a      	mov	r2, r3
 800737e:	2300      	movs	r3, #0
 8007380:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007388:	4619      	mov	r1, r3
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007390:	461a      	mov	r2, r3
 8007392:	680b      	ldr	r3, [r1, #0]
 8007394:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007398:	2b01      	cmp	r3, #1
 800739a:	d10c      	bne.n	80073b6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800739c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d104      	bne.n	80073ac <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80073a2:	2100      	movs	r1, #0
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 f965 	bl	8007674 <USB_SetDevSpeed>
 80073aa:	e008      	b.n	80073be <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80073ac:	2101      	movs	r1, #1
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 f960 	bl	8007674 <USB_SetDevSpeed>
 80073b4:	e003      	b.n	80073be <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80073b6:	2103      	movs	r1, #3
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 f95b 	bl	8007674 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80073be:	2110      	movs	r1, #16
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 f8f3 	bl	80075ac <USB_FlushTxFifo>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d001      	beq.n	80073d0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 f91f 	bl	8007614 <USB_FlushRxFifo>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d001      	beq.n	80073e0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073e6:	461a      	mov	r2, r3
 80073e8:	2300      	movs	r3, #0
 80073ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073f2:	461a      	mov	r2, r3
 80073f4:	2300      	movs	r3, #0
 80073f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073fe:	461a      	mov	r2, r3
 8007400:	2300      	movs	r3, #0
 8007402:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007404:	2300      	movs	r3, #0
 8007406:	613b      	str	r3, [r7, #16]
 8007408:	e043      	b.n	8007492 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	015a      	lsls	r2, r3, #5
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	4413      	add	r3, r2
 8007412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800741c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007420:	d118      	bne.n	8007454 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d10a      	bne.n	800743e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	015a      	lsls	r2, r3, #5
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	4413      	add	r3, r2
 8007430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007434:	461a      	mov	r2, r3
 8007436:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800743a:	6013      	str	r3, [r2, #0]
 800743c:	e013      	b.n	8007466 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	015a      	lsls	r2, r3, #5
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	4413      	add	r3, r2
 8007446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800744a:	461a      	mov	r2, r3
 800744c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007450:	6013      	str	r3, [r2, #0]
 8007452:	e008      	b.n	8007466 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	015a      	lsls	r2, r3, #5
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	4413      	add	r3, r2
 800745c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007460:	461a      	mov	r2, r3
 8007462:	2300      	movs	r3, #0
 8007464:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	015a      	lsls	r2, r3, #5
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	4413      	add	r3, r2
 800746e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007472:	461a      	mov	r2, r3
 8007474:	2300      	movs	r3, #0
 8007476:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	015a      	lsls	r2, r3, #5
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	4413      	add	r3, r2
 8007480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007484:	461a      	mov	r2, r3
 8007486:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800748a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	3301      	adds	r3, #1
 8007490:	613b      	str	r3, [r7, #16]
 8007492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007494:	693a      	ldr	r2, [r7, #16]
 8007496:	429a      	cmp	r2, r3
 8007498:	d3b7      	bcc.n	800740a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800749a:	2300      	movs	r3, #0
 800749c:	613b      	str	r3, [r7, #16]
 800749e:	e043      	b.n	8007528 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	015a      	lsls	r2, r3, #5
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	4413      	add	r3, r2
 80074a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074b6:	d118      	bne.n	80074ea <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d10a      	bne.n	80074d4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	015a      	lsls	r2, r3, #5
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	4413      	add	r3, r2
 80074c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ca:	461a      	mov	r2, r3
 80074cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80074d0:	6013      	str	r3, [r2, #0]
 80074d2:	e013      	b.n	80074fc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	015a      	lsls	r2, r3, #5
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	4413      	add	r3, r2
 80074dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074e0:	461a      	mov	r2, r3
 80074e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80074e6:	6013      	str	r3, [r2, #0]
 80074e8:	e008      	b.n	80074fc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	015a      	lsls	r2, r3, #5
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	4413      	add	r3, r2
 80074f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074f6:	461a      	mov	r2, r3
 80074f8:	2300      	movs	r3, #0
 80074fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	015a      	lsls	r2, r3, #5
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	4413      	add	r3, r2
 8007504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007508:	461a      	mov	r2, r3
 800750a:	2300      	movs	r3, #0
 800750c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	015a      	lsls	r2, r3, #5
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	4413      	add	r3, r2
 8007516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800751a:	461a      	mov	r2, r3
 800751c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007520:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	3301      	adds	r3, #1
 8007526:	613b      	str	r3, [r7, #16]
 8007528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752a:	693a      	ldr	r2, [r7, #16]
 800752c:	429a      	cmp	r2, r3
 800752e:	d3b7      	bcc.n	80074a0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007536:	691b      	ldr	r3, [r3, #16]
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800753e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007542:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007550:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007554:	2b00      	cmp	r3, #0
 8007556:	d105      	bne.n	8007564 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	699b      	ldr	r3, [r3, #24]
 800755c:	f043 0210 	orr.w	r2, r3, #16
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	699a      	ldr	r2, [r3, #24]
 8007568:	4b0e      	ldr	r3, [pc, #56]	; (80075a4 <USB_DevInit+0x2b4>)
 800756a:	4313      	orrs	r3, r2
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007572:	2b00      	cmp	r3, #0
 8007574:	d005      	beq.n	8007582 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	699b      	ldr	r3, [r3, #24]
 800757a:	f043 0208 	orr.w	r2, r3, #8
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007584:	2b01      	cmp	r3, #1
 8007586:	d105      	bne.n	8007594 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	699a      	ldr	r2, [r3, #24]
 800758c:	4b06      	ldr	r3, [pc, #24]	; (80075a8 <USB_DevInit+0x2b8>)
 800758e:	4313      	orrs	r3, r2
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007594:	7dfb      	ldrb	r3, [r7, #23]
}
 8007596:	4618      	mov	r0, r3
 8007598:	3718      	adds	r7, #24
 800759a:	46bd      	mov	sp, r7
 800759c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075a0:	b004      	add	sp, #16
 80075a2:	4770      	bx	lr
 80075a4:	803c3800 	.word	0x803c3800
 80075a8:	40000004 	.word	0x40000004

080075ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80075b6:	2300      	movs	r3, #0
 80075b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	3301      	adds	r3, #1
 80075be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	4a13      	ldr	r2, [pc, #76]	; (8007610 <USB_FlushTxFifo+0x64>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d901      	bls.n	80075cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80075c8:	2303      	movs	r3, #3
 80075ca:	e01b      	b.n	8007604 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	daf2      	bge.n	80075ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80075d4:	2300      	movs	r3, #0
 80075d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	019b      	lsls	r3, r3, #6
 80075dc:	f043 0220 	orr.w	r2, r3, #32
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	3301      	adds	r3, #1
 80075e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	4a08      	ldr	r2, [pc, #32]	; (8007610 <USB_FlushTxFifo+0x64>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d901      	bls.n	80075f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80075f2:	2303      	movs	r3, #3
 80075f4:	e006      	b.n	8007604 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	f003 0320 	and.w	r3, r3, #32
 80075fe:	2b20      	cmp	r3, #32
 8007600:	d0f0      	beq.n	80075e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007602:	2300      	movs	r3, #0
}
 8007604:	4618      	mov	r0, r3
 8007606:	3714      	adds	r7, #20
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr
 8007610:	00030d40 	.word	0x00030d40

08007614 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800761c:	2300      	movs	r3, #0
 800761e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	3301      	adds	r3, #1
 8007624:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	4a11      	ldr	r2, [pc, #68]	; (8007670 <USB_FlushRxFifo+0x5c>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d901      	bls.n	8007632 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800762e:	2303      	movs	r3, #3
 8007630:	e018      	b.n	8007664 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	2b00      	cmp	r3, #0
 8007638:	daf2      	bge.n	8007620 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800763a:	2300      	movs	r3, #0
 800763c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2210      	movs	r2, #16
 8007642:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	3301      	adds	r3, #1
 8007648:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	4a08      	ldr	r2, [pc, #32]	; (8007670 <USB_FlushRxFifo+0x5c>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d901      	bls.n	8007656 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007652:	2303      	movs	r3, #3
 8007654:	e006      	b.n	8007664 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	f003 0310 	and.w	r3, r3, #16
 800765e:	2b10      	cmp	r3, #16
 8007660:	d0f0      	beq.n	8007644 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	3714      	adds	r7, #20
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr
 8007670:	00030d40 	.word	0x00030d40

08007674 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007674:	b480      	push	{r7}
 8007676:	b085      	sub	sp, #20
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	460b      	mov	r3, r1
 800767e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	78fb      	ldrb	r3, [r7, #3]
 800768e:	68f9      	ldr	r1, [r7, #12]
 8007690:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007694:	4313      	orrs	r3, r2
 8007696:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3714      	adds	r7, #20
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr

080076a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80076a6:	b480      	push	{r7}
 80076a8:	b085      	sub	sp, #20
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80076c0:	f023 0303 	bic.w	r3, r3, #3
 80076c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076d4:	f043 0302 	orr.w	r3, r3, #2
 80076d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3714      	adds	r7, #20
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	695b      	ldr	r3, [r3, #20]
 80076f4:	f003 0301 	and.w	r3, r3, #1
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	370c      	adds	r7, #12
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800770c:	2300      	movs	r3, #0
 800770e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	3301      	adds	r3, #1
 8007714:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	4a13      	ldr	r2, [pc, #76]	; (8007768 <USB_CoreReset+0x64>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d901      	bls.n	8007722 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800771e:	2303      	movs	r3, #3
 8007720:	e01b      	b.n	800775a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	2b00      	cmp	r3, #0
 8007728:	daf2      	bge.n	8007710 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800772a:	2300      	movs	r3, #0
 800772c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	f043 0201 	orr.w	r2, r3, #1
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	3301      	adds	r3, #1
 800773e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	4a09      	ldr	r2, [pc, #36]	; (8007768 <USB_CoreReset+0x64>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d901      	bls.n	800774c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007748:	2303      	movs	r3, #3
 800774a:	e006      	b.n	800775a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	f003 0301 	and.w	r3, r3, #1
 8007754:	2b01      	cmp	r3, #1
 8007756:	d0f0      	beq.n	800773a <USB_CoreReset+0x36>

  return HAL_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3714      	adds	r7, #20
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	00030d40 	.word	0x00030d40

0800776c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800776c:	b480      	push	{r7}
 800776e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007770:	bf00      	nop
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
	...

0800777c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800777c:	b480      	push	{r7}
 800777e:	b085      	sub	sp, #20
 8007780:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007782:	f3ef 8305 	mrs	r3, IPSR
 8007786:	60bb      	str	r3, [r7, #8]
  return(result);
 8007788:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800778a:	2b00      	cmp	r3, #0
 800778c:	d10f      	bne.n	80077ae <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800778e:	f3ef 8310 	mrs	r3, PRIMASK
 8007792:	607b      	str	r3, [r7, #4]
  return(result);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d105      	bne.n	80077a6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800779a:	f3ef 8311 	mrs	r3, BASEPRI
 800779e:	603b      	str	r3, [r7, #0]
  return(result);
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d007      	beq.n	80077b6 <osKernelInitialize+0x3a>
 80077a6:	4b0e      	ldr	r3, [pc, #56]	; (80077e0 <osKernelInitialize+0x64>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	d103      	bne.n	80077b6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80077ae:	f06f 0305 	mvn.w	r3, #5
 80077b2:	60fb      	str	r3, [r7, #12]
 80077b4:	e00c      	b.n	80077d0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80077b6:	4b0a      	ldr	r3, [pc, #40]	; (80077e0 <osKernelInitialize+0x64>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d105      	bne.n	80077ca <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80077be:	4b08      	ldr	r3, [pc, #32]	; (80077e0 <osKernelInitialize+0x64>)
 80077c0:	2201      	movs	r2, #1
 80077c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80077c4:	2300      	movs	r3, #0
 80077c6:	60fb      	str	r3, [r7, #12]
 80077c8:	e002      	b.n	80077d0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80077ca:	f04f 33ff 	mov.w	r3, #4294967295
 80077ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80077d0:	68fb      	ldr	r3, [r7, #12]
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3714      	adds	r7, #20
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	20001520 	.word	0x20001520

080077e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077ea:	f3ef 8305 	mrs	r3, IPSR
 80077ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80077f0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d10f      	bne.n	8007816 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077f6:	f3ef 8310 	mrs	r3, PRIMASK
 80077fa:	607b      	str	r3, [r7, #4]
  return(result);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d105      	bne.n	800780e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007802:	f3ef 8311 	mrs	r3, BASEPRI
 8007806:	603b      	str	r3, [r7, #0]
  return(result);
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d007      	beq.n	800781e <osKernelStart+0x3a>
 800780e:	4b0f      	ldr	r3, [pc, #60]	; (800784c <osKernelStart+0x68>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	2b02      	cmp	r3, #2
 8007814:	d103      	bne.n	800781e <osKernelStart+0x3a>
    stat = osErrorISR;
 8007816:	f06f 0305 	mvn.w	r3, #5
 800781a:	60fb      	str	r3, [r7, #12]
 800781c:	e010      	b.n	8007840 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800781e:	4b0b      	ldr	r3, [pc, #44]	; (800784c <osKernelStart+0x68>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2b01      	cmp	r3, #1
 8007824:	d109      	bne.n	800783a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007826:	f7ff ffa1 	bl	800776c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800782a:	4b08      	ldr	r3, [pc, #32]	; (800784c <osKernelStart+0x68>)
 800782c:	2202      	movs	r2, #2
 800782e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007830:	f001 fd08 	bl	8009244 <vTaskStartScheduler>
      stat = osOK;
 8007834:	2300      	movs	r3, #0
 8007836:	60fb      	str	r3, [r7, #12]
 8007838:	e002      	b.n	8007840 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800783a:	f04f 33ff 	mov.w	r3, #4294967295
 800783e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007840:	68fb      	ldr	r3, [r7, #12]
}
 8007842:	4618      	mov	r0, r3
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	20001520 	.word	0x20001520

08007850 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007850:	b580      	push	{r7, lr}
 8007852:	b090      	sub	sp, #64	; 0x40
 8007854:	af04      	add	r7, sp, #16
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800785c:	2300      	movs	r3, #0
 800785e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007860:	f3ef 8305 	mrs	r3, IPSR
 8007864:	61fb      	str	r3, [r7, #28]
  return(result);
 8007866:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007868:	2b00      	cmp	r3, #0
 800786a:	f040 808f 	bne.w	800798c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800786e:	f3ef 8310 	mrs	r3, PRIMASK
 8007872:	61bb      	str	r3, [r7, #24]
  return(result);
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d105      	bne.n	8007886 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800787a:	f3ef 8311 	mrs	r3, BASEPRI
 800787e:	617b      	str	r3, [r7, #20]
  return(result);
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d003      	beq.n	800788e <osThreadNew+0x3e>
 8007886:	4b44      	ldr	r3, [pc, #272]	; (8007998 <osThreadNew+0x148>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2b02      	cmp	r3, #2
 800788c:	d07e      	beq.n	800798c <osThreadNew+0x13c>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d07b      	beq.n	800798c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007894:	2380      	movs	r3, #128	; 0x80
 8007896:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007898:	2318      	movs	r3, #24
 800789a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800789c:	2300      	movs	r3, #0
 800789e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80078a0:	f04f 33ff 	mov.w	r3, #4294967295
 80078a4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d045      	beq.n	8007938 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d002      	beq.n	80078ba <osThreadNew+0x6a>
        name = attr->name;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	699b      	ldr	r3, [r3, #24]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d002      	beq.n	80078c8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	699b      	ldr	r3, [r3, #24]
 80078c6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80078c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d008      	beq.n	80078e0 <osThreadNew+0x90>
 80078ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d0:	2b38      	cmp	r3, #56	; 0x38
 80078d2:	d805      	bhi.n	80078e0 <osThreadNew+0x90>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	f003 0301 	and.w	r3, r3, #1
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d001      	beq.n	80078e4 <osThreadNew+0x94>
        return (NULL);
 80078e0:	2300      	movs	r3, #0
 80078e2:	e054      	b.n	800798e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	695b      	ldr	r3, [r3, #20]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d003      	beq.n	80078f4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	695b      	ldr	r3, [r3, #20]
 80078f0:	089b      	lsrs	r3, r3, #2
 80078f2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d00e      	beq.n	800791a <osThreadNew+0xca>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	2bbb      	cmp	r3, #187	; 0xbb
 8007902:	d90a      	bls.n	800791a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007908:	2b00      	cmp	r3, #0
 800790a:	d006      	beq.n	800791a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	695b      	ldr	r3, [r3, #20]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d002      	beq.n	800791a <osThreadNew+0xca>
        mem = 1;
 8007914:	2301      	movs	r3, #1
 8007916:	623b      	str	r3, [r7, #32]
 8007918:	e010      	b.n	800793c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d10c      	bne.n	800793c <osThreadNew+0xec>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d108      	bne.n	800793c <osThreadNew+0xec>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d104      	bne.n	800793c <osThreadNew+0xec>
          mem = 0;
 8007932:	2300      	movs	r3, #0
 8007934:	623b      	str	r3, [r7, #32]
 8007936:	e001      	b.n	800793c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007938:	2300      	movs	r3, #0
 800793a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800793c:	6a3b      	ldr	r3, [r7, #32]
 800793e:	2b01      	cmp	r3, #1
 8007940:	d110      	bne.n	8007964 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800794a:	9202      	str	r2, [sp, #8]
 800794c:	9301      	str	r3, [sp, #4]
 800794e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007956:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	f001 fa7d 	bl	8008e58 <xTaskCreateStatic>
 800795e:	4603      	mov	r3, r0
 8007960:	613b      	str	r3, [r7, #16]
 8007962:	e013      	b.n	800798c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007964:	6a3b      	ldr	r3, [r7, #32]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d110      	bne.n	800798c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800796a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796c:	b29a      	uxth	r2, r3
 800796e:	f107 0310 	add.w	r3, r7, #16
 8007972:	9301      	str	r3, [sp, #4]
 8007974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007976:	9300      	str	r3, [sp, #0]
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800797c:	68f8      	ldr	r0, [r7, #12]
 800797e:	f001 face 	bl	8008f1e <xTaskCreate>
 8007982:	4603      	mov	r3, r0
 8007984:	2b01      	cmp	r3, #1
 8007986:	d001      	beq.n	800798c <osThreadNew+0x13c>
          hTask = NULL;
 8007988:	2300      	movs	r3, #0
 800798a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800798c:	693b      	ldr	r3, [r7, #16]
}
 800798e:	4618      	mov	r0, r3
 8007990:	3730      	adds	r7, #48	; 0x30
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	20001520 	.word	0x20001520

0800799c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800799c:	b580      	push	{r7, lr}
 800799e:	b086      	sub	sp, #24
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079a4:	f3ef 8305 	mrs	r3, IPSR
 80079a8:	613b      	str	r3, [r7, #16]
  return(result);
 80079aa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d10f      	bne.n	80079d0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079b0:	f3ef 8310 	mrs	r3, PRIMASK
 80079b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d105      	bne.n	80079c8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80079bc:	f3ef 8311 	mrs	r3, BASEPRI
 80079c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d007      	beq.n	80079d8 <osDelay+0x3c>
 80079c8:	4b0a      	ldr	r3, [pc, #40]	; (80079f4 <osDelay+0x58>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2b02      	cmp	r3, #2
 80079ce:	d103      	bne.n	80079d8 <osDelay+0x3c>
    stat = osErrorISR;
 80079d0:	f06f 0305 	mvn.w	r3, #5
 80079d4:	617b      	str	r3, [r7, #20]
 80079d6:	e007      	b.n	80079e8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80079d8:	2300      	movs	r3, #0
 80079da:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d002      	beq.n	80079e8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f001 fbf8 	bl	80091d8 <vTaskDelay>
    }
  }

  return (stat);
 80079e8:	697b      	ldr	r3, [r7, #20]
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3718      	adds	r7, #24
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	20001520 	.word	0x20001520

080079f8 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f003 f801 	bl	800aa08 <pvTimerGetTimerID>
 8007a06:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d005      	beq.n	8007a1a <TimerCallback+0x22>
    callb->func (callb->arg);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	6852      	ldr	r2, [r2, #4]
 8007a16:	4610      	mov	r0, r2
 8007a18:	4798      	blx	r3
  }
}
 8007a1a:	bf00      	nop
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
	...

08007a24 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b08e      	sub	sp, #56	; 0x38
 8007a28:	af02      	add	r7, sp, #8
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	607a      	str	r2, [r7, #4]
 8007a2e:	603b      	str	r3, [r7, #0]
 8007a30:	460b      	mov	r3, r1
 8007a32:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8007a34:	2300      	movs	r3, #0
 8007a36:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a38:	f3ef 8305 	mrs	r3, IPSR
 8007a3c:	61bb      	str	r3, [r7, #24]
  return(result);
 8007a3e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d16a      	bne.n	8007b1a <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a44:	f3ef 8310 	mrs	r3, PRIMASK
 8007a48:	617b      	str	r3, [r7, #20]
  return(result);
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d105      	bne.n	8007a5c <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007a50:	f3ef 8311 	mrs	r3, BASEPRI
 8007a54:	613b      	str	r3, [r7, #16]
  return(result);
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d003      	beq.n	8007a64 <osTimerNew+0x40>
 8007a5c:	4b31      	ldr	r3, [pc, #196]	; (8007b24 <osTimerNew+0x100>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2b02      	cmp	r3, #2
 8007a62:	d05a      	beq.n	8007b1a <osTimerNew+0xf6>
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d057      	beq.n	8007b1a <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8007a6a:	2008      	movs	r0, #8
 8007a6c:	f003 fa2a 	bl	800aec4 <pvPortMalloc>
 8007a70:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d050      	beq.n	8007b1a <osTimerNew+0xf6>
      callb->func = func;
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8007a84:	7afb      	ldrb	r3, [r7, #11]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d102      	bne.n	8007a90 <osTimerNew+0x6c>
        reload = pdFALSE;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8007a8e:	e001      	b.n	8007a94 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8007a90:	2301      	movs	r3, #1
 8007a92:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8007a94:	f04f 33ff 	mov.w	r3, #4294967295
 8007a98:	623b      	str	r3, [r7, #32]
      name = NULL;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d01c      	beq.n	8007ade <osTimerNew+0xba>
        if (attr->name != NULL) {
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d002      	beq.n	8007ab2 <osTimerNew+0x8e>
          name = attr->name;
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d006      	beq.n	8007ac8 <osTimerNew+0xa4>
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	2b2b      	cmp	r3, #43	; 0x2b
 8007ac0:	d902      	bls.n	8007ac8 <osTimerNew+0xa4>
          mem = 1;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	623b      	str	r3, [r7, #32]
 8007ac6:	e00c      	b.n	8007ae2 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d108      	bne.n	8007ae2 <osTimerNew+0xbe>
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d104      	bne.n	8007ae2 <osTimerNew+0xbe>
            mem = 0;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	623b      	str	r3, [r7, #32]
 8007adc:	e001      	b.n	8007ae2 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8007ae2:	6a3b      	ldr	r3, [r7, #32]
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d10c      	bne.n	8007b02 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	9301      	str	r3, [sp, #4]
 8007aee:	4b0e      	ldr	r3, [pc, #56]	; (8007b28 <osTimerNew+0x104>)
 8007af0:	9300      	str	r3, [sp, #0]
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007af6:	2101      	movs	r1, #1
 8007af8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007afa:	f002 fbf4 	bl	800a2e6 <xTimerCreateStatic>
 8007afe:	62b8      	str	r0, [r7, #40]	; 0x28
 8007b00:	e00b      	b.n	8007b1a <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8007b02:	6a3b      	ldr	r3, [r7, #32]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d108      	bne.n	8007b1a <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8007b08:	4b07      	ldr	r3, [pc, #28]	; (8007b28 <osTimerNew+0x104>)
 8007b0a:	9300      	str	r3, [sp, #0]
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b10:	2101      	movs	r1, #1
 8007b12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b14:	f002 fbc6 	bl	800a2a4 <xTimerCreate>
 8007b18:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8007b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3730      	adds	r7, #48	; 0x30
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	20001520 	.word	0x20001520
 8007b28:	080079f9 	.word	0x080079f9

08007b2c <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b08a      	sub	sp, #40	; 0x28
 8007b30:	af02      	add	r7, sp, #8
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b3a:	f3ef 8305 	mrs	r3, IPSR
 8007b3e:	617b      	str	r3, [r7, #20]
  return(result);
 8007b40:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d10f      	bne.n	8007b66 <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b46:	f3ef 8310 	mrs	r3, PRIMASK
 8007b4a:	613b      	str	r3, [r7, #16]
  return(result);
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d105      	bne.n	8007b5e <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007b52:	f3ef 8311 	mrs	r3, BASEPRI
 8007b56:	60fb      	str	r3, [r7, #12]
  return(result);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d007      	beq.n	8007b6e <osTimerStart+0x42>
 8007b5e:	4b12      	ldr	r3, [pc, #72]	; (8007ba8 <osTimerStart+0x7c>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	d103      	bne.n	8007b6e <osTimerStart+0x42>
    stat = osErrorISR;
 8007b66:	f06f 0305 	mvn.w	r3, #5
 8007b6a:	61fb      	str	r3, [r7, #28]
 8007b6c:	e017      	b.n	8007b9e <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d103      	bne.n	8007b7c <osTimerStart+0x50>
    stat = osErrorParameter;
 8007b74:	f06f 0303 	mvn.w	r3, #3
 8007b78:	61fb      	str	r3, [r7, #28]
 8007b7a:	e010      	b.n	8007b9e <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	9300      	str	r3, [sp, #0]
 8007b80:	2300      	movs	r3, #0
 8007b82:	683a      	ldr	r2, [r7, #0]
 8007b84:	2104      	movs	r1, #4
 8007b86:	69b8      	ldr	r0, [r7, #24]
 8007b88:	f002 fc2c 	bl	800a3e4 <xTimerGenericCommand>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d102      	bne.n	8007b98 <osTimerStart+0x6c>
      stat = osOK;
 8007b92:	2300      	movs	r3, #0
 8007b94:	61fb      	str	r3, [r7, #28]
 8007b96:	e002      	b.n	8007b9e <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 8007b98:	f06f 0302 	mvn.w	r3, #2
 8007b9c:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8007b9e:	69fb      	ldr	r3, [r7, #28]
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3720      	adds	r7, #32
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	20001520 	.word	0x20001520

08007bac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007bac:	b480      	push	{r7}
 8007bae:	b085      	sub	sp, #20
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	4a07      	ldr	r2, [pc, #28]	; (8007bd8 <vApplicationGetIdleTaskMemory+0x2c>)
 8007bbc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	4a06      	ldr	r2, [pc, #24]	; (8007bdc <vApplicationGetIdleTaskMemory+0x30>)
 8007bc2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2280      	movs	r2, #128	; 0x80
 8007bc8:	601a      	str	r2, [r3, #0]
}
 8007bca:	bf00      	nop
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	20001524 	.word	0x20001524
 8007bdc:	200015e0 	.word	0x200015e0

08007be0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007be0:	b480      	push	{r7}
 8007be2:	b085      	sub	sp, #20
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	4a07      	ldr	r2, [pc, #28]	; (8007c0c <vApplicationGetTimerTaskMemory+0x2c>)
 8007bf0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	4a06      	ldr	r2, [pc, #24]	; (8007c10 <vApplicationGetTimerTaskMemory+0x30>)
 8007bf6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007bfe:	601a      	str	r2, [r3, #0]
}
 8007c00:	bf00      	nop
 8007c02:	3714      	adds	r7, #20
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr
 8007c0c:	200017e0 	.word	0x200017e0
 8007c10:	2000189c 	.word	0x2000189c

08007c14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f103 0208 	add.w	r2, r3, #8
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f04f 32ff 	mov.w	r2, #4294967295
 8007c2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f103 0208 	add.w	r2, r3, #8
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f103 0208 	add.w	r2, r3, #8
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007c48:	bf00      	nop
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007c62:	bf00      	nop
 8007c64:	370c      	adds	r7, #12
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr

08007c6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c6e:	b480      	push	{r7}
 8007c70:	b085      	sub	sp, #20
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
 8007c76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	68fa      	ldr	r2, [r7, #12]
 8007c82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	689a      	ldr	r2, [r3, #8]
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	683a      	ldr	r2, [r7, #0]
 8007c92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	683a      	ldr	r2, [r7, #0]
 8007c98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	1c5a      	adds	r2, r3, #1
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	601a      	str	r2, [r3, #0]
}
 8007caa:	bf00      	nop
 8007cac:	3714      	adds	r7, #20
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr

08007cb6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007cb6:	b480      	push	{r7}
 8007cb8:	b085      	sub	sp, #20
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
 8007cbe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ccc:	d103      	bne.n	8007cd6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	60fb      	str	r3, [r7, #12]
 8007cd4:	e00c      	b.n	8007cf0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	3308      	adds	r3, #8
 8007cda:	60fb      	str	r3, [r7, #12]
 8007cdc:	e002      	b.n	8007ce4 <vListInsert+0x2e>
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	60fb      	str	r3, [r7, #12]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	68ba      	ldr	r2, [r7, #8]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d2f6      	bcs.n	8007cde <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	685a      	ldr	r2, [r3, #4]
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	683a      	ldr	r2, [r7, #0]
 8007cfe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	683a      	ldr	r2, [r7, #0]
 8007d0a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	1c5a      	adds	r2, r3, #1
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	601a      	str	r2, [r3, #0]
}
 8007d1c:	bf00      	nop
 8007d1e:	3714      	adds	r7, #20
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	6892      	ldr	r2, [r2, #8]
 8007d3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	6852      	ldr	r2, [r2, #4]
 8007d48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d103      	bne.n	8007d5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	689a      	ldr	r2, [r3, #8]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	1e5a      	subs	r2, r3, #1
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3714      	adds	r7, #20
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d10c      	bne.n	8007daa <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d94:	b672      	cpsid	i
 8007d96:	f383 8811 	msr	BASEPRI, r3
 8007d9a:	f3bf 8f6f 	isb	sy
 8007d9e:	f3bf 8f4f 	dsb	sy
 8007da2:	b662      	cpsie	i
 8007da4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007da6:	bf00      	nop
 8007da8:	e7fe      	b.n	8007da8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007daa:	f002 ff5f 	bl	800ac6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007db6:	68f9      	ldr	r1, [r7, #12]
 8007db8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007dba:	fb01 f303 	mul.w	r3, r1, r3
 8007dbe:	441a      	add	r2, r3
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dda:	3b01      	subs	r3, #1
 8007ddc:	68f9      	ldr	r1, [r7, #12]
 8007dde:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007de0:	fb01 f303 	mul.w	r3, r1, r3
 8007de4:	441a      	add	r2, r3
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	22ff      	movs	r2, #255	; 0xff
 8007dee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	22ff      	movs	r2, #255	; 0xff
 8007df6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d114      	bne.n	8007e2a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	691b      	ldr	r3, [r3, #16]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d01a      	beq.n	8007e3e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	3310      	adds	r3, #16
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f001 fcd3 	bl	80097b8 <xTaskRemoveFromEventList>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d012      	beq.n	8007e3e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007e18:	4b0c      	ldr	r3, [pc, #48]	; (8007e4c <xQueueGenericReset+0xd0>)
 8007e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e1e:	601a      	str	r2, [r3, #0]
 8007e20:	f3bf 8f4f 	dsb	sy
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	e009      	b.n	8007e3e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	3310      	adds	r3, #16
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f7ff fef0 	bl	8007c14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	3324      	adds	r3, #36	; 0x24
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f7ff feeb 	bl	8007c14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007e3e:	f002 ff49 	bl	800acd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007e42:	2301      	movs	r3, #1
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	e000ed04 	.word	0xe000ed04

08007e50 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b08e      	sub	sp, #56	; 0x38
 8007e54:	af02      	add	r7, sp, #8
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	607a      	str	r2, [r7, #4]
 8007e5c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d10c      	bne.n	8007e7e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8007e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e68:	b672      	cpsid	i
 8007e6a:	f383 8811 	msr	BASEPRI, r3
 8007e6e:	f3bf 8f6f 	isb	sy
 8007e72:	f3bf 8f4f 	dsb	sy
 8007e76:	b662      	cpsie	i
 8007e78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007e7a:	bf00      	nop
 8007e7c:	e7fe      	b.n	8007e7c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d10c      	bne.n	8007e9e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8007e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e88:	b672      	cpsid	i
 8007e8a:	f383 8811 	msr	BASEPRI, r3
 8007e8e:	f3bf 8f6f 	isb	sy
 8007e92:	f3bf 8f4f 	dsb	sy
 8007e96:	b662      	cpsie	i
 8007e98:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007e9a:	bf00      	nop
 8007e9c:	e7fe      	b.n	8007e9c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d002      	beq.n	8007eaa <xQueueGenericCreateStatic+0x5a>
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d001      	beq.n	8007eae <xQueueGenericCreateStatic+0x5e>
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e000      	b.n	8007eb0 <xQueueGenericCreateStatic+0x60>
 8007eae:	2300      	movs	r3, #0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d10c      	bne.n	8007ece <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8007eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb8:	b672      	cpsid	i
 8007eba:	f383 8811 	msr	BASEPRI, r3
 8007ebe:	f3bf 8f6f 	isb	sy
 8007ec2:	f3bf 8f4f 	dsb	sy
 8007ec6:	b662      	cpsie	i
 8007ec8:	623b      	str	r3, [r7, #32]
}
 8007eca:	bf00      	nop
 8007ecc:	e7fe      	b.n	8007ecc <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d102      	bne.n	8007eda <xQueueGenericCreateStatic+0x8a>
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d101      	bne.n	8007ede <xQueueGenericCreateStatic+0x8e>
 8007eda:	2301      	movs	r3, #1
 8007edc:	e000      	b.n	8007ee0 <xQueueGenericCreateStatic+0x90>
 8007ede:	2300      	movs	r3, #0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d10c      	bne.n	8007efe <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8007ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee8:	b672      	cpsid	i
 8007eea:	f383 8811 	msr	BASEPRI, r3
 8007eee:	f3bf 8f6f 	isb	sy
 8007ef2:	f3bf 8f4f 	dsb	sy
 8007ef6:	b662      	cpsie	i
 8007ef8:	61fb      	str	r3, [r7, #28]
}
 8007efa:	bf00      	nop
 8007efc:	e7fe      	b.n	8007efc <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007efe:	2350      	movs	r3, #80	; 0x50
 8007f00:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	2b50      	cmp	r3, #80	; 0x50
 8007f06:	d00c      	beq.n	8007f22 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0c:	b672      	cpsid	i
 8007f0e:	f383 8811 	msr	BASEPRI, r3
 8007f12:	f3bf 8f6f 	isb	sy
 8007f16:	f3bf 8f4f 	dsb	sy
 8007f1a:	b662      	cpsie	i
 8007f1c:	61bb      	str	r3, [r7, #24]
}
 8007f1e:	bf00      	nop
 8007f20:	e7fe      	b.n	8007f20 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007f22:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00d      	beq.n	8007f4a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f30:	2201      	movs	r2, #1
 8007f32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007f36:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f3c:	9300      	str	r3, [sp, #0]
 8007f3e:	4613      	mov	r3, r2
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	68b9      	ldr	r1, [r7, #8]
 8007f44:	68f8      	ldr	r0, [r7, #12]
 8007f46:	f000 f805 	bl	8007f54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3730      	adds	r7, #48	; 0x30
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	607a      	str	r2, [r7, #4]
 8007f60:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d103      	bne.n	8007f70 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	69ba      	ldr	r2, [r7, #24]
 8007f6c:	601a      	str	r2, [r3, #0]
 8007f6e:	e002      	b.n	8007f76 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007f70:	69bb      	ldr	r3, [r7, #24]
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	68fa      	ldr	r2, [r7, #12]
 8007f7a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	68ba      	ldr	r2, [r7, #8]
 8007f80:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007f82:	2101      	movs	r1, #1
 8007f84:	69b8      	ldr	r0, [r7, #24]
 8007f86:	f7ff fef9 	bl	8007d7c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	78fa      	ldrb	r2, [r7, #3]
 8007f8e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007f92:	bf00      	nop
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
	...

08007f9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b08e      	sub	sp, #56	; 0x38
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	607a      	str	r2, [r7, #4]
 8007fa8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007faa:	2300      	movs	r3, #0
 8007fac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d10c      	bne.n	8007fd2 <xQueueGenericSend+0x36>
	__asm volatile
 8007fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fbc:	b672      	cpsid	i
 8007fbe:	f383 8811 	msr	BASEPRI, r3
 8007fc2:	f3bf 8f6f 	isb	sy
 8007fc6:	f3bf 8f4f 	dsb	sy
 8007fca:	b662      	cpsie	i
 8007fcc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007fce:	bf00      	nop
 8007fd0:	e7fe      	b.n	8007fd0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d103      	bne.n	8007fe0 <xQueueGenericSend+0x44>
 8007fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d101      	bne.n	8007fe4 <xQueueGenericSend+0x48>
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e000      	b.n	8007fe6 <xQueueGenericSend+0x4a>
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d10c      	bne.n	8008004 <xQueueGenericSend+0x68>
	__asm volatile
 8007fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fee:	b672      	cpsid	i
 8007ff0:	f383 8811 	msr	BASEPRI, r3
 8007ff4:	f3bf 8f6f 	isb	sy
 8007ff8:	f3bf 8f4f 	dsb	sy
 8007ffc:	b662      	cpsie	i
 8007ffe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008000:	bf00      	nop
 8008002:	e7fe      	b.n	8008002 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	2b02      	cmp	r3, #2
 8008008:	d103      	bne.n	8008012 <xQueueGenericSend+0x76>
 800800a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800800e:	2b01      	cmp	r3, #1
 8008010:	d101      	bne.n	8008016 <xQueueGenericSend+0x7a>
 8008012:	2301      	movs	r3, #1
 8008014:	e000      	b.n	8008018 <xQueueGenericSend+0x7c>
 8008016:	2300      	movs	r3, #0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d10c      	bne.n	8008036 <xQueueGenericSend+0x9a>
	__asm volatile
 800801c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008020:	b672      	cpsid	i
 8008022:	f383 8811 	msr	BASEPRI, r3
 8008026:	f3bf 8f6f 	isb	sy
 800802a:	f3bf 8f4f 	dsb	sy
 800802e:	b662      	cpsie	i
 8008030:	623b      	str	r3, [r7, #32]
}
 8008032:	bf00      	nop
 8008034:	e7fe      	b.n	8008034 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008036:	f001 fdd1 	bl	8009bdc <xTaskGetSchedulerState>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d102      	bne.n	8008046 <xQueueGenericSend+0xaa>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d101      	bne.n	800804a <xQueueGenericSend+0xae>
 8008046:	2301      	movs	r3, #1
 8008048:	e000      	b.n	800804c <xQueueGenericSend+0xb0>
 800804a:	2300      	movs	r3, #0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d10c      	bne.n	800806a <xQueueGenericSend+0xce>
	__asm volatile
 8008050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008054:	b672      	cpsid	i
 8008056:	f383 8811 	msr	BASEPRI, r3
 800805a:	f3bf 8f6f 	isb	sy
 800805e:	f3bf 8f4f 	dsb	sy
 8008062:	b662      	cpsie	i
 8008064:	61fb      	str	r3, [r7, #28]
}
 8008066:	bf00      	nop
 8008068:	e7fe      	b.n	8008068 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800806a:	f002 fdff 	bl	800ac6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800806e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008076:	429a      	cmp	r2, r3
 8008078:	d302      	bcc.n	8008080 <xQueueGenericSend+0xe4>
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	2b02      	cmp	r3, #2
 800807e:	d129      	bne.n	80080d4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008080:	683a      	ldr	r2, [r7, #0]
 8008082:	68b9      	ldr	r1, [r7, #8]
 8008084:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008086:	f000 fa15 	bl	80084b4 <prvCopyDataToQueue>
 800808a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800808c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008090:	2b00      	cmp	r3, #0
 8008092:	d010      	beq.n	80080b6 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008096:	3324      	adds	r3, #36	; 0x24
 8008098:	4618      	mov	r0, r3
 800809a:	f001 fb8d 	bl	80097b8 <xTaskRemoveFromEventList>
 800809e:	4603      	mov	r3, r0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d013      	beq.n	80080cc <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80080a4:	4b3f      	ldr	r3, [pc, #252]	; (80081a4 <xQueueGenericSend+0x208>)
 80080a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080aa:	601a      	str	r2, [r3, #0]
 80080ac:	f3bf 8f4f 	dsb	sy
 80080b0:	f3bf 8f6f 	isb	sy
 80080b4:	e00a      	b.n	80080cc <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80080b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d007      	beq.n	80080cc <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80080bc:	4b39      	ldr	r3, [pc, #228]	; (80081a4 <xQueueGenericSend+0x208>)
 80080be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080c2:	601a      	str	r2, [r3, #0]
 80080c4:	f3bf 8f4f 	dsb	sy
 80080c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80080cc:	f002 fe02 	bl	800acd4 <vPortExitCritical>
				return pdPASS;
 80080d0:	2301      	movs	r3, #1
 80080d2:	e063      	b.n	800819c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d103      	bne.n	80080e2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80080da:	f002 fdfb 	bl	800acd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80080de:	2300      	movs	r3, #0
 80080e0:	e05c      	b.n	800819c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80080e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d106      	bne.n	80080f6 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80080e8:	f107 0314 	add.w	r3, r7, #20
 80080ec:	4618      	mov	r0, r3
 80080ee:	f001 fbc9 	bl	8009884 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080f2:	2301      	movs	r3, #1
 80080f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080f6:	f002 fded 	bl	800acd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080fa:	f001 f917 	bl	800932c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080fe:	f002 fdb5 	bl	800ac6c <vPortEnterCritical>
 8008102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008104:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008108:	b25b      	sxtb	r3, r3
 800810a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800810e:	d103      	bne.n	8008118 <xQueueGenericSend+0x17c>
 8008110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008112:	2200      	movs	r2, #0
 8008114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800811e:	b25b      	sxtb	r3, r3
 8008120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008124:	d103      	bne.n	800812e <xQueueGenericSend+0x192>
 8008126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008128:	2200      	movs	r2, #0
 800812a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800812e:	f002 fdd1 	bl	800acd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008132:	1d3a      	adds	r2, r7, #4
 8008134:	f107 0314 	add.w	r3, r7, #20
 8008138:	4611      	mov	r1, r2
 800813a:	4618      	mov	r0, r3
 800813c:	f001 fbb8 	bl	80098b0 <xTaskCheckForTimeOut>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d124      	bne.n	8008190 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008146:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008148:	f000 faac 	bl	80086a4 <prvIsQueueFull>
 800814c:	4603      	mov	r3, r0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d018      	beq.n	8008184 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008154:	3310      	adds	r3, #16
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	4611      	mov	r1, r2
 800815a:	4618      	mov	r0, r3
 800815c:	f001 fad8 	bl	8009710 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008160:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008162:	f000 fa37 	bl	80085d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008166:	f001 f8ef 	bl	8009348 <xTaskResumeAll>
 800816a:	4603      	mov	r3, r0
 800816c:	2b00      	cmp	r3, #0
 800816e:	f47f af7c 	bne.w	800806a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8008172:	4b0c      	ldr	r3, [pc, #48]	; (80081a4 <xQueueGenericSend+0x208>)
 8008174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008178:	601a      	str	r2, [r3, #0]
 800817a:	f3bf 8f4f 	dsb	sy
 800817e:	f3bf 8f6f 	isb	sy
 8008182:	e772      	b.n	800806a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008184:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008186:	f000 fa25 	bl	80085d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800818a:	f001 f8dd 	bl	8009348 <xTaskResumeAll>
 800818e:	e76c      	b.n	800806a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008190:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008192:	f000 fa1f 	bl	80085d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008196:	f001 f8d7 	bl	8009348 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800819a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800819c:	4618      	mov	r0, r3
 800819e:	3738      	adds	r7, #56	; 0x38
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	e000ed04 	.word	0xe000ed04

080081a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b08e      	sub	sp, #56	; 0x38
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	607a      	str	r2, [r7, #4]
 80081b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80081ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d10c      	bne.n	80081da <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80081c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c4:	b672      	cpsid	i
 80081c6:	f383 8811 	msr	BASEPRI, r3
 80081ca:	f3bf 8f6f 	isb	sy
 80081ce:	f3bf 8f4f 	dsb	sy
 80081d2:	b662      	cpsie	i
 80081d4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80081d6:	bf00      	nop
 80081d8:	e7fe      	b.n	80081d8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d103      	bne.n	80081e8 <xQueueGenericSendFromISR+0x40>
 80081e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d101      	bne.n	80081ec <xQueueGenericSendFromISR+0x44>
 80081e8:	2301      	movs	r3, #1
 80081ea:	e000      	b.n	80081ee <xQueueGenericSendFromISR+0x46>
 80081ec:	2300      	movs	r3, #0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d10c      	bne.n	800820c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80081f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f6:	b672      	cpsid	i
 80081f8:	f383 8811 	msr	BASEPRI, r3
 80081fc:	f3bf 8f6f 	isb	sy
 8008200:	f3bf 8f4f 	dsb	sy
 8008204:	b662      	cpsie	i
 8008206:	623b      	str	r3, [r7, #32]
}
 8008208:	bf00      	nop
 800820a:	e7fe      	b.n	800820a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	2b02      	cmp	r3, #2
 8008210:	d103      	bne.n	800821a <xQueueGenericSendFromISR+0x72>
 8008212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008216:	2b01      	cmp	r3, #1
 8008218:	d101      	bne.n	800821e <xQueueGenericSendFromISR+0x76>
 800821a:	2301      	movs	r3, #1
 800821c:	e000      	b.n	8008220 <xQueueGenericSendFromISR+0x78>
 800821e:	2300      	movs	r3, #0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d10c      	bne.n	800823e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8008224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008228:	b672      	cpsid	i
 800822a:	f383 8811 	msr	BASEPRI, r3
 800822e:	f3bf 8f6f 	isb	sy
 8008232:	f3bf 8f4f 	dsb	sy
 8008236:	b662      	cpsie	i
 8008238:	61fb      	str	r3, [r7, #28]
}
 800823a:	bf00      	nop
 800823c:	e7fe      	b.n	800823c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800823e:	f002 fdfd 	bl	800ae3c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008242:	f3ef 8211 	mrs	r2, BASEPRI
 8008246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824a:	b672      	cpsid	i
 800824c:	f383 8811 	msr	BASEPRI, r3
 8008250:	f3bf 8f6f 	isb	sy
 8008254:	f3bf 8f4f 	dsb	sy
 8008258:	b662      	cpsie	i
 800825a:	61ba      	str	r2, [r7, #24]
 800825c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800825e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008260:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008264:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800826a:	429a      	cmp	r2, r3
 800826c:	d302      	bcc.n	8008274 <xQueueGenericSendFromISR+0xcc>
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	2b02      	cmp	r3, #2
 8008272:	d12c      	bne.n	80082ce <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008276:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800827a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800827e:	683a      	ldr	r2, [r7, #0]
 8008280:	68b9      	ldr	r1, [r7, #8]
 8008282:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008284:	f000 f916 	bl	80084b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008288:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800828c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008290:	d112      	bne.n	80082b8 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008296:	2b00      	cmp	r3, #0
 8008298:	d016      	beq.n	80082c8 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800829a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829c:	3324      	adds	r3, #36	; 0x24
 800829e:	4618      	mov	r0, r3
 80082a0:	f001 fa8a 	bl	80097b8 <xTaskRemoveFromEventList>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d00e      	beq.n	80082c8 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d00b      	beq.n	80082c8 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	601a      	str	r2, [r3, #0]
 80082b6:	e007      	b.n	80082c8 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80082b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80082bc:	3301      	adds	r3, #1
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	b25a      	sxtb	r2, r3
 80082c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80082c8:	2301      	movs	r3, #1
 80082ca:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80082cc:	e001      	b.n	80082d2 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80082ce:	2300      	movs	r3, #0
 80082d0:	637b      	str	r3, [r7, #52]	; 0x34
 80082d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80082dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80082de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3738      	adds	r7, #56	; 0x38
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b08c      	sub	sp, #48	; 0x30
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80082f4:	2300      	movs	r3, #0
 80082f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80082fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d10c      	bne.n	800831c <xQueueReceive+0x34>
	__asm volatile
 8008302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008306:	b672      	cpsid	i
 8008308:	f383 8811 	msr	BASEPRI, r3
 800830c:	f3bf 8f6f 	isb	sy
 8008310:	f3bf 8f4f 	dsb	sy
 8008314:	b662      	cpsie	i
 8008316:	623b      	str	r3, [r7, #32]
}
 8008318:	bf00      	nop
 800831a:	e7fe      	b.n	800831a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d103      	bne.n	800832a <xQueueReceive+0x42>
 8008322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008326:	2b00      	cmp	r3, #0
 8008328:	d101      	bne.n	800832e <xQueueReceive+0x46>
 800832a:	2301      	movs	r3, #1
 800832c:	e000      	b.n	8008330 <xQueueReceive+0x48>
 800832e:	2300      	movs	r3, #0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d10c      	bne.n	800834e <xQueueReceive+0x66>
	__asm volatile
 8008334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008338:	b672      	cpsid	i
 800833a:	f383 8811 	msr	BASEPRI, r3
 800833e:	f3bf 8f6f 	isb	sy
 8008342:	f3bf 8f4f 	dsb	sy
 8008346:	b662      	cpsie	i
 8008348:	61fb      	str	r3, [r7, #28]
}
 800834a:	bf00      	nop
 800834c:	e7fe      	b.n	800834c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800834e:	f001 fc45 	bl	8009bdc <xTaskGetSchedulerState>
 8008352:	4603      	mov	r3, r0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d102      	bne.n	800835e <xQueueReceive+0x76>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d101      	bne.n	8008362 <xQueueReceive+0x7a>
 800835e:	2301      	movs	r3, #1
 8008360:	e000      	b.n	8008364 <xQueueReceive+0x7c>
 8008362:	2300      	movs	r3, #0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d10c      	bne.n	8008382 <xQueueReceive+0x9a>
	__asm volatile
 8008368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836c:	b672      	cpsid	i
 800836e:	f383 8811 	msr	BASEPRI, r3
 8008372:	f3bf 8f6f 	isb	sy
 8008376:	f3bf 8f4f 	dsb	sy
 800837a:	b662      	cpsie	i
 800837c:	61bb      	str	r3, [r7, #24]
}
 800837e:	bf00      	nop
 8008380:	e7fe      	b.n	8008380 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008382:	f002 fc73 	bl	800ac6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800838a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800838c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838e:	2b00      	cmp	r3, #0
 8008390:	d01f      	beq.n	80083d2 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008392:	68b9      	ldr	r1, [r7, #8]
 8008394:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008396:	f000 f8f7 	bl	8008588 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800839a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839c:	1e5a      	subs	r2, r3, #1
 800839e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d00f      	beq.n	80083ca <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ac:	3310      	adds	r3, #16
 80083ae:	4618      	mov	r0, r3
 80083b0:	f001 fa02 	bl	80097b8 <xTaskRemoveFromEventList>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d007      	beq.n	80083ca <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80083ba:	4b3d      	ldr	r3, [pc, #244]	; (80084b0 <xQueueReceive+0x1c8>)
 80083bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083c0:	601a      	str	r2, [r3, #0]
 80083c2:	f3bf 8f4f 	dsb	sy
 80083c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80083ca:	f002 fc83 	bl	800acd4 <vPortExitCritical>
				return pdPASS;
 80083ce:	2301      	movs	r3, #1
 80083d0:	e069      	b.n	80084a6 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d103      	bne.n	80083e0 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80083d8:	f002 fc7c 	bl	800acd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80083dc:	2300      	movs	r3, #0
 80083de:	e062      	b.n	80084a6 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d106      	bne.n	80083f4 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80083e6:	f107 0310 	add.w	r3, r7, #16
 80083ea:	4618      	mov	r0, r3
 80083ec:	f001 fa4a 	bl	8009884 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083f0:	2301      	movs	r3, #1
 80083f2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083f4:	f002 fc6e 	bl	800acd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083f8:	f000 ff98 	bl	800932c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083fc:	f002 fc36 	bl	800ac6c <vPortEnterCritical>
 8008400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008402:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008406:	b25b      	sxtb	r3, r3
 8008408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800840c:	d103      	bne.n	8008416 <xQueueReceive+0x12e>
 800840e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008410:	2200      	movs	r2, #0
 8008412:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008418:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800841c:	b25b      	sxtb	r3, r3
 800841e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008422:	d103      	bne.n	800842c <xQueueReceive+0x144>
 8008424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008426:	2200      	movs	r2, #0
 8008428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800842c:	f002 fc52 	bl	800acd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008430:	1d3a      	adds	r2, r7, #4
 8008432:	f107 0310 	add.w	r3, r7, #16
 8008436:	4611      	mov	r1, r2
 8008438:	4618      	mov	r0, r3
 800843a:	f001 fa39 	bl	80098b0 <xTaskCheckForTimeOut>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d123      	bne.n	800848c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008444:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008446:	f000 f917 	bl	8008678 <prvIsQueueEmpty>
 800844a:	4603      	mov	r3, r0
 800844c:	2b00      	cmp	r3, #0
 800844e:	d017      	beq.n	8008480 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008452:	3324      	adds	r3, #36	; 0x24
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	4611      	mov	r1, r2
 8008458:	4618      	mov	r0, r3
 800845a:	f001 f959 	bl	8009710 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800845e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008460:	f000 f8b8 	bl	80085d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008464:	f000 ff70 	bl	8009348 <xTaskResumeAll>
 8008468:	4603      	mov	r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	d189      	bne.n	8008382 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800846e:	4b10      	ldr	r3, [pc, #64]	; (80084b0 <xQueueReceive+0x1c8>)
 8008470:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008474:	601a      	str	r2, [r3, #0]
 8008476:	f3bf 8f4f 	dsb	sy
 800847a:	f3bf 8f6f 	isb	sy
 800847e:	e780      	b.n	8008382 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008480:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008482:	f000 f8a7 	bl	80085d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008486:	f000 ff5f 	bl	8009348 <xTaskResumeAll>
 800848a:	e77a      	b.n	8008382 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800848c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800848e:	f000 f8a1 	bl	80085d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008492:	f000 ff59 	bl	8009348 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008496:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008498:	f000 f8ee 	bl	8008678 <prvIsQueueEmpty>
 800849c:	4603      	mov	r3, r0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	f43f af6f 	beq.w	8008382 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80084a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3730      	adds	r7, #48	; 0x30
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	e000ed04 	.word	0xe000ed04

080084b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b086      	sub	sp, #24
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80084c0:	2300      	movs	r3, #0
 80084c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d10d      	bne.n	80084ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d14d      	bne.n	8008576 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	4618      	mov	r0, r3
 80084e0:	f001 fb9a 	bl	8009c18 <xTaskPriorityDisinherit>
 80084e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2200      	movs	r2, #0
 80084ea:	609a      	str	r2, [r3, #8]
 80084ec:	e043      	b.n	8008576 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d119      	bne.n	8008528 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6858      	ldr	r0, [r3, #4]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fc:	461a      	mov	r2, r3
 80084fe:	68b9      	ldr	r1, [r7, #8]
 8008500:	f002 feea 	bl	800b2d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	685a      	ldr	r2, [r3, #4]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850c:	441a      	add	r2, r3
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	685a      	ldr	r2, [r3, #4]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	429a      	cmp	r2, r3
 800851c:	d32b      	bcc.n	8008576 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	605a      	str	r2, [r3, #4]
 8008526:	e026      	b.n	8008576 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	68d8      	ldr	r0, [r3, #12]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008530:	461a      	mov	r2, r3
 8008532:	68b9      	ldr	r1, [r7, #8]
 8008534:	f002 fed0 	bl	800b2d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	68da      	ldr	r2, [r3, #12]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008540:	425b      	negs	r3, r3
 8008542:	441a      	add	r2, r3
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	68da      	ldr	r2, [r3, #12]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	429a      	cmp	r2, r3
 8008552:	d207      	bcs.n	8008564 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	689a      	ldr	r2, [r3, #8]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800855c:	425b      	negs	r3, r3
 800855e:	441a      	add	r2, r3
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2b02      	cmp	r3, #2
 8008568:	d105      	bne.n	8008576 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d002      	beq.n	8008576 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	3b01      	subs	r3, #1
 8008574:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	1c5a      	adds	r2, r3, #1
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800857e:	697b      	ldr	r3, [r7, #20]
}
 8008580:	4618      	mov	r0, r3
 8008582:	3718      	adds	r7, #24
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008596:	2b00      	cmp	r3, #0
 8008598:	d018      	beq.n	80085cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	68da      	ldr	r2, [r3, #12]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a2:	441a      	add	r2, r3
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	68da      	ldr	r2, [r3, #12]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d303      	bcc.n	80085bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	68d9      	ldr	r1, [r3, #12]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c4:	461a      	mov	r2, r3
 80085c6:	6838      	ldr	r0, [r7, #0]
 80085c8:	f002 fe86 	bl	800b2d8 <memcpy>
	}
}
 80085cc:	bf00      	nop
 80085ce:	3708      	adds	r7, #8
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80085dc:	f002 fb46 	bl	800ac6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80085e8:	e011      	b.n	800860e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d012      	beq.n	8008618 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	3324      	adds	r3, #36	; 0x24
 80085f6:	4618      	mov	r0, r3
 80085f8:	f001 f8de 	bl	80097b8 <xTaskRemoveFromEventList>
 80085fc:	4603      	mov	r3, r0
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d001      	beq.n	8008606 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008602:	f001 f9bb 	bl	800997c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008606:	7bfb      	ldrb	r3, [r7, #15]
 8008608:	3b01      	subs	r3, #1
 800860a:	b2db      	uxtb	r3, r3
 800860c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800860e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008612:	2b00      	cmp	r3, #0
 8008614:	dce9      	bgt.n	80085ea <prvUnlockQueue+0x16>
 8008616:	e000      	b.n	800861a <prvUnlockQueue+0x46>
					break;
 8008618:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	22ff      	movs	r2, #255	; 0xff
 800861e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008622:	f002 fb57 	bl	800acd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008626:	f002 fb21 	bl	800ac6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008630:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008632:	e011      	b.n	8008658 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	691b      	ldr	r3, [r3, #16]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d012      	beq.n	8008662 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	3310      	adds	r3, #16
 8008640:	4618      	mov	r0, r3
 8008642:	f001 f8b9 	bl	80097b8 <xTaskRemoveFromEventList>
 8008646:	4603      	mov	r3, r0
 8008648:	2b00      	cmp	r3, #0
 800864a:	d001      	beq.n	8008650 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800864c:	f001 f996 	bl	800997c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008650:	7bbb      	ldrb	r3, [r7, #14]
 8008652:	3b01      	subs	r3, #1
 8008654:	b2db      	uxtb	r3, r3
 8008656:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008658:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800865c:	2b00      	cmp	r3, #0
 800865e:	dce9      	bgt.n	8008634 <prvUnlockQueue+0x60>
 8008660:	e000      	b.n	8008664 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008662:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	22ff      	movs	r2, #255	; 0xff
 8008668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800866c:	f002 fb32 	bl	800acd4 <vPortExitCritical>
}
 8008670:	bf00      	nop
 8008672:	3710      	adds	r7, #16
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008680:	f002 faf4 	bl	800ac6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008688:	2b00      	cmp	r3, #0
 800868a:	d102      	bne.n	8008692 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800868c:	2301      	movs	r3, #1
 800868e:	60fb      	str	r3, [r7, #12]
 8008690:	e001      	b.n	8008696 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008692:	2300      	movs	r3, #0
 8008694:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008696:	f002 fb1d 	bl	800acd4 <vPortExitCritical>

	return xReturn;
 800869a:	68fb      	ldr	r3, [r7, #12]
}
 800869c:	4618      	mov	r0, r3
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086ac:	f002 fade 	bl	800ac6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d102      	bne.n	80086c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80086bc:	2301      	movs	r3, #1
 80086be:	60fb      	str	r3, [r7, #12]
 80086c0:	e001      	b.n	80086c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80086c2:	2300      	movs	r3, #0
 80086c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80086c6:	f002 fb05 	bl	800acd4 <vPortExitCritical>

	return xReturn;
 80086ca:	68fb      	ldr	r3, [r7, #12]
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3710      	adds	r7, #16
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80086d4:	b480      	push	{r7}
 80086d6:	b085      	sub	sp, #20
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80086de:	2300      	movs	r3, #0
 80086e0:	60fb      	str	r3, [r7, #12]
 80086e2:	e014      	b.n	800870e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80086e4:	4a0f      	ldr	r2, [pc, #60]	; (8008724 <vQueueAddToRegistry+0x50>)
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d10b      	bne.n	8008708 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80086f0:	490c      	ldr	r1, [pc, #48]	; (8008724 <vQueueAddToRegistry+0x50>)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	683a      	ldr	r2, [r7, #0]
 80086f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80086fa:	4a0a      	ldr	r2, [pc, #40]	; (8008724 <vQueueAddToRegistry+0x50>)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	00db      	lsls	r3, r3, #3
 8008700:	4413      	add	r3, r2
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008706:	e006      	b.n	8008716 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	3301      	adds	r3, #1
 800870c:	60fb      	str	r3, [r7, #12]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2b07      	cmp	r3, #7
 8008712:	d9e7      	bls.n	80086e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008714:	bf00      	nop
 8008716:	bf00      	nop
 8008718:	3714      	adds	r7, #20
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop
 8008724:	20001c9c 	.word	0x20001c9c

08008728 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008728:	b580      	push	{r7, lr}
 800872a:	b086      	sub	sp, #24
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008738:	f002 fa98 	bl	800ac6c <vPortEnterCritical>
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008742:	b25b      	sxtb	r3, r3
 8008744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008748:	d103      	bne.n	8008752 <vQueueWaitForMessageRestricted+0x2a>
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	2200      	movs	r2, #0
 800874e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008758:	b25b      	sxtb	r3, r3
 800875a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800875e:	d103      	bne.n	8008768 <vQueueWaitForMessageRestricted+0x40>
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	2200      	movs	r2, #0
 8008764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008768:	f002 fab4 	bl	800acd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008770:	2b00      	cmp	r3, #0
 8008772:	d106      	bne.n	8008782 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	3324      	adds	r3, #36	; 0x24
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	68b9      	ldr	r1, [r7, #8]
 800877c:	4618      	mov	r0, r3
 800877e:	f000 ffed 	bl	800975c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008782:	6978      	ldr	r0, [r7, #20]
 8008784:	f7ff ff26 	bl	80085d4 <prvUnlockQueue>
	}
 8008788:	bf00      	nop
 800878a:	3718      	adds	r7, #24
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 8008790:	b580      	push	{r7, lr}
 8008792:	b08c      	sub	sp, #48	; 0x30
 8008794:	af02      	add	r7, sp, #8
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d112      	bne.n	80087c8 <xStreamBufferGenericCreate+0x38>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 80087a2:	2301      	movs	r3, #1
 80087a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2b04      	cmp	r3, #4
 80087ac:	d81f      	bhi.n	80087ee <xStreamBufferGenericCreate+0x5e>
	__asm volatile
 80087ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b2:	b672      	cpsid	i
 80087b4:	f383 8811 	msr	BASEPRI, r3
 80087b8:	f3bf 8f6f 	isb	sy
 80087bc:	f3bf 8f4f 	dsb	sy
 80087c0:	b662      	cpsie	i
 80087c2:	61fb      	str	r3, [r7, #28]
}
 80087c4:	bf00      	nop
 80087c6:	e7fe      	b.n	80087c6 <xStreamBufferGenericCreate+0x36>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 80087c8:	2300      	movs	r3, #0
 80087ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d10c      	bne.n	80087ee <xStreamBufferGenericCreate+0x5e>
	__asm volatile
 80087d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d8:	b672      	cpsid	i
 80087da:	f383 8811 	msr	BASEPRI, r3
 80087de:	f3bf 8f6f 	isb	sy
 80087e2:	f3bf 8f4f 	dsb	sy
 80087e6:	b662      	cpsie	i
 80087e8:	61bb      	str	r3, [r7, #24]
}
 80087ea:	bf00      	nop
 80087ec:	e7fe      	b.n	80087ec <xStreamBufferGenericCreate+0x5c>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 80087ee:	68ba      	ldr	r2, [r7, #8]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d90c      	bls.n	8008810 <xStreamBufferGenericCreate+0x80>
	__asm volatile
 80087f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fa:	b672      	cpsid	i
 80087fc:	f383 8811 	msr	BASEPRI, r3
 8008800:	f3bf 8f6f 	isb	sy
 8008804:	f3bf 8f4f 	dsb	sy
 8008808:	b662      	cpsie	i
 800880a:	617b      	str	r3, [r7, #20]
}
 800880c:	bf00      	nop
 800880e:	e7fe      	b.n	800880e <xStreamBufferGenericCreate+0x7e>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d101      	bne.n	800881a <xStreamBufferGenericCreate+0x8a>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8008816:	2301      	movs	r3, #1
 8008818:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	3301      	adds	r3, #1
 800881e:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	3324      	adds	r3, #36	; 0x24
 8008824:	4618      	mov	r0, r3
 8008826:	f002 fb4d 	bl	800aec4 <pvPortMalloc>
 800882a:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 800882c:	6a3b      	ldr	r3, [r7, #32]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00a      	beq.n	8008848 <xStreamBufferGenericCreate+0xb8>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8008832:	6a3b      	ldr	r3, [r7, #32]
 8008834:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8008838:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800883c:	9300      	str	r3, [sp, #0]
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	68fa      	ldr	r2, [r7, #12]
 8008842:	6a38      	ldr	r0, [r7, #32]
 8008844:	f000 fad3 	bl	8008dee <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8008848:	6a3b      	ldr	r3, [r7, #32]
	}
 800884a:	4618      	mov	r0, r3
 800884c:	3728      	adds	r7, #40	; 0x28
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}

08008852 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8008852:	b480      	push	{r7}
 8008854:	b087      	sub	sp, #28
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d10c      	bne.n	800887e <xStreamBufferSpacesAvailable+0x2c>
	__asm volatile
 8008864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008868:	b672      	cpsid	i
 800886a:	f383 8811 	msr	BASEPRI, r3
 800886e:	f3bf 8f6f 	isb	sy
 8008872:	f3bf 8f4f 	dsb	sy
 8008876:	b662      	cpsie	i
 8008878:	60fb      	str	r3, [r7, #12]
}
 800887a:	bf00      	nop
 800887c:	e7fe      	b.n	800887c <xStreamBufferSpacesAvailable+0x2a>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	689a      	ldr	r2, [r3, #8]
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4413      	add	r3, r2
 8008888:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	697a      	ldr	r2, [r7, #20]
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	3b01      	subs	r3, #1
 8008898:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	697a      	ldr	r2, [r7, #20]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d304      	bcc.n	80088ae <xStreamBufferSpacesAvailable+0x5c>
	{
		xSpace -= pxStreamBuffer->xLength;
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	697a      	ldr	r2, [r7, #20]
 80088aa:	1ad3      	subs	r3, r2, r3
 80088ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 80088ae:	697b      	ldr	r3, [r7, #20]
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	371c      	adds	r7, #28
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b090      	sub	sp, #64	; 0x40
 80088c0:	af02      	add	r7, sp, #8
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	607a      	str	r2, [r7, #4]
 80088c8:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	633b      	str	r3, [r7, #48]	; 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	637b      	str	r3, [r7, #52]	; 0x34

	configASSERT( pvTxData );
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d10c      	bne.n	80088f2 <xStreamBufferSendFromISR+0x36>
	__asm volatile
 80088d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088dc:	b672      	cpsid	i
 80088de:	f383 8811 	msr	BASEPRI, r3
 80088e2:	f3bf 8f6f 	isb	sy
 80088e6:	f3bf 8f4f 	dsb	sy
 80088ea:	b662      	cpsie	i
 80088ec:	623b      	str	r3, [r7, #32]
}
 80088ee:	bf00      	nop
 80088f0:	e7fe      	b.n	80088f0 <xStreamBufferSendFromISR+0x34>
	configASSERT( pxStreamBuffer );
 80088f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d10c      	bne.n	8008912 <xStreamBufferSendFromISR+0x56>
	__asm volatile
 80088f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fc:	b672      	cpsid	i
 80088fe:	f383 8811 	msr	BASEPRI, r3
 8008902:	f3bf 8f6f 	isb	sy
 8008906:	f3bf 8f4f 	dsb	sy
 800890a:	b662      	cpsie	i
 800890c:	61fb      	str	r3, [r7, #28]
}
 800890e:	bf00      	nop
 8008910:	e7fe      	b.n	8008910 <xStreamBufferSendFromISR+0x54>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8008912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008914:	7f1b      	ldrb	r3, [r3, #28]
 8008916:	f003 0301 	and.w	r3, r3, #1
 800891a:	2b00      	cmp	r3, #0
 800891c:	d002      	beq.n	8008924 <xStreamBufferSendFromISR+0x68>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800891e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008920:	3304      	adds	r3, #4
 8008922:	637b      	str	r3, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8008924:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008926:	f7ff ff94 	bl	8008852 <xStreamBufferSpacesAvailable>
 800892a:	62f8      	str	r0, [r7, #44]	; 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 800892c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800892e:	9300      	str	r3, [sp, #0]
 8008930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	68b9      	ldr	r1, [r7, #8]
 8008936:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008938:	f000 f837 	bl	80089aa <prvWriteMessageToBuffer>
 800893c:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 800893e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008940:	2b00      	cmp	r3, #0
 8008942:	d02d      	beq.n	80089a0 <xStreamBufferSendFromISR+0xe4>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8008944:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008946:	f000 fa32 	bl	8008dae <prvBytesInBuffer>
 800894a:	4602      	mov	r2, r0
 800894c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	429a      	cmp	r2, r3
 8008952:	d325      	bcc.n	80089a0 <xStreamBufferSendFromISR+0xe4>
	__asm volatile
 8008954:	f3ef 8211 	mrs	r2, BASEPRI
 8008958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800895c:	b672      	cpsid	i
 800895e:	f383 8811 	msr	BASEPRI, r3
 8008962:	f3bf 8f6f 	isb	sy
 8008966:	f3bf 8f4f 	dsb	sy
 800896a:	b662      	cpsie	i
 800896c:	61ba      	str	r2, [r7, #24]
 800896e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008970:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 8008972:	627b      	str	r3, [r7, #36]	; 0x24
 8008974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008976:	691b      	ldr	r3, [r3, #16]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d00b      	beq.n	8008994 <xStreamBufferSendFromISR+0xd8>
 800897c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897e:	6918      	ldr	r0, [r3, #16]
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	9300      	str	r3, [sp, #0]
 8008984:	2300      	movs	r3, #0
 8008986:	2200      	movs	r2, #0
 8008988:	2100      	movs	r1, #0
 800898a:	f001 fadb 	bl	8009f44 <xTaskGenericNotifyFromISR>
 800898e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008990:	2200      	movs	r2, #0
 8008992:	611a      	str	r2, [r3, #16]
 8008994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008996:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	f383 8811 	msr	BASEPRI, r3
}
 800899e:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 80089a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3738      	adds	r7, #56	; 0x38
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b086      	sub	sp, #24
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	60f8      	str	r0, [r7, #12]
 80089b2:	60b9      	str	r1, [r7, #8]
 80089b4:	607a      	str	r2, [r7, #4]
 80089b6:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d102      	bne.n	80089c4 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 80089be:	2300      	movs	r3, #0
 80089c0:	617b      	str	r3, [r7, #20]
 80089c2:	e01d      	b.n	8008a00 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	7f1b      	ldrb	r3, [r3, #28]
 80089c8:	f003 0301 	and.w	r3, r3, #1
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d108      	bne.n	80089e2 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 80089d0:	2301      	movs	r3, #1
 80089d2:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	4293      	cmp	r3, r2
 80089da:	bf28      	it	cs
 80089dc:	4613      	movcs	r3, r2
 80089de:	607b      	str	r3, [r7, #4]
 80089e0:	e00e      	b.n	8008a00 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 80089e2:	683a      	ldr	r2, [r7, #0]
 80089e4:	6a3b      	ldr	r3, [r7, #32]
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d308      	bcc.n	80089fc <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 80089ea:	2301      	movs	r3, #1
 80089ec:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 80089ee:	1d3b      	adds	r3, r7, #4
 80089f0:	2204      	movs	r2, #4
 80089f2:	4619      	mov	r1, r3
 80089f4:	68f8      	ldr	r0, [r7, #12]
 80089f6:	f000 f8e2 	bl	8008bbe <prvWriteBytesToBuffer>
 80089fa:	e001      	b.n	8008a00 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 80089fc:	2300      	movs	r3, #0
 80089fe:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d007      	beq.n	8008a16 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	461a      	mov	r2, r3
 8008a0a:	68b9      	ldr	r1, [r7, #8]
 8008a0c:	68f8      	ldr	r0, [r7, #12]
 8008a0e:	f000 f8d6 	bl	8008bbe <prvWriteBytesToBuffer>
 8008a12:	6138      	str	r0, [r7, #16]
 8008a14:	e001      	b.n	8008a1a <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8008a16:	2300      	movs	r3, #0
 8008a18:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8008a1a:	693b      	ldr	r3, [r7, #16]
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3718      	adds	r7, #24
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b08e      	sub	sp, #56	; 0x38
 8008a28:	af02      	add	r7, sp, #8
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	607a      	str	r2, [r7, #4]
 8008a30:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8008a36:	2300      	movs	r3, #0
 8008a38:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d10c      	bne.n	8008a5a <xStreamBufferReceive+0x36>
	__asm volatile
 8008a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a44:	b672      	cpsid	i
 8008a46:	f383 8811 	msr	BASEPRI, r3
 8008a4a:	f3bf 8f6f 	isb	sy
 8008a4e:	f3bf 8f4f 	dsb	sy
 8008a52:	b662      	cpsie	i
 8008a54:	61fb      	str	r3, [r7, #28]
}
 8008a56:	bf00      	nop
 8008a58:	e7fe      	b.n	8008a58 <xStreamBufferReceive+0x34>
	configASSERT( pxStreamBuffer );
 8008a5a:	6a3b      	ldr	r3, [r7, #32]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d10c      	bne.n	8008a7a <xStreamBufferReceive+0x56>
	__asm volatile
 8008a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a64:	b672      	cpsid	i
 8008a66:	f383 8811 	msr	BASEPRI, r3
 8008a6a:	f3bf 8f6f 	isb	sy
 8008a6e:	f3bf 8f4f 	dsb	sy
 8008a72:	b662      	cpsie	i
 8008a74:	61bb      	str	r3, [r7, #24]
}
 8008a76:	bf00      	nop
 8008a78:	e7fe      	b.n	8008a78 <xStreamBufferReceive+0x54>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8008a7a:	6a3b      	ldr	r3, [r7, #32]
 8008a7c:	7f1b      	ldrb	r3, [r3, #28]
 8008a7e:	f003 0301 	and.w	r3, r3, #1
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d002      	beq.n	8008a8c <xStreamBufferReceive+0x68>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8008a86:	2304      	movs	r3, #4
 8008a88:	627b      	str	r3, [r7, #36]	; 0x24
 8008a8a:	e001      	b.n	8008a90 <xStreamBufferReceive+0x6c>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d036      	beq.n	8008b04 <xStreamBufferReceive+0xe0>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8008a96:	f002 f8e9 	bl	800ac6c <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8008a9a:	6a38      	ldr	r0, [r7, #32]
 8008a9c:	f000 f987 	bl	8008dae <prvBytesInBuffer>
 8008aa0:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8008aa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d818      	bhi.n	8008adc <xStreamBufferReceive+0xb8>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8008aaa:	2000      	movs	r0, #0
 8008aac:	f001 fb36 	bl	800a11c <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8008ab0:	6a3b      	ldr	r3, [r7, #32]
 8008ab2:	691b      	ldr	r3, [r3, #16]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d00c      	beq.n	8008ad2 <xStreamBufferReceive+0xae>
	__asm volatile
 8008ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008abc:	b672      	cpsid	i
 8008abe:	f383 8811 	msr	BASEPRI, r3
 8008ac2:	f3bf 8f6f 	isb	sy
 8008ac6:	f3bf 8f4f 	dsb	sy
 8008aca:	b662      	cpsie	i
 8008acc:	617b      	str	r3, [r7, #20]
}
 8008ace:	bf00      	nop
 8008ad0:	e7fe      	b.n	8008ad0 <xStreamBufferReceive+0xac>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8008ad2:	f001 f873 	bl	8009bbc <xTaskGetCurrentTaskHandle>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	6a3b      	ldr	r3, [r7, #32]
 8008ada:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008adc:	f002 f8fa 	bl	800acd4 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8008ae0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d811      	bhi.n	8008b0c <xStreamBufferReceive+0xe8>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	2200      	movs	r2, #0
 8008aec:	2100      	movs	r1, #0
 8008aee:	2000      	movs	r0, #0
 8008af0:	f001 f904 	bl	8009cfc <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8008af4:	6a3b      	ldr	r3, [r7, #32]
 8008af6:	2200      	movs	r2, #0
 8008af8:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8008afa:	6a38      	ldr	r0, [r7, #32]
 8008afc:	f000 f957 	bl	8008dae <prvBytesInBuffer>
 8008b00:	62b8      	str	r0, [r7, #40]	; 0x28
 8008b02:	e003      	b.n	8008b0c <xStreamBufferReceive+0xe8>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8008b04:	6a38      	ldr	r0, [r7, #32]
 8008b06:	f000 f952 	bl	8008dae <prvBytesInBuffer>
 8008b0a:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8008b0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d91d      	bls.n	8008b50 <xStreamBufferReceive+0x12c>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8008b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b16:	9300      	str	r3, [sp, #0]
 8008b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	68b9      	ldr	r1, [r7, #8]
 8008b1e:	6a38      	ldr	r0, [r7, #32]
 8008b20:	f000 f81b 	bl	8008b5a <prvReadMessageFromBuffer>
 8008b24:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8008b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d011      	beq.n	8008b50 <xStreamBufferReceive+0x12c>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8008b2c:	f000 fbfe 	bl	800932c <vTaskSuspendAll>
 8008b30:	6a3b      	ldr	r3, [r7, #32]
 8008b32:	695b      	ldr	r3, [r3, #20]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d009      	beq.n	8008b4c <xStreamBufferReceive+0x128>
 8008b38:	6a3b      	ldr	r3, [r7, #32]
 8008b3a:	6958      	ldr	r0, [r3, #20]
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	2200      	movs	r2, #0
 8008b40:	2100      	movs	r1, #0
 8008b42:	f001 f93b 	bl	8009dbc <xTaskGenericNotify>
 8008b46:	6a3b      	ldr	r3, [r7, #32]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	615a      	str	r2, [r3, #20]
 8008b4c:	f000 fbfc 	bl	8009348 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8008b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3730      	adds	r7, #48	; 0x30
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8008b5a:	b580      	push	{r7, lr}
 8008b5c:	b088      	sub	sp, #32
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	60f8      	str	r0, [r7, #12]
 8008b62:	60b9      	str	r1, [r7, #8]
 8008b64:	607a      	str	r2, [r7, #4]
 8008b66:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8008b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d019      	beq.n	8008ba2 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8008b74:	f107 0110 	add.w	r1, r7, #16
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b7c:	68f8      	ldr	r0, [r7, #12]
 8008b7e:	f000 f896 	bl	8008cae <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 8008b86:	683a      	ldr	r2, [r7, #0]
 8008b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8a:	1ad3      	subs	r3, r2, r3
 8008b8c:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8008b8e:	69fa      	ldr	r2, [r7, #28]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d907      	bls.n	8008ba6 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	69ba      	ldr	r2, [r7, #24]
 8008b9a:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	61fb      	str	r3, [r7, #28]
 8008ba0:	e001      	b.n	8008ba6 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	69fa      	ldr	r2, [r7, #28]
 8008baa:	68b9      	ldr	r1, [r7, #8]
 8008bac:	68f8      	ldr	r0, [r7, #12]
 8008bae:	f000 f87e 	bl	8008cae <prvReadBytesFromBuffer>
 8008bb2:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8008bb4:	697b      	ldr	r3, [r7, #20]
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3720      	adds	r7, #32
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}

08008bbe <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8008bbe:	b580      	push	{r7, lr}
 8008bc0:	b08a      	sub	sp, #40	; 0x28
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	60f8      	str	r0, [r7, #12]
 8008bc6:	60b9      	str	r1, [r7, #8]
 8008bc8:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d10c      	bne.n	8008bea <prvWriteBytesToBuffer+0x2c>
	__asm volatile
 8008bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd4:	b672      	cpsid	i
 8008bd6:	f383 8811 	msr	BASEPRI, r3
 8008bda:	f3bf 8f6f 	isb	sy
 8008bde:	f3bf 8f4f 	dsb	sy
 8008be2:	b662      	cpsie	i
 8008be4:	61fb      	str	r3, [r7, #28]
}
 8008be6:	bf00      	nop
 8008be8:	e7fe      	b.n	8008be8 <prvWriteBytesToBuffer+0x2a>

	xNextHead = pxStreamBuffer->xHead;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	689a      	ldr	r2, [r3, #8]
 8008bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf6:	1ad3      	subs	r3, r2, r3
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	bf28      	it	cs
 8008bfe:	4613      	movcs	r3, r2
 8008c00:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8008c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c04:	6a3b      	ldr	r3, [r7, #32]
 8008c06:	441a      	add	r2, r3
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d90c      	bls.n	8008c2a <prvWriteBytesToBuffer+0x6c>
	__asm volatile
 8008c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c14:	b672      	cpsid	i
 8008c16:	f383 8811 	msr	BASEPRI, r3
 8008c1a:	f3bf 8f6f 	isb	sy
 8008c1e:	f3bf 8f4f 	dsb	sy
 8008c22:	b662      	cpsie	i
 8008c24:	61bb      	str	r3, [r7, #24]
}
 8008c26:	bf00      	nop
 8008c28:	e7fe      	b.n	8008c28 <prvWriteBytesToBuffer+0x6a>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	699a      	ldr	r2, [r3, #24]
 8008c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c30:	4413      	add	r3, r2
 8008c32:	6a3a      	ldr	r2, [r7, #32]
 8008c34:	68b9      	ldr	r1, [r7, #8]
 8008c36:	4618      	mov	r0, r3
 8008c38:	f002 fb4e 	bl	800b2d8 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	6a3b      	ldr	r3, [r7, #32]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d91e      	bls.n	8008c82 <prvWriteBytesToBuffer+0xc4>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	6a3b      	ldr	r3, [r7, #32]
 8008c48:	1ad2      	subs	r2, r2, r3
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d90c      	bls.n	8008c6c <prvWriteBytesToBuffer+0xae>
	__asm volatile
 8008c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c56:	b672      	cpsid	i
 8008c58:	f383 8811 	msr	BASEPRI, r3
 8008c5c:	f3bf 8f6f 	isb	sy
 8008c60:	f3bf 8f4f 	dsb	sy
 8008c64:	b662      	cpsie	i
 8008c66:	617b      	str	r3, [r7, #20]
}
 8008c68:	bf00      	nop
 8008c6a:	e7fe      	b.n	8008c6a <prvWriteBytesToBuffer+0xac>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	6998      	ldr	r0, [r3, #24]
 8008c70:	68ba      	ldr	r2, [r7, #8]
 8008c72:	6a3b      	ldr	r3, [r7, #32]
 8008c74:	18d1      	adds	r1, r2, r3
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	6a3b      	ldr	r3, [r7, #32]
 8008c7a:	1ad3      	subs	r3, r2, r3
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	f002 fb2b 	bl	800b2d8 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8008c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	4413      	add	r3, r2
 8008c88:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d304      	bcc.n	8008c9e <prvWriteBytesToBuffer+0xe0>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c9a:	1ad3      	subs	r3, r2, r3
 8008c9c:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ca2:	605a      	str	r2, [r3, #4]

	return xCount;
 8008ca4:	687b      	ldr	r3, [r7, #4]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3728      	adds	r7, #40	; 0x28
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b08a      	sub	sp, #40	; 0x28
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	60f8      	str	r0, [r7, #12]
 8008cb6:	60b9      	str	r1, [r7, #8]
 8008cb8:	607a      	str	r2, [r7, #4]
 8008cba:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	bf28      	it	cs
 8008cc4:	4613      	movcs	r3, r2
 8008cc6:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8008cc8:	6a3b      	ldr	r3, [r7, #32]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d06a      	beq.n	8008da4 <prvReadBytesFromBuffer+0xf6>
	{
		xNextTail = pxStreamBuffer->xTail;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	689a      	ldr	r2, [r3, #8]
 8008cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cda:	1ad3      	subs	r3, r2, r3
 8008cdc:	6a3a      	ldr	r2, [r7, #32]
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	bf28      	it	cs
 8008ce2:	4613      	movcs	r3, r2
 8008ce4:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 8008ce6:	69fa      	ldr	r2, [r7, #28]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d90c      	bls.n	8008d08 <prvReadBytesFromBuffer+0x5a>
	__asm volatile
 8008cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf2:	b672      	cpsid	i
 8008cf4:	f383 8811 	msr	BASEPRI, r3
 8008cf8:	f3bf 8f6f 	isb	sy
 8008cfc:	f3bf 8f4f 	dsb	sy
 8008d00:	b662      	cpsie	i
 8008d02:	61bb      	str	r3, [r7, #24]
}
 8008d04:	bf00      	nop
 8008d06:	e7fe      	b.n	8008d06 <prvReadBytesFromBuffer+0x58>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8008d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	441a      	add	r2, r3
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d90c      	bls.n	8008d30 <prvReadBytesFromBuffer+0x82>
	__asm volatile
 8008d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d1a:	b672      	cpsid	i
 8008d1c:	f383 8811 	msr	BASEPRI, r3
 8008d20:	f3bf 8f6f 	isb	sy
 8008d24:	f3bf 8f4f 	dsb	sy
 8008d28:	b662      	cpsie	i
 8008d2a:	617b      	str	r3, [r7, #20]
}
 8008d2c:	bf00      	nop
 8008d2e:	e7fe      	b.n	8008d2e <prvReadBytesFromBuffer+0x80>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	699a      	ldr	r2, [r3, #24]
 8008d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d36:	4413      	add	r3, r2
 8008d38:	69fa      	ldr	r2, [r7, #28]
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	68b8      	ldr	r0, [r7, #8]
 8008d3e:	f002 facb 	bl	800b2d8 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 8008d42:	6a3a      	ldr	r2, [r7, #32]
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d91b      	bls.n	8008d82 <prvReadBytesFromBuffer+0xd4>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8008d4a:	6a3a      	ldr	r2, [r7, #32]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d90c      	bls.n	8008d6c <prvReadBytesFromBuffer+0xbe>
	__asm volatile
 8008d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d56:	b672      	cpsid	i
 8008d58:	f383 8811 	msr	BASEPRI, r3
 8008d5c:	f3bf 8f6f 	isb	sy
 8008d60:	f3bf 8f4f 	dsb	sy
 8008d64:	b662      	cpsie	i
 8008d66:	613b      	str	r3, [r7, #16]
}
 8008d68:	bf00      	nop
 8008d6a:	e7fe      	b.n	8008d6a <prvReadBytesFromBuffer+0xbc>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8008d6c:	68ba      	ldr	r2, [r7, #8]
 8008d6e:	69fb      	ldr	r3, [r7, #28]
 8008d70:	18d0      	adds	r0, r2, r3
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	6999      	ldr	r1, [r3, #24]
 8008d76:	6a3a      	ldr	r2, [r7, #32]
 8008d78:	69fb      	ldr	r3, [r7, #28]
 8008d7a:	1ad3      	subs	r3, r2, r3
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	f002 faab 	bl	800b2d8 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 8008d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d84:	6a3b      	ldr	r3, [r7, #32]
 8008d86:	4413      	add	r3, r2
 8008d88:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d304      	bcc.n	8008d9e <prvReadBytesFromBuffer+0xf0>
		{
			xNextTail -= pxStreamBuffer->xLength;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d9a:	1ad3      	subs	r3, r2, r3
 8008d9c:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008da2:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8008da4:	6a3b      	ldr	r3, [r7, #32]
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3728      	adds	r7, #40	; 0x28
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8008dae:	b480      	push	{r7}
 8008db0:	b085      	sub	sp, #20
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	689a      	ldr	r2, [r3, #8]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	4413      	add	r3, r2
 8008dc0:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	68fa      	ldr	r2, [r7, #12]
 8008dc8:	1ad3      	subs	r3, r2, r3
 8008dca:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	68fa      	ldr	r2, [r7, #12]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d304      	bcc.n	8008de0 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	68fa      	ldr	r2, [r7, #12]
 8008ddc:	1ad3      	subs	r3, r2, r3
 8008dde:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8008de0:	68fb      	ldr	r3, [r7, #12]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3714      	adds	r7, #20
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr

08008dee <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b086      	sub	sp, #24
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	60f8      	str	r0, [r7, #12]
 8008df6:	60b9      	str	r1, [r7, #8]
 8008df8:	607a      	str	r2, [r7, #4]
 8008dfa:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8008dfc:	2355      	movs	r3, #85	; 0x55
 8008dfe:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	6979      	ldr	r1, [r7, #20]
 8008e04:	68b8      	ldr	r0, [r7, #8]
 8008e06:	f002 fa75 	bl	800b2f4 <memset>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d00c      	beq.n	8008e2c <prvInitialiseNewStreamBuffer+0x3e>
	__asm volatile
 8008e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e16:	b672      	cpsid	i
 8008e18:	f383 8811 	msr	BASEPRI, r3
 8008e1c:	f3bf 8f6f 	isb	sy
 8008e20:	f3bf 8f4f 	dsb	sy
 8008e24:	b662      	cpsie	i
 8008e26:	613b      	str	r3, [r7, #16]
}
 8008e28:	bf00      	nop
 8008e2a:	e7fe      	b.n	8008e2a <prvInitialiseNewStreamBuffer+0x3c>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8008e2c:	2224      	movs	r2, #36	; 0x24
 8008e2e:	2100      	movs	r1, #0
 8008e30:	68f8      	ldr	r0, [r7, #12]
 8008e32:	f002 fa5f 	bl	800b2f4 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	68ba      	ldr	r2, [r7, #8]
 8008e3a:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	683a      	ldr	r2, [r7, #0]
 8008e46:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008e4e:	771a      	strb	r2, [r3, #28]
}
 8008e50:	bf00      	nop
 8008e52:	3718      	adds	r7, #24
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b08e      	sub	sp, #56	; 0x38
 8008e5c:	af04      	add	r7, sp, #16
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	607a      	str	r2, [r7, #4]
 8008e64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d10c      	bne.n	8008e86 <xTaskCreateStatic+0x2e>
	__asm volatile
 8008e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e70:	b672      	cpsid	i
 8008e72:	f383 8811 	msr	BASEPRI, r3
 8008e76:	f3bf 8f6f 	isb	sy
 8008e7a:	f3bf 8f4f 	dsb	sy
 8008e7e:	b662      	cpsie	i
 8008e80:	623b      	str	r3, [r7, #32]
}
 8008e82:	bf00      	nop
 8008e84:	e7fe      	b.n	8008e84 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d10c      	bne.n	8008ea6 <xTaskCreateStatic+0x4e>
	__asm volatile
 8008e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e90:	b672      	cpsid	i
 8008e92:	f383 8811 	msr	BASEPRI, r3
 8008e96:	f3bf 8f6f 	isb	sy
 8008e9a:	f3bf 8f4f 	dsb	sy
 8008e9e:	b662      	cpsie	i
 8008ea0:	61fb      	str	r3, [r7, #28]
}
 8008ea2:	bf00      	nop
 8008ea4:	e7fe      	b.n	8008ea4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008ea6:	23bc      	movs	r3, #188	; 0xbc
 8008ea8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	2bbc      	cmp	r3, #188	; 0xbc
 8008eae:	d00c      	beq.n	8008eca <xTaskCreateStatic+0x72>
	__asm volatile
 8008eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb4:	b672      	cpsid	i
 8008eb6:	f383 8811 	msr	BASEPRI, r3
 8008eba:	f3bf 8f6f 	isb	sy
 8008ebe:	f3bf 8f4f 	dsb	sy
 8008ec2:	b662      	cpsie	i
 8008ec4:	61bb      	str	r3, [r7, #24]
}
 8008ec6:	bf00      	nop
 8008ec8:	e7fe      	b.n	8008ec8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008eca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d01e      	beq.n	8008f10 <xTaskCreateStatic+0xb8>
 8008ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d01b      	beq.n	8008f10 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eda:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ede:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ee0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee4:	2202      	movs	r2, #2
 8008ee6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008eea:	2300      	movs	r3, #0
 8008eec:	9303      	str	r3, [sp, #12]
 8008eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef0:	9302      	str	r3, [sp, #8]
 8008ef2:	f107 0314 	add.w	r3, r7, #20
 8008ef6:	9301      	str	r3, [sp, #4]
 8008ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efa:	9300      	str	r3, [sp, #0]
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	68b9      	ldr	r1, [r7, #8]
 8008f02:	68f8      	ldr	r0, [r7, #12]
 8008f04:	f000 f850 	bl	8008fa8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f0a:	f000 f8f5 	bl	80090f8 <prvAddNewTaskToReadyList>
 8008f0e:	e001      	b.n	8008f14 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8008f10:	2300      	movs	r3, #0
 8008f12:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008f14:	697b      	ldr	r3, [r7, #20]
	}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3728      	adds	r7, #40	; 0x28
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b08c      	sub	sp, #48	; 0x30
 8008f22:	af04      	add	r7, sp, #16
 8008f24:	60f8      	str	r0, [r7, #12]
 8008f26:	60b9      	str	r1, [r7, #8]
 8008f28:	603b      	str	r3, [r7, #0]
 8008f2a:	4613      	mov	r3, r2
 8008f2c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008f2e:	88fb      	ldrh	r3, [r7, #6]
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	4618      	mov	r0, r3
 8008f34:	f001 ffc6 	bl	800aec4 <pvPortMalloc>
 8008f38:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d00e      	beq.n	8008f5e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008f40:	20bc      	movs	r0, #188	; 0xbc
 8008f42:	f001 ffbf 	bl	800aec4 <pvPortMalloc>
 8008f46:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008f48:	69fb      	ldr	r3, [r7, #28]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d003      	beq.n	8008f56 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008f4e:	69fb      	ldr	r3, [r7, #28]
 8008f50:	697a      	ldr	r2, [r7, #20]
 8008f52:	631a      	str	r2, [r3, #48]	; 0x30
 8008f54:	e005      	b.n	8008f62 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008f56:	6978      	ldr	r0, [r7, #20]
 8008f58:	f002 f87e 	bl	800b058 <vPortFree>
 8008f5c:	e001      	b.n	8008f62 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008f62:	69fb      	ldr	r3, [r7, #28]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d017      	beq.n	8008f98 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008f68:	69fb      	ldr	r3, [r7, #28]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008f70:	88fa      	ldrh	r2, [r7, #6]
 8008f72:	2300      	movs	r3, #0
 8008f74:	9303      	str	r3, [sp, #12]
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	9302      	str	r3, [sp, #8]
 8008f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f7c:	9301      	str	r3, [sp, #4]
 8008f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f80:	9300      	str	r3, [sp, #0]
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	68b9      	ldr	r1, [r7, #8]
 8008f86:	68f8      	ldr	r0, [r7, #12]
 8008f88:	f000 f80e 	bl	8008fa8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f8c:	69f8      	ldr	r0, [r7, #28]
 8008f8e:	f000 f8b3 	bl	80090f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008f92:	2301      	movs	r3, #1
 8008f94:	61bb      	str	r3, [r7, #24]
 8008f96:	e002      	b.n	8008f9e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008f98:	f04f 33ff 	mov.w	r3, #4294967295
 8008f9c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008f9e:	69bb      	ldr	r3, [r7, #24]
	}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3720      	adds	r7, #32
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b088      	sub	sp, #32
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	60f8      	str	r0, [r7, #12]
 8008fb0:	60b9      	str	r1, [r7, #8]
 8008fb2:	607a      	str	r2, [r7, #4]
 8008fb4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	21a5      	movs	r1, #165	; 0xa5
 8008fc2:	f002 f997 	bl	800b2f4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fca:	6879      	ldr	r1, [r7, #4]
 8008fcc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008fd0:	440b      	add	r3, r1
 8008fd2:	009b      	lsls	r3, r3, #2
 8008fd4:	4413      	add	r3, r2
 8008fd6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	f023 0307 	bic.w	r3, r3, #7
 8008fde:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008fe0:	69bb      	ldr	r3, [r7, #24]
 8008fe2:	f003 0307 	and.w	r3, r3, #7
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d00c      	beq.n	8009004 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8008fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fee:	b672      	cpsid	i
 8008ff0:	f383 8811 	msr	BASEPRI, r3
 8008ff4:	f3bf 8f6f 	isb	sy
 8008ff8:	f3bf 8f4f 	dsb	sy
 8008ffc:	b662      	cpsie	i
 8008ffe:	617b      	str	r3, [r7, #20]
}
 8009000:	bf00      	nop
 8009002:	e7fe      	b.n	8009002 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d01f      	beq.n	800904a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800900a:	2300      	movs	r3, #0
 800900c:	61fb      	str	r3, [r7, #28]
 800900e:	e012      	b.n	8009036 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009010:	68ba      	ldr	r2, [r7, #8]
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	4413      	add	r3, r2
 8009016:	7819      	ldrb	r1, [r3, #0]
 8009018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800901a:	69fb      	ldr	r3, [r7, #28]
 800901c:	4413      	add	r3, r2
 800901e:	3334      	adds	r3, #52	; 0x34
 8009020:	460a      	mov	r2, r1
 8009022:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009024:	68ba      	ldr	r2, [r7, #8]
 8009026:	69fb      	ldr	r3, [r7, #28]
 8009028:	4413      	add	r3, r2
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d006      	beq.n	800903e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009030:	69fb      	ldr	r3, [r7, #28]
 8009032:	3301      	adds	r3, #1
 8009034:	61fb      	str	r3, [r7, #28]
 8009036:	69fb      	ldr	r3, [r7, #28]
 8009038:	2b0f      	cmp	r3, #15
 800903a:	d9e9      	bls.n	8009010 <prvInitialiseNewTask+0x68>
 800903c:	e000      	b.n	8009040 <prvInitialiseNewTask+0x98>
			{
				break;
 800903e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009042:	2200      	movs	r2, #0
 8009044:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009048:	e003      	b.n	8009052 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800904a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904c:	2200      	movs	r2, #0
 800904e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009054:	2b37      	cmp	r3, #55	; 0x37
 8009056:	d901      	bls.n	800905c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009058:	2337      	movs	r3, #55	; 0x37
 800905a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800905c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800905e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009060:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009064:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009066:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906a:	2200      	movs	r2, #0
 800906c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800906e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009070:	3304      	adds	r3, #4
 8009072:	4618      	mov	r0, r3
 8009074:	f7fe fdee 	bl	8007c54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907a:	3318      	adds	r3, #24
 800907c:	4618      	mov	r0, r3
 800907e:	f7fe fde9 	bl	8007c54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009086:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800908e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009090:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009096:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909a:	2200      	movs	r2, #0
 800909c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80090a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a2:	2200      	movs	r2, #0
 80090a4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80090a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090aa:	3354      	adds	r3, #84	; 0x54
 80090ac:	2260      	movs	r2, #96	; 0x60
 80090ae:	2100      	movs	r1, #0
 80090b0:	4618      	mov	r0, r3
 80090b2:	f002 f91f 	bl	800b2f4 <memset>
 80090b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b8:	4a0c      	ldr	r2, [pc, #48]	; (80090ec <prvInitialiseNewTask+0x144>)
 80090ba:	659a      	str	r2, [r3, #88]	; 0x58
 80090bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090be:	4a0c      	ldr	r2, [pc, #48]	; (80090f0 <prvInitialiseNewTask+0x148>)
 80090c0:	65da      	str	r2, [r3, #92]	; 0x5c
 80090c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c4:	4a0b      	ldr	r2, [pc, #44]	; (80090f4 <prvInitialiseNewTask+0x14c>)
 80090c6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80090c8:	683a      	ldr	r2, [r7, #0]
 80090ca:	68f9      	ldr	r1, [r7, #12]
 80090cc:	69b8      	ldr	r0, [r7, #24]
 80090ce:	f001 fcbd 	bl	800aa4c <pxPortInitialiseStack>
 80090d2:	4602      	mov	r2, r0
 80090d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80090d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d002      	beq.n	80090e4 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80090de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090e2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090e4:	bf00      	nop
 80090e6:	3720      	adds	r7, #32
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}
 80090ec:	0800b650 	.word	0x0800b650
 80090f0:	0800b670 	.word	0x0800b670
 80090f4:	0800b630 	.word	0x0800b630

080090f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009100:	f001 fdb4 	bl	800ac6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009104:	4b2d      	ldr	r3, [pc, #180]	; (80091bc <prvAddNewTaskToReadyList+0xc4>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	3301      	adds	r3, #1
 800910a:	4a2c      	ldr	r2, [pc, #176]	; (80091bc <prvAddNewTaskToReadyList+0xc4>)
 800910c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800910e:	4b2c      	ldr	r3, [pc, #176]	; (80091c0 <prvAddNewTaskToReadyList+0xc8>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d109      	bne.n	800912a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009116:	4a2a      	ldr	r2, [pc, #168]	; (80091c0 <prvAddNewTaskToReadyList+0xc8>)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800911c:	4b27      	ldr	r3, [pc, #156]	; (80091bc <prvAddNewTaskToReadyList+0xc4>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2b01      	cmp	r3, #1
 8009122:	d110      	bne.n	8009146 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009124:	f000 fc4e 	bl	80099c4 <prvInitialiseTaskLists>
 8009128:	e00d      	b.n	8009146 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800912a:	4b26      	ldr	r3, [pc, #152]	; (80091c4 <prvAddNewTaskToReadyList+0xcc>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d109      	bne.n	8009146 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009132:	4b23      	ldr	r3, [pc, #140]	; (80091c0 <prvAddNewTaskToReadyList+0xc8>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800913c:	429a      	cmp	r2, r3
 800913e:	d802      	bhi.n	8009146 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009140:	4a1f      	ldr	r2, [pc, #124]	; (80091c0 <prvAddNewTaskToReadyList+0xc8>)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009146:	4b20      	ldr	r3, [pc, #128]	; (80091c8 <prvAddNewTaskToReadyList+0xd0>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	3301      	adds	r3, #1
 800914c:	4a1e      	ldr	r2, [pc, #120]	; (80091c8 <prvAddNewTaskToReadyList+0xd0>)
 800914e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009150:	4b1d      	ldr	r3, [pc, #116]	; (80091c8 <prvAddNewTaskToReadyList+0xd0>)
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800915c:	4b1b      	ldr	r3, [pc, #108]	; (80091cc <prvAddNewTaskToReadyList+0xd4>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	429a      	cmp	r2, r3
 8009162:	d903      	bls.n	800916c <prvAddNewTaskToReadyList+0x74>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009168:	4a18      	ldr	r2, [pc, #96]	; (80091cc <prvAddNewTaskToReadyList+0xd4>)
 800916a:	6013      	str	r3, [r2, #0]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009170:	4613      	mov	r3, r2
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	4413      	add	r3, r2
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	4a15      	ldr	r2, [pc, #84]	; (80091d0 <prvAddNewTaskToReadyList+0xd8>)
 800917a:	441a      	add	r2, r3
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	3304      	adds	r3, #4
 8009180:	4619      	mov	r1, r3
 8009182:	4610      	mov	r0, r2
 8009184:	f7fe fd73 	bl	8007c6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009188:	f001 fda4 	bl	800acd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800918c:	4b0d      	ldr	r3, [pc, #52]	; (80091c4 <prvAddNewTaskToReadyList+0xcc>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d00e      	beq.n	80091b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009194:	4b0a      	ldr	r3, [pc, #40]	; (80091c0 <prvAddNewTaskToReadyList+0xc8>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800919e:	429a      	cmp	r2, r3
 80091a0:	d207      	bcs.n	80091b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80091a2:	4b0c      	ldr	r3, [pc, #48]	; (80091d4 <prvAddNewTaskToReadyList+0xdc>)
 80091a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091a8:	601a      	str	r2, [r3, #0]
 80091aa:	f3bf 8f4f 	dsb	sy
 80091ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091b2:	bf00      	nop
 80091b4:	3708      	adds	r7, #8
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	200021b0 	.word	0x200021b0
 80091c0:	20001cdc 	.word	0x20001cdc
 80091c4:	200021bc 	.word	0x200021bc
 80091c8:	200021cc 	.word	0x200021cc
 80091cc:	200021b8 	.word	0x200021b8
 80091d0:	20001ce0 	.word	0x20001ce0
 80091d4:	e000ed04 	.word	0xe000ed04

080091d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80091e0:	2300      	movs	r3, #0
 80091e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d019      	beq.n	800921e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80091ea:	4b14      	ldr	r3, [pc, #80]	; (800923c <vTaskDelay+0x64>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d00c      	beq.n	800920c <vTaskDelay+0x34>
	__asm volatile
 80091f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f6:	b672      	cpsid	i
 80091f8:	f383 8811 	msr	BASEPRI, r3
 80091fc:	f3bf 8f6f 	isb	sy
 8009200:	f3bf 8f4f 	dsb	sy
 8009204:	b662      	cpsie	i
 8009206:	60bb      	str	r3, [r7, #8]
}
 8009208:	bf00      	nop
 800920a:	e7fe      	b.n	800920a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800920c:	f000 f88e 	bl	800932c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009210:	2100      	movs	r1, #0
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 ffa8 	bl	800a168 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009218:	f000 f896 	bl	8009348 <xTaskResumeAll>
 800921c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d107      	bne.n	8009234 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8009224:	4b06      	ldr	r3, [pc, #24]	; (8009240 <vTaskDelay+0x68>)
 8009226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800922a:	601a      	str	r2, [r3, #0]
 800922c:	f3bf 8f4f 	dsb	sy
 8009230:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009234:	bf00      	nop
 8009236:	3710      	adds	r7, #16
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}
 800923c:	200021d8 	.word	0x200021d8
 8009240:	e000ed04 	.word	0xe000ed04

08009244 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b08a      	sub	sp, #40	; 0x28
 8009248:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800924a:	2300      	movs	r3, #0
 800924c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800924e:	2300      	movs	r3, #0
 8009250:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009252:	463a      	mov	r2, r7
 8009254:	1d39      	adds	r1, r7, #4
 8009256:	f107 0308 	add.w	r3, r7, #8
 800925a:	4618      	mov	r0, r3
 800925c:	f7fe fca6 	bl	8007bac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009260:	6839      	ldr	r1, [r7, #0]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	68ba      	ldr	r2, [r7, #8]
 8009266:	9202      	str	r2, [sp, #8]
 8009268:	9301      	str	r3, [sp, #4]
 800926a:	2300      	movs	r3, #0
 800926c:	9300      	str	r3, [sp, #0]
 800926e:	2300      	movs	r3, #0
 8009270:	460a      	mov	r2, r1
 8009272:	4926      	ldr	r1, [pc, #152]	; (800930c <vTaskStartScheduler+0xc8>)
 8009274:	4826      	ldr	r0, [pc, #152]	; (8009310 <vTaskStartScheduler+0xcc>)
 8009276:	f7ff fdef 	bl	8008e58 <xTaskCreateStatic>
 800927a:	4603      	mov	r3, r0
 800927c:	4a25      	ldr	r2, [pc, #148]	; (8009314 <vTaskStartScheduler+0xd0>)
 800927e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009280:	4b24      	ldr	r3, [pc, #144]	; (8009314 <vTaskStartScheduler+0xd0>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d002      	beq.n	800928e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009288:	2301      	movs	r3, #1
 800928a:	617b      	str	r3, [r7, #20]
 800928c:	e001      	b.n	8009292 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800928e:	2300      	movs	r3, #0
 8009290:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	2b01      	cmp	r3, #1
 8009296:	d102      	bne.n	800929e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009298:	f000 ffba 	bl	800a210 <xTimerCreateTimerTask>
 800929c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d11d      	bne.n	80092e0 <vTaskStartScheduler+0x9c>
	__asm volatile
 80092a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a8:	b672      	cpsid	i
 80092aa:	f383 8811 	msr	BASEPRI, r3
 80092ae:	f3bf 8f6f 	isb	sy
 80092b2:	f3bf 8f4f 	dsb	sy
 80092b6:	b662      	cpsie	i
 80092b8:	613b      	str	r3, [r7, #16]
}
 80092ba:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80092bc:	4b16      	ldr	r3, [pc, #88]	; (8009318 <vTaskStartScheduler+0xd4>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	3354      	adds	r3, #84	; 0x54
 80092c2:	4a16      	ldr	r2, [pc, #88]	; (800931c <vTaskStartScheduler+0xd8>)
 80092c4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80092c6:	4b16      	ldr	r3, [pc, #88]	; (8009320 <vTaskStartScheduler+0xdc>)
 80092c8:	f04f 32ff 	mov.w	r2, #4294967295
 80092cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80092ce:	4b15      	ldr	r3, [pc, #84]	; (8009324 <vTaskStartScheduler+0xe0>)
 80092d0:	2201      	movs	r2, #1
 80092d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80092d4:	4b14      	ldr	r3, [pc, #80]	; (8009328 <vTaskStartScheduler+0xe4>)
 80092d6:	2200      	movs	r2, #0
 80092d8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80092da:	f001 fc49 	bl	800ab70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80092de:	e010      	b.n	8009302 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092e6:	d10c      	bne.n	8009302 <vTaskStartScheduler+0xbe>
	__asm volatile
 80092e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ec:	b672      	cpsid	i
 80092ee:	f383 8811 	msr	BASEPRI, r3
 80092f2:	f3bf 8f6f 	isb	sy
 80092f6:	f3bf 8f4f 	dsb	sy
 80092fa:	b662      	cpsie	i
 80092fc:	60fb      	str	r3, [r7, #12]
}
 80092fe:	bf00      	nop
 8009300:	e7fe      	b.n	8009300 <vTaskStartScheduler+0xbc>
}
 8009302:	bf00      	nop
 8009304:	3718      	adds	r7, #24
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop
 800930c:	0800b564 	.word	0x0800b564
 8009310:	08009995 	.word	0x08009995
 8009314:	200021d4 	.word	0x200021d4
 8009318:	20001cdc 	.word	0x20001cdc
 800931c:	20000014 	.word	0x20000014
 8009320:	200021d0 	.word	0x200021d0
 8009324:	200021bc 	.word	0x200021bc
 8009328:	200021b4 	.word	0x200021b4

0800932c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800932c:	b480      	push	{r7}
 800932e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009330:	4b04      	ldr	r3, [pc, #16]	; (8009344 <vTaskSuspendAll+0x18>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	3301      	adds	r3, #1
 8009336:	4a03      	ldr	r2, [pc, #12]	; (8009344 <vTaskSuspendAll+0x18>)
 8009338:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800933a:	bf00      	nop
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr
 8009344:	200021d8 	.word	0x200021d8

08009348 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800934e:	2300      	movs	r3, #0
 8009350:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009352:	2300      	movs	r3, #0
 8009354:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009356:	4b43      	ldr	r3, [pc, #268]	; (8009464 <xTaskResumeAll+0x11c>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d10c      	bne.n	8009378 <xTaskResumeAll+0x30>
	__asm volatile
 800935e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009362:	b672      	cpsid	i
 8009364:	f383 8811 	msr	BASEPRI, r3
 8009368:	f3bf 8f6f 	isb	sy
 800936c:	f3bf 8f4f 	dsb	sy
 8009370:	b662      	cpsie	i
 8009372:	603b      	str	r3, [r7, #0]
}
 8009374:	bf00      	nop
 8009376:	e7fe      	b.n	8009376 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009378:	f001 fc78 	bl	800ac6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800937c:	4b39      	ldr	r3, [pc, #228]	; (8009464 <xTaskResumeAll+0x11c>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	3b01      	subs	r3, #1
 8009382:	4a38      	ldr	r2, [pc, #224]	; (8009464 <xTaskResumeAll+0x11c>)
 8009384:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009386:	4b37      	ldr	r3, [pc, #220]	; (8009464 <xTaskResumeAll+0x11c>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d162      	bne.n	8009454 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800938e:	4b36      	ldr	r3, [pc, #216]	; (8009468 <xTaskResumeAll+0x120>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d05e      	beq.n	8009454 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009396:	e02f      	b.n	80093f8 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009398:	4b34      	ldr	r3, [pc, #208]	; (800946c <xTaskResumeAll+0x124>)
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	68db      	ldr	r3, [r3, #12]
 800939e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	3318      	adds	r3, #24
 80093a4:	4618      	mov	r0, r3
 80093a6:	f7fe fcbf 	bl	8007d28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	3304      	adds	r3, #4
 80093ae:	4618      	mov	r0, r3
 80093b0:	f7fe fcba 	bl	8007d28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093b8:	4b2d      	ldr	r3, [pc, #180]	; (8009470 <xTaskResumeAll+0x128>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d903      	bls.n	80093c8 <xTaskResumeAll+0x80>
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c4:	4a2a      	ldr	r2, [pc, #168]	; (8009470 <xTaskResumeAll+0x128>)
 80093c6:	6013      	str	r3, [r2, #0]
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093cc:	4613      	mov	r3, r2
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	4413      	add	r3, r2
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	4a27      	ldr	r2, [pc, #156]	; (8009474 <xTaskResumeAll+0x12c>)
 80093d6:	441a      	add	r2, r3
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	3304      	adds	r3, #4
 80093dc:	4619      	mov	r1, r3
 80093de:	4610      	mov	r0, r2
 80093e0:	f7fe fc45 	bl	8007c6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093e8:	4b23      	ldr	r3, [pc, #140]	; (8009478 <xTaskResumeAll+0x130>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d302      	bcc.n	80093f8 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80093f2:	4b22      	ldr	r3, [pc, #136]	; (800947c <xTaskResumeAll+0x134>)
 80093f4:	2201      	movs	r2, #1
 80093f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80093f8:	4b1c      	ldr	r3, [pc, #112]	; (800946c <xTaskResumeAll+0x124>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d1cb      	bne.n	8009398 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d001      	beq.n	800940a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009406:	f000 fbb9 	bl	8009b7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800940a:	4b1d      	ldr	r3, [pc, #116]	; (8009480 <xTaskResumeAll+0x138>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d010      	beq.n	8009438 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009416:	f000 f859 	bl	80094cc <xTaskIncrementTick>
 800941a:	4603      	mov	r3, r0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d002      	beq.n	8009426 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8009420:	4b16      	ldr	r3, [pc, #88]	; (800947c <xTaskResumeAll+0x134>)
 8009422:	2201      	movs	r2, #1
 8009424:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	3b01      	subs	r3, #1
 800942a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d1f1      	bne.n	8009416 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8009432:	4b13      	ldr	r3, [pc, #76]	; (8009480 <xTaskResumeAll+0x138>)
 8009434:	2200      	movs	r2, #0
 8009436:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009438:	4b10      	ldr	r3, [pc, #64]	; (800947c <xTaskResumeAll+0x134>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d009      	beq.n	8009454 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009440:	2301      	movs	r3, #1
 8009442:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009444:	4b0f      	ldr	r3, [pc, #60]	; (8009484 <xTaskResumeAll+0x13c>)
 8009446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800944a:	601a      	str	r2, [r3, #0]
 800944c:	f3bf 8f4f 	dsb	sy
 8009450:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009454:	f001 fc3e 	bl	800acd4 <vPortExitCritical>

	return xAlreadyYielded;
 8009458:	68bb      	ldr	r3, [r7, #8]
}
 800945a:	4618      	mov	r0, r3
 800945c:	3710      	adds	r7, #16
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	200021d8 	.word	0x200021d8
 8009468:	200021b0 	.word	0x200021b0
 800946c:	20002170 	.word	0x20002170
 8009470:	200021b8 	.word	0x200021b8
 8009474:	20001ce0 	.word	0x20001ce0
 8009478:	20001cdc 	.word	0x20001cdc
 800947c:	200021c4 	.word	0x200021c4
 8009480:	200021c0 	.word	0x200021c0
 8009484:	e000ed04 	.word	0xe000ed04

08009488 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800948e:	4b05      	ldr	r3, [pc, #20]	; (80094a4 <xTaskGetTickCount+0x1c>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009494:	687b      	ldr	r3, [r7, #4]
}
 8009496:	4618      	mov	r0, r3
 8009498:	370c      	adds	r7, #12
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr
 80094a2:	bf00      	nop
 80094a4:	200021b4 	.word	0x200021b4

080094a8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b082      	sub	sp, #8
 80094ac:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80094ae:	f001 fcc5 	bl	800ae3c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80094b2:	2300      	movs	r3, #0
 80094b4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80094b6:	4b04      	ldr	r3, [pc, #16]	; (80094c8 <xTaskGetTickCountFromISR+0x20>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80094bc:	683b      	ldr	r3, [r7, #0]
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3708      	adds	r7, #8
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop
 80094c8:	200021b4 	.word	0x200021b4

080094cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b086      	sub	sp, #24
 80094d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80094d2:	2300      	movs	r3, #0
 80094d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094d6:	4b50      	ldr	r3, [pc, #320]	; (8009618 <xTaskIncrementTick+0x14c>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	f040 808b 	bne.w	80095f6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80094e0:	4b4e      	ldr	r3, [pc, #312]	; (800961c <xTaskIncrementTick+0x150>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	3301      	adds	r3, #1
 80094e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80094e8:	4a4c      	ldr	r2, [pc, #304]	; (800961c <xTaskIncrementTick+0x150>)
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d122      	bne.n	800953a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80094f4:	4b4a      	ldr	r3, [pc, #296]	; (8009620 <xTaskIncrementTick+0x154>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d00c      	beq.n	8009518 <xTaskIncrementTick+0x4c>
	__asm volatile
 80094fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009502:	b672      	cpsid	i
 8009504:	f383 8811 	msr	BASEPRI, r3
 8009508:	f3bf 8f6f 	isb	sy
 800950c:	f3bf 8f4f 	dsb	sy
 8009510:	b662      	cpsie	i
 8009512:	603b      	str	r3, [r7, #0]
}
 8009514:	bf00      	nop
 8009516:	e7fe      	b.n	8009516 <xTaskIncrementTick+0x4a>
 8009518:	4b41      	ldr	r3, [pc, #260]	; (8009620 <xTaskIncrementTick+0x154>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	60fb      	str	r3, [r7, #12]
 800951e:	4b41      	ldr	r3, [pc, #260]	; (8009624 <xTaskIncrementTick+0x158>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a3f      	ldr	r2, [pc, #252]	; (8009620 <xTaskIncrementTick+0x154>)
 8009524:	6013      	str	r3, [r2, #0]
 8009526:	4a3f      	ldr	r2, [pc, #252]	; (8009624 <xTaskIncrementTick+0x158>)
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	6013      	str	r3, [r2, #0]
 800952c:	4b3e      	ldr	r3, [pc, #248]	; (8009628 <xTaskIncrementTick+0x15c>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	3301      	adds	r3, #1
 8009532:	4a3d      	ldr	r2, [pc, #244]	; (8009628 <xTaskIncrementTick+0x15c>)
 8009534:	6013      	str	r3, [r2, #0]
 8009536:	f000 fb21 	bl	8009b7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800953a:	4b3c      	ldr	r3, [pc, #240]	; (800962c <xTaskIncrementTick+0x160>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	693a      	ldr	r2, [r7, #16]
 8009540:	429a      	cmp	r2, r3
 8009542:	d349      	bcc.n	80095d8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009544:	4b36      	ldr	r3, [pc, #216]	; (8009620 <xTaskIncrementTick+0x154>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d104      	bne.n	8009558 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800954e:	4b37      	ldr	r3, [pc, #220]	; (800962c <xTaskIncrementTick+0x160>)
 8009550:	f04f 32ff 	mov.w	r2, #4294967295
 8009554:	601a      	str	r2, [r3, #0]
					break;
 8009556:	e03f      	b.n	80095d8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009558:	4b31      	ldr	r3, [pc, #196]	; (8009620 <xTaskIncrementTick+0x154>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	68db      	ldr	r3, [r3, #12]
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009568:	693a      	ldr	r2, [r7, #16]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	429a      	cmp	r2, r3
 800956e:	d203      	bcs.n	8009578 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009570:	4a2e      	ldr	r2, [pc, #184]	; (800962c <xTaskIncrementTick+0x160>)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009576:	e02f      	b.n	80095d8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	3304      	adds	r3, #4
 800957c:	4618      	mov	r0, r3
 800957e:	f7fe fbd3 	bl	8007d28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009586:	2b00      	cmp	r3, #0
 8009588:	d004      	beq.n	8009594 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	3318      	adds	r3, #24
 800958e:	4618      	mov	r0, r3
 8009590:	f7fe fbca 	bl	8007d28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009598:	4b25      	ldr	r3, [pc, #148]	; (8009630 <xTaskIncrementTick+0x164>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	429a      	cmp	r2, r3
 800959e:	d903      	bls.n	80095a8 <xTaskIncrementTick+0xdc>
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a4:	4a22      	ldr	r2, [pc, #136]	; (8009630 <xTaskIncrementTick+0x164>)
 80095a6:	6013      	str	r3, [r2, #0]
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095ac:	4613      	mov	r3, r2
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	4413      	add	r3, r2
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	4a1f      	ldr	r2, [pc, #124]	; (8009634 <xTaskIncrementTick+0x168>)
 80095b6:	441a      	add	r2, r3
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	3304      	adds	r3, #4
 80095bc:	4619      	mov	r1, r3
 80095be:	4610      	mov	r0, r2
 80095c0:	f7fe fb55 	bl	8007c6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095c8:	4b1b      	ldr	r3, [pc, #108]	; (8009638 <xTaskIncrementTick+0x16c>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d3b8      	bcc.n	8009544 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80095d2:	2301      	movs	r3, #1
 80095d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095d6:	e7b5      	b.n	8009544 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80095d8:	4b17      	ldr	r3, [pc, #92]	; (8009638 <xTaskIncrementTick+0x16c>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095de:	4915      	ldr	r1, [pc, #84]	; (8009634 <xTaskIncrementTick+0x168>)
 80095e0:	4613      	mov	r3, r2
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	4413      	add	r3, r2
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	440b      	add	r3, r1
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	d907      	bls.n	8009600 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80095f0:	2301      	movs	r3, #1
 80095f2:	617b      	str	r3, [r7, #20]
 80095f4:	e004      	b.n	8009600 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80095f6:	4b11      	ldr	r3, [pc, #68]	; (800963c <xTaskIncrementTick+0x170>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	3301      	adds	r3, #1
 80095fc:	4a0f      	ldr	r2, [pc, #60]	; (800963c <xTaskIncrementTick+0x170>)
 80095fe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009600:	4b0f      	ldr	r3, [pc, #60]	; (8009640 <xTaskIncrementTick+0x174>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d001      	beq.n	800960c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8009608:	2301      	movs	r3, #1
 800960a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800960c:	697b      	ldr	r3, [r7, #20]
}
 800960e:	4618      	mov	r0, r3
 8009610:	3718      	adds	r7, #24
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	200021d8 	.word	0x200021d8
 800961c:	200021b4 	.word	0x200021b4
 8009620:	20002168 	.word	0x20002168
 8009624:	2000216c 	.word	0x2000216c
 8009628:	200021c8 	.word	0x200021c8
 800962c:	200021d0 	.word	0x200021d0
 8009630:	200021b8 	.word	0x200021b8
 8009634:	20001ce0 	.word	0x20001ce0
 8009638:	20001cdc 	.word	0x20001cdc
 800963c:	200021c0 	.word	0x200021c0
 8009640:	200021c4 	.word	0x200021c4

08009644 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009644:	b480      	push	{r7}
 8009646:	b085      	sub	sp, #20
 8009648:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800964a:	4b2b      	ldr	r3, [pc, #172]	; (80096f8 <vTaskSwitchContext+0xb4>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d003      	beq.n	800965a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009652:	4b2a      	ldr	r3, [pc, #168]	; (80096fc <vTaskSwitchContext+0xb8>)
 8009654:	2201      	movs	r2, #1
 8009656:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009658:	e048      	b.n	80096ec <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800965a:	4b28      	ldr	r3, [pc, #160]	; (80096fc <vTaskSwitchContext+0xb8>)
 800965c:	2200      	movs	r2, #0
 800965e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009660:	4b27      	ldr	r3, [pc, #156]	; (8009700 <vTaskSwitchContext+0xbc>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	60fb      	str	r3, [r7, #12]
 8009666:	e012      	b.n	800968e <vTaskSwitchContext+0x4a>
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d10c      	bne.n	8009688 <vTaskSwitchContext+0x44>
	__asm volatile
 800966e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009672:	b672      	cpsid	i
 8009674:	f383 8811 	msr	BASEPRI, r3
 8009678:	f3bf 8f6f 	isb	sy
 800967c:	f3bf 8f4f 	dsb	sy
 8009680:	b662      	cpsie	i
 8009682:	607b      	str	r3, [r7, #4]
}
 8009684:	bf00      	nop
 8009686:	e7fe      	b.n	8009686 <vTaskSwitchContext+0x42>
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	3b01      	subs	r3, #1
 800968c:	60fb      	str	r3, [r7, #12]
 800968e:	491d      	ldr	r1, [pc, #116]	; (8009704 <vTaskSwitchContext+0xc0>)
 8009690:	68fa      	ldr	r2, [r7, #12]
 8009692:	4613      	mov	r3, r2
 8009694:	009b      	lsls	r3, r3, #2
 8009696:	4413      	add	r3, r2
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	440b      	add	r3, r1
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d0e2      	beq.n	8009668 <vTaskSwitchContext+0x24>
 80096a2:	68fa      	ldr	r2, [r7, #12]
 80096a4:	4613      	mov	r3, r2
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	4413      	add	r3, r2
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	4a15      	ldr	r2, [pc, #84]	; (8009704 <vTaskSwitchContext+0xc0>)
 80096ae:	4413      	add	r3, r2
 80096b0:	60bb      	str	r3, [r7, #8]
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	685a      	ldr	r2, [r3, #4]
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	605a      	str	r2, [r3, #4]
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	685a      	ldr	r2, [r3, #4]
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	3308      	adds	r3, #8
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d104      	bne.n	80096d2 <vTaskSwitchContext+0x8e>
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	685a      	ldr	r2, [r3, #4]
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	605a      	str	r2, [r3, #4]
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	68db      	ldr	r3, [r3, #12]
 80096d8:	4a0b      	ldr	r2, [pc, #44]	; (8009708 <vTaskSwitchContext+0xc4>)
 80096da:	6013      	str	r3, [r2, #0]
 80096dc:	4a08      	ldr	r2, [pc, #32]	; (8009700 <vTaskSwitchContext+0xbc>)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80096e2:	4b09      	ldr	r3, [pc, #36]	; (8009708 <vTaskSwitchContext+0xc4>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	3354      	adds	r3, #84	; 0x54
 80096e8:	4a08      	ldr	r2, [pc, #32]	; (800970c <vTaskSwitchContext+0xc8>)
 80096ea:	6013      	str	r3, [r2, #0]
}
 80096ec:	bf00      	nop
 80096ee:	3714      	adds	r7, #20
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr
 80096f8:	200021d8 	.word	0x200021d8
 80096fc:	200021c4 	.word	0x200021c4
 8009700:	200021b8 	.word	0x200021b8
 8009704:	20001ce0 	.word	0x20001ce0
 8009708:	20001cdc 	.word	0x20001cdc
 800970c:	20000014 	.word	0x20000014

08009710 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d10c      	bne.n	800973a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8009720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009724:	b672      	cpsid	i
 8009726:	f383 8811 	msr	BASEPRI, r3
 800972a:	f3bf 8f6f 	isb	sy
 800972e:	f3bf 8f4f 	dsb	sy
 8009732:	b662      	cpsie	i
 8009734:	60fb      	str	r3, [r7, #12]
}
 8009736:	bf00      	nop
 8009738:	e7fe      	b.n	8009738 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800973a:	4b07      	ldr	r3, [pc, #28]	; (8009758 <vTaskPlaceOnEventList+0x48>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	3318      	adds	r3, #24
 8009740:	4619      	mov	r1, r3
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f7fe fab7 	bl	8007cb6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009748:	2101      	movs	r1, #1
 800974a:	6838      	ldr	r0, [r7, #0]
 800974c:	f000 fd0c 	bl	800a168 <prvAddCurrentTaskToDelayedList>
}
 8009750:	bf00      	nop
 8009752:	3710      	adds	r7, #16
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	20001cdc 	.word	0x20001cdc

0800975c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800975c:	b580      	push	{r7, lr}
 800975e:	b086      	sub	sp, #24
 8009760:	af00      	add	r7, sp, #0
 8009762:	60f8      	str	r0, [r7, #12]
 8009764:	60b9      	str	r1, [r7, #8]
 8009766:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d10c      	bne.n	8009788 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800976e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009772:	b672      	cpsid	i
 8009774:	f383 8811 	msr	BASEPRI, r3
 8009778:	f3bf 8f6f 	isb	sy
 800977c:	f3bf 8f4f 	dsb	sy
 8009780:	b662      	cpsie	i
 8009782:	617b      	str	r3, [r7, #20]
}
 8009784:	bf00      	nop
 8009786:	e7fe      	b.n	8009786 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009788:	4b0a      	ldr	r3, [pc, #40]	; (80097b4 <vTaskPlaceOnEventListRestricted+0x58>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	3318      	adds	r3, #24
 800978e:	4619      	mov	r1, r3
 8009790:	68f8      	ldr	r0, [r7, #12]
 8009792:	f7fe fa6c 	bl	8007c6e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d002      	beq.n	80097a2 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800979c:	f04f 33ff 	mov.w	r3, #4294967295
 80097a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80097a2:	6879      	ldr	r1, [r7, #4]
 80097a4:	68b8      	ldr	r0, [r7, #8]
 80097a6:	f000 fcdf 	bl	800a168 <prvAddCurrentTaskToDelayedList>
	}
 80097aa:	bf00      	nop
 80097ac:	3718      	adds	r7, #24
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	20001cdc 	.word	0x20001cdc

080097b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b086      	sub	sp, #24
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d10c      	bne.n	80097e8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80097ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d2:	b672      	cpsid	i
 80097d4:	f383 8811 	msr	BASEPRI, r3
 80097d8:	f3bf 8f6f 	isb	sy
 80097dc:	f3bf 8f4f 	dsb	sy
 80097e0:	b662      	cpsie	i
 80097e2:	60fb      	str	r3, [r7, #12]
}
 80097e4:	bf00      	nop
 80097e6:	e7fe      	b.n	80097e6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	3318      	adds	r3, #24
 80097ec:	4618      	mov	r0, r3
 80097ee:	f7fe fa9b 	bl	8007d28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097f2:	4b1e      	ldr	r3, [pc, #120]	; (800986c <xTaskRemoveFromEventList+0xb4>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d11d      	bne.n	8009836 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	3304      	adds	r3, #4
 80097fe:	4618      	mov	r0, r3
 8009800:	f7fe fa92 	bl	8007d28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009808:	4b19      	ldr	r3, [pc, #100]	; (8009870 <xTaskRemoveFromEventList+0xb8>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	429a      	cmp	r2, r3
 800980e:	d903      	bls.n	8009818 <xTaskRemoveFromEventList+0x60>
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009814:	4a16      	ldr	r2, [pc, #88]	; (8009870 <xTaskRemoveFromEventList+0xb8>)
 8009816:	6013      	str	r3, [r2, #0]
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800981c:	4613      	mov	r3, r2
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	4413      	add	r3, r2
 8009822:	009b      	lsls	r3, r3, #2
 8009824:	4a13      	ldr	r2, [pc, #76]	; (8009874 <xTaskRemoveFromEventList+0xbc>)
 8009826:	441a      	add	r2, r3
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	3304      	adds	r3, #4
 800982c:	4619      	mov	r1, r3
 800982e:	4610      	mov	r0, r2
 8009830:	f7fe fa1d 	bl	8007c6e <vListInsertEnd>
 8009834:	e005      	b.n	8009842 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	3318      	adds	r3, #24
 800983a:	4619      	mov	r1, r3
 800983c:	480e      	ldr	r0, [pc, #56]	; (8009878 <xTaskRemoveFromEventList+0xc0>)
 800983e:	f7fe fa16 	bl	8007c6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009846:	4b0d      	ldr	r3, [pc, #52]	; (800987c <xTaskRemoveFromEventList+0xc4>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800984c:	429a      	cmp	r2, r3
 800984e:	d905      	bls.n	800985c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009850:	2301      	movs	r3, #1
 8009852:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009854:	4b0a      	ldr	r3, [pc, #40]	; (8009880 <xTaskRemoveFromEventList+0xc8>)
 8009856:	2201      	movs	r2, #1
 8009858:	601a      	str	r2, [r3, #0]
 800985a:	e001      	b.n	8009860 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800985c:	2300      	movs	r3, #0
 800985e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009860:	697b      	ldr	r3, [r7, #20]
}
 8009862:	4618      	mov	r0, r3
 8009864:	3718      	adds	r7, #24
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	200021d8 	.word	0x200021d8
 8009870:	200021b8 	.word	0x200021b8
 8009874:	20001ce0 	.word	0x20001ce0
 8009878:	20002170 	.word	0x20002170
 800987c:	20001cdc 	.word	0x20001cdc
 8009880:	200021c4 	.word	0x200021c4

08009884 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009884:	b480      	push	{r7}
 8009886:	b083      	sub	sp, #12
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800988c:	4b06      	ldr	r3, [pc, #24]	; (80098a8 <vTaskInternalSetTimeOutState+0x24>)
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009894:	4b05      	ldr	r3, [pc, #20]	; (80098ac <vTaskInternalSetTimeOutState+0x28>)
 8009896:	681a      	ldr	r2, [r3, #0]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	605a      	str	r2, [r3, #4]
}
 800989c:	bf00      	nop
 800989e:	370c      	adds	r7, #12
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr
 80098a8:	200021c8 	.word	0x200021c8
 80098ac:	200021b4 	.word	0x200021b4

080098b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b088      	sub	sp, #32
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d10c      	bne.n	80098da <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80098c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c4:	b672      	cpsid	i
 80098c6:	f383 8811 	msr	BASEPRI, r3
 80098ca:	f3bf 8f6f 	isb	sy
 80098ce:	f3bf 8f4f 	dsb	sy
 80098d2:	b662      	cpsie	i
 80098d4:	613b      	str	r3, [r7, #16]
}
 80098d6:	bf00      	nop
 80098d8:	e7fe      	b.n	80098d8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d10c      	bne.n	80098fa <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80098e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e4:	b672      	cpsid	i
 80098e6:	f383 8811 	msr	BASEPRI, r3
 80098ea:	f3bf 8f6f 	isb	sy
 80098ee:	f3bf 8f4f 	dsb	sy
 80098f2:	b662      	cpsie	i
 80098f4:	60fb      	str	r3, [r7, #12]
}
 80098f6:	bf00      	nop
 80098f8:	e7fe      	b.n	80098f8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80098fa:	f001 f9b7 	bl	800ac6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80098fe:	4b1d      	ldr	r3, [pc, #116]	; (8009974 <xTaskCheckForTimeOut+0xc4>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	69ba      	ldr	r2, [r7, #24]
 800990a:	1ad3      	subs	r3, r2, r3
 800990c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009916:	d102      	bne.n	800991e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009918:	2300      	movs	r3, #0
 800991a:	61fb      	str	r3, [r7, #28]
 800991c:	e023      	b.n	8009966 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681a      	ldr	r2, [r3, #0]
 8009922:	4b15      	ldr	r3, [pc, #84]	; (8009978 <xTaskCheckForTimeOut+0xc8>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	429a      	cmp	r2, r3
 8009928:	d007      	beq.n	800993a <xTaskCheckForTimeOut+0x8a>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	69ba      	ldr	r2, [r7, #24]
 8009930:	429a      	cmp	r2, r3
 8009932:	d302      	bcc.n	800993a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009934:	2301      	movs	r3, #1
 8009936:	61fb      	str	r3, [r7, #28]
 8009938:	e015      	b.n	8009966 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	697a      	ldr	r2, [r7, #20]
 8009940:	429a      	cmp	r2, r3
 8009942:	d20b      	bcs.n	800995c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	1ad2      	subs	r2, r2, r3
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f7ff ff97 	bl	8009884 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009956:	2300      	movs	r3, #0
 8009958:	61fb      	str	r3, [r7, #28]
 800995a:	e004      	b.n	8009966 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	2200      	movs	r2, #0
 8009960:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009962:	2301      	movs	r3, #1
 8009964:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009966:	f001 f9b5 	bl	800acd4 <vPortExitCritical>

	return xReturn;
 800996a:	69fb      	ldr	r3, [r7, #28]
}
 800996c:	4618      	mov	r0, r3
 800996e:	3720      	adds	r7, #32
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}
 8009974:	200021b4 	.word	0x200021b4
 8009978:	200021c8 	.word	0x200021c8

0800997c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800997c:	b480      	push	{r7}
 800997e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009980:	4b03      	ldr	r3, [pc, #12]	; (8009990 <vTaskMissedYield+0x14>)
 8009982:	2201      	movs	r2, #1
 8009984:	601a      	str	r2, [r3, #0]
}
 8009986:	bf00      	nop
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr
 8009990:	200021c4 	.word	0x200021c4

08009994 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b082      	sub	sp, #8
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800999c:	f000 f852 	bl	8009a44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80099a0:	4b06      	ldr	r3, [pc, #24]	; (80099bc <prvIdleTask+0x28>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	2b01      	cmp	r3, #1
 80099a6:	d9f9      	bls.n	800999c <prvIdleTask+0x8>
			{
				taskYIELD();
 80099a8:	4b05      	ldr	r3, [pc, #20]	; (80099c0 <prvIdleTask+0x2c>)
 80099aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099ae:	601a      	str	r2, [r3, #0]
 80099b0:	f3bf 8f4f 	dsb	sy
 80099b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80099b8:	e7f0      	b.n	800999c <prvIdleTask+0x8>
 80099ba:	bf00      	nop
 80099bc:	20001ce0 	.word	0x20001ce0
 80099c0:	e000ed04 	.word	0xe000ed04

080099c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80099ca:	2300      	movs	r3, #0
 80099cc:	607b      	str	r3, [r7, #4]
 80099ce:	e00c      	b.n	80099ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	4613      	mov	r3, r2
 80099d4:	009b      	lsls	r3, r3, #2
 80099d6:	4413      	add	r3, r2
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	4a12      	ldr	r2, [pc, #72]	; (8009a24 <prvInitialiseTaskLists+0x60>)
 80099dc:	4413      	add	r3, r2
 80099de:	4618      	mov	r0, r3
 80099e0:	f7fe f918 	bl	8007c14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	3301      	adds	r3, #1
 80099e8:	607b      	str	r3, [r7, #4]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2b37      	cmp	r3, #55	; 0x37
 80099ee:	d9ef      	bls.n	80099d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80099f0:	480d      	ldr	r0, [pc, #52]	; (8009a28 <prvInitialiseTaskLists+0x64>)
 80099f2:	f7fe f90f 	bl	8007c14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80099f6:	480d      	ldr	r0, [pc, #52]	; (8009a2c <prvInitialiseTaskLists+0x68>)
 80099f8:	f7fe f90c 	bl	8007c14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80099fc:	480c      	ldr	r0, [pc, #48]	; (8009a30 <prvInitialiseTaskLists+0x6c>)
 80099fe:	f7fe f909 	bl	8007c14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009a02:	480c      	ldr	r0, [pc, #48]	; (8009a34 <prvInitialiseTaskLists+0x70>)
 8009a04:	f7fe f906 	bl	8007c14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009a08:	480b      	ldr	r0, [pc, #44]	; (8009a38 <prvInitialiseTaskLists+0x74>)
 8009a0a:	f7fe f903 	bl	8007c14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009a0e:	4b0b      	ldr	r3, [pc, #44]	; (8009a3c <prvInitialiseTaskLists+0x78>)
 8009a10:	4a05      	ldr	r2, [pc, #20]	; (8009a28 <prvInitialiseTaskLists+0x64>)
 8009a12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009a14:	4b0a      	ldr	r3, [pc, #40]	; (8009a40 <prvInitialiseTaskLists+0x7c>)
 8009a16:	4a05      	ldr	r2, [pc, #20]	; (8009a2c <prvInitialiseTaskLists+0x68>)
 8009a18:	601a      	str	r2, [r3, #0]
}
 8009a1a:	bf00      	nop
 8009a1c:	3708      	adds	r7, #8
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop
 8009a24:	20001ce0 	.word	0x20001ce0
 8009a28:	20002140 	.word	0x20002140
 8009a2c:	20002154 	.word	0x20002154
 8009a30:	20002170 	.word	0x20002170
 8009a34:	20002184 	.word	0x20002184
 8009a38:	2000219c 	.word	0x2000219c
 8009a3c:	20002168 	.word	0x20002168
 8009a40:	2000216c 	.word	0x2000216c

08009a44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a4a:	e019      	b.n	8009a80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009a4c:	f001 f90e 	bl	800ac6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a50:	4b10      	ldr	r3, [pc, #64]	; (8009a94 <prvCheckTasksWaitingTermination+0x50>)
 8009a52:	68db      	ldr	r3, [r3, #12]
 8009a54:	68db      	ldr	r3, [r3, #12]
 8009a56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	3304      	adds	r3, #4
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f7fe f963 	bl	8007d28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009a62:	4b0d      	ldr	r3, [pc, #52]	; (8009a98 <prvCheckTasksWaitingTermination+0x54>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	3b01      	subs	r3, #1
 8009a68:	4a0b      	ldr	r2, [pc, #44]	; (8009a98 <prvCheckTasksWaitingTermination+0x54>)
 8009a6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009a6c:	4b0b      	ldr	r3, [pc, #44]	; (8009a9c <prvCheckTasksWaitingTermination+0x58>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	3b01      	subs	r3, #1
 8009a72:	4a0a      	ldr	r2, [pc, #40]	; (8009a9c <prvCheckTasksWaitingTermination+0x58>)
 8009a74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009a76:	f001 f92d 	bl	800acd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 f848 	bl	8009b10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a80:	4b06      	ldr	r3, [pc, #24]	; (8009a9c <prvCheckTasksWaitingTermination+0x58>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d1e1      	bne.n	8009a4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009a88:	bf00      	nop
 8009a8a:	bf00      	nop
 8009a8c:	3708      	adds	r7, #8
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
 8009a92:	bf00      	nop
 8009a94:	20002184 	.word	0x20002184
 8009a98:	200021b0 	.word	0x200021b0
 8009a9c:	20002198 	.word	0x20002198

08009aa0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b085      	sub	sp, #20
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8009aac:	e005      	b.n	8009aba <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	607b      	str	r3, [r7, #4]
			ulCount++;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	2ba5      	cmp	r3, #165	; 0xa5
 8009ac0:	d0f5      	beq.n	8009aae <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	089b      	lsrs	r3, r3, #2
 8009ac6:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	b29b      	uxth	r3, r3
	}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3714      	adds	r7, #20
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr

08009ad8 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b086      	sub	sp, #24
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d102      	bne.n	8009aec <uxTaskGetStackHighWaterMark+0x14>
 8009ae6:	4b09      	ldr	r3, [pc, #36]	; (8009b0c <uxTaskGetStackHighWaterMark+0x34>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	e000      	b.n	8009aee <uxTaskGetStackHighWaterMark+0x16>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009af4:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8009af6:	6938      	ldr	r0, [r7, #16]
 8009af8:	f7ff ffd2 	bl	8009aa0 <prvTaskCheckFreeStackSpace>
 8009afc:	4603      	mov	r3, r0
 8009afe:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8009b00:	68fb      	ldr	r3, [r7, #12]
	}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3718      	adds	r7, #24
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	bf00      	nop
 8009b0c:	20001cdc 	.word	0x20001cdc

08009b10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	3354      	adds	r3, #84	; 0x54
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f001 fbff 	bl	800b320 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d108      	bne.n	8009b3e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b30:	4618      	mov	r0, r3
 8009b32:	f001 fa91 	bl	800b058 <vPortFree>
				vPortFree( pxTCB );
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f001 fa8e 	bl	800b058 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009b3c:	e01a      	b.n	8009b74 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d103      	bne.n	8009b50 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f001 fa85 	bl	800b058 <vPortFree>
	}
 8009b4e:	e011      	b.n	8009b74 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009b56:	2b02      	cmp	r3, #2
 8009b58:	d00c      	beq.n	8009b74 <prvDeleteTCB+0x64>
	__asm volatile
 8009b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b5e:	b672      	cpsid	i
 8009b60:	f383 8811 	msr	BASEPRI, r3
 8009b64:	f3bf 8f6f 	isb	sy
 8009b68:	f3bf 8f4f 	dsb	sy
 8009b6c:	b662      	cpsie	i
 8009b6e:	60fb      	str	r3, [r7, #12]
}
 8009b70:	bf00      	nop
 8009b72:	e7fe      	b.n	8009b72 <prvDeleteTCB+0x62>
	}
 8009b74:	bf00      	nop
 8009b76:	3710      	adds	r7, #16
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}

08009b7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b82:	4b0c      	ldr	r3, [pc, #48]	; (8009bb4 <prvResetNextTaskUnblockTime+0x38>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d104      	bne.n	8009b96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009b8c:	4b0a      	ldr	r3, [pc, #40]	; (8009bb8 <prvResetNextTaskUnblockTime+0x3c>)
 8009b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8009b92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009b94:	e008      	b.n	8009ba8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b96:	4b07      	ldr	r3, [pc, #28]	; (8009bb4 <prvResetNextTaskUnblockTime+0x38>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	68db      	ldr	r3, [r3, #12]
 8009b9c:	68db      	ldr	r3, [r3, #12]
 8009b9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	4a04      	ldr	r2, [pc, #16]	; (8009bb8 <prvResetNextTaskUnblockTime+0x3c>)
 8009ba6:	6013      	str	r3, [r2, #0]
}
 8009ba8:	bf00      	nop
 8009baa:	370c      	adds	r7, #12
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr
 8009bb4:	20002168 	.word	0x20002168
 8009bb8:	200021d0 	.word	0x200021d0

08009bbc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b083      	sub	sp, #12
 8009bc0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009bc2:	4b05      	ldr	r3, [pc, #20]	; (8009bd8 <xTaskGetCurrentTaskHandle+0x1c>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009bc8:	687b      	ldr	r3, [r7, #4]
	}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	370c      	adds	r7, #12
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd4:	4770      	bx	lr
 8009bd6:	bf00      	nop
 8009bd8:	20001cdc 	.word	0x20001cdc

08009bdc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009bdc:	b480      	push	{r7}
 8009bde:	b083      	sub	sp, #12
 8009be0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009be2:	4b0b      	ldr	r3, [pc, #44]	; (8009c10 <xTaskGetSchedulerState+0x34>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d102      	bne.n	8009bf0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009bea:	2301      	movs	r3, #1
 8009bec:	607b      	str	r3, [r7, #4]
 8009bee:	e008      	b.n	8009c02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bf0:	4b08      	ldr	r3, [pc, #32]	; (8009c14 <xTaskGetSchedulerState+0x38>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d102      	bne.n	8009bfe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009bf8:	2302      	movs	r3, #2
 8009bfa:	607b      	str	r3, [r7, #4]
 8009bfc:	e001      	b.n	8009c02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009c02:	687b      	ldr	r3, [r7, #4]
	}
 8009c04:	4618      	mov	r0, r3
 8009c06:	370c      	adds	r7, #12
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr
 8009c10:	200021bc 	.word	0x200021bc
 8009c14:	200021d8 	.word	0x200021d8

08009c18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b086      	sub	sp, #24
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009c24:	2300      	movs	r3, #0
 8009c26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d05a      	beq.n	8009ce4 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009c2e:	4b30      	ldr	r3, [pc, #192]	; (8009cf0 <xTaskPriorityDisinherit+0xd8>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	693a      	ldr	r2, [r7, #16]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d00c      	beq.n	8009c52 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8009c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c3c:	b672      	cpsid	i
 8009c3e:	f383 8811 	msr	BASEPRI, r3
 8009c42:	f3bf 8f6f 	isb	sy
 8009c46:	f3bf 8f4f 	dsb	sy
 8009c4a:	b662      	cpsie	i
 8009c4c:	60fb      	str	r3, [r7, #12]
}
 8009c4e:	bf00      	nop
 8009c50:	e7fe      	b.n	8009c50 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d10c      	bne.n	8009c74 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8009c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5e:	b672      	cpsid	i
 8009c60:	f383 8811 	msr	BASEPRI, r3
 8009c64:	f3bf 8f6f 	isb	sy
 8009c68:	f3bf 8f4f 	dsb	sy
 8009c6c:	b662      	cpsie	i
 8009c6e:	60bb      	str	r3, [r7, #8]
}
 8009c70:	bf00      	nop
 8009c72:	e7fe      	b.n	8009c72 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c78:	1e5a      	subs	r2, r3, #1
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d02c      	beq.n	8009ce4 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d128      	bne.n	8009ce4 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	3304      	adds	r3, #4
 8009c96:	4618      	mov	r0, r3
 8009c98:	f7fe f846 	bl	8007d28 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cb4:	4b0f      	ldr	r3, [pc, #60]	; (8009cf4 <xTaskPriorityDisinherit+0xdc>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d903      	bls.n	8009cc4 <xTaskPriorityDisinherit+0xac>
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc0:	4a0c      	ldr	r2, [pc, #48]	; (8009cf4 <xTaskPriorityDisinherit+0xdc>)
 8009cc2:	6013      	str	r3, [r2, #0]
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cc8:	4613      	mov	r3, r2
 8009cca:	009b      	lsls	r3, r3, #2
 8009ccc:	4413      	add	r3, r2
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	4a09      	ldr	r2, [pc, #36]	; (8009cf8 <xTaskPriorityDisinherit+0xe0>)
 8009cd2:	441a      	add	r2, r3
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	3304      	adds	r3, #4
 8009cd8:	4619      	mov	r1, r3
 8009cda:	4610      	mov	r0, r2
 8009cdc:	f7fd ffc7 	bl	8007c6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009ce4:	697b      	ldr	r3, [r7, #20]
	}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3718      	adds	r7, #24
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
 8009cee:	bf00      	nop
 8009cf0:	20001cdc 	.word	0x20001cdc
 8009cf4:	200021b8 	.word	0x200021b8
 8009cf8:	20001ce0 	.word	0x20001ce0

08009cfc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b086      	sub	sp, #24
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	607a      	str	r2, [r7, #4]
 8009d08:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8009d0a:	f000 ffaf 	bl	800ac6c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009d0e:	4b29      	ldr	r3, [pc, #164]	; (8009db4 <xTaskNotifyWait+0xb8>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009d16:	b2db      	uxtb	r3, r3
 8009d18:	2b02      	cmp	r3, #2
 8009d1a:	d01c      	beq.n	8009d56 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009d1c:	4b25      	ldr	r3, [pc, #148]	; (8009db4 <xTaskNotifyWait+0xb8>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8009d24:	68fa      	ldr	r2, [r7, #12]
 8009d26:	43d2      	mvns	r2, r2
 8009d28:	400a      	ands	r2, r1
 8009d2a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009d2e:	4b21      	ldr	r3, [pc, #132]	; (8009db4 <xTaskNotifyWait+0xb8>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	2201      	movs	r2, #1
 8009d34:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d00b      	beq.n	8009d56 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009d3e:	2101      	movs	r1, #1
 8009d40:	6838      	ldr	r0, [r7, #0]
 8009d42:	f000 fa11 	bl	800a168 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009d46:	4b1c      	ldr	r3, [pc, #112]	; (8009db8 <xTaskNotifyWait+0xbc>)
 8009d48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d4c:	601a      	str	r2, [r3, #0]
 8009d4e:	f3bf 8f4f 	dsb	sy
 8009d52:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009d56:	f000 ffbd 	bl	800acd4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8009d5a:	f000 ff87 	bl	800ac6c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d005      	beq.n	8009d70 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009d64:	4b13      	ldr	r3, [pc, #76]	; (8009db4 <xTaskNotifyWait+0xb8>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009d70:	4b10      	ldr	r3, [pc, #64]	; (8009db4 <xTaskNotifyWait+0xb8>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	2b02      	cmp	r3, #2
 8009d7c:	d002      	beq.n	8009d84 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	617b      	str	r3, [r7, #20]
 8009d82:	e00a      	b.n	8009d9a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009d84:	4b0b      	ldr	r3, [pc, #44]	; (8009db4 <xTaskNotifyWait+0xb8>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8009d8c:	68ba      	ldr	r2, [r7, #8]
 8009d8e:	43d2      	mvns	r2, r2
 8009d90:	400a      	ands	r2, r1
 8009d92:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 8009d96:	2301      	movs	r3, #1
 8009d98:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009d9a:	4b06      	ldr	r3, [pc, #24]	; (8009db4 <xTaskNotifyWait+0xb8>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 8009da4:	f000 ff96 	bl	800acd4 <vPortExitCritical>

		return xReturn;
 8009da8:	697b      	ldr	r3, [r7, #20]
	}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3718      	adds	r7, #24
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
 8009db2:	bf00      	nop
 8009db4:	20001cdc 	.word	0x20001cdc
 8009db8:	e000ed04 	.word	0xe000ed04

08009dbc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b08a      	sub	sp, #40	; 0x28
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	603b      	str	r3, [r7, #0]
 8009dc8:	4613      	mov	r3, r2
 8009dca:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d10c      	bne.n	8009df0 <xTaskGenericNotify+0x34>
	__asm volatile
 8009dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dda:	b672      	cpsid	i
 8009ddc:	f383 8811 	msr	BASEPRI, r3
 8009de0:	f3bf 8f6f 	isb	sy
 8009de4:	f3bf 8f4f 	dsb	sy
 8009de8:	b662      	cpsie	i
 8009dea:	61bb      	str	r3, [r7, #24]
}
 8009dec:	bf00      	nop
 8009dee:	e7fe      	b.n	8009dee <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8009df4:	f000 ff3a 	bl	800ac6c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d004      	beq.n	8009e08 <xTaskGenericNotify+0x4c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009dfe:	6a3b      	ldr	r3, [r7, #32]
 8009e00:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009e08:	6a3b      	ldr	r3, [r7, #32]
 8009e0a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009e0e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009e10:	6a3b      	ldr	r3, [r7, #32]
 8009e12:	2202      	movs	r2, #2
 8009e14:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8009e18:	79fb      	ldrb	r3, [r7, #7]
 8009e1a:	2b04      	cmp	r3, #4
 8009e1c:	d82d      	bhi.n	8009e7a <xTaskGenericNotify+0xbe>
 8009e1e:	a201      	add	r2, pc, #4	; (adr r2, 8009e24 <xTaskGenericNotify+0x68>)
 8009e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e24:	08009ea1 	.word	0x08009ea1
 8009e28:	08009e39 	.word	0x08009e39
 8009e2c:	08009e4b 	.word	0x08009e4b
 8009e30:	08009e5b 	.word	0x08009e5b
 8009e34:	08009e65 	.word	0x08009e65
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009e38:	6a3b      	ldr	r3, [r7, #32]
 8009e3a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	431a      	orrs	r2, r3
 8009e42:	6a3b      	ldr	r3, [r7, #32]
 8009e44:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009e48:	e02d      	b.n	8009ea6 <xTaskGenericNotify+0xea>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009e4a:	6a3b      	ldr	r3, [r7, #32]
 8009e4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009e50:	1c5a      	adds	r2, r3, #1
 8009e52:	6a3b      	ldr	r3, [r7, #32]
 8009e54:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009e58:	e025      	b.n	8009ea6 <xTaskGenericNotify+0xea>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009e5a:	6a3b      	ldr	r3, [r7, #32]
 8009e5c:	68ba      	ldr	r2, [r7, #8]
 8009e5e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009e62:	e020      	b.n	8009ea6 <xTaskGenericNotify+0xea>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009e64:	7ffb      	ldrb	r3, [r7, #31]
 8009e66:	2b02      	cmp	r3, #2
 8009e68:	d004      	beq.n	8009e74 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009e6a:	6a3b      	ldr	r3, [r7, #32]
 8009e6c:	68ba      	ldr	r2, [r7, #8]
 8009e6e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009e72:	e018      	b.n	8009ea6 <xTaskGenericNotify+0xea>
						xReturn = pdFAIL;
 8009e74:	2300      	movs	r3, #0
 8009e76:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8009e78:	e015      	b.n	8009ea6 <xTaskGenericNotify+0xea>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009e7a:	6a3b      	ldr	r3, [r7, #32]
 8009e7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e84:	d00e      	beq.n	8009ea4 <xTaskGenericNotify+0xe8>
	__asm volatile
 8009e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8a:	b672      	cpsid	i
 8009e8c:	f383 8811 	msr	BASEPRI, r3
 8009e90:	f3bf 8f6f 	isb	sy
 8009e94:	f3bf 8f4f 	dsb	sy
 8009e98:	b662      	cpsie	i
 8009e9a:	617b      	str	r3, [r7, #20]
}
 8009e9c:	bf00      	nop
 8009e9e:	e7fe      	b.n	8009e9e <xTaskGenericNotify+0xe2>
					break;
 8009ea0:	bf00      	nop
 8009ea2:	e000      	b.n	8009ea6 <xTaskGenericNotify+0xea>

					break;
 8009ea4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009ea6:	7ffb      	ldrb	r3, [r7, #31]
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d13c      	bne.n	8009f26 <xTaskGenericNotify+0x16a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009eac:	6a3b      	ldr	r3, [r7, #32]
 8009eae:	3304      	adds	r3, #4
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f7fd ff39 	bl	8007d28 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009eb6:	6a3b      	ldr	r3, [r7, #32]
 8009eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eba:	4b1e      	ldr	r3, [pc, #120]	; (8009f34 <xTaskGenericNotify+0x178>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d903      	bls.n	8009eca <xTaskGenericNotify+0x10e>
 8009ec2:	6a3b      	ldr	r3, [r7, #32]
 8009ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec6:	4a1b      	ldr	r2, [pc, #108]	; (8009f34 <xTaskGenericNotify+0x178>)
 8009ec8:	6013      	str	r3, [r2, #0]
 8009eca:	6a3b      	ldr	r3, [r7, #32]
 8009ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ece:	4613      	mov	r3, r2
 8009ed0:	009b      	lsls	r3, r3, #2
 8009ed2:	4413      	add	r3, r2
 8009ed4:	009b      	lsls	r3, r3, #2
 8009ed6:	4a18      	ldr	r2, [pc, #96]	; (8009f38 <xTaskGenericNotify+0x17c>)
 8009ed8:	441a      	add	r2, r3
 8009eda:	6a3b      	ldr	r3, [r7, #32]
 8009edc:	3304      	adds	r3, #4
 8009ede:	4619      	mov	r1, r3
 8009ee0:	4610      	mov	r0, r2
 8009ee2:	f7fd fec4 	bl	8007c6e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009ee6:	6a3b      	ldr	r3, [r7, #32]
 8009ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d00c      	beq.n	8009f08 <xTaskGenericNotify+0x14c>
	__asm volatile
 8009eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef2:	b672      	cpsid	i
 8009ef4:	f383 8811 	msr	BASEPRI, r3
 8009ef8:	f3bf 8f6f 	isb	sy
 8009efc:	f3bf 8f4f 	dsb	sy
 8009f00:	b662      	cpsie	i
 8009f02:	613b      	str	r3, [r7, #16]
}
 8009f04:	bf00      	nop
 8009f06:	e7fe      	b.n	8009f06 <xTaskGenericNotify+0x14a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009f08:	6a3b      	ldr	r3, [r7, #32]
 8009f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f0c:	4b0b      	ldr	r3, [pc, #44]	; (8009f3c <xTaskGenericNotify+0x180>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d907      	bls.n	8009f26 <xTaskGenericNotify+0x16a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8009f16:	4b0a      	ldr	r3, [pc, #40]	; (8009f40 <xTaskGenericNotify+0x184>)
 8009f18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f1c:	601a      	str	r2, [r3, #0]
 8009f1e:	f3bf 8f4f 	dsb	sy
 8009f22:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009f26:	f000 fed5 	bl	800acd4 <vPortExitCritical>

		return xReturn;
 8009f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3728      	adds	r7, #40	; 0x28
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}
 8009f34:	200021b8 	.word	0x200021b8
 8009f38:	20001ce0 	.word	0x20001ce0
 8009f3c:	20001cdc 	.word	0x20001cdc
 8009f40:	e000ed04 	.word	0xe000ed04

08009f44 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b08e      	sub	sp, #56	; 0x38
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	60b9      	str	r1, [r7, #8]
 8009f4e:	603b      	str	r3, [r7, #0]
 8009f50:	4613      	mov	r3, r2
 8009f52:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8009f54:	2301      	movs	r3, #1
 8009f56:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d10c      	bne.n	8009f78 <xTaskGenericNotifyFromISR+0x34>
	__asm volatile
 8009f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f62:	b672      	cpsid	i
 8009f64:	f383 8811 	msr	BASEPRI, r3
 8009f68:	f3bf 8f6f 	isb	sy
 8009f6c:	f3bf 8f4f 	dsb	sy
 8009f70:	b662      	cpsie	i
 8009f72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009f74:	bf00      	nop
 8009f76:	e7fe      	b.n	8009f76 <xTaskGenericNotifyFromISR+0x32>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f78:	f000 ff60 	bl	800ae3c <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8009f80:	f3ef 8211 	mrs	r2, BASEPRI
 8009f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f88:	b672      	cpsid	i
 8009f8a:	f383 8811 	msr	BASEPRI, r3
 8009f8e:	f3bf 8f6f 	isb	sy
 8009f92:	f3bf 8f4f 	dsb	sy
 8009f96:	b662      	cpsie	i
 8009f98:	623a      	str	r2, [r7, #32]
 8009f9a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8009f9c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d004      	beq.n	8009fb0 <xTaskGenericNotifyFromISR+0x6c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb2:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fbc:	2202      	movs	r2, #2
 8009fbe:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8009fc2:	79fb      	ldrb	r3, [r7, #7]
 8009fc4:	2b04      	cmp	r3, #4
 8009fc6:	d82f      	bhi.n	800a028 <xTaskGenericNotifyFromISR+0xe4>
 8009fc8:	a201      	add	r2, pc, #4	; (adr r2, 8009fd0 <xTaskGenericNotifyFromISR+0x8c>)
 8009fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fce:	bf00      	nop
 8009fd0:	0800a04f 	.word	0x0800a04f
 8009fd4:	08009fe5 	.word	0x08009fe5
 8009fd8:	08009ff7 	.word	0x08009ff7
 8009fdc:	0800a007 	.word	0x0800a007
 8009fe0:	0800a011 	.word	0x0800a011
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	431a      	orrs	r2, r3
 8009fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009ff4:	e02e      	b.n	800a054 <xTaskGenericNotifyFromISR+0x110>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009ffc:	1c5a      	adds	r2, r3, #1
 8009ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a000:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800a004:	e026      	b.n	800a054 <xTaskGenericNotifyFromISR+0x110>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a008:	68ba      	ldr	r2, [r7, #8]
 800a00a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800a00e:	e021      	b.n	800a054 <xTaskGenericNotifyFromISR+0x110>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a010:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a014:	2b02      	cmp	r3, #2
 800a016:	d004      	beq.n	800a022 <xTaskGenericNotifyFromISR+0xde>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a01a:	68ba      	ldr	r2, [r7, #8]
 800a01c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a020:	e018      	b.n	800a054 <xTaskGenericNotifyFromISR+0x110>
						xReturn = pdFAIL;
 800a022:	2300      	movs	r3, #0
 800a024:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800a026:	e015      	b.n	800a054 <xTaskGenericNotifyFromISR+0x110>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a02e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a032:	d00e      	beq.n	800a052 <xTaskGenericNotifyFromISR+0x10e>
	__asm volatile
 800a034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a038:	b672      	cpsid	i
 800a03a:	f383 8811 	msr	BASEPRI, r3
 800a03e:	f3bf 8f6f 	isb	sy
 800a042:	f3bf 8f4f 	dsb	sy
 800a046:	b662      	cpsie	i
 800a048:	61bb      	str	r3, [r7, #24]
}
 800a04a:	bf00      	nop
 800a04c:	e7fe      	b.n	800a04c <xTaskGenericNotifyFromISR+0x108>
					break;
 800a04e:	bf00      	nop
 800a050:	e000      	b.n	800a054 <xTaskGenericNotifyFromISR+0x110>
					break;
 800a052:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a054:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a058:	2b01      	cmp	r3, #1
 800a05a:	d148      	bne.n	800a0ee <xTaskGenericNotifyFromISR+0x1aa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a05e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a060:	2b00      	cmp	r3, #0
 800a062:	d00c      	beq.n	800a07e <xTaskGenericNotifyFromISR+0x13a>
	__asm volatile
 800a064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a068:	b672      	cpsid	i
 800a06a:	f383 8811 	msr	BASEPRI, r3
 800a06e:	f3bf 8f6f 	isb	sy
 800a072:	f3bf 8f4f 	dsb	sy
 800a076:	b662      	cpsie	i
 800a078:	617b      	str	r3, [r7, #20]
}
 800a07a:	bf00      	nop
 800a07c:	e7fe      	b.n	800a07c <xTaskGenericNotifyFromISR+0x138>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a07e:	4b21      	ldr	r3, [pc, #132]	; (800a104 <xTaskGenericNotifyFromISR+0x1c0>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d11d      	bne.n	800a0c2 <xTaskGenericNotifyFromISR+0x17e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a088:	3304      	adds	r3, #4
 800a08a:	4618      	mov	r0, r3
 800a08c:	f7fd fe4c 	bl	8007d28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a094:	4b1c      	ldr	r3, [pc, #112]	; (800a108 <xTaskGenericNotifyFromISR+0x1c4>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	429a      	cmp	r2, r3
 800a09a:	d903      	bls.n	800a0a4 <xTaskGenericNotifyFromISR+0x160>
 800a09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a0:	4a19      	ldr	r2, [pc, #100]	; (800a108 <xTaskGenericNotifyFromISR+0x1c4>)
 800a0a2:	6013      	str	r3, [r2, #0]
 800a0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0a8:	4613      	mov	r3, r2
 800a0aa:	009b      	lsls	r3, r3, #2
 800a0ac:	4413      	add	r3, r2
 800a0ae:	009b      	lsls	r3, r3, #2
 800a0b0:	4a16      	ldr	r2, [pc, #88]	; (800a10c <xTaskGenericNotifyFromISR+0x1c8>)
 800a0b2:	441a      	add	r2, r3
 800a0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b6:	3304      	adds	r3, #4
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	4610      	mov	r0, r2
 800a0bc:	f7fd fdd7 	bl	8007c6e <vListInsertEnd>
 800a0c0:	e005      	b.n	800a0ce <xTaskGenericNotifyFromISR+0x18a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c4:	3318      	adds	r3, #24
 800a0c6:	4619      	mov	r1, r3
 800a0c8:	4811      	ldr	r0, [pc, #68]	; (800a110 <xTaskGenericNotifyFromISR+0x1cc>)
 800a0ca:	f7fd fdd0 	bl	8007c6e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0d2:	4b10      	ldr	r3, [pc, #64]	; (800a114 <xTaskGenericNotifyFromISR+0x1d0>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	d908      	bls.n	800a0ee <xTaskGenericNotifyFromISR+0x1aa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800a0dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d002      	beq.n	800a0e8 <xTaskGenericNotifyFromISR+0x1a4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800a0e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800a0e8:	4b0b      	ldr	r3, [pc, #44]	; (800a118 <xTaskGenericNotifyFromISR+0x1d4>)
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	601a      	str	r2, [r3, #0]
 800a0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	f383 8811 	msr	BASEPRI, r3
}
 800a0f8:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800a0fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3738      	adds	r7, #56	; 0x38
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}
 800a104:	200021d8 	.word	0x200021d8
 800a108:	200021b8 	.word	0x200021b8
 800a10c:	20001ce0 	.word	0x20001ce0
 800a110:	20002170 	.word	0x20002170
 800a114:	20001cdc 	.word	0x20001cdc
 800a118:	200021c4 	.word	0x200021c4

0800a11c <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d102      	bne.n	800a130 <xTaskNotifyStateClear+0x14>
 800a12a:	4b0e      	ldr	r3, [pc, #56]	; (800a164 <xTaskNotifyStateClear+0x48>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	e000      	b.n	800a132 <xTaskNotifyStateClear+0x16>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 800a134:	f000 fd9a 	bl	800ac6c <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800a13e:	b2db      	uxtb	r3, r3
 800a140:	2b02      	cmp	r3, #2
 800a142:	d106      	bne.n	800a152 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	2200      	movs	r2, #0
 800a148:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				xReturn = pdPASS;
 800a14c:	2301      	movs	r3, #1
 800a14e:	60fb      	str	r3, [r7, #12]
 800a150:	e001      	b.n	800a156 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800a152:	2300      	movs	r3, #0
 800a154:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800a156:	f000 fdbd 	bl	800acd4 <vPortExitCritical>

		return xReturn;
 800a15a:	68fb      	ldr	r3, [r7, #12]
	}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3710      	adds	r7, #16
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}
 800a164:	20001cdc 	.word	0x20001cdc

0800a168 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a172:	4b21      	ldr	r3, [pc, #132]	; (800a1f8 <prvAddCurrentTaskToDelayedList+0x90>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a178:	4b20      	ldr	r3, [pc, #128]	; (800a1fc <prvAddCurrentTaskToDelayedList+0x94>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	3304      	adds	r3, #4
 800a17e:	4618      	mov	r0, r3
 800a180:	f7fd fdd2 	bl	8007d28 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a18a:	d10a      	bne.n	800a1a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d007      	beq.n	800a1a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a192:	4b1a      	ldr	r3, [pc, #104]	; (800a1fc <prvAddCurrentTaskToDelayedList+0x94>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	3304      	adds	r3, #4
 800a198:	4619      	mov	r1, r3
 800a19a:	4819      	ldr	r0, [pc, #100]	; (800a200 <prvAddCurrentTaskToDelayedList+0x98>)
 800a19c:	f7fd fd67 	bl	8007c6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a1a0:	e026      	b.n	800a1f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a1a2:	68fa      	ldr	r2, [r7, #12]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	4413      	add	r3, r2
 800a1a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a1aa:	4b14      	ldr	r3, [pc, #80]	; (800a1fc <prvAddCurrentTaskToDelayedList+0x94>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	68ba      	ldr	r2, [r7, #8]
 800a1b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a1b2:	68ba      	ldr	r2, [r7, #8]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d209      	bcs.n	800a1ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1ba:	4b12      	ldr	r3, [pc, #72]	; (800a204 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a1bc:	681a      	ldr	r2, [r3, #0]
 800a1be:	4b0f      	ldr	r3, [pc, #60]	; (800a1fc <prvAddCurrentTaskToDelayedList+0x94>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	3304      	adds	r3, #4
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	4610      	mov	r0, r2
 800a1c8:	f7fd fd75 	bl	8007cb6 <vListInsert>
}
 800a1cc:	e010      	b.n	800a1f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1ce:	4b0e      	ldr	r3, [pc, #56]	; (800a208 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a1d0:	681a      	ldr	r2, [r3, #0]
 800a1d2:	4b0a      	ldr	r3, [pc, #40]	; (800a1fc <prvAddCurrentTaskToDelayedList+0x94>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	3304      	adds	r3, #4
 800a1d8:	4619      	mov	r1, r3
 800a1da:	4610      	mov	r0, r2
 800a1dc:	f7fd fd6b 	bl	8007cb6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a1e0:	4b0a      	ldr	r3, [pc, #40]	; (800a20c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	68ba      	ldr	r2, [r7, #8]
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d202      	bcs.n	800a1f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a1ea:	4a08      	ldr	r2, [pc, #32]	; (800a20c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	6013      	str	r3, [r2, #0]
}
 800a1f0:	bf00      	nop
 800a1f2:	3710      	adds	r7, #16
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}
 800a1f8:	200021b4 	.word	0x200021b4
 800a1fc:	20001cdc 	.word	0x20001cdc
 800a200:	2000219c 	.word	0x2000219c
 800a204:	2000216c 	.word	0x2000216c
 800a208:	20002168 	.word	0x20002168
 800a20c:	200021d0 	.word	0x200021d0

0800a210 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b08a      	sub	sp, #40	; 0x28
 800a214:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a216:	2300      	movs	r3, #0
 800a218:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a21a:	f000 fbb5 	bl	800a988 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a21e:	4b1d      	ldr	r3, [pc, #116]	; (800a294 <xTimerCreateTimerTask+0x84>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d021      	beq.n	800a26a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a226:	2300      	movs	r3, #0
 800a228:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a22a:	2300      	movs	r3, #0
 800a22c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a22e:	1d3a      	adds	r2, r7, #4
 800a230:	f107 0108 	add.w	r1, r7, #8
 800a234:	f107 030c 	add.w	r3, r7, #12
 800a238:	4618      	mov	r0, r3
 800a23a:	f7fd fcd1 	bl	8007be0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a23e:	6879      	ldr	r1, [r7, #4]
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	68fa      	ldr	r2, [r7, #12]
 800a244:	9202      	str	r2, [sp, #8]
 800a246:	9301      	str	r3, [sp, #4]
 800a248:	2302      	movs	r3, #2
 800a24a:	9300      	str	r3, [sp, #0]
 800a24c:	2300      	movs	r3, #0
 800a24e:	460a      	mov	r2, r1
 800a250:	4911      	ldr	r1, [pc, #68]	; (800a298 <xTimerCreateTimerTask+0x88>)
 800a252:	4812      	ldr	r0, [pc, #72]	; (800a29c <xTimerCreateTimerTask+0x8c>)
 800a254:	f7fe fe00 	bl	8008e58 <xTaskCreateStatic>
 800a258:	4603      	mov	r3, r0
 800a25a:	4a11      	ldr	r2, [pc, #68]	; (800a2a0 <xTimerCreateTimerTask+0x90>)
 800a25c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a25e:	4b10      	ldr	r3, [pc, #64]	; (800a2a0 <xTimerCreateTimerTask+0x90>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d001      	beq.n	800a26a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a266:	2301      	movs	r3, #1
 800a268:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d10c      	bne.n	800a28a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800a270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a274:	b672      	cpsid	i
 800a276:	f383 8811 	msr	BASEPRI, r3
 800a27a:	f3bf 8f6f 	isb	sy
 800a27e:	f3bf 8f4f 	dsb	sy
 800a282:	b662      	cpsie	i
 800a284:	613b      	str	r3, [r7, #16]
}
 800a286:	bf00      	nop
 800a288:	e7fe      	b.n	800a288 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800a28a:	697b      	ldr	r3, [r7, #20]
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3718      	adds	r7, #24
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}
 800a294:	2000220c 	.word	0x2000220c
 800a298:	0800b56c 	.word	0x0800b56c
 800a29c:	0800a521 	.word	0x0800a521
 800a2a0:	20002210 	.word	0x20002210

0800a2a4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b088      	sub	sp, #32
 800a2a8:	af02      	add	r7, sp, #8
 800a2aa:	60f8      	str	r0, [r7, #12]
 800a2ac:	60b9      	str	r1, [r7, #8]
 800a2ae:	607a      	str	r2, [r7, #4]
 800a2b0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800a2b2:	202c      	movs	r0, #44	; 0x2c
 800a2b4:	f000 fe06 	bl	800aec4 <pvPortMalloc>
 800a2b8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d00d      	beq.n	800a2dc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	9301      	str	r3, [sp, #4]
 800a2cc:	6a3b      	ldr	r3, [r7, #32]
 800a2ce:	9300      	str	r3, [sp, #0]
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	687a      	ldr	r2, [r7, #4]
 800a2d4:	68b9      	ldr	r1, [r7, #8]
 800a2d6:	68f8      	ldr	r0, [r7, #12]
 800a2d8:	f000 f847 	bl	800a36a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a2dc:	697b      	ldr	r3, [r7, #20]
	}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3718      	adds	r7, #24
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}

0800a2e6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800a2e6:	b580      	push	{r7, lr}
 800a2e8:	b08a      	sub	sp, #40	; 0x28
 800a2ea:	af02      	add	r7, sp, #8
 800a2ec:	60f8      	str	r0, [r7, #12]
 800a2ee:	60b9      	str	r1, [r7, #8]
 800a2f0:	607a      	str	r2, [r7, #4]
 800a2f2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800a2f4:	232c      	movs	r3, #44	; 0x2c
 800a2f6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	2b2c      	cmp	r3, #44	; 0x2c
 800a2fc:	d00c      	beq.n	800a318 <xTimerCreateStatic+0x32>
	__asm volatile
 800a2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a302:	b672      	cpsid	i
 800a304:	f383 8811 	msr	BASEPRI, r3
 800a308:	f3bf 8f6f 	isb	sy
 800a30c:	f3bf 8f4f 	dsb	sy
 800a310:	b662      	cpsie	i
 800a312:	61bb      	str	r3, [r7, #24]
}
 800a314:	bf00      	nop
 800a316:	e7fe      	b.n	800a316 <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a318:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800a31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d10c      	bne.n	800a33a <xTimerCreateStatic+0x54>
	__asm volatile
 800a320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a324:	b672      	cpsid	i
 800a326:	f383 8811 	msr	BASEPRI, r3
 800a32a:	f3bf 8f6f 	isb	sy
 800a32e:	f3bf 8f4f 	dsb	sy
 800a332:	b662      	cpsie	i
 800a334:	617b      	str	r3, [r7, #20]
}
 800a336:	bf00      	nop
 800a338:	e7fe      	b.n	800a338 <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800a33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a33c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800a33e:	69fb      	ldr	r3, [r7, #28]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d00d      	beq.n	800a360 <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800a344:	69fb      	ldr	r3, [r7, #28]
 800a346:	2202      	movs	r2, #2
 800a348:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a34c:	69fb      	ldr	r3, [r7, #28]
 800a34e:	9301      	str	r3, [sp, #4]
 800a350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a352:	9300      	str	r3, [sp, #0]
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	687a      	ldr	r2, [r7, #4]
 800a358:	68b9      	ldr	r1, [r7, #8]
 800a35a:	68f8      	ldr	r0, [r7, #12]
 800a35c:	f000 f805 	bl	800a36a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a360:	69fb      	ldr	r3, [r7, #28]
	}
 800a362:	4618      	mov	r0, r3
 800a364:	3720      	adds	r7, #32
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}

0800a36a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800a36a:	b580      	push	{r7, lr}
 800a36c:	b086      	sub	sp, #24
 800a36e:	af00      	add	r7, sp, #0
 800a370:	60f8      	str	r0, [r7, #12]
 800a372:	60b9      	str	r1, [r7, #8]
 800a374:	607a      	str	r2, [r7, #4]
 800a376:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d10c      	bne.n	800a398 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 800a37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a382:	b672      	cpsid	i
 800a384:	f383 8811 	msr	BASEPRI, r3
 800a388:	f3bf 8f6f 	isb	sy
 800a38c:	f3bf 8f4f 	dsb	sy
 800a390:	b662      	cpsie	i
 800a392:	617b      	str	r3, [r7, #20]
}
 800a394:	bf00      	nop
 800a396:	e7fe      	b.n	800a396 <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 800a398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d01e      	beq.n	800a3dc <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800a39e:	f000 faf3 	bl	800a988 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800a3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a4:	68fa      	ldr	r2, [r7, #12]
 800a3a6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3aa:	68ba      	ldr	r2, [r7, #8]
 800a3ac:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800a3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b0:	683a      	ldr	r2, [r7, #0]
 800a3b2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b6:	6a3a      	ldr	r2, [r7, #32]
 800a3b8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3bc:	3304      	adds	r3, #4
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7fd fc48 	bl	8007c54 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d008      	beq.n	800a3dc <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800a3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3d0:	f043 0304 	orr.w	r3, r3, #4
 800a3d4:	b2da      	uxtb	r2, r3
 800a3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800a3dc:	bf00      	nop
 800a3de:	3718      	adds	r7, #24
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b08a      	sub	sp, #40	; 0x28
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	60b9      	str	r1, [r7, #8]
 800a3ee:	607a      	str	r2, [r7, #4]
 800a3f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d10c      	bne.n	800a416 <xTimerGenericCommand+0x32>
	__asm volatile
 800a3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a400:	b672      	cpsid	i
 800a402:	f383 8811 	msr	BASEPRI, r3
 800a406:	f3bf 8f6f 	isb	sy
 800a40a:	f3bf 8f4f 	dsb	sy
 800a40e:	b662      	cpsie	i
 800a410:	623b      	str	r3, [r7, #32]
}
 800a412:	bf00      	nop
 800a414:	e7fe      	b.n	800a414 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a416:	4b1a      	ldr	r3, [pc, #104]	; (800a480 <xTimerGenericCommand+0x9c>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d02a      	beq.n	800a474 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	2b05      	cmp	r3, #5
 800a42e:	dc18      	bgt.n	800a462 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a430:	f7ff fbd4 	bl	8009bdc <xTaskGetSchedulerState>
 800a434:	4603      	mov	r3, r0
 800a436:	2b02      	cmp	r3, #2
 800a438:	d109      	bne.n	800a44e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a43a:	4b11      	ldr	r3, [pc, #68]	; (800a480 <xTimerGenericCommand+0x9c>)
 800a43c:	6818      	ldr	r0, [r3, #0]
 800a43e:	f107 0110 	add.w	r1, r7, #16
 800a442:	2300      	movs	r3, #0
 800a444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a446:	f7fd fda9 	bl	8007f9c <xQueueGenericSend>
 800a44a:	6278      	str	r0, [r7, #36]	; 0x24
 800a44c:	e012      	b.n	800a474 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a44e:	4b0c      	ldr	r3, [pc, #48]	; (800a480 <xTimerGenericCommand+0x9c>)
 800a450:	6818      	ldr	r0, [r3, #0]
 800a452:	f107 0110 	add.w	r1, r7, #16
 800a456:	2300      	movs	r3, #0
 800a458:	2200      	movs	r2, #0
 800a45a:	f7fd fd9f 	bl	8007f9c <xQueueGenericSend>
 800a45e:	6278      	str	r0, [r7, #36]	; 0x24
 800a460:	e008      	b.n	800a474 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a462:	4b07      	ldr	r3, [pc, #28]	; (800a480 <xTimerGenericCommand+0x9c>)
 800a464:	6818      	ldr	r0, [r3, #0]
 800a466:	f107 0110 	add.w	r1, r7, #16
 800a46a:	2300      	movs	r3, #0
 800a46c:	683a      	ldr	r2, [r7, #0]
 800a46e:	f7fd fe9b 	bl	80081a8 <xQueueGenericSendFromISR>
 800a472:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a476:	4618      	mov	r0, r3
 800a478:	3728      	adds	r7, #40	; 0x28
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	bf00      	nop
 800a480:	2000220c 	.word	0x2000220c

0800a484 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b088      	sub	sp, #32
 800a488:	af02      	add	r7, sp, #8
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a48e:	4b23      	ldr	r3, [pc, #140]	; (800a51c <prvProcessExpiredTimer+0x98>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	68db      	ldr	r3, [r3, #12]
 800a494:	68db      	ldr	r3, [r3, #12]
 800a496:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	3304      	adds	r3, #4
 800a49c:	4618      	mov	r0, r3
 800a49e:	f7fd fc43 	bl	8007d28 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4a8:	f003 0304 	and.w	r3, r3, #4
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d024      	beq.n	800a4fa <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	699a      	ldr	r2, [r3, #24]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	18d1      	adds	r1, r2, r3
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	683a      	ldr	r2, [r7, #0]
 800a4bc:	6978      	ldr	r0, [r7, #20]
 800a4be:	f000 f8d3 	bl	800a668 <prvInsertTimerInActiveList>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d021      	beq.n	800a50c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	9300      	str	r3, [sp, #0]
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	2100      	movs	r1, #0
 800a4d2:	6978      	ldr	r0, [r7, #20]
 800a4d4:	f7ff ff86 	bl	800a3e4 <xTimerGenericCommand>
 800a4d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d115      	bne.n	800a50c <prvProcessExpiredTimer+0x88>
	__asm volatile
 800a4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e4:	b672      	cpsid	i
 800a4e6:	f383 8811 	msr	BASEPRI, r3
 800a4ea:	f3bf 8f6f 	isb	sy
 800a4ee:	f3bf 8f4f 	dsb	sy
 800a4f2:	b662      	cpsie	i
 800a4f4:	60fb      	str	r3, [r7, #12]
}
 800a4f6:	bf00      	nop
 800a4f8:	e7fe      	b.n	800a4f8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a500:	f023 0301 	bic.w	r3, r3, #1
 800a504:	b2da      	uxtb	r2, r3
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	6a1b      	ldr	r3, [r3, #32]
 800a510:	6978      	ldr	r0, [r7, #20]
 800a512:	4798      	blx	r3
}
 800a514:	bf00      	nop
 800a516:	3718      	adds	r7, #24
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}
 800a51c:	20002204 	.word	0x20002204

0800a520 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b084      	sub	sp, #16
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a528:	f107 0308 	add.w	r3, r7, #8
 800a52c:	4618      	mov	r0, r3
 800a52e:	f000 f857 	bl	800a5e0 <prvGetNextExpireTime>
 800a532:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	4619      	mov	r1, r3
 800a538:	68f8      	ldr	r0, [r7, #12]
 800a53a:	f000 f803 	bl	800a544 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a53e:	f000 f8d5 	bl	800a6ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a542:	e7f1      	b.n	800a528 <prvTimerTask+0x8>

0800a544 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b084      	sub	sp, #16
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a54e:	f7fe feed 	bl	800932c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a552:	f107 0308 	add.w	r3, r7, #8
 800a556:	4618      	mov	r0, r3
 800a558:	f000 f866 	bl	800a628 <prvSampleTimeNow>
 800a55c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d130      	bne.n	800a5c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d10a      	bne.n	800a580 <prvProcessTimerOrBlockTask+0x3c>
 800a56a:	687a      	ldr	r2, [r7, #4]
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	429a      	cmp	r2, r3
 800a570:	d806      	bhi.n	800a580 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a572:	f7fe fee9 	bl	8009348 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a576:	68f9      	ldr	r1, [r7, #12]
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f7ff ff83 	bl	800a484 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a57e:	e024      	b.n	800a5ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d008      	beq.n	800a598 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a586:	4b13      	ldr	r3, [pc, #76]	; (800a5d4 <prvProcessTimerOrBlockTask+0x90>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d101      	bne.n	800a594 <prvProcessTimerOrBlockTask+0x50>
 800a590:	2301      	movs	r3, #1
 800a592:	e000      	b.n	800a596 <prvProcessTimerOrBlockTask+0x52>
 800a594:	2300      	movs	r3, #0
 800a596:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a598:	4b0f      	ldr	r3, [pc, #60]	; (800a5d8 <prvProcessTimerOrBlockTask+0x94>)
 800a59a:	6818      	ldr	r0, [r3, #0]
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	1ad3      	subs	r3, r2, r3
 800a5a2:	683a      	ldr	r2, [r7, #0]
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	f7fe f8bf 	bl	8008728 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a5aa:	f7fe fecd 	bl	8009348 <xTaskResumeAll>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d10a      	bne.n	800a5ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a5b4:	4b09      	ldr	r3, [pc, #36]	; (800a5dc <prvProcessTimerOrBlockTask+0x98>)
 800a5b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5ba:	601a      	str	r2, [r3, #0]
 800a5bc:	f3bf 8f4f 	dsb	sy
 800a5c0:	f3bf 8f6f 	isb	sy
}
 800a5c4:	e001      	b.n	800a5ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a5c6:	f7fe febf 	bl	8009348 <xTaskResumeAll>
}
 800a5ca:	bf00      	nop
 800a5cc:	3710      	adds	r7, #16
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	bf00      	nop
 800a5d4:	20002208 	.word	0x20002208
 800a5d8:	2000220c 	.word	0x2000220c
 800a5dc:	e000ed04 	.word	0xe000ed04

0800a5e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b085      	sub	sp, #20
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a5e8:	4b0e      	ldr	r3, [pc, #56]	; (800a624 <prvGetNextExpireTime+0x44>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d101      	bne.n	800a5f6 <prvGetNextExpireTime+0x16>
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	e000      	b.n	800a5f8 <prvGetNextExpireTime+0x18>
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d105      	bne.n	800a610 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a604:	4b07      	ldr	r3, [pc, #28]	; (800a624 <prvGetNextExpireTime+0x44>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	68db      	ldr	r3, [r3, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	60fb      	str	r3, [r7, #12]
 800a60e:	e001      	b.n	800a614 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a610:	2300      	movs	r3, #0
 800a612:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a614:	68fb      	ldr	r3, [r7, #12]
}
 800a616:	4618      	mov	r0, r3
 800a618:	3714      	adds	r7, #20
 800a61a:	46bd      	mov	sp, r7
 800a61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a620:	4770      	bx	lr
 800a622:	bf00      	nop
 800a624:	20002204 	.word	0x20002204

0800a628 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a630:	f7fe ff2a 	bl	8009488 <xTaskGetTickCount>
 800a634:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a636:	4b0b      	ldr	r3, [pc, #44]	; (800a664 <prvSampleTimeNow+0x3c>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	68fa      	ldr	r2, [r7, #12]
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d205      	bcs.n	800a64c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a640:	f000 f93c 	bl	800a8bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2201      	movs	r2, #1
 800a648:	601a      	str	r2, [r3, #0]
 800a64a:	e002      	b.n	800a652 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2200      	movs	r2, #0
 800a650:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a652:	4a04      	ldr	r2, [pc, #16]	; (800a664 <prvSampleTimeNow+0x3c>)
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a658:	68fb      	ldr	r3, [r7, #12]
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3710      	adds	r7, #16
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}
 800a662:	bf00      	nop
 800a664:	20002214 	.word	0x20002214

0800a668 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b086      	sub	sp, #24
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	60f8      	str	r0, [r7, #12]
 800a670:	60b9      	str	r1, [r7, #8]
 800a672:	607a      	str	r2, [r7, #4]
 800a674:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a676:	2300      	movs	r3, #0
 800a678:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	68ba      	ldr	r2, [r7, #8]
 800a67e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	68fa      	ldr	r2, [r7, #12]
 800a684:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a686:	68ba      	ldr	r2, [r7, #8]
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d812      	bhi.n	800a6b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	1ad2      	subs	r2, r2, r3
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	699b      	ldr	r3, [r3, #24]
 800a698:	429a      	cmp	r2, r3
 800a69a:	d302      	bcc.n	800a6a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a69c:	2301      	movs	r3, #1
 800a69e:	617b      	str	r3, [r7, #20]
 800a6a0:	e01b      	b.n	800a6da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a6a2:	4b10      	ldr	r3, [pc, #64]	; (800a6e4 <prvInsertTimerInActiveList+0x7c>)
 800a6a4:	681a      	ldr	r2, [r3, #0]
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	3304      	adds	r3, #4
 800a6aa:	4619      	mov	r1, r3
 800a6ac:	4610      	mov	r0, r2
 800a6ae:	f7fd fb02 	bl	8007cb6 <vListInsert>
 800a6b2:	e012      	b.n	800a6da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a6b4:	687a      	ldr	r2, [r7, #4]
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d206      	bcs.n	800a6ca <prvInsertTimerInActiveList+0x62>
 800a6bc:	68ba      	ldr	r2, [r7, #8]
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d302      	bcc.n	800a6ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	617b      	str	r3, [r7, #20]
 800a6c8:	e007      	b.n	800a6da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a6ca:	4b07      	ldr	r3, [pc, #28]	; (800a6e8 <prvInsertTimerInActiveList+0x80>)
 800a6cc:	681a      	ldr	r2, [r3, #0]
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	3304      	adds	r3, #4
 800a6d2:	4619      	mov	r1, r3
 800a6d4:	4610      	mov	r0, r2
 800a6d6:	f7fd faee 	bl	8007cb6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a6da:	697b      	ldr	r3, [r7, #20]
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3718      	adds	r7, #24
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}
 800a6e4:	20002208 	.word	0x20002208
 800a6e8:	20002204 	.word	0x20002204

0800a6ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b08e      	sub	sp, #56	; 0x38
 800a6f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a6f2:	e0d0      	b.n	800a896 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	da1a      	bge.n	800a730 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a6fa:	1d3b      	adds	r3, r7, #4
 800a6fc:	3304      	adds	r3, #4
 800a6fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a702:	2b00      	cmp	r3, #0
 800a704:	d10c      	bne.n	800a720 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800a706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a70a:	b672      	cpsid	i
 800a70c:	f383 8811 	msr	BASEPRI, r3
 800a710:	f3bf 8f6f 	isb	sy
 800a714:	f3bf 8f4f 	dsb	sy
 800a718:	b662      	cpsie	i
 800a71a:	61fb      	str	r3, [r7, #28]
}
 800a71c:	bf00      	nop
 800a71e:	e7fe      	b.n	800a71e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a726:	6850      	ldr	r0, [r2, #4]
 800a728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a72a:	6892      	ldr	r2, [r2, #8]
 800a72c:	4611      	mov	r1, r2
 800a72e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2b00      	cmp	r3, #0
 800a734:	f2c0 80ae 	blt.w	800a894 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a73e:	695b      	ldr	r3, [r3, #20]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d004      	beq.n	800a74e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a746:	3304      	adds	r3, #4
 800a748:	4618      	mov	r0, r3
 800a74a:	f7fd faed 	bl	8007d28 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a74e:	463b      	mov	r3, r7
 800a750:	4618      	mov	r0, r3
 800a752:	f7ff ff69 	bl	800a628 <prvSampleTimeNow>
 800a756:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2b09      	cmp	r3, #9
 800a75c:	f200 809b 	bhi.w	800a896 <prvProcessReceivedCommands+0x1aa>
 800a760:	a201      	add	r2, pc, #4	; (adr r2, 800a768 <prvProcessReceivedCommands+0x7c>)
 800a762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a766:	bf00      	nop
 800a768:	0800a791 	.word	0x0800a791
 800a76c:	0800a791 	.word	0x0800a791
 800a770:	0800a791 	.word	0x0800a791
 800a774:	0800a809 	.word	0x0800a809
 800a778:	0800a81d 	.word	0x0800a81d
 800a77c:	0800a86b 	.word	0x0800a86b
 800a780:	0800a791 	.word	0x0800a791
 800a784:	0800a791 	.word	0x0800a791
 800a788:	0800a809 	.word	0x0800a809
 800a78c:	0800a81d 	.word	0x0800a81d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a792:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a796:	f043 0301 	orr.w	r3, r3, #1
 800a79a:	b2da      	uxtb	r2, r3
 800a79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a79e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a7a2:	68ba      	ldr	r2, [r7, #8]
 800a7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a6:	699b      	ldr	r3, [r3, #24]
 800a7a8:	18d1      	adds	r1, r2, r3
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7b0:	f7ff ff5a 	bl	800a668 <prvInsertTimerInActiveList>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d06d      	beq.n	800a896 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7bc:	6a1b      	ldr	r3, [r3, #32]
 800a7be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7c8:	f003 0304 	and.w	r3, r3, #4
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d062      	beq.n	800a896 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a7d0:	68ba      	ldr	r2, [r7, #8]
 800a7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d4:	699b      	ldr	r3, [r3, #24]
 800a7d6:	441a      	add	r2, r3
 800a7d8:	2300      	movs	r3, #0
 800a7da:	9300      	str	r3, [sp, #0]
 800a7dc:	2300      	movs	r3, #0
 800a7de:	2100      	movs	r1, #0
 800a7e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7e2:	f7ff fdff 	bl	800a3e4 <xTimerGenericCommand>
 800a7e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a7e8:	6a3b      	ldr	r3, [r7, #32]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d153      	bne.n	800a896 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800a7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f2:	b672      	cpsid	i
 800a7f4:	f383 8811 	msr	BASEPRI, r3
 800a7f8:	f3bf 8f6f 	isb	sy
 800a7fc:	f3bf 8f4f 	dsb	sy
 800a800:	b662      	cpsie	i
 800a802:	61bb      	str	r3, [r7, #24]
}
 800a804:	bf00      	nop
 800a806:	e7fe      	b.n	800a806 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a80e:	f023 0301 	bic.w	r3, r3, #1
 800a812:	b2da      	uxtb	r2, r3
 800a814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a816:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a81a:	e03c      	b.n	800a896 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a81e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a822:	f043 0301 	orr.w	r3, r3, #1
 800a826:	b2da      	uxtb	r2, r3
 800a828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a82a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a82e:	68ba      	ldr	r2, [r7, #8]
 800a830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a832:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a836:	699b      	ldr	r3, [r3, #24]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d10c      	bne.n	800a856 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800a83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a840:	b672      	cpsid	i
 800a842:	f383 8811 	msr	BASEPRI, r3
 800a846:	f3bf 8f6f 	isb	sy
 800a84a:	f3bf 8f4f 	dsb	sy
 800a84e:	b662      	cpsie	i
 800a850:	617b      	str	r3, [r7, #20]
}
 800a852:	bf00      	nop
 800a854:	e7fe      	b.n	800a854 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a858:	699a      	ldr	r2, [r3, #24]
 800a85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a85c:	18d1      	adds	r1, r2, r3
 800a85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a862:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a864:	f7ff ff00 	bl	800a668 <prvInsertTimerInActiveList>
					break;
 800a868:	e015      	b.n	800a896 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a86c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a870:	f003 0302 	and.w	r3, r3, #2
 800a874:	2b00      	cmp	r3, #0
 800a876:	d103      	bne.n	800a880 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800a878:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a87a:	f000 fbed 	bl	800b058 <vPortFree>
 800a87e:	e00a      	b.n	800a896 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a882:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a886:	f023 0301 	bic.w	r3, r3, #1
 800a88a:	b2da      	uxtb	r2, r3
 800a88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a88e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a892:	e000      	b.n	800a896 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a894:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a896:	4b08      	ldr	r3, [pc, #32]	; (800a8b8 <prvProcessReceivedCommands+0x1cc>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	1d39      	adds	r1, r7, #4
 800a89c:	2200      	movs	r2, #0
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7fd fd22 	bl	80082e8 <xQueueReceive>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	f47f af24 	bne.w	800a6f4 <prvProcessReceivedCommands+0x8>
	}
}
 800a8ac:	bf00      	nop
 800a8ae:	bf00      	nop
 800a8b0:	3730      	adds	r7, #48	; 0x30
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}
 800a8b6:	bf00      	nop
 800a8b8:	2000220c 	.word	0x2000220c

0800a8bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b088      	sub	sp, #32
 800a8c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a8c2:	e04a      	b.n	800a95a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a8c4:	4b2e      	ldr	r3, [pc, #184]	; (800a980 <prvSwitchTimerLists+0xc4>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	68db      	ldr	r3, [r3, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8ce:	4b2c      	ldr	r3, [pc, #176]	; (800a980 <prvSwitchTimerLists+0xc4>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	68db      	ldr	r3, [r3, #12]
 800a8d4:	68db      	ldr	r3, [r3, #12]
 800a8d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	3304      	adds	r3, #4
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f7fd fa23 	bl	8007d28 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	6a1b      	ldr	r3, [r3, #32]
 800a8e6:	68f8      	ldr	r0, [r7, #12]
 800a8e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8f0:	f003 0304 	and.w	r3, r3, #4
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d030      	beq.n	800a95a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	699b      	ldr	r3, [r3, #24]
 800a8fc:	693a      	ldr	r2, [r7, #16]
 800a8fe:	4413      	add	r3, r2
 800a900:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a902:	68ba      	ldr	r2, [r7, #8]
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	429a      	cmp	r2, r3
 800a908:	d90e      	bls.n	800a928 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	68ba      	ldr	r2, [r7, #8]
 800a90e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	68fa      	ldr	r2, [r7, #12]
 800a914:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a916:	4b1a      	ldr	r3, [pc, #104]	; (800a980 <prvSwitchTimerLists+0xc4>)
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	3304      	adds	r3, #4
 800a91e:	4619      	mov	r1, r3
 800a920:	4610      	mov	r0, r2
 800a922:	f7fd f9c8 	bl	8007cb6 <vListInsert>
 800a926:	e018      	b.n	800a95a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a928:	2300      	movs	r3, #0
 800a92a:	9300      	str	r3, [sp, #0]
 800a92c:	2300      	movs	r3, #0
 800a92e:	693a      	ldr	r2, [r7, #16]
 800a930:	2100      	movs	r1, #0
 800a932:	68f8      	ldr	r0, [r7, #12]
 800a934:	f7ff fd56 	bl	800a3e4 <xTimerGenericCommand>
 800a938:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d10c      	bne.n	800a95a <prvSwitchTimerLists+0x9e>
	__asm volatile
 800a940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a944:	b672      	cpsid	i
 800a946:	f383 8811 	msr	BASEPRI, r3
 800a94a:	f3bf 8f6f 	isb	sy
 800a94e:	f3bf 8f4f 	dsb	sy
 800a952:	b662      	cpsie	i
 800a954:	603b      	str	r3, [r7, #0]
}
 800a956:	bf00      	nop
 800a958:	e7fe      	b.n	800a958 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a95a:	4b09      	ldr	r3, [pc, #36]	; (800a980 <prvSwitchTimerLists+0xc4>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d1af      	bne.n	800a8c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a964:	4b06      	ldr	r3, [pc, #24]	; (800a980 <prvSwitchTimerLists+0xc4>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a96a:	4b06      	ldr	r3, [pc, #24]	; (800a984 <prvSwitchTimerLists+0xc8>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	4a04      	ldr	r2, [pc, #16]	; (800a980 <prvSwitchTimerLists+0xc4>)
 800a970:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a972:	4a04      	ldr	r2, [pc, #16]	; (800a984 <prvSwitchTimerLists+0xc8>)
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	6013      	str	r3, [r2, #0]
}
 800a978:	bf00      	nop
 800a97a:	3718      	adds	r7, #24
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}
 800a980:	20002204 	.word	0x20002204
 800a984:	20002208 	.word	0x20002208

0800a988 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b082      	sub	sp, #8
 800a98c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a98e:	f000 f96d 	bl	800ac6c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a992:	4b15      	ldr	r3, [pc, #84]	; (800a9e8 <prvCheckForValidListAndQueue+0x60>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d120      	bne.n	800a9dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a99a:	4814      	ldr	r0, [pc, #80]	; (800a9ec <prvCheckForValidListAndQueue+0x64>)
 800a99c:	f7fd f93a 	bl	8007c14 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a9a0:	4813      	ldr	r0, [pc, #76]	; (800a9f0 <prvCheckForValidListAndQueue+0x68>)
 800a9a2:	f7fd f937 	bl	8007c14 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a9a6:	4b13      	ldr	r3, [pc, #76]	; (800a9f4 <prvCheckForValidListAndQueue+0x6c>)
 800a9a8:	4a10      	ldr	r2, [pc, #64]	; (800a9ec <prvCheckForValidListAndQueue+0x64>)
 800a9aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a9ac:	4b12      	ldr	r3, [pc, #72]	; (800a9f8 <prvCheckForValidListAndQueue+0x70>)
 800a9ae:	4a10      	ldr	r2, [pc, #64]	; (800a9f0 <prvCheckForValidListAndQueue+0x68>)
 800a9b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	9300      	str	r3, [sp, #0]
 800a9b6:	4b11      	ldr	r3, [pc, #68]	; (800a9fc <prvCheckForValidListAndQueue+0x74>)
 800a9b8:	4a11      	ldr	r2, [pc, #68]	; (800aa00 <prvCheckForValidListAndQueue+0x78>)
 800a9ba:	2110      	movs	r1, #16
 800a9bc:	200a      	movs	r0, #10
 800a9be:	f7fd fa47 	bl	8007e50 <xQueueGenericCreateStatic>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	4a08      	ldr	r2, [pc, #32]	; (800a9e8 <prvCheckForValidListAndQueue+0x60>)
 800a9c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a9c8:	4b07      	ldr	r3, [pc, #28]	; (800a9e8 <prvCheckForValidListAndQueue+0x60>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d005      	beq.n	800a9dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a9d0:	4b05      	ldr	r3, [pc, #20]	; (800a9e8 <prvCheckForValidListAndQueue+0x60>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	490b      	ldr	r1, [pc, #44]	; (800aa04 <prvCheckForValidListAndQueue+0x7c>)
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f7fd fe7c 	bl	80086d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a9dc:	f000 f97a 	bl	800acd4 <vPortExitCritical>
}
 800a9e0:	bf00      	nop
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	2000220c 	.word	0x2000220c
 800a9ec:	200021dc 	.word	0x200021dc
 800a9f0:	200021f0 	.word	0x200021f0
 800a9f4:	20002204 	.word	0x20002204
 800a9f8:	20002208 	.word	0x20002208
 800a9fc:	200022b8 	.word	0x200022b8
 800aa00:	20002218 	.word	0x20002218
 800aa04:	0800b574 	.word	0x0800b574

0800aa08 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b086      	sub	sp, #24
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d10c      	bne.n	800aa34 <pvTimerGetTimerID+0x2c>
	__asm volatile
 800aa1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa1e:	b672      	cpsid	i
 800aa20:	f383 8811 	msr	BASEPRI, r3
 800aa24:	f3bf 8f6f 	isb	sy
 800aa28:	f3bf 8f4f 	dsb	sy
 800aa2c:	b662      	cpsie	i
 800aa2e:	60fb      	str	r3, [r7, #12]
}
 800aa30:	bf00      	nop
 800aa32:	e7fe      	b.n	800aa32 <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 800aa34:	f000 f91a 	bl	800ac6c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	69db      	ldr	r3, [r3, #28]
 800aa3c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800aa3e:	f000 f949 	bl	800acd4 <vPortExitCritical>

	return pvReturn;
 800aa42:	693b      	ldr	r3, [r7, #16]
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3718      	adds	r7, #24
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b085      	sub	sp, #20
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	60f8      	str	r0, [r7, #12]
 800aa54:	60b9      	str	r1, [r7, #8]
 800aa56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	3b04      	subs	r3, #4
 800aa5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aa64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	3b04      	subs	r3, #4
 800aa6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	f023 0201 	bic.w	r2, r3, #1
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	3b04      	subs	r3, #4
 800aa7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aa7c:	4a0c      	ldr	r2, [pc, #48]	; (800aab0 <pxPortInitialiseStack+0x64>)
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	3b14      	subs	r3, #20
 800aa86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aa88:	687a      	ldr	r2, [r7, #4]
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	3b04      	subs	r3, #4
 800aa92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f06f 0202 	mvn.w	r2, #2
 800aa9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	3b20      	subs	r3, #32
 800aaa0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3714      	adds	r7, #20
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaae:	4770      	bx	lr
 800aab0:	0800aab5 	.word	0x0800aab5

0800aab4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aab4:	b480      	push	{r7}
 800aab6:	b085      	sub	sp, #20
 800aab8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aaba:	2300      	movs	r3, #0
 800aabc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aabe:	4b14      	ldr	r3, [pc, #80]	; (800ab10 <prvTaskExitError+0x5c>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aac6:	d00c      	beq.n	800aae2 <prvTaskExitError+0x2e>
	__asm volatile
 800aac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aacc:	b672      	cpsid	i
 800aace:	f383 8811 	msr	BASEPRI, r3
 800aad2:	f3bf 8f6f 	isb	sy
 800aad6:	f3bf 8f4f 	dsb	sy
 800aada:	b662      	cpsie	i
 800aadc:	60fb      	str	r3, [r7, #12]
}
 800aade:	bf00      	nop
 800aae0:	e7fe      	b.n	800aae0 <prvTaskExitError+0x2c>
	__asm volatile
 800aae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae6:	b672      	cpsid	i
 800aae8:	f383 8811 	msr	BASEPRI, r3
 800aaec:	f3bf 8f6f 	isb	sy
 800aaf0:	f3bf 8f4f 	dsb	sy
 800aaf4:	b662      	cpsie	i
 800aaf6:	60bb      	str	r3, [r7, #8]
}
 800aaf8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aafa:	bf00      	nop
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d0fc      	beq.n	800aafc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ab02:	bf00      	nop
 800ab04:	bf00      	nop
 800ab06:	3714      	adds	r7, #20
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0e:	4770      	bx	lr
 800ab10:	20000010 	.word	0x20000010
	...

0800ab20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ab20:	4b07      	ldr	r3, [pc, #28]	; (800ab40 <pxCurrentTCBConst2>)
 800ab22:	6819      	ldr	r1, [r3, #0]
 800ab24:	6808      	ldr	r0, [r1, #0]
 800ab26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab2a:	f380 8809 	msr	PSP, r0
 800ab2e:	f3bf 8f6f 	isb	sy
 800ab32:	f04f 0000 	mov.w	r0, #0
 800ab36:	f380 8811 	msr	BASEPRI, r0
 800ab3a:	4770      	bx	lr
 800ab3c:	f3af 8000 	nop.w

0800ab40 <pxCurrentTCBConst2>:
 800ab40:	20001cdc 	.word	0x20001cdc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ab44:	bf00      	nop
 800ab46:	bf00      	nop

0800ab48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ab48:	4808      	ldr	r0, [pc, #32]	; (800ab6c <prvPortStartFirstTask+0x24>)
 800ab4a:	6800      	ldr	r0, [r0, #0]
 800ab4c:	6800      	ldr	r0, [r0, #0]
 800ab4e:	f380 8808 	msr	MSP, r0
 800ab52:	f04f 0000 	mov.w	r0, #0
 800ab56:	f380 8814 	msr	CONTROL, r0
 800ab5a:	b662      	cpsie	i
 800ab5c:	b661      	cpsie	f
 800ab5e:	f3bf 8f4f 	dsb	sy
 800ab62:	f3bf 8f6f 	isb	sy
 800ab66:	df00      	svc	0
 800ab68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ab6a:	bf00      	nop
 800ab6c:	e000ed08 	.word	0xe000ed08

0800ab70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b084      	sub	sp, #16
 800ab74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ab76:	4b37      	ldr	r3, [pc, #220]	; (800ac54 <xPortStartScheduler+0xe4>)
 800ab78:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	781b      	ldrb	r3, [r3, #0]
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	22ff      	movs	r2, #255	; 0xff
 800ab86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	b2db      	uxtb	r3, r3
 800ab8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ab90:	78fb      	ldrb	r3, [r7, #3]
 800ab92:	b2db      	uxtb	r3, r3
 800ab94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ab98:	b2da      	uxtb	r2, r3
 800ab9a:	4b2f      	ldr	r3, [pc, #188]	; (800ac58 <xPortStartScheduler+0xe8>)
 800ab9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ab9e:	4b2f      	ldr	r3, [pc, #188]	; (800ac5c <xPortStartScheduler+0xec>)
 800aba0:	2207      	movs	r2, #7
 800aba2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aba4:	e009      	b.n	800abba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800aba6:	4b2d      	ldr	r3, [pc, #180]	; (800ac5c <xPortStartScheduler+0xec>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	3b01      	subs	r3, #1
 800abac:	4a2b      	ldr	r2, [pc, #172]	; (800ac5c <xPortStartScheduler+0xec>)
 800abae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800abb0:	78fb      	ldrb	r3, [r7, #3]
 800abb2:	b2db      	uxtb	r3, r3
 800abb4:	005b      	lsls	r3, r3, #1
 800abb6:	b2db      	uxtb	r3, r3
 800abb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800abba:	78fb      	ldrb	r3, [r7, #3]
 800abbc:	b2db      	uxtb	r3, r3
 800abbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abc2:	2b80      	cmp	r3, #128	; 0x80
 800abc4:	d0ef      	beq.n	800aba6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800abc6:	4b25      	ldr	r3, [pc, #148]	; (800ac5c <xPortStartScheduler+0xec>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f1c3 0307 	rsb	r3, r3, #7
 800abce:	2b04      	cmp	r3, #4
 800abd0:	d00c      	beq.n	800abec <xPortStartScheduler+0x7c>
	__asm volatile
 800abd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd6:	b672      	cpsid	i
 800abd8:	f383 8811 	msr	BASEPRI, r3
 800abdc:	f3bf 8f6f 	isb	sy
 800abe0:	f3bf 8f4f 	dsb	sy
 800abe4:	b662      	cpsie	i
 800abe6:	60bb      	str	r3, [r7, #8]
}
 800abe8:	bf00      	nop
 800abea:	e7fe      	b.n	800abea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800abec:	4b1b      	ldr	r3, [pc, #108]	; (800ac5c <xPortStartScheduler+0xec>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	021b      	lsls	r3, r3, #8
 800abf2:	4a1a      	ldr	r2, [pc, #104]	; (800ac5c <xPortStartScheduler+0xec>)
 800abf4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800abf6:	4b19      	ldr	r3, [pc, #100]	; (800ac5c <xPortStartScheduler+0xec>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800abfe:	4a17      	ldr	r2, [pc, #92]	; (800ac5c <xPortStartScheduler+0xec>)
 800ac00:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	b2da      	uxtb	r2, r3
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ac0a:	4b15      	ldr	r3, [pc, #84]	; (800ac60 <xPortStartScheduler+0xf0>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	4a14      	ldr	r2, [pc, #80]	; (800ac60 <xPortStartScheduler+0xf0>)
 800ac10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ac14:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ac16:	4b12      	ldr	r3, [pc, #72]	; (800ac60 <xPortStartScheduler+0xf0>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4a11      	ldr	r2, [pc, #68]	; (800ac60 <xPortStartScheduler+0xf0>)
 800ac1c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ac20:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ac22:	f000 f8dd 	bl	800ade0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ac26:	4b0f      	ldr	r3, [pc, #60]	; (800ac64 <xPortStartScheduler+0xf4>)
 800ac28:	2200      	movs	r2, #0
 800ac2a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ac2c:	f000 f8fc 	bl	800ae28 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ac30:	4b0d      	ldr	r3, [pc, #52]	; (800ac68 <xPortStartScheduler+0xf8>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4a0c      	ldr	r2, [pc, #48]	; (800ac68 <xPortStartScheduler+0xf8>)
 800ac36:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ac3a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ac3c:	f7ff ff84 	bl	800ab48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ac40:	f7fe fd00 	bl	8009644 <vTaskSwitchContext>
	prvTaskExitError();
 800ac44:	f7ff ff36 	bl	800aab4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ac48:	2300      	movs	r3, #0
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3710      	adds	r7, #16
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}
 800ac52:	bf00      	nop
 800ac54:	e000e400 	.word	0xe000e400
 800ac58:	20002308 	.word	0x20002308
 800ac5c:	2000230c 	.word	0x2000230c
 800ac60:	e000ed20 	.word	0xe000ed20
 800ac64:	20000010 	.word	0x20000010
 800ac68:	e000ef34 	.word	0xe000ef34

0800ac6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b083      	sub	sp, #12
 800ac70:	af00      	add	r7, sp, #0
	__asm volatile
 800ac72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac76:	b672      	cpsid	i
 800ac78:	f383 8811 	msr	BASEPRI, r3
 800ac7c:	f3bf 8f6f 	isb	sy
 800ac80:	f3bf 8f4f 	dsb	sy
 800ac84:	b662      	cpsie	i
 800ac86:	607b      	str	r3, [r7, #4]
}
 800ac88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ac8a:	4b10      	ldr	r3, [pc, #64]	; (800accc <vPortEnterCritical+0x60>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	3301      	adds	r3, #1
 800ac90:	4a0e      	ldr	r2, [pc, #56]	; (800accc <vPortEnterCritical+0x60>)
 800ac92:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ac94:	4b0d      	ldr	r3, [pc, #52]	; (800accc <vPortEnterCritical+0x60>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d111      	bne.n	800acc0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ac9c:	4b0c      	ldr	r3, [pc, #48]	; (800acd0 <vPortEnterCritical+0x64>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	b2db      	uxtb	r3, r3
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d00c      	beq.n	800acc0 <vPortEnterCritical+0x54>
	__asm volatile
 800aca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acaa:	b672      	cpsid	i
 800acac:	f383 8811 	msr	BASEPRI, r3
 800acb0:	f3bf 8f6f 	isb	sy
 800acb4:	f3bf 8f4f 	dsb	sy
 800acb8:	b662      	cpsie	i
 800acba:	603b      	str	r3, [r7, #0]
}
 800acbc:	bf00      	nop
 800acbe:	e7fe      	b.n	800acbe <vPortEnterCritical+0x52>
	}
}
 800acc0:	bf00      	nop
 800acc2:	370c      	adds	r7, #12
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr
 800accc:	20000010 	.word	0x20000010
 800acd0:	e000ed04 	.word	0xe000ed04

0800acd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800acd4:	b480      	push	{r7}
 800acd6:	b083      	sub	sp, #12
 800acd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800acda:	4b13      	ldr	r3, [pc, #76]	; (800ad28 <vPortExitCritical+0x54>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d10c      	bne.n	800acfc <vPortExitCritical+0x28>
	__asm volatile
 800ace2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace6:	b672      	cpsid	i
 800ace8:	f383 8811 	msr	BASEPRI, r3
 800acec:	f3bf 8f6f 	isb	sy
 800acf0:	f3bf 8f4f 	dsb	sy
 800acf4:	b662      	cpsie	i
 800acf6:	607b      	str	r3, [r7, #4]
}
 800acf8:	bf00      	nop
 800acfa:	e7fe      	b.n	800acfa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800acfc:	4b0a      	ldr	r3, [pc, #40]	; (800ad28 <vPortExitCritical+0x54>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	3b01      	subs	r3, #1
 800ad02:	4a09      	ldr	r2, [pc, #36]	; (800ad28 <vPortExitCritical+0x54>)
 800ad04:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ad06:	4b08      	ldr	r3, [pc, #32]	; (800ad28 <vPortExitCritical+0x54>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d105      	bne.n	800ad1a <vPortExitCritical+0x46>
 800ad0e:	2300      	movs	r3, #0
 800ad10:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	f383 8811 	msr	BASEPRI, r3
}
 800ad18:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ad1a:	bf00      	nop
 800ad1c:	370c      	adds	r7, #12
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad24:	4770      	bx	lr
 800ad26:	bf00      	nop
 800ad28:	20000010 	.word	0x20000010
 800ad2c:	00000000 	.word	0x00000000

0800ad30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ad30:	f3ef 8009 	mrs	r0, PSP
 800ad34:	f3bf 8f6f 	isb	sy
 800ad38:	4b15      	ldr	r3, [pc, #84]	; (800ad90 <pxCurrentTCBConst>)
 800ad3a:	681a      	ldr	r2, [r3, #0]
 800ad3c:	f01e 0f10 	tst.w	lr, #16
 800ad40:	bf08      	it	eq
 800ad42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ad46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad4a:	6010      	str	r0, [r2, #0]
 800ad4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ad50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ad54:	b672      	cpsid	i
 800ad56:	f380 8811 	msr	BASEPRI, r0
 800ad5a:	f3bf 8f4f 	dsb	sy
 800ad5e:	f3bf 8f6f 	isb	sy
 800ad62:	b662      	cpsie	i
 800ad64:	f7fe fc6e 	bl	8009644 <vTaskSwitchContext>
 800ad68:	f04f 0000 	mov.w	r0, #0
 800ad6c:	f380 8811 	msr	BASEPRI, r0
 800ad70:	bc09      	pop	{r0, r3}
 800ad72:	6819      	ldr	r1, [r3, #0]
 800ad74:	6808      	ldr	r0, [r1, #0]
 800ad76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad7a:	f01e 0f10 	tst.w	lr, #16
 800ad7e:	bf08      	it	eq
 800ad80:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ad84:	f380 8809 	msr	PSP, r0
 800ad88:	f3bf 8f6f 	isb	sy
 800ad8c:	4770      	bx	lr
 800ad8e:	bf00      	nop

0800ad90 <pxCurrentTCBConst>:
 800ad90:	20001cdc 	.word	0x20001cdc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ad94:	bf00      	nop
 800ad96:	bf00      	nop

0800ad98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b082      	sub	sp, #8
 800ad9c:	af00      	add	r7, sp, #0
	__asm volatile
 800ad9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada2:	b672      	cpsid	i
 800ada4:	f383 8811 	msr	BASEPRI, r3
 800ada8:	f3bf 8f6f 	isb	sy
 800adac:	f3bf 8f4f 	dsb	sy
 800adb0:	b662      	cpsie	i
 800adb2:	607b      	str	r3, [r7, #4]
}
 800adb4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800adb6:	f7fe fb89 	bl	80094cc <xTaskIncrementTick>
 800adba:	4603      	mov	r3, r0
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d003      	beq.n	800adc8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800adc0:	4b06      	ldr	r3, [pc, #24]	; (800addc <SysTick_Handler+0x44>)
 800adc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adc6:	601a      	str	r2, [r3, #0]
 800adc8:	2300      	movs	r3, #0
 800adca:	603b      	str	r3, [r7, #0]
	__asm volatile
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	f383 8811 	msr	BASEPRI, r3
}
 800add2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800add4:	bf00      	nop
 800add6:	3708      	adds	r7, #8
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}
 800addc:	e000ed04 	.word	0xe000ed04

0800ade0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ade0:	b480      	push	{r7}
 800ade2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ade4:	4b0b      	ldr	r3, [pc, #44]	; (800ae14 <vPortSetupTimerInterrupt+0x34>)
 800ade6:	2200      	movs	r2, #0
 800ade8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800adea:	4b0b      	ldr	r3, [pc, #44]	; (800ae18 <vPortSetupTimerInterrupt+0x38>)
 800adec:	2200      	movs	r2, #0
 800adee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800adf0:	4b0a      	ldr	r3, [pc, #40]	; (800ae1c <vPortSetupTimerInterrupt+0x3c>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4a0a      	ldr	r2, [pc, #40]	; (800ae20 <vPortSetupTimerInterrupt+0x40>)
 800adf6:	fba2 2303 	umull	r2, r3, r2, r3
 800adfa:	099b      	lsrs	r3, r3, #6
 800adfc:	4a09      	ldr	r2, [pc, #36]	; (800ae24 <vPortSetupTimerInterrupt+0x44>)
 800adfe:	3b01      	subs	r3, #1
 800ae00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ae02:	4b04      	ldr	r3, [pc, #16]	; (800ae14 <vPortSetupTimerInterrupt+0x34>)
 800ae04:	2207      	movs	r2, #7
 800ae06:	601a      	str	r2, [r3, #0]
}
 800ae08:	bf00      	nop
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae10:	4770      	bx	lr
 800ae12:	bf00      	nop
 800ae14:	e000e010 	.word	0xe000e010
 800ae18:	e000e018 	.word	0xe000e018
 800ae1c:	20000004 	.word	0x20000004
 800ae20:	10624dd3 	.word	0x10624dd3
 800ae24:	e000e014 	.word	0xe000e014

0800ae28 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ae28:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ae38 <vPortEnableVFP+0x10>
 800ae2c:	6801      	ldr	r1, [r0, #0]
 800ae2e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ae32:	6001      	str	r1, [r0, #0]
 800ae34:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ae36:	bf00      	nop
 800ae38:	e000ed88 	.word	0xe000ed88

0800ae3c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b085      	sub	sp, #20
 800ae40:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ae42:	f3ef 8305 	mrs	r3, IPSR
 800ae46:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	2b0f      	cmp	r3, #15
 800ae4c:	d916      	bls.n	800ae7c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ae4e:	4a19      	ldr	r2, [pc, #100]	; (800aeb4 <vPortValidateInterruptPriority+0x78>)
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	4413      	add	r3, r2
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ae58:	4b17      	ldr	r3, [pc, #92]	; (800aeb8 <vPortValidateInterruptPriority+0x7c>)
 800ae5a:	781b      	ldrb	r3, [r3, #0]
 800ae5c:	7afa      	ldrb	r2, [r7, #11]
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	d20c      	bcs.n	800ae7c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800ae62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae66:	b672      	cpsid	i
 800ae68:	f383 8811 	msr	BASEPRI, r3
 800ae6c:	f3bf 8f6f 	isb	sy
 800ae70:	f3bf 8f4f 	dsb	sy
 800ae74:	b662      	cpsie	i
 800ae76:	607b      	str	r3, [r7, #4]
}
 800ae78:	bf00      	nop
 800ae7a:	e7fe      	b.n	800ae7a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ae7c:	4b0f      	ldr	r3, [pc, #60]	; (800aebc <vPortValidateInterruptPriority+0x80>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ae84:	4b0e      	ldr	r3, [pc, #56]	; (800aec0 <vPortValidateInterruptPriority+0x84>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d90c      	bls.n	800aea6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800ae8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae90:	b672      	cpsid	i
 800ae92:	f383 8811 	msr	BASEPRI, r3
 800ae96:	f3bf 8f6f 	isb	sy
 800ae9a:	f3bf 8f4f 	dsb	sy
 800ae9e:	b662      	cpsie	i
 800aea0:	603b      	str	r3, [r7, #0]
}
 800aea2:	bf00      	nop
 800aea4:	e7fe      	b.n	800aea4 <vPortValidateInterruptPriority+0x68>
	}
 800aea6:	bf00      	nop
 800aea8:	3714      	adds	r7, #20
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb0:	4770      	bx	lr
 800aeb2:	bf00      	nop
 800aeb4:	e000e3f0 	.word	0xe000e3f0
 800aeb8:	20002308 	.word	0x20002308
 800aebc:	e000ed0c 	.word	0xe000ed0c
 800aec0:	2000230c 	.word	0x2000230c

0800aec4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b08a      	sub	sp, #40	; 0x28
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aecc:	2300      	movs	r3, #0
 800aece:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aed0:	f7fe fa2c 	bl	800932c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aed4:	4b5b      	ldr	r3, [pc, #364]	; (800b044 <pvPortMalloc+0x180>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d101      	bne.n	800aee0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aedc:	f000 f91a 	bl	800b114 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aee0:	4b59      	ldr	r3, [pc, #356]	; (800b048 <pvPortMalloc+0x184>)
 800aee2:	681a      	ldr	r2, [r3, #0]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	4013      	ands	r3, r2
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	f040 8092 	bne.w	800b012 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d01f      	beq.n	800af34 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800aef4:	2208      	movs	r2, #8
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	4413      	add	r3, r2
 800aefa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f003 0307 	and.w	r3, r3, #7
 800af02:	2b00      	cmp	r3, #0
 800af04:	d016      	beq.n	800af34 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f023 0307 	bic.w	r3, r3, #7
 800af0c:	3308      	adds	r3, #8
 800af0e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f003 0307 	and.w	r3, r3, #7
 800af16:	2b00      	cmp	r3, #0
 800af18:	d00c      	beq.n	800af34 <pvPortMalloc+0x70>
	__asm volatile
 800af1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af1e:	b672      	cpsid	i
 800af20:	f383 8811 	msr	BASEPRI, r3
 800af24:	f3bf 8f6f 	isb	sy
 800af28:	f3bf 8f4f 	dsb	sy
 800af2c:	b662      	cpsie	i
 800af2e:	617b      	str	r3, [r7, #20]
}
 800af30:	bf00      	nop
 800af32:	e7fe      	b.n	800af32 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d06b      	beq.n	800b012 <pvPortMalloc+0x14e>
 800af3a:	4b44      	ldr	r3, [pc, #272]	; (800b04c <pvPortMalloc+0x188>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	687a      	ldr	r2, [r7, #4]
 800af40:	429a      	cmp	r2, r3
 800af42:	d866      	bhi.n	800b012 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800af44:	4b42      	ldr	r3, [pc, #264]	; (800b050 <pvPortMalloc+0x18c>)
 800af46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800af48:	4b41      	ldr	r3, [pc, #260]	; (800b050 <pvPortMalloc+0x18c>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af4e:	e004      	b.n	800af5a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800af50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800af54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	687a      	ldr	r2, [r7, #4]
 800af60:	429a      	cmp	r2, r3
 800af62:	d903      	bls.n	800af6c <pvPortMalloc+0xa8>
 800af64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d1f1      	bne.n	800af50 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800af6c:	4b35      	ldr	r3, [pc, #212]	; (800b044 <pvPortMalloc+0x180>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af72:	429a      	cmp	r2, r3
 800af74:	d04d      	beq.n	800b012 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800af76:	6a3b      	ldr	r3, [r7, #32]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	2208      	movs	r2, #8
 800af7c:	4413      	add	r3, r2
 800af7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800af80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af82:	681a      	ldr	r2, [r3, #0]
 800af84:	6a3b      	ldr	r3, [r7, #32]
 800af86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800af88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8a:	685a      	ldr	r2, [r3, #4]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	1ad2      	subs	r2, r2, r3
 800af90:	2308      	movs	r3, #8
 800af92:	005b      	lsls	r3, r3, #1
 800af94:	429a      	cmp	r2, r3
 800af96:	d921      	bls.n	800afdc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800af98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	4413      	add	r3, r2
 800af9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800afa0:	69bb      	ldr	r3, [r7, #24]
 800afa2:	f003 0307 	and.w	r3, r3, #7
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d00c      	beq.n	800afc4 <pvPortMalloc+0x100>
	__asm volatile
 800afaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afae:	b672      	cpsid	i
 800afb0:	f383 8811 	msr	BASEPRI, r3
 800afb4:	f3bf 8f6f 	isb	sy
 800afb8:	f3bf 8f4f 	dsb	sy
 800afbc:	b662      	cpsie	i
 800afbe:	613b      	str	r3, [r7, #16]
}
 800afc0:	bf00      	nop
 800afc2:	e7fe      	b.n	800afc2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800afc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc6:	685a      	ldr	r2, [r3, #4]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	1ad2      	subs	r2, r2, r3
 800afcc:	69bb      	ldr	r3, [r7, #24]
 800afce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800afd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd2:	687a      	ldr	r2, [r7, #4]
 800afd4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800afd6:	69b8      	ldr	r0, [r7, #24]
 800afd8:	f000 f8fe 	bl	800b1d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800afdc:	4b1b      	ldr	r3, [pc, #108]	; (800b04c <pvPortMalloc+0x188>)
 800afde:	681a      	ldr	r2, [r3, #0]
 800afe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	1ad3      	subs	r3, r2, r3
 800afe6:	4a19      	ldr	r2, [pc, #100]	; (800b04c <pvPortMalloc+0x188>)
 800afe8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800afea:	4b18      	ldr	r3, [pc, #96]	; (800b04c <pvPortMalloc+0x188>)
 800afec:	681a      	ldr	r2, [r3, #0]
 800afee:	4b19      	ldr	r3, [pc, #100]	; (800b054 <pvPortMalloc+0x190>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d203      	bcs.n	800affe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aff6:	4b15      	ldr	r3, [pc, #84]	; (800b04c <pvPortMalloc+0x188>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	4a16      	ldr	r2, [pc, #88]	; (800b054 <pvPortMalloc+0x190>)
 800affc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800affe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b000:	685a      	ldr	r2, [r3, #4]
 800b002:	4b11      	ldr	r3, [pc, #68]	; (800b048 <pvPortMalloc+0x184>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	431a      	orrs	r2, r3
 800b008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b00a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b00e:	2200      	movs	r2, #0
 800b010:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b012:	f7fe f999 	bl	8009348 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b016:	69fb      	ldr	r3, [r7, #28]
 800b018:	f003 0307 	and.w	r3, r3, #7
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d00c      	beq.n	800b03a <pvPortMalloc+0x176>
	__asm volatile
 800b020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b024:	b672      	cpsid	i
 800b026:	f383 8811 	msr	BASEPRI, r3
 800b02a:	f3bf 8f6f 	isb	sy
 800b02e:	f3bf 8f4f 	dsb	sy
 800b032:	b662      	cpsie	i
 800b034:	60fb      	str	r3, [r7, #12]
}
 800b036:	bf00      	nop
 800b038:	e7fe      	b.n	800b038 <pvPortMalloc+0x174>
	return pvReturn;
 800b03a:	69fb      	ldr	r3, [r7, #28]
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3728      	adds	r7, #40	; 0x28
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}
 800b044:	20005f18 	.word	0x20005f18
 800b048:	20005f24 	.word	0x20005f24
 800b04c:	20005f1c 	.word	0x20005f1c
 800b050:	20005f10 	.word	0x20005f10
 800b054:	20005f20 	.word	0x20005f20

0800b058 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b086      	sub	sp, #24
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d04c      	beq.n	800b104 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b06a:	2308      	movs	r3, #8
 800b06c:	425b      	negs	r3, r3
 800b06e:	697a      	ldr	r2, [r7, #20]
 800b070:	4413      	add	r3, r2
 800b072:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b078:	693b      	ldr	r3, [r7, #16]
 800b07a:	685a      	ldr	r2, [r3, #4]
 800b07c:	4b23      	ldr	r3, [pc, #140]	; (800b10c <vPortFree+0xb4>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4013      	ands	r3, r2
 800b082:	2b00      	cmp	r3, #0
 800b084:	d10c      	bne.n	800b0a0 <vPortFree+0x48>
	__asm volatile
 800b086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b08a:	b672      	cpsid	i
 800b08c:	f383 8811 	msr	BASEPRI, r3
 800b090:	f3bf 8f6f 	isb	sy
 800b094:	f3bf 8f4f 	dsb	sy
 800b098:	b662      	cpsie	i
 800b09a:	60fb      	str	r3, [r7, #12]
}
 800b09c:	bf00      	nop
 800b09e:	e7fe      	b.n	800b09e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d00c      	beq.n	800b0c2 <vPortFree+0x6a>
	__asm volatile
 800b0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ac:	b672      	cpsid	i
 800b0ae:	f383 8811 	msr	BASEPRI, r3
 800b0b2:	f3bf 8f6f 	isb	sy
 800b0b6:	f3bf 8f4f 	dsb	sy
 800b0ba:	b662      	cpsie	i
 800b0bc:	60bb      	str	r3, [r7, #8]
}
 800b0be:	bf00      	nop
 800b0c0:	e7fe      	b.n	800b0c0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	685a      	ldr	r2, [r3, #4]
 800b0c6:	4b11      	ldr	r3, [pc, #68]	; (800b10c <vPortFree+0xb4>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	4013      	ands	r3, r2
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d019      	beq.n	800b104 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d115      	bne.n	800b104 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	685a      	ldr	r2, [r3, #4]
 800b0dc:	4b0b      	ldr	r3, [pc, #44]	; (800b10c <vPortFree+0xb4>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	43db      	mvns	r3, r3
 800b0e2:	401a      	ands	r2, r3
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b0e8:	f7fe f920 	bl	800932c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	685a      	ldr	r2, [r3, #4]
 800b0f0:	4b07      	ldr	r3, [pc, #28]	; (800b110 <vPortFree+0xb8>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	4413      	add	r3, r2
 800b0f6:	4a06      	ldr	r2, [pc, #24]	; (800b110 <vPortFree+0xb8>)
 800b0f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b0fa:	6938      	ldr	r0, [r7, #16]
 800b0fc:	f000 f86c 	bl	800b1d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b100:	f7fe f922 	bl	8009348 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b104:	bf00      	nop
 800b106:	3718      	adds	r7, #24
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}
 800b10c:	20005f24 	.word	0x20005f24
 800b110:	20005f1c 	.word	0x20005f1c

0800b114 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b114:	b480      	push	{r7}
 800b116:	b085      	sub	sp, #20
 800b118:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b11a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b11e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b120:	4b27      	ldr	r3, [pc, #156]	; (800b1c0 <prvHeapInit+0xac>)
 800b122:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	f003 0307 	and.w	r3, r3, #7
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d00c      	beq.n	800b148 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	3307      	adds	r3, #7
 800b132:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f023 0307 	bic.w	r3, r3, #7
 800b13a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b13c:	68ba      	ldr	r2, [r7, #8]
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	1ad3      	subs	r3, r2, r3
 800b142:	4a1f      	ldr	r2, [pc, #124]	; (800b1c0 <prvHeapInit+0xac>)
 800b144:	4413      	add	r3, r2
 800b146:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b14c:	4a1d      	ldr	r2, [pc, #116]	; (800b1c4 <prvHeapInit+0xb0>)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b152:	4b1c      	ldr	r3, [pc, #112]	; (800b1c4 <prvHeapInit+0xb0>)
 800b154:	2200      	movs	r2, #0
 800b156:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	68ba      	ldr	r2, [r7, #8]
 800b15c:	4413      	add	r3, r2
 800b15e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b160:	2208      	movs	r2, #8
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	1a9b      	subs	r3, r3, r2
 800b166:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f023 0307 	bic.w	r3, r3, #7
 800b16e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	4a15      	ldr	r2, [pc, #84]	; (800b1c8 <prvHeapInit+0xb4>)
 800b174:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b176:	4b14      	ldr	r3, [pc, #80]	; (800b1c8 <prvHeapInit+0xb4>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	2200      	movs	r2, #0
 800b17c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b17e:	4b12      	ldr	r3, [pc, #72]	; (800b1c8 <prvHeapInit+0xb4>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	2200      	movs	r2, #0
 800b184:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	68fa      	ldr	r2, [r7, #12]
 800b18e:	1ad2      	subs	r2, r2, r3
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b194:	4b0c      	ldr	r3, [pc, #48]	; (800b1c8 <prvHeapInit+0xb4>)
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	4a0a      	ldr	r2, [pc, #40]	; (800b1cc <prvHeapInit+0xb8>)
 800b1a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	4a09      	ldr	r2, [pc, #36]	; (800b1d0 <prvHeapInit+0xbc>)
 800b1aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b1ac:	4b09      	ldr	r3, [pc, #36]	; (800b1d4 <prvHeapInit+0xc0>)
 800b1ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b1b2:	601a      	str	r2, [r3, #0]
}
 800b1b4:	bf00      	nop
 800b1b6:	3714      	adds	r7, #20
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr
 800b1c0:	20002310 	.word	0x20002310
 800b1c4:	20005f10 	.word	0x20005f10
 800b1c8:	20005f18 	.word	0x20005f18
 800b1cc:	20005f20 	.word	0x20005f20
 800b1d0:	20005f1c 	.word	0x20005f1c
 800b1d4:	20005f24 	.word	0x20005f24

0800b1d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b085      	sub	sp, #20
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b1e0:	4b28      	ldr	r3, [pc, #160]	; (800b284 <prvInsertBlockIntoFreeList+0xac>)
 800b1e2:	60fb      	str	r3, [r7, #12]
 800b1e4:	e002      	b.n	800b1ec <prvInsertBlockIntoFreeList+0x14>
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	60fb      	str	r3, [r7, #12]
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	687a      	ldr	r2, [r7, #4]
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d8f7      	bhi.n	800b1e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	68ba      	ldr	r2, [r7, #8]
 800b200:	4413      	add	r3, r2
 800b202:	687a      	ldr	r2, [r7, #4]
 800b204:	429a      	cmp	r2, r3
 800b206:	d108      	bne.n	800b21a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	685a      	ldr	r2, [r3, #4]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	685b      	ldr	r3, [r3, #4]
 800b210:	441a      	add	r2, r3
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	685b      	ldr	r3, [r3, #4]
 800b222:	68ba      	ldr	r2, [r7, #8]
 800b224:	441a      	add	r2, r3
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d118      	bne.n	800b260 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	681a      	ldr	r2, [r3, #0]
 800b232:	4b15      	ldr	r3, [pc, #84]	; (800b288 <prvInsertBlockIntoFreeList+0xb0>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	429a      	cmp	r2, r3
 800b238:	d00d      	beq.n	800b256 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	685a      	ldr	r2, [r3, #4]
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	441a      	add	r2, r3
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	681a      	ldr	r2, [r3, #0]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	601a      	str	r2, [r3, #0]
 800b254:	e008      	b.n	800b268 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b256:	4b0c      	ldr	r3, [pc, #48]	; (800b288 <prvInsertBlockIntoFreeList+0xb0>)
 800b258:	681a      	ldr	r2, [r3, #0]
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	601a      	str	r2, [r3, #0]
 800b25e:	e003      	b.n	800b268 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	681a      	ldr	r2, [r3, #0]
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b268:	68fa      	ldr	r2, [r7, #12]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d002      	beq.n	800b276 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	687a      	ldr	r2, [r7, #4]
 800b274:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b276:	bf00      	nop
 800b278:	3714      	adds	r7, #20
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr
 800b282:	bf00      	nop
 800b284:	20005f10 	.word	0x20005f10
 800b288:	20005f18 	.word	0x20005f18

0800b28c <__libc_init_array>:
 800b28c:	b570      	push	{r4, r5, r6, lr}
 800b28e:	4d0d      	ldr	r5, [pc, #52]	; (800b2c4 <__libc_init_array+0x38>)
 800b290:	4c0d      	ldr	r4, [pc, #52]	; (800b2c8 <__libc_init_array+0x3c>)
 800b292:	1b64      	subs	r4, r4, r5
 800b294:	10a4      	asrs	r4, r4, #2
 800b296:	2600      	movs	r6, #0
 800b298:	42a6      	cmp	r6, r4
 800b29a:	d109      	bne.n	800b2b0 <__libc_init_array+0x24>
 800b29c:	4d0b      	ldr	r5, [pc, #44]	; (800b2cc <__libc_init_array+0x40>)
 800b29e:	4c0c      	ldr	r4, [pc, #48]	; (800b2d0 <__libc_init_array+0x44>)
 800b2a0:	f000 f8f2 	bl	800b488 <_init>
 800b2a4:	1b64      	subs	r4, r4, r5
 800b2a6:	10a4      	asrs	r4, r4, #2
 800b2a8:	2600      	movs	r6, #0
 800b2aa:	42a6      	cmp	r6, r4
 800b2ac:	d105      	bne.n	800b2ba <__libc_init_array+0x2e>
 800b2ae:	bd70      	pop	{r4, r5, r6, pc}
 800b2b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2b4:	4798      	blx	r3
 800b2b6:	3601      	adds	r6, #1
 800b2b8:	e7ee      	b.n	800b298 <__libc_init_array+0xc>
 800b2ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2be:	4798      	blx	r3
 800b2c0:	3601      	adds	r6, #1
 800b2c2:	e7f2      	b.n	800b2aa <__libc_init_array+0x1e>
 800b2c4:	0800b698 	.word	0x0800b698
 800b2c8:	0800b698 	.word	0x0800b698
 800b2cc:	0800b698 	.word	0x0800b698
 800b2d0:	0800b69c 	.word	0x0800b69c

0800b2d4 <__retarget_lock_acquire_recursive>:
 800b2d4:	4770      	bx	lr

0800b2d6 <__retarget_lock_release_recursive>:
 800b2d6:	4770      	bx	lr

0800b2d8 <memcpy>:
 800b2d8:	440a      	add	r2, r1
 800b2da:	4291      	cmp	r1, r2
 800b2dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b2e0:	d100      	bne.n	800b2e4 <memcpy+0xc>
 800b2e2:	4770      	bx	lr
 800b2e4:	b510      	push	{r4, lr}
 800b2e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2ee:	4291      	cmp	r1, r2
 800b2f0:	d1f9      	bne.n	800b2e6 <memcpy+0xe>
 800b2f2:	bd10      	pop	{r4, pc}

0800b2f4 <memset>:
 800b2f4:	4402      	add	r2, r0
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d100      	bne.n	800b2fe <memset+0xa>
 800b2fc:	4770      	bx	lr
 800b2fe:	f803 1b01 	strb.w	r1, [r3], #1
 800b302:	e7f9      	b.n	800b2f8 <memset+0x4>

0800b304 <cleanup_glue>:
 800b304:	b538      	push	{r3, r4, r5, lr}
 800b306:	460c      	mov	r4, r1
 800b308:	6809      	ldr	r1, [r1, #0]
 800b30a:	4605      	mov	r5, r0
 800b30c:	b109      	cbz	r1, 800b312 <cleanup_glue+0xe>
 800b30e:	f7ff fff9 	bl	800b304 <cleanup_glue>
 800b312:	4621      	mov	r1, r4
 800b314:	4628      	mov	r0, r5
 800b316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b31a:	f000 b869 	b.w	800b3f0 <_free_r>
	...

0800b320 <_reclaim_reent>:
 800b320:	4b2c      	ldr	r3, [pc, #176]	; (800b3d4 <_reclaim_reent+0xb4>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	4283      	cmp	r3, r0
 800b326:	b570      	push	{r4, r5, r6, lr}
 800b328:	4604      	mov	r4, r0
 800b32a:	d051      	beq.n	800b3d0 <_reclaim_reent+0xb0>
 800b32c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b32e:	b143      	cbz	r3, 800b342 <_reclaim_reent+0x22>
 800b330:	68db      	ldr	r3, [r3, #12]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d14a      	bne.n	800b3cc <_reclaim_reent+0xac>
 800b336:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b338:	6819      	ldr	r1, [r3, #0]
 800b33a:	b111      	cbz	r1, 800b342 <_reclaim_reent+0x22>
 800b33c:	4620      	mov	r0, r4
 800b33e:	f000 f857 	bl	800b3f0 <_free_r>
 800b342:	6961      	ldr	r1, [r4, #20]
 800b344:	b111      	cbz	r1, 800b34c <_reclaim_reent+0x2c>
 800b346:	4620      	mov	r0, r4
 800b348:	f000 f852 	bl	800b3f0 <_free_r>
 800b34c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b34e:	b111      	cbz	r1, 800b356 <_reclaim_reent+0x36>
 800b350:	4620      	mov	r0, r4
 800b352:	f000 f84d 	bl	800b3f0 <_free_r>
 800b356:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b358:	b111      	cbz	r1, 800b360 <_reclaim_reent+0x40>
 800b35a:	4620      	mov	r0, r4
 800b35c:	f000 f848 	bl	800b3f0 <_free_r>
 800b360:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b362:	b111      	cbz	r1, 800b36a <_reclaim_reent+0x4a>
 800b364:	4620      	mov	r0, r4
 800b366:	f000 f843 	bl	800b3f0 <_free_r>
 800b36a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b36c:	b111      	cbz	r1, 800b374 <_reclaim_reent+0x54>
 800b36e:	4620      	mov	r0, r4
 800b370:	f000 f83e 	bl	800b3f0 <_free_r>
 800b374:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b376:	b111      	cbz	r1, 800b37e <_reclaim_reent+0x5e>
 800b378:	4620      	mov	r0, r4
 800b37a:	f000 f839 	bl	800b3f0 <_free_r>
 800b37e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b380:	b111      	cbz	r1, 800b388 <_reclaim_reent+0x68>
 800b382:	4620      	mov	r0, r4
 800b384:	f000 f834 	bl	800b3f0 <_free_r>
 800b388:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b38a:	b111      	cbz	r1, 800b392 <_reclaim_reent+0x72>
 800b38c:	4620      	mov	r0, r4
 800b38e:	f000 f82f 	bl	800b3f0 <_free_r>
 800b392:	69a3      	ldr	r3, [r4, #24]
 800b394:	b1e3      	cbz	r3, 800b3d0 <_reclaim_reent+0xb0>
 800b396:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b398:	4620      	mov	r0, r4
 800b39a:	4798      	blx	r3
 800b39c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b39e:	b1b9      	cbz	r1, 800b3d0 <_reclaim_reent+0xb0>
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b3a6:	f7ff bfad 	b.w	800b304 <cleanup_glue>
 800b3aa:	5949      	ldr	r1, [r1, r5]
 800b3ac:	b941      	cbnz	r1, 800b3c0 <_reclaim_reent+0xa0>
 800b3ae:	3504      	adds	r5, #4
 800b3b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b3b2:	2d80      	cmp	r5, #128	; 0x80
 800b3b4:	68d9      	ldr	r1, [r3, #12]
 800b3b6:	d1f8      	bne.n	800b3aa <_reclaim_reent+0x8a>
 800b3b8:	4620      	mov	r0, r4
 800b3ba:	f000 f819 	bl	800b3f0 <_free_r>
 800b3be:	e7ba      	b.n	800b336 <_reclaim_reent+0x16>
 800b3c0:	680e      	ldr	r6, [r1, #0]
 800b3c2:	4620      	mov	r0, r4
 800b3c4:	f000 f814 	bl	800b3f0 <_free_r>
 800b3c8:	4631      	mov	r1, r6
 800b3ca:	e7ef      	b.n	800b3ac <_reclaim_reent+0x8c>
 800b3cc:	2500      	movs	r5, #0
 800b3ce:	e7ef      	b.n	800b3b0 <_reclaim_reent+0x90>
 800b3d0:	bd70      	pop	{r4, r5, r6, pc}
 800b3d2:	bf00      	nop
 800b3d4:	20000014 	.word	0x20000014

0800b3d8 <__malloc_lock>:
 800b3d8:	4801      	ldr	r0, [pc, #4]	; (800b3e0 <__malloc_lock+0x8>)
 800b3da:	f7ff bf7b 	b.w	800b2d4 <__retarget_lock_acquire_recursive>
 800b3de:	bf00      	nop
 800b3e0:	20005f28 	.word	0x20005f28

0800b3e4 <__malloc_unlock>:
 800b3e4:	4801      	ldr	r0, [pc, #4]	; (800b3ec <__malloc_unlock+0x8>)
 800b3e6:	f7ff bf76 	b.w	800b2d6 <__retarget_lock_release_recursive>
 800b3ea:	bf00      	nop
 800b3ec:	20005f28 	.word	0x20005f28

0800b3f0 <_free_r>:
 800b3f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b3f2:	2900      	cmp	r1, #0
 800b3f4:	d044      	beq.n	800b480 <_free_r+0x90>
 800b3f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3fa:	9001      	str	r0, [sp, #4]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	f1a1 0404 	sub.w	r4, r1, #4
 800b402:	bfb8      	it	lt
 800b404:	18e4      	addlt	r4, r4, r3
 800b406:	f7ff ffe7 	bl	800b3d8 <__malloc_lock>
 800b40a:	4a1e      	ldr	r2, [pc, #120]	; (800b484 <_free_r+0x94>)
 800b40c:	9801      	ldr	r0, [sp, #4]
 800b40e:	6813      	ldr	r3, [r2, #0]
 800b410:	b933      	cbnz	r3, 800b420 <_free_r+0x30>
 800b412:	6063      	str	r3, [r4, #4]
 800b414:	6014      	str	r4, [r2, #0]
 800b416:	b003      	add	sp, #12
 800b418:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b41c:	f7ff bfe2 	b.w	800b3e4 <__malloc_unlock>
 800b420:	42a3      	cmp	r3, r4
 800b422:	d908      	bls.n	800b436 <_free_r+0x46>
 800b424:	6825      	ldr	r5, [r4, #0]
 800b426:	1961      	adds	r1, r4, r5
 800b428:	428b      	cmp	r3, r1
 800b42a:	bf01      	itttt	eq
 800b42c:	6819      	ldreq	r1, [r3, #0]
 800b42e:	685b      	ldreq	r3, [r3, #4]
 800b430:	1949      	addeq	r1, r1, r5
 800b432:	6021      	streq	r1, [r4, #0]
 800b434:	e7ed      	b.n	800b412 <_free_r+0x22>
 800b436:	461a      	mov	r2, r3
 800b438:	685b      	ldr	r3, [r3, #4]
 800b43a:	b10b      	cbz	r3, 800b440 <_free_r+0x50>
 800b43c:	42a3      	cmp	r3, r4
 800b43e:	d9fa      	bls.n	800b436 <_free_r+0x46>
 800b440:	6811      	ldr	r1, [r2, #0]
 800b442:	1855      	adds	r5, r2, r1
 800b444:	42a5      	cmp	r5, r4
 800b446:	d10b      	bne.n	800b460 <_free_r+0x70>
 800b448:	6824      	ldr	r4, [r4, #0]
 800b44a:	4421      	add	r1, r4
 800b44c:	1854      	adds	r4, r2, r1
 800b44e:	42a3      	cmp	r3, r4
 800b450:	6011      	str	r1, [r2, #0]
 800b452:	d1e0      	bne.n	800b416 <_free_r+0x26>
 800b454:	681c      	ldr	r4, [r3, #0]
 800b456:	685b      	ldr	r3, [r3, #4]
 800b458:	6053      	str	r3, [r2, #4]
 800b45a:	4421      	add	r1, r4
 800b45c:	6011      	str	r1, [r2, #0]
 800b45e:	e7da      	b.n	800b416 <_free_r+0x26>
 800b460:	d902      	bls.n	800b468 <_free_r+0x78>
 800b462:	230c      	movs	r3, #12
 800b464:	6003      	str	r3, [r0, #0]
 800b466:	e7d6      	b.n	800b416 <_free_r+0x26>
 800b468:	6825      	ldr	r5, [r4, #0]
 800b46a:	1961      	adds	r1, r4, r5
 800b46c:	428b      	cmp	r3, r1
 800b46e:	bf04      	itt	eq
 800b470:	6819      	ldreq	r1, [r3, #0]
 800b472:	685b      	ldreq	r3, [r3, #4]
 800b474:	6063      	str	r3, [r4, #4]
 800b476:	bf04      	itt	eq
 800b478:	1949      	addeq	r1, r1, r5
 800b47a:	6021      	streq	r1, [r4, #0]
 800b47c:	6054      	str	r4, [r2, #4]
 800b47e:	e7ca      	b.n	800b416 <_free_r+0x26>
 800b480:	b003      	add	sp, #12
 800b482:	bd30      	pop	{r4, r5, pc}
 800b484:	20005f2c 	.word	0x20005f2c

0800b488 <_init>:
 800b488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b48a:	bf00      	nop
 800b48c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b48e:	bc08      	pop	{r3}
 800b490:	469e      	mov	lr, r3
 800b492:	4770      	bx	lr

0800b494 <_fini>:
 800b494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b496:	bf00      	nop
 800b498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b49a:	bc08      	pop	{r3}
 800b49c:	469e      	mov	lr, r3
 800b49e:	4770      	bx	lr
