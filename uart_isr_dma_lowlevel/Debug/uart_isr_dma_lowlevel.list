
uart_isr_dma_lowlevel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4d8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  0800b6d8  0800b6d8  0001b6d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b878  0800b878  000201a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b878  0800b878  0001b878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b880  0800b880  000201a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b880  0800b880  0001b880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b884  0800b884  0001b884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800b888  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000064  0800b8ec  00020064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000104  0800b98c  00020104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005e90  200001a4  0800ba2c  000201a4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20006034  0800ba2c  00026034  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000201d2  2**0
                  CONTENTS, READONLY
 15 .debug_info   0002a340  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00004fa5  00000000  00000000  0004a555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000020a0  00000000  00000000  0004f500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001964  00000000  00000000  000515a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00007dc5  00000000  00000000  00052f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000252a3  00000000  00000000  0005acc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00115d9b  00000000  00000000  0007ff6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00008e20  00000000  00000000  00195d08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000008b  00000000  00000000  0019eb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001a4 	.word	0x200001a4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b6c0 	.word	0x0800b6c0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001a8 	.word	0x200001a8
 800023c:	0800b6c0 	.word	0x0800b6c0

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002d0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d332      	bcc.n	80002c2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d314      	bcc.n	8000290 <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000284:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000288:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800028a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028e:	4770      	bx	lr

08000290 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000290:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000292:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000294:	d319      	bcc.n	80002ca <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000296:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000298:	1b12      	subs	r2, r2, r4

0800029a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800029a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80002a2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a4:	d1f9      	bne.n	800029a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a8:	d005      	beq.n	80002b6 <_No2ChunkNeeded>

080002aa <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002aa:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002ae:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002b2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b4:	d1f9      	bne.n	80002aa <_LoopCopyAfterWrapAround>

080002b6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80002b6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002ba:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002bc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002be:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002c0:	4770      	bx	lr

080002c2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002c2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002c4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002c6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c8:	d2cd      	bcs.n	8000266 <_Case4>

080002ca <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002ca:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ce:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002d0:	200001c0 	.word	0x200001c0

080002d4 <__aeabi_uldivmod>:
 80002d4:	b953      	cbnz	r3, 80002ec <__aeabi_uldivmod+0x18>
 80002d6:	b94a      	cbnz	r2, 80002ec <__aeabi_uldivmod+0x18>
 80002d8:	2900      	cmp	r1, #0
 80002da:	bf08      	it	eq
 80002dc:	2800      	cmpeq	r0, #0
 80002de:	bf1c      	itt	ne
 80002e0:	f04f 31ff 	movne.w	r1, #4294967295
 80002e4:	f04f 30ff 	movne.w	r0, #4294967295
 80002e8:	f000 b970 	b.w	80005cc <__aeabi_idiv0>
 80002ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f4:	f000 f806 	bl	8000304 <__udivmoddi4>
 80002f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000300:	b004      	add	sp, #16
 8000302:	4770      	bx	lr

08000304 <__udivmoddi4>:
 8000304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000308:	9e08      	ldr	r6, [sp, #32]
 800030a:	460d      	mov	r5, r1
 800030c:	4604      	mov	r4, r0
 800030e:	460f      	mov	r7, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14a      	bne.n	80003aa <__udivmoddi4+0xa6>
 8000314:	428a      	cmp	r2, r1
 8000316:	4694      	mov	ip, r2
 8000318:	d965      	bls.n	80003e6 <__udivmoddi4+0xe2>
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	b143      	cbz	r3, 8000332 <__udivmoddi4+0x2e>
 8000320:	fa02 fc03 	lsl.w	ip, r2, r3
 8000324:	f1c3 0220 	rsb	r2, r3, #32
 8000328:	409f      	lsls	r7, r3
 800032a:	fa20 f202 	lsr.w	r2, r0, r2
 800032e:	4317      	orrs	r7, r2
 8000330:	409c      	lsls	r4, r3
 8000332:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000336:	fa1f f58c 	uxth.w	r5, ip
 800033a:	fbb7 f1fe 	udiv	r1, r7, lr
 800033e:	0c22      	lsrs	r2, r4, #16
 8000340:	fb0e 7711 	mls	r7, lr, r1, r7
 8000344:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000348:	fb01 f005 	mul.w	r0, r1, r5
 800034c:	4290      	cmp	r0, r2
 800034e:	d90a      	bls.n	8000366 <__udivmoddi4+0x62>
 8000350:	eb1c 0202 	adds.w	r2, ip, r2
 8000354:	f101 37ff 	add.w	r7, r1, #4294967295
 8000358:	f080 811c 	bcs.w	8000594 <__udivmoddi4+0x290>
 800035c:	4290      	cmp	r0, r2
 800035e:	f240 8119 	bls.w	8000594 <__udivmoddi4+0x290>
 8000362:	3902      	subs	r1, #2
 8000364:	4462      	add	r2, ip
 8000366:	1a12      	subs	r2, r2, r0
 8000368:	b2a4      	uxth	r4, r4
 800036a:	fbb2 f0fe 	udiv	r0, r2, lr
 800036e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000372:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000376:	fb00 f505 	mul.w	r5, r0, r5
 800037a:	42a5      	cmp	r5, r4
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x90>
 800037e:	eb1c 0404 	adds.w	r4, ip, r4
 8000382:	f100 32ff 	add.w	r2, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x294>
 800038a:	42a5      	cmp	r5, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x294>
 8000390:	4464      	add	r4, ip
 8000392:	3802      	subs	r0, #2
 8000394:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000398:	1b64      	subs	r4, r4, r5
 800039a:	2100      	movs	r1, #0
 800039c:	b11e      	cbz	r6, 80003a6 <__udivmoddi4+0xa2>
 800039e:	40dc      	lsrs	r4, r3
 80003a0:	2300      	movs	r3, #0
 80003a2:	e9c6 4300 	strd	r4, r3, [r6]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0xbc>
 80003ae:	2e00      	cmp	r6, #0
 80003b0:	f000 80ed 	beq.w	800058e <__udivmoddi4+0x28a>
 80003b4:	2100      	movs	r1, #0
 80003b6:	e9c6 0500 	strd	r0, r5, [r6]
 80003ba:	4608      	mov	r0, r1
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	fab3 f183 	clz	r1, r3
 80003c4:	2900      	cmp	r1, #0
 80003c6:	d149      	bne.n	800045c <__udivmoddi4+0x158>
 80003c8:	42ab      	cmp	r3, r5
 80003ca:	d302      	bcc.n	80003d2 <__udivmoddi4+0xce>
 80003cc:	4282      	cmp	r2, r0
 80003ce:	f200 80f8 	bhi.w	80005c2 <__udivmoddi4+0x2be>
 80003d2:	1a84      	subs	r4, r0, r2
 80003d4:	eb65 0203 	sbc.w	r2, r5, r3
 80003d8:	2001      	movs	r0, #1
 80003da:	4617      	mov	r7, r2
 80003dc:	2e00      	cmp	r6, #0
 80003de:	d0e2      	beq.n	80003a6 <__udivmoddi4+0xa2>
 80003e0:	e9c6 4700 	strd	r4, r7, [r6]
 80003e4:	e7df      	b.n	80003a6 <__udivmoddi4+0xa2>
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xe6>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f382 	clz	r3, r2
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x210>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fa:	fa1f fe8c 	uxth.w	lr, ip
 80003fe:	2101      	movs	r1, #1
 8000400:	fbb2 f5f7 	udiv	r5, r2, r7
 8000404:	fb07 2015 	mls	r0, r7, r5, r2
 8000408:	0c22      	lsrs	r2, r4, #16
 800040a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800040e:	fb0e f005 	mul.w	r0, lr, r5
 8000412:	4290      	cmp	r0, r2
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x124>
 8000416:	eb1c 0202 	adds.w	r2, ip, r2
 800041a:	f105 38ff 	add.w	r8, r5, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x122>
 8000420:	4290      	cmp	r0, r2
 8000422:	f200 80cb 	bhi.w	80005bc <__udivmoddi4+0x2b8>
 8000426:	4645      	mov	r5, r8
 8000428:	1a12      	subs	r2, r2, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000430:	fb07 2210 	mls	r2, r7, r0, r2
 8000434:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000438:	fb0e fe00 	mul.w	lr, lr, r0
 800043c:	45a6      	cmp	lr, r4
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x14e>
 8000440:	eb1c 0404 	adds.w	r4, ip, r4
 8000444:	f100 32ff 	add.w	r2, r0, #4294967295
 8000448:	d202      	bcs.n	8000450 <__udivmoddi4+0x14c>
 800044a:	45a6      	cmp	lr, r4
 800044c:	f200 80bb 	bhi.w	80005c6 <__udivmoddi4+0x2c2>
 8000450:	4610      	mov	r0, r2
 8000452:	eba4 040e 	sub.w	r4, r4, lr
 8000456:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045a:	e79f      	b.n	800039c <__udivmoddi4+0x98>
 800045c:	f1c1 0720 	rsb	r7, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 fc07 	lsr.w	ip, r2, r7
 8000466:	ea4c 0c03 	orr.w	ip, ip, r3
 800046a:	fa05 f401 	lsl.w	r4, r5, r1
 800046e:	fa20 f307 	lsr.w	r3, r0, r7
 8000472:	40fd      	lsrs	r5, r7
 8000474:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fbb5 f8f9 	udiv	r8, r5, r9
 800047e:	fa1f fe8c 	uxth.w	lr, ip
 8000482:	fb09 5518 	mls	r5, r9, r8, r5
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800048c:	fb08 f50e 	mul.w	r5, r8, lr
 8000490:	42a5      	cmp	r5, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	fa00 f001 	lsl.w	r0, r0, r1
 800049a:	d90b      	bls.n	80004b4 <__udivmoddi4+0x1b0>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a4:	f080 8088 	bcs.w	80005b8 <__udivmoddi4+0x2b4>
 80004a8:	42a5      	cmp	r5, r4
 80004aa:	f240 8085 	bls.w	80005b8 <__udivmoddi4+0x2b4>
 80004ae:	f1a8 0802 	sub.w	r8, r8, #2
 80004b2:	4464      	add	r4, ip
 80004b4:	1b64      	subs	r4, r4, r5
 80004b6:	b29d      	uxth	r5, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80004c8:	45a6      	cmp	lr, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1da>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d4:	d26c      	bcs.n	80005b0 <__udivmoddi4+0x2ac>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	d96a      	bls.n	80005b0 <__udivmoddi4+0x2ac>
 80004da:	3b02      	subs	r3, #2
 80004dc:	4464      	add	r4, ip
 80004de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e2:	fba3 9502 	umull	r9, r5, r3, r2
 80004e6:	eba4 040e 	sub.w	r4, r4, lr
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	46c8      	mov	r8, r9
 80004ee:	46ae      	mov	lr, r5
 80004f0:	d356      	bcc.n	80005a0 <__udivmoddi4+0x29c>
 80004f2:	d053      	beq.n	800059c <__udivmoddi4+0x298>
 80004f4:	b156      	cbz	r6, 800050c <__udivmoddi4+0x208>
 80004f6:	ebb0 0208 	subs.w	r2, r0, r8
 80004fa:	eb64 040e 	sbc.w	r4, r4, lr
 80004fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000502:	40ca      	lsrs	r2, r1
 8000504:	40cc      	lsrs	r4, r1
 8000506:	4317      	orrs	r7, r2
 8000508:	e9c6 7400 	strd	r7, r4, [r6]
 800050c:	4618      	mov	r0, r3
 800050e:	2100      	movs	r1, #0
 8000510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000514:	f1c3 0120 	rsb	r1, r3, #32
 8000518:	fa02 fc03 	lsl.w	ip, r2, r3
 800051c:	fa20 f201 	lsr.w	r2, r0, r1
 8000520:	fa25 f101 	lsr.w	r1, r5, r1
 8000524:	409d      	lsls	r5, r3
 8000526:	432a      	orrs	r2, r5
 8000528:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800052c:	fa1f fe8c 	uxth.w	lr, ip
 8000530:	fbb1 f0f7 	udiv	r0, r1, r7
 8000534:	fb07 1510 	mls	r5, r7, r0, r1
 8000538:	0c11      	lsrs	r1, r2, #16
 800053a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800053e:	fb00 f50e 	mul.w	r5, r0, lr
 8000542:	428d      	cmp	r5, r1
 8000544:	fa04 f403 	lsl.w	r4, r4, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x258>
 800054a:	eb1c 0101 	adds.w	r1, ip, r1
 800054e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000552:	d22f      	bcs.n	80005b4 <__udivmoddi4+0x2b0>
 8000554:	428d      	cmp	r5, r1
 8000556:	d92d      	bls.n	80005b4 <__udivmoddi4+0x2b0>
 8000558:	3802      	subs	r0, #2
 800055a:	4461      	add	r1, ip
 800055c:	1b49      	subs	r1, r1, r5
 800055e:	b292      	uxth	r2, r2
 8000560:	fbb1 f5f7 	udiv	r5, r1, r7
 8000564:	fb07 1115 	mls	r1, r7, r5, r1
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	fb05 f10e 	mul.w	r1, r5, lr
 8000570:	4291      	cmp	r1, r2
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x282>
 8000574:	eb1c 0202 	adds.w	r2, ip, r2
 8000578:	f105 38ff 	add.w	r8, r5, #4294967295
 800057c:	d216      	bcs.n	80005ac <__udivmoddi4+0x2a8>
 800057e:	4291      	cmp	r1, r2
 8000580:	d914      	bls.n	80005ac <__udivmoddi4+0x2a8>
 8000582:	3d02      	subs	r5, #2
 8000584:	4462      	add	r2, ip
 8000586:	1a52      	subs	r2, r2, r1
 8000588:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800058c:	e738      	b.n	8000400 <__udivmoddi4+0xfc>
 800058e:	4631      	mov	r1, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xa2>
 8000594:	4639      	mov	r1, r7
 8000596:	e6e6      	b.n	8000366 <__udivmoddi4+0x62>
 8000598:	4610      	mov	r0, r2
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x90>
 800059c:	4548      	cmp	r0, r9
 800059e:	d2a9      	bcs.n	80004f4 <__udivmoddi4+0x1f0>
 80005a0:	ebb9 0802 	subs.w	r8, r9, r2
 80005a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005a8:	3b01      	subs	r3, #1
 80005aa:	e7a3      	b.n	80004f4 <__udivmoddi4+0x1f0>
 80005ac:	4645      	mov	r5, r8
 80005ae:	e7ea      	b.n	8000586 <__udivmoddi4+0x282>
 80005b0:	462b      	mov	r3, r5
 80005b2:	e794      	b.n	80004de <__udivmoddi4+0x1da>
 80005b4:	4640      	mov	r0, r8
 80005b6:	e7d1      	b.n	800055c <__udivmoddi4+0x258>
 80005b8:	46d0      	mov	r8, sl
 80005ba:	e77b      	b.n	80004b4 <__udivmoddi4+0x1b0>
 80005bc:	3d02      	subs	r5, #2
 80005be:	4462      	add	r2, ip
 80005c0:	e732      	b.n	8000428 <__udivmoddi4+0x124>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e70a      	b.n	80003dc <__udivmoddi4+0xd8>
 80005c6:	4464      	add	r4, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e742      	b.n	8000452 <__udivmoddi4+0x14e>

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80005d6:	4b26      	ldr	r3, [pc, #152]	; (8000670 <_DoInit+0xa0>)
 80005d8:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80005da:	22a8      	movs	r2, #168	; 0xa8
 80005dc:	2100      	movs	r1, #0
 80005de:	6838      	ldr	r0, [r7, #0]
 80005e0:	f00a ff84 	bl	800b4ec <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	2203      	movs	r2, #3
 80005e8:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	2203      	movs	r2, #3
 80005ee:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	4a20      	ldr	r2, [pc, #128]	; (8000674 <_DoInit+0xa4>)
 80005f4:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	4a1f      	ldr	r2, [pc, #124]	; (8000678 <_DoInit+0xa8>)
 80005fa:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000602:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	2200      	movs	r2, #0
 8000608:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	2200      	movs	r2, #0
 800060e:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	2200      	movs	r2, #0
 8000614:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	4a16      	ldr	r2, [pc, #88]	; (8000674 <_DoInit+0xa4>)
 800061a:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	4a17      	ldr	r2, [pc, #92]	; (800067c <_DoInit+0xac>)
 8000620:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	2210      	movs	r2, #16
 8000626:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	2200      	movs	r2, #0
 800062c:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	2200      	movs	r2, #0
 8000632:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	2200      	movs	r2, #0
 8000638:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800063a:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800063e:	2300      	movs	r3, #0
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	e00c      	b.n	800065e <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f1c3 030f 	rsb	r3, r3, #15
 800064a:	4a0d      	ldr	r2, [pc, #52]	; (8000680 <_DoInit+0xb0>)
 800064c:	5cd1      	ldrb	r1, [r2, r3]
 800064e:	683a      	ldr	r2, [r7, #0]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4413      	add	r3, r2
 8000654:	460a      	mov	r2, r1
 8000656:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	3301      	adds	r3, #1
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2b0f      	cmp	r3, #15
 8000662:	d9ef      	bls.n	8000644 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000664:	f3bf 8f5f 	dmb	sy
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	200001c0 	.word	0x200001c0
 8000674:	0800b6d8 	.word	0x0800b6d8
 8000678:	20000268 	.word	0x20000268
 800067c:	20000668 	.word	0x20000668
 8000680:	0800b7b8 	.word	0x0800b7b8

08000684 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b08c      	sub	sp, #48	; 0x30
 8000688:	af00      	add	r7, sp, #0
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	60b9      	str	r1, [r7, #8]
 800068e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8000690:	4b3e      	ldr	r3, [pc, #248]	; (800078c <SEGGER_RTT_ReadNoLock+0x108>)
 8000692:	623b      	str	r3, [r7, #32]
 8000694:	6a3b      	ldr	r3, [r7, #32]
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	b2db      	uxtb	r3, r3
 800069a:	2b00      	cmp	r3, #0
 800069c:	d101      	bne.n	80006a2 <SEGGER_RTT_ReadNoLock+0x1e>
 800069e:	f7ff ff97 	bl	80005d0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80006a2:	68fa      	ldr	r2, [r7, #12]
 80006a4:	4613      	mov	r3, r2
 80006a6:	005b      	lsls	r3, r3, #1
 80006a8:	4413      	add	r3, r2
 80006aa:	00db      	lsls	r3, r3, #3
 80006ac:	3360      	adds	r3, #96	; 0x60
 80006ae:	4a37      	ldr	r2, [pc, #220]	; (800078c <SEGGER_RTT_ReadNoLock+0x108>)
 80006b0:	4413      	add	r3, r2
 80006b2:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80006b8:	69fb      	ldr	r3, [r7, #28]
 80006ba:	691b      	ldr	r3, [r3, #16]
 80006bc:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	68db      	ldr	r3, [r3, #12]
 80006c2:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80006c4:	2300      	movs	r3, #0
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80006c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006ca:	69bb      	ldr	r3, [r7, #24]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d92b      	bls.n	8000728 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80006d0:	69fb      	ldr	r3, [r7, #28]
 80006d2:	689a      	ldr	r2, [r3, #8]
 80006d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006d6:	1ad3      	subs	r3, r2, r3
 80006d8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80006da:	697a      	ldr	r2, [r7, #20]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4293      	cmp	r3, r2
 80006e0:	bf28      	it	cs
 80006e2:	4613      	movcs	r3, r2
 80006e4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	685a      	ldr	r2, [r3, #4]
 80006ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006ec:	4413      	add	r3, r2
 80006ee:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80006f0:	697a      	ldr	r2, [r7, #20]
 80006f2:	6939      	ldr	r1, [r7, #16]
 80006f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006f6:	f00a ff7d 	bl	800b5f4 <memcpy>
    NumBytesRead += NumBytesRem;
 80006fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	4413      	add	r3, r2
 8000700:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8000702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	4413      	add	r3, r2
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	1ad3      	subs	r3, r2, r3
 8000710:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8000712:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	4413      	add	r3, r2
 8000718:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	689b      	ldr	r3, [r3, #8]
 800071e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000720:	429a      	cmp	r2, r3
 8000722:	d101      	bne.n	8000728 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8000724:	2300      	movs	r3, #0
 8000726:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8000728:	69ba      	ldr	r2, [r7, #24]
 800072a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800072c:	1ad3      	subs	r3, r2, r3
 800072e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8000730:	697a      	ldr	r2, [r7, #20]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4293      	cmp	r3, r2
 8000736:	bf28      	it	cs
 8000738:	4613      	movcs	r3, r2
 800073a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d019      	beq.n	8000776 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	685a      	ldr	r2, [r3, #4]
 8000746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000748:	4413      	add	r3, r2
 800074a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800074c:	697a      	ldr	r2, [r7, #20]
 800074e:	6939      	ldr	r1, [r7, #16]
 8000750:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000752:	f00a ff4f 	bl	800b5f4 <memcpy>
    NumBytesRead += NumBytesRem;
 8000756:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	4413      	add	r3, r2
 800075c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800075e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	4413      	add	r3, r2
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	1ad3      	subs	r3, r2, r3
 800076c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800076e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	4413      	add	r3, r2
 8000774:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8000776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000778:	2b00      	cmp	r3, #0
 800077a:	d002      	beq.n	8000782 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000780:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8000782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000784:	4618      	mov	r0, r3
 8000786:	3730      	adds	r7, #48	; 0x30
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	200001c0 	.word	0x200001c0

08000790 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
 800079c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800079e:	4b3d      	ldr	r3, [pc, #244]	; (8000894 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80007a0:	61bb      	str	r3, [r7, #24]
 80007a2:	69bb      	ldr	r3, [r7, #24]
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d101      	bne.n	80007b0 <SEGGER_RTT_AllocUpBuffer+0x20>
 80007ac:	f7ff ff10 	bl	80005d0 <_DoInit>
  SEGGER_RTT_LOCK();
 80007b0:	f3ef 8311 	mrs	r3, BASEPRI
 80007b4:	f04f 0120 	mov.w	r1, #32
 80007b8:	f381 8811 	msr	BASEPRI, r1
 80007bc:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80007be:	4b35      	ldr	r3, [pc, #212]	; (8000894 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80007c0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80007c6:	6939      	ldr	r1, [r7, #16]
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	1c5a      	adds	r2, r3, #1
 80007cc:	4613      	mov	r3, r2
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	4413      	add	r3, r2
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	440b      	add	r3, r1
 80007d6:	3304      	adds	r3, #4
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d008      	beq.n	80007f0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	3301      	adds	r3, #1
 80007e2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80007e4:	693b      	ldr	r3, [r7, #16]
 80007e6:	691b      	ldr	r3, [r3, #16]
 80007e8:	69fa      	ldr	r2, [r7, #28]
 80007ea:	429a      	cmp	r2, r3
 80007ec:	dbeb      	blt.n	80007c6 <SEGGER_RTT_AllocUpBuffer+0x36>
 80007ee:	e000      	b.n	80007f2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80007f0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80007f2:	693b      	ldr	r3, [r7, #16]
 80007f4:	691b      	ldr	r3, [r3, #16]
 80007f6:	69fa      	ldr	r2, [r7, #28]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	da3f      	bge.n	800087c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80007fc:	6939      	ldr	r1, [r7, #16]
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	1c5a      	adds	r2, r3, #1
 8000802:	4613      	mov	r3, r2
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	4413      	add	r3, r2
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	440b      	add	r3, r1
 800080c:	68fa      	ldr	r2, [r7, #12]
 800080e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8000810:	6939      	ldr	r1, [r7, #16]
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	1c5a      	adds	r2, r3, #1
 8000816:	4613      	mov	r3, r2
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	4413      	add	r3, r2
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	440b      	add	r3, r1
 8000820:	3304      	adds	r3, #4
 8000822:	68ba      	ldr	r2, [r7, #8]
 8000824:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8000826:	6939      	ldr	r1, [r7, #16]
 8000828:	69fa      	ldr	r2, [r7, #28]
 800082a:	4613      	mov	r3, r2
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	4413      	add	r3, r2
 8000830:	00db      	lsls	r3, r3, #3
 8000832:	440b      	add	r3, r1
 8000834:	3320      	adds	r3, #32
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800083a:	6939      	ldr	r1, [r7, #16]
 800083c:	69fa      	ldr	r2, [r7, #28]
 800083e:	4613      	mov	r3, r2
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	4413      	add	r3, r2
 8000844:	00db      	lsls	r3, r3, #3
 8000846:	440b      	add	r3, r1
 8000848:	3328      	adds	r3, #40	; 0x28
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800084e:	6939      	ldr	r1, [r7, #16]
 8000850:	69fa      	ldr	r2, [r7, #28]
 8000852:	4613      	mov	r3, r2
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	4413      	add	r3, r2
 8000858:	00db      	lsls	r3, r3, #3
 800085a:	440b      	add	r3, r1
 800085c:	3324      	adds	r3, #36	; 0x24
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8000862:	6939      	ldr	r1, [r7, #16]
 8000864:	69fa      	ldr	r2, [r7, #28]
 8000866:	4613      	mov	r3, r2
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	4413      	add	r3, r2
 800086c:	00db      	lsls	r3, r3, #3
 800086e:	440b      	add	r3, r1
 8000870:	332c      	adds	r3, #44	; 0x2c
 8000872:	683a      	ldr	r2, [r7, #0]
 8000874:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000876:	f3bf 8f5f 	dmb	sy
 800087a:	e002      	b.n	8000882 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800087c:	f04f 33ff 	mov.w	r3, #4294967295
 8000880:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8000888:	69fb      	ldr	r3, [r7, #28]
}
 800088a:	4618      	mov	r0, r3
 800088c:	3720      	adds	r7, #32
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200001c0 	.word	0x200001c0

08000898 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	; 0x28
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
 80008a4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80008a6:	4b21      	ldr	r3, [pc, #132]	; (800092c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80008a8:	623b      	str	r3, [r7, #32]
 80008aa:	6a3b      	ldr	r3, [r7, #32]
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d101      	bne.n	80008b8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80008b4:	f7ff fe8c 	bl	80005d0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80008b8:	4b1c      	ldr	r3, [pc, #112]	; (800092c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80008ba:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	2b02      	cmp	r3, #2
 80008c0:	d82c      	bhi.n	800091c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80008c2:	f3ef 8311 	mrs	r3, BASEPRI
 80008c6:	f04f 0120 	mov.w	r1, #32
 80008ca:	f381 8811 	msr	BASEPRI, r1
 80008ce:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80008d0:	68fa      	ldr	r2, [r7, #12]
 80008d2:	4613      	mov	r3, r2
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	4413      	add	r3, r2
 80008d8:	00db      	lsls	r3, r3, #3
 80008da:	3360      	adds	r3, #96	; 0x60
 80008dc:	69fa      	ldr	r2, [r7, #28]
 80008de:	4413      	add	r3, r2
 80008e0:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d00e      	beq.n	8000906 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	68ba      	ldr	r2, [r7, #8]
 80008ec:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	683a      	ldr	r2, [r7, #0]
 80008f8:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800090a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800090c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8000910:	69bb      	ldr	r3, [r7, #24]
 8000912:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
 800091a:	e002      	b.n	8000922 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800091c:	f04f 33ff 	mov.w	r3, #4294967295
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8000922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000924:	4618      	mov	r0, r3
 8000926:	3728      	adds	r7, #40	; 0x28
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	200001c0 	.word	0x200001c0

08000930 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8000930:	b480      	push	{r7}
 8000932:	b087      	sub	sp, #28
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	1c5a      	adds	r2, r3, #1
 8000944:	60fa      	str	r2, [r7, #12]
 8000946:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2b80      	cmp	r3, #128	; 0x80
 800094c:	d90a      	bls.n	8000964 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800094e:	2380      	movs	r3, #128	; 0x80
 8000950:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8000952:	e007      	b.n	8000964 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8000954:	68ba      	ldr	r2, [r7, #8]
 8000956:	1c53      	adds	r3, r2, #1
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	1c59      	adds	r1, r3, #1
 800095e:	60f9      	str	r1, [r7, #12]
 8000960:	7812      	ldrb	r2, [r2, #0]
 8000962:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	1e5a      	subs	r2, r3, #1
 8000968:	607a      	str	r2, [r7, #4]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d003      	beq.n	8000976 <_EncodeStr+0x46>
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d1ee      	bne.n	8000954 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	1ad3      	subs	r3, r2, r3
 800097c:	b2da      	uxtb	r2, r3
 800097e:	693b      	ldr	r3, [r7, #16]
 8000980:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8000982:	68fb      	ldr	r3, [r7, #12]
}
 8000984:	4618      	mov	r0, r3
 8000986:	371c      	adds	r7, #28
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3307      	adds	r3, #7
}
 800099c:	4618      	mov	r0, r3
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80009ae:	4b34      	ldr	r3, [pc, #208]	; (8000a80 <_HandleIncomingPacket+0xd8>)
 80009b0:	7e1b      	ldrb	r3, [r3, #24]
 80009b2:	4618      	mov	r0, r3
 80009b4:	1cfb      	adds	r3, r7, #3
 80009b6:	2201      	movs	r2, #1
 80009b8:	4619      	mov	r1, r3
 80009ba:	f7ff fe63 	bl	8000684 <SEGGER_RTT_ReadNoLock>
 80009be:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d057      	beq.n	8000a76 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80009c6:	78fb      	ldrb	r3, [r7, #3]
 80009c8:	2b80      	cmp	r3, #128	; 0x80
 80009ca:	d031      	beq.n	8000a30 <_HandleIncomingPacket+0x88>
 80009cc:	2b80      	cmp	r3, #128	; 0x80
 80009ce:	dc40      	bgt.n	8000a52 <_HandleIncomingPacket+0xaa>
 80009d0:	2b07      	cmp	r3, #7
 80009d2:	dc15      	bgt.n	8000a00 <_HandleIncomingPacket+0x58>
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	dd3c      	ble.n	8000a52 <_HandleIncomingPacket+0xaa>
 80009d8:	3b01      	subs	r3, #1
 80009da:	2b06      	cmp	r3, #6
 80009dc:	d839      	bhi.n	8000a52 <_HandleIncomingPacket+0xaa>
 80009de:	a201      	add	r2, pc, #4	; (adr r2, 80009e4 <_HandleIncomingPacket+0x3c>)
 80009e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e4:	08000a07 	.word	0x08000a07
 80009e8:	08000a0d 	.word	0x08000a0d
 80009ec:	08000a13 	.word	0x08000a13
 80009f0:	08000a19 	.word	0x08000a19
 80009f4:	08000a1f 	.word	0x08000a1f
 80009f8:	08000a25 	.word	0x08000a25
 80009fc:	08000a2b 	.word	0x08000a2b
 8000a00:	2b7f      	cmp	r3, #127	; 0x7f
 8000a02:	d033      	beq.n	8000a6c <_HandleIncomingPacket+0xc4>
 8000a04:	e025      	b.n	8000a52 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8000a06:	f000 fbe3 	bl	80011d0 <SEGGER_SYSVIEW_Start>
      break;
 8000a0a:	e034      	b.n	8000a76 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8000a0c:	f000 fc9a 	bl	8001344 <SEGGER_SYSVIEW_Stop>
      break;
 8000a10:	e031      	b.n	8000a76 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8000a12:	f000 fe73 	bl	80016fc <SEGGER_SYSVIEW_RecordSystime>
      break;
 8000a16:	e02e      	b.n	8000a76 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8000a18:	f000 fe38 	bl	800168c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8000a1c:	e02b      	b.n	8000a76 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8000a1e:	f000 fcb7 	bl	8001390 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8000a22:	e028      	b.n	8000a76 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8000a24:	f000 ffa2 	bl	800196c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8000a28:	e025      	b.n	8000a76 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8000a2a:	f000 ff81 	bl	8001930 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8000a2e:	e022      	b.n	8000a76 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000a30:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <_HandleIncomingPacket+0xd8>)
 8000a32:	7e1b      	ldrb	r3, [r3, #24]
 8000a34:	4618      	mov	r0, r3
 8000a36:	1cfb      	adds	r3, r7, #3
 8000a38:	2201      	movs	r2, #1
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	f7ff fe22 	bl	8000684 <SEGGER_RTT_ReadNoLock>
 8000a40:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d013      	beq.n	8000a70 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8000a48:	78fb      	ldrb	r3, [r7, #3]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 fee6 	bl	800181c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8000a50:	e00e      	b.n	8000a70 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8000a52:	78fb      	ldrb	r3, [r7, #3]
 8000a54:	b25b      	sxtb	r3, r3
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	da0c      	bge.n	8000a74 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <_HandleIncomingPacket+0xd8>)
 8000a5c:	7e1b      	ldrb	r3, [r3, #24]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	1cfb      	adds	r3, r7, #3
 8000a62:	2201      	movs	r2, #1
 8000a64:	4619      	mov	r1, r3
 8000a66:	f7ff fe0d 	bl	8000684 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8000a6a:	e003      	b.n	8000a74 <_HandleIncomingPacket+0xcc>
      break;
 8000a6c:	bf00      	nop
 8000a6e:	e002      	b.n	8000a76 <_HandleIncomingPacket+0xce>
      break;
 8000a70:	bf00      	nop
 8000a72:	e000      	b.n	8000a76 <_HandleIncomingPacket+0xce>
      break;
 8000a74:	bf00      	nop
    }
  }
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000a80 	.word	0x20000a80

08000a84 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08c      	sub	sp, #48	; 0x30
 8000a88:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	3301      	adds	r3, #1
 8000a92:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a98:	4b31      	ldr	r3, [pc, #196]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000a9a:	695b      	ldr	r3, [r3, #20]
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a9e:	e00b      	b.n	8000ab8 <_TrySendOverflowPacket+0x34>
 8000aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aa6:	1c59      	adds	r1, r3, #1
 8000aa8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8000aaa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000aae:	b2d2      	uxtb	r2, r2
 8000ab0:	701a      	strb	r2, [r3, #0]
 8000ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ab4:	09db      	lsrs	r3, r3, #7
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aba:	2b7f      	cmp	r3, #127	; 0x7f
 8000abc:	d8f0      	bhi.n	8000aa0 <_TrySendOverflowPacket+0x1c>
 8000abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ac0:	1c5a      	adds	r2, r3, #1
 8000ac2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000ac4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ac6:	b2d2      	uxtb	r2, r2
 8000ac8:	701a      	strb	r2, [r3, #0]
 8000aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000acc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000ace:	4b25      	ldr	r3, [pc, #148]	; (8000b64 <_TrySendOverflowPacket+0xe0>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000ad4:	4b22      	ldr	r3, [pc, #136]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	69ba      	ldr	r2, [r7, #24]
 8000ada:	1ad3      	subs	r3, r2, r3
 8000adc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	623b      	str	r3, [r7, #32]
 8000ae6:	e00b      	b.n	8000b00 <_TrySendOverflowPacket+0x7c>
 8000ae8:	6a3b      	ldr	r3, [r7, #32]
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aee:	1c59      	adds	r1, r3, #1
 8000af0:	6279      	str	r1, [r7, #36]	; 0x24
 8000af2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000af6:	b2d2      	uxtb	r2, r2
 8000af8:	701a      	strb	r2, [r3, #0]
 8000afa:	6a3b      	ldr	r3, [r7, #32]
 8000afc:	09db      	lsrs	r3, r3, #7
 8000afe:	623b      	str	r3, [r7, #32]
 8000b00:	6a3b      	ldr	r3, [r7, #32]
 8000b02:	2b7f      	cmp	r3, #127	; 0x7f
 8000b04:	d8f0      	bhi.n	8000ae8 <_TrySendOverflowPacket+0x64>
 8000b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b08:	1c5a      	adds	r2, r3, #1
 8000b0a:	627a      	str	r2, [r7, #36]	; 0x24
 8000b0c:	6a3a      	ldr	r2, [r7, #32]
 8000b0e:	b2d2      	uxtb	r2, r2
 8000b10:	701a      	strb	r2, [r3, #0]
 8000b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b14:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8000b16:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000b18:	785b      	ldrb	r3, [r3, #1]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	69fa      	ldr	r2, [r7, #28]
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	461a      	mov	r2, r3
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	4619      	mov	r1, r3
 8000b28:	f7ff fb8a 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d009      	beq.n	8000b4a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000b36:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	3b01      	subs	r3, #1
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000b46:	701a      	strb	r2, [r3, #0]
 8000b48:	e004      	b.n	8000b54 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	4a03      	ldr	r2, [pc, #12]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000b52:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8000b54:	693b      	ldr	r3, [r7, #16]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3730      	adds	r7, #48	; 0x30
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000a80 	.word	0x20000a80
 8000b64:	e0001004 	.word	0xe0001004

08000b68 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	; 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8000b74:	4b98      	ldr	r3, [pc, #608]	; (8000dd8 <_SendPacket+0x270>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d010      	beq.n	8000b9e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8000b7c:	4b96      	ldr	r3, [pc, #600]	; (8000dd8 <_SendPacket+0x270>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	f000 812d 	beq.w	8000de0 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8000b86:	4b94      	ldr	r3, [pc, #592]	; (8000dd8 <_SendPacket+0x270>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b02      	cmp	r3, #2
 8000b8c:	d109      	bne.n	8000ba2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8000b8e:	f7ff ff79 	bl	8000a84 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8000b92:	4b91      	ldr	r3, [pc, #580]	; (8000dd8 <_SendPacket+0x270>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	f040 8124 	bne.w	8000de4 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8000b9c:	e001      	b.n	8000ba2 <_SendPacket+0x3a>
    goto Send;
 8000b9e:	bf00      	nop
 8000ba0:	e000      	b.n	8000ba4 <_SendPacket+0x3c>
Send:
 8000ba2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b1f      	cmp	r3, #31
 8000ba8:	d809      	bhi.n	8000bbe <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8000baa:	4b8b      	ldr	r3, [pc, #556]	; (8000dd8 <_SendPacket+0x270>)
 8000bac:	69da      	ldr	r2, [r3, #28]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	f040 8115 	bne.w	8000de8 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b17      	cmp	r3, #23
 8000bc2:	d807      	bhi.n	8000bd4 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	701a      	strb	r2, [r3, #0]
 8000bd2:	e0c4      	b.n	8000d5e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8000bd4:	68ba      	ldr	r2, [r7, #8]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	2b7f      	cmp	r3, #127	; 0x7f
 8000be0:	d912      	bls.n	8000c08 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	09da      	lsrs	r2, r3, #7
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	3b01      	subs	r3, #1
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	b2d2      	uxtb	r2, r2
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	3a01      	subs	r2, #1
 8000bfa:	60fa      	str	r2, [r7, #12]
 8000bfc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	701a      	strb	r2, [r3, #0]
 8000c06:	e006      	b.n	8000c16 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b7e      	cmp	r3, #126	; 0x7e
 8000c1a:	d807      	bhi.n	8000c2c <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	701a      	strb	r2, [r3, #0]
 8000c2a:	e098      	b.n	8000d5e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c32:	d212      	bcs.n	8000c5a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	09da      	lsrs	r2, r3, #7
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	b2d2      	uxtb	r2, r2
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	3a01      	subs	r2, #1
 8000c4c:	60fa      	str	r2, [r7, #12]
 8000c4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	701a      	strb	r2, [r3, #0]
 8000c58:	e081      	b.n	8000d5e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000c60:	d21d      	bcs.n	8000c9e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	0b9a      	lsrs	r2, r3, #14
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	3b01      	subs	r3, #1
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	09db      	lsrs	r3, r3, #7
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	68fa      	ldr	r2, [r7, #12]
 8000c7a:	3a01      	subs	r2, #1
 8000c7c:	60fa      	str	r2, [r7, #12]
 8000c7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	68fa      	ldr	r2, [r7, #12]
 8000c8e:	3a01      	subs	r2, #1
 8000c90:	60fa      	str	r2, [r7, #12]
 8000c92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	701a      	strb	r2, [r3, #0]
 8000c9c:	e05f      	b.n	8000d5e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000ca4:	d228      	bcs.n	8000cf8 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	0d5a      	lsrs	r2, r3, #21
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	3b01      	subs	r3, #1
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	b2d2      	uxtb	r2, r2
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	0b9b      	lsrs	r3, r3, #14
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	68fa      	ldr	r2, [r7, #12]
 8000cbe:	3a01      	subs	r2, #1
 8000cc0:	60fa      	str	r2, [r7, #12]
 8000cc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	09db      	lsrs	r3, r3, #7
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	3a01      	subs	r2, #1
 8000cd6:	60fa      	str	r2, [r7, #12]
 8000cd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	3a01      	subs	r2, #1
 8000cea:	60fa      	str	r2, [r7, #12]
 8000cec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	701a      	strb	r2, [r3, #0]
 8000cf6:	e032      	b.n	8000d5e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	0f1a      	lsrs	r2, r3, #28
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	0d5b      	lsrs	r3, r3, #21
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	68fa      	ldr	r2, [r7, #12]
 8000d10:	3a01      	subs	r2, #1
 8000d12:	60fa      	str	r2, [r7, #12]
 8000d14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	0b9b      	lsrs	r3, r3, #14
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	68fa      	ldr	r2, [r7, #12]
 8000d26:	3a01      	subs	r2, #1
 8000d28:	60fa      	str	r2, [r7, #12]
 8000d2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	09db      	lsrs	r3, r3, #7
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	3a01      	subs	r2, #1
 8000d3e:	60fa      	str	r2, [r7, #12]
 8000d40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	3a01      	subs	r2, #1
 8000d52:	60fa      	str	r2, [r7, #12]
 8000d54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000d5e:	4b1f      	ldr	r3, [pc, #124]	; (8000ddc <_SendPacket+0x274>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000d64:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <_SendPacket+0x270>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	623b      	str	r3, [r7, #32]
 8000d76:	e00b      	b.n	8000d90 <_SendPacket+0x228>
 8000d78:	6a3b      	ldr	r3, [r7, #32]
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7e:	1c59      	adds	r1, r3, #1
 8000d80:	6279      	str	r1, [r7, #36]	; 0x24
 8000d82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000d86:	b2d2      	uxtb	r2, r2
 8000d88:	701a      	strb	r2, [r3, #0]
 8000d8a:	6a3b      	ldr	r3, [r7, #32]
 8000d8c:	09db      	lsrs	r3, r3, #7
 8000d8e:	623b      	str	r3, [r7, #32]
 8000d90:	6a3b      	ldr	r3, [r7, #32]
 8000d92:	2b7f      	cmp	r3, #127	; 0x7f
 8000d94:	d8f0      	bhi.n	8000d78 <_SendPacket+0x210>
 8000d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d98:	1c5a      	adds	r2, r3, #1
 8000d9a:	627a      	str	r2, [r7, #36]	; 0x24
 8000d9c:	6a3a      	ldr	r2, [r7, #32]
 8000d9e:	b2d2      	uxtb	r2, r2
 8000da0:	701a      	strb	r2, [r3, #0]
 8000da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da4:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8000da6:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <_SendPacket+0x270>)
 8000da8:	785b      	ldrb	r3, [r3, #1]
 8000daa:	4618      	mov	r0, r3
 8000dac:	68ba      	ldr	r2, [r7, #8]
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	461a      	mov	r2, r3
 8000db4:	68f9      	ldr	r1, [r7, #12]
 8000db6:	f7ff fa43 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000dba:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d003      	beq.n	8000dca <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000dc2:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <_SendPacket+0x270>)
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	60d3      	str	r3, [r2, #12]
 8000dc8:	e00f      	b.n	8000dea <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8000dca:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <_SendPacket+0x270>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4b01      	ldr	r3, [pc, #4]	; (8000dd8 <_SendPacket+0x270>)
 8000dd4:	701a      	strb	r2, [r3, #0]
 8000dd6:	e008      	b.n	8000dea <_SendPacket+0x282>
 8000dd8:	20000a80 	.word	0x20000a80
 8000ddc:	e0001004 	.word	0xe0001004
    goto SendDone;
 8000de0:	bf00      	nop
 8000de2:	e002      	b.n	8000dea <_SendPacket+0x282>
      goto SendDone;
 8000de4:	bf00      	nop
 8000de6:	e000      	b.n	8000dea <_SendPacket+0x282>
      goto SendDone;
 8000de8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8000dea:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <_SendPacket+0x2d4>)
 8000dec:	7e1b      	ldrb	r3, [r3, #24]
 8000dee:	4619      	mov	r1, r3
 8000df0:	4a13      	ldr	r2, [pc, #76]	; (8000e40 <_SendPacket+0x2d8>)
 8000df2:	460b      	mov	r3, r1
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	440b      	add	r3, r1
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	4413      	add	r3, r2
 8000dfc:	336c      	adds	r3, #108	; 0x6c
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <_SendPacket+0x2d4>)
 8000e02:	7e1b      	ldrb	r3, [r3, #24]
 8000e04:	4618      	mov	r0, r3
 8000e06:	490e      	ldr	r1, [pc, #56]	; (8000e40 <_SendPacket+0x2d8>)
 8000e08:	4603      	mov	r3, r0
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	4403      	add	r3, r0
 8000e0e:	00db      	lsls	r3, r3, #3
 8000e10:	440b      	add	r3, r1
 8000e12:	3370      	adds	r3, #112	; 0x70
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d00b      	beq.n	8000e32 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8000e1a:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <_SendPacket+0x2d4>)
 8000e1c:	789b      	ldrb	r3, [r3, #2]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d107      	bne.n	8000e32 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <_SendPacket+0x2d4>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8000e28:	f7ff fdbe 	bl	80009a8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8000e2c:	4b03      	ldr	r3, [pc, #12]	; (8000e3c <_SendPacket+0x2d4>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8000e32:	bf00      	nop
 8000e34:	3728      	adds	r7, #40	; 0x28
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000a80 	.word	0x20000a80
 8000e40:	200001c0 	.word	0x200001c0

08000e44 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b0a2      	sub	sp, #136	; 0x88
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
#endif
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 8000e5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e5c:	1c5a      	adds	r2, r3, #1
 8000e5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 8000e66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d01d      	beq.n	8000eaa <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 8000e6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000e72:	2b25      	cmp	r3, #37	; 0x25
 8000e74:	d1f1      	bne.n	8000e5a <_VPrintHost+0x16>
      c = *p;
 8000e76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = (U32)(va_arg(*pParamList, int));
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	1d19      	adds	r1, r3, #4
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	6011      	str	r1, [r2, #0]
 8000e88:	6819      	ldr	r1, [r3, #0]
 8000e8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000e8e:	1c5a      	adds	r2, r3, #1
 8000e90:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8000e94:	460a      	mov	r2, r1
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	3388      	adds	r3, #136	; 0x88
 8000e9a:	443b      	add	r3, r7
 8000e9c:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 8000ea0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000ea4:	2b10      	cmp	r3, #16
 8000ea6:	d002      	beq.n	8000eae <_VPrintHost+0x6a>
    c = *p++;
 8000ea8:	e7d7      	b.n	8000e5a <_VPrintHost+0x16>
      break;
 8000eaa:	bf00      	nop
 8000eac:	e000      	b.n	8000eb0 <_VPrintHost+0x6c>
        break;
 8000eae:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 8000eb0:	f3ef 8311 	mrs	r3, BASEPRI
 8000eb4:	f04f 0120 	mov.w	r1, #32
 8000eb8:	f381 8811 	msr	BASEPRI, r1
 8000ebc:	65bb      	str	r3, [r7, #88]	; 0x58
 8000ebe:	483f      	ldr	r0, [pc, #252]	; (8000fbc <_VPrintHost+0x178>)
 8000ec0:	f7ff fd66 	bl	8000990 <_PreparePacket>
 8000ec4:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8000ec6:	2280      	movs	r2, #128	; 0x80
 8000ec8:	68f9      	ldr	r1, [r7, #12]
 8000eca:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000ecc:	f7ff fd30 	bl	8000930 <_EncodeStr>
 8000ed0:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 8000ed2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ed4:	677b      	str	r3, [r7, #116]	; 0x74
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	673b      	str	r3, [r7, #112]	; 0x70
 8000eda:	e00b      	b.n	8000ef4 <_VPrintHost+0xb0>
 8000edc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ee2:	1c59      	adds	r1, r3, #1
 8000ee4:	6779      	str	r1, [r7, #116]	; 0x74
 8000ee6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	701a      	strb	r2, [r3, #0]
 8000eee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ef0:	09db      	lsrs	r3, r3, #7
 8000ef2:	673b      	str	r3, [r7, #112]	; 0x70
 8000ef4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ef6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ef8:	d8f0      	bhi.n	8000edc <_VPrintHost+0x98>
 8000efa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000efc:	1c5a      	adds	r2, r3, #1
 8000efe:	677a      	str	r2, [r7, #116]	; 0x74
 8000f00:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000f02:	b2d2      	uxtb	r2, r2
 8000f04:	701a      	strb	r2, [r3, #0]
 8000f06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f08:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 8000f0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000f0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000f12:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f14:	e00b      	b.n	8000f2e <_VPrintHost+0xea>
 8000f16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f1c:	1c59      	adds	r1, r3, #1
 8000f1e:	66f9      	str	r1, [r7, #108]	; 0x6c
 8000f20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	701a      	strb	r2, [r3, #0]
 8000f28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f2a:	09db      	lsrs	r3, r3, #7
 8000f2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f30:	2b7f      	cmp	r3, #127	; 0x7f
 8000f32:	d8f0      	bhi.n	8000f16 <_VPrintHost+0xd2>
 8000f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f36:	1c5a      	adds	r2, r3, #1
 8000f38:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000f3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000f3c:	b2d2      	uxtb	r2, r2
 8000f3e:	701a      	strb	r2, [r3, #0]
 8000f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f42:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8000f4c:	e022      	b.n	8000f94 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 8000f4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f50:	667b      	str	r3, [r7, #100]	; 0x64
 8000f52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	663b      	str	r3, [r7, #96]	; 0x60
 8000f5a:	e00b      	b.n	8000f74 <_VPrintHost+0x130>
 8000f5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f62:	1c59      	adds	r1, r3, #1
 8000f64:	6679      	str	r1, [r7, #100]	; 0x64
 8000f66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	701a      	strb	r2, [r3, #0]
 8000f6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f70:	09db      	lsrs	r3, r3, #7
 8000f72:	663b      	str	r3, [r7, #96]	; 0x60
 8000f74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f76:	2b7f      	cmp	r3, #127	; 0x7f
 8000f78:	d8f0      	bhi.n	8000f5c <_VPrintHost+0x118>
 8000f7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f7c:	1c5a      	adds	r2, r3, #1
 8000f7e:	667a      	str	r2, [r7, #100]	; 0x64
 8000f80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	701a      	strb	r2, [r3, #0]
 8000f86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f88:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 8000f8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f8e:	3304      	adds	r3, #4
 8000f90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8000f94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000f98:	1e5a      	subs	r2, r3, #1
 8000f9a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1d5      	bne.n	8000f4e <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8000fa2:	221a      	movs	r2, #26
 8000fa4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000fa6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000fa8:	f7ff fdde 	bl	8000b68 <_SendPacket>
    RECORD_END();
 8000fac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000fae:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3788      	adds	r7, #136	; 0x88
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000ab0 	.word	0x20000ab0

08000fc0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af02      	add	r7, sp, #8
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
 8000fcc:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fd4:	4917      	ldr	r1, [pc, #92]	; (8001034 <SEGGER_SYSVIEW_Init+0x74>)
 8000fd6:	4818      	ldr	r0, [pc, #96]	; (8001038 <SEGGER_SYSVIEW_Init+0x78>)
 8000fd8:	f7ff fbda 	bl	8000790 <SEGGER_RTT_AllocUpBuffer>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	4b16      	ldr	r3, [pc, #88]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8000fe2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8000fe4:	4b15      	ldr	r3, [pc, #84]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8000fe6:	785a      	ldrb	r2, [r3, #1]
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8000fea:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8000fec:	4b13      	ldr	r3, [pc, #76]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8000fee:	7e1b      	ldrb	r3, [r3, #24]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	2308      	movs	r3, #8
 8000ff8:	4a11      	ldr	r2, [pc, #68]	; (8001040 <SEGGER_SYSVIEW_Init+0x80>)
 8000ffa:	490f      	ldr	r1, [pc, #60]	; (8001038 <SEGGER_SYSVIEW_Init+0x78>)
 8000ffc:	f7ff fc4c 	bl	8000898 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8001000:	4b0e      	ldr	r3, [pc, #56]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8001002:	2200      	movs	r2, #0
 8001004:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001006:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <SEGGER_SYSVIEW_Init+0x84>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a0c      	ldr	r2, [pc, #48]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 800100c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800100e:	4a0b      	ldr	r2, [pc, #44]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8001014:	4a09      	ldr	r2, [pc, #36]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800101a:	4a08      	ldr	r2, [pc, #32]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8001020:	4a06      	ldr	r2, [pc, #24]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8001026:	4b05      	ldr	r3, [pc, #20]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8001028:	2200      	movs	r2, #0
 800102a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800102c:	bf00      	nop
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000678 	.word	0x20000678
 8001038:	0800b6ec 	.word	0x0800b6ec
 800103c:	20000a80 	.word	0x20000a80
 8001040:	20000a78 	.word	0x20000a78
 8001044:	e0001004 	.word	0xe0001004

08001048 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8001050:	4a04      	ldr	r2, [pc, #16]	; (8001064 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6113      	str	r3, [r2, #16]
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000a80 	.word	0x20000a80

08001068 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8001070:	f3ef 8311 	mrs	r3, BASEPRI
 8001074:	f04f 0120 	mov.w	r1, #32
 8001078:	f381 8811 	msr	BASEPRI, r1
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	4808      	ldr	r0, [pc, #32]	; (80010a0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8001080:	f7ff fc86 	bl	8000990 <_PreparePacket>
 8001084:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	68b9      	ldr	r1, [r7, #8]
 800108a:	68b8      	ldr	r0, [r7, #8]
 800108c:	f7ff fd6c 	bl	8000b68 <_SendPacket>
  RECORD_END();
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f383 8811 	msr	BASEPRI, r3
}
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000ab0 	.word	0x20000ab0

080010a4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80010ae:	f3ef 8311 	mrs	r3, BASEPRI
 80010b2:	f04f 0120 	mov.w	r1, #32
 80010b6:	f381 8811 	msr	BASEPRI, r1
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	4816      	ldr	r0, [pc, #88]	; (8001118 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80010be:	f7ff fc67 	bl	8000990 <_PreparePacket>
 80010c2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	61fb      	str	r3, [r7, #28]
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	61bb      	str	r3, [r7, #24]
 80010d0:	e00b      	b.n	80010ea <SEGGER_SYSVIEW_RecordU32+0x46>
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	1c59      	adds	r1, r3, #1
 80010da:	61f9      	str	r1, [r7, #28]
 80010dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80010e0:	b2d2      	uxtb	r2, r2
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	09db      	lsrs	r3, r3, #7
 80010e8:	61bb      	str	r3, [r7, #24]
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	2b7f      	cmp	r3, #127	; 0x7f
 80010ee:	d8f0      	bhi.n	80010d2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	1c5a      	adds	r2, r3, #1
 80010f4:	61fa      	str	r2, [r7, #28]
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	b2d2      	uxtb	r2, r2
 80010fa:	701a      	strb	r2, [r3, #0]
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	68f9      	ldr	r1, [r7, #12]
 8001104:	6938      	ldr	r0, [r7, #16]
 8001106:	f7ff fd2f 	bl	8000b68 <_SendPacket>
  RECORD_END();
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	f383 8811 	msr	BASEPRI, r3
}
 8001110:	bf00      	nop
 8001112:	3720      	adds	r7, #32
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000ab0 	.word	0x20000ab0

0800111c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b08c      	sub	sp, #48	; 0x30
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8001128:	f3ef 8311 	mrs	r3, BASEPRI
 800112c:	f04f 0120 	mov.w	r1, #32
 8001130:	f381 8811 	msr	BASEPRI, r1
 8001134:	61fb      	str	r3, [r7, #28]
 8001136:	4825      	ldr	r0, [pc, #148]	; (80011cc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8001138:	f7ff fc2a 	bl	8000990 <_PreparePacket>
 800113c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
 800114a:	e00b      	b.n	8001164 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800114c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114e:	b2da      	uxtb	r2, r3
 8001150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001152:	1c59      	adds	r1, r3, #1
 8001154:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001156:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	701a      	strb	r2, [r3, #0]
 800115e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001160:	09db      	lsrs	r3, r3, #7
 8001162:	62bb      	str	r3, [r7, #40]	; 0x28
 8001164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001166:	2b7f      	cmp	r3, #127	; 0x7f
 8001168:	d8f0      	bhi.n	800114c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800116a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800116c:	1c5a      	adds	r2, r3, #1
 800116e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001170:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001172:	b2d2      	uxtb	r2, r2
 8001174:	701a      	strb	r2, [r3, #0]
 8001176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001178:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	623b      	str	r3, [r7, #32]
 8001182:	e00b      	b.n	800119c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8001184:	6a3b      	ldr	r3, [r7, #32]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118a:	1c59      	adds	r1, r3, #1
 800118c:	6279      	str	r1, [r7, #36]	; 0x24
 800118e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	701a      	strb	r2, [r3, #0]
 8001196:	6a3b      	ldr	r3, [r7, #32]
 8001198:	09db      	lsrs	r3, r3, #7
 800119a:	623b      	str	r3, [r7, #32]
 800119c:	6a3b      	ldr	r3, [r7, #32]
 800119e:	2b7f      	cmp	r3, #127	; 0x7f
 80011a0:	d8f0      	bhi.n	8001184 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80011a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a4:	1c5a      	adds	r2, r3, #1
 80011a6:	627a      	str	r2, [r7, #36]	; 0x24
 80011a8:	6a3a      	ldr	r2, [r7, #32]
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	701a      	strb	r2, [r3, #0]
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	6979      	ldr	r1, [r7, #20]
 80011b6:	69b8      	ldr	r0, [r7, #24]
 80011b8:	f7ff fcd6 	bl	8000b68 <_SendPacket>
  RECORD_END();
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f383 8811 	msr	BASEPRI, r3
}
 80011c2:	bf00      	nop
 80011c4:	3730      	adds	r7, #48	; 0x30
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000ab0 	.word	0x20000ab0

080011d0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08c      	sub	sp, #48	; 0x30
 80011d4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80011d6:	4b58      	ldr	r3, [pc, #352]	; (8001338 <SEGGER_SYSVIEW_Start+0x168>)
 80011d8:	2201      	movs	r2, #1
 80011da:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80011dc:	f3ef 8311 	mrs	r3, BASEPRI
 80011e0:	f04f 0120 	mov.w	r1, #32
 80011e4:	f381 8811 	msr	BASEPRI, r1
 80011e8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80011ea:	4b53      	ldr	r3, [pc, #332]	; (8001338 <SEGGER_SYSVIEW_Start+0x168>)
 80011ec:	785b      	ldrb	r3, [r3, #1]
 80011ee:	220a      	movs	r2, #10
 80011f0:	4952      	ldr	r1, [pc, #328]	; (800133c <SEGGER_SYSVIEW_Start+0x16c>)
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff f824 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80011fe:	200a      	movs	r0, #10
 8001200:	f7ff ff32 	bl	8001068 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001204:	f3ef 8311 	mrs	r3, BASEPRI
 8001208:	f04f 0120 	mov.w	r1, #32
 800120c:	f381 8811 	msr	BASEPRI, r1
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	484b      	ldr	r0, [pc, #300]	; (8001340 <SEGGER_SYSVIEW_Start+0x170>)
 8001214:	f7ff fbbc 	bl	8000990 <_PreparePacket>
 8001218:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001222:	4b45      	ldr	r3, [pc, #276]	; (8001338 <SEGGER_SYSVIEW_Start+0x168>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	62bb      	str	r3, [r7, #40]	; 0x28
 8001228:	e00b      	b.n	8001242 <SEGGER_SYSVIEW_Start+0x72>
 800122a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800122c:	b2da      	uxtb	r2, r3
 800122e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001230:	1c59      	adds	r1, r3, #1
 8001232:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001234:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	701a      	strb	r2, [r3, #0]
 800123c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800123e:	09db      	lsrs	r3, r3, #7
 8001240:	62bb      	str	r3, [r7, #40]	; 0x28
 8001242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001244:	2b7f      	cmp	r3, #127	; 0x7f
 8001246:	d8f0      	bhi.n	800122a <SEGGER_SYSVIEW_Start+0x5a>
 8001248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800124a:	1c5a      	adds	r2, r3, #1
 800124c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800124e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	701a      	strb	r2, [r3, #0]
 8001254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001256:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
 800125c:	4b36      	ldr	r3, [pc, #216]	; (8001338 <SEGGER_SYSVIEW_Start+0x168>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	623b      	str	r3, [r7, #32]
 8001262:	e00b      	b.n	800127c <SEGGER_SYSVIEW_Start+0xac>
 8001264:	6a3b      	ldr	r3, [r7, #32]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126a:	1c59      	adds	r1, r3, #1
 800126c:	6279      	str	r1, [r7, #36]	; 0x24
 800126e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	701a      	strb	r2, [r3, #0]
 8001276:	6a3b      	ldr	r3, [r7, #32]
 8001278:	09db      	lsrs	r3, r3, #7
 800127a:	623b      	str	r3, [r7, #32]
 800127c:	6a3b      	ldr	r3, [r7, #32]
 800127e:	2b7f      	cmp	r3, #127	; 0x7f
 8001280:	d8f0      	bhi.n	8001264 <SEGGER_SYSVIEW_Start+0x94>
 8001282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001284:	1c5a      	adds	r2, r3, #1
 8001286:	627a      	str	r2, [r7, #36]	; 0x24
 8001288:	6a3a      	ldr	r2, [r7, #32]
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	701a      	strb	r2, [r3, #0]
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	61fb      	str	r3, [r7, #28]
 8001296:	4b28      	ldr	r3, [pc, #160]	; (8001338 <SEGGER_SYSVIEW_Start+0x168>)
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	61bb      	str	r3, [r7, #24]
 800129c:	e00b      	b.n	80012b6 <SEGGER_SYSVIEW_Start+0xe6>
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	1c59      	adds	r1, r3, #1
 80012a6:	61f9      	str	r1, [r7, #28]
 80012a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	701a      	strb	r2, [r3, #0]
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	09db      	lsrs	r3, r3, #7
 80012b4:	61bb      	str	r3, [r7, #24]
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	2b7f      	cmp	r3, #127	; 0x7f
 80012ba:	d8f0      	bhi.n	800129e <SEGGER_SYSVIEW_Start+0xce>
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	1c5a      	adds	r2, r3, #1
 80012c0:	61fa      	str	r2, [r7, #28]
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	b2d2      	uxtb	r2, r2
 80012c6:	701a      	strb	r2, [r3, #0]
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	2300      	movs	r3, #0
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	e00b      	b.n	80012ee <SEGGER_SYSVIEW_Start+0x11e>
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	1c59      	adds	r1, r3, #1
 80012de:	6179      	str	r1, [r7, #20]
 80012e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	701a      	strb	r2, [r3, #0]
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	09db      	lsrs	r3, r3, #7
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	2b7f      	cmp	r3, #127	; 0x7f
 80012f2:	d8f0      	bhi.n	80012d6 <SEGGER_SYSVIEW_Start+0x106>
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	617a      	str	r2, [r7, #20]
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	701a      	strb	r2, [r3, #0]
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8001304:	2218      	movs	r2, #24
 8001306:	6839      	ldr	r1, [r7, #0]
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff fc2d 	bl	8000b68 <_SendPacket>
      RECORD_END();
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <SEGGER_SYSVIEW_Start+0x168>)
 8001316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <SEGGER_SYSVIEW_Start+0x168>)
 800131e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001320:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8001322:	f000 f9eb 	bl	80016fc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8001326:	f000 f9b1 	bl	800168c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800132a:	f000 fb1f 	bl	800196c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800132e:	bf00      	nop
 8001330:	3730      	adds	r7, #48	; 0x30
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000a80 	.word	0x20000a80
 800133c:	0800b7cc 	.word	0x0800b7cc
 8001340:	20000ab0 	.word	0x20000ab0

08001344 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800134a:	f3ef 8311 	mrs	r3, BASEPRI
 800134e:	f04f 0120 	mov.w	r1, #32
 8001352:	f381 8811 	msr	BASEPRI, r1
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	480b      	ldr	r0, [pc, #44]	; (8001388 <SEGGER_SYSVIEW_Stop+0x44>)
 800135a:	f7ff fb19 	bl	8000990 <_PreparePacket>
 800135e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8001360:	4b0a      	ldr	r3, [pc, #40]	; (800138c <SEGGER_SYSVIEW_Stop+0x48>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d007      	beq.n	8001378 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8001368:	220b      	movs	r2, #11
 800136a:	6839      	ldr	r1, [r7, #0]
 800136c:	6838      	ldr	r0, [r7, #0]
 800136e:	f7ff fbfb 	bl	8000b68 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <SEGGER_SYSVIEW_Stop+0x48>)
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f383 8811 	msr	BASEPRI, r3
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000ab0 	.word	0x20000ab0
 800138c:	20000a80 	.word	0x20000a80

08001390 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b08c      	sub	sp, #48	; 0x30
 8001394:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001396:	f3ef 8311 	mrs	r3, BASEPRI
 800139a:	f04f 0120 	mov.w	r1, #32
 800139e:	f381 8811 	msr	BASEPRI, r1
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	4845      	ldr	r0, [pc, #276]	; (80014bc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80013a6:	f7ff faf3 	bl	8000990 <_PreparePacket>
 80013aa:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013b4:	4b42      	ldr	r3, [pc, #264]	; (80014c0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80013ba:	e00b      	b.n	80013d4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80013bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c2:	1c59      	adds	r1, r3, #1
 80013c4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80013c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	701a      	strb	r2, [r3, #0]
 80013ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d0:	09db      	lsrs	r3, r3, #7
 80013d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80013d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d6:	2b7f      	cmp	r3, #127	; 0x7f
 80013d8:	d8f0      	bhi.n	80013bc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80013da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013dc:	1c5a      	adds	r2, r3, #1
 80013de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80013e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	701a      	strb	r2, [r3, #0]
 80013e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
 80013ee:	4b34      	ldr	r3, [pc, #208]	; (80014c0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	623b      	str	r3, [r7, #32]
 80013f4:	e00b      	b.n	800140e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80013f6:	6a3b      	ldr	r3, [r7, #32]
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fc:	1c59      	adds	r1, r3, #1
 80013fe:	6279      	str	r1, [r7, #36]	; 0x24
 8001400:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	701a      	strb	r2, [r3, #0]
 8001408:	6a3b      	ldr	r3, [r7, #32]
 800140a:	09db      	lsrs	r3, r3, #7
 800140c:	623b      	str	r3, [r7, #32]
 800140e:	6a3b      	ldr	r3, [r7, #32]
 8001410:	2b7f      	cmp	r3, #127	; 0x7f
 8001412:	d8f0      	bhi.n	80013f6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	1c5a      	adds	r2, r3, #1
 8001418:	627a      	str	r2, [r7, #36]	; 0x24
 800141a:	6a3a      	ldr	r2, [r7, #32]
 800141c:	b2d2      	uxtb	r2, r2
 800141e:	701a      	strb	r2, [r3, #0]
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	61fb      	str	r3, [r7, #28]
 8001428:	4b25      	ldr	r3, [pc, #148]	; (80014c0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	61bb      	str	r3, [r7, #24]
 800142e:	e00b      	b.n	8001448 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	b2da      	uxtb	r2, r3
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	1c59      	adds	r1, r3, #1
 8001438:	61f9      	str	r1, [r7, #28]
 800143a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	701a      	strb	r2, [r3, #0]
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	09db      	lsrs	r3, r3, #7
 8001446:	61bb      	str	r3, [r7, #24]
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	2b7f      	cmp	r3, #127	; 0x7f
 800144c:	d8f0      	bhi.n	8001430 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	1c5a      	adds	r2, r3, #1
 8001452:	61fa      	str	r2, [r7, #28]
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	701a      	strb	r2, [r3, #0]
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	617b      	str	r3, [r7, #20]
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	e00b      	b.n	8001480 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	b2da      	uxtb	r2, r3
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	1c59      	adds	r1, r3, #1
 8001470:	6179      	str	r1, [r7, #20]
 8001472:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	701a      	strb	r2, [r3, #0]
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	09db      	lsrs	r3, r3, #7
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	2b7f      	cmp	r3, #127	; 0x7f
 8001484:	d8f0      	bhi.n	8001468 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	1c5a      	adds	r2, r3, #1
 800148a:	617a      	str	r2, [r7, #20]
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	b2d2      	uxtb	r2, r2
 8001490:	701a      	strb	r2, [r3, #0]
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8001496:	2218      	movs	r2, #24
 8001498:	6879      	ldr	r1, [r7, #4]
 800149a:	68b8      	ldr	r0, [r7, #8]
 800149c:	f7ff fb64 	bl	8000b68 <_SendPacket>
  RECORD_END();
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80014a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d002      	beq.n	80014b4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80014ae:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80014b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b2:	4798      	blx	r3
  }
}
 80014b4:	bf00      	nop
 80014b6:	3730      	adds	r7, #48	; 0x30
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000ab0 	.word	0x20000ab0
 80014c0:	20000a80 	.word	0x20000a80

080014c4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b092      	sub	sp, #72	; 0x48
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80014cc:	f3ef 8311 	mrs	r3, BASEPRI
 80014d0:	f04f 0120 	mov.w	r1, #32
 80014d4:	f381 8811 	msr	BASEPRI, r1
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	486a      	ldr	r0, [pc, #424]	; (8001684 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80014dc:	f7ff fa58 	bl	8000990 <_PreparePacket>
 80014e0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	647b      	str	r3, [r7, #68]	; 0x44
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	4b66      	ldr	r3, [pc, #408]	; (8001688 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	643b      	str	r3, [r7, #64]	; 0x40
 80014f6:	e00b      	b.n	8001510 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80014f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014fe:	1c59      	adds	r1, r3, #1
 8001500:	6479      	str	r1, [r7, #68]	; 0x44
 8001502:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	701a      	strb	r2, [r3, #0]
 800150a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800150c:	09db      	lsrs	r3, r3, #7
 800150e:	643b      	str	r3, [r7, #64]	; 0x40
 8001510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001512:	2b7f      	cmp	r3, #127	; 0x7f
 8001514:	d8f0      	bhi.n	80014f8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8001516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001518:	1c5a      	adds	r2, r3, #1
 800151a:	647a      	str	r2, [r7, #68]	; 0x44
 800151c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	701a      	strb	r2, [r3, #0]
 8001522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001524:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	63fb      	str	r3, [r7, #60]	; 0x3c
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001530:	e00b      	b.n	800154a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8001532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001534:	b2da      	uxtb	r2, r3
 8001536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001538:	1c59      	adds	r1, r3, #1
 800153a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800153c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	701a      	strb	r2, [r3, #0]
 8001544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001546:	09db      	lsrs	r3, r3, #7
 8001548:	63bb      	str	r3, [r7, #56]	; 0x38
 800154a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800154c:	2b7f      	cmp	r3, #127	; 0x7f
 800154e:	d8f0      	bhi.n	8001532 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8001550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001552:	1c5a      	adds	r2, r3, #1
 8001554:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001556:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	701a      	strb	r2, [r3, #0]
 800155c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800155e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2220      	movs	r2, #32
 8001566:	4619      	mov	r1, r3
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f7ff f9e1 	bl	8000930 <_EncodeStr>
 800156e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8001570:	2209      	movs	r2, #9
 8001572:	68f9      	ldr	r1, [r7, #12]
 8001574:	6938      	ldr	r0, [r7, #16]
 8001576:	f7ff faf7 	bl	8000b68 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	637b      	str	r3, [r7, #52]	; 0x34
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	4b40      	ldr	r3, [pc, #256]	; (8001688 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	633b      	str	r3, [r7, #48]	; 0x30
 800158e:	e00b      	b.n	80015a8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8001590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001592:	b2da      	uxtb	r2, r3
 8001594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001596:	1c59      	adds	r1, r3, #1
 8001598:	6379      	str	r1, [r7, #52]	; 0x34
 800159a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	701a      	strb	r2, [r3, #0]
 80015a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a4:	09db      	lsrs	r3, r3, #7
 80015a6:	633b      	str	r3, [r7, #48]	; 0x30
 80015a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015aa:	2b7f      	cmp	r3, #127	; 0x7f
 80015ac:	d8f0      	bhi.n	8001590 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80015ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015b0:	1c5a      	adds	r2, r3, #1
 80015b2:	637a      	str	r2, [r7, #52]	; 0x34
 80015b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	701a      	strb	r2, [r3, #0]
 80015ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80015c8:	e00b      	b.n	80015e2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80015ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d0:	1c59      	adds	r1, r3, #1
 80015d2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80015d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80015d8:	b2d2      	uxtb	r2, r2
 80015da:	701a      	strb	r2, [r3, #0]
 80015dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015de:	09db      	lsrs	r3, r3, #7
 80015e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80015e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e4:	2b7f      	cmp	r3, #127	; 0x7f
 80015e6:	d8f0      	bhi.n	80015ca <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80015e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ea:	1c5a      	adds	r2, r3, #1
 80015ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80015ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015f0:	b2d2      	uxtb	r2, r2
 80015f2:	701a      	strb	r2, [r3, #0]
 80015f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	623b      	str	r3, [r7, #32]
 8001602:	e00b      	b.n	800161c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8001604:	6a3b      	ldr	r3, [r7, #32]
 8001606:	b2da      	uxtb	r2, r3
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	1c59      	adds	r1, r3, #1
 800160c:	6279      	str	r1, [r7, #36]	; 0x24
 800160e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	701a      	strb	r2, [r3, #0]
 8001616:	6a3b      	ldr	r3, [r7, #32]
 8001618:	09db      	lsrs	r3, r3, #7
 800161a:	623b      	str	r3, [r7, #32]
 800161c:	6a3b      	ldr	r3, [r7, #32]
 800161e:	2b7f      	cmp	r3, #127	; 0x7f
 8001620:	d8f0      	bhi.n	8001604 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	1c5a      	adds	r2, r3, #1
 8001626:	627a      	str	r2, [r7, #36]	; 0x24
 8001628:	6a3a      	ldr	r2, [r7, #32]
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	701a      	strb	r2, [r3, #0]
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	61fb      	str	r3, [r7, #28]
 8001636:	2300      	movs	r3, #0
 8001638:	61bb      	str	r3, [r7, #24]
 800163a:	e00b      	b.n	8001654 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	b2da      	uxtb	r2, r3
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	1c59      	adds	r1, r3, #1
 8001644:	61f9      	str	r1, [r7, #28]
 8001646:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	701a      	strb	r2, [r3, #0]
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	09db      	lsrs	r3, r3, #7
 8001652:	61bb      	str	r3, [r7, #24]
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	2b7f      	cmp	r3, #127	; 0x7f
 8001658:	d8f0      	bhi.n	800163c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	1c5a      	adds	r2, r3, #1
 800165e:	61fa      	str	r2, [r7, #28]
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	701a      	strb	r2, [r3, #0]
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800166a:	2215      	movs	r2, #21
 800166c:	68f9      	ldr	r1, [r7, #12]
 800166e:	6938      	ldr	r0, [r7, #16]
 8001670:	f7ff fa7a 	bl	8000b68 <_SendPacket>
  RECORD_END();
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	f383 8811 	msr	BASEPRI, r3
}
 800167a:	bf00      	nop
 800167c:	3748      	adds	r7, #72	; 0x48
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000ab0 	.word	0x20000ab0
 8001688:	20000a80 	.word	0x20000a80

0800168c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8001690:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d008      	beq.n	80016aa <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80016a2:	4b03      	ldr	r3, [pc, #12]	; (80016b0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	4798      	blx	r3
  }
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000a80 	.word	0x20000a80

080016b4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80016bc:	f3ef 8311 	mrs	r3, BASEPRI
 80016c0:	f04f 0120 	mov.w	r1, #32
 80016c4:	f381 8811 	msr	BASEPRI, r1
 80016c8:	617b      	str	r3, [r7, #20]
 80016ca:	480b      	ldr	r0, [pc, #44]	; (80016f8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80016cc:	f7ff f960 	bl	8000990 <_PreparePacket>
 80016d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80016d2:	2280      	movs	r2, #128	; 0x80
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	6938      	ldr	r0, [r7, #16]
 80016d8:	f7ff f92a 	bl	8000930 <_EncodeStr>
 80016dc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80016de:	220e      	movs	r2, #14
 80016e0:	68f9      	ldr	r1, [r7, #12]
 80016e2:	6938      	ldr	r0, [r7, #16]
 80016e4:	f7ff fa40 	bl	8000b68 <_SendPacket>
  RECORD_END();
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	f383 8811 	msr	BASEPRI, r3
}
 80016ee:	bf00      	nop
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000ab0 	.word	0x20000ab0

080016fc <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80016fc:	b590      	push	{r4, r7, lr}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8001702:	4b15      	ldr	r3, [pc, #84]	; (8001758 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001704:	6a1b      	ldr	r3, [r3, #32]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d01a      	beq.n	8001740 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800170a:	4b13      	ldr	r3, [pc, #76]	; (8001758 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800170c:	6a1b      	ldr	r3, [r3, #32]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d015      	beq.n	8001740 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8001714:	4b10      	ldr	r3, [pc, #64]	; (8001758 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4798      	blx	r3
 800171c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8001720:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8001722:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	f04f 0300 	mov.w	r3, #0
 800172e:	000a      	movs	r2, r1
 8001730:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8001732:	4613      	mov	r3, r2
 8001734:	461a      	mov	r2, r3
 8001736:	4621      	mov	r1, r4
 8001738:	200d      	movs	r0, #13
 800173a:	f7ff fcef 	bl	800111c <SEGGER_SYSVIEW_RecordU32x2>
 800173e:	e006      	b.n	800174e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4619      	mov	r1, r3
 8001746:	200c      	movs	r0, #12
 8001748:	f7ff fcac 	bl	80010a4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800174c:	bf00      	nop
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	bd90      	pop	{r4, r7, pc}
 8001756:	bf00      	nop
 8001758:	20000a80 	.word	0x20000a80
 800175c:	e0001004 	.word	0xe0001004

08001760 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8001766:	f3ef 8311 	mrs	r3, BASEPRI
 800176a:	f04f 0120 	mov.w	r1, #32
 800176e:	f381 8811 	msr	BASEPRI, r1
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	4819      	ldr	r0, [pc, #100]	; (80017dc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8001776:	f7ff f90b 	bl	8000990 <_PreparePacket>
 800177a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8001780:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001788:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	617b      	str	r3, [r7, #20]
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	e00b      	b.n	80017ac <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	b2da      	uxtb	r2, r3
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	1c59      	adds	r1, r3, #1
 800179c:	6179      	str	r1, [r7, #20]
 800179e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	701a      	strb	r2, [r3, #0]
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	09db      	lsrs	r3, r3, #7
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	2b7f      	cmp	r3, #127	; 0x7f
 80017b0:	d8f0      	bhi.n	8001794 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	1c5a      	adds	r2, r3, #1
 80017b6:	617a      	str	r2, [r7, #20]
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	701a      	strb	r2, [r3, #0]
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80017c2:	2202      	movs	r2, #2
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	68b8      	ldr	r0, [r7, #8]
 80017c8:	f7ff f9ce 	bl	8000b68 <_SendPacket>
  RECORD_END();
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f383 8811 	msr	BASEPRI, r3
}
 80017d2:	bf00      	nop
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000ab0 	.word	0x20000ab0
 80017e0:	e000ed04 	.word	0xe000ed04

080017e4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80017ea:	f3ef 8311 	mrs	r3, BASEPRI
 80017ee:	f04f 0120 	mov.w	r1, #32
 80017f2:	f381 8811 	msr	BASEPRI, r1
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	4807      	ldr	r0, [pc, #28]	; (8001818 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80017fa:	f7ff f8c9 	bl	8000990 <_PreparePacket>
 80017fe:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8001800:	2203      	movs	r2, #3
 8001802:	6839      	ldr	r1, [r7, #0]
 8001804:	6838      	ldr	r0, [r7, #0]
 8001806:	f7ff f9af 	bl	8000b68 <_SendPacket>
  RECORD_END();
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f383 8811 	msr	BASEPRI, r3
}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000ab0 	.word	0x20000ab0

0800181c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b08c      	sub	sp, #48	; 0x30
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8001826:	4b40      	ldr	r3, [pc, #256]	; (8001928 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d077      	beq.n	800191e <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800182e:	4b3e      	ldr	r3, [pc, #248]	; (8001928 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8001834:	2300      	movs	r3, #0
 8001836:	62bb      	str	r3, [r7, #40]	; 0x28
 8001838:	e008      	b.n	800184c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800183a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8001840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001842:	2b00      	cmp	r3, #0
 8001844:	d007      	beq.n	8001856 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8001846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001848:	3301      	adds	r3, #1
 800184a:	62bb      	str	r3, [r7, #40]	; 0x28
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001850:	429a      	cmp	r2, r3
 8001852:	d3f2      	bcc.n	800183a <SEGGER_SYSVIEW_SendModule+0x1e>
 8001854:	e000      	b.n	8001858 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8001856:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8001858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185a:	2b00      	cmp	r3, #0
 800185c:	d055      	beq.n	800190a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800185e:	f3ef 8311 	mrs	r3, BASEPRI
 8001862:	f04f 0120 	mov.w	r1, #32
 8001866:	f381 8811 	msr	BASEPRI, r1
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	482f      	ldr	r0, [pc, #188]	; (800192c <SEGGER_SYSVIEW_SendModule+0x110>)
 800186e:	f7ff f88f 	bl	8000990 <_PreparePacket>
 8001872:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	623b      	str	r3, [r7, #32]
 8001880:	e00b      	b.n	800189a <SEGGER_SYSVIEW_SendModule+0x7e>
 8001882:	6a3b      	ldr	r3, [r7, #32]
 8001884:	b2da      	uxtb	r2, r3
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	1c59      	adds	r1, r3, #1
 800188a:	6279      	str	r1, [r7, #36]	; 0x24
 800188c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001890:	b2d2      	uxtb	r2, r2
 8001892:	701a      	strb	r2, [r3, #0]
 8001894:	6a3b      	ldr	r3, [r7, #32]
 8001896:	09db      	lsrs	r3, r3, #7
 8001898:	623b      	str	r3, [r7, #32]
 800189a:	6a3b      	ldr	r3, [r7, #32]
 800189c:	2b7f      	cmp	r3, #127	; 0x7f
 800189e:	d8f0      	bhi.n	8001882 <SEGGER_SYSVIEW_SendModule+0x66>
 80018a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a2:	1c5a      	adds	r2, r3, #1
 80018a4:	627a      	str	r2, [r7, #36]	; 0x24
 80018a6:	6a3a      	ldr	r2, [r7, #32]
 80018a8:	b2d2      	uxtb	r2, r2
 80018aa:	701a      	strb	r2, [r3, #0]
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	61fb      	str	r3, [r7, #28]
 80018b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	61bb      	str	r3, [r7, #24]
 80018ba:	e00b      	b.n	80018d4 <SEGGER_SYSVIEW_SendModule+0xb8>
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	1c59      	adds	r1, r3, #1
 80018c4:	61f9      	str	r1, [r7, #28]
 80018c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	701a      	strb	r2, [r3, #0]
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	09db      	lsrs	r3, r3, #7
 80018d2:	61bb      	str	r3, [r7, #24]
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	2b7f      	cmp	r3, #127	; 0x7f
 80018d8:	d8f0      	bhi.n	80018bc <SEGGER_SYSVIEW_SendModule+0xa0>
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	1c5a      	adds	r2, r3, #1
 80018de:	61fa      	str	r2, [r7, #28]
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	701a      	strb	r2, [r3, #0]
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80018ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2280      	movs	r2, #128	; 0x80
 80018f0:	4619      	mov	r1, r3
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f7ff f81c 	bl	8000930 <_EncodeStr>
 80018f8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80018fa:	2216      	movs	r2, #22
 80018fc:	68f9      	ldr	r1, [r7, #12]
 80018fe:	6938      	ldr	r0, [r7, #16]
 8001900:	f7ff f932 	bl	8000b68 <_SendPacket>
      RECORD_END();
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800190a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800190c:	2b00      	cmp	r3, #0
 800190e:	d006      	beq.n	800191e <SEGGER_SYSVIEW_SendModule+0x102>
 8001910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d002      	beq.n	800191e <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8001918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	4798      	blx	r3
    }
  }
}
 800191e:	bf00      	nop
 8001920:	3730      	adds	r7, #48	; 0x30
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000aa8 	.word	0x20000aa8
 800192c:	20000ab0 	.word	0x20000ab0

08001930 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8001936:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00f      	beq.n	800195e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800193e:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d002      	beq.n	8001952 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f2      	bne.n	8001944 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000aa8 	.word	0x20000aa8

0800196c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8001972:	f3ef 8311 	mrs	r3, BASEPRI
 8001976:	f04f 0120 	mov.w	r1, #32
 800197a:	f381 8811 	msr	BASEPRI, r1
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	4817      	ldr	r0, [pc, #92]	; (80019e0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8001982:	f7ff f805 	bl	8000990 <_PreparePacket>
 8001986:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	4b14      	ldr	r3, [pc, #80]	; (80019e4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	613b      	str	r3, [r7, #16]
 8001996:	e00b      	b.n	80019b0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	b2da      	uxtb	r2, r3
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	1c59      	adds	r1, r3, #1
 80019a0:	6179      	str	r1, [r7, #20]
 80019a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	701a      	strb	r2, [r3, #0]
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	09db      	lsrs	r3, r3, #7
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	2b7f      	cmp	r3, #127	; 0x7f
 80019b4:	d8f0      	bhi.n	8001998 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	1c5a      	adds	r2, r3, #1
 80019ba:	617a      	str	r2, [r7, #20]
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	701a      	strb	r2, [r3, #0]
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80019c6:	221b      	movs	r2, #27
 80019c8:	6879      	ldr	r1, [r7, #4]
 80019ca:	68b8      	ldr	r0, [r7, #8]
 80019cc:	f7ff f8cc 	bl	8000b68 <_SendPacket>
  RECORD_END();
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f383 8811 	msr	BASEPRI, r3
}
 80019d6:	bf00      	nop
 80019d8:	3718      	adds	r7, #24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20000ab0 	.word	0x20000ab0
 80019e4:	20000aac 	.word	0x20000aac

080019e8 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 80019e8:	b40f      	push	{r0, r1, r2, r3}
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80019f6:	1d3b      	adds	r3, r7, #4
 80019f8:	461a      	mov	r2, r3
 80019fa:	2100      	movs	r1, #0
 80019fc:	6938      	ldr	r0, [r7, #16]
 80019fe:	f7ff fa21 	bl	8000e44 <_VPrintHost>
  va_end(ParamList);
#endif
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a0c:	b004      	add	sp, #16
 8001a0e:	4770      	bx	lr

08001a10 <SEGGER_SYSVIEW_Print>:
*    Print a string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Print(const char* s) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08a      	sub	sp, #40	; 0x28
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8001a18:	f3ef 8311 	mrs	r3, BASEPRI
 8001a1c:	f04f 0120 	mov.w	r1, #32
 8001a20:	f381 8811 	msr	BASEPRI, r1
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	4827      	ldr	r0, [pc, #156]	; (8001ac4 <SEGGER_SYSVIEW_Print+0xb4>)
 8001a28:	f7fe ffb2 	bl	8000990 <_PreparePacket>
 8001a2c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8001a2e:	2280      	movs	r2, #128	; 0x80
 8001a30:	6879      	ldr	r1, [r7, #4]
 8001a32:	6938      	ldr	r0, [r7, #16]
 8001a34:	f7fe ff7c 	bl	8000930 <_EncodeStr>
 8001a38:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_LOG);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a3e:	2300      	movs	r3, #0
 8001a40:	623b      	str	r3, [r7, #32]
 8001a42:	e00b      	b.n	8001a5c <SEGGER_SYSVIEW_Print+0x4c>
 8001a44:	6a3b      	ldr	r3, [r7, #32]
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	1c59      	adds	r1, r3, #1
 8001a4c:	6279      	str	r1, [r7, #36]	; 0x24
 8001a4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	701a      	strb	r2, [r3, #0]
 8001a56:	6a3b      	ldr	r3, [r7, #32]
 8001a58:	09db      	lsrs	r3, r3, #7
 8001a5a:	623b      	str	r3, [r7, #32]
 8001a5c:	6a3b      	ldr	r3, [r7, #32]
 8001a5e:	2b7f      	cmp	r3, #127	; 0x7f
 8001a60:	d8f0      	bhi.n	8001a44 <SEGGER_SYSVIEW_Print+0x34>
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	1c5a      	adds	r2, r3, #1
 8001a66:	627a      	str	r2, [r7, #36]	; 0x24
 8001a68:	6a3a      	ldr	r2, [r7, #32]
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	701a      	strb	r2, [r3, #0]
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a70:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	61fb      	str	r3, [r7, #28]
 8001a76:	2300      	movs	r3, #0
 8001a78:	61bb      	str	r3, [r7, #24]
 8001a7a:	e00b      	b.n	8001a94 <SEGGER_SYSVIEW_Print+0x84>
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	1c59      	adds	r1, r3, #1
 8001a84:	61f9      	str	r1, [r7, #28]
 8001a86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001a8a:	b2d2      	uxtb	r2, r2
 8001a8c:	701a      	strb	r2, [r3, #0]
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	09db      	lsrs	r3, r3, #7
 8001a92:	61bb      	str	r3, [r7, #24]
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	2b7f      	cmp	r3, #127	; 0x7f
 8001a98:	d8f0      	bhi.n	8001a7c <SEGGER_SYSVIEW_Print+0x6c>
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	1c5a      	adds	r2, r3, #1
 8001a9e:	61fa      	str	r2, [r7, #28]
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	701a      	strb	r2, [r3, #0]
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8001aaa:	221a      	movs	r2, #26
 8001aac:	68f9      	ldr	r1, [r7, #12]
 8001aae:	6938      	ldr	r0, [r7, #16]
 8001ab0:	f7ff f85a 	bl	8000b68 <_SendPacket>
  RECORD_END();
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	f383 8811 	msr	BASEPRI, r3
}
 8001aba:	bf00      	nop
 8001abc:	3728      	adds	r7, #40	; 0x28
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000ab0 	.word	0x20000ab0

08001ac8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001acc:	4803      	ldr	r0, [pc, #12]	; (8001adc <_cbSendSystemDesc+0x14>)
 8001ace:	f7ff fdf1 	bl	80016b4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001ad2:	4803      	ldr	r0, [pc, #12]	; (8001ae0 <_cbSendSystemDesc+0x18>)
 8001ad4:	f7ff fdee 	bl	80016b4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001ad8:	bf00      	nop
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	0800b6f4 	.word	0x0800b6f4
 8001ae0:	0800b728 	.word	0x0800b728

08001ae4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001ae8:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <SEGGER_SYSVIEW_Conf+0x20>)
 8001aea:	6818      	ldr	r0, [r3, #0]
 8001aec:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <SEGGER_SYSVIEW_Conf+0x20>)
 8001aee:	6819      	ldr	r1, [r3, #0]
 8001af0:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <SEGGER_SYSVIEW_Conf+0x24>)
 8001af2:	4a06      	ldr	r2, [pc, #24]	; (8001b0c <SEGGER_SYSVIEW_Conf+0x28>)
 8001af4:	f7ff fa64 	bl	8000fc0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001af8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001afc:	f7ff faa4 	bl	8001048 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001b00:	bf00      	nop
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000004 	.word	0x20000004
 8001b08:	08001ac9 	.word	0x08001ac9
 8001b0c:	0800b7d8 	.word	0x0800b7d8

08001b10 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001b16:	2300      	movs	r3, #0
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	e048      	b.n	8001bae <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8001b1c:	4929      	ldr	r1, [pc, #164]	; (8001bc4 <_cbSendTaskList+0xb4>)
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	4613      	mov	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	440b      	add	r3, r1
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f008 f907 	bl	8009d40 <uxTaskGetStackHighWaterMark>
 8001b32:	4601      	mov	r1, r0
 8001b34:	4823      	ldr	r0, [pc, #140]	; (8001bc4 <_cbSendTaskList+0xb4>)
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4403      	add	r3, r0
 8001b42:	3310      	adds	r3, #16
 8001b44:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8001b46:	491f      	ldr	r1, [pc, #124]	; (8001bc4 <_cbSendTaskList+0xb4>)
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	440b      	add	r3, r1
 8001b54:	6818      	ldr	r0, [r3, #0]
 8001b56:	491b      	ldr	r1, [pc, #108]	; (8001bc4 <_cbSendTaskList+0xb4>)
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4413      	add	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	440b      	add	r3, r1
 8001b64:	3304      	adds	r3, #4
 8001b66:	6819      	ldr	r1, [r3, #0]
 8001b68:	4c16      	ldr	r4, [pc, #88]	; (8001bc4 <_cbSendTaskList+0xb4>)
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4423      	add	r3, r4
 8001b76:	3308      	adds	r3, #8
 8001b78:	681c      	ldr	r4, [r3, #0]
 8001b7a:	4d12      	ldr	r5, [pc, #72]	; (8001bc4 <_cbSendTaskList+0xb4>)
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	442b      	add	r3, r5
 8001b88:	330c      	adds	r3, #12
 8001b8a:	681d      	ldr	r5, [r3, #0]
 8001b8c:	4e0d      	ldr	r6, [pc, #52]	; (8001bc4 <_cbSendTaskList+0xb4>)
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4433      	add	r3, r6
 8001b9a:	3310      	adds	r3, #16
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	462b      	mov	r3, r5
 8001ba2:	4622      	mov	r2, r4
 8001ba4:	f000 f855 	bl	8001c52 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3301      	adds	r3, #1
 8001bac:	607b      	str	r3, [r7, #4]
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <_cbSendTaskList+0xb8>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d3b1      	bcc.n	8001b1c <_cbSendTaskList+0xc>
  }
}
 8001bb8:	bf00      	nop
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000b94 	.word	0x20000b94
 8001bc8:	20000c34 	.word	0x20000c34

08001bcc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001bcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001bd4:	f007 fd74 	bl	80096c0 <xTaskGetTickCountFromISR>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2200      	movs	r2, #0
 8001bdc:	469a      	mov	sl, r3
 8001bde:	4693      	mov	fp, r2
 8001be0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001be4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	f04f 0a00 	mov.w	sl, #0
 8001bf0:	f04f 0b00 	mov.w	fp, #0
 8001bf4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8001bf8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8001bfc:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8001c00:	4652      	mov	r2, sl
 8001c02:	465b      	mov	r3, fp
 8001c04:	1a14      	subs	r4, r2, r0
 8001c06:	eb63 0501 	sbc.w	r5, r3, r1
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	f04f 0300 	mov.w	r3, #0
 8001c12:	00ab      	lsls	r3, r5, #2
 8001c14:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8001c18:	00a2      	lsls	r2, r4, #2
 8001c1a:	4614      	mov	r4, r2
 8001c1c:	461d      	mov	r5, r3
 8001c1e:	eb14 0800 	adds.w	r8, r4, r0
 8001c22:	eb45 0901 	adc.w	r9, r5, r1
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c3a:	4690      	mov	r8, r2
 8001c3c:	4699      	mov	r9, r3
 8001c3e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8001c42:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001c46:	4610      	mov	r0, r2
 8001c48:	4619      	mov	r1, r3
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001c52 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b08a      	sub	sp, #40	; 0x28
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	60f8      	str	r0, [r7, #12]
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	607a      	str	r2, [r7, #4]
 8001c5e:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	2214      	movs	r2, #20
 8001c66:	2100      	movs	r1, #0
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f009 fc3f 	bl	800b4ec <memset>
  TaskInfo.TaskID     = TaskID;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001c82:	f107 0314 	add.w	r3, r7, #20
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff fc1c 	bl	80014c4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001c8c:	bf00      	nop
 8001c8e:	3728      	adds	r7, #40	; 0x28
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <__NVIC_SetPriorityGrouping+0x40>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cbc:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cc2:	4a04      	ldr	r2, [pc, #16]	; (8001cd4 <__NVIC_SetPriorityGrouping+0x40>)
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	60d3      	str	r3, [r2, #12]
}
 8001cc8:	bf00      	nop
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	e000ed00 	.word	0xe000ed00
 8001cd8:	05fa0000 	.word	0x05fa0000

08001cdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	db0b      	blt.n	8001d06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	f003 021f 	and.w	r2, r3, #31
 8001cf4:	4907      	ldr	r1, [pc, #28]	; (8001d14 <__NVIC_EnableIRQ+0x38>)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	095b      	lsrs	r3, r3, #5
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	fa00 f202 	lsl.w	r2, r0, r2
 8001d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	e000e100 	.word	0xe000e100

08001d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	6039      	str	r1, [r7, #0]
 8001d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	db0a      	blt.n	8001d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	490c      	ldr	r1, [pc, #48]	; (8001d64 <__NVIC_SetPriority+0x4c>)
 8001d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d36:	0112      	lsls	r2, r2, #4
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d40:	e00a      	b.n	8001d58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	4908      	ldr	r1, [pc, #32]	; (8001d68 <__NVIC_SetPriority+0x50>)
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	3b04      	subs	r3, #4
 8001d50:	0112      	lsls	r2, r2, #4
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	440b      	add	r3, r1
 8001d56:	761a      	strb	r2, [r3, #24]
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000e100 	.word	0xe000e100
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d70:	f000 ff93 	bl	8002c9a <HAL_Init>

  /* USER CODE BEGIN Init */
  SEGGER_SYSVIEW_Conf();
 8001d74:	f7ff feb6 	bl	8001ae4 <SEGGER_SYSVIEW_Conf>
  NVIC_SetPriorityGrouping(0);
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f7ff ff8b 	bl	8001c94 <__NVIC_SetPriorityGrouping>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d7e:	f000 f86d 	bl	8001e5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d82:	f000 fa45 	bl	8002210 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d86:	f000 f9e7 	bl	8002158 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001d8a:	f000 f987 	bl	800209c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001d8e:	f000 f9b5 	bl	80020fc <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 8001d92:	f000 f923 	bl	8001fdc <MX_UART4_Init>
  MX_ETH_Init();
 8001d96:	f000 f8d3 	bl	8001f40 <MX_ETH_Init>
  MX_USART2_UART_Init();
 8001d9a:	f000 f94f 	bl	800203c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001d9e:	f005 fd3b 	bl	8007818 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  rxStream = xStreamBufferCreate(100, 1);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2101      	movs	r1, #1
 8001da6:	2064      	movs	r0, #100	; 0x64
 8001da8:	f006 fd40 	bl	800882c <xStreamBufferGenericCreate>
 8001dac:	4603      	mov	r3, r0
 8001dae:	4a1b      	ldr	r2, [pc, #108]	; (8001e1c <main+0xb0>)
 8001db0:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of startUart4Traffic */
  startUart4TrafficHandle = osTimerNew(startUart4TrafficEntry, osTimerOnce, NULL, &startUart4Traffic_attributes);
 8001db2:	4b1b      	ldr	r3, [pc, #108]	; (8001e20 <main+0xb4>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	2100      	movs	r1, #0
 8001db8:	481a      	ldr	r0, [pc, #104]	; (8001e24 <main+0xb8>)
 8001dba:	f005 fe81 	bl	8007ac0 <osTimerNew>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	4a19      	ldr	r2, [pc, #100]	; (8001e28 <main+0xbc>)
 8001dc2:	6013      	str	r3, [r2, #0]

  /* creation of uart4Send */
  uart4SendHandle = osTimerNew(uart4SendEntry, osTimerPeriodic, NULL, &uart4Send_attributes);
 8001dc4:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <main+0xc0>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2101      	movs	r1, #1
 8001dca:	4819      	ldr	r0, [pc, #100]	; (8001e30 <main+0xc4>)
 8001dcc:	f005 fe78 	bl	8007ac0 <osTimerNew>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	4a18      	ldr	r2, [pc, #96]	; (8001e34 <main+0xc8>)
 8001dd4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  osTimerStart(startUart4TrafficHandle, 500 / portTICK_PERIOD_MS);
 8001dd6:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <main+0xbc>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001dde:	4618      	mov	r0, r3
 8001de0:	f005 fef2 	bl	8007bc8 <osTimerStart>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001de4:	4a14      	ldr	r2, [pc, #80]	; (8001e38 <main+0xcc>)
 8001de6:	2100      	movs	r1, #0
 8001de8:	4814      	ldr	r0, [pc, #80]	; (8001e3c <main+0xd0>)
 8001dea:	f005 fd7f 	bl	80078ec <osThreadNew>
 8001dee:	4603      	mov	r3, r0
 8001df0:	4a13      	ldr	r2, [pc, #76]	; (8001e40 <main+0xd4>)
 8001df2:	6013      	str	r3, [r2, #0]

  /* creation of uartPrintTask */
  //uartPrintTaskHandle = osThreadNew(uartPrintTaskEntry, NULL, &uartPrintTask_attributes);
  uartPrintTaskHandle = osThreadNew(uartPrintOutTask, NULL, &uartPrintTask_attributes);
 8001df4:	4a13      	ldr	r2, [pc, #76]	; (8001e44 <main+0xd8>)
 8001df6:	2100      	movs	r1, #0
 8001df8:	4813      	ldr	r0, [pc, #76]	; (8001e48 <main+0xdc>)
 8001dfa:	f005 fd77 	bl	80078ec <osThreadNew>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	4a12      	ldr	r2, [pc, #72]	; (8001e4c <main+0xe0>)
 8001e02:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  HAL_UART_Receive_DMA (&huart2, UART2_rxBuffer, 1);
 8001e04:	2201      	movs	r2, #1
 8001e06:	4912      	ldr	r1, [pc, #72]	; (8001e50 <main+0xe4>)
 8001e08:	4812      	ldr	r0, [pc, #72]	; (8001e54 <main+0xe8>)
 8001e0a:	f004 f832 	bl	8005e72 <HAL_UART_Receive_DMA>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001e0e:	f005 fd37 	bl	8007880 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    SEGGER_SYSVIEW_PrintfHost("problem");
 8001e12:	4811      	ldr	r0, [pc, #68]	; (8001e58 <main+0xec>)
 8001e14:	f7ff fde8 	bl	80019e8 <SEGGER_SYSVIEW_PrintfHost>
 8001e18:	e7fb      	b.n	8001e12 <main+0xa6>
 8001e1a:	bf00      	nop
 8001e1c:	20000cb4 	.word	0x20000cb4
 8001e20:	0800b838 	.word	0x0800b838
 8001e24:	08002571 	.word	0x08002571
 8001e28:	200014b4 	.word	0x200014b4
 8001e2c:	0800b848 	.word	0x0800b848
 8001e30:	08002595 	.word	0x08002595
 8001e34:	200014b8 	.word	0x200014b8
 8001e38:	0800b7f0 	.word	0x0800b7f0
 8001e3c:	08002561 	.word	0x08002561
 8001e40:	200014ac 	.word	0x200014ac
 8001e44:	0800b814 	.word	0x0800b814
 8001e48:	08002425 	.word	0x08002425
 8001e4c:	200014b0 	.word	0x200014b0
 8001e50:	20000cb8 	.word	0x20000cb8
 8001e54:	20000e34 	.word	0x20000e34
 8001e58:	0800b774 	.word	0x0800b774

08001e5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b094      	sub	sp, #80	; 0x50
 8001e60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e62:	f107 031c 	add.w	r3, r7, #28
 8001e66:	2234      	movs	r2, #52	; 0x34
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f009 fb3e 	bl	800b4ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e70:	f107 0308 	add.w	r3, r7, #8
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001e80:	f002 fab8 	bl	80043f4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e84:	4b2c      	ldr	r3, [pc, #176]	; (8001f38 <SystemClock_Config+0xdc>)
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	4a2b      	ldr	r2, [pc, #172]	; (8001f38 <SystemClock_Config+0xdc>)
 8001e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e90:	4b29      	ldr	r3, [pc, #164]	; (8001f38 <SystemClock_Config+0xdc>)
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e98:	607b      	str	r3, [r7, #4]
 8001e9a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e9c:	4b27      	ldr	r3, [pc, #156]	; (8001f3c <SystemClock_Config+0xe0>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ea4:	4a25      	ldr	r2, [pc, #148]	; (8001f3c <SystemClock_Config+0xe0>)
 8001ea6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eaa:	6013      	str	r3, [r2, #0]
 8001eac:	4b23      	ldr	r3, [pc, #140]	; (8001f3c <SystemClock_Config+0xe0>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001eb4:	603b      	str	r3, [r7, #0]
 8001eb6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001ebc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001ec0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ec6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001eca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ecc:	2304      	movs	r3, #4
 8001ece:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001ed0:	2360      	movs	r3, #96	; 0x60
 8001ed2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ed8:	2304      	movs	r3, #4
 8001eda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001edc:	2302      	movs	r3, #2
 8001ede:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ee0:	f107 031c 	add.w	r3, r7, #28
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f002 fae5 	bl	80044b4 <HAL_RCC_OscConfig>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001ef0:	f000 fb7a 	bl	80025e8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001ef4:	f002 fa8e 	bl	8004414 <HAL_PWREx_EnableOverDrive>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001efe:	f000 fb73 	bl	80025e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f02:	230f      	movs	r3, #15
 8001f04:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f06:	2302      	movs	r3, #2
 8001f08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f14:	2300      	movs	r3, #0
 8001f16:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001f18:	f107 0308 	add.w	r3, r7, #8
 8001f1c:	2103      	movs	r1, #3
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f002 fd76 	bl	8004a10 <HAL_RCC_ClockConfig>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001f2a:	f000 fb5d 	bl	80025e8 <Error_Handler>
  }
}
 8001f2e:	bf00      	nop
 8001f30:	3750      	adds	r7, #80	; 0x50
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40007000 	.word	0x40007000

08001f40 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001f44:	4b1f      	ldr	r3, [pc, #124]	; (8001fc4 <MX_ETH_Init+0x84>)
 8001f46:	4a20      	ldr	r2, [pc, #128]	; (8001fc8 <MX_ETH_Init+0x88>)
 8001f48:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001f4a:	4b20      	ldr	r3, [pc, #128]	; (8001fcc <MX_ETH_Init+0x8c>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001f50:	4b1e      	ldr	r3, [pc, #120]	; (8001fcc <MX_ETH_Init+0x8c>)
 8001f52:	2280      	movs	r2, #128	; 0x80
 8001f54:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001f56:	4b1d      	ldr	r3, [pc, #116]	; (8001fcc <MX_ETH_Init+0x8c>)
 8001f58:	22e1      	movs	r2, #225	; 0xe1
 8001f5a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001f5c:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <MX_ETH_Init+0x8c>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001f62:	4b1a      	ldr	r3, [pc, #104]	; (8001fcc <MX_ETH_Init+0x8c>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001f68:	4b18      	ldr	r3, [pc, #96]	; (8001fcc <MX_ETH_Init+0x8c>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001f6e:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <MX_ETH_Init+0x84>)
 8001f70:	4a16      	ldr	r2, [pc, #88]	; (8001fcc <MX_ETH_Init+0x8c>)
 8001f72:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001f74:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <MX_ETH_Init+0x84>)
 8001f76:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001f7a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001f7c:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <MX_ETH_Init+0x84>)
 8001f7e:	4a14      	ldr	r2, [pc, #80]	; (8001fd0 <MX_ETH_Init+0x90>)
 8001f80:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001f82:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <MX_ETH_Init+0x84>)
 8001f84:	4a13      	ldr	r2, [pc, #76]	; (8001fd4 <MX_ETH_Init+0x94>)
 8001f86:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001f88:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <MX_ETH_Init+0x84>)
 8001f8a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001f8e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001f90:	480c      	ldr	r0, [pc, #48]	; (8001fc4 <MX_ETH_Init+0x84>)
 8001f92:	f001 fbfb 	bl	800378c <HAL_ETH_Init>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001f9c:	f000 fb24 	bl	80025e8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001fa0:	2238      	movs	r2, #56	; 0x38
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	480c      	ldr	r0, [pc, #48]	; (8001fd8 <MX_ETH_Init+0x98>)
 8001fa6:	f009 faa1 	bl	800b4ec <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001faa:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <MX_ETH_Init+0x98>)
 8001fac:	2221      	movs	r2, #33	; 0x21
 8001fae:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001fb0:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <MX_ETH_Init+0x98>)
 8001fb2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001fb6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001fb8:	4b07      	ldr	r3, [pc, #28]	; (8001fd8 <MX_ETH_Init+0x98>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000cfc 	.word	0x20000cfc
 8001fc8:	40028000 	.word	0x40028000
 8001fcc:	200014bc 	.word	0x200014bc
 8001fd0:	20000104 	.word	0x20000104
 8001fd4:	20000064 	.word	0x20000064
 8001fd8:	20000cc4 	.word	0x20000cc4

08001fdc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001fe0:	4b14      	ldr	r3, [pc, #80]	; (8002034 <MX_UART4_Init+0x58>)
 8001fe2:	4a15      	ldr	r2, [pc, #84]	; (8002038 <MX_UART4_Init+0x5c>)
 8001fe4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001fe6:	4b13      	ldr	r3, [pc, #76]	; (8002034 <MX_UART4_Init+0x58>)
 8001fe8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fec:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001fee:	4b11      	ldr	r3, [pc, #68]	; (8002034 <MX_UART4_Init+0x58>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <MX_UART4_Init+0x58>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <MX_UART4_Init+0x58>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <MX_UART4_Init+0x58>)
 8002002:	220c      	movs	r2, #12
 8002004:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002006:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <MX_UART4_Init+0x58>)
 8002008:	2200      	movs	r2, #0
 800200a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800200c:	4b09      	ldr	r3, [pc, #36]	; (8002034 <MX_UART4_Init+0x58>)
 800200e:	2200      	movs	r2, #0
 8002010:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002012:	4b08      	ldr	r3, [pc, #32]	; (8002034 <MX_UART4_Init+0x58>)
 8002014:	2200      	movs	r2, #0
 8002016:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002018:	4b06      	ldr	r3, [pc, #24]	; (8002034 <MX_UART4_Init+0x58>)
 800201a:	2200      	movs	r2, #0
 800201c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800201e:	4805      	ldr	r0, [pc, #20]	; (8002034 <MX_UART4_Init+0x58>)
 8002020:	f003 fe56 	bl	8005cd0 <HAL_UART_Init>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800202a:	f000 fadd 	bl	80025e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20000dac 	.word	0x20000dac
 8002038:	40004c00 	.word	0x40004c00

0800203c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002040:	4b14      	ldr	r3, [pc, #80]	; (8002094 <MX_USART2_UART_Init+0x58>)
 8002042:	4a15      	ldr	r2, [pc, #84]	; (8002098 <MX_USART2_UART_Init+0x5c>)
 8002044:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002046:	4b13      	ldr	r3, [pc, #76]	; (8002094 <MX_USART2_UART_Init+0x58>)
 8002048:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800204c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800204e:	4b11      	ldr	r3, [pc, #68]	; (8002094 <MX_USART2_UART_Init+0x58>)
 8002050:	2200      	movs	r2, #0
 8002052:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002054:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <MX_USART2_UART_Init+0x58>)
 8002056:	2200      	movs	r2, #0
 8002058:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800205a:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <MX_USART2_UART_Init+0x58>)
 800205c:	2200      	movs	r2, #0
 800205e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <MX_USART2_UART_Init+0x58>)
 8002062:	220c      	movs	r2, #12
 8002064:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002066:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <MX_USART2_UART_Init+0x58>)
 8002068:	2200      	movs	r2, #0
 800206a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800206c:	4b09      	ldr	r3, [pc, #36]	; (8002094 <MX_USART2_UART_Init+0x58>)
 800206e:	2200      	movs	r2, #0
 8002070:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002072:	4b08      	ldr	r3, [pc, #32]	; (8002094 <MX_USART2_UART_Init+0x58>)
 8002074:	2200      	movs	r2, #0
 8002076:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002078:	4b06      	ldr	r3, [pc, #24]	; (8002094 <MX_USART2_UART_Init+0x58>)
 800207a:	2200      	movs	r2, #0
 800207c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800207e:	4805      	ldr	r0, [pc, #20]	; (8002094 <MX_USART2_UART_Init+0x58>)
 8002080:	f003 fe26 	bl	8005cd0 <HAL_UART_Init>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800208a:	f000 faad 	bl	80025e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000e34 	.word	0x20000e34
 8002098:	40004400 	.word	0x40004400

0800209c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020a0:	4b14      	ldr	r3, [pc, #80]	; (80020f4 <MX_USART3_UART_Init+0x58>)
 80020a2:	4a15      	ldr	r2, [pc, #84]	; (80020f8 <MX_USART3_UART_Init+0x5c>)
 80020a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80020a6:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <MX_USART3_UART_Init+0x58>)
 80020a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020ae:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <MX_USART3_UART_Init+0x58>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020b4:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <MX_USART3_UART_Init+0x58>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020ba:	4b0e      	ldr	r3, [pc, #56]	; (80020f4 <MX_USART3_UART_Init+0x58>)
 80020bc:	2200      	movs	r2, #0
 80020be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020c0:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <MX_USART3_UART_Init+0x58>)
 80020c2:	220c      	movs	r2, #12
 80020c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020c6:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <MX_USART3_UART_Init+0x58>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020cc:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <MX_USART3_UART_Init+0x58>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020d2:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <MX_USART3_UART_Init+0x58>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020d8:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <MX_USART3_UART_Init+0x58>)
 80020da:	2200      	movs	r2, #0
 80020dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020de:	4805      	ldr	r0, [pc, #20]	; (80020f4 <MX_USART3_UART_Init+0x58>)
 80020e0:	f003 fdf6 	bl	8005cd0 <HAL_UART_Init>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80020ea:	f000 fa7d 	bl	80025e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000ebc 	.word	0x20000ebc
 80020f8:	40004800 	.word	0x40004800

080020fc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002100:	4b14      	ldr	r3, [pc, #80]	; (8002154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002102:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002106:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002108:	4b12      	ldr	r3, [pc, #72]	; (8002154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800210a:	2206      	movs	r2, #6
 800210c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800210e:	4b11      	ldr	r3, [pc, #68]	; (8002154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002110:	2202      	movs	r2, #2
 8002112:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002114:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002116:	2200      	movs	r2, #0
 8002118:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800211a:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800211c:	2202      	movs	r2, #2
 800211e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002120:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002122:	2201      	movs	r2, #1
 8002124:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002126:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002128:	2200      	movs	r2, #0
 800212a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800212c:	4b09      	ldr	r3, [pc, #36]	; (8002154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800212e:	2200      	movs	r2, #0
 8002130:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002132:	4b08      	ldr	r3, [pc, #32]	; (8002154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002134:	2201      	movs	r2, #1
 8002136:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002138:	4b06      	ldr	r3, [pc, #24]	; (8002154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800213a:	2200      	movs	r2, #0
 800213c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800213e:	4805      	ldr	r0, [pc, #20]	; (8002154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002140:	f002 f80f 	bl	8004162 <HAL_PCD_Init>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800214a:	f000 fa4d 	bl	80025e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20000fa4 	.word	0x20000fa4

08002158 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800215e:	4b28      	ldr	r3, [pc, #160]	; (8002200 <MX_DMA_Init+0xa8>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	4a27      	ldr	r2, [pc, #156]	; (8002200 <MX_DMA_Init+0xa8>)
 8002164:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002168:	6313      	str	r3, [r2, #48]	; 0x30
 800216a:	4b25      	ldr	r3, [pc, #148]	; (8002200 <MX_DMA_Init+0xa8>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002172:	607b      	str	r3, [r7, #4]
 8002174:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002176:	2200      	movs	r2, #0
 8002178:	2105      	movs	r1, #5
 800217a:	2010      	movs	r0, #16
 800217c:	f000 fe96 	bl	8002eac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002180:	2010      	movs	r0, #16
 8002182:	f000 feaf 	bl	8002ee4 <HAL_NVIC_EnableIRQ>
	memset(&usart2DmaRx, 0, sizeof(usart2DmaRx));
 8002186:	2260      	movs	r2, #96	; 0x60
 8002188:	2100      	movs	r1, #0
 800218a:	481e      	ldr	r0, [pc, #120]	; (8002204 <MX_DMA_Init+0xac>)
 800218c:	f009 f9ae 	bl	800b4ec <memset>
	usart2DmaRx.Instance = DMA1_Stream5;					//stream 5 is for USART2 Rx
 8002190:	4b1c      	ldr	r3, [pc, #112]	; (8002204 <MX_DMA_Init+0xac>)
 8002192:	4a1d      	ldr	r2, [pc, #116]	; (8002208 <MX_DMA_Init+0xb0>)
 8002194:	601a      	str	r2, [r3, #0]
	usart2DmaRx.Init.Channel = DMA_CHANNEL_4;				//channel 4 is for USART2 Rx/Tx
 8002196:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <MX_DMA_Init+0xac>)
 8002198:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800219c:	605a      	str	r2, [r3, #4]
	usart2DmaRx.Init.Direction = DMA_PERIPH_TO_MEMORY;	//transfering out of memory and into the peripheral register
 800219e:	4b19      	ldr	r3, [pc, #100]	; (8002204 <MX_DMA_Init+0xac>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	609a      	str	r2, [r3, #8]
	usart2DmaRx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;		//no fifo
 80021a4:	4b17      	ldr	r3, [pc, #92]	; (8002204 <MX_DMA_Init+0xac>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	625a      	str	r2, [r3, #36]	; 0x24
	usart2DmaRx.Init.MemBurst = DMA_MBURST_SINGLE;		//transfer 1 at a time
 80021aa:	4b16      	ldr	r3, [pc, #88]	; (8002204 <MX_DMA_Init+0xac>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	62da      	str	r2, [r3, #44]	; 0x2c
	usart2DmaRx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021b0:	4b14      	ldr	r3, [pc, #80]	; (8002204 <MX_DMA_Init+0xac>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	619a      	str	r2, [r3, #24]
	usart2DmaRx.Init.MemInc = DMA_MINC_ENABLE;			//increment 1 byte at a time
 80021b6:	4b13      	ldr	r3, [pc, #76]	; (8002204 <MX_DMA_Init+0xac>)
 80021b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021bc:	611a      	str	r2, [r3, #16]
	usart2DmaRx.Init.Mode = DMA_NORMAL;					//flow control mode set to normal
 80021be:	4b11      	ldr	r3, [pc, #68]	; (8002204 <MX_DMA_Init+0xac>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	61da      	str	r2, [r3, #28]
	usart2DmaRx.Init.PeriphBurst = DMA_PBURST_SINGLE;		//write 1 at a time to the peripheral
 80021c4:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <MX_DMA_Init+0xac>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	631a      	str	r2, [r3, #48]	; 0x30
	usart2DmaRx.Init.PeriphInc = DMA_PINC_DISABLE;		//always keep the peripheral address the same (the RX data register is always in the same location)
 80021ca:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <MX_DMA_Init+0xac>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	60da      	str	r2, [r3, #12]
	usart2DmaRx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021d0:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <MX_DMA_Init+0xac>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	615a      	str	r2, [r3, #20]
	usart2DmaRx.Init.Priority = DMA_PRIORITY_HIGH;
 80021d6:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <MX_DMA_Init+0xac>)
 80021d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021dc:	621a      	str	r2, [r3, #32]
	assert_param(HAL_DMA_Init(&usart2DmaRx) == HAL_OK);

	DMA1_Stream5->CR |= DMA_SxCR_TCIE;	//enable transfer complete interrupts
 80021de:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <MX_DMA_Init+0xb0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a09      	ldr	r2, [pc, #36]	; (8002208 <MX_DMA_Init+0xb0>)
 80021e4:	f043 0310 	orr.w	r3, r3, #16
 80021e8:	6013      	str	r3, [r2, #0]
	USART2->CR3 |= USART_CR3_DMAR_Msk;	//set the DMA receive mode flag in the USART
 80021ea:	4b08      	ldr	r3, [pc, #32]	; (800220c <MX_DMA_Init+0xb4>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	4a07      	ldr	r2, [pc, #28]	; (800220c <MX_DMA_Init+0xb4>)
 80021f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021f4:	6093      	str	r3, [r2, #8]

}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40023800 	.word	0x40023800
 8002204:	20000c38 	.word	0x20000c38
 8002208:	40026088 	.word	0x40026088
 800220c:	40004400 	.word	0x40004400

08002210 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08c      	sub	sp, #48	; 0x30
 8002214:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002216:	f107 031c 	add.w	r3, r7, #28
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	605a      	str	r2, [r3, #4]
 8002220:	609a      	str	r2, [r3, #8]
 8002222:	60da      	str	r2, [r3, #12]
 8002224:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002226:	4b47      	ldr	r3, [pc, #284]	; (8002344 <MX_GPIO_Init+0x134>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	4a46      	ldr	r2, [pc, #280]	; (8002344 <MX_GPIO_Init+0x134>)
 800222c:	f043 0304 	orr.w	r3, r3, #4
 8002230:	6313      	str	r3, [r2, #48]	; 0x30
 8002232:	4b44      	ldr	r3, [pc, #272]	; (8002344 <MX_GPIO_Init+0x134>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	f003 0304 	and.w	r3, r3, #4
 800223a:	61bb      	str	r3, [r7, #24]
 800223c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800223e:	4b41      	ldr	r3, [pc, #260]	; (8002344 <MX_GPIO_Init+0x134>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	4a40      	ldr	r2, [pc, #256]	; (8002344 <MX_GPIO_Init+0x134>)
 8002244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002248:	6313      	str	r3, [r2, #48]	; 0x30
 800224a:	4b3e      	ldr	r3, [pc, #248]	; (8002344 <MX_GPIO_Init+0x134>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002256:	4b3b      	ldr	r3, [pc, #236]	; (8002344 <MX_GPIO_Init+0x134>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	4a3a      	ldr	r2, [pc, #232]	; (8002344 <MX_GPIO_Init+0x134>)
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	6313      	str	r3, [r2, #48]	; 0x30
 8002262:	4b38      	ldr	r3, [pc, #224]	; (8002344 <MX_GPIO_Init+0x134>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	613b      	str	r3, [r7, #16]
 800226c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800226e:	4b35      	ldr	r3, [pc, #212]	; (8002344 <MX_GPIO_Init+0x134>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	4a34      	ldr	r2, [pc, #208]	; (8002344 <MX_GPIO_Init+0x134>)
 8002274:	f043 0302 	orr.w	r3, r3, #2
 8002278:	6313      	str	r3, [r2, #48]	; 0x30
 800227a:	4b32      	ldr	r3, [pc, #200]	; (8002344 <MX_GPIO_Init+0x134>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002286:	4b2f      	ldr	r3, [pc, #188]	; (8002344 <MX_GPIO_Init+0x134>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	4a2e      	ldr	r2, [pc, #184]	; (8002344 <MX_GPIO_Init+0x134>)
 800228c:	f043 0308 	orr.w	r3, r3, #8
 8002290:	6313      	str	r3, [r2, #48]	; 0x30
 8002292:	4b2c      	ldr	r3, [pc, #176]	; (8002344 <MX_GPIO_Init+0x134>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	f003 0308 	and.w	r3, r3, #8
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800229e:	4b29      	ldr	r3, [pc, #164]	; (8002344 <MX_GPIO_Init+0x134>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	4a28      	ldr	r2, [pc, #160]	; (8002344 <MX_GPIO_Init+0x134>)
 80022a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022a8:	6313      	str	r3, [r2, #48]	; 0x30
 80022aa:	4b26      	ldr	r3, [pc, #152]	; (8002344 <MX_GPIO_Init+0x134>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b2:	607b      	str	r3, [r7, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80022b6:	2200      	movs	r2, #0
 80022b8:	f244 0181 	movw	r1, #16513	; 0x4081
 80022bc:	4822      	ldr	r0, [pc, #136]	; (8002348 <MX_GPIO_Init+0x138>)
 80022be:	f001 ff37 	bl	8004130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80022c2:	2200      	movs	r2, #0
 80022c4:	2140      	movs	r1, #64	; 0x40
 80022c6:	4821      	ldr	r0, [pc, #132]	; (800234c <MX_GPIO_Init+0x13c>)
 80022c8:	f001 ff32 	bl	8004130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80022cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80022dc:	f107 031c 	add.w	r3, r7, #28
 80022e0:	4619      	mov	r1, r3
 80022e2:	481b      	ldr	r0, [pc, #108]	; (8002350 <MX_GPIO_Init+0x140>)
 80022e4:	f001 fd78 	bl	8003dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80022e8:	f244 0381 	movw	r3, #16513	; 0x4081
 80022ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ee:	2301      	movs	r3, #1
 80022f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f6:	2300      	movs	r3, #0
 80022f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022fa:	f107 031c 	add.w	r3, r7, #28
 80022fe:	4619      	mov	r1, r3
 8002300:	4811      	ldr	r0, [pc, #68]	; (8002348 <MX_GPIO_Init+0x138>)
 8002302:	f001 fd69 	bl	8003dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002306:	2340      	movs	r3, #64	; 0x40
 8002308:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800230a:	2301      	movs	r3, #1
 800230c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002312:	2300      	movs	r3, #0
 8002314:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002316:	f107 031c 	add.w	r3, r7, #28
 800231a:	4619      	mov	r1, r3
 800231c:	480b      	ldr	r0, [pc, #44]	; (800234c <MX_GPIO_Init+0x13c>)
 800231e:	f001 fd5b 	bl	8003dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002322:	2380      	movs	r3, #128	; 0x80
 8002324:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002326:	2300      	movs	r3, #0
 8002328:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	2300      	movs	r3, #0
 800232c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800232e:	f107 031c 	add.w	r3, r7, #28
 8002332:	4619      	mov	r1, r3
 8002334:	4805      	ldr	r0, [pc, #20]	; (800234c <MX_GPIO_Init+0x13c>)
 8002336:	f001 fd4f 	bl	8003dd8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800233a:	bf00      	nop
 800233c:	3730      	adds	r7, #48	; 0x30
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40023800 	.word	0x40023800
 8002348:	40020400 	.word	0x40020400
 800234c:	40021800 	.word	0x40021800
 8002350:	40020800 	.word	0x40020800

08002354 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]

    //HAL_UART_Receive_DMA (&huart2, UART2_rxBuffer, 1);
    //SEGGER_SYSVIEW_PrintfHost(&UART2_rxBuffer);
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <startReceiveDMA>:

int32_t startReceiveDMA( uint8_t* Buffer, uint_fast16_t Len )
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
	if(!rxInProgress && (Buffer != NULL))
 8002372:	4b20      	ldr	r3, [pc, #128]	; (80023f4 <startReceiveDMA+0x8c>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	f083 0301 	eor.w	r3, r3, #1
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	d033      	beq.n	80023e8 <startReceiveDMA+0x80>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d030      	beq.n	80023e8 <startReceiveDMA+0x80>
	{
		rxInProgress = true;
 8002386:	4b1b      	ldr	r3, [pc, #108]	; (80023f4 <startReceiveDMA+0x8c>)
 8002388:	2201      	movs	r2, #1
 800238a:	701a      	strb	r2, [r3, #0]
		rxLen = Len;
 800238c:	4a1a      	ldr	r2, [pc, #104]	; (80023f8 <startReceiveDMA+0x90>)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	6013      	str	r3, [r2, #0]

		//get the DMA peripheral ready to receive data immediately before enabling UART
		//so there is no chance of overrun
		//dma stream enable bit must be toggled before a transfer will properly restart
		__HAL_DMA_DISABLE(&usart2DmaRx);
 8002392:	4b1a      	ldr	r3, [pc, #104]	; (80023fc <startReceiveDMA+0x94>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	4b18      	ldr	r3, [pc, #96]	; (80023fc <startReceiveDMA+0x94>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 0201 	bic.w	r2, r2, #1
 80023a0:	601a      	str	r2, [r3, #0]
		MX_DMA_Init();
 80023a2:	f7ff fed9 	bl	8002158 <MX_DMA_Init>
		if(HAL_DMA_Start(&usart2DmaRx, (uint32_t)&(USART2->RDR), (uint32_t) Buffer, Len) != HAL_OK)
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	4915      	ldr	r1, [pc, #84]	; (8002400 <startReceiveDMA+0x98>)
 80023ac:	4813      	ldr	r0, [pc, #76]	; (80023fc <startReceiveDMA+0x94>)
 80023ae:	f000 fe55 	bl	800305c <HAL_DMA_Start>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d002      	beq.n	80023be <startReceiveDMA+0x56>
		{
			return -1;
 80023b8:	f04f 33ff 	mov.w	r3, #4294967295
 80023bc:	e016      	b.n	80023ec <startReceiveDMA+0x84>
		}

		//enable the UART
		//clears error flags
		USART2->ICR |= (USART_ICR_FECF | USART_ICR_PECF |
 80023be:	4b11      	ldr	r3, [pc, #68]	; (8002404 <startReceiveDMA+0x9c>)
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	4a10      	ldr	r2, [pc, #64]	; (8002404 <startReceiveDMA+0x9c>)
 80023c4:	f043 030f 	orr.w	r3, r3, #15
 80023c8:	6213      	str	r3, [r2, #32]
		//we'll wind up with a lot of noise on the line (the way the ISR is written will
		//cause a transfer to terminate if there are any errors are detected, rather than simply
		//continue with what data it can).  In practice, most of the "errors" at baudrates below
		//460800 are noise detection
//		USART2->CR3 |= (USART_CR3_EIE);	//enable error interrupts
		NVIC_SetPriority(USART2_IRQn, 6);
 80023ca:	2106      	movs	r1, #6
 80023cc:	2026      	movs	r0, #38	; 0x26
 80023ce:	f7ff fca3 	bl	8001d18 <__NVIC_SetPriority>
		NVIC_EnableIRQ(USART2_IRQn);
 80023d2:	2026      	movs	r0, #38	; 0x26
 80023d4:	f7ff fc82 	bl	8001cdc <__NVIC_EnableIRQ>
		USART2->CR1 |= (USART_CR1_UE);
 80023d8:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <startReceiveDMA+0x9c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a09      	ldr	r2, [pc, #36]	; (8002404 <startReceiveDMA+0x9c>)
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	6013      	str	r3, [r2, #0]
		return 0;
 80023e4:	2300      	movs	r3, #0
 80023e6:	e001      	b.n	80023ec <startReceiveDMA+0x84>
	}

	return -1;
 80023e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	20000c98 	.word	0x20000c98
 80023f8:	20000c9c 	.word	0x20000c9c
 80023fc:	20000c38 	.word	0x20000c38
 8002400:	40004424 	.word	0x40004424
 8002404:	40004400 	.word	0x40004400

08002408 <stopReceiveDMA>:

void stopReceiveDMA( void )
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
	rxInProgress = false;
 800240c:	4b03      	ldr	r3, [pc, #12]	; (800241c <stopReceiveDMA+0x14>)
 800240e:	2200      	movs	r2, #0
 8002410:	701a      	strb	r2, [r3, #0]
	HAL_DMA_Abort(&usart2DmaRx);
 8002412:	4803      	ldr	r0, [pc, #12]	; (8002420 <stopReceiveDMA+0x18>)
 8002414:	f000 febd 	bl	8003192 <HAL_DMA_Abort>
}
 8002418:	bf00      	nop
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20000c98 	.word	0x20000c98
 8002420:	20000c38 	.word	0x20000c38

08002424 <uartPrintOutTask>:
void uartPrintOutTask( void* NotUsed)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b088      	sub	sp, #32
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
	uint8_t rxBufferedData[20];
	uint8_t numBytesReceived = 16;
 800242c:	2310      	movs	r3, #16
 800242e:	77fb      	strb	r3, [r7, #31]

	MX_DMA_Init();
 8002430:	f7ff fe92 	bl	8002158 <MX_DMA_Init>
	//STM_UartInit(USART2, BAUDRATE, NULL, &usart2DmaRx);
	MX_USART2_UART_Init();
 8002434:	f7ff fe02 	bl	800203c <MX_USART2_UART_Init>
	while(1)
	{
		//SEGGER_SYSVIEW_PrintfHost("Printer task");
		memset(rxBufferedData, 0, 20);
 8002438:	f107 0308 	add.w	r3, r7, #8
 800243c:	2214      	movs	r2, #20
 800243e:	2100      	movs	r1, #0
 8002440:	4618      	mov	r0, r3
 8002442:	f009 f853 	bl	800b4ec <memset>
		startReceiveDMA(rxData, expectedLen);
 8002446:	4b11      	ldr	r3, [pc, #68]	; (800248c <uartPrintOutTask+0x68>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	4619      	mov	r1, r3
 800244c:	4810      	ldr	r0, [pc, #64]	; (8002490 <uartPrintOutTask+0x6c>)
 800244e:	f7ff ff8b 	bl	8002368 <startReceiveDMA>
		uint8_t numBytes = xStreamBufferReceive(	rxStream,
 8002452:	4b10      	ldr	r3, [pc, #64]	; (8002494 <uartPrintOutTask+0x70>)
 8002454:	6818      	ldr	r0, [r3, #0]
 8002456:	7ffa      	ldrb	r2, [r7, #31]
 8002458:	f107 0108 	add.w	r1, r7, #8
 800245c:	2364      	movs	r3, #100	; 0x64
 800245e:	f006 fbec 	bl	8008c3a <xStreamBufferReceive>
 8002462:	4603      	mov	r3, r0
 8002464:	77bb      	strb	r3, [r7, #30]
													rxBufferedData,
													numBytesReceived,
													100 );
		if(numBytes > 0)
 8002466:	7fbb      	ldrb	r3, [r7, #30]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d008      	beq.n	800247e <uartPrintOutTask+0x5a>
		{
			SEGGER_SYSVIEW_PrintfHost("received: ");
 800246c:	480a      	ldr	r0, [pc, #40]	; (8002498 <uartPrintOutTask+0x74>)
 800246e:	f7ff fabb 	bl	80019e8 <SEGGER_SYSVIEW_PrintfHost>
			SEGGER_SYSVIEW_Print((char*)rxBufferedData);
 8002472:	f107 0308 	add.w	r3, r7, #8
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff faca 	bl	8001a10 <SEGGER_SYSVIEW_Print>
 800247c:	e7dc      	b.n	8002438 <uartPrintOutTask+0x14>
		}
		else
		{
	        stopReceiveDMA();
 800247e:	f7ff ffc3 	bl	8002408 <stopReceiveDMA>
			SEGGER_SYSVIEW_PrintfHost("timeout");
 8002482:	4806      	ldr	r0, [pc, #24]	; (800249c <uartPrintOutTask+0x78>)
 8002484:	f7ff fab0 	bl	80019e8 <SEGGER_SYSVIEW_PrintfHost>
	{
 8002488:	e7d6      	b.n	8002438 <uartPrintOutTask+0x14>
 800248a:	bf00      	nop
 800248c:	20000000 	.word	0x20000000
 8002490:	20000ca0 	.word	0x20000ca0
 8002494:	20000cb4 	.word	0x20000cb4
 8002498:	0800b77c 	.word	0x0800b77c
 800249c:	0800b788 	.word	0x0800b788

080024a0 <DMA1_Stream5_IRQHandler>:
	}
}


void DMA1_Stream5_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */


	//HAL_UART_Receive_DMA(&huart2, tmpBuffer, 14);
	  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80024a6:	4823      	ldr	r0, [pc, #140]	; (8002534 <DMA1_Stream5_IRQHandler+0x94>)
 80024a8:	f000 ff06 	bl	80032b8 <HAL_DMA_IRQHandler>
	HAL_UART_Receive_DMA (&huart2, UART2_rxBuffer, 10);
 80024ac:	220a      	movs	r2, #10
 80024ae:	4922      	ldr	r1, [pc, #136]	; (8002538 <DMA1_Stream5_IRQHandler+0x98>)
 80024b0:	4822      	ldr	r0, [pc, #136]	; (800253c <DMA1_Stream5_IRQHandler+0x9c>)
 80024b2:	f003 fcde 	bl	8005e72 <HAL_UART_Receive_DMA>
	//SEGGER_SYSVIEW_PrintfHost("i");
  /* USER CODE END DMA1_Stream5_IRQn 0 */

    //SEGGER_SYSVIEW_PrintfHost(&UART2_rxBuffer);
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 80024b6:	2300      	movs	r3, #0
 80024b8:	607b      	str	r3, [r7, #4]
	SEGGER_SYSVIEW_RecordEnterISR();
 80024ba:	f7ff f951 	bl	8001760 <SEGGER_SYSVIEW_RecordEnterISR>


	if(rxInProgress && (DMA1->HISR & DMA_HISR_TCIF5))
 80024be:	4b20      	ldr	r3, [pc, #128]	; (8002540 <DMA1_Stream5_IRQHandler+0xa0>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d024      	beq.n	8002510 <DMA1_Stream5_IRQHandler+0x70>
 80024c6:	4b1f      	ldr	r3, [pc, #124]	; (8002544 <DMA1_Stream5_IRQHandler+0xa4>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d01e      	beq.n	8002510 <DMA1_Stream5_IRQHandler+0x70>
	{
		rxInProgress = false;
 80024d2:	4b1b      	ldr	r3, [pc, #108]	; (8002540 <DMA1_Stream5_IRQHandler+0xa0>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]
		DMA1->HIFCR |= DMA_HIFCR_CTCIF5;
 80024d8:	4b1a      	ldr	r3, [pc, #104]	; (8002544 <DMA1_Stream5_IRQHandler+0xa4>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	4a19      	ldr	r2, [pc, #100]	; (8002544 <DMA1_Stream5_IRQHandler+0xa4>)
 80024de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024e2:	60d3      	str	r3, [r2, #12]
		SEGGER_SYSVIEW_PrintfHost(&rxData);
 80024e4:	4818      	ldr	r0, [pc, #96]	; (8002548 <DMA1_Stream5_IRQHandler+0xa8>)
 80024e6:	f7ff fa7f 	bl	80019e8 <SEGGER_SYSVIEW_PrintfHost>
		xStreamBufferSend(	rxStream,
 80024ea:	4b18      	ldr	r3, [pc, #96]	; (800254c <DMA1_Stream5_IRQHandler+0xac>)
 80024ec:	6818      	ldr	r0, [r3, #0]
 80024ee:	2364      	movs	r3, #100	; 0x64
 80024f0:	2201      	movs	r2, #1
 80024f2:	4917      	ldr	r1, [pc, #92]	; (8002550 <DMA1_Stream5_IRQHandler+0xb0>)
 80024f4:	f006 fa30 	bl	8008958 <xStreamBufferSend>
							"t",
							1,
							100);
		xStreamBufferSendFromISR(	rxStream,
 80024f8:	4b14      	ldr	r3, [pc, #80]	; (800254c <DMA1_Stream5_IRQHandler+0xac>)
 80024fa:	6818      	ldr	r0, [r3, #0]
 80024fc:	4b15      	ldr	r3, [pc, #84]	; (8002554 <DMA1_Stream5_IRQHandler+0xb4>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	461a      	mov	r2, r3
									rxData,
									expectedLen - DMA1_Stream5->NDTR,
 8002502:	4b15      	ldr	r3, [pc, #84]	; (8002558 <DMA1_Stream5_IRQHandler+0xb8>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	1ad2      	subs	r2, r2, r3
		xStreamBufferSendFromISR(	rxStream,
 8002508:	1d3b      	adds	r3, r7, #4
 800250a:	490f      	ldr	r1, [pc, #60]	; (8002548 <DMA1_Stream5_IRQHandler+0xa8>)
 800250c:	f006 fae1 	bl	8008ad2 <xStreamBufferSendFromISR>
									&xHigherPriorityTaskWoken);
	}
	SEGGER_SYSVIEW_RecordExitISR();
 8002510:	f7ff f968 	bl	80017e4 <SEGGER_SYSVIEW_RecordExitISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d007      	beq.n	800252a <DMA1_Stream5_IRQHandler+0x8a>
 800251a:	4b10      	ldr	r3, [pc, #64]	; (800255c <DMA1_Stream5_IRQHandler+0xbc>)
 800251c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	f3bf 8f4f 	dsb	sy
 8002526:	f3bf 8f6f 	isb	sy
  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20000f44 	.word	0x20000f44
 8002538:	20000cb8 	.word	0x20000cb8
 800253c:	20000e34 	.word	0x20000e34
 8002540:	20000c98 	.word	0x20000c98
 8002544:	40026000 	.word	0x40026000
 8002548:	20000ca0 	.word	0x20000ca0
 800254c:	20000cb4 	.word	0x20000cb4
 8002550:	0800b790 	.word	0x0800b790
 8002554:	20000000 	.word	0x20000000
 8002558:	40026088 	.word	0x40026088
 800255c:	e000ed04 	.word	0xe000ed04

08002560 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002568:	2001      	movs	r0, #1
 800256a:	f005 fa65 	bl	8007a38 <osDelay>
 800256e:	e7fb      	b.n	8002568 <StartDefaultTask+0x8>

08002570 <startUart4TrafficEntry>:
  /* USER CODE END uartPrintTaskEntry */
}

/* startUart4TrafficEntry function */
void startUart4TrafficEntry(void *argument)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startUart4TrafficEntry */
  osTimerStart(uart4SendHandle, 500 / portTICK_PERIOD_MS);
 8002578:	4b05      	ldr	r3, [pc, #20]	; (8002590 <startUart4TrafficEntry+0x20>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002580:	4618      	mov	r0, r3
 8002582:	f005 fb21 	bl	8007bc8 <osTimerStart>

  /* USER CODE END startUart4TrafficEntry */
}
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	200014b8 	.word	0x200014b8

08002594 <uart4SendEntry>:

/* uart4SendEntry function */
void uart4SendEntry(void *argument)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uart4SendEntry */
	SEGGER_SYSVIEW_PrintfHost("UART 4 Send");
 800259c:	4806      	ldr	r0, [pc, #24]	; (80025b8 <uart4SendEntry+0x24>)
 800259e:	f7ff fa23 	bl	80019e8 <SEGGER_SYSVIEW_PrintfHost>
	HAL_UART_Transmit(&huart4, uart4Msg, sizeof(uart4Msg), 100);
 80025a2:	2364      	movs	r3, #100	; 0x64
 80025a4:	220e      	movs	r2, #14
 80025a6:	4905      	ldr	r1, [pc, #20]	; (80025bc <uart4SendEntry+0x28>)
 80025a8:	4805      	ldr	r0, [pc, #20]	; (80025c0 <uart4SendEntry+0x2c>)
 80025aa:	f003 fbdf 	bl	8005d6c <HAL_UART_Transmit>


  /* USER CODE END uart4SendEntry */
}
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	0800b794 	.word	0x0800b794
 80025bc:	0800b7e0 	.word	0x0800b7e0
 80025c0:	20000dac 	.word	0x20000dac

080025c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a04      	ldr	r2, [pc, #16]	; (80025e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d101      	bne.n	80025da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80025d6:	f000 fb6d 	bl	8002cb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80025da:	bf00      	nop
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40010000 	.word	0x40010000

080025e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025ec:	b672      	cpsid	i
}
 80025ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025f0:	e7fe      	b.n	80025f0 <Error_Handler+0x8>
	...

080025f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80025fa:	4b11      	ldr	r3, [pc, #68]	; (8002640 <HAL_MspInit+0x4c>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	4a10      	ldr	r2, [pc, #64]	; (8002640 <HAL_MspInit+0x4c>)
 8002600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002604:	6413      	str	r3, [r2, #64]	; 0x40
 8002606:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <HAL_MspInit+0x4c>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260e:	607b      	str	r3, [r7, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002612:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <HAL_MspInit+0x4c>)
 8002614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002616:	4a0a      	ldr	r2, [pc, #40]	; (8002640 <HAL_MspInit+0x4c>)
 8002618:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800261c:	6453      	str	r3, [r2, #68]	; 0x44
 800261e:	4b08      	ldr	r3, [pc, #32]	; (8002640 <HAL_MspInit+0x4c>)
 8002620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002626:	603b      	str	r3, [r7, #0]
 8002628:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800262a:	2200      	movs	r2, #0
 800262c:	210f      	movs	r1, #15
 800262e:	f06f 0001 	mvn.w	r0, #1
 8002632:	f000 fc3b 	bl	8002eac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40023800 	.word	0x40023800

08002644 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08e      	sub	sp, #56	; 0x38
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	60da      	str	r2, [r3, #12]
 800265a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a4e      	ldr	r2, [pc, #312]	; (800279c <HAL_ETH_MspInit+0x158>)
 8002662:	4293      	cmp	r3, r2
 8002664:	f040 8096 	bne.w	8002794 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002668:	4b4d      	ldr	r3, [pc, #308]	; (80027a0 <HAL_ETH_MspInit+0x15c>)
 800266a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266c:	4a4c      	ldr	r2, [pc, #304]	; (80027a0 <HAL_ETH_MspInit+0x15c>)
 800266e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002672:	6313      	str	r3, [r2, #48]	; 0x30
 8002674:	4b4a      	ldr	r3, [pc, #296]	; (80027a0 <HAL_ETH_MspInit+0x15c>)
 8002676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267c:	623b      	str	r3, [r7, #32]
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	4b47      	ldr	r3, [pc, #284]	; (80027a0 <HAL_ETH_MspInit+0x15c>)
 8002682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002684:	4a46      	ldr	r2, [pc, #280]	; (80027a0 <HAL_ETH_MspInit+0x15c>)
 8002686:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800268a:	6313      	str	r3, [r2, #48]	; 0x30
 800268c:	4b44      	ldr	r3, [pc, #272]	; (80027a0 <HAL_ETH_MspInit+0x15c>)
 800268e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002690:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002694:	61fb      	str	r3, [r7, #28]
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	4b41      	ldr	r3, [pc, #260]	; (80027a0 <HAL_ETH_MspInit+0x15c>)
 800269a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269c:	4a40      	ldr	r2, [pc, #256]	; (80027a0 <HAL_ETH_MspInit+0x15c>)
 800269e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80026a2:	6313      	str	r3, [r2, #48]	; 0x30
 80026a4:	4b3e      	ldr	r3, [pc, #248]	; (80027a0 <HAL_ETH_MspInit+0x15c>)
 80026a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026ac:	61bb      	str	r3, [r7, #24]
 80026ae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026b0:	4b3b      	ldr	r3, [pc, #236]	; (80027a0 <HAL_ETH_MspInit+0x15c>)
 80026b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b4:	4a3a      	ldr	r2, [pc, #232]	; (80027a0 <HAL_ETH_MspInit+0x15c>)
 80026b6:	f043 0304 	orr.w	r3, r3, #4
 80026ba:	6313      	str	r3, [r2, #48]	; 0x30
 80026bc:	4b38      	ldr	r3, [pc, #224]	; (80027a0 <HAL_ETH_MspInit+0x15c>)
 80026be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c8:	4b35      	ldr	r3, [pc, #212]	; (80027a0 <HAL_ETH_MspInit+0x15c>)
 80026ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026cc:	4a34      	ldr	r2, [pc, #208]	; (80027a0 <HAL_ETH_MspInit+0x15c>)
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	6313      	str	r3, [r2, #48]	; 0x30
 80026d4:	4b32      	ldr	r3, [pc, #200]	; (80027a0 <HAL_ETH_MspInit+0x15c>)
 80026d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e0:	4b2f      	ldr	r3, [pc, #188]	; (80027a0 <HAL_ETH_MspInit+0x15c>)
 80026e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e4:	4a2e      	ldr	r2, [pc, #184]	; (80027a0 <HAL_ETH_MspInit+0x15c>)
 80026e6:	f043 0302 	orr.w	r3, r3, #2
 80026ea:	6313      	str	r3, [r2, #48]	; 0x30
 80026ec:	4b2c      	ldr	r3, [pc, #176]	; (80027a0 <HAL_ETH_MspInit+0x15c>)
 80026ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80026f8:	4b29      	ldr	r3, [pc, #164]	; (80027a0 <HAL_ETH_MspInit+0x15c>)
 80026fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fc:	4a28      	ldr	r2, [pc, #160]	; (80027a0 <HAL_ETH_MspInit+0x15c>)
 80026fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002702:	6313      	str	r3, [r2, #48]	; 0x30
 8002704:	4b26      	ldr	r3, [pc, #152]	; (80027a0 <HAL_ETH_MspInit+0x15c>)
 8002706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002710:	2332      	movs	r3, #50	; 0x32
 8002712:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002714:	2302      	movs	r3, #2
 8002716:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002718:	2300      	movs	r3, #0
 800271a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800271c:	2303      	movs	r3, #3
 800271e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002720:	230b      	movs	r3, #11
 8002722:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002724:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002728:	4619      	mov	r1, r3
 800272a:	481e      	ldr	r0, [pc, #120]	; (80027a4 <HAL_ETH_MspInit+0x160>)
 800272c:	f001 fb54 	bl	8003dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002730:	2386      	movs	r3, #134	; 0x86
 8002732:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002734:	2302      	movs	r3, #2
 8002736:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002738:	2300      	movs	r3, #0
 800273a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800273c:	2303      	movs	r3, #3
 800273e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002740:	230b      	movs	r3, #11
 8002742:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002748:	4619      	mov	r1, r3
 800274a:	4817      	ldr	r0, [pc, #92]	; (80027a8 <HAL_ETH_MspInit+0x164>)
 800274c:	f001 fb44 	bl	8003dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002750:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002756:	2302      	movs	r3, #2
 8002758:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275a:	2300      	movs	r3, #0
 800275c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800275e:	2303      	movs	r3, #3
 8002760:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002762:	230b      	movs	r3, #11
 8002764:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800276a:	4619      	mov	r1, r3
 800276c:	480f      	ldr	r0, [pc, #60]	; (80027ac <HAL_ETH_MspInit+0x168>)
 800276e:	f001 fb33 	bl	8003dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002772:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002776:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002778:	2302      	movs	r3, #2
 800277a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277c:	2300      	movs	r3, #0
 800277e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002780:	2303      	movs	r3, #3
 8002782:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002784:	230b      	movs	r3, #11
 8002786:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800278c:	4619      	mov	r1, r3
 800278e:	4808      	ldr	r0, [pc, #32]	; (80027b0 <HAL_ETH_MspInit+0x16c>)
 8002790:	f001 fb22 	bl	8003dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002794:	bf00      	nop
 8002796:	3738      	adds	r7, #56	; 0x38
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40028000 	.word	0x40028000
 80027a0:	40023800 	.word	0x40023800
 80027a4:	40020800 	.word	0x40020800
 80027a8:	40020000 	.word	0x40020000
 80027ac:	40020400 	.word	0x40020400
 80027b0:	40021800 	.word	0x40021800

080027b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b0b2      	sub	sp, #200	; 0xc8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027bc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	605a      	str	r2, [r3, #4]
 80027c6:	609a      	str	r2, [r3, #8]
 80027c8:	60da      	str	r2, [r3, #12]
 80027ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027d0:	2290      	movs	r2, #144	; 0x90
 80027d2:	2100      	movs	r1, #0
 80027d4:	4618      	mov	r0, r3
 80027d6:	f008 fe89 	bl	800b4ec <memset>
  if(huart->Instance==UART4)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a7f      	ldr	r2, [pc, #508]	; (80029dc <HAL_UART_MspInit+0x228>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d13d      	bne.n	8002860 <HAL_UART_MspInit+0xac>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80027e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80027ea:	2300      	movs	r3, #0
 80027ec:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027f2:	4618      	mov	r0, r3
 80027f4:	f002 fb64 	bl	8004ec0 <HAL_RCCEx_PeriphCLKConfig>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80027fe:	f7ff fef3 	bl	80025e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002802:	4b77      	ldr	r3, [pc, #476]	; (80029e0 <HAL_UART_MspInit+0x22c>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	4a76      	ldr	r2, [pc, #472]	; (80029e0 <HAL_UART_MspInit+0x22c>)
 8002808:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800280c:	6413      	str	r3, [r2, #64]	; 0x40
 800280e:	4b74      	ldr	r3, [pc, #464]	; (80029e0 <HAL_UART_MspInit+0x22c>)
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002816:	623b      	str	r3, [r7, #32]
 8002818:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800281a:	4b71      	ldr	r3, [pc, #452]	; (80029e0 <HAL_UART_MspInit+0x22c>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	4a70      	ldr	r2, [pc, #448]	; (80029e0 <HAL_UART_MspInit+0x22c>)
 8002820:	f043 0304 	orr.w	r3, r3, #4
 8002824:	6313      	str	r3, [r2, #48]	; 0x30
 8002826:	4b6e      	ldr	r3, [pc, #440]	; (80029e0 <HAL_UART_MspInit+0x22c>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	f003 0304 	and.w	r3, r3, #4
 800282e:	61fb      	str	r3, [r7, #28]
 8002830:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002832:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002836:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283a:	2302      	movs	r3, #2
 800283c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002840:	2300      	movs	r3, #0
 8002842:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002846:	2303      	movs	r3, #3
 8002848:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800284c:	2308      	movs	r3, #8
 800284e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002852:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002856:	4619      	mov	r1, r3
 8002858:	4862      	ldr	r0, [pc, #392]	; (80029e4 <HAL_UART_MspInit+0x230>)
 800285a:	f001 fabd 	bl	8003dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800285e:	e0b8      	b.n	80029d2 <HAL_UART_MspInit+0x21e>
  else if(huart->Instance==USART2)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a60      	ldr	r2, [pc, #384]	; (80029e8 <HAL_UART_MspInit+0x234>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d171      	bne.n	800294e <HAL_UART_MspInit+0x19a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800286a:	2380      	movs	r3, #128	; 0x80
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800286e:	2300      	movs	r3, #0
 8002870:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002876:	4618      	mov	r0, r3
 8002878:	f002 fb22 	bl	8004ec0 <HAL_RCCEx_PeriphCLKConfig>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8002882:	f7ff feb1 	bl	80025e8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002886:	4b56      	ldr	r3, [pc, #344]	; (80029e0 <HAL_UART_MspInit+0x22c>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	4a55      	ldr	r2, [pc, #340]	; (80029e0 <HAL_UART_MspInit+0x22c>)
 800288c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002890:	6413      	str	r3, [r2, #64]	; 0x40
 8002892:	4b53      	ldr	r3, [pc, #332]	; (80029e0 <HAL_UART_MspInit+0x22c>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289a:	61bb      	str	r3, [r7, #24]
 800289c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800289e:	4b50      	ldr	r3, [pc, #320]	; (80029e0 <HAL_UART_MspInit+0x22c>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	4a4f      	ldr	r2, [pc, #316]	; (80029e0 <HAL_UART_MspInit+0x22c>)
 80028a4:	f043 0308 	orr.w	r3, r3, #8
 80028a8:	6313      	str	r3, [r2, #48]	; 0x30
 80028aa:	4b4d      	ldr	r3, [pc, #308]	; (80029e0 <HAL_UART_MspInit+0x22c>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	617b      	str	r3, [r7, #20]
 80028b4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80028b6:	2360      	movs	r3, #96	; 0x60
 80028b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028bc:	2302      	movs	r3, #2
 80028be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c8:	2303      	movs	r3, #3
 80028ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028ce:	2307      	movs	r3, #7
 80028d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028d4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80028d8:	4619      	mov	r1, r3
 80028da:	4844      	ldr	r0, [pc, #272]	; (80029ec <HAL_UART_MspInit+0x238>)
 80028dc:	f001 fa7c 	bl	8003dd8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80028e0:	4b43      	ldr	r3, [pc, #268]	; (80029f0 <HAL_UART_MspInit+0x23c>)
 80028e2:	4a44      	ldr	r2, [pc, #272]	; (80029f4 <HAL_UART_MspInit+0x240>)
 80028e4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80028e6:	4b42      	ldr	r3, [pc, #264]	; (80029f0 <HAL_UART_MspInit+0x23c>)
 80028e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028ec:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028ee:	4b40      	ldr	r3, [pc, #256]	; (80029f0 <HAL_UART_MspInit+0x23c>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028f4:	4b3e      	ldr	r3, [pc, #248]	; (80029f0 <HAL_UART_MspInit+0x23c>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028fa:	4b3d      	ldr	r3, [pc, #244]	; (80029f0 <HAL_UART_MspInit+0x23c>)
 80028fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002900:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002902:	4b3b      	ldr	r3, [pc, #236]	; (80029f0 <HAL_UART_MspInit+0x23c>)
 8002904:	2200      	movs	r2, #0
 8002906:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002908:	4b39      	ldr	r3, [pc, #228]	; (80029f0 <HAL_UART_MspInit+0x23c>)
 800290a:	2200      	movs	r2, #0
 800290c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800290e:	4b38      	ldr	r3, [pc, #224]	; (80029f0 <HAL_UART_MspInit+0x23c>)
 8002910:	2200      	movs	r2, #0
 8002912:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002914:	4b36      	ldr	r3, [pc, #216]	; (80029f0 <HAL_UART_MspInit+0x23c>)
 8002916:	2200      	movs	r2, #0
 8002918:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800291a:	4b35      	ldr	r3, [pc, #212]	; (80029f0 <HAL_UART_MspInit+0x23c>)
 800291c:	2200      	movs	r2, #0
 800291e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002920:	4833      	ldr	r0, [pc, #204]	; (80029f0 <HAL_UART_MspInit+0x23c>)
 8002922:	f000 faed 	bl	8002f00 <HAL_DMA_Init>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <HAL_UART_MspInit+0x17c>
      Error_Handler();
 800292c:	f7ff fe5c 	bl	80025e8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a2f      	ldr	r2, [pc, #188]	; (80029f0 <HAL_UART_MspInit+0x23c>)
 8002934:	675a      	str	r2, [r3, #116]	; 0x74
 8002936:	4a2e      	ldr	r2, [pc, #184]	; (80029f0 <HAL_UART_MspInit+0x23c>)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800293c:	2200      	movs	r2, #0
 800293e:	2105      	movs	r1, #5
 8002940:	2026      	movs	r0, #38	; 0x26
 8002942:	f000 fab3 	bl	8002eac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002946:	2026      	movs	r0, #38	; 0x26
 8002948:	f000 facc 	bl	8002ee4 <HAL_NVIC_EnableIRQ>
}
 800294c:	e041      	b.n	80029d2 <HAL_UART_MspInit+0x21e>
  else if(huart->Instance==USART3)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a29      	ldr	r2, [pc, #164]	; (80029f8 <HAL_UART_MspInit+0x244>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d13c      	bne.n	80029d2 <HAL_UART_MspInit+0x21e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002958:	f44f 7380 	mov.w	r3, #256	; 0x100
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800295e:	2300      	movs	r3, #0
 8002960:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002966:	4618      	mov	r0, r3
 8002968:	f002 faaa 	bl	8004ec0 <HAL_RCCEx_PeriphCLKConfig>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_UART_MspInit+0x1c2>
      Error_Handler();
 8002972:	f7ff fe39 	bl	80025e8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002976:	4b1a      	ldr	r3, [pc, #104]	; (80029e0 <HAL_UART_MspInit+0x22c>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	4a19      	ldr	r2, [pc, #100]	; (80029e0 <HAL_UART_MspInit+0x22c>)
 800297c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002980:	6413      	str	r3, [r2, #64]	; 0x40
 8002982:	4b17      	ldr	r3, [pc, #92]	; (80029e0 <HAL_UART_MspInit+0x22c>)
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800298e:	4b14      	ldr	r3, [pc, #80]	; (80029e0 <HAL_UART_MspInit+0x22c>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	4a13      	ldr	r2, [pc, #76]	; (80029e0 <HAL_UART_MspInit+0x22c>)
 8002994:	f043 0308 	orr.w	r3, r3, #8
 8002998:	6313      	str	r3, [r2, #48]	; 0x30
 800299a:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <HAL_UART_MspInit+0x22c>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80029a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ae:	2302      	movs	r3, #2
 80029b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b4:	2300      	movs	r3, #0
 80029b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ba:	2303      	movs	r3, #3
 80029bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80029c0:	2307      	movs	r3, #7
 80029c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029c6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80029ca:	4619      	mov	r1, r3
 80029cc:	4807      	ldr	r0, [pc, #28]	; (80029ec <HAL_UART_MspInit+0x238>)
 80029ce:	f001 fa03 	bl	8003dd8 <HAL_GPIO_Init>
}
 80029d2:	bf00      	nop
 80029d4:	37c8      	adds	r7, #200	; 0xc8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40004c00 	.word	0x40004c00
 80029e0:	40023800 	.word	0x40023800
 80029e4:	40020800 	.word	0x40020800
 80029e8:	40004400 	.word	0x40004400
 80029ec:	40020c00 	.word	0x40020c00
 80029f0:	20000f44 	.word	0x20000f44
 80029f4:	40026088 	.word	0x40026088
 80029f8:	40004800 	.word	0x40004800

080029fc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b0ae      	sub	sp, #184	; 0xb8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a04:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	60da      	str	r2, [r3, #12]
 8002a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a14:	f107 0314 	add.w	r3, r7, #20
 8002a18:	2290      	movs	r2, #144	; 0x90
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f008 fd65 	bl	800b4ec <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a2a:	d159      	bne.n	8002ae0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002a2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a30:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a38:	f107 0314 	add.w	r3, r7, #20
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f002 fa3f 	bl	8004ec0 <HAL_RCCEx_PeriphCLKConfig>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002a48:	f7ff fdce 	bl	80025e8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a4c:	4b26      	ldr	r3, [pc, #152]	; (8002ae8 <HAL_PCD_MspInit+0xec>)
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a50:	4a25      	ldr	r2, [pc, #148]	; (8002ae8 <HAL_PCD_MspInit+0xec>)
 8002a52:	f043 0301 	orr.w	r3, r3, #1
 8002a56:	6313      	str	r3, [r2, #48]	; 0x30
 8002a58:	4b23      	ldr	r3, [pc, #140]	; (8002ae8 <HAL_PCD_MspInit+0xec>)
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002a64:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002a68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a72:	2300      	movs	r3, #0
 8002a74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002a7e:	230a      	movs	r3, #10
 8002a80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4818      	ldr	r0, [pc, #96]	; (8002aec <HAL_PCD_MspInit+0xf0>)
 8002a8c:	f001 f9a4 	bl	8003dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002a90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002aa4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4810      	ldr	r0, [pc, #64]	; (8002aec <HAL_PCD_MspInit+0xf0>)
 8002aac:	f001 f994 	bl	8003dd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002ab0:	4b0d      	ldr	r3, [pc, #52]	; (8002ae8 <HAL_PCD_MspInit+0xec>)
 8002ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab4:	4a0c      	ldr	r2, [pc, #48]	; (8002ae8 <HAL_PCD_MspInit+0xec>)
 8002ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aba:	6353      	str	r3, [r2, #52]	; 0x34
 8002abc:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <HAL_PCD_MspInit+0xec>)
 8002abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	4b07      	ldr	r3, [pc, #28]	; (8002ae8 <HAL_PCD_MspInit+0xec>)
 8002aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002acc:	4a06      	ldr	r2, [pc, #24]	; (8002ae8 <HAL_PCD_MspInit+0xec>)
 8002ace:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ad2:	6453      	str	r3, [r2, #68]	; 0x44
 8002ad4:	4b04      	ldr	r3, [pc, #16]	; (8002ae8 <HAL_PCD_MspInit+0xec>)
 8002ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002ae0:	bf00      	nop
 8002ae2:	37b8      	adds	r7, #184	; 0xb8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	40020000 	.word	0x40020000

08002af0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b08c      	sub	sp, #48	; 0x30
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002b00:	4b2e      	ldr	r3, [pc, #184]	; (8002bbc <HAL_InitTick+0xcc>)
 8002b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b04:	4a2d      	ldr	r2, [pc, #180]	; (8002bbc <HAL_InitTick+0xcc>)
 8002b06:	f043 0301 	orr.w	r3, r3, #1
 8002b0a:	6453      	str	r3, [r2, #68]	; 0x44
 8002b0c:	4b2b      	ldr	r3, [pc, #172]	; (8002bbc <HAL_InitTick+0xcc>)
 8002b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	60bb      	str	r3, [r7, #8]
 8002b16:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b18:	f107 020c 	add.w	r2, r7, #12
 8002b1c:	f107 0310 	add.w	r3, r7, #16
 8002b20:	4611      	mov	r1, r2
 8002b22:	4618      	mov	r0, r3
 8002b24:	f002 f99a 	bl	8004e5c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002b28:	f002 f984 	bl	8004e34 <HAL_RCC_GetPCLK2Freq>
 8002b2c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b30:	4a23      	ldr	r2, [pc, #140]	; (8002bc0 <HAL_InitTick+0xd0>)
 8002b32:	fba2 2303 	umull	r2, r3, r2, r3
 8002b36:	0c9b      	lsrs	r3, r3, #18
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002b3c:	4b21      	ldr	r3, [pc, #132]	; (8002bc4 <HAL_InitTick+0xd4>)
 8002b3e:	4a22      	ldr	r2, [pc, #136]	; (8002bc8 <HAL_InitTick+0xd8>)
 8002b40:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002b42:	4b20      	ldr	r3, [pc, #128]	; (8002bc4 <HAL_InitTick+0xd4>)
 8002b44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b48:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002b4a:	4a1e      	ldr	r2, [pc, #120]	; (8002bc4 <HAL_InitTick+0xd4>)
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002b50:	4b1c      	ldr	r3, [pc, #112]	; (8002bc4 <HAL_InitTick+0xd4>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b56:	4b1b      	ldr	r3, [pc, #108]	; (8002bc4 <HAL_InitTick+0xd4>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b5c:	4b19      	ldr	r3, [pc, #100]	; (8002bc4 <HAL_InitTick+0xd4>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002b62:	4818      	ldr	r0, [pc, #96]	; (8002bc4 <HAL_InitTick+0xd4>)
 8002b64:	f002 fdd4 	bl	8005710 <HAL_TIM_Base_Init>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002b6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d11b      	bne.n	8002bae <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002b76:	4813      	ldr	r0, [pc, #76]	; (8002bc4 <HAL_InitTick+0xd4>)
 8002b78:	f002 fe2c 	bl	80057d4 <HAL_TIM_Base_Start_IT>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002b82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d111      	bne.n	8002bae <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002b8a:	2019      	movs	r0, #25
 8002b8c:	f000 f9aa 	bl	8002ee4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b0f      	cmp	r3, #15
 8002b94:	d808      	bhi.n	8002ba8 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002b96:	2200      	movs	r2, #0
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	2019      	movs	r0, #25
 8002b9c:	f000 f986 	bl	8002eac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ba0:	4a0a      	ldr	r2, [pc, #40]	; (8002bcc <HAL_InitTick+0xdc>)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6013      	str	r3, [r2, #0]
 8002ba6:	e002      	b.n	8002bae <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002bae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3730      	adds	r7, #48	; 0x30
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	431bde83 	.word	0x431bde83
 8002bc4:	200014c4 	.word	0x200014c4
 8002bc8:	40010000 	.word	0x40010000
 8002bcc:	20000008 	.word	0x20000008

08002bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bd4:	e7fe      	b.n	8002bd4 <NMI_Handler+0x4>

08002bd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bda:	e7fe      	b.n	8002bda <HardFault_Handler+0x4>

08002bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002be0:	e7fe      	b.n	8002be0 <MemManage_Handler+0x4>

08002be2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002be2:	b480      	push	{r7}
 8002be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002be6:	e7fe      	b.n	8002be6 <BusFault_Handler+0x4>

08002be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bec:	e7fe      	b.n	8002bec <UsageFault_Handler+0x4>

08002bee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bf2:	bf00      	nop
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c00:	4802      	ldr	r0, [pc, #8]	; (8002c0c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002c02:	f002 fe5f 	bl	80058c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	200014c4 	.word	0x200014c4

08002c10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002c14:	4802      	ldr	r0, [pc, #8]	; (8002c20 <USART2_IRQHandler+0x10>)
 8002c16:	f003 f971 	bl	8005efc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	20000e34 	.word	0x20000e34

08002c24 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c28:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <SystemInit+0x20>)
 8002c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2e:	4a05      	ldr	r2, [pc, #20]	; (8002c44 <SystemInit+0x20>)
 8002c30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c38:	bf00      	nop
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	e000ed00 	.word	0xe000ed00

08002c48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c4c:	480d      	ldr	r0, [pc, #52]	; (8002c84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c4e:	490e      	ldr	r1, [pc, #56]	; (8002c88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c50:	4a0e      	ldr	r2, [pc, #56]	; (8002c8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c54:	e002      	b.n	8002c5c <LoopCopyDataInit>

08002c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c5a:	3304      	adds	r3, #4

08002c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c60:	d3f9      	bcc.n	8002c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c62:	4a0b      	ldr	r2, [pc, #44]	; (8002c90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c64:	4c0b      	ldr	r4, [pc, #44]	; (8002c94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c68:	e001      	b.n	8002c6e <LoopFillZerobss>

08002c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c6c:	3204      	adds	r2, #4

08002c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c70:	d3fb      	bcc.n	8002c6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c72:	f7ff ffd7 	bl	8002c24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c76:	f008 fc97 	bl	800b5a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c7a:	f7ff f877 	bl	8001d6c <main>
  bx  lr    
 8002c7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c80:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c88:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8002c8c:	0800b888 	.word	0x0800b888
  ldr r2, =_sbss
 8002c90:	200001a4 	.word	0x200001a4
  ldr r4, =_ebss
 8002c94:	20006034 	.word	0x20006034

08002c98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c98:	e7fe      	b.n	8002c98 <ADC_IRQHandler>

08002c9a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c9e:	2003      	movs	r0, #3
 8002ca0:	f000 f8f9 	bl	8002e96 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ca4:	200f      	movs	r0, #15
 8002ca6:	f7ff ff23 	bl	8002af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002caa:	f7ff fca3 	bl	80025f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cb8:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <HAL_IncTick+0x20>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <HAL_IncTick+0x24>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	4a04      	ldr	r2, [pc, #16]	; (8002cd8 <HAL_IncTick+0x24>)
 8002cc6:	6013      	str	r3, [r2, #0]
}
 8002cc8:	bf00      	nop
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	2000000c 	.word	0x2000000c
 8002cd8:	20001510 	.word	0x20001510

08002cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  return uwTick;
 8002ce0:	4b03      	ldr	r3, [pc, #12]	; (8002cf0 <HAL_GetTick+0x14>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	20001510 	.word	0x20001510

08002cf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cfc:	f7ff ffee 	bl	8002cdc <HAL_GetTick>
 8002d00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d0c:	d005      	beq.n	8002d1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d0e:	4b0a      	ldr	r3, [pc, #40]	; (8002d38 <HAL_Delay+0x44>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	461a      	mov	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	4413      	add	r3, r2
 8002d18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d1a:	bf00      	nop
 8002d1c:	f7ff ffde 	bl	8002cdc <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d8f7      	bhi.n	8002d1c <HAL_Delay+0x28>
  {
  }
}
 8002d2c:	bf00      	nop
 8002d2e:	bf00      	nop
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	2000000c 	.word	0x2000000c

08002d3c <__NVIC_SetPriorityGrouping>:
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <__NVIC_SetPriorityGrouping+0x40>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d58:	4013      	ands	r3, r2
 8002d5a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d64:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <__NVIC_SetPriorityGrouping+0x44>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d6a:	4a04      	ldr	r2, [pc, #16]	; (8002d7c <__NVIC_SetPriorityGrouping+0x40>)
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	60d3      	str	r3, [r2, #12]
}
 8002d70:	bf00      	nop
 8002d72:	3714      	adds	r7, #20
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	e000ed00 	.word	0xe000ed00
 8002d80:	05fa0000 	.word	0x05fa0000

08002d84 <__NVIC_GetPriorityGrouping>:
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d88:	4b04      	ldr	r3, [pc, #16]	; (8002d9c <__NVIC_GetPriorityGrouping+0x18>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	0a1b      	lsrs	r3, r3, #8
 8002d8e:	f003 0307 	and.w	r3, r3, #7
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	e000ed00 	.word	0xe000ed00

08002da0 <__NVIC_EnableIRQ>:
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	db0b      	blt.n	8002dca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002db2:	79fb      	ldrb	r3, [r7, #7]
 8002db4:	f003 021f 	and.w	r2, r3, #31
 8002db8:	4907      	ldr	r1, [pc, #28]	; (8002dd8 <__NVIC_EnableIRQ+0x38>)
 8002dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbe:	095b      	lsrs	r3, r3, #5
 8002dc0:	2001      	movs	r0, #1
 8002dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8002dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	e000e100 	.word	0xe000e100

08002ddc <__NVIC_SetPriority>:
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	6039      	str	r1, [r7, #0]
 8002de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	db0a      	blt.n	8002e06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	490c      	ldr	r1, [pc, #48]	; (8002e28 <__NVIC_SetPriority+0x4c>)
 8002df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfa:	0112      	lsls	r2, r2, #4
 8002dfc:	b2d2      	uxtb	r2, r2
 8002dfe:	440b      	add	r3, r1
 8002e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002e04:	e00a      	b.n	8002e1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	4908      	ldr	r1, [pc, #32]	; (8002e2c <__NVIC_SetPriority+0x50>)
 8002e0c:	79fb      	ldrb	r3, [r7, #7]
 8002e0e:	f003 030f 	and.w	r3, r3, #15
 8002e12:	3b04      	subs	r3, #4
 8002e14:	0112      	lsls	r2, r2, #4
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	440b      	add	r3, r1
 8002e1a:	761a      	strb	r2, [r3, #24]
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	e000e100 	.word	0xe000e100
 8002e2c:	e000ed00 	.word	0xe000ed00

08002e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b089      	sub	sp, #36	; 0x24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	f1c3 0307 	rsb	r3, r3, #7
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	bf28      	it	cs
 8002e4e:	2304      	movcs	r3, #4
 8002e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	3304      	adds	r3, #4
 8002e56:	2b06      	cmp	r3, #6
 8002e58:	d902      	bls.n	8002e60 <NVIC_EncodePriority+0x30>
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	3b03      	subs	r3, #3
 8002e5e:	e000      	b.n	8002e62 <NVIC_EncodePriority+0x32>
 8002e60:	2300      	movs	r3, #0
 8002e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e64:	f04f 32ff 	mov.w	r2, #4294967295
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	43da      	mvns	r2, r3
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	401a      	ands	r2, r3
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e78:	f04f 31ff 	mov.w	r1, #4294967295
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e82:	43d9      	mvns	r1, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e88:	4313      	orrs	r3, r2
         );
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3724      	adds	r7, #36	; 0x24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b082      	sub	sp, #8
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7ff ff4c 	bl	8002d3c <__NVIC_SetPriorityGrouping>
}
 8002ea4:	bf00      	nop
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
 8002eb8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ebe:	f7ff ff61 	bl	8002d84 <__NVIC_GetPriorityGrouping>
 8002ec2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	68b9      	ldr	r1, [r7, #8]
 8002ec8:	6978      	ldr	r0, [r7, #20]
 8002eca:	f7ff ffb1 	bl	8002e30 <NVIC_EncodePriority>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ed4:	4611      	mov	r1, r2
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff ff80 	bl	8002ddc <__NVIC_SetPriority>
}
 8002edc:	bf00      	nop
 8002ede:	3718      	adds	r7, #24
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff ff54 	bl	8002da0 <__NVIC_EnableIRQ>
}
 8002ef8:	bf00      	nop
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f0c:	f7ff fee6 	bl	8002cdc <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e099      	b.n	8003050 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2202      	movs	r2, #2
 8002f20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0201 	bic.w	r2, r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f3c:	e00f      	b.n	8002f5e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f3e:	f7ff fecd 	bl	8002cdc <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b05      	cmp	r3, #5
 8002f4a:	d908      	bls.n	8002f5e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2203      	movs	r2, #3
 8002f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e078      	b.n	8003050 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1e8      	bne.n	8002f3e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	4b38      	ldr	r3, [pc, #224]	; (8003058 <HAL_DMA_Init+0x158>)
 8002f78:	4013      	ands	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fa2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	2b04      	cmp	r3, #4
 8002fb6:	d107      	bne.n	8002fc8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	f023 0307 	bic.w	r3, r3, #7
 8002fde:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d117      	bne.n	8003022 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00e      	beq.n	8003022 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 fb45 	bl	8003694 <DMA_CheckFifoParam>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d008      	beq.n	8003022 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2240      	movs	r2, #64	; 0x40
 8003014:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800301e:	2301      	movs	r3, #1
 8003020:	e016      	b.n	8003050 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 fafc 	bl	8003628 <DMA_CalcBaseAndBitshift>
 8003030:	4603      	mov	r3, r0
 8003032:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003038:	223f      	movs	r2, #63	; 0x3f
 800303a:	409a      	lsls	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3718      	adds	r7, #24
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	e010803f 	.word	0xe010803f

0800305c <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
 8003068:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800306a:	2300      	movs	r3, #0
 800306c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003074:	2b01      	cmp	r3, #1
 8003076:	d101      	bne.n	800307c <HAL_DMA_Start+0x20>
 8003078:	2302      	movs	r3, #2
 800307a:	e026      	b.n	80030ca <HAL_DMA_Start+0x6e>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b01      	cmp	r3, #1
 800308e:	d115      	bne.n	80030bc <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2202      	movs	r2, #2
 8003094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	68b9      	ldr	r1, [r7, #8]
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 fa91 	bl	80035cc <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f042 0201 	orr.w	r2, r2, #1
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	e005      	b.n	80030c8 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80030c4:	2302      	movs	r3, #2
 80030c6:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 80030c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b086      	sub	sp, #24
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	60f8      	str	r0, [r7, #12]
 80030da:	60b9      	str	r1, [r7, #8]
 80030dc:	607a      	str	r2, [r7, #4]
 80030de:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030e0:	2300      	movs	r3, #0
 80030e2:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e8:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d101      	bne.n	80030f8 <HAL_DMA_Start_IT+0x26>
 80030f4:	2302      	movs	r3, #2
 80030f6:	e048      	b.n	800318a <HAL_DMA_Start_IT+0xb8>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b01      	cmp	r3, #1
 800310a:	d137      	bne.n	800317c <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2202      	movs	r2, #2
 8003110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	68b9      	ldr	r1, [r7, #8]
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 fa53 	bl	80035cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312a:	223f      	movs	r2, #63	; 0x3f
 800312c:	409a      	lsls	r2, r3
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f042 0216 	orr.w	r2, r2, #22
 8003140:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	695a      	ldr	r2, [r3, #20]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003150:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	2b00      	cmp	r3, #0
 8003158:	d007      	beq.n	800316a <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f042 0208 	orr.w	r2, r2, #8
 8003168:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f042 0201 	orr.w	r2, r2, #1
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	e005      	b.n	8003188 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003184:	2302      	movs	r3, #2
 8003186:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003188:	7dfb      	ldrb	r3, [r7, #23]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b084      	sub	sp, #16
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031a0:	f7ff fd9c 	bl	8002cdc <HAL_GetTick>
 80031a4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d008      	beq.n	80031c4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2280      	movs	r2, #128	; 0x80
 80031b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e052      	b.n	800326a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0216 	bic.w	r2, r2, #22
 80031d2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	695a      	ldr	r2, [r3, #20]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031e2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d103      	bne.n	80031f4 <HAL_DMA_Abort+0x62>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d007      	beq.n	8003204 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0208 	bic.w	r2, r2, #8
 8003202:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0201 	bic.w	r2, r2, #1
 8003212:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003214:	e013      	b.n	800323e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003216:	f7ff fd61 	bl	8002cdc <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b05      	cmp	r3, #5
 8003222:	d90c      	bls.n	800323e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2220      	movs	r2, #32
 8003228:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2203      	movs	r2, #3
 800322e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e015      	b.n	800326a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1e4      	bne.n	8003216 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003250:	223f      	movs	r2, #63	; 0x3f
 8003252:	409a      	lsls	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d004      	beq.n	8003290 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2280      	movs	r2, #128	; 0x80
 800328a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e00c      	b.n	80032aa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2205      	movs	r2, #5
 8003294:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0201 	bic.w	r2, r2, #1
 80032a6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
	...

080032b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80032c0:	2300      	movs	r3, #0
 80032c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80032c4:	4b8e      	ldr	r3, [pc, #568]	; (8003500 <HAL_DMA_IRQHandler+0x248>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a8e      	ldr	r2, [pc, #568]	; (8003504 <HAL_DMA_IRQHandler+0x24c>)
 80032ca:	fba2 2303 	umull	r2, r3, r2, r3
 80032ce:	0a9b      	lsrs	r3, r3, #10
 80032d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e2:	2208      	movs	r2, #8
 80032e4:	409a      	lsls	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	4013      	ands	r3, r2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d01a      	beq.n	8003324 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d013      	beq.n	8003324 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0204 	bic.w	r2, r2, #4
 800330a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003310:	2208      	movs	r2, #8
 8003312:	409a      	lsls	r2, r3
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331c:	f043 0201 	orr.w	r2, r3, #1
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003328:	2201      	movs	r2, #1
 800332a:	409a      	lsls	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4013      	ands	r3, r2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d012      	beq.n	800335a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00b      	beq.n	800335a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003346:	2201      	movs	r2, #1
 8003348:	409a      	lsls	r2, r3
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003352:	f043 0202 	orr.w	r2, r3, #2
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335e:	2204      	movs	r2, #4
 8003360:	409a      	lsls	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	4013      	ands	r3, r2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d012      	beq.n	8003390 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00b      	beq.n	8003390 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337c:	2204      	movs	r2, #4
 800337e:	409a      	lsls	r2, r3
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003388:	f043 0204 	orr.w	r2, r3, #4
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003394:	2210      	movs	r2, #16
 8003396:	409a      	lsls	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4013      	ands	r3, r2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d043      	beq.n	8003428 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0308 	and.w	r3, r3, #8
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d03c      	beq.n	8003428 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b2:	2210      	movs	r2, #16
 80033b4:	409a      	lsls	r2, r3
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d018      	beq.n	80033fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d108      	bne.n	80033e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d024      	beq.n	8003428 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	4798      	blx	r3
 80033e6:	e01f      	b.n	8003428 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d01b      	beq.n	8003428 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	4798      	blx	r3
 80033f8:	e016      	b.n	8003428 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003404:	2b00      	cmp	r3, #0
 8003406:	d107      	bne.n	8003418 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0208 	bic.w	r2, r2, #8
 8003416:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341c:	2b00      	cmp	r3, #0
 800341e:	d003      	beq.n	8003428 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342c:	2220      	movs	r2, #32
 800342e:	409a      	lsls	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4013      	ands	r3, r2
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 808f 	beq.w	8003558 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0310 	and.w	r3, r3, #16
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 8087 	beq.w	8003558 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344e:	2220      	movs	r2, #32
 8003450:	409a      	lsls	r2, r3
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b05      	cmp	r3, #5
 8003460:	d136      	bne.n	80034d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0216 	bic.w	r2, r2, #22
 8003470:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	695a      	ldr	r2, [r3, #20]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003480:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	2b00      	cmp	r3, #0
 8003488:	d103      	bne.n	8003492 <HAL_DMA_IRQHandler+0x1da>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800348e:	2b00      	cmp	r3, #0
 8003490:	d007      	beq.n	80034a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 0208 	bic.w	r2, r2, #8
 80034a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a6:	223f      	movs	r2, #63	; 0x3f
 80034a8:	409a      	lsls	r2, r3
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d07e      	beq.n	80035c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	4798      	blx	r3
        }
        return;
 80034ce:	e079      	b.n	80035c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d01d      	beq.n	800351a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10d      	bne.n	8003508 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d031      	beq.n	8003558 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	4798      	blx	r3
 80034fc:	e02c      	b.n	8003558 <HAL_DMA_IRQHandler+0x2a0>
 80034fe:	bf00      	nop
 8003500:	20000004 	.word	0x20000004
 8003504:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350c:	2b00      	cmp	r3, #0
 800350e:	d023      	beq.n	8003558 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	4798      	blx	r3
 8003518:	e01e      	b.n	8003558 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10f      	bne.n	8003548 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0210 	bic.w	r2, r2, #16
 8003536:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800354c:	2b00      	cmp	r3, #0
 800354e:	d003      	beq.n	8003558 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355c:	2b00      	cmp	r3, #0
 800355e:	d032      	beq.n	80035c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b00      	cmp	r3, #0
 800356a:	d022      	beq.n	80035b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2205      	movs	r2, #5
 8003570:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0201 	bic.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	3301      	adds	r3, #1
 8003588:	60bb      	str	r3, [r7, #8]
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	429a      	cmp	r2, r3
 800358e:	d307      	bcc.n	80035a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f2      	bne.n	8003584 <HAL_DMA_IRQHandler+0x2cc>
 800359e:	e000      	b.n	80035a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80035a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d005      	beq.n	80035c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	4798      	blx	r3
 80035c2:	e000      	b.n	80035c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80035c4:	bf00      	nop
    }
  }
}
 80035c6:	3718      	adds	r7, #24
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
 80035d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	2b40      	cmp	r3, #64	; 0x40
 80035f8:	d108      	bne.n	800360c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800360a:	e007      	b.n	800361c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	60da      	str	r2, [r3, #12]
}
 800361c:	bf00      	nop
 800361e:	3714      	adds	r7, #20
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	b2db      	uxtb	r3, r3
 8003636:	3b10      	subs	r3, #16
 8003638:	4a13      	ldr	r2, [pc, #76]	; (8003688 <DMA_CalcBaseAndBitshift+0x60>)
 800363a:	fba2 2303 	umull	r2, r3, r2, r3
 800363e:	091b      	lsrs	r3, r3, #4
 8003640:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003642:	4a12      	ldr	r2, [pc, #72]	; (800368c <DMA_CalcBaseAndBitshift+0x64>)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	4413      	add	r3, r2
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	461a      	mov	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2b03      	cmp	r3, #3
 8003654:	d908      	bls.n	8003668 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	461a      	mov	r2, r3
 800365c:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <DMA_CalcBaseAndBitshift+0x68>)
 800365e:	4013      	ands	r3, r2
 8003660:	1d1a      	adds	r2, r3, #4
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	659a      	str	r2, [r3, #88]	; 0x58
 8003666:	e006      	b.n	8003676 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	461a      	mov	r2, r3
 800366e:	4b08      	ldr	r3, [pc, #32]	; (8003690 <DMA_CalcBaseAndBitshift+0x68>)
 8003670:	4013      	ands	r3, r2
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800367a:	4618      	mov	r0, r3
 800367c:	3714      	adds	r7, #20
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	aaaaaaab 	.word	0xaaaaaaab
 800368c:	0800b870 	.word	0x0800b870
 8003690:	fffffc00 	.word	0xfffffc00

08003694 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800369c:	2300      	movs	r3, #0
 800369e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d11f      	bne.n	80036ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	2b03      	cmp	r3, #3
 80036b2:	d856      	bhi.n	8003762 <DMA_CheckFifoParam+0xce>
 80036b4:	a201      	add	r2, pc, #4	; (adr r2, 80036bc <DMA_CheckFifoParam+0x28>)
 80036b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ba:	bf00      	nop
 80036bc:	080036cd 	.word	0x080036cd
 80036c0:	080036df 	.word	0x080036df
 80036c4:	080036cd 	.word	0x080036cd
 80036c8:	08003763 	.word	0x08003763
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d046      	beq.n	8003766 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036dc:	e043      	b.n	8003766 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036e6:	d140      	bne.n	800376a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ec:	e03d      	b.n	800376a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036f6:	d121      	bne.n	800373c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	2b03      	cmp	r3, #3
 80036fc:	d837      	bhi.n	800376e <DMA_CheckFifoParam+0xda>
 80036fe:	a201      	add	r2, pc, #4	; (adr r2, 8003704 <DMA_CheckFifoParam+0x70>)
 8003700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003704:	08003715 	.word	0x08003715
 8003708:	0800371b 	.word	0x0800371b
 800370c:	08003715 	.word	0x08003715
 8003710:	0800372d 	.word	0x0800372d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	73fb      	strb	r3, [r7, #15]
      break;
 8003718:	e030      	b.n	800377c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d025      	beq.n	8003772 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800372a:	e022      	b.n	8003772 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003730:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003734:	d11f      	bne.n	8003776 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800373a:	e01c      	b.n	8003776 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2b02      	cmp	r3, #2
 8003740:	d903      	bls.n	800374a <DMA_CheckFifoParam+0xb6>
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	2b03      	cmp	r3, #3
 8003746:	d003      	beq.n	8003750 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003748:	e018      	b.n	800377c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	73fb      	strb	r3, [r7, #15]
      break;
 800374e:	e015      	b.n	800377c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003754:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00e      	beq.n	800377a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	73fb      	strb	r3, [r7, #15]
      break;
 8003760:	e00b      	b.n	800377a <DMA_CheckFifoParam+0xe6>
      break;
 8003762:	bf00      	nop
 8003764:	e00a      	b.n	800377c <DMA_CheckFifoParam+0xe8>
      break;
 8003766:	bf00      	nop
 8003768:	e008      	b.n	800377c <DMA_CheckFifoParam+0xe8>
      break;
 800376a:	bf00      	nop
 800376c:	e006      	b.n	800377c <DMA_CheckFifoParam+0xe8>
      break;
 800376e:	bf00      	nop
 8003770:	e004      	b.n	800377c <DMA_CheckFifoParam+0xe8>
      break;
 8003772:	bf00      	nop
 8003774:	e002      	b.n	800377c <DMA_CheckFifoParam+0xe8>
      break;   
 8003776:	bf00      	nop
 8003778:	e000      	b.n	800377c <DMA_CheckFifoParam+0xe8>
      break;
 800377a:	bf00      	nop
    }
  } 
  
  return status; 
 800377c:	7bfb      	ldrb	r3, [r7, #15]
}
 800377e:	4618      	mov	r0, r3
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop

0800378c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e06a      	b.n	8003874 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d106      	bne.n	80037b6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2223      	movs	r2, #35	; 0x23
 80037ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f7fe ff47 	bl	8002644 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037b6:	4b31      	ldr	r3, [pc, #196]	; (800387c <HAL_ETH_Init+0xf0>)
 80037b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ba:	4a30      	ldr	r2, [pc, #192]	; (800387c <HAL_ETH_Init+0xf0>)
 80037bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037c0:	6453      	str	r3, [r2, #68]	; 0x44
 80037c2:	4b2e      	ldr	r3, [pc, #184]	; (800387c <HAL_ETH_Init+0xf0>)
 80037c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ca:	60bb      	str	r3, [r7, #8]
 80037cc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80037ce:	4b2c      	ldr	r3, [pc, #176]	; (8003880 <HAL_ETH_Init+0xf4>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	4a2b      	ldr	r2, [pc, #172]	; (8003880 <HAL_ETH_Init+0xf4>)
 80037d4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80037d8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80037da:	4b29      	ldr	r3, [pc, #164]	; (8003880 <HAL_ETH_Init+0xf4>)
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	4927      	ldr	r1, [pc, #156]	; (8003880 <HAL_ETH_Init+0xf4>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80037e8:	4b25      	ldr	r3, [pc, #148]	; (8003880 <HAL_ETH_Init+0xf4>)
 80037ea:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6812      	ldr	r2, [r2, #0]
 80037fa:	f043 0301 	orr.w	r3, r3, #1
 80037fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003802:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003804:	f7ff fa6a 	bl	8002cdc <HAL_GetTick>
 8003808:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800380a:	e011      	b.n	8003830 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800380c:	f7ff fa66 	bl	8002cdc <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800381a:	d909      	bls.n	8003830 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2204      	movs	r2, #4
 8003820:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	22e0      	movs	r2, #224	; 0xe0
 8003828:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e021      	b.n	8003874 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1e4      	bne.n	800380c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f958 	bl	8003af8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 f9ff 	bl	8003c4c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 fa55 	bl	8003cfe <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	461a      	mov	r2, r3
 800385a:	2100      	movs	r1, #0
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f9bd 	bl	8003bdc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2210      	movs	r2, #16
 800386e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	40023800 	.word	0x40023800
 8003880:	40013800 	.word	0x40013800

08003884 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	4b51      	ldr	r3, [pc, #324]	; (80039e0 <ETH_SetMACConfig+0x15c>)
 800389a:	4013      	ands	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	7c1b      	ldrb	r3, [r3, #16]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d102      	bne.n	80038ac <ETH_SetMACConfig+0x28>
 80038a6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80038aa:	e000      	b.n	80038ae <ETH_SetMACConfig+0x2a>
 80038ac:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	7c5b      	ldrb	r3, [r3, #17]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d102      	bne.n	80038bc <ETH_SetMACConfig+0x38>
 80038b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80038ba:	e000      	b.n	80038be <ETH_SetMACConfig+0x3a>
 80038bc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80038be:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80038c4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	7fdb      	ldrb	r3, [r3, #31]
 80038ca:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80038cc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80038d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	7f92      	ldrb	r2, [r2, #30]
 80038d8:	2a00      	cmp	r2, #0
 80038da:	d102      	bne.n	80038e2 <ETH_SetMACConfig+0x5e>
 80038dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80038e0:	e000      	b.n	80038e4 <ETH_SetMACConfig+0x60>
 80038e2:	2200      	movs	r2, #0
                        macconf->Speed |
 80038e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	7f1b      	ldrb	r3, [r3, #28]
 80038ea:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80038ec:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80038f2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	791b      	ldrb	r3, [r3, #4]
 80038f8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80038fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003902:	2a00      	cmp	r2, #0
 8003904:	d102      	bne.n	800390c <ETH_SetMACConfig+0x88>
 8003906:	f44f 7200 	mov.w	r2, #512	; 0x200
 800390a:	e000      	b.n	800390e <ETH_SetMACConfig+0x8a>
 800390c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800390e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	7bdb      	ldrb	r3, [r3, #15]
 8003914:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003916:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800391c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003924:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003926:	4313      	orrs	r3, r2
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800393e:	2001      	movs	r0, #1
 8003940:	f7ff f9d8 	bl	8002cf4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	f64f 7341 	movw	r3, #65345	; 0xff41
 800395a:	4013      	ands	r3, r2
 800395c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003962:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800396a:	2a00      	cmp	r2, #0
 800396c:	d101      	bne.n	8003972 <ETH_SetMACConfig+0xee>
 800396e:	2280      	movs	r2, #128	; 0x80
 8003970:	e000      	b.n	8003974 <ETH_SetMACConfig+0xf0>
 8003972:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003974:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800397a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003982:	2a01      	cmp	r2, #1
 8003984:	d101      	bne.n	800398a <ETH_SetMACConfig+0x106>
 8003986:	2208      	movs	r2, #8
 8003988:	e000      	b.n	800398c <ETH_SetMACConfig+0x108>
 800398a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800398c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003994:	2a01      	cmp	r2, #1
 8003996:	d101      	bne.n	800399c <ETH_SetMACConfig+0x118>
 8003998:	2204      	movs	r2, #4
 800399a:	e000      	b.n	800399e <ETH_SetMACConfig+0x11a>
 800399c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800399e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80039a6:	2a01      	cmp	r2, #1
 80039a8:	d101      	bne.n	80039ae <ETH_SetMACConfig+0x12a>
 80039aa:	2202      	movs	r2, #2
 80039ac:	e000      	b.n	80039b0 <ETH_SetMACConfig+0x12c>
 80039ae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80039b0:	4313      	orrs	r3, r2
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80039c8:	2001      	movs	r0, #1
 80039ca:	f7ff f993 	bl	8002cf4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	619a      	str	r2, [r3, #24]
}
 80039d6:	bf00      	nop
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	ff20810f 	.word	0xff20810f

080039e4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	4b3d      	ldr	r3, [pc, #244]	; (8003af4 <ETH_SetDMAConfig+0x110>)
 80039fe:	4013      	ands	r3, r2
 8003a00:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	7b1b      	ldrb	r3, [r3, #12]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d102      	bne.n	8003a10 <ETH_SetDMAConfig+0x2c>
 8003a0a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003a0e:	e000      	b.n	8003a12 <ETH_SetDMAConfig+0x2e>
 8003a10:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	7b5b      	ldrb	r3, [r3, #13]
 8003a16:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003a18:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	7f52      	ldrb	r2, [r2, #29]
 8003a1e:	2a00      	cmp	r2, #0
 8003a20:	d102      	bne.n	8003a28 <ETH_SetDMAConfig+0x44>
 8003a22:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003a26:	e000      	b.n	8003a2a <ETH_SetDMAConfig+0x46>
 8003a28:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003a2a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	7b9b      	ldrb	r3, [r3, #14]
 8003a30:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003a32:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003a38:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	7f1b      	ldrb	r3, [r3, #28]
 8003a3e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003a40:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	7f9b      	ldrb	r3, [r3, #30]
 8003a46:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003a48:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003a4e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a56:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a68:	461a      	mov	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a7a:	2001      	movs	r0, #1
 8003a7c:	f7ff f93a 	bl	8002cf4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a88:	461a      	mov	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	791b      	ldrb	r3, [r3, #4]
 8003a92:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003a98:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003a9e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003aa4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003aac:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003aae:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003ab6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003abc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6812      	ldr	r2, [r2, #0]
 8003ac2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ac6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003aca:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ad8:	2001      	movs	r0, #1
 8003ada:	f7ff f90b 	bl	8002cf4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6013      	str	r3, [r2, #0]
}
 8003aec:	bf00      	nop
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	f8de3f23 	.word	0xf8de3f23

08003af8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b0a6      	sub	sp, #152	; 0x98
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003b00:	2301      	movs	r3, #1
 8003b02:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003b06:	2301      	movs	r3, #1
 8003b08:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003b10:	2300      	movs	r3, #0
 8003b12:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003b16:	2301      	movs	r3, #1
 8003b18:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003b22:	2301      	movs	r3, #1
 8003b24:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003b34:	2300      	movs	r3, #0
 8003b36:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003b42:	2300      	movs	r3, #0
 8003b44:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003b54:	2300      	movs	r3, #0
 8003b56:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003b5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b5e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003b60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b64:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003b66:	2300      	movs	r3, #0
 8003b68:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003b6c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003b70:	4619      	mov	r1, r3
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7ff fe86 	bl	8003884 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003b80:	2301      	movs	r3, #1
 8003b82:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003b86:	2301      	movs	r3, #1
 8003b88:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003b94:	2300      	movs	r3, #0
 8003b96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003ba8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bac:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003bae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003bb2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003bb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bb8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003bc8:	f107 0308 	add.w	r3, r7, #8
 8003bcc:	4619      	mov	r1, r3
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7ff ff08 	bl	80039e4 <ETH_SetDMAConfig>
}
 8003bd4:	bf00      	nop
 8003bd6:	3798      	adds	r7, #152	; 0x98
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b087      	sub	sp, #28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3305      	adds	r3, #5
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	021b      	lsls	r3, r3, #8
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	3204      	adds	r2, #4
 8003bf4:	7812      	ldrb	r2, [r2, #0]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	4b11      	ldr	r3, [pc, #68]	; (8003c44 <ETH_MACAddressConfig+0x68>)
 8003bfe:	4413      	add	r3, r2
 8003c00:	461a      	mov	r2, r3
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	3303      	adds	r3, #3
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	061a      	lsls	r2, r3, #24
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	3302      	adds	r3, #2
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	041b      	lsls	r3, r3, #16
 8003c16:	431a      	orrs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	021b      	lsls	r3, r3, #8
 8003c20:	4313      	orrs	r3, r2
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	7812      	ldrb	r2, [r2, #0]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	4b06      	ldr	r3, [pc, #24]	; (8003c48 <ETH_MACAddressConfig+0x6c>)
 8003c2e:	4413      	add	r3, r2
 8003c30:	461a      	mov	r2, r3
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	6013      	str	r3, [r2, #0]
}
 8003c36:	bf00      	nop
 8003c38:	371c      	adds	r7, #28
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	40028040 	.word	0x40028040
 8003c48:	40028044 	.word	0x40028044

08003c4c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003c54:	2300      	movs	r3, #0
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	e03e      	b.n	8003cd8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68d9      	ldr	r1, [r3, #12]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	4613      	mov	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	440b      	add	r3, r1
 8003c6a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2200      	movs	r2, #0
 8003c76:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2200      	movs	r2, #0
 8003c82:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003c84:	68b9      	ldr	r1, [r7, #8]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	3206      	adds	r2, #6
 8003c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d80c      	bhi.n	8003cbc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68d9      	ldr	r1, [r3, #12]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	1c5a      	adds	r2, r3, #1
 8003caa:	4613      	mov	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4413      	add	r3, r2
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	440b      	add	r3, r1
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	60da      	str	r2, [r3, #12]
 8003cba:	e004      	b.n	8003cc6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	60fb      	str	r3, [r7, #12]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2b03      	cmp	r3, #3
 8003cdc:	d9bd      	bls.n	8003c5a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68da      	ldr	r2, [r3, #12]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cf0:	611a      	str	r2, [r3, #16]
}
 8003cf2:	bf00      	nop
 8003cf4:	3714      	adds	r7, #20
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b085      	sub	sp, #20
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003d06:	2300      	movs	r3, #0
 8003d08:	60fb      	str	r3, [r7, #12]
 8003d0a:	e046      	b.n	8003d9a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6919      	ldr	r1, [r3, #16]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	4613      	mov	r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	4413      	add	r3, r2
 8003d18:	00db      	lsls	r3, r3, #3
 8003d1a:	440b      	add	r3, r1
 8003d1c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	2200      	movs	r2, #0
 8003d22:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2200      	movs	r2, #0
 8003d28:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	2200      	movs	r2, #0
 8003d34:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003d48:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003d50:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003d5e:	68b9      	ldr	r1, [r7, #8]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	3212      	adds	r2, #18
 8003d66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d80c      	bhi.n	8003d8a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6919      	ldr	r1, [r3, #16]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	1c5a      	adds	r2, r3, #1
 8003d78:	4613      	mov	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4413      	add	r3, r2
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	440b      	add	r3, r1
 8003d82:	461a      	mov	r2, r3
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	60da      	str	r2, [r3, #12]
 8003d88:	e004      	b.n	8003d94 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	3301      	adds	r3, #1
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2b03      	cmp	r3, #3
 8003d9e:	d9b5      	bls.n	8003d0c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	691a      	ldr	r2, [r3, #16]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dca:	60da      	str	r2, [r3, #12]
}
 8003dcc:	bf00      	nop
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b089      	sub	sp, #36	; 0x24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003de2:	2300      	movs	r3, #0
 8003de4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003de6:	2300      	movs	r3, #0
 8003de8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003dea:	2300      	movs	r3, #0
 8003dec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003dee:	2300      	movs	r3, #0
 8003df0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003df2:	2300      	movs	r3, #0
 8003df4:	61fb      	str	r3, [r7, #28]
 8003df6:	e175      	b.n	80040e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003df8:	2201      	movs	r2, #1
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003e00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	f040 8164 	bne.w	80040de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f003 0303 	and.w	r3, r3, #3
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d005      	beq.n	8003e2e <HAL_GPIO_Init+0x56>
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f003 0303 	and.w	r3, r3, #3
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d130      	bne.n	8003e90 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	2203      	movs	r2, #3
 8003e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3e:	43db      	mvns	r3, r3
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	4013      	ands	r3, r2
 8003e44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	68da      	ldr	r2, [r3, #12]
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e64:	2201      	movs	r2, #1
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	4013      	ands	r3, r2
 8003e72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	091b      	lsrs	r3, r3, #4
 8003e7a:	f003 0201 	and.w	r2, r3, #1
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	fa02 f303 	lsl.w	r3, r2, r3
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f003 0303 	and.w	r3, r3, #3
 8003e98:	2b03      	cmp	r3, #3
 8003e9a:	d017      	beq.n	8003ecc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	2203      	movs	r2, #3
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	43db      	mvns	r3, r3
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f003 0303 	and.w	r3, r3, #3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d123      	bne.n	8003f20 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	08da      	lsrs	r2, r3, #3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3208      	adds	r2, #8
 8003ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	220f      	movs	r2, #15
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	43db      	mvns	r3, r3
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	691a      	ldr	r2, [r3, #16]
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	f003 0307 	and.w	r3, r3, #7
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	08da      	lsrs	r2, r3, #3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	3208      	adds	r2, #8
 8003f1a:	69b9      	ldr	r1, [r7, #24]
 8003f1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	2203      	movs	r2, #3
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	43db      	mvns	r3, r3
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	4013      	ands	r3, r2
 8003f36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f003 0203 	and.w	r2, r3, #3
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	fa02 f303 	lsl.w	r3, r2, r3
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 80be 	beq.w	80040de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f62:	4b66      	ldr	r3, [pc, #408]	; (80040fc <HAL_GPIO_Init+0x324>)
 8003f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f66:	4a65      	ldr	r2, [pc, #404]	; (80040fc <HAL_GPIO_Init+0x324>)
 8003f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f6e:	4b63      	ldr	r3, [pc, #396]	; (80040fc <HAL_GPIO_Init+0x324>)
 8003f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003f7a:	4a61      	ldr	r2, [pc, #388]	; (8004100 <HAL_GPIO_Init+0x328>)
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	089b      	lsrs	r3, r3, #2
 8003f80:	3302      	adds	r3, #2
 8003f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	f003 0303 	and.w	r3, r3, #3
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	220f      	movs	r2, #15
 8003f92:	fa02 f303 	lsl.w	r3, r2, r3
 8003f96:	43db      	mvns	r3, r3
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a58      	ldr	r2, [pc, #352]	; (8004104 <HAL_GPIO_Init+0x32c>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d037      	beq.n	8004016 <HAL_GPIO_Init+0x23e>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a57      	ldr	r2, [pc, #348]	; (8004108 <HAL_GPIO_Init+0x330>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d031      	beq.n	8004012 <HAL_GPIO_Init+0x23a>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a56      	ldr	r2, [pc, #344]	; (800410c <HAL_GPIO_Init+0x334>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d02b      	beq.n	800400e <HAL_GPIO_Init+0x236>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a55      	ldr	r2, [pc, #340]	; (8004110 <HAL_GPIO_Init+0x338>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d025      	beq.n	800400a <HAL_GPIO_Init+0x232>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a54      	ldr	r2, [pc, #336]	; (8004114 <HAL_GPIO_Init+0x33c>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d01f      	beq.n	8004006 <HAL_GPIO_Init+0x22e>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a53      	ldr	r2, [pc, #332]	; (8004118 <HAL_GPIO_Init+0x340>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d019      	beq.n	8004002 <HAL_GPIO_Init+0x22a>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a52      	ldr	r2, [pc, #328]	; (800411c <HAL_GPIO_Init+0x344>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d013      	beq.n	8003ffe <HAL_GPIO_Init+0x226>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a51      	ldr	r2, [pc, #324]	; (8004120 <HAL_GPIO_Init+0x348>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d00d      	beq.n	8003ffa <HAL_GPIO_Init+0x222>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a50      	ldr	r2, [pc, #320]	; (8004124 <HAL_GPIO_Init+0x34c>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d007      	beq.n	8003ff6 <HAL_GPIO_Init+0x21e>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a4f      	ldr	r2, [pc, #316]	; (8004128 <HAL_GPIO_Init+0x350>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d101      	bne.n	8003ff2 <HAL_GPIO_Init+0x21a>
 8003fee:	2309      	movs	r3, #9
 8003ff0:	e012      	b.n	8004018 <HAL_GPIO_Init+0x240>
 8003ff2:	230a      	movs	r3, #10
 8003ff4:	e010      	b.n	8004018 <HAL_GPIO_Init+0x240>
 8003ff6:	2308      	movs	r3, #8
 8003ff8:	e00e      	b.n	8004018 <HAL_GPIO_Init+0x240>
 8003ffa:	2307      	movs	r3, #7
 8003ffc:	e00c      	b.n	8004018 <HAL_GPIO_Init+0x240>
 8003ffe:	2306      	movs	r3, #6
 8004000:	e00a      	b.n	8004018 <HAL_GPIO_Init+0x240>
 8004002:	2305      	movs	r3, #5
 8004004:	e008      	b.n	8004018 <HAL_GPIO_Init+0x240>
 8004006:	2304      	movs	r3, #4
 8004008:	e006      	b.n	8004018 <HAL_GPIO_Init+0x240>
 800400a:	2303      	movs	r3, #3
 800400c:	e004      	b.n	8004018 <HAL_GPIO_Init+0x240>
 800400e:	2302      	movs	r3, #2
 8004010:	e002      	b.n	8004018 <HAL_GPIO_Init+0x240>
 8004012:	2301      	movs	r3, #1
 8004014:	e000      	b.n	8004018 <HAL_GPIO_Init+0x240>
 8004016:	2300      	movs	r3, #0
 8004018:	69fa      	ldr	r2, [r7, #28]
 800401a:	f002 0203 	and.w	r2, r2, #3
 800401e:	0092      	lsls	r2, r2, #2
 8004020:	4093      	lsls	r3, r2
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	4313      	orrs	r3, r2
 8004026:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004028:	4935      	ldr	r1, [pc, #212]	; (8004100 <HAL_GPIO_Init+0x328>)
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	089b      	lsrs	r3, r3, #2
 800402e:	3302      	adds	r3, #2
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004036:	4b3d      	ldr	r3, [pc, #244]	; (800412c <HAL_GPIO_Init+0x354>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	43db      	mvns	r3, r3
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	4013      	ands	r3, r2
 8004044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	4313      	orrs	r3, r2
 8004058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800405a:	4a34      	ldr	r2, [pc, #208]	; (800412c <HAL_GPIO_Init+0x354>)
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004060:	4b32      	ldr	r3, [pc, #200]	; (800412c <HAL_GPIO_Init+0x354>)
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	43db      	mvns	r3, r3
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	4013      	ands	r3, r2
 800406e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	4313      	orrs	r3, r2
 8004082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004084:	4a29      	ldr	r2, [pc, #164]	; (800412c <HAL_GPIO_Init+0x354>)
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800408a:	4b28      	ldr	r3, [pc, #160]	; (800412c <HAL_GPIO_Init+0x354>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	43db      	mvns	r3, r3
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	4013      	ands	r3, r2
 8004098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040ae:	4a1f      	ldr	r2, [pc, #124]	; (800412c <HAL_GPIO_Init+0x354>)
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040b4:	4b1d      	ldr	r3, [pc, #116]	; (800412c <HAL_GPIO_Init+0x354>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	43db      	mvns	r3, r3
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	4013      	ands	r3, r2
 80040c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d003      	beq.n	80040d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040d8:	4a14      	ldr	r2, [pc, #80]	; (800412c <HAL_GPIO_Init+0x354>)
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	3301      	adds	r3, #1
 80040e2:	61fb      	str	r3, [r7, #28]
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	2b0f      	cmp	r3, #15
 80040e8:	f67f ae86 	bls.w	8003df8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80040ec:	bf00      	nop
 80040ee:	bf00      	nop
 80040f0:	3724      	adds	r7, #36	; 0x24
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	40023800 	.word	0x40023800
 8004100:	40013800 	.word	0x40013800
 8004104:	40020000 	.word	0x40020000
 8004108:	40020400 	.word	0x40020400
 800410c:	40020800 	.word	0x40020800
 8004110:	40020c00 	.word	0x40020c00
 8004114:	40021000 	.word	0x40021000
 8004118:	40021400 	.word	0x40021400
 800411c:	40021800 	.word	0x40021800
 8004120:	40021c00 	.word	0x40021c00
 8004124:	40022000 	.word	0x40022000
 8004128:	40022400 	.word	0x40022400
 800412c:	40013c00 	.word	0x40013c00

08004130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	460b      	mov	r3, r1
 800413a:	807b      	strh	r3, [r7, #2]
 800413c:	4613      	mov	r3, r2
 800413e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004140:	787b      	ldrb	r3, [r7, #1]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004146:	887a      	ldrh	r2, [r7, #2]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800414c:	e003      	b.n	8004156 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800414e:	887b      	ldrh	r3, [r7, #2]
 8004150:	041a      	lsls	r2, r3, #16
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	619a      	str	r2, [r3, #24]
}
 8004156:	bf00      	nop
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004162:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004164:	b08f      	sub	sp, #60	; 0x3c
 8004166:	af0a      	add	r7, sp, #40	; 0x28
 8004168:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e116      	b.n	80043a2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d106      	bne.n	8004194 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7fe fc34 	bl	80029fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2203      	movs	r2, #3
 8004198:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d102      	bne.n	80041ae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f003 f88c 	bl	80072d0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	603b      	str	r3, [r7, #0]
 80041be:	687e      	ldr	r6, [r7, #4]
 80041c0:	466d      	mov	r5, sp
 80041c2:	f106 0410 	add.w	r4, r6, #16
 80041c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80041d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80041d6:	1d33      	adds	r3, r6, #4
 80041d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041da:	6838      	ldr	r0, [r7, #0]
 80041dc:	f003 f820 	bl	8007220 <USB_CoreInit>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d005      	beq.n	80041f2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2202      	movs	r2, #2
 80041ea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e0d7      	b.n	80043a2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2100      	movs	r1, #0
 80041f8:	4618      	mov	r0, r3
 80041fa:	f003 f87a 	bl	80072f2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041fe:	2300      	movs	r3, #0
 8004200:	73fb      	strb	r3, [r7, #15]
 8004202:	e04a      	b.n	800429a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004204:	7bfa      	ldrb	r2, [r7, #15]
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	4613      	mov	r3, r2
 800420a:	00db      	lsls	r3, r3, #3
 800420c:	4413      	add	r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	440b      	add	r3, r1
 8004212:	333d      	adds	r3, #61	; 0x3d
 8004214:	2201      	movs	r2, #1
 8004216:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004218:	7bfa      	ldrb	r2, [r7, #15]
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	4613      	mov	r3, r2
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	4413      	add	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	440b      	add	r3, r1
 8004226:	333c      	adds	r3, #60	; 0x3c
 8004228:	7bfa      	ldrb	r2, [r7, #15]
 800422a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800422c:	7bfa      	ldrb	r2, [r7, #15]
 800422e:	7bfb      	ldrb	r3, [r7, #15]
 8004230:	b298      	uxth	r0, r3
 8004232:	6879      	ldr	r1, [r7, #4]
 8004234:	4613      	mov	r3, r2
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	4413      	add	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	440b      	add	r3, r1
 800423e:	3344      	adds	r3, #68	; 0x44
 8004240:	4602      	mov	r2, r0
 8004242:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004244:	7bfa      	ldrb	r2, [r7, #15]
 8004246:	6879      	ldr	r1, [r7, #4]
 8004248:	4613      	mov	r3, r2
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	4413      	add	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	440b      	add	r3, r1
 8004252:	3340      	adds	r3, #64	; 0x40
 8004254:	2200      	movs	r2, #0
 8004256:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004258:	7bfa      	ldrb	r2, [r7, #15]
 800425a:	6879      	ldr	r1, [r7, #4]
 800425c:	4613      	mov	r3, r2
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	4413      	add	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	440b      	add	r3, r1
 8004266:	3348      	adds	r3, #72	; 0x48
 8004268:	2200      	movs	r2, #0
 800426a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800426c:	7bfa      	ldrb	r2, [r7, #15]
 800426e:	6879      	ldr	r1, [r7, #4]
 8004270:	4613      	mov	r3, r2
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	4413      	add	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	440b      	add	r3, r1
 800427a:	334c      	adds	r3, #76	; 0x4c
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004280:	7bfa      	ldrb	r2, [r7, #15]
 8004282:	6879      	ldr	r1, [r7, #4]
 8004284:	4613      	mov	r3, r2
 8004286:	00db      	lsls	r3, r3, #3
 8004288:	4413      	add	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	440b      	add	r3, r1
 800428e:	3354      	adds	r3, #84	; 0x54
 8004290:	2200      	movs	r2, #0
 8004292:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004294:	7bfb      	ldrb	r3, [r7, #15]
 8004296:	3301      	adds	r3, #1
 8004298:	73fb      	strb	r3, [r7, #15]
 800429a:	7bfa      	ldrb	r2, [r7, #15]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d3af      	bcc.n	8004204 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042a4:	2300      	movs	r3, #0
 80042a6:	73fb      	strb	r3, [r7, #15]
 80042a8:	e044      	b.n	8004334 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80042aa:	7bfa      	ldrb	r2, [r7, #15]
 80042ac:	6879      	ldr	r1, [r7, #4]
 80042ae:	4613      	mov	r3, r2
 80042b0:	00db      	lsls	r3, r3, #3
 80042b2:	4413      	add	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	440b      	add	r3, r1
 80042b8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80042bc:	2200      	movs	r2, #0
 80042be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80042c0:	7bfa      	ldrb	r2, [r7, #15]
 80042c2:	6879      	ldr	r1, [r7, #4]
 80042c4:	4613      	mov	r3, r2
 80042c6:	00db      	lsls	r3, r3, #3
 80042c8:	4413      	add	r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	440b      	add	r3, r1
 80042ce:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80042d2:	7bfa      	ldrb	r2, [r7, #15]
 80042d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80042d6:	7bfa      	ldrb	r2, [r7, #15]
 80042d8:	6879      	ldr	r1, [r7, #4]
 80042da:	4613      	mov	r3, r2
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	4413      	add	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	440b      	add	r3, r1
 80042e4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80042e8:	2200      	movs	r2, #0
 80042ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80042ec:	7bfa      	ldrb	r2, [r7, #15]
 80042ee:	6879      	ldr	r1, [r7, #4]
 80042f0:	4613      	mov	r3, r2
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	4413      	add	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	440b      	add	r3, r1
 80042fa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80042fe:	2200      	movs	r2, #0
 8004300:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004302:	7bfa      	ldrb	r2, [r7, #15]
 8004304:	6879      	ldr	r1, [r7, #4]
 8004306:	4613      	mov	r3, r2
 8004308:	00db      	lsls	r3, r3, #3
 800430a:	4413      	add	r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	440b      	add	r3, r1
 8004310:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004314:	2200      	movs	r2, #0
 8004316:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004318:	7bfa      	ldrb	r2, [r7, #15]
 800431a:	6879      	ldr	r1, [r7, #4]
 800431c:	4613      	mov	r3, r2
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	4413      	add	r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	440b      	add	r3, r1
 8004326:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800432a:	2200      	movs	r2, #0
 800432c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800432e:	7bfb      	ldrb	r3, [r7, #15]
 8004330:	3301      	adds	r3, #1
 8004332:	73fb      	strb	r3, [r7, #15]
 8004334:	7bfa      	ldrb	r2, [r7, #15]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	429a      	cmp	r2, r3
 800433c:	d3b5      	bcc.n	80042aa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	603b      	str	r3, [r7, #0]
 8004344:	687e      	ldr	r6, [r7, #4]
 8004346:	466d      	mov	r5, sp
 8004348:	f106 0410 	add.w	r4, r6, #16
 800434c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800434e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004350:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004352:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004354:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004358:	e885 0003 	stmia.w	r5, {r0, r1}
 800435c:	1d33      	adds	r3, r6, #4
 800435e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004360:	6838      	ldr	r0, [r7, #0]
 8004362:	f003 f813 	bl	800738c <USB_DevInit>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d005      	beq.n	8004378 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2202      	movs	r2, #2
 8004370:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e014      	b.n	80043a2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438c:	2b01      	cmp	r3, #1
 800438e:	d102      	bne.n	8004396 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f80b 	bl	80043ac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4618      	mov	r0, r3
 800439c:	f003 f9d1 	bl	8007742 <USB_DevDisconnect>

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080043ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043da:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <HAL_PCDEx_ActivateLPM+0x44>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3714      	adds	r7, #20
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	10000003 	.word	0x10000003

080043f4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043f8:	4b05      	ldr	r3, [pc, #20]	; (8004410 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a04      	ldr	r2, [pc, #16]	; (8004410 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80043fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004402:	6013      	str	r3, [r2, #0]
}
 8004404:	bf00      	nop
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	40007000 	.word	0x40007000

08004414 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800441a:	2300      	movs	r3, #0
 800441c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800441e:	4b23      	ldr	r3, [pc, #140]	; (80044ac <HAL_PWREx_EnableOverDrive+0x98>)
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	4a22      	ldr	r2, [pc, #136]	; (80044ac <HAL_PWREx_EnableOverDrive+0x98>)
 8004424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004428:	6413      	str	r3, [r2, #64]	; 0x40
 800442a:	4b20      	ldr	r3, [pc, #128]	; (80044ac <HAL_PWREx_EnableOverDrive+0x98>)
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004432:	603b      	str	r3, [r7, #0]
 8004434:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004436:	4b1e      	ldr	r3, [pc, #120]	; (80044b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a1d      	ldr	r2, [pc, #116]	; (80044b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800443c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004440:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004442:	f7fe fc4b 	bl	8002cdc <HAL_GetTick>
 8004446:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004448:	e009      	b.n	800445e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800444a:	f7fe fc47 	bl	8002cdc <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004458:	d901      	bls.n	800445e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e022      	b.n	80044a4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800445e:	4b14      	ldr	r3, [pc, #80]	; (80044b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800446a:	d1ee      	bne.n	800444a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800446c:	4b10      	ldr	r3, [pc, #64]	; (80044b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a0f      	ldr	r2, [pc, #60]	; (80044b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004472:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004476:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004478:	f7fe fc30 	bl	8002cdc <HAL_GetTick>
 800447c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800447e:	e009      	b.n	8004494 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004480:	f7fe fc2c 	bl	8002cdc <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800448e:	d901      	bls.n	8004494 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e007      	b.n	80044a4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004494:	4b06      	ldr	r3, [pc, #24]	; (80044b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044a0:	d1ee      	bne.n	8004480 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3708      	adds	r7, #8
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40023800 	.word	0x40023800
 80044b0:	40007000 	.word	0x40007000

080044b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80044bc:	2300      	movs	r3, #0
 80044be:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e29b      	b.n	8004a02 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 8087 	beq.w	80045e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044d8:	4b96      	ldr	r3, [pc, #600]	; (8004734 <HAL_RCC_OscConfig+0x280>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 030c 	and.w	r3, r3, #12
 80044e0:	2b04      	cmp	r3, #4
 80044e2:	d00c      	beq.n	80044fe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044e4:	4b93      	ldr	r3, [pc, #588]	; (8004734 <HAL_RCC_OscConfig+0x280>)
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f003 030c 	and.w	r3, r3, #12
 80044ec:	2b08      	cmp	r3, #8
 80044ee:	d112      	bne.n	8004516 <HAL_RCC_OscConfig+0x62>
 80044f0:	4b90      	ldr	r3, [pc, #576]	; (8004734 <HAL_RCC_OscConfig+0x280>)
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044fc:	d10b      	bne.n	8004516 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044fe:	4b8d      	ldr	r3, [pc, #564]	; (8004734 <HAL_RCC_OscConfig+0x280>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d06c      	beq.n	80045e4 <HAL_RCC_OscConfig+0x130>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d168      	bne.n	80045e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e275      	b.n	8004a02 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800451e:	d106      	bne.n	800452e <HAL_RCC_OscConfig+0x7a>
 8004520:	4b84      	ldr	r3, [pc, #528]	; (8004734 <HAL_RCC_OscConfig+0x280>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a83      	ldr	r2, [pc, #524]	; (8004734 <HAL_RCC_OscConfig+0x280>)
 8004526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800452a:	6013      	str	r3, [r2, #0]
 800452c:	e02e      	b.n	800458c <HAL_RCC_OscConfig+0xd8>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10c      	bne.n	8004550 <HAL_RCC_OscConfig+0x9c>
 8004536:	4b7f      	ldr	r3, [pc, #508]	; (8004734 <HAL_RCC_OscConfig+0x280>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a7e      	ldr	r2, [pc, #504]	; (8004734 <HAL_RCC_OscConfig+0x280>)
 800453c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004540:	6013      	str	r3, [r2, #0]
 8004542:	4b7c      	ldr	r3, [pc, #496]	; (8004734 <HAL_RCC_OscConfig+0x280>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a7b      	ldr	r2, [pc, #492]	; (8004734 <HAL_RCC_OscConfig+0x280>)
 8004548:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	e01d      	b.n	800458c <HAL_RCC_OscConfig+0xd8>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004558:	d10c      	bne.n	8004574 <HAL_RCC_OscConfig+0xc0>
 800455a:	4b76      	ldr	r3, [pc, #472]	; (8004734 <HAL_RCC_OscConfig+0x280>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a75      	ldr	r2, [pc, #468]	; (8004734 <HAL_RCC_OscConfig+0x280>)
 8004560:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004564:	6013      	str	r3, [r2, #0]
 8004566:	4b73      	ldr	r3, [pc, #460]	; (8004734 <HAL_RCC_OscConfig+0x280>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a72      	ldr	r2, [pc, #456]	; (8004734 <HAL_RCC_OscConfig+0x280>)
 800456c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004570:	6013      	str	r3, [r2, #0]
 8004572:	e00b      	b.n	800458c <HAL_RCC_OscConfig+0xd8>
 8004574:	4b6f      	ldr	r3, [pc, #444]	; (8004734 <HAL_RCC_OscConfig+0x280>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a6e      	ldr	r2, [pc, #440]	; (8004734 <HAL_RCC_OscConfig+0x280>)
 800457a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800457e:	6013      	str	r3, [r2, #0]
 8004580:	4b6c      	ldr	r3, [pc, #432]	; (8004734 <HAL_RCC_OscConfig+0x280>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a6b      	ldr	r2, [pc, #428]	; (8004734 <HAL_RCC_OscConfig+0x280>)
 8004586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800458a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d013      	beq.n	80045bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004594:	f7fe fba2 	bl	8002cdc <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800459c:	f7fe fb9e 	bl	8002cdc <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b64      	cmp	r3, #100	; 0x64
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e229      	b.n	8004a02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ae:	4b61      	ldr	r3, [pc, #388]	; (8004734 <HAL_RCC_OscConfig+0x280>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d0f0      	beq.n	800459c <HAL_RCC_OscConfig+0xe8>
 80045ba:	e014      	b.n	80045e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045bc:	f7fe fb8e 	bl	8002cdc <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045c4:	f7fe fb8a 	bl	8002cdc <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b64      	cmp	r3, #100	; 0x64
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e215      	b.n	8004a02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045d6:	4b57      	ldr	r3, [pc, #348]	; (8004734 <HAL_RCC_OscConfig+0x280>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1f0      	bne.n	80045c4 <HAL_RCC_OscConfig+0x110>
 80045e2:	e000      	b.n	80045e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d069      	beq.n	80046c6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045f2:	4b50      	ldr	r3, [pc, #320]	; (8004734 <HAL_RCC_OscConfig+0x280>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f003 030c 	and.w	r3, r3, #12
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00b      	beq.n	8004616 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045fe:	4b4d      	ldr	r3, [pc, #308]	; (8004734 <HAL_RCC_OscConfig+0x280>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 030c 	and.w	r3, r3, #12
 8004606:	2b08      	cmp	r3, #8
 8004608:	d11c      	bne.n	8004644 <HAL_RCC_OscConfig+0x190>
 800460a:	4b4a      	ldr	r3, [pc, #296]	; (8004734 <HAL_RCC_OscConfig+0x280>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d116      	bne.n	8004644 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004616:	4b47      	ldr	r3, [pc, #284]	; (8004734 <HAL_RCC_OscConfig+0x280>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d005      	beq.n	800462e <HAL_RCC_OscConfig+0x17a>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d001      	beq.n	800462e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e1e9      	b.n	8004a02 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800462e:	4b41      	ldr	r3, [pc, #260]	; (8004734 <HAL_RCC_OscConfig+0x280>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	493d      	ldr	r1, [pc, #244]	; (8004734 <HAL_RCC_OscConfig+0x280>)
 800463e:	4313      	orrs	r3, r2
 8004640:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004642:	e040      	b.n	80046c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d023      	beq.n	8004694 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800464c:	4b39      	ldr	r3, [pc, #228]	; (8004734 <HAL_RCC_OscConfig+0x280>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a38      	ldr	r2, [pc, #224]	; (8004734 <HAL_RCC_OscConfig+0x280>)
 8004652:	f043 0301 	orr.w	r3, r3, #1
 8004656:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004658:	f7fe fb40 	bl	8002cdc <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800465e:	e008      	b.n	8004672 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004660:	f7fe fb3c 	bl	8002cdc <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e1c7      	b.n	8004a02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004672:	4b30      	ldr	r3, [pc, #192]	; (8004734 <HAL_RCC_OscConfig+0x280>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0f0      	beq.n	8004660 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800467e:	4b2d      	ldr	r3, [pc, #180]	; (8004734 <HAL_RCC_OscConfig+0x280>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	4929      	ldr	r1, [pc, #164]	; (8004734 <HAL_RCC_OscConfig+0x280>)
 800468e:	4313      	orrs	r3, r2
 8004690:	600b      	str	r3, [r1, #0]
 8004692:	e018      	b.n	80046c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004694:	4b27      	ldr	r3, [pc, #156]	; (8004734 <HAL_RCC_OscConfig+0x280>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a26      	ldr	r2, [pc, #152]	; (8004734 <HAL_RCC_OscConfig+0x280>)
 800469a:	f023 0301 	bic.w	r3, r3, #1
 800469e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a0:	f7fe fb1c 	bl	8002cdc <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046a6:	e008      	b.n	80046ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046a8:	f7fe fb18 	bl	8002cdc <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e1a3      	b.n	8004a02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ba:	4b1e      	ldr	r3, [pc, #120]	; (8004734 <HAL_RCC_OscConfig+0x280>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1f0      	bne.n	80046a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0308 	and.w	r3, r3, #8
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d038      	beq.n	8004744 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d019      	beq.n	800470e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046da:	4b16      	ldr	r3, [pc, #88]	; (8004734 <HAL_RCC_OscConfig+0x280>)
 80046dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046de:	4a15      	ldr	r2, [pc, #84]	; (8004734 <HAL_RCC_OscConfig+0x280>)
 80046e0:	f043 0301 	orr.w	r3, r3, #1
 80046e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e6:	f7fe faf9 	bl	8002cdc <HAL_GetTick>
 80046ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ec:	e008      	b.n	8004700 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ee:	f7fe faf5 	bl	8002cdc <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e180      	b.n	8004a02 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004700:	4b0c      	ldr	r3, [pc, #48]	; (8004734 <HAL_RCC_OscConfig+0x280>)
 8004702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d0f0      	beq.n	80046ee <HAL_RCC_OscConfig+0x23a>
 800470c:	e01a      	b.n	8004744 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800470e:	4b09      	ldr	r3, [pc, #36]	; (8004734 <HAL_RCC_OscConfig+0x280>)
 8004710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004712:	4a08      	ldr	r2, [pc, #32]	; (8004734 <HAL_RCC_OscConfig+0x280>)
 8004714:	f023 0301 	bic.w	r3, r3, #1
 8004718:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800471a:	f7fe fadf 	bl	8002cdc <HAL_GetTick>
 800471e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004720:	e00a      	b.n	8004738 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004722:	f7fe fadb 	bl	8002cdc <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d903      	bls.n	8004738 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e166      	b.n	8004a02 <HAL_RCC_OscConfig+0x54e>
 8004734:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004738:	4b92      	ldr	r3, [pc, #584]	; (8004984 <HAL_RCC_OscConfig+0x4d0>)
 800473a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800473c:	f003 0302 	and.w	r3, r3, #2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1ee      	bne.n	8004722 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0304 	and.w	r3, r3, #4
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 80a4 	beq.w	800489a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004752:	4b8c      	ldr	r3, [pc, #560]	; (8004984 <HAL_RCC_OscConfig+0x4d0>)
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10d      	bne.n	800477a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800475e:	4b89      	ldr	r3, [pc, #548]	; (8004984 <HAL_RCC_OscConfig+0x4d0>)
 8004760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004762:	4a88      	ldr	r2, [pc, #544]	; (8004984 <HAL_RCC_OscConfig+0x4d0>)
 8004764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004768:	6413      	str	r3, [r2, #64]	; 0x40
 800476a:	4b86      	ldr	r3, [pc, #536]	; (8004984 <HAL_RCC_OscConfig+0x4d0>)
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004772:	60bb      	str	r3, [r7, #8]
 8004774:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004776:	2301      	movs	r3, #1
 8004778:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800477a:	4b83      	ldr	r3, [pc, #524]	; (8004988 <HAL_RCC_OscConfig+0x4d4>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004782:	2b00      	cmp	r3, #0
 8004784:	d118      	bne.n	80047b8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004786:	4b80      	ldr	r3, [pc, #512]	; (8004988 <HAL_RCC_OscConfig+0x4d4>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a7f      	ldr	r2, [pc, #508]	; (8004988 <HAL_RCC_OscConfig+0x4d4>)
 800478c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004790:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004792:	f7fe faa3 	bl	8002cdc <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004798:	e008      	b.n	80047ac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800479a:	f7fe fa9f 	bl	8002cdc <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b64      	cmp	r3, #100	; 0x64
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e12a      	b.n	8004a02 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047ac:	4b76      	ldr	r3, [pc, #472]	; (8004988 <HAL_RCC_OscConfig+0x4d4>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0f0      	beq.n	800479a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d106      	bne.n	80047ce <HAL_RCC_OscConfig+0x31a>
 80047c0:	4b70      	ldr	r3, [pc, #448]	; (8004984 <HAL_RCC_OscConfig+0x4d0>)
 80047c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c4:	4a6f      	ldr	r2, [pc, #444]	; (8004984 <HAL_RCC_OscConfig+0x4d0>)
 80047c6:	f043 0301 	orr.w	r3, r3, #1
 80047ca:	6713      	str	r3, [r2, #112]	; 0x70
 80047cc:	e02d      	b.n	800482a <HAL_RCC_OscConfig+0x376>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10c      	bne.n	80047f0 <HAL_RCC_OscConfig+0x33c>
 80047d6:	4b6b      	ldr	r3, [pc, #428]	; (8004984 <HAL_RCC_OscConfig+0x4d0>)
 80047d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047da:	4a6a      	ldr	r2, [pc, #424]	; (8004984 <HAL_RCC_OscConfig+0x4d0>)
 80047dc:	f023 0301 	bic.w	r3, r3, #1
 80047e0:	6713      	str	r3, [r2, #112]	; 0x70
 80047e2:	4b68      	ldr	r3, [pc, #416]	; (8004984 <HAL_RCC_OscConfig+0x4d0>)
 80047e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e6:	4a67      	ldr	r2, [pc, #412]	; (8004984 <HAL_RCC_OscConfig+0x4d0>)
 80047e8:	f023 0304 	bic.w	r3, r3, #4
 80047ec:	6713      	str	r3, [r2, #112]	; 0x70
 80047ee:	e01c      	b.n	800482a <HAL_RCC_OscConfig+0x376>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	2b05      	cmp	r3, #5
 80047f6:	d10c      	bne.n	8004812 <HAL_RCC_OscConfig+0x35e>
 80047f8:	4b62      	ldr	r3, [pc, #392]	; (8004984 <HAL_RCC_OscConfig+0x4d0>)
 80047fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fc:	4a61      	ldr	r2, [pc, #388]	; (8004984 <HAL_RCC_OscConfig+0x4d0>)
 80047fe:	f043 0304 	orr.w	r3, r3, #4
 8004802:	6713      	str	r3, [r2, #112]	; 0x70
 8004804:	4b5f      	ldr	r3, [pc, #380]	; (8004984 <HAL_RCC_OscConfig+0x4d0>)
 8004806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004808:	4a5e      	ldr	r2, [pc, #376]	; (8004984 <HAL_RCC_OscConfig+0x4d0>)
 800480a:	f043 0301 	orr.w	r3, r3, #1
 800480e:	6713      	str	r3, [r2, #112]	; 0x70
 8004810:	e00b      	b.n	800482a <HAL_RCC_OscConfig+0x376>
 8004812:	4b5c      	ldr	r3, [pc, #368]	; (8004984 <HAL_RCC_OscConfig+0x4d0>)
 8004814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004816:	4a5b      	ldr	r2, [pc, #364]	; (8004984 <HAL_RCC_OscConfig+0x4d0>)
 8004818:	f023 0301 	bic.w	r3, r3, #1
 800481c:	6713      	str	r3, [r2, #112]	; 0x70
 800481e:	4b59      	ldr	r3, [pc, #356]	; (8004984 <HAL_RCC_OscConfig+0x4d0>)
 8004820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004822:	4a58      	ldr	r2, [pc, #352]	; (8004984 <HAL_RCC_OscConfig+0x4d0>)
 8004824:	f023 0304 	bic.w	r3, r3, #4
 8004828:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d015      	beq.n	800485e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004832:	f7fe fa53 	bl	8002cdc <HAL_GetTick>
 8004836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004838:	e00a      	b.n	8004850 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800483a:	f7fe fa4f 	bl	8002cdc <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	f241 3288 	movw	r2, #5000	; 0x1388
 8004848:	4293      	cmp	r3, r2
 800484a:	d901      	bls.n	8004850 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e0d8      	b.n	8004a02 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004850:	4b4c      	ldr	r3, [pc, #304]	; (8004984 <HAL_RCC_OscConfig+0x4d0>)
 8004852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0ee      	beq.n	800483a <HAL_RCC_OscConfig+0x386>
 800485c:	e014      	b.n	8004888 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800485e:	f7fe fa3d 	bl	8002cdc <HAL_GetTick>
 8004862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004864:	e00a      	b.n	800487c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004866:	f7fe fa39 	bl	8002cdc <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	f241 3288 	movw	r2, #5000	; 0x1388
 8004874:	4293      	cmp	r3, r2
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e0c2      	b.n	8004a02 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800487c:	4b41      	ldr	r3, [pc, #260]	; (8004984 <HAL_RCC_OscConfig+0x4d0>)
 800487e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1ee      	bne.n	8004866 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004888:	7dfb      	ldrb	r3, [r7, #23]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d105      	bne.n	800489a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800488e:	4b3d      	ldr	r3, [pc, #244]	; (8004984 <HAL_RCC_OscConfig+0x4d0>)
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	4a3c      	ldr	r2, [pc, #240]	; (8004984 <HAL_RCC_OscConfig+0x4d0>)
 8004894:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004898:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f000 80ae 	beq.w	8004a00 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048a4:	4b37      	ldr	r3, [pc, #220]	; (8004984 <HAL_RCC_OscConfig+0x4d0>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f003 030c 	and.w	r3, r3, #12
 80048ac:	2b08      	cmp	r3, #8
 80048ae:	d06d      	beq.n	800498c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d14b      	bne.n	8004950 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048b8:	4b32      	ldr	r3, [pc, #200]	; (8004984 <HAL_RCC_OscConfig+0x4d0>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a31      	ldr	r2, [pc, #196]	; (8004984 <HAL_RCC_OscConfig+0x4d0>)
 80048be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c4:	f7fe fa0a 	bl	8002cdc <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048cc:	f7fe fa06 	bl	8002cdc <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e091      	b.n	8004a02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048de:	4b29      	ldr	r3, [pc, #164]	; (8004984 <HAL_RCC_OscConfig+0x4d0>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1f0      	bne.n	80048cc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	69da      	ldr	r2, [r3, #28]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	431a      	orrs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	019b      	lsls	r3, r3, #6
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004900:	085b      	lsrs	r3, r3, #1
 8004902:	3b01      	subs	r3, #1
 8004904:	041b      	lsls	r3, r3, #16
 8004906:	431a      	orrs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490c:	061b      	lsls	r3, r3, #24
 800490e:	431a      	orrs	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004914:	071b      	lsls	r3, r3, #28
 8004916:	491b      	ldr	r1, [pc, #108]	; (8004984 <HAL_RCC_OscConfig+0x4d0>)
 8004918:	4313      	orrs	r3, r2
 800491a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800491c:	4b19      	ldr	r3, [pc, #100]	; (8004984 <HAL_RCC_OscConfig+0x4d0>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a18      	ldr	r2, [pc, #96]	; (8004984 <HAL_RCC_OscConfig+0x4d0>)
 8004922:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004928:	f7fe f9d8 	bl	8002cdc <HAL_GetTick>
 800492c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800492e:	e008      	b.n	8004942 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004930:	f7fe f9d4 	bl	8002cdc <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b02      	cmp	r3, #2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e05f      	b.n	8004a02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004942:	4b10      	ldr	r3, [pc, #64]	; (8004984 <HAL_RCC_OscConfig+0x4d0>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d0f0      	beq.n	8004930 <HAL_RCC_OscConfig+0x47c>
 800494e:	e057      	b.n	8004a00 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004950:	4b0c      	ldr	r3, [pc, #48]	; (8004984 <HAL_RCC_OscConfig+0x4d0>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a0b      	ldr	r2, [pc, #44]	; (8004984 <HAL_RCC_OscConfig+0x4d0>)
 8004956:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800495a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800495c:	f7fe f9be 	bl	8002cdc <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004964:	f7fe f9ba 	bl	8002cdc <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e045      	b.n	8004a02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004976:	4b03      	ldr	r3, [pc, #12]	; (8004984 <HAL_RCC_OscConfig+0x4d0>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1f0      	bne.n	8004964 <HAL_RCC_OscConfig+0x4b0>
 8004982:	e03d      	b.n	8004a00 <HAL_RCC_OscConfig+0x54c>
 8004984:	40023800 	.word	0x40023800
 8004988:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800498c:	4b1f      	ldr	r3, [pc, #124]	; (8004a0c <HAL_RCC_OscConfig+0x558>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d030      	beq.n	80049fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d129      	bne.n	80049fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d122      	bne.n	80049fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049bc:	4013      	ands	r3, r2
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049c2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d119      	bne.n	80049fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d2:	085b      	lsrs	r3, r3, #1
 80049d4:	3b01      	subs	r3, #1
 80049d6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049d8:	429a      	cmp	r2, r3
 80049da:	d10f      	bne.n	80049fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d107      	bne.n	80049fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d001      	beq.n	8004a00 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e000      	b.n	8004a02 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3718      	adds	r7, #24
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	40023800 	.word	0x40023800

08004a10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d101      	bne.n	8004a28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e0d0      	b.n	8004bca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a28:	4b6a      	ldr	r3, [pc, #424]	; (8004bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 030f 	and.w	r3, r3, #15
 8004a30:	683a      	ldr	r2, [r7, #0]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d910      	bls.n	8004a58 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a36:	4b67      	ldr	r3, [pc, #412]	; (8004bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f023 020f 	bic.w	r2, r3, #15
 8004a3e:	4965      	ldr	r1, [pc, #404]	; (8004bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a46:	4b63      	ldr	r3, [pc, #396]	; (8004bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 030f 	and.w	r3, r3, #15
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d001      	beq.n	8004a58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e0b8      	b.n	8004bca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d020      	beq.n	8004aa6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d005      	beq.n	8004a7c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a70:	4b59      	ldr	r3, [pc, #356]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	4a58      	ldr	r2, [pc, #352]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0308 	and.w	r3, r3, #8
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d005      	beq.n	8004a94 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a88:	4b53      	ldr	r3, [pc, #332]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	4a52      	ldr	r2, [pc, #328]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a92:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a94:	4b50      	ldr	r3, [pc, #320]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	494d      	ldr	r1, [pc, #308]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d040      	beq.n	8004b34 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d107      	bne.n	8004aca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aba:	4b47      	ldr	r3, [pc, #284]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d115      	bne.n	8004af2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e07f      	b.n	8004bca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d107      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ad2:	4b41      	ldr	r3, [pc, #260]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d109      	bne.n	8004af2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e073      	b.n	8004bca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ae2:	4b3d      	ldr	r3, [pc, #244]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e06b      	b.n	8004bca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004af2:	4b39      	ldr	r3, [pc, #228]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f023 0203 	bic.w	r2, r3, #3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	4936      	ldr	r1, [pc, #216]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b04:	f7fe f8ea 	bl	8002cdc <HAL_GetTick>
 8004b08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b0a:	e00a      	b.n	8004b22 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b0c:	f7fe f8e6 	bl	8002cdc <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e053      	b.n	8004bca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b22:	4b2d      	ldr	r3, [pc, #180]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 020c 	and.w	r2, r3, #12
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d1eb      	bne.n	8004b0c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b34:	4b27      	ldr	r3, [pc, #156]	; (8004bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 030f 	and.w	r3, r3, #15
 8004b3c:	683a      	ldr	r2, [r7, #0]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d210      	bcs.n	8004b64 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b42:	4b24      	ldr	r3, [pc, #144]	; (8004bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f023 020f 	bic.w	r2, r3, #15
 8004b4a:	4922      	ldr	r1, [pc, #136]	; (8004bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b52:	4b20      	ldr	r3, [pc, #128]	; (8004bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 030f 	and.w	r3, r3, #15
 8004b5a:	683a      	ldr	r2, [r7, #0]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d001      	beq.n	8004b64 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e032      	b.n	8004bca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0304 	and.w	r3, r3, #4
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d008      	beq.n	8004b82 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b70:	4b19      	ldr	r3, [pc, #100]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	4916      	ldr	r1, [pc, #88]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0308 	and.w	r3, r3, #8
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d009      	beq.n	8004ba2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b8e:	4b12      	ldr	r3, [pc, #72]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	490e      	ldr	r1, [pc, #56]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ba2:	f000 f821 	bl	8004be8 <HAL_RCC_GetSysClockFreq>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	4b0b      	ldr	r3, [pc, #44]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	091b      	lsrs	r3, r3, #4
 8004bae:	f003 030f 	and.w	r3, r3, #15
 8004bb2:	490a      	ldr	r1, [pc, #40]	; (8004bdc <HAL_RCC_ClockConfig+0x1cc>)
 8004bb4:	5ccb      	ldrb	r3, [r1, r3]
 8004bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bba:	4a09      	ldr	r2, [pc, #36]	; (8004be0 <HAL_RCC_ClockConfig+0x1d0>)
 8004bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004bbe:	4b09      	ldr	r3, [pc, #36]	; (8004be4 <HAL_RCC_ClockConfig+0x1d4>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7fd ff94 	bl	8002af0 <HAL_InitTick>

  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	40023c00 	.word	0x40023c00
 8004bd8:	40023800 	.word	0x40023800
 8004bdc:	0800b858 	.word	0x0800b858
 8004be0:	20000004 	.word	0x20000004
 8004be4:	20000008 	.word	0x20000008

08004be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bec:	b094      	sub	sp, #80	; 0x50
 8004bee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	647b      	str	r3, [r7, #68]	; 0x44
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c00:	4b79      	ldr	r3, [pc, #484]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f003 030c 	and.w	r3, r3, #12
 8004c08:	2b08      	cmp	r3, #8
 8004c0a:	d00d      	beq.n	8004c28 <HAL_RCC_GetSysClockFreq+0x40>
 8004c0c:	2b08      	cmp	r3, #8
 8004c0e:	f200 80e1 	bhi.w	8004dd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d002      	beq.n	8004c1c <HAL_RCC_GetSysClockFreq+0x34>
 8004c16:	2b04      	cmp	r3, #4
 8004c18:	d003      	beq.n	8004c22 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c1a:	e0db      	b.n	8004dd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c1c:	4b73      	ldr	r3, [pc, #460]	; (8004dec <HAL_RCC_GetSysClockFreq+0x204>)
 8004c1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c20:	e0db      	b.n	8004dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c22:	4b73      	ldr	r3, [pc, #460]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c26:	e0d8      	b.n	8004dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c28:	4b6f      	ldr	r3, [pc, #444]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c30:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004c32:	4b6d      	ldr	r3, [pc, #436]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d063      	beq.n	8004d06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c3e:	4b6a      	ldr	r3, [pc, #424]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	099b      	lsrs	r3, r3, #6
 8004c44:	2200      	movs	r2, #0
 8004c46:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c50:	633b      	str	r3, [r7, #48]	; 0x30
 8004c52:	2300      	movs	r3, #0
 8004c54:	637b      	str	r3, [r7, #52]	; 0x34
 8004c56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c5a:	4622      	mov	r2, r4
 8004c5c:	462b      	mov	r3, r5
 8004c5e:	f04f 0000 	mov.w	r0, #0
 8004c62:	f04f 0100 	mov.w	r1, #0
 8004c66:	0159      	lsls	r1, r3, #5
 8004c68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c6c:	0150      	lsls	r0, r2, #5
 8004c6e:	4602      	mov	r2, r0
 8004c70:	460b      	mov	r3, r1
 8004c72:	4621      	mov	r1, r4
 8004c74:	1a51      	subs	r1, r2, r1
 8004c76:	6139      	str	r1, [r7, #16]
 8004c78:	4629      	mov	r1, r5
 8004c7a:	eb63 0301 	sbc.w	r3, r3, r1
 8004c7e:	617b      	str	r3, [r7, #20]
 8004c80:	f04f 0200 	mov.w	r2, #0
 8004c84:	f04f 0300 	mov.w	r3, #0
 8004c88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c8c:	4659      	mov	r1, fp
 8004c8e:	018b      	lsls	r3, r1, #6
 8004c90:	4651      	mov	r1, sl
 8004c92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c96:	4651      	mov	r1, sl
 8004c98:	018a      	lsls	r2, r1, #6
 8004c9a:	4651      	mov	r1, sl
 8004c9c:	ebb2 0801 	subs.w	r8, r2, r1
 8004ca0:	4659      	mov	r1, fp
 8004ca2:	eb63 0901 	sbc.w	r9, r3, r1
 8004ca6:	f04f 0200 	mov.w	r2, #0
 8004caa:	f04f 0300 	mov.w	r3, #0
 8004cae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cba:	4690      	mov	r8, r2
 8004cbc:	4699      	mov	r9, r3
 8004cbe:	4623      	mov	r3, r4
 8004cc0:	eb18 0303 	adds.w	r3, r8, r3
 8004cc4:	60bb      	str	r3, [r7, #8]
 8004cc6:	462b      	mov	r3, r5
 8004cc8:	eb49 0303 	adc.w	r3, r9, r3
 8004ccc:	60fb      	str	r3, [r7, #12]
 8004cce:	f04f 0200 	mov.w	r2, #0
 8004cd2:	f04f 0300 	mov.w	r3, #0
 8004cd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004cda:	4629      	mov	r1, r5
 8004cdc:	024b      	lsls	r3, r1, #9
 8004cde:	4621      	mov	r1, r4
 8004ce0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ce4:	4621      	mov	r1, r4
 8004ce6:	024a      	lsls	r2, r1, #9
 8004ce8:	4610      	mov	r0, r2
 8004cea:	4619      	mov	r1, r3
 8004cec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cee:	2200      	movs	r2, #0
 8004cf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cf4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cf8:	f7fb faec 	bl	80002d4 <__aeabi_uldivmod>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	460b      	mov	r3, r1
 8004d00:	4613      	mov	r3, r2
 8004d02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d04:	e058      	b.n	8004db8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d06:	4b38      	ldr	r3, [pc, #224]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	099b      	lsrs	r3, r3, #6
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	4618      	mov	r0, r3
 8004d10:	4611      	mov	r1, r2
 8004d12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d16:	623b      	str	r3, [r7, #32]
 8004d18:	2300      	movs	r3, #0
 8004d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d20:	4642      	mov	r2, r8
 8004d22:	464b      	mov	r3, r9
 8004d24:	f04f 0000 	mov.w	r0, #0
 8004d28:	f04f 0100 	mov.w	r1, #0
 8004d2c:	0159      	lsls	r1, r3, #5
 8004d2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d32:	0150      	lsls	r0, r2, #5
 8004d34:	4602      	mov	r2, r0
 8004d36:	460b      	mov	r3, r1
 8004d38:	4641      	mov	r1, r8
 8004d3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d3e:	4649      	mov	r1, r9
 8004d40:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d44:	f04f 0200 	mov.w	r2, #0
 8004d48:	f04f 0300 	mov.w	r3, #0
 8004d4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d58:	ebb2 040a 	subs.w	r4, r2, sl
 8004d5c:	eb63 050b 	sbc.w	r5, r3, fp
 8004d60:	f04f 0200 	mov.w	r2, #0
 8004d64:	f04f 0300 	mov.w	r3, #0
 8004d68:	00eb      	lsls	r3, r5, #3
 8004d6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d6e:	00e2      	lsls	r2, r4, #3
 8004d70:	4614      	mov	r4, r2
 8004d72:	461d      	mov	r5, r3
 8004d74:	4643      	mov	r3, r8
 8004d76:	18e3      	adds	r3, r4, r3
 8004d78:	603b      	str	r3, [r7, #0]
 8004d7a:	464b      	mov	r3, r9
 8004d7c:	eb45 0303 	adc.w	r3, r5, r3
 8004d80:	607b      	str	r3, [r7, #4]
 8004d82:	f04f 0200 	mov.w	r2, #0
 8004d86:	f04f 0300 	mov.w	r3, #0
 8004d8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d8e:	4629      	mov	r1, r5
 8004d90:	028b      	lsls	r3, r1, #10
 8004d92:	4621      	mov	r1, r4
 8004d94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d98:	4621      	mov	r1, r4
 8004d9a:	028a      	lsls	r2, r1, #10
 8004d9c:	4610      	mov	r0, r2
 8004d9e:	4619      	mov	r1, r3
 8004da0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004da2:	2200      	movs	r2, #0
 8004da4:	61bb      	str	r3, [r7, #24]
 8004da6:	61fa      	str	r2, [r7, #28]
 8004da8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dac:	f7fb fa92 	bl	80002d4 <__aeabi_uldivmod>
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	4613      	mov	r3, r2
 8004db6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004db8:	4b0b      	ldr	r3, [pc, #44]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	0c1b      	lsrs	r3, r3, #16
 8004dbe:	f003 0303 	and.w	r3, r3, #3
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	005b      	lsls	r3, r3, #1
 8004dc6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004dc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dd2:	e002      	b.n	8004dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dd4:	4b05      	ldr	r3, [pc, #20]	; (8004dec <HAL_RCC_GetSysClockFreq+0x204>)
 8004dd6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3750      	adds	r7, #80	; 0x50
 8004de0:	46bd      	mov	sp, r7
 8004de2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004de6:	bf00      	nop
 8004de8:	40023800 	.word	0x40023800
 8004dec:	00f42400 	.word	0x00f42400
 8004df0:	007a1200 	.word	0x007a1200

08004df4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004df4:	b480      	push	{r7}
 8004df6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004df8:	4b03      	ldr	r3, [pc, #12]	; (8004e08 <HAL_RCC_GetHCLKFreq+0x14>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	20000004 	.word	0x20000004

08004e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e10:	f7ff fff0 	bl	8004df4 <HAL_RCC_GetHCLKFreq>
 8004e14:	4602      	mov	r2, r0
 8004e16:	4b05      	ldr	r3, [pc, #20]	; (8004e2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	0a9b      	lsrs	r3, r3, #10
 8004e1c:	f003 0307 	and.w	r3, r3, #7
 8004e20:	4903      	ldr	r1, [pc, #12]	; (8004e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e22:	5ccb      	ldrb	r3, [r1, r3]
 8004e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	40023800 	.word	0x40023800
 8004e30:	0800b868 	.word	0x0800b868

08004e34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e38:	f7ff ffdc 	bl	8004df4 <HAL_RCC_GetHCLKFreq>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	4b05      	ldr	r3, [pc, #20]	; (8004e54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	0b5b      	lsrs	r3, r3, #13
 8004e44:	f003 0307 	and.w	r3, r3, #7
 8004e48:	4903      	ldr	r1, [pc, #12]	; (8004e58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e4a:	5ccb      	ldrb	r3, [r1, r3]
 8004e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	40023800 	.word	0x40023800
 8004e58:	0800b868 	.word	0x0800b868

08004e5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	220f      	movs	r2, #15
 8004e6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e6c:	4b12      	ldr	r3, [pc, #72]	; (8004eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f003 0203 	and.w	r2, r3, #3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004e78:	4b0f      	ldr	r3, [pc, #60]	; (8004eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004e84:	4b0c      	ldr	r3, [pc, #48]	; (8004eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004e90:	4b09      	ldr	r3, [pc, #36]	; (8004eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	08db      	lsrs	r3, r3, #3
 8004e96:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004e9e:	4b07      	ldr	r3, [pc, #28]	; (8004ebc <HAL_RCC_GetClockConfig+0x60>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 020f 	and.w	r2, r3, #15
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	601a      	str	r2, [r3, #0]
}
 8004eaa:	bf00      	nop
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	40023800 	.word	0x40023800
 8004ebc:	40023c00 	.word	0x40023c00

08004ec0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b088      	sub	sp, #32
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d012      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ee8:	4b69      	ldr	r3, [pc, #420]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	4a68      	ldr	r2, [pc, #416]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004ef2:	6093      	str	r3, [r2, #8]
 8004ef4:	4b66      	ldr	r3, [pc, #408]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004efc:	4964      	ldr	r1, [pc, #400]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d017      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f1a:	4b5d      	ldr	r3, [pc, #372]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f28:	4959      	ldr	r1, [pc, #356]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f38:	d101      	bne.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004f46:	2301      	movs	r3, #1
 8004f48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d017      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f56:	4b4e      	ldr	r3, [pc, #312]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f64:	494a      	ldr	r1, [pc, #296]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f74:	d101      	bne.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004f76:	2301      	movs	r3, #1
 8004f78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004f82:	2301      	movs	r3, #1
 8004f84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d001      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004f92:	2301      	movs	r3, #1
 8004f94:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0320 	and.w	r3, r3, #32
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f000 808b 	beq.w	80050ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fa4:	4b3a      	ldr	r3, [pc, #232]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa8:	4a39      	ldr	r2, [pc, #228]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fae:	6413      	str	r3, [r2, #64]	; 0x40
 8004fb0:	4b37      	ldr	r3, [pc, #220]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb8:	60bb      	str	r3, [r7, #8]
 8004fba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004fbc:	4b35      	ldr	r3, [pc, #212]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a34      	ldr	r2, [pc, #208]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fc8:	f7fd fe88 	bl	8002cdc <HAL_GetTick>
 8004fcc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004fce:	e008      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fd0:	f7fd fe84 	bl	8002cdc <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b64      	cmp	r3, #100	; 0x64
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e38f      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004fe2:	4b2c      	ldr	r3, [pc, #176]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d0f0      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fee:	4b28      	ldr	r3, [pc, #160]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ff6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d035      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	429a      	cmp	r2, r3
 800500a:	d02e      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800500c:	4b20      	ldr	r3, [pc, #128]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800500e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005014:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005016:	4b1e      	ldr	r3, [pc, #120]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800501a:	4a1d      	ldr	r2, [pc, #116]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800501c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005020:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005022:	4b1b      	ldr	r3, [pc, #108]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005026:	4a1a      	ldr	r2, [pc, #104]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005028:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800502c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800502e:	4a18      	ldr	r2, [pc, #96]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005034:	4b16      	ldr	r3, [pc, #88]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b01      	cmp	r3, #1
 800503e:	d114      	bne.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005040:	f7fd fe4c 	bl	8002cdc <HAL_GetTick>
 8005044:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005046:	e00a      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005048:	f7fd fe48 	bl	8002cdc <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	f241 3288 	movw	r2, #5000	; 0x1388
 8005056:	4293      	cmp	r3, r2
 8005058:	d901      	bls.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e351      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800505e:	4b0c      	ldr	r3, [pc, #48]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d0ee      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005072:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005076:	d111      	bne.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005078:	4b05      	ldr	r3, [pc, #20]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005084:	4b04      	ldr	r3, [pc, #16]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005086:	400b      	ands	r3, r1
 8005088:	4901      	ldr	r1, [pc, #4]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800508a:	4313      	orrs	r3, r2
 800508c:	608b      	str	r3, [r1, #8]
 800508e:	e00b      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005090:	40023800 	.word	0x40023800
 8005094:	40007000 	.word	0x40007000
 8005098:	0ffffcff 	.word	0x0ffffcff
 800509c:	4bac      	ldr	r3, [pc, #688]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	4aab      	ldr	r2, [pc, #684]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050a2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80050a6:	6093      	str	r3, [r2, #8]
 80050a8:	4ba9      	ldr	r3, [pc, #676]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050b4:	49a6      	ldr	r1, [pc, #664]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0310 	and.w	r3, r3, #16
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d010      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80050c6:	4ba2      	ldr	r3, [pc, #648]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050cc:	4aa0      	ldr	r2, [pc, #640]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80050d6:	4b9e      	ldr	r3, [pc, #632]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050d8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e0:	499b      	ldr	r1, [pc, #620]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00a      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050f4:	4b96      	ldr	r3, [pc, #600]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005102:	4993      	ldr	r1, [pc, #588]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005104:	4313      	orrs	r3, r2
 8005106:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005116:	4b8e      	ldr	r3, [pc, #568]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800511c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005124:	498a      	ldr	r1, [pc, #552]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005126:	4313      	orrs	r3, r2
 8005128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00a      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005138:	4b85      	ldr	r3, [pc, #532]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800513a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800513e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005146:	4982      	ldr	r1, [pc, #520]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005148:	4313      	orrs	r3, r2
 800514a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00a      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800515a:	4b7d      	ldr	r3, [pc, #500]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800515c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005160:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005168:	4979      	ldr	r1, [pc, #484]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800516a:	4313      	orrs	r3, r2
 800516c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00a      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800517c:	4b74      	ldr	r3, [pc, #464]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800517e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005182:	f023 0203 	bic.w	r2, r3, #3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800518a:	4971      	ldr	r1, [pc, #452]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800518c:	4313      	orrs	r3, r2
 800518e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00a      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800519e:	4b6c      	ldr	r3, [pc, #432]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a4:	f023 020c 	bic.w	r2, r3, #12
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051ac:	4968      	ldr	r1, [pc, #416]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00a      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80051c0:	4b63      	ldr	r3, [pc, #396]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ce:	4960      	ldr	r1, [pc, #384]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00a      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80051e2:	4b5b      	ldr	r3, [pc, #364]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051f0:	4957      	ldr	r1, [pc, #348]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00a      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005204:	4b52      	ldr	r3, [pc, #328]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800520a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005212:	494f      	ldr	r1, [pc, #316]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005214:	4313      	orrs	r3, r2
 8005216:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00a      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005226:	4b4a      	ldr	r3, [pc, #296]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800522c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005234:	4946      	ldr	r1, [pc, #280]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005236:	4313      	orrs	r3, r2
 8005238:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00a      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005248:	4b41      	ldr	r3, [pc, #260]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800524a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800524e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005256:	493e      	ldr	r1, [pc, #248]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005258:	4313      	orrs	r3, r2
 800525a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00a      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800526a:	4b39      	ldr	r3, [pc, #228]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800526c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005270:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005278:	4935      	ldr	r1, [pc, #212]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800527a:	4313      	orrs	r3, r2
 800527c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00a      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800528c:	4b30      	ldr	r3, [pc, #192]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800528e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005292:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800529a:	492d      	ldr	r1, [pc, #180]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800529c:	4313      	orrs	r3, r2
 800529e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d011      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80052ae:	4b28      	ldr	r3, [pc, #160]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052bc:	4924      	ldr	r1, [pc, #144]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052cc:	d101      	bne.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80052ce:	2301      	movs	r3, #1
 80052d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0308 	and.w	r3, r3, #8
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80052de:	2301      	movs	r3, #1
 80052e0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00a      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052ee:	4b18      	ldr	r3, [pc, #96]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052fc:	4914      	ldr	r1, [pc, #80]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00b      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005310:	4b0f      	ldr	r3, [pc, #60]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005316:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005320:	490b      	ldr	r1, [pc, #44]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005322:	4313      	orrs	r3, r2
 8005324:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00f      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005334:	4b06      	ldr	r3, [pc, #24]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800533a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005344:	4902      	ldr	r1, [pc, #8]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005346:	4313      	orrs	r3, r2
 8005348:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800534c:	e002      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800534e:	bf00      	nop
 8005350:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00b      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005360:	4b8a      	ldr	r3, [pc, #552]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005362:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005366:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005370:	4986      	ldr	r1, [pc, #536]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005372:	4313      	orrs	r3, r2
 8005374:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00b      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005384:	4b81      	ldr	r3, [pc, #516]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005386:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800538a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005394:	497d      	ldr	r1, [pc, #500]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005396:	4313      	orrs	r3, r2
 8005398:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d006      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f000 80d6 	beq.w	800555c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80053b0:	4b76      	ldr	r3, [pc, #472]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a75      	ldr	r2, [pc, #468]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80053ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053bc:	f7fd fc8e 	bl	8002cdc <HAL_GetTick>
 80053c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053c2:	e008      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80053c4:	f7fd fc8a 	bl	8002cdc <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b64      	cmp	r3, #100	; 0x64
 80053d0:	d901      	bls.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e195      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053d6:	4b6d      	ldr	r3, [pc, #436]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1f0      	bne.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0301 	and.w	r3, r3, #1
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d021      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d11d      	bne.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80053f6:	4b65      	ldr	r3, [pc, #404]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053fc:	0c1b      	lsrs	r3, r3, #16
 80053fe:	f003 0303 	and.w	r3, r3, #3
 8005402:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005404:	4b61      	ldr	r3, [pc, #388]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005406:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800540a:	0e1b      	lsrs	r3, r3, #24
 800540c:	f003 030f 	and.w	r3, r3, #15
 8005410:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	019a      	lsls	r2, r3, #6
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	041b      	lsls	r3, r3, #16
 800541c:	431a      	orrs	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	061b      	lsls	r3, r3, #24
 8005422:	431a      	orrs	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	071b      	lsls	r3, r3, #28
 800542a:	4958      	ldr	r1, [pc, #352]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800542c:	4313      	orrs	r3, r2
 800542e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d004      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005442:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005446:	d00a      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005450:	2b00      	cmp	r3, #0
 8005452:	d02e      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005458:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800545c:	d129      	bne.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800545e:	4b4b      	ldr	r3, [pc, #300]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005460:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005464:	0c1b      	lsrs	r3, r3, #16
 8005466:	f003 0303 	and.w	r3, r3, #3
 800546a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800546c:	4b47      	ldr	r3, [pc, #284]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800546e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005472:	0f1b      	lsrs	r3, r3, #28
 8005474:	f003 0307 	and.w	r3, r3, #7
 8005478:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	019a      	lsls	r2, r3, #6
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	041b      	lsls	r3, r3, #16
 8005484:	431a      	orrs	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	061b      	lsls	r3, r3, #24
 800548c:	431a      	orrs	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	071b      	lsls	r3, r3, #28
 8005492:	493e      	ldr	r1, [pc, #248]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005494:	4313      	orrs	r3, r2
 8005496:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800549a:	4b3c      	ldr	r3, [pc, #240]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800549c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054a0:	f023 021f 	bic.w	r2, r3, #31
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a8:	3b01      	subs	r3, #1
 80054aa:	4938      	ldr	r1, [pc, #224]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d01d      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80054be:	4b33      	ldr	r3, [pc, #204]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054c4:	0e1b      	lsrs	r3, r3, #24
 80054c6:	f003 030f 	and.w	r3, r3, #15
 80054ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80054cc:	4b2f      	ldr	r3, [pc, #188]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054d2:	0f1b      	lsrs	r3, r3, #28
 80054d4:	f003 0307 	and.w	r3, r3, #7
 80054d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	019a      	lsls	r2, r3, #6
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	041b      	lsls	r3, r3, #16
 80054e6:	431a      	orrs	r2, r3
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	061b      	lsls	r3, r3, #24
 80054ec:	431a      	orrs	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	071b      	lsls	r3, r3, #28
 80054f2:	4926      	ldr	r1, [pc, #152]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d011      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	019a      	lsls	r2, r3, #6
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	041b      	lsls	r3, r3, #16
 8005512:	431a      	orrs	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	061b      	lsls	r3, r3, #24
 800551a:	431a      	orrs	r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	071b      	lsls	r3, r3, #28
 8005522:	491a      	ldr	r1, [pc, #104]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005524:	4313      	orrs	r3, r2
 8005526:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800552a:	4b18      	ldr	r3, [pc, #96]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a17      	ldr	r2, [pc, #92]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005530:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005534:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005536:	f7fd fbd1 	bl	8002cdc <HAL_GetTick>
 800553a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800553c:	e008      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800553e:	f7fd fbcd 	bl	8002cdc <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	2b64      	cmp	r3, #100	; 0x64
 800554a:	d901      	bls.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e0d8      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005550:	4b0e      	ldr	r3, [pc, #56]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d0f0      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	2b01      	cmp	r3, #1
 8005560:	f040 80ce 	bne.w	8005700 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005564:	4b09      	ldr	r3, [pc, #36]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a08      	ldr	r2, [pc, #32]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800556a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800556e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005570:	f7fd fbb4 	bl	8002cdc <HAL_GetTick>
 8005574:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005576:	e00b      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005578:	f7fd fbb0 	bl	8002cdc <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b64      	cmp	r3, #100	; 0x64
 8005584:	d904      	bls.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e0bb      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800558a:	bf00      	nop
 800558c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005590:	4b5e      	ldr	r3, [pc, #376]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005598:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800559c:	d0ec      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d009      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d02e      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d12a      	bne.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80055c6:	4b51      	ldr	r3, [pc, #324]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055cc:	0c1b      	lsrs	r3, r3, #16
 80055ce:	f003 0303 	and.w	r3, r3, #3
 80055d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80055d4:	4b4d      	ldr	r3, [pc, #308]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055da:	0f1b      	lsrs	r3, r3, #28
 80055dc:	f003 0307 	and.w	r3, r3, #7
 80055e0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	019a      	lsls	r2, r3, #6
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	041b      	lsls	r3, r3, #16
 80055ec:	431a      	orrs	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	061b      	lsls	r3, r3, #24
 80055f4:	431a      	orrs	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	071b      	lsls	r3, r3, #28
 80055fa:	4944      	ldr	r1, [pc, #272]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005602:	4b42      	ldr	r3, [pc, #264]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005604:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005608:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005610:	3b01      	subs	r3, #1
 8005612:	021b      	lsls	r3, r3, #8
 8005614:	493d      	ldr	r1, [pc, #244]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005616:	4313      	orrs	r3, r2
 8005618:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d022      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800562c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005630:	d11d      	bne.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005632:	4b36      	ldr	r3, [pc, #216]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005638:	0e1b      	lsrs	r3, r3, #24
 800563a:	f003 030f 	and.w	r3, r3, #15
 800563e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005640:	4b32      	ldr	r3, [pc, #200]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005646:	0f1b      	lsrs	r3, r3, #28
 8005648:	f003 0307 	and.w	r3, r3, #7
 800564c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	019a      	lsls	r2, r3, #6
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a1b      	ldr	r3, [r3, #32]
 8005658:	041b      	lsls	r3, r3, #16
 800565a:	431a      	orrs	r2, r3
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	061b      	lsls	r3, r3, #24
 8005660:	431a      	orrs	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	071b      	lsls	r3, r3, #28
 8005666:	4929      	ldr	r1, [pc, #164]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005668:	4313      	orrs	r3, r2
 800566a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0308 	and.w	r3, r3, #8
 8005676:	2b00      	cmp	r3, #0
 8005678:	d028      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800567a:	4b24      	ldr	r3, [pc, #144]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800567c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005680:	0e1b      	lsrs	r3, r3, #24
 8005682:	f003 030f 	and.w	r3, r3, #15
 8005686:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005688:	4b20      	ldr	r3, [pc, #128]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800568a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800568e:	0c1b      	lsrs	r3, r3, #16
 8005690:	f003 0303 	and.w	r3, r3, #3
 8005694:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	019a      	lsls	r2, r3, #6
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	041b      	lsls	r3, r3, #16
 80056a0:	431a      	orrs	r2, r3
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	061b      	lsls	r3, r3, #24
 80056a6:	431a      	orrs	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	69db      	ldr	r3, [r3, #28]
 80056ac:	071b      	lsls	r3, r3, #28
 80056ae:	4917      	ldr	r1, [pc, #92]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80056b6:	4b15      	ldr	r3, [pc, #84]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c4:	4911      	ldr	r1, [pc, #68]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80056cc:	4b0f      	ldr	r3, [pc, #60]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a0e      	ldr	r2, [pc, #56]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056d8:	f7fd fb00 	bl	8002cdc <HAL_GetTick>
 80056dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80056de:	e008      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80056e0:	f7fd fafc 	bl	8002cdc <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	2b64      	cmp	r3, #100	; 0x64
 80056ec:	d901      	bls.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e007      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80056f2:	4b06      	ldr	r3, [pc, #24]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056fe:	d1ef      	bne.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3720      	adds	r7, #32
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	40023800 	.word	0x40023800

08005710 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d101      	bne.n	8005722 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e049      	b.n	80057b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	d106      	bne.n	800573c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f841 	bl	80057be <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2202      	movs	r2, #2
 8005740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	3304      	adds	r3, #4
 800574c:	4619      	mov	r1, r3
 800574e:	4610      	mov	r0, r2
 8005750:	f000 fa00 	bl	8005b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3708      	adds	r7, #8
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80057be:	b480      	push	{r7}
 80057c0:	b083      	sub	sp, #12
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80057c6:	bf00      	nop
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
	...

080057d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d001      	beq.n	80057ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e054      	b.n	8005896 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68da      	ldr	r2, [r3, #12]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f042 0201 	orr.w	r2, r2, #1
 8005802:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a26      	ldr	r2, [pc, #152]	; (80058a4 <HAL_TIM_Base_Start_IT+0xd0>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d022      	beq.n	8005854 <HAL_TIM_Base_Start_IT+0x80>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005816:	d01d      	beq.n	8005854 <HAL_TIM_Base_Start_IT+0x80>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a22      	ldr	r2, [pc, #136]	; (80058a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d018      	beq.n	8005854 <HAL_TIM_Base_Start_IT+0x80>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a21      	ldr	r2, [pc, #132]	; (80058ac <HAL_TIM_Base_Start_IT+0xd8>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d013      	beq.n	8005854 <HAL_TIM_Base_Start_IT+0x80>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a1f      	ldr	r2, [pc, #124]	; (80058b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d00e      	beq.n	8005854 <HAL_TIM_Base_Start_IT+0x80>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a1e      	ldr	r2, [pc, #120]	; (80058b4 <HAL_TIM_Base_Start_IT+0xe0>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d009      	beq.n	8005854 <HAL_TIM_Base_Start_IT+0x80>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a1c      	ldr	r2, [pc, #112]	; (80058b8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d004      	beq.n	8005854 <HAL_TIM_Base_Start_IT+0x80>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a1b      	ldr	r2, [pc, #108]	; (80058bc <HAL_TIM_Base_Start_IT+0xe8>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d115      	bne.n	8005880 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	689a      	ldr	r2, [r3, #8]
 800585a:	4b19      	ldr	r3, [pc, #100]	; (80058c0 <HAL_TIM_Base_Start_IT+0xec>)
 800585c:	4013      	ands	r3, r2
 800585e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2b06      	cmp	r3, #6
 8005864:	d015      	beq.n	8005892 <HAL_TIM_Base_Start_IT+0xbe>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800586c:	d011      	beq.n	8005892 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f042 0201 	orr.w	r2, r2, #1
 800587c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800587e:	e008      	b.n	8005892 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f042 0201 	orr.w	r2, r2, #1
 800588e:	601a      	str	r2, [r3, #0]
 8005890:	e000      	b.n	8005894 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005892:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3714      	adds	r7, #20
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	40010000 	.word	0x40010000
 80058a8:	40000400 	.word	0x40000400
 80058ac:	40000800 	.word	0x40000800
 80058b0:	40000c00 	.word	0x40000c00
 80058b4:	40010400 	.word	0x40010400
 80058b8:	40014000 	.word	0x40014000
 80058bc:	40001800 	.word	0x40001800
 80058c0:	00010007 	.word	0x00010007

080058c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d122      	bne.n	8005920 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	f003 0302 	and.w	r3, r3, #2
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d11b      	bne.n	8005920 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f06f 0202 	mvn.w	r2, #2
 80058f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2201      	movs	r2, #1
 80058f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	f003 0303 	and.w	r3, r3, #3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d003      	beq.n	800590e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f905 	bl	8005b16 <HAL_TIM_IC_CaptureCallback>
 800590c:	e005      	b.n	800591a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f8f7 	bl	8005b02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 f908 	bl	8005b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	f003 0304 	and.w	r3, r3, #4
 800592a:	2b04      	cmp	r3, #4
 800592c:	d122      	bne.n	8005974 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	f003 0304 	and.w	r3, r3, #4
 8005938:	2b04      	cmp	r3, #4
 800593a:	d11b      	bne.n	8005974 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f06f 0204 	mvn.w	r2, #4
 8005944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2202      	movs	r2, #2
 800594a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005956:	2b00      	cmp	r3, #0
 8005958:	d003      	beq.n	8005962 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 f8db 	bl	8005b16 <HAL_TIM_IC_CaptureCallback>
 8005960:	e005      	b.n	800596e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f8cd 	bl	8005b02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 f8de 	bl	8005b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	f003 0308 	and.w	r3, r3, #8
 800597e:	2b08      	cmp	r3, #8
 8005980:	d122      	bne.n	80059c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	f003 0308 	and.w	r3, r3, #8
 800598c:	2b08      	cmp	r3, #8
 800598e:	d11b      	bne.n	80059c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f06f 0208 	mvn.w	r2, #8
 8005998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2204      	movs	r2, #4
 800599e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	f003 0303 	and.w	r3, r3, #3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 f8b1 	bl	8005b16 <HAL_TIM_IC_CaptureCallback>
 80059b4:	e005      	b.n	80059c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f8a3 	bl	8005b02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 f8b4 	bl	8005b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	f003 0310 	and.w	r3, r3, #16
 80059d2:	2b10      	cmp	r3, #16
 80059d4:	d122      	bne.n	8005a1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	f003 0310 	and.w	r3, r3, #16
 80059e0:	2b10      	cmp	r3, #16
 80059e2:	d11b      	bne.n	8005a1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f06f 0210 	mvn.w	r2, #16
 80059ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2208      	movs	r2, #8
 80059f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f887 	bl	8005b16 <HAL_TIM_IC_CaptureCallback>
 8005a08:	e005      	b.n	8005a16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f879 	bl	8005b02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f88a 	bl	8005b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d10e      	bne.n	8005a48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	f003 0301 	and.w	r3, r3, #1
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d107      	bne.n	8005a48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f06f 0201 	mvn.w	r2, #1
 8005a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f7fc fdbe 	bl	80025c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a52:	2b80      	cmp	r3, #128	; 0x80
 8005a54:	d10e      	bne.n	8005a74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a60:	2b80      	cmp	r3, #128	; 0x80
 8005a62:	d107      	bne.n	8005a74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f91a 	bl	8005ca8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a82:	d10e      	bne.n	8005aa2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a8e:	2b80      	cmp	r3, #128	; 0x80
 8005a90:	d107      	bne.n	8005aa2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 f90d 	bl	8005cbc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aac:	2b40      	cmp	r3, #64	; 0x40
 8005aae:	d10e      	bne.n	8005ace <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aba:	2b40      	cmp	r3, #64	; 0x40
 8005abc:	d107      	bne.n	8005ace <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 f838 	bl	8005b3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	f003 0320 	and.w	r3, r3, #32
 8005ad8:	2b20      	cmp	r3, #32
 8005ada:	d10e      	bne.n	8005afa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	f003 0320 	and.w	r3, r3, #32
 8005ae6:	2b20      	cmp	r3, #32
 8005ae8:	d107      	bne.n	8005afa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f06f 0220 	mvn.w	r2, #32
 8005af2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 f8cd 	bl	8005c94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005afa:	bf00      	nop
 8005afc:	3708      	adds	r7, #8
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b02:	b480      	push	{r7}
 8005b04:	b083      	sub	sp, #12
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b0a:	bf00      	nop
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr

08005b16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b16:	b480      	push	{r7}
 8005b18:	b083      	sub	sp, #12
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b1e:	bf00      	nop
 8005b20:	370c      	adds	r7, #12
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b083      	sub	sp, #12
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b32:	bf00      	nop
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr

08005b3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b3e:	b480      	push	{r7}
 8005b40:	b083      	sub	sp, #12
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b46:	bf00      	nop
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
	...

08005b54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a40      	ldr	r2, [pc, #256]	; (8005c68 <TIM_Base_SetConfig+0x114>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d013      	beq.n	8005b94 <TIM_Base_SetConfig+0x40>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b72:	d00f      	beq.n	8005b94 <TIM_Base_SetConfig+0x40>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a3d      	ldr	r2, [pc, #244]	; (8005c6c <TIM_Base_SetConfig+0x118>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d00b      	beq.n	8005b94 <TIM_Base_SetConfig+0x40>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a3c      	ldr	r2, [pc, #240]	; (8005c70 <TIM_Base_SetConfig+0x11c>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d007      	beq.n	8005b94 <TIM_Base_SetConfig+0x40>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a3b      	ldr	r2, [pc, #236]	; (8005c74 <TIM_Base_SetConfig+0x120>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d003      	beq.n	8005b94 <TIM_Base_SetConfig+0x40>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a3a      	ldr	r2, [pc, #232]	; (8005c78 <TIM_Base_SetConfig+0x124>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d108      	bne.n	8005ba6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a2f      	ldr	r2, [pc, #188]	; (8005c68 <TIM_Base_SetConfig+0x114>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d02b      	beq.n	8005c06 <TIM_Base_SetConfig+0xb2>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bb4:	d027      	beq.n	8005c06 <TIM_Base_SetConfig+0xb2>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a2c      	ldr	r2, [pc, #176]	; (8005c6c <TIM_Base_SetConfig+0x118>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d023      	beq.n	8005c06 <TIM_Base_SetConfig+0xb2>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a2b      	ldr	r2, [pc, #172]	; (8005c70 <TIM_Base_SetConfig+0x11c>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d01f      	beq.n	8005c06 <TIM_Base_SetConfig+0xb2>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a2a      	ldr	r2, [pc, #168]	; (8005c74 <TIM_Base_SetConfig+0x120>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d01b      	beq.n	8005c06 <TIM_Base_SetConfig+0xb2>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a29      	ldr	r2, [pc, #164]	; (8005c78 <TIM_Base_SetConfig+0x124>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d017      	beq.n	8005c06 <TIM_Base_SetConfig+0xb2>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a28      	ldr	r2, [pc, #160]	; (8005c7c <TIM_Base_SetConfig+0x128>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d013      	beq.n	8005c06 <TIM_Base_SetConfig+0xb2>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a27      	ldr	r2, [pc, #156]	; (8005c80 <TIM_Base_SetConfig+0x12c>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d00f      	beq.n	8005c06 <TIM_Base_SetConfig+0xb2>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a26      	ldr	r2, [pc, #152]	; (8005c84 <TIM_Base_SetConfig+0x130>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d00b      	beq.n	8005c06 <TIM_Base_SetConfig+0xb2>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a25      	ldr	r2, [pc, #148]	; (8005c88 <TIM_Base_SetConfig+0x134>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d007      	beq.n	8005c06 <TIM_Base_SetConfig+0xb2>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a24      	ldr	r2, [pc, #144]	; (8005c8c <TIM_Base_SetConfig+0x138>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d003      	beq.n	8005c06 <TIM_Base_SetConfig+0xb2>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a23      	ldr	r2, [pc, #140]	; (8005c90 <TIM_Base_SetConfig+0x13c>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d108      	bne.n	8005c18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	689a      	ldr	r2, [r3, #8]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a0a      	ldr	r2, [pc, #40]	; (8005c68 <TIM_Base_SetConfig+0x114>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d003      	beq.n	8005c4c <TIM_Base_SetConfig+0xf8>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a0c      	ldr	r2, [pc, #48]	; (8005c78 <TIM_Base_SetConfig+0x124>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d103      	bne.n	8005c54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	691a      	ldr	r2, [r3, #16]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	615a      	str	r2, [r3, #20]
}
 8005c5a:	bf00      	nop
 8005c5c:	3714      	adds	r7, #20
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	40010000 	.word	0x40010000
 8005c6c:	40000400 	.word	0x40000400
 8005c70:	40000800 	.word	0x40000800
 8005c74:	40000c00 	.word	0x40000c00
 8005c78:	40010400 	.word	0x40010400
 8005c7c:	40014000 	.word	0x40014000
 8005c80:	40014400 	.word	0x40014400
 8005c84:	40014800 	.word	0x40014800
 8005c88:	40001800 	.word	0x40001800
 8005c8c:	40001c00 	.word	0x40001c00
 8005c90:	40002000 	.word	0x40002000

08005c94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d101      	bne.n	8005ce2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e040      	b.n	8005d64 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d106      	bne.n	8005cf8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7fc fd5e 	bl	80027b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2224      	movs	r2, #36	; 0x24
 8005cfc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f022 0201 	bic.w	r2, r2, #1
 8005d0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 fc10 	bl	8006534 <UART_SetConfig>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d101      	bne.n	8005d1e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e022      	b.n	8005d64 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d002      	beq.n	8005d2c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 fe68 	bl	80069fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	685a      	ldr	r2, [r3, #4]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	689a      	ldr	r2, [r3, #8]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f042 0201 	orr.w	r2, r2, #1
 8005d5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 feef 	bl	8006b40 <UART_CheckIdleState>
 8005d62:	4603      	mov	r3, r0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3708      	adds	r7, #8
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b08a      	sub	sp, #40	; 0x28
 8005d70:	af02      	add	r7, sp, #8
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	603b      	str	r3, [r7, #0]
 8005d78:	4613      	mov	r3, r2
 8005d7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d80:	2b20      	cmp	r3, #32
 8005d82:	d171      	bne.n	8005e68 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d002      	beq.n	8005d90 <HAL_UART_Transmit+0x24>
 8005d8a:	88fb      	ldrh	r3, [r7, #6]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d101      	bne.n	8005d94 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e06a      	b.n	8005e6a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2221      	movs	r2, #33	; 0x21
 8005da0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005da2:	f7fc ff9b 	bl	8002cdc <HAL_GetTick>
 8005da6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	88fa      	ldrh	r2, [r7, #6]
 8005dac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	88fa      	ldrh	r2, [r7, #6]
 8005db4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dc0:	d108      	bne.n	8005dd4 <HAL_UART_Transmit+0x68>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d104      	bne.n	8005dd4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	61bb      	str	r3, [r7, #24]
 8005dd2:	e003      	b.n	8005ddc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ddc:	e02c      	b.n	8005e38 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	9300      	str	r3, [sp, #0]
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	2200      	movs	r2, #0
 8005de6:	2180      	movs	r1, #128	; 0x80
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f000 fef6 	bl	8006bda <UART_WaitOnFlagUntilTimeout>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d001      	beq.n	8005df8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e038      	b.n	8005e6a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10b      	bne.n	8005e16 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	881b      	ldrh	r3, [r3, #0]
 8005e02:	461a      	mov	r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e0c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	3302      	adds	r3, #2
 8005e12:	61bb      	str	r3, [r7, #24]
 8005e14:	e007      	b.n	8005e26 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	781a      	ldrb	r2, [r3, #0]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	3301      	adds	r3, #1
 8005e24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1cc      	bne.n	8005dde <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	9300      	str	r3, [sp, #0]
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	2140      	movs	r1, #64	; 0x40
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	f000 fec3 	bl	8006bda <UART_WaitOnFlagUntilTimeout>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d001      	beq.n	8005e5e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e005      	b.n	8005e6a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2220      	movs	r2, #32
 8005e62:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005e64:	2300      	movs	r3, #0
 8005e66:	e000      	b.n	8005e6a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005e68:	2302      	movs	r3, #2
  }
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3720      	adds	r7, #32
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b08a      	sub	sp, #40	; 0x28
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	60f8      	str	r0, [r7, #12]
 8005e7a:	60b9      	str	r1, [r7, #8]
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e86:	2b20      	cmp	r3, #32
 8005e88:	d132      	bne.n	8005ef0 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d002      	beq.n	8005e96 <HAL_UART_Receive_DMA+0x24>
 8005e90:	88fb      	ldrh	r3, [r7, #6]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d101      	bne.n	8005e9a <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e02b      	b.n	8005ef2 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d018      	beq.n	8005ee0 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	e853 3f00 	ldrex	r3, [r3]
 8005eba:	613b      	str	r3, [r7, #16]
   return(result);
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	461a      	mov	r2, r3
 8005eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ecc:	623b      	str	r3, [r7, #32]
 8005ece:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed0:	69f9      	ldr	r1, [r7, #28]
 8005ed2:	6a3a      	ldr	r2, [r7, #32]
 8005ed4:	e841 2300 	strex	r3, r2, [r1]
 8005ed8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1e6      	bne.n	8005eae <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005ee0:	88fb      	ldrh	r3, [r7, #6]
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	68b9      	ldr	r1, [r7, #8]
 8005ee6:	68f8      	ldr	r0, [r7, #12]
 8005ee8:	f000 ff3e 	bl	8006d68 <UART_Start_Receive_DMA>
 8005eec:	4603      	mov	r3, r0
 8005eee:	e000      	b.n	8005ef2 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005ef0:	2302      	movs	r3, #2
  }
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3728      	adds	r7, #40	; 0x28
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
	...

08005efc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b0ba      	sub	sp, #232	; 0xe8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	69db      	ldr	r3, [r3, #28]
 8005f0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005f22:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005f26:	f640 030f 	movw	r3, #2063	; 0x80f
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005f30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d115      	bne.n	8005f64 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f3c:	f003 0320 	and.w	r3, r3, #32
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00f      	beq.n	8005f64 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f48:	f003 0320 	and.w	r3, r3, #32
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d009      	beq.n	8005f64 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f000 82ac 	beq.w	80064b2 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	4798      	blx	r3
      }
      return;
 8005f62:	e2a6      	b.n	80064b2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005f64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f000 8117 	beq.w	800619c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005f6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d106      	bne.n	8005f88 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005f7a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005f7e:	4b85      	ldr	r3, [pc, #532]	; (8006194 <HAL_UART_IRQHandler+0x298>)
 8005f80:	4013      	ands	r3, r2
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	f000 810a 	beq.w	800619c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f8c:	f003 0301 	and.w	r3, r3, #1
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d011      	beq.n	8005fb8 <HAL_UART_IRQHandler+0xbc>
 8005f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00b      	beq.n	8005fb8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fae:	f043 0201 	orr.w	r2, r3, #1
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fbc:	f003 0302 	and.w	r3, r3, #2
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d011      	beq.n	8005fe8 <HAL_UART_IRQHandler+0xec>
 8005fc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fc8:	f003 0301 	and.w	r3, r3, #1
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00b      	beq.n	8005fe8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2202      	movs	r2, #2
 8005fd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fde:	f043 0204 	orr.w	r2, r3, #4
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fec:	f003 0304 	and.w	r3, r3, #4
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d011      	beq.n	8006018 <HAL_UART_IRQHandler+0x11c>
 8005ff4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ff8:	f003 0301 	and.w	r3, r3, #1
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00b      	beq.n	8006018 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2204      	movs	r2, #4
 8006006:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800600e:	f043 0202 	orr.w	r2, r3, #2
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800601c:	f003 0308 	and.w	r3, r3, #8
 8006020:	2b00      	cmp	r3, #0
 8006022:	d017      	beq.n	8006054 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006028:	f003 0320 	and.w	r3, r3, #32
 800602c:	2b00      	cmp	r3, #0
 800602e:	d105      	bne.n	800603c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006030:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006034:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00b      	beq.n	8006054 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2208      	movs	r2, #8
 8006042:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800604a:	f043 0208 	orr.w	r2, r3, #8
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006058:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800605c:	2b00      	cmp	r3, #0
 800605e:	d012      	beq.n	8006086 <HAL_UART_IRQHandler+0x18a>
 8006060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006064:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00c      	beq.n	8006086 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006074:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800607c:	f043 0220 	orr.w	r2, r3, #32
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800608c:	2b00      	cmp	r3, #0
 800608e:	f000 8212 	beq.w	80064b6 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006096:	f003 0320 	and.w	r3, r3, #32
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00d      	beq.n	80060ba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800609e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060a2:	f003 0320 	and.w	r3, r3, #32
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d007      	beq.n	80060ba <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d003      	beq.n	80060ba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ce:	2b40      	cmp	r3, #64	; 0x40
 80060d0:	d005      	beq.n	80060de <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80060d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d04f      	beq.n	800617e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 ff08 	bl	8006ef4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ee:	2b40      	cmp	r3, #64	; 0x40
 80060f0:	d141      	bne.n	8006176 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	3308      	adds	r3, #8
 80060f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006100:	e853 3f00 	ldrex	r3, [r3]
 8006104:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006108:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800610c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006110:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	3308      	adds	r3, #8
 800611a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800611e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006122:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006126:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800612a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800612e:	e841 2300 	strex	r3, r2, [r1]
 8006132:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006136:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1d9      	bne.n	80060f2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006142:	2b00      	cmp	r3, #0
 8006144:	d013      	beq.n	800616e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800614a:	4a13      	ldr	r2, [pc, #76]	; (8006198 <HAL_UART_IRQHandler+0x29c>)
 800614c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006152:	4618      	mov	r0, r3
 8006154:	f7fd f88d 	bl	8003272 <HAL_DMA_Abort_IT>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d017      	beq.n	800618e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006168:	4610      	mov	r0, r2
 800616a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800616c:	e00f      	b.n	800618e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 f9c0 	bl	80064f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006174:	e00b      	b.n	800618e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f9bc 	bl	80064f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800617c:	e007      	b.n	800618e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f9b8 	bl	80064f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800618c:	e193      	b.n	80064b6 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800618e:	bf00      	nop
    return;
 8006190:	e191      	b.n	80064b6 <HAL_UART_IRQHandler+0x5ba>
 8006192:	bf00      	nop
 8006194:	04000120 	.word	0x04000120
 8006198:	080071a1 	.word	0x080071a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	f040 814c 	bne.w	800643e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80061a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061aa:	f003 0310 	and.w	r3, r3, #16
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f000 8145 	beq.w	800643e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80061b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061b8:	f003 0310 	and.w	r3, r3, #16
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f000 813e 	beq.w	800643e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2210      	movs	r2, #16
 80061c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d4:	2b40      	cmp	r3, #64	; 0x40
 80061d6:	f040 80b6 	bne.w	8006346 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80061e6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f000 8165 	beq.w	80064ba <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80061f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80061fa:	429a      	cmp	r2, r3
 80061fc:	f080 815d 	bcs.w	80064ba <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006206:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800620e:	69db      	ldr	r3, [r3, #28]
 8006210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006214:	f000 8086 	beq.w	8006324 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006220:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006224:	e853 3f00 	ldrex	r3, [r3]
 8006228:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800622c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006230:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006234:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	461a      	mov	r2, r3
 800623e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006242:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006246:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800624e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006252:	e841 2300 	strex	r3, r2, [r1]
 8006256:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800625a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1da      	bne.n	8006218 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	3308      	adds	r3, #8
 8006268:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800626c:	e853 3f00 	ldrex	r3, [r3]
 8006270:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006272:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006274:	f023 0301 	bic.w	r3, r3, #1
 8006278:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	3308      	adds	r3, #8
 8006282:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006286:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800628a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800628e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006292:	e841 2300 	strex	r3, r2, [r1]
 8006296:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006298:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1e1      	bne.n	8006262 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	3308      	adds	r3, #8
 80062a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062a8:	e853 3f00 	ldrex	r3, [r3]
 80062ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80062ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	3308      	adds	r3, #8
 80062be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80062c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80062c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80062c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80062ca:	e841 2300 	strex	r3, r2, [r1]
 80062ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80062d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1e3      	bne.n	800629e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2220      	movs	r2, #32
 80062da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062ec:	e853 3f00 	ldrex	r3, [r3]
 80062f0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80062f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062f4:	f023 0310 	bic.w	r3, r3, #16
 80062f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	461a      	mov	r2, r3
 8006302:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006306:	65bb      	str	r3, [r7, #88]	; 0x58
 8006308:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800630c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800630e:	e841 2300 	strex	r3, r2, [r1]
 8006312:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006314:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1e4      	bne.n	80062e4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800631e:	4618      	mov	r0, r3
 8006320:	f7fc ff37 	bl	8003192 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2202      	movs	r2, #2
 8006328:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006336:	b29b      	uxth	r3, r3
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	b29b      	uxth	r3, r3
 800633c:	4619      	mov	r1, r3
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f8e2 	bl	8006508 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006344:	e0b9      	b.n	80064ba <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006352:	b29b      	uxth	r3, r3
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006360:	b29b      	uxth	r3, r3
 8006362:	2b00      	cmp	r3, #0
 8006364:	f000 80ab 	beq.w	80064be <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8006368:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800636c:	2b00      	cmp	r3, #0
 800636e:	f000 80a6 	beq.w	80064be <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800637a:	e853 3f00 	ldrex	r3, [r3]
 800637e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006382:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006386:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	461a      	mov	r2, r3
 8006390:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006394:	647b      	str	r3, [r7, #68]	; 0x44
 8006396:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006398:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800639a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800639c:	e841 2300 	strex	r3, r2, [r1]
 80063a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1e4      	bne.n	8006372 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	3308      	adds	r3, #8
 80063ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b2:	e853 3f00 	ldrex	r3, [r3]
 80063b6:	623b      	str	r3, [r7, #32]
   return(result);
 80063b8:	6a3b      	ldr	r3, [r7, #32]
 80063ba:	f023 0301 	bic.w	r3, r3, #1
 80063be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	3308      	adds	r3, #8
 80063c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80063cc:	633a      	str	r2, [r7, #48]	; 0x30
 80063ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063d4:	e841 2300 	strex	r3, r2, [r1]
 80063d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1e3      	bne.n	80063a8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2220      	movs	r2, #32
 80063e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	e853 3f00 	ldrex	r3, [r3]
 8006400:	60fb      	str	r3, [r7, #12]
   return(result);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f023 0310 	bic.w	r3, r3, #16
 8006408:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	461a      	mov	r2, r3
 8006412:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006416:	61fb      	str	r3, [r7, #28]
 8006418:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641a:	69b9      	ldr	r1, [r7, #24]
 800641c:	69fa      	ldr	r2, [r7, #28]
 800641e:	e841 2300 	strex	r3, r2, [r1]
 8006422:	617b      	str	r3, [r7, #20]
   return(result);
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1e4      	bne.n	80063f4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2202      	movs	r2, #2
 800642e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006430:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006434:	4619      	mov	r1, r3
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f866 	bl	8006508 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800643c:	e03f      	b.n	80064be <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800643e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006442:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00e      	beq.n	8006468 <HAL_UART_IRQHandler+0x56c>
 800644a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800644e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d008      	beq.n	8006468 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800645e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 f85d 	bl	8006520 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006466:	e02d      	b.n	80064c4 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800646c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00e      	beq.n	8006492 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800647c:	2b00      	cmp	r3, #0
 800647e:	d008      	beq.n	8006492 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006484:	2b00      	cmp	r3, #0
 8006486:	d01c      	beq.n	80064c2 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	4798      	blx	r3
    }
    return;
 8006490:	e017      	b.n	80064c2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800649a:	2b00      	cmp	r3, #0
 800649c:	d012      	beq.n	80064c4 <HAL_UART_IRQHandler+0x5c8>
 800649e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00c      	beq.n	80064c4 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 fe8e 	bl	80071cc <UART_EndTransmit_IT>
    return;
 80064b0:	e008      	b.n	80064c4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80064b2:	bf00      	nop
 80064b4:	e006      	b.n	80064c4 <HAL_UART_IRQHandler+0x5c8>
    return;
 80064b6:	bf00      	nop
 80064b8:	e004      	b.n	80064c4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80064ba:	bf00      	nop
 80064bc:	e002      	b.n	80064c4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80064be:	bf00      	nop
 80064c0:	e000      	b.n	80064c4 <HAL_UART_IRQHandler+0x5c8>
    return;
 80064c2:	bf00      	nop
  }

}
 80064c4:	37e8      	adds	r7, #232	; 0xe8
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop

080064cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80064e8:	bf00      	nop
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80064fc:	bf00      	nop
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	460b      	mov	r3, r1
 8006512:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006514:	bf00      	nop
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b088      	sub	sp, #32
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800653c:	2300      	movs	r3, #0
 800653e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	689a      	ldr	r2, [r3, #8]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	431a      	orrs	r2, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	431a      	orrs	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	69db      	ldr	r3, [r3, #28]
 8006554:	4313      	orrs	r3, r2
 8006556:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	4ba6      	ldr	r3, [pc, #664]	; (80067f8 <UART_SetConfig+0x2c4>)
 8006560:	4013      	ands	r3, r2
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	6812      	ldr	r2, [r2, #0]
 8006566:	6979      	ldr	r1, [r7, #20]
 8006568:	430b      	orrs	r3, r1
 800656a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	68da      	ldr	r2, [r3, #12]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	430a      	orrs	r2, r1
 8006580:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	699b      	ldr	r3, [r3, #24]
 8006586:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a1b      	ldr	r3, [r3, #32]
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	4313      	orrs	r3, r2
 8006590:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	430a      	orrs	r2, r1
 80065a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a94      	ldr	r2, [pc, #592]	; (80067fc <UART_SetConfig+0x2c8>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d120      	bne.n	80065f2 <UART_SetConfig+0xbe>
 80065b0:	4b93      	ldr	r3, [pc, #588]	; (8006800 <UART_SetConfig+0x2cc>)
 80065b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065b6:	f003 0303 	and.w	r3, r3, #3
 80065ba:	2b03      	cmp	r3, #3
 80065bc:	d816      	bhi.n	80065ec <UART_SetConfig+0xb8>
 80065be:	a201      	add	r2, pc, #4	; (adr r2, 80065c4 <UART_SetConfig+0x90>)
 80065c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c4:	080065d5 	.word	0x080065d5
 80065c8:	080065e1 	.word	0x080065e1
 80065cc:	080065db 	.word	0x080065db
 80065d0:	080065e7 	.word	0x080065e7
 80065d4:	2301      	movs	r3, #1
 80065d6:	77fb      	strb	r3, [r7, #31]
 80065d8:	e150      	b.n	800687c <UART_SetConfig+0x348>
 80065da:	2302      	movs	r3, #2
 80065dc:	77fb      	strb	r3, [r7, #31]
 80065de:	e14d      	b.n	800687c <UART_SetConfig+0x348>
 80065e0:	2304      	movs	r3, #4
 80065e2:	77fb      	strb	r3, [r7, #31]
 80065e4:	e14a      	b.n	800687c <UART_SetConfig+0x348>
 80065e6:	2308      	movs	r3, #8
 80065e8:	77fb      	strb	r3, [r7, #31]
 80065ea:	e147      	b.n	800687c <UART_SetConfig+0x348>
 80065ec:	2310      	movs	r3, #16
 80065ee:	77fb      	strb	r3, [r7, #31]
 80065f0:	e144      	b.n	800687c <UART_SetConfig+0x348>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a83      	ldr	r2, [pc, #524]	; (8006804 <UART_SetConfig+0x2d0>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d132      	bne.n	8006662 <UART_SetConfig+0x12e>
 80065fc:	4b80      	ldr	r3, [pc, #512]	; (8006800 <UART_SetConfig+0x2cc>)
 80065fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006602:	f003 030c 	and.w	r3, r3, #12
 8006606:	2b0c      	cmp	r3, #12
 8006608:	d828      	bhi.n	800665c <UART_SetConfig+0x128>
 800660a:	a201      	add	r2, pc, #4	; (adr r2, 8006610 <UART_SetConfig+0xdc>)
 800660c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006610:	08006645 	.word	0x08006645
 8006614:	0800665d 	.word	0x0800665d
 8006618:	0800665d 	.word	0x0800665d
 800661c:	0800665d 	.word	0x0800665d
 8006620:	08006651 	.word	0x08006651
 8006624:	0800665d 	.word	0x0800665d
 8006628:	0800665d 	.word	0x0800665d
 800662c:	0800665d 	.word	0x0800665d
 8006630:	0800664b 	.word	0x0800664b
 8006634:	0800665d 	.word	0x0800665d
 8006638:	0800665d 	.word	0x0800665d
 800663c:	0800665d 	.word	0x0800665d
 8006640:	08006657 	.word	0x08006657
 8006644:	2300      	movs	r3, #0
 8006646:	77fb      	strb	r3, [r7, #31]
 8006648:	e118      	b.n	800687c <UART_SetConfig+0x348>
 800664a:	2302      	movs	r3, #2
 800664c:	77fb      	strb	r3, [r7, #31]
 800664e:	e115      	b.n	800687c <UART_SetConfig+0x348>
 8006650:	2304      	movs	r3, #4
 8006652:	77fb      	strb	r3, [r7, #31]
 8006654:	e112      	b.n	800687c <UART_SetConfig+0x348>
 8006656:	2308      	movs	r3, #8
 8006658:	77fb      	strb	r3, [r7, #31]
 800665a:	e10f      	b.n	800687c <UART_SetConfig+0x348>
 800665c:	2310      	movs	r3, #16
 800665e:	77fb      	strb	r3, [r7, #31]
 8006660:	e10c      	b.n	800687c <UART_SetConfig+0x348>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a68      	ldr	r2, [pc, #416]	; (8006808 <UART_SetConfig+0x2d4>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d120      	bne.n	80066ae <UART_SetConfig+0x17a>
 800666c:	4b64      	ldr	r3, [pc, #400]	; (8006800 <UART_SetConfig+0x2cc>)
 800666e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006672:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006676:	2b30      	cmp	r3, #48	; 0x30
 8006678:	d013      	beq.n	80066a2 <UART_SetConfig+0x16e>
 800667a:	2b30      	cmp	r3, #48	; 0x30
 800667c:	d814      	bhi.n	80066a8 <UART_SetConfig+0x174>
 800667e:	2b20      	cmp	r3, #32
 8006680:	d009      	beq.n	8006696 <UART_SetConfig+0x162>
 8006682:	2b20      	cmp	r3, #32
 8006684:	d810      	bhi.n	80066a8 <UART_SetConfig+0x174>
 8006686:	2b00      	cmp	r3, #0
 8006688:	d002      	beq.n	8006690 <UART_SetConfig+0x15c>
 800668a:	2b10      	cmp	r3, #16
 800668c:	d006      	beq.n	800669c <UART_SetConfig+0x168>
 800668e:	e00b      	b.n	80066a8 <UART_SetConfig+0x174>
 8006690:	2300      	movs	r3, #0
 8006692:	77fb      	strb	r3, [r7, #31]
 8006694:	e0f2      	b.n	800687c <UART_SetConfig+0x348>
 8006696:	2302      	movs	r3, #2
 8006698:	77fb      	strb	r3, [r7, #31]
 800669a:	e0ef      	b.n	800687c <UART_SetConfig+0x348>
 800669c:	2304      	movs	r3, #4
 800669e:	77fb      	strb	r3, [r7, #31]
 80066a0:	e0ec      	b.n	800687c <UART_SetConfig+0x348>
 80066a2:	2308      	movs	r3, #8
 80066a4:	77fb      	strb	r3, [r7, #31]
 80066a6:	e0e9      	b.n	800687c <UART_SetConfig+0x348>
 80066a8:	2310      	movs	r3, #16
 80066aa:	77fb      	strb	r3, [r7, #31]
 80066ac:	e0e6      	b.n	800687c <UART_SetConfig+0x348>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a56      	ldr	r2, [pc, #344]	; (800680c <UART_SetConfig+0x2d8>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d120      	bne.n	80066fa <UART_SetConfig+0x1c6>
 80066b8:	4b51      	ldr	r3, [pc, #324]	; (8006800 <UART_SetConfig+0x2cc>)
 80066ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80066c2:	2bc0      	cmp	r3, #192	; 0xc0
 80066c4:	d013      	beq.n	80066ee <UART_SetConfig+0x1ba>
 80066c6:	2bc0      	cmp	r3, #192	; 0xc0
 80066c8:	d814      	bhi.n	80066f4 <UART_SetConfig+0x1c0>
 80066ca:	2b80      	cmp	r3, #128	; 0x80
 80066cc:	d009      	beq.n	80066e2 <UART_SetConfig+0x1ae>
 80066ce:	2b80      	cmp	r3, #128	; 0x80
 80066d0:	d810      	bhi.n	80066f4 <UART_SetConfig+0x1c0>
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d002      	beq.n	80066dc <UART_SetConfig+0x1a8>
 80066d6:	2b40      	cmp	r3, #64	; 0x40
 80066d8:	d006      	beq.n	80066e8 <UART_SetConfig+0x1b4>
 80066da:	e00b      	b.n	80066f4 <UART_SetConfig+0x1c0>
 80066dc:	2300      	movs	r3, #0
 80066de:	77fb      	strb	r3, [r7, #31]
 80066e0:	e0cc      	b.n	800687c <UART_SetConfig+0x348>
 80066e2:	2302      	movs	r3, #2
 80066e4:	77fb      	strb	r3, [r7, #31]
 80066e6:	e0c9      	b.n	800687c <UART_SetConfig+0x348>
 80066e8:	2304      	movs	r3, #4
 80066ea:	77fb      	strb	r3, [r7, #31]
 80066ec:	e0c6      	b.n	800687c <UART_SetConfig+0x348>
 80066ee:	2308      	movs	r3, #8
 80066f0:	77fb      	strb	r3, [r7, #31]
 80066f2:	e0c3      	b.n	800687c <UART_SetConfig+0x348>
 80066f4:	2310      	movs	r3, #16
 80066f6:	77fb      	strb	r3, [r7, #31]
 80066f8:	e0c0      	b.n	800687c <UART_SetConfig+0x348>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a44      	ldr	r2, [pc, #272]	; (8006810 <UART_SetConfig+0x2dc>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d125      	bne.n	8006750 <UART_SetConfig+0x21c>
 8006704:	4b3e      	ldr	r3, [pc, #248]	; (8006800 <UART_SetConfig+0x2cc>)
 8006706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800670a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800670e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006712:	d017      	beq.n	8006744 <UART_SetConfig+0x210>
 8006714:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006718:	d817      	bhi.n	800674a <UART_SetConfig+0x216>
 800671a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800671e:	d00b      	beq.n	8006738 <UART_SetConfig+0x204>
 8006720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006724:	d811      	bhi.n	800674a <UART_SetConfig+0x216>
 8006726:	2b00      	cmp	r3, #0
 8006728:	d003      	beq.n	8006732 <UART_SetConfig+0x1fe>
 800672a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800672e:	d006      	beq.n	800673e <UART_SetConfig+0x20a>
 8006730:	e00b      	b.n	800674a <UART_SetConfig+0x216>
 8006732:	2300      	movs	r3, #0
 8006734:	77fb      	strb	r3, [r7, #31]
 8006736:	e0a1      	b.n	800687c <UART_SetConfig+0x348>
 8006738:	2302      	movs	r3, #2
 800673a:	77fb      	strb	r3, [r7, #31]
 800673c:	e09e      	b.n	800687c <UART_SetConfig+0x348>
 800673e:	2304      	movs	r3, #4
 8006740:	77fb      	strb	r3, [r7, #31]
 8006742:	e09b      	b.n	800687c <UART_SetConfig+0x348>
 8006744:	2308      	movs	r3, #8
 8006746:	77fb      	strb	r3, [r7, #31]
 8006748:	e098      	b.n	800687c <UART_SetConfig+0x348>
 800674a:	2310      	movs	r3, #16
 800674c:	77fb      	strb	r3, [r7, #31]
 800674e:	e095      	b.n	800687c <UART_SetConfig+0x348>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a2f      	ldr	r2, [pc, #188]	; (8006814 <UART_SetConfig+0x2e0>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d125      	bne.n	80067a6 <UART_SetConfig+0x272>
 800675a:	4b29      	ldr	r3, [pc, #164]	; (8006800 <UART_SetConfig+0x2cc>)
 800675c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006760:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006764:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006768:	d017      	beq.n	800679a <UART_SetConfig+0x266>
 800676a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800676e:	d817      	bhi.n	80067a0 <UART_SetConfig+0x26c>
 8006770:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006774:	d00b      	beq.n	800678e <UART_SetConfig+0x25a>
 8006776:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800677a:	d811      	bhi.n	80067a0 <UART_SetConfig+0x26c>
 800677c:	2b00      	cmp	r3, #0
 800677e:	d003      	beq.n	8006788 <UART_SetConfig+0x254>
 8006780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006784:	d006      	beq.n	8006794 <UART_SetConfig+0x260>
 8006786:	e00b      	b.n	80067a0 <UART_SetConfig+0x26c>
 8006788:	2301      	movs	r3, #1
 800678a:	77fb      	strb	r3, [r7, #31]
 800678c:	e076      	b.n	800687c <UART_SetConfig+0x348>
 800678e:	2302      	movs	r3, #2
 8006790:	77fb      	strb	r3, [r7, #31]
 8006792:	e073      	b.n	800687c <UART_SetConfig+0x348>
 8006794:	2304      	movs	r3, #4
 8006796:	77fb      	strb	r3, [r7, #31]
 8006798:	e070      	b.n	800687c <UART_SetConfig+0x348>
 800679a:	2308      	movs	r3, #8
 800679c:	77fb      	strb	r3, [r7, #31]
 800679e:	e06d      	b.n	800687c <UART_SetConfig+0x348>
 80067a0:	2310      	movs	r3, #16
 80067a2:	77fb      	strb	r3, [r7, #31]
 80067a4:	e06a      	b.n	800687c <UART_SetConfig+0x348>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a1b      	ldr	r2, [pc, #108]	; (8006818 <UART_SetConfig+0x2e4>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d138      	bne.n	8006822 <UART_SetConfig+0x2ee>
 80067b0:	4b13      	ldr	r3, [pc, #76]	; (8006800 <UART_SetConfig+0x2cc>)
 80067b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067b6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80067ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80067be:	d017      	beq.n	80067f0 <UART_SetConfig+0x2bc>
 80067c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80067c4:	d82a      	bhi.n	800681c <UART_SetConfig+0x2e8>
 80067c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067ca:	d00b      	beq.n	80067e4 <UART_SetConfig+0x2b0>
 80067cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067d0:	d824      	bhi.n	800681c <UART_SetConfig+0x2e8>
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d003      	beq.n	80067de <UART_SetConfig+0x2aa>
 80067d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067da:	d006      	beq.n	80067ea <UART_SetConfig+0x2b6>
 80067dc:	e01e      	b.n	800681c <UART_SetConfig+0x2e8>
 80067de:	2300      	movs	r3, #0
 80067e0:	77fb      	strb	r3, [r7, #31]
 80067e2:	e04b      	b.n	800687c <UART_SetConfig+0x348>
 80067e4:	2302      	movs	r3, #2
 80067e6:	77fb      	strb	r3, [r7, #31]
 80067e8:	e048      	b.n	800687c <UART_SetConfig+0x348>
 80067ea:	2304      	movs	r3, #4
 80067ec:	77fb      	strb	r3, [r7, #31]
 80067ee:	e045      	b.n	800687c <UART_SetConfig+0x348>
 80067f0:	2308      	movs	r3, #8
 80067f2:	77fb      	strb	r3, [r7, #31]
 80067f4:	e042      	b.n	800687c <UART_SetConfig+0x348>
 80067f6:	bf00      	nop
 80067f8:	efff69f3 	.word	0xefff69f3
 80067fc:	40011000 	.word	0x40011000
 8006800:	40023800 	.word	0x40023800
 8006804:	40004400 	.word	0x40004400
 8006808:	40004800 	.word	0x40004800
 800680c:	40004c00 	.word	0x40004c00
 8006810:	40005000 	.word	0x40005000
 8006814:	40011400 	.word	0x40011400
 8006818:	40007800 	.word	0x40007800
 800681c:	2310      	movs	r3, #16
 800681e:	77fb      	strb	r3, [r7, #31]
 8006820:	e02c      	b.n	800687c <UART_SetConfig+0x348>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a72      	ldr	r2, [pc, #456]	; (80069f0 <UART_SetConfig+0x4bc>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d125      	bne.n	8006878 <UART_SetConfig+0x344>
 800682c:	4b71      	ldr	r3, [pc, #452]	; (80069f4 <UART_SetConfig+0x4c0>)
 800682e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006832:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006836:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800683a:	d017      	beq.n	800686c <UART_SetConfig+0x338>
 800683c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006840:	d817      	bhi.n	8006872 <UART_SetConfig+0x33e>
 8006842:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006846:	d00b      	beq.n	8006860 <UART_SetConfig+0x32c>
 8006848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800684c:	d811      	bhi.n	8006872 <UART_SetConfig+0x33e>
 800684e:	2b00      	cmp	r3, #0
 8006850:	d003      	beq.n	800685a <UART_SetConfig+0x326>
 8006852:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006856:	d006      	beq.n	8006866 <UART_SetConfig+0x332>
 8006858:	e00b      	b.n	8006872 <UART_SetConfig+0x33e>
 800685a:	2300      	movs	r3, #0
 800685c:	77fb      	strb	r3, [r7, #31]
 800685e:	e00d      	b.n	800687c <UART_SetConfig+0x348>
 8006860:	2302      	movs	r3, #2
 8006862:	77fb      	strb	r3, [r7, #31]
 8006864:	e00a      	b.n	800687c <UART_SetConfig+0x348>
 8006866:	2304      	movs	r3, #4
 8006868:	77fb      	strb	r3, [r7, #31]
 800686a:	e007      	b.n	800687c <UART_SetConfig+0x348>
 800686c:	2308      	movs	r3, #8
 800686e:	77fb      	strb	r3, [r7, #31]
 8006870:	e004      	b.n	800687c <UART_SetConfig+0x348>
 8006872:	2310      	movs	r3, #16
 8006874:	77fb      	strb	r3, [r7, #31]
 8006876:	e001      	b.n	800687c <UART_SetConfig+0x348>
 8006878:	2310      	movs	r3, #16
 800687a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	69db      	ldr	r3, [r3, #28]
 8006880:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006884:	d15b      	bne.n	800693e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006886:	7ffb      	ldrb	r3, [r7, #31]
 8006888:	2b08      	cmp	r3, #8
 800688a:	d828      	bhi.n	80068de <UART_SetConfig+0x3aa>
 800688c:	a201      	add	r2, pc, #4	; (adr r2, 8006894 <UART_SetConfig+0x360>)
 800688e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006892:	bf00      	nop
 8006894:	080068b9 	.word	0x080068b9
 8006898:	080068c1 	.word	0x080068c1
 800689c:	080068c9 	.word	0x080068c9
 80068a0:	080068df 	.word	0x080068df
 80068a4:	080068cf 	.word	0x080068cf
 80068a8:	080068df 	.word	0x080068df
 80068ac:	080068df 	.word	0x080068df
 80068b0:	080068df 	.word	0x080068df
 80068b4:	080068d7 	.word	0x080068d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068b8:	f7fe faa8 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 80068bc:	61b8      	str	r0, [r7, #24]
        break;
 80068be:	e013      	b.n	80068e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068c0:	f7fe fab8 	bl	8004e34 <HAL_RCC_GetPCLK2Freq>
 80068c4:	61b8      	str	r0, [r7, #24]
        break;
 80068c6:	e00f      	b.n	80068e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068c8:	4b4b      	ldr	r3, [pc, #300]	; (80069f8 <UART_SetConfig+0x4c4>)
 80068ca:	61bb      	str	r3, [r7, #24]
        break;
 80068cc:	e00c      	b.n	80068e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068ce:	f7fe f98b 	bl	8004be8 <HAL_RCC_GetSysClockFreq>
 80068d2:	61b8      	str	r0, [r7, #24]
        break;
 80068d4:	e008      	b.n	80068e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068da:	61bb      	str	r3, [r7, #24]
        break;
 80068dc:	e004      	b.n	80068e8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80068de:	2300      	movs	r3, #0
 80068e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	77bb      	strb	r3, [r7, #30]
        break;
 80068e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d074      	beq.n	80069d8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	005a      	lsls	r2, r3, #1
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	085b      	lsrs	r3, r3, #1
 80068f8:	441a      	add	r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006902:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	2b0f      	cmp	r3, #15
 8006908:	d916      	bls.n	8006938 <UART_SetConfig+0x404>
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006910:	d212      	bcs.n	8006938 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	b29b      	uxth	r3, r3
 8006916:	f023 030f 	bic.w	r3, r3, #15
 800691a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	085b      	lsrs	r3, r3, #1
 8006920:	b29b      	uxth	r3, r3
 8006922:	f003 0307 	and.w	r3, r3, #7
 8006926:	b29a      	uxth	r2, r3
 8006928:	89fb      	ldrh	r3, [r7, #14]
 800692a:	4313      	orrs	r3, r2
 800692c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	89fa      	ldrh	r2, [r7, #14]
 8006934:	60da      	str	r2, [r3, #12]
 8006936:	e04f      	b.n	80069d8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	77bb      	strb	r3, [r7, #30]
 800693c:	e04c      	b.n	80069d8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800693e:	7ffb      	ldrb	r3, [r7, #31]
 8006940:	2b08      	cmp	r3, #8
 8006942:	d828      	bhi.n	8006996 <UART_SetConfig+0x462>
 8006944:	a201      	add	r2, pc, #4	; (adr r2, 800694c <UART_SetConfig+0x418>)
 8006946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694a:	bf00      	nop
 800694c:	08006971 	.word	0x08006971
 8006950:	08006979 	.word	0x08006979
 8006954:	08006981 	.word	0x08006981
 8006958:	08006997 	.word	0x08006997
 800695c:	08006987 	.word	0x08006987
 8006960:	08006997 	.word	0x08006997
 8006964:	08006997 	.word	0x08006997
 8006968:	08006997 	.word	0x08006997
 800696c:	0800698f 	.word	0x0800698f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006970:	f7fe fa4c 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 8006974:	61b8      	str	r0, [r7, #24]
        break;
 8006976:	e013      	b.n	80069a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006978:	f7fe fa5c 	bl	8004e34 <HAL_RCC_GetPCLK2Freq>
 800697c:	61b8      	str	r0, [r7, #24]
        break;
 800697e:	e00f      	b.n	80069a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006980:	4b1d      	ldr	r3, [pc, #116]	; (80069f8 <UART_SetConfig+0x4c4>)
 8006982:	61bb      	str	r3, [r7, #24]
        break;
 8006984:	e00c      	b.n	80069a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006986:	f7fe f92f 	bl	8004be8 <HAL_RCC_GetSysClockFreq>
 800698a:	61b8      	str	r0, [r7, #24]
        break;
 800698c:	e008      	b.n	80069a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800698e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006992:	61bb      	str	r3, [r7, #24]
        break;
 8006994:	e004      	b.n	80069a0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006996:	2300      	movs	r3, #0
 8006998:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	77bb      	strb	r3, [r7, #30]
        break;
 800699e:	bf00      	nop
    }

    if (pclk != 0U)
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d018      	beq.n	80069d8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	085a      	lsrs	r2, r3, #1
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	441a      	add	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	2b0f      	cmp	r3, #15
 80069be:	d909      	bls.n	80069d4 <UART_SetConfig+0x4a0>
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069c6:	d205      	bcs.n	80069d4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	60da      	str	r2, [r3, #12]
 80069d2:	e001      	b.n	80069d8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80069e4:	7fbb      	ldrb	r3, [r7, #30]
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3720      	adds	r7, #32
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	40007c00 	.word	0x40007c00
 80069f4:	40023800 	.word	0x40023800
 80069f8:	00f42400 	.word	0x00f42400

080069fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a08:	f003 0301 	and.w	r3, r3, #1
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00a      	beq.n	8006a26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	430a      	orrs	r2, r1
 8006a24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2a:	f003 0302 	and.w	r3, r3, #2
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00a      	beq.n	8006a48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	430a      	orrs	r2, r1
 8006a46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4c:	f003 0304 	and.w	r3, r3, #4
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00a      	beq.n	8006a6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	430a      	orrs	r2, r1
 8006a68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6e:	f003 0308 	and.w	r3, r3, #8
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00a      	beq.n	8006a8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a90:	f003 0310 	and.w	r3, r3, #16
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00a      	beq.n	8006aae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	430a      	orrs	r2, r1
 8006aac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab2:	f003 0320 	and.w	r3, r3, #32
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00a      	beq.n	8006ad0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	430a      	orrs	r2, r1
 8006ace:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d01a      	beq.n	8006b12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	430a      	orrs	r2, r1
 8006af0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006afa:	d10a      	bne.n	8006b12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	430a      	orrs	r2, r1
 8006b10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00a      	beq.n	8006b34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	430a      	orrs	r2, r1
 8006b32:	605a      	str	r2, [r3, #4]
  }
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b086      	sub	sp, #24
 8006b44:	af02      	add	r7, sp, #8
 8006b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b50:	f7fc f8c4 	bl	8002cdc <HAL_GetTick>
 8006b54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 0308 	and.w	r3, r3, #8
 8006b60:	2b08      	cmp	r3, #8
 8006b62:	d10e      	bne.n	8006b82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b68:	9300      	str	r3, [sp, #0]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f831 	bl	8006bda <UART_WaitOnFlagUntilTimeout>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d001      	beq.n	8006b82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e027      	b.n	8006bd2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0304 	and.w	r3, r3, #4
 8006b8c:	2b04      	cmp	r3, #4
 8006b8e:	d10e      	bne.n	8006bae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b94:	9300      	str	r3, [sp, #0]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f81b 	bl	8006bda <UART_WaitOnFlagUntilTimeout>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d001      	beq.n	8006bae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006baa:	2303      	movs	r3, #3
 8006bac:	e011      	b.n	8006bd2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2220      	movs	r2, #32
 8006bb2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2220      	movs	r2, #32
 8006bb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b09c      	sub	sp, #112	; 0x70
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	60f8      	str	r0, [r7, #12]
 8006be2:	60b9      	str	r1, [r7, #8]
 8006be4:	603b      	str	r3, [r7, #0]
 8006be6:	4613      	mov	r3, r2
 8006be8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bea:	e0a7      	b.n	8006d3c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf2:	f000 80a3 	beq.w	8006d3c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bf6:	f7fc f871 	bl	8002cdc <HAL_GetTick>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d302      	bcc.n	8006c0c <UART_WaitOnFlagUntilTimeout+0x32>
 8006c06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d13f      	bne.n	8006c8c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c14:	e853 3f00 	ldrex	r3, [r3]
 8006c18:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c20:	667b      	str	r3, [r7, #100]	; 0x64
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	461a      	mov	r2, r3
 8006c28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c2c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006c30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006c32:	e841 2300 	strex	r3, r2, [r1]
 8006c36:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006c38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1e6      	bne.n	8006c0c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	3308      	adds	r3, #8
 8006c44:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c48:	e853 3f00 	ldrex	r3, [r3]
 8006c4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c50:	f023 0301 	bic.w	r3, r3, #1
 8006c54:	663b      	str	r3, [r7, #96]	; 0x60
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	3308      	adds	r3, #8
 8006c5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c5e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006c60:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c66:	e841 2300 	strex	r3, r2, [r1]
 8006c6a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006c6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1e5      	bne.n	8006c3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2220      	movs	r2, #32
 8006c76:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2220      	movs	r2, #32
 8006c7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	e068      	b.n	8006d5e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0304 	and.w	r3, r3, #4
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d050      	beq.n	8006d3c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	69db      	ldr	r3, [r3, #28]
 8006ca0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ca4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ca8:	d148      	bne.n	8006d3c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cb2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cbc:	e853 3f00 	ldrex	r3, [r3]
 8006cc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006cc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	461a      	mov	r2, r3
 8006cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cd2:	637b      	str	r3, [r7, #52]	; 0x34
 8006cd4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006cd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cda:	e841 2300 	strex	r3, r2, [r1]
 8006cde:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1e6      	bne.n	8006cb4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	3308      	adds	r3, #8
 8006cec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	e853 3f00 	ldrex	r3, [r3]
 8006cf4:	613b      	str	r3, [r7, #16]
   return(result);
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	f023 0301 	bic.w	r3, r3, #1
 8006cfc:	66bb      	str	r3, [r7, #104]	; 0x68
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	3308      	adds	r3, #8
 8006d04:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006d06:	623a      	str	r2, [r7, #32]
 8006d08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0a:	69f9      	ldr	r1, [r7, #28]
 8006d0c:	6a3a      	ldr	r2, [r7, #32]
 8006d0e:	e841 2300 	strex	r3, r2, [r1]
 8006d12:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1e5      	bne.n	8006ce6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2220      	movs	r2, #32
 8006d1e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2220      	movs	r2, #32
 8006d24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2220      	movs	r2, #32
 8006d2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e010      	b.n	8006d5e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	69da      	ldr	r2, [r3, #28]
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	4013      	ands	r3, r2
 8006d46:	68ba      	ldr	r2, [r7, #8]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	bf0c      	ite	eq
 8006d4c:	2301      	moveq	r3, #1
 8006d4e:	2300      	movne	r3, #0
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	461a      	mov	r2, r3
 8006d54:	79fb      	ldrb	r3, [r7, #7]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	f43f af48 	beq.w	8006bec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3770      	adds	r7, #112	; 0x70
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
	...

08006d68 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b096      	sub	sp, #88	; 0x58
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	4613      	mov	r3, r2
 8006d74:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	68ba      	ldr	r2, [r7, #8]
 8006d7a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	88fa      	ldrh	r2, [r7, #6]
 8006d80:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2222      	movs	r2, #34	; 0x22
 8006d90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d028      	beq.n	8006dee <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006da0:	4a3e      	ldr	r2, [pc, #248]	; (8006e9c <UART_Start_Receive_DMA+0x134>)
 8006da2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006da8:	4a3d      	ldr	r2, [pc, #244]	; (8006ea0 <UART_Start_Receive_DMA+0x138>)
 8006daa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006db0:	4a3c      	ldr	r2, [pc, #240]	; (8006ea4 <UART_Start_Receive_DMA+0x13c>)
 8006db2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006db8:	2200      	movs	r2, #0
 8006dba:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	3324      	adds	r3, #36	; 0x24
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dcc:	461a      	mov	r2, r3
 8006dce:	88fb      	ldrh	r3, [r7, #6]
 8006dd0:	f7fc f97f 	bl	80030d2 <HAL_DMA_Start_IT>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d009      	beq.n	8006dee <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2210      	movs	r2, #16
 8006dde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2220      	movs	r2, #32
 8006de6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e051      	b.n	8006e92 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d018      	beq.n	8006e28 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dfe:	e853 3f00 	ldrex	r3, [r3]
 8006e02:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e0a:	657b      	str	r3, [r7, #84]	; 0x54
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	461a      	mov	r2, r3
 8006e12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e14:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e16:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e18:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e1c:	e841 2300 	strex	r3, r2, [r1]
 8006e20:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006e22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1e6      	bne.n	8006df6 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	3308      	adds	r3, #8
 8006e2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e32:	e853 3f00 	ldrex	r3, [r3]
 8006e36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3a:	f043 0301 	orr.w	r3, r3, #1
 8006e3e:	653b      	str	r3, [r7, #80]	; 0x50
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	3308      	adds	r3, #8
 8006e46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006e48:	637a      	str	r2, [r7, #52]	; 0x34
 8006e4a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e50:	e841 2300 	strex	r3, r2, [r1]
 8006e54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1e5      	bne.n	8006e28 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3308      	adds	r3, #8
 8006e62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	e853 3f00 	ldrex	r3, [r3]
 8006e6a:	613b      	str	r3, [r7, #16]
   return(result);
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	3308      	adds	r3, #8
 8006e7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e7c:	623a      	str	r2, [r7, #32]
 8006e7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e80:	69f9      	ldr	r1, [r7, #28]
 8006e82:	6a3a      	ldr	r2, [r7, #32]
 8006e84:	e841 2300 	strex	r3, r2, [r1]
 8006e88:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1e5      	bne.n	8006e5c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3758      	adds	r7, #88	; 0x58
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	08006fbd 	.word	0x08006fbd
 8006ea0:	080070e5 	.word	0x080070e5
 8006ea4:	08007123 	.word	0x08007123

08006ea8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b089      	sub	sp, #36	; 0x24
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	e853 3f00 	ldrex	r3, [r3]
 8006ebc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006ec4:	61fb      	str	r3, [r7, #28]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	461a      	mov	r2, r3
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	61bb      	str	r3, [r7, #24]
 8006ed0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed2:	6979      	ldr	r1, [r7, #20]
 8006ed4:	69ba      	ldr	r2, [r7, #24]
 8006ed6:	e841 2300 	strex	r3, r2, [r1]
 8006eda:	613b      	str	r3, [r7, #16]
   return(result);
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1e6      	bne.n	8006eb0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2220      	movs	r2, #32
 8006ee6:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8006ee8:	bf00      	nop
 8006eea:	3724      	adds	r7, #36	; 0x24
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b095      	sub	sp, #84	; 0x54
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f04:	e853 3f00 	ldrex	r3, [r3]
 8006f08:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	461a      	mov	r2, r3
 8006f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f1a:	643b      	str	r3, [r7, #64]	; 0x40
 8006f1c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f22:	e841 2300 	strex	r3, r2, [r1]
 8006f26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1e6      	bne.n	8006efc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	3308      	adds	r3, #8
 8006f34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f36:	6a3b      	ldr	r3, [r7, #32]
 8006f38:	e853 3f00 	ldrex	r3, [r3]
 8006f3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	f023 0301 	bic.w	r3, r3, #1
 8006f44:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	3308      	adds	r3, #8
 8006f4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f56:	e841 2300 	strex	r3, r2, [r1]
 8006f5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1e5      	bne.n	8006f2e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d118      	bne.n	8006f9c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	e853 3f00 	ldrex	r3, [r3]
 8006f76:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	f023 0310 	bic.w	r3, r3, #16
 8006f7e:	647b      	str	r3, [r7, #68]	; 0x44
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	461a      	mov	r2, r3
 8006f86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f88:	61bb      	str	r3, [r7, #24]
 8006f8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8c:	6979      	ldr	r1, [r7, #20]
 8006f8e:	69ba      	ldr	r2, [r7, #24]
 8006f90:	e841 2300 	strex	r3, r2, [r1]
 8006f94:	613b      	str	r3, [r7, #16]
   return(result);
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d1e6      	bne.n	8006f6a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2220      	movs	r2, #32
 8006fa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006fb0:	bf00      	nop
 8006fb2:	3754      	adds	r7, #84	; 0x54
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b09c      	sub	sp, #112	; 0x70
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	69db      	ldr	r3, [r3, #28]
 8006fce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fd2:	d071      	beq.n	80070b8 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8006fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fe4:	e853 3f00 	ldrex	r3, [r3]
 8006fe8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006fea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ff0:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ffa:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ffc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007000:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007002:	e841 2300 	strex	r3, r2, [r1]
 8007006:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1e6      	bne.n	8006fdc <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800700e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	3308      	adds	r3, #8
 8007014:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007018:	e853 3f00 	ldrex	r3, [r3]
 800701c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800701e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007020:	f023 0301 	bic.w	r3, r3, #1
 8007024:	667b      	str	r3, [r7, #100]	; 0x64
 8007026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	3308      	adds	r3, #8
 800702c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800702e:	647a      	str	r2, [r7, #68]	; 0x44
 8007030:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007032:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007034:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007036:	e841 2300 	strex	r3, r2, [r1]
 800703a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800703c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1e5      	bne.n	800700e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	3308      	adds	r3, #8
 8007048:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800704a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704c:	e853 3f00 	ldrex	r3, [r3]
 8007050:	623b      	str	r3, [r7, #32]
   return(result);
 8007052:	6a3b      	ldr	r3, [r7, #32]
 8007054:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007058:	663b      	str	r3, [r7, #96]	; 0x60
 800705a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	3308      	adds	r3, #8
 8007060:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007062:	633a      	str	r2, [r7, #48]	; 0x30
 8007064:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007066:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800706a:	e841 2300 	strex	r3, r2, [r1]
 800706e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1e5      	bne.n	8007042 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007078:	2220      	movs	r2, #32
 800707a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800707e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007082:	2b01      	cmp	r3, #1
 8007084:	d118      	bne.n	80070b8 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	e853 3f00 	ldrex	r3, [r3]
 8007092:	60fb      	str	r3, [r7, #12]
   return(result);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f023 0310 	bic.w	r3, r3, #16
 800709a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800709c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	461a      	mov	r2, r3
 80070a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070a4:	61fb      	str	r3, [r7, #28]
 80070a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a8:	69b9      	ldr	r1, [r7, #24]
 80070aa:	69fa      	ldr	r2, [r7, #28]
 80070ac:	e841 2300 	strex	r3, r2, [r1]
 80070b0:	617b      	str	r3, [r7, #20]
   return(result);
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1e6      	bne.n	8007086 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070ba:	2200      	movs	r2, #0
 80070bc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d107      	bne.n	80070d6 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80070cc:	4619      	mov	r1, r3
 80070ce:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80070d0:	f7ff fa1a 	bl	8006508 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80070d4:	e002      	b.n	80070dc <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80070d6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80070d8:	f7fb f93c 	bl	8002354 <HAL_UART_RxCpltCallback>
}
 80070dc:	bf00      	nop
 80070de:	3770      	adds	r7, #112	; 0x70
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2201      	movs	r2, #1
 80070f6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d109      	bne.n	8007114 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007106:	085b      	lsrs	r3, r3, #1
 8007108:	b29b      	uxth	r3, r3
 800710a:	4619      	mov	r1, r3
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f7ff f9fb 	bl	8006508 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007112:	e002      	b.n	800711a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f7ff f9e3 	bl	80064e0 <HAL_UART_RxHalfCpltCallback>
}
 800711a:	bf00      	nop
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b086      	sub	sp, #24
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800712e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007134:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800713c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007148:	2b80      	cmp	r3, #128	; 0x80
 800714a:	d109      	bne.n	8007160 <UART_DMAError+0x3e>
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	2b21      	cmp	r3, #33	; 0x21
 8007150:	d106      	bne.n	8007160 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	2200      	movs	r2, #0
 8007156:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800715a:	6978      	ldr	r0, [r7, #20]
 800715c:	f7ff fea4 	bl	8006ea8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800716a:	2b40      	cmp	r3, #64	; 0x40
 800716c:	d109      	bne.n	8007182 <UART_DMAError+0x60>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2b22      	cmp	r3, #34	; 0x22
 8007172:	d106      	bne.n	8007182 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	2200      	movs	r2, #0
 8007178:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800717c:	6978      	ldr	r0, [r7, #20]
 800717e:	f7ff feb9 	bl	8006ef4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007188:	f043 0210 	orr.w	r2, r3, #16
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007192:	6978      	ldr	r0, [r7, #20]
 8007194:	f7ff f9ae 	bl	80064f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007198:	bf00      	nop
 800719a:	3718      	adds	r7, #24
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f7ff f998 	bl	80064f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071c4:	bf00      	nop
 80071c6:	3710      	adds	r7, #16
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b088      	sub	sp, #32
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	e853 3f00 	ldrex	r3, [r3]
 80071e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071e8:	61fb      	str	r3, [r7, #28]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	461a      	mov	r2, r3
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	61bb      	str	r3, [r7, #24]
 80071f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f6:	6979      	ldr	r1, [r7, #20]
 80071f8:	69ba      	ldr	r2, [r7, #24]
 80071fa:	e841 2300 	strex	r3, r2, [r1]
 80071fe:	613b      	str	r3, [r7, #16]
   return(result);
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d1e6      	bne.n	80071d4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2220      	movs	r2, #32
 800720a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f7ff f95a 	bl	80064cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007218:	bf00      	nop
 800721a:	3720      	adds	r7, #32
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007220:	b084      	sub	sp, #16
 8007222:	b580      	push	{r7, lr}
 8007224:	b084      	sub	sp, #16
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
 800722a:	f107 001c 	add.w	r0, r7, #28
 800722e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007234:	2b01      	cmp	r3, #1
 8007236:	d120      	bne.n	800727a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	68da      	ldr	r2, [r3, #12]
 8007248:	4b20      	ldr	r3, [pc, #128]	; (80072cc <USB_CoreInit+0xac>)
 800724a:	4013      	ands	r3, r2
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800725c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800725e:	2b01      	cmp	r3, #1
 8007260:	d105      	bne.n	800726e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 fa96 	bl	80077a0 <USB_CoreReset>
 8007274:	4603      	mov	r3, r0
 8007276:	73fb      	strb	r3, [r7, #15]
 8007278:	e010      	b.n	800729c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 fa8a 	bl	80077a0 <USB_CoreReset>
 800728c:	4603      	mov	r3, r0
 800728e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007294:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800729c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d10b      	bne.n	80072ba <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f043 0206 	orr.w	r2, r3, #6
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	f043 0220 	orr.w	r2, r3, #32
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80072ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3710      	adds	r7, #16
 80072c0:	46bd      	mov	sp, r7
 80072c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072c6:	b004      	add	sp, #16
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	ffbdffbf 	.word	0xffbdffbf

080072d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	f023 0201 	bic.w	r2, r3, #1
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	370c      	adds	r7, #12
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr

080072f2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b084      	sub	sp, #16
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
 80072fa:	460b      	mov	r3, r1
 80072fc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80072fe:	2300      	movs	r3, #0
 8007300:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800730e:	78fb      	ldrb	r3, [r7, #3]
 8007310:	2b01      	cmp	r3, #1
 8007312:	d115      	bne.n	8007340 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007320:	2001      	movs	r0, #1
 8007322:	f7fb fce7 	bl	8002cf4 <HAL_Delay>
      ms++;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	3301      	adds	r3, #1
 800732a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 fa29 	bl	8007784 <USB_GetMode>
 8007332:	4603      	mov	r3, r0
 8007334:	2b01      	cmp	r3, #1
 8007336:	d01e      	beq.n	8007376 <USB_SetCurrentMode+0x84>
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2b31      	cmp	r3, #49	; 0x31
 800733c:	d9f0      	bls.n	8007320 <USB_SetCurrentMode+0x2e>
 800733e:	e01a      	b.n	8007376 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007340:	78fb      	ldrb	r3, [r7, #3]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d115      	bne.n	8007372 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007352:	2001      	movs	r0, #1
 8007354:	f7fb fcce 	bl	8002cf4 <HAL_Delay>
      ms++;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	3301      	adds	r3, #1
 800735c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 fa10 	bl	8007784 <USB_GetMode>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d005      	beq.n	8007376 <USB_SetCurrentMode+0x84>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2b31      	cmp	r3, #49	; 0x31
 800736e:	d9f0      	bls.n	8007352 <USB_SetCurrentMode+0x60>
 8007370:	e001      	b.n	8007376 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	e005      	b.n	8007382 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2b32      	cmp	r3, #50	; 0x32
 800737a:	d101      	bne.n	8007380 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	e000      	b.n	8007382 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3710      	adds	r7, #16
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
	...

0800738c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800738c:	b084      	sub	sp, #16
 800738e:	b580      	push	{r7, lr}
 8007390:	b086      	sub	sp, #24
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
 8007396:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800739a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800739e:	2300      	movs	r3, #0
 80073a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80073a6:	2300      	movs	r3, #0
 80073a8:	613b      	str	r3, [r7, #16]
 80073aa:	e009      	b.n	80073c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	3340      	adds	r3, #64	; 0x40
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	4413      	add	r3, r2
 80073b6:	2200      	movs	r2, #0
 80073b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	3301      	adds	r3, #1
 80073be:	613b      	str	r3, [r7, #16]
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	2b0e      	cmp	r3, #14
 80073c4:	d9f2      	bls.n	80073ac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80073c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d11c      	bne.n	8007406 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073da:	f043 0302 	orr.w	r3, r3, #2
 80073de:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	601a      	str	r2, [r3, #0]
 8007404:	e005      	b.n	8007412 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007418:	461a      	mov	r2, r3
 800741a:	2300      	movs	r3, #0
 800741c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007424:	4619      	mov	r1, r3
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800742c:	461a      	mov	r2, r3
 800742e:	680b      	ldr	r3, [r1, #0]
 8007430:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007434:	2b01      	cmp	r3, #1
 8007436:	d10c      	bne.n	8007452 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743a:	2b00      	cmp	r3, #0
 800743c:	d104      	bne.n	8007448 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800743e:	2100      	movs	r1, #0
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 f965 	bl	8007710 <USB_SetDevSpeed>
 8007446:	e008      	b.n	800745a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007448:	2101      	movs	r1, #1
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f960 	bl	8007710 <USB_SetDevSpeed>
 8007450:	e003      	b.n	800745a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007452:	2103      	movs	r1, #3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 f95b 	bl	8007710 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800745a:	2110      	movs	r1, #16
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f8f3 	bl	8007648 <USB_FlushTxFifo>
 8007462:	4603      	mov	r3, r0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d001      	beq.n	800746c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 f91f 	bl	80076b0 <USB_FlushRxFifo>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d001      	beq.n	800747c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007482:	461a      	mov	r2, r3
 8007484:	2300      	movs	r3, #0
 8007486:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800748e:	461a      	mov	r2, r3
 8007490:	2300      	movs	r3, #0
 8007492:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800749a:	461a      	mov	r2, r3
 800749c:	2300      	movs	r3, #0
 800749e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074a0:	2300      	movs	r3, #0
 80074a2:	613b      	str	r3, [r7, #16]
 80074a4:	e043      	b.n	800752e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	015a      	lsls	r2, r3, #5
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	4413      	add	r3, r2
 80074ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074bc:	d118      	bne.n	80074f0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d10a      	bne.n	80074da <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	015a      	lsls	r2, r3, #5
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	4413      	add	r3, r2
 80074cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074d0:	461a      	mov	r2, r3
 80074d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80074d6:	6013      	str	r3, [r2, #0]
 80074d8:	e013      	b.n	8007502 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	015a      	lsls	r2, r3, #5
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	4413      	add	r3, r2
 80074e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074e6:	461a      	mov	r2, r3
 80074e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80074ec:	6013      	str	r3, [r2, #0]
 80074ee:	e008      	b.n	8007502 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	015a      	lsls	r2, r3, #5
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	4413      	add	r3, r2
 80074f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074fc:	461a      	mov	r2, r3
 80074fe:	2300      	movs	r3, #0
 8007500:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	015a      	lsls	r2, r3, #5
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	4413      	add	r3, r2
 800750a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800750e:	461a      	mov	r2, r3
 8007510:	2300      	movs	r3, #0
 8007512:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	015a      	lsls	r2, r3, #5
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	4413      	add	r3, r2
 800751c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007520:	461a      	mov	r2, r3
 8007522:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007526:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	3301      	adds	r3, #1
 800752c:	613b      	str	r3, [r7, #16]
 800752e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007530:	693a      	ldr	r2, [r7, #16]
 8007532:	429a      	cmp	r2, r3
 8007534:	d3b7      	bcc.n	80074a6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007536:	2300      	movs	r3, #0
 8007538:	613b      	str	r3, [r7, #16]
 800753a:	e043      	b.n	80075c4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	015a      	lsls	r2, r3, #5
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	4413      	add	r3, r2
 8007544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800754e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007552:	d118      	bne.n	8007586 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d10a      	bne.n	8007570 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	015a      	lsls	r2, r3, #5
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	4413      	add	r3, r2
 8007562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007566:	461a      	mov	r2, r3
 8007568:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800756c:	6013      	str	r3, [r2, #0]
 800756e:	e013      	b.n	8007598 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	015a      	lsls	r2, r3, #5
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	4413      	add	r3, r2
 8007578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800757c:	461a      	mov	r2, r3
 800757e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007582:	6013      	str	r3, [r2, #0]
 8007584:	e008      	b.n	8007598 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	015a      	lsls	r2, r3, #5
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	4413      	add	r3, r2
 800758e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007592:	461a      	mov	r2, r3
 8007594:	2300      	movs	r3, #0
 8007596:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	015a      	lsls	r2, r3, #5
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	4413      	add	r3, r2
 80075a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075a4:	461a      	mov	r2, r3
 80075a6:	2300      	movs	r3, #0
 80075a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	015a      	lsls	r2, r3, #5
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	4413      	add	r3, r2
 80075b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075b6:	461a      	mov	r2, r3
 80075b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80075bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	3301      	adds	r3, #1
 80075c2:	613b      	str	r3, [r7, #16]
 80075c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c6:	693a      	ldr	r2, [r7, #16]
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d3b7      	bcc.n	800753c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	68fa      	ldr	r2, [r7, #12]
 80075d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80075ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80075ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d105      	bne.n	8007600 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	699b      	ldr	r3, [r3, #24]
 80075f8:	f043 0210 	orr.w	r2, r3, #16
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	699a      	ldr	r2, [r3, #24]
 8007604:	4b0e      	ldr	r3, [pc, #56]	; (8007640 <USB_DevInit+0x2b4>)
 8007606:	4313      	orrs	r3, r2
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800760c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800760e:	2b00      	cmp	r3, #0
 8007610:	d005      	beq.n	800761e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	699b      	ldr	r3, [r3, #24]
 8007616:	f043 0208 	orr.w	r2, r3, #8
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800761e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007620:	2b01      	cmp	r3, #1
 8007622:	d105      	bne.n	8007630 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	699a      	ldr	r2, [r3, #24]
 8007628:	4b06      	ldr	r3, [pc, #24]	; (8007644 <USB_DevInit+0x2b8>)
 800762a:	4313      	orrs	r3, r2
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007630:	7dfb      	ldrb	r3, [r7, #23]
}
 8007632:	4618      	mov	r0, r3
 8007634:	3718      	adds	r7, #24
 8007636:	46bd      	mov	sp, r7
 8007638:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800763c:	b004      	add	sp, #16
 800763e:	4770      	bx	lr
 8007640:	803c3800 	.word	0x803c3800
 8007644:	40000004 	.word	0x40000004

08007648 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007652:	2300      	movs	r3, #0
 8007654:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	3301      	adds	r3, #1
 800765a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	4a13      	ldr	r2, [pc, #76]	; (80076ac <USB_FlushTxFifo+0x64>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d901      	bls.n	8007668 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007664:	2303      	movs	r3, #3
 8007666:	e01b      	b.n	80076a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	691b      	ldr	r3, [r3, #16]
 800766c:	2b00      	cmp	r3, #0
 800766e:	daf2      	bge.n	8007656 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007670:	2300      	movs	r3, #0
 8007672:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	019b      	lsls	r3, r3, #6
 8007678:	f043 0220 	orr.w	r2, r3, #32
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	3301      	adds	r3, #1
 8007684:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	4a08      	ldr	r2, [pc, #32]	; (80076ac <USB_FlushTxFifo+0x64>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d901      	bls.n	8007692 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800768e:	2303      	movs	r3, #3
 8007690:	e006      	b.n	80076a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	f003 0320 	and.w	r3, r3, #32
 800769a:	2b20      	cmp	r3, #32
 800769c:	d0f0      	beq.n	8007680 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3714      	adds	r7, #20
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr
 80076ac:	00030d40 	.word	0x00030d40

080076b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80076b8:	2300      	movs	r3, #0
 80076ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	3301      	adds	r3, #1
 80076c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	4a11      	ldr	r2, [pc, #68]	; (800770c <USB_FlushRxFifo+0x5c>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d901      	bls.n	80076ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80076ca:	2303      	movs	r3, #3
 80076cc:	e018      	b.n	8007700 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	691b      	ldr	r3, [r3, #16]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	daf2      	bge.n	80076bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80076d6:	2300      	movs	r3, #0
 80076d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2210      	movs	r2, #16
 80076de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	3301      	adds	r3, #1
 80076e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	4a08      	ldr	r2, [pc, #32]	; (800770c <USB_FlushRxFifo+0x5c>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d901      	bls.n	80076f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80076ee:	2303      	movs	r3, #3
 80076f0:	e006      	b.n	8007700 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	f003 0310 	and.w	r3, r3, #16
 80076fa:	2b10      	cmp	r3, #16
 80076fc:	d0f0      	beq.n	80076e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3714      	adds	r7, #20
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr
 800770c:	00030d40 	.word	0x00030d40

08007710 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	460b      	mov	r3, r1
 800771a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	78fb      	ldrb	r3, [r7, #3]
 800772a:	68f9      	ldr	r1, [r7, #12]
 800772c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007730:	4313      	orrs	r3, r2
 8007732:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3714      	adds	r7, #20
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr

08007742 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007742:	b480      	push	{r7}
 8007744:	b085      	sub	sp, #20
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800775c:	f023 0303 	bic.w	r3, r3, #3
 8007760:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	68fa      	ldr	r2, [r7, #12]
 800776c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007770:	f043 0302 	orr.w	r3, r3, #2
 8007774:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007776:	2300      	movs	r3, #0
}
 8007778:	4618      	mov	r0, r3
 800777a:	3714      	adds	r7, #20
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	695b      	ldr	r3, [r3, #20]
 8007790:	f003 0301 	and.w	r3, r3, #1
}
 8007794:	4618      	mov	r0, r3
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077a8:	2300      	movs	r3, #0
 80077aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	3301      	adds	r3, #1
 80077b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	4a13      	ldr	r2, [pc, #76]	; (8007804 <USB_CoreReset+0x64>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d901      	bls.n	80077be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80077ba:	2303      	movs	r3, #3
 80077bc:	e01b      	b.n	80077f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	daf2      	bge.n	80077ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80077c6:	2300      	movs	r3, #0
 80077c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	f043 0201 	orr.w	r2, r3, #1
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	3301      	adds	r3, #1
 80077da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	4a09      	ldr	r2, [pc, #36]	; (8007804 <USB_CoreReset+0x64>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d901      	bls.n	80077e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80077e4:	2303      	movs	r3, #3
 80077e6:	e006      	b.n	80077f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	691b      	ldr	r3, [r3, #16]
 80077ec:	f003 0301 	and.w	r3, r3, #1
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d0f0      	beq.n	80077d6 <USB_CoreReset+0x36>

  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3714      	adds	r7, #20
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	00030d40 	.word	0x00030d40

08007808 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007808:	b480      	push	{r7}
 800780a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800780c:	bf00      	nop
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr
	...

08007818 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007818:	b480      	push	{r7}
 800781a:	b085      	sub	sp, #20
 800781c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800781e:	f3ef 8305 	mrs	r3, IPSR
 8007822:	60bb      	str	r3, [r7, #8]
  return(result);
 8007824:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007826:	2b00      	cmp	r3, #0
 8007828:	d10f      	bne.n	800784a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800782a:	f3ef 8310 	mrs	r3, PRIMASK
 800782e:	607b      	str	r3, [r7, #4]
  return(result);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d105      	bne.n	8007842 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007836:	f3ef 8311 	mrs	r3, BASEPRI
 800783a:	603b      	str	r3, [r7, #0]
  return(result);
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d007      	beq.n	8007852 <osKernelInitialize+0x3a>
 8007842:	4b0e      	ldr	r3, [pc, #56]	; (800787c <osKernelInitialize+0x64>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2b02      	cmp	r3, #2
 8007848:	d103      	bne.n	8007852 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800784a:	f06f 0305 	mvn.w	r3, #5
 800784e:	60fb      	str	r3, [r7, #12]
 8007850:	e00c      	b.n	800786c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007852:	4b0a      	ldr	r3, [pc, #40]	; (800787c <osKernelInitialize+0x64>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d105      	bne.n	8007866 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800785a:	4b08      	ldr	r3, [pc, #32]	; (800787c <osKernelInitialize+0x64>)
 800785c:	2201      	movs	r2, #1
 800785e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007860:	2300      	movs	r3, #0
 8007862:	60fb      	str	r3, [r7, #12]
 8007864:	e002      	b.n	800786c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007866:	f04f 33ff 	mov.w	r3, #4294967295
 800786a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800786c:	68fb      	ldr	r3, [r7, #12]
}
 800786e:	4618      	mov	r0, r3
 8007870:	3714      	adds	r7, #20
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	20001514 	.word	0x20001514

08007880 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007886:	f3ef 8305 	mrs	r3, IPSR
 800788a:	60bb      	str	r3, [r7, #8]
  return(result);
 800788c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800788e:	2b00      	cmp	r3, #0
 8007890:	d10f      	bne.n	80078b2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007892:	f3ef 8310 	mrs	r3, PRIMASK
 8007896:	607b      	str	r3, [r7, #4]
  return(result);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d105      	bne.n	80078aa <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800789e:	f3ef 8311 	mrs	r3, BASEPRI
 80078a2:	603b      	str	r3, [r7, #0]
  return(result);
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d007      	beq.n	80078ba <osKernelStart+0x3a>
 80078aa:	4b0f      	ldr	r3, [pc, #60]	; (80078e8 <osKernelStart+0x68>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	d103      	bne.n	80078ba <osKernelStart+0x3a>
    stat = osErrorISR;
 80078b2:	f06f 0305 	mvn.w	r3, #5
 80078b6:	60fb      	str	r3, [r7, #12]
 80078b8:	e010      	b.n	80078dc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80078ba:	4b0b      	ldr	r3, [pc, #44]	; (80078e8 <osKernelStart+0x68>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d109      	bne.n	80078d6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80078c2:	f7ff ffa1 	bl	8007808 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80078c6:	4b08      	ldr	r3, [pc, #32]	; (80078e8 <osKernelStart+0x68>)
 80078c8:	2202      	movs	r2, #2
 80078ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80078cc:	f001 fdc6 	bl	800945c <vTaskStartScheduler>
      stat = osOK;
 80078d0:	2300      	movs	r3, #0
 80078d2:	60fb      	str	r3, [r7, #12]
 80078d4:	e002      	b.n	80078dc <osKernelStart+0x5c>
    } else {
      stat = osError;
 80078d6:	f04f 33ff 	mov.w	r3, #4294967295
 80078da:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80078dc:	68fb      	ldr	r3, [r7, #12]
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3710      	adds	r7, #16
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	20001514 	.word	0x20001514

080078ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b090      	sub	sp, #64	; 0x40
 80078f0:	af04      	add	r7, sp, #16
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80078f8:	2300      	movs	r3, #0
 80078fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078fc:	f3ef 8305 	mrs	r3, IPSR
 8007900:	61fb      	str	r3, [r7, #28]
  return(result);
 8007902:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007904:	2b00      	cmp	r3, #0
 8007906:	f040 808f 	bne.w	8007a28 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800790a:	f3ef 8310 	mrs	r3, PRIMASK
 800790e:	61bb      	str	r3, [r7, #24]
  return(result);
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d105      	bne.n	8007922 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007916:	f3ef 8311 	mrs	r3, BASEPRI
 800791a:	617b      	str	r3, [r7, #20]
  return(result);
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d003      	beq.n	800792a <osThreadNew+0x3e>
 8007922:	4b44      	ldr	r3, [pc, #272]	; (8007a34 <osThreadNew+0x148>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2b02      	cmp	r3, #2
 8007928:	d07e      	beq.n	8007a28 <osThreadNew+0x13c>
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d07b      	beq.n	8007a28 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007930:	2380      	movs	r3, #128	; 0x80
 8007932:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007934:	2318      	movs	r3, #24
 8007936:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8007938:	2300      	movs	r3, #0
 800793a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800793c:	f04f 33ff 	mov.w	r3, #4294967295
 8007940:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d045      	beq.n	80079d4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d002      	beq.n	8007956 <osThreadNew+0x6a>
        name = attr->name;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	699b      	ldr	r3, [r3, #24]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d002      	beq.n	8007964 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	699b      	ldr	r3, [r3, #24]
 8007962:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007966:	2b00      	cmp	r3, #0
 8007968:	d008      	beq.n	800797c <osThreadNew+0x90>
 800796a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796c:	2b38      	cmp	r3, #56	; 0x38
 800796e:	d805      	bhi.n	800797c <osThreadNew+0x90>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	f003 0301 	and.w	r3, r3, #1
 8007978:	2b00      	cmp	r3, #0
 800797a:	d001      	beq.n	8007980 <osThreadNew+0x94>
        return (NULL);
 800797c:	2300      	movs	r3, #0
 800797e:	e054      	b.n	8007a2a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	695b      	ldr	r3, [r3, #20]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d003      	beq.n	8007990 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	695b      	ldr	r3, [r3, #20]
 800798c:	089b      	lsrs	r3, r3, #2
 800798e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00e      	beq.n	80079b6 <osThreadNew+0xca>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	2ba7      	cmp	r3, #167	; 0xa7
 800799e:	d90a      	bls.n	80079b6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d006      	beq.n	80079b6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	695b      	ldr	r3, [r3, #20]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d002      	beq.n	80079b6 <osThreadNew+0xca>
        mem = 1;
 80079b0:	2301      	movs	r3, #1
 80079b2:	623b      	str	r3, [r7, #32]
 80079b4:	e010      	b.n	80079d8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d10c      	bne.n	80079d8 <osThreadNew+0xec>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d108      	bne.n	80079d8 <osThreadNew+0xec>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d104      	bne.n	80079d8 <osThreadNew+0xec>
          mem = 0;
 80079ce:	2300      	movs	r3, #0
 80079d0:	623b      	str	r3, [r7, #32]
 80079d2:	e001      	b.n	80079d8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80079d4:	2300      	movs	r3, #0
 80079d6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80079d8:	6a3b      	ldr	r3, [r7, #32]
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d110      	bne.n	8007a00 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80079e6:	9202      	str	r2, [sp, #8]
 80079e8:	9301      	str	r3, [sp, #4]
 80079ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ec:	9300      	str	r3, [sp, #0]
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079f4:	68f8      	ldr	r0, [r7, #12]
 80079f6:	f001 fb3a 	bl	800906e <xTaskCreateStatic>
 80079fa:	4603      	mov	r3, r0
 80079fc:	613b      	str	r3, [r7, #16]
 80079fe:	e013      	b.n	8007a28 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007a00:	6a3b      	ldr	r3, [r7, #32]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d110      	bne.n	8007a28 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	f107 0310 	add.w	r3, r7, #16
 8007a0e:	9301      	str	r3, [sp, #4]
 8007a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a12:	9300      	str	r3, [sp, #0]
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a18:	68f8      	ldr	r0, [r7, #12]
 8007a1a:	f001 fb8b 	bl	8009134 <xTaskCreate>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d001      	beq.n	8007a28 <osThreadNew+0x13c>
          hTask = NULL;
 8007a24:	2300      	movs	r3, #0
 8007a26:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007a28:	693b      	ldr	r3, [r7, #16]
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3730      	adds	r7, #48	; 0x30
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	20001514 	.word	0x20001514

08007a38 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b086      	sub	sp, #24
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a40:	f3ef 8305 	mrs	r3, IPSR
 8007a44:	613b      	str	r3, [r7, #16]
  return(result);
 8007a46:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d10f      	bne.n	8007a6c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a4c:	f3ef 8310 	mrs	r3, PRIMASK
 8007a50:	60fb      	str	r3, [r7, #12]
  return(result);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d105      	bne.n	8007a64 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007a58:	f3ef 8311 	mrs	r3, BASEPRI
 8007a5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d007      	beq.n	8007a74 <osDelay+0x3c>
 8007a64:	4b0a      	ldr	r3, [pc, #40]	; (8007a90 <osDelay+0x58>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	2b02      	cmp	r3, #2
 8007a6a:	d103      	bne.n	8007a74 <osDelay+0x3c>
    stat = osErrorISR;
 8007a6c:	f06f 0305 	mvn.w	r3, #5
 8007a70:	617b      	str	r3, [r7, #20]
 8007a72:	e007      	b.n	8007a84 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007a74:	2300      	movs	r3, #0
 8007a76:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d002      	beq.n	8007a84 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f001 fcb6 	bl	80093f0 <vTaskDelay>
    }
  }

  return (stat);
 8007a84:	697b      	ldr	r3, [r7, #20]
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3718      	adds	r7, #24
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	20001514 	.word	0x20001514

08007a94 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f003 f8e7 	bl	800ac70 <pvTimerGetTimerID>
 8007aa2:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d005      	beq.n	8007ab6 <TimerCallback+0x22>
    callb->func (callb->arg);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	6852      	ldr	r2, [r2, #4]
 8007ab2:	4610      	mov	r0, r2
 8007ab4:	4798      	blx	r3
  }
}
 8007ab6:	bf00      	nop
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
	...

08007ac0 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b08e      	sub	sp, #56	; 0x38
 8007ac4:	af02      	add	r7, sp, #8
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	607a      	str	r2, [r7, #4]
 8007aca:	603b      	str	r3, [r7, #0]
 8007acc:	460b      	mov	r3, r1
 8007ace:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ad4:	f3ef 8305 	mrs	r3, IPSR
 8007ad8:	61bb      	str	r3, [r7, #24]
  return(result);
 8007ada:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d16a      	bne.n	8007bb6 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ae0:	f3ef 8310 	mrs	r3, PRIMASK
 8007ae4:	617b      	str	r3, [r7, #20]
  return(result);
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d105      	bne.n	8007af8 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007aec:	f3ef 8311 	mrs	r3, BASEPRI
 8007af0:	613b      	str	r3, [r7, #16]
  return(result);
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d003      	beq.n	8007b00 <osTimerNew+0x40>
 8007af8:	4b31      	ldr	r3, [pc, #196]	; (8007bc0 <osTimerNew+0x100>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2b02      	cmp	r3, #2
 8007afe:	d05a      	beq.n	8007bb6 <osTimerNew+0xf6>
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d057      	beq.n	8007bb6 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8007b06:	2008      	movs	r0, #8
 8007b08:	f003 fb0c 	bl	800b124 <pvPortMalloc>
 8007b0c:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d050      	beq.n	8007bb6 <osTimerNew+0xf6>
      callb->func = func;
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8007b20:	7afb      	ldrb	r3, [r7, #11]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d102      	bne.n	8007b2c <osTimerNew+0x6c>
        reload = pdFALSE;
 8007b26:	2300      	movs	r3, #0
 8007b28:	627b      	str	r3, [r7, #36]	; 0x24
 8007b2a:	e001      	b.n	8007b30 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8007b30:	f04f 33ff 	mov.w	r3, #4294967295
 8007b34:	623b      	str	r3, [r7, #32]
      name = NULL;
 8007b36:	2300      	movs	r3, #0
 8007b38:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d01c      	beq.n	8007b7a <osTimerNew+0xba>
        if (attr->name != NULL) {
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d002      	beq.n	8007b4e <osTimerNew+0x8e>
          name = attr->name;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d006      	beq.n	8007b64 <osTimerNew+0xa4>
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	2b2b      	cmp	r3, #43	; 0x2b
 8007b5c:	d902      	bls.n	8007b64 <osTimerNew+0xa4>
          mem = 1;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	623b      	str	r3, [r7, #32]
 8007b62:	e00c      	b.n	8007b7e <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d108      	bne.n	8007b7e <osTimerNew+0xbe>
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d104      	bne.n	8007b7e <osTimerNew+0xbe>
            mem = 0;
 8007b74:	2300      	movs	r3, #0
 8007b76:	623b      	str	r3, [r7, #32]
 8007b78:	e001      	b.n	8007b7e <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8007b7e:	6a3b      	ldr	r3, [r7, #32]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d10c      	bne.n	8007b9e <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	9301      	str	r3, [sp, #4]
 8007b8a:	4b0e      	ldr	r3, [pc, #56]	; (8007bc4 <osTimerNew+0x104>)
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b92:	2101      	movs	r1, #1
 8007b94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b96:	f002 fcda 	bl	800a54e <xTimerCreateStatic>
 8007b9a:	62b8      	str	r0, [r7, #40]	; 0x28
 8007b9c:	e00b      	b.n	8007bb6 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8007b9e:	6a3b      	ldr	r3, [r7, #32]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d108      	bne.n	8007bb6 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8007ba4:	4b07      	ldr	r3, [pc, #28]	; (8007bc4 <osTimerNew+0x104>)
 8007ba6:	9300      	str	r3, [sp, #0]
 8007ba8:	69fb      	ldr	r3, [r7, #28]
 8007baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bac:	2101      	movs	r1, #1
 8007bae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007bb0:	f002 fcac 	bl	800a50c <xTimerCreate>
 8007bb4:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8007bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3730      	adds	r7, #48	; 0x30
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	20001514 	.word	0x20001514
 8007bc4:	08007a95 	.word	0x08007a95

08007bc8 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b08a      	sub	sp, #40	; 0x28
 8007bcc:	af02      	add	r7, sp, #8
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bd6:	f3ef 8305 	mrs	r3, IPSR
 8007bda:	617b      	str	r3, [r7, #20]
  return(result);
 8007bdc:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d10f      	bne.n	8007c02 <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007be2:	f3ef 8310 	mrs	r3, PRIMASK
 8007be6:	613b      	str	r3, [r7, #16]
  return(result);
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d105      	bne.n	8007bfa <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007bee:	f3ef 8311 	mrs	r3, BASEPRI
 8007bf2:	60fb      	str	r3, [r7, #12]
  return(result);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d007      	beq.n	8007c0a <osTimerStart+0x42>
 8007bfa:	4b12      	ldr	r3, [pc, #72]	; (8007c44 <osTimerStart+0x7c>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2b02      	cmp	r3, #2
 8007c00:	d103      	bne.n	8007c0a <osTimerStart+0x42>
    stat = osErrorISR;
 8007c02:	f06f 0305 	mvn.w	r3, #5
 8007c06:	61fb      	str	r3, [r7, #28]
 8007c08:	e017      	b.n	8007c3a <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d103      	bne.n	8007c18 <osTimerStart+0x50>
    stat = osErrorParameter;
 8007c10:	f06f 0303 	mvn.w	r3, #3
 8007c14:	61fb      	str	r3, [r7, #28]
 8007c16:	e010      	b.n	8007c3a <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8007c18:	2300      	movs	r3, #0
 8007c1a:	9300      	str	r3, [sp, #0]
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	683a      	ldr	r2, [r7, #0]
 8007c20:	2104      	movs	r1, #4
 8007c22:	69b8      	ldr	r0, [r7, #24]
 8007c24:	f002 fd12 	bl	800a64c <xTimerGenericCommand>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d102      	bne.n	8007c34 <osTimerStart+0x6c>
      stat = osOK;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	61fb      	str	r3, [r7, #28]
 8007c32:	e002      	b.n	8007c3a <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 8007c34:	f06f 0302 	mvn.w	r3, #2
 8007c38:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8007c3a:	69fb      	ldr	r3, [r7, #28]
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3720      	adds	r7, #32
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	20001514 	.word	0x20001514

08007c48 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	4a07      	ldr	r2, [pc, #28]	; (8007c74 <vApplicationGetIdleTaskMemory+0x2c>)
 8007c58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	4a06      	ldr	r2, [pc, #24]	; (8007c78 <vApplicationGetIdleTaskMemory+0x30>)
 8007c5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2280      	movs	r2, #128	; 0x80
 8007c64:	601a      	str	r2, [r3, #0]
}
 8007c66:	bf00      	nop
 8007c68:	3714      	adds	r7, #20
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	20001518 	.word	0x20001518
 8007c78:	200015c0 	.word	0x200015c0

08007c7c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007c7c:	b480      	push	{r7}
 8007c7e:	b085      	sub	sp, #20
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	4a07      	ldr	r2, [pc, #28]	; (8007ca8 <vApplicationGetTimerTaskMemory+0x2c>)
 8007c8c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	4a06      	ldr	r2, [pc, #24]	; (8007cac <vApplicationGetTimerTaskMemory+0x30>)
 8007c92:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c9a:	601a      	str	r2, [r3, #0]
}
 8007c9c:	bf00      	nop
 8007c9e:	3714      	adds	r7, #20
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr
 8007ca8:	200017c0 	.word	0x200017c0
 8007cac:	20001868 	.word	0x20001868

08007cb0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f103 0208 	add.w	r2, r3, #8
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8007cc8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f103 0208 	add.w	r2, r3, #8
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f103 0208 	add.w	r2, r3, #8
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007ce4:	bf00      	nop
 8007ce6:	370c      	adds	r7, #12
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007cfe:	bf00      	nop
 8007d00:	370c      	adds	r7, #12
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr

08007d0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d0a:	b480      	push	{r7}
 8007d0c:	b085      	sub	sp, #20
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
 8007d12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	68fa      	ldr	r2, [r7, #12]
 8007d1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	689a      	ldr	r2, [r3, #8]
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	683a      	ldr	r2, [r7, #0]
 8007d2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	683a      	ldr	r2, [r7, #0]
 8007d34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	1c5a      	adds	r2, r3, #1
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	601a      	str	r2, [r3, #0]
}
 8007d46:	bf00      	nop
 8007d48:	3714      	adds	r7, #20
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr

08007d52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d52:	b480      	push	{r7}
 8007d54:	b085      	sub	sp, #20
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
 8007d5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d68:	d103      	bne.n	8007d72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	691b      	ldr	r3, [r3, #16]
 8007d6e:	60fb      	str	r3, [r7, #12]
 8007d70:	e00c      	b.n	8007d8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	3308      	adds	r3, #8
 8007d76:	60fb      	str	r3, [r7, #12]
 8007d78:	e002      	b.n	8007d80 <vListInsert+0x2e>
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	60fb      	str	r3, [r7, #12]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	68ba      	ldr	r2, [r7, #8]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d2f6      	bcs.n	8007d7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	685a      	ldr	r2, [r3, #4]
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	683a      	ldr	r2, [r7, #0]
 8007d9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	683a      	ldr	r2, [r7, #0]
 8007da6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	1c5a      	adds	r2, r3, #1
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	601a      	str	r2, [r3, #0]
}
 8007db8:	bf00      	nop
 8007dba:	3714      	adds	r7, #20
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	691b      	ldr	r3, [r3, #16]
 8007dd0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	6892      	ldr	r2, [r2, #8]
 8007dda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	6852      	ldr	r2, [r2, #4]
 8007de4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d103      	bne.n	8007df8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	689a      	ldr	r2, [r3, #8]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	1e5a      	subs	r2, r3, #1
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3714      	adds	r7, #20
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d10c      	bne.n	8007e46 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e30:	b672      	cpsid	i
 8007e32:	f383 8811 	msr	BASEPRI, r3
 8007e36:	f3bf 8f6f 	isb	sy
 8007e3a:	f3bf 8f4f 	dsb	sy
 8007e3e:	b662      	cpsie	i
 8007e40:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007e42:	bf00      	nop
 8007e44:	e7fe      	b.n	8007e44 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007e46:	f003 f841 	bl	800aecc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e52:	68f9      	ldr	r1, [r7, #12]
 8007e54:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007e56:	fb01 f303 	mul.w	r3, r1, r3
 8007e5a:	441a      	add	r2, r3
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2200      	movs	r2, #0
 8007e64:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e76:	3b01      	subs	r3, #1
 8007e78:	68f9      	ldr	r1, [r7, #12]
 8007e7a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007e7c:	fb01 f303 	mul.w	r3, r1, r3
 8007e80:	441a      	add	r2, r3
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	22ff      	movs	r2, #255	; 0xff
 8007e8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	22ff      	movs	r2, #255	; 0xff
 8007e92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d114      	bne.n	8007ec6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d01a      	beq.n	8007eda <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	3310      	adds	r3, #16
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f001 fd91 	bl	80099d0 <xTaskRemoveFromEventList>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d012      	beq.n	8007eda <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007eb4:	4b0c      	ldr	r3, [pc, #48]	; (8007ee8 <xQueueGenericReset+0xd0>)
 8007eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eba:	601a      	str	r2, [r3, #0]
 8007ebc:	f3bf 8f4f 	dsb	sy
 8007ec0:	f3bf 8f6f 	isb	sy
 8007ec4:	e009      	b.n	8007eda <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	3310      	adds	r3, #16
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7ff fef0 	bl	8007cb0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	3324      	adds	r3, #36	; 0x24
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7ff feeb 	bl	8007cb0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007eda:	f003 f82b 	bl	800af34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007ede:	2301      	movs	r3, #1
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	e000ed04 	.word	0xe000ed04

08007eec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b08e      	sub	sp, #56	; 0x38
 8007ef0:	af02      	add	r7, sp, #8
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	607a      	str	r2, [r7, #4]
 8007ef8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d10c      	bne.n	8007f1a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8007f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f04:	b672      	cpsid	i
 8007f06:	f383 8811 	msr	BASEPRI, r3
 8007f0a:	f3bf 8f6f 	isb	sy
 8007f0e:	f3bf 8f4f 	dsb	sy
 8007f12:	b662      	cpsie	i
 8007f14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007f16:	bf00      	nop
 8007f18:	e7fe      	b.n	8007f18 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d10c      	bne.n	8007f3a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8007f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f24:	b672      	cpsid	i
 8007f26:	f383 8811 	msr	BASEPRI, r3
 8007f2a:	f3bf 8f6f 	isb	sy
 8007f2e:	f3bf 8f4f 	dsb	sy
 8007f32:	b662      	cpsie	i
 8007f34:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007f36:	bf00      	nop
 8007f38:	e7fe      	b.n	8007f38 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d002      	beq.n	8007f46 <xQueueGenericCreateStatic+0x5a>
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d001      	beq.n	8007f4a <xQueueGenericCreateStatic+0x5e>
 8007f46:	2301      	movs	r3, #1
 8007f48:	e000      	b.n	8007f4c <xQueueGenericCreateStatic+0x60>
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d10c      	bne.n	8007f6a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8007f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f54:	b672      	cpsid	i
 8007f56:	f383 8811 	msr	BASEPRI, r3
 8007f5a:	f3bf 8f6f 	isb	sy
 8007f5e:	f3bf 8f4f 	dsb	sy
 8007f62:	b662      	cpsie	i
 8007f64:	623b      	str	r3, [r7, #32]
}
 8007f66:	bf00      	nop
 8007f68:	e7fe      	b.n	8007f68 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d102      	bne.n	8007f76 <xQueueGenericCreateStatic+0x8a>
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d101      	bne.n	8007f7a <xQueueGenericCreateStatic+0x8e>
 8007f76:	2301      	movs	r3, #1
 8007f78:	e000      	b.n	8007f7c <xQueueGenericCreateStatic+0x90>
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d10c      	bne.n	8007f9a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8007f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f84:	b672      	cpsid	i
 8007f86:	f383 8811 	msr	BASEPRI, r3
 8007f8a:	f3bf 8f6f 	isb	sy
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	b662      	cpsie	i
 8007f94:	61fb      	str	r3, [r7, #28]
}
 8007f96:	bf00      	nop
 8007f98:	e7fe      	b.n	8007f98 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007f9a:	2350      	movs	r3, #80	; 0x50
 8007f9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	2b50      	cmp	r3, #80	; 0x50
 8007fa2:	d00c      	beq.n	8007fbe <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa8:	b672      	cpsid	i
 8007faa:	f383 8811 	msr	BASEPRI, r3
 8007fae:	f3bf 8f6f 	isb	sy
 8007fb2:	f3bf 8f4f 	dsb	sy
 8007fb6:	b662      	cpsie	i
 8007fb8:	61bb      	str	r3, [r7, #24]
}
 8007fba:	bf00      	nop
 8007fbc:	e7fe      	b.n	8007fbc <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007fbe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00d      	beq.n	8007fe6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fcc:	2201      	movs	r2, #1
 8007fce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007fd2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd8:	9300      	str	r3, [sp, #0]
 8007fda:	4613      	mov	r3, r2
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	68b9      	ldr	r1, [r7, #8]
 8007fe0:	68f8      	ldr	r0, [r7, #12]
 8007fe2:	f000 f805 	bl	8007ff0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3730      	adds	r7, #48	; 0x30
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	607a      	str	r2, [r7, #4]
 8007ffc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d103      	bne.n	800800c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	69ba      	ldr	r2, [r7, #24]
 8008008:	601a      	str	r2, [r3, #0]
 800800a:	e002      	b.n	8008012 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	68ba      	ldr	r2, [r7, #8]
 800801c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800801e:	2101      	movs	r1, #1
 8008020:	69b8      	ldr	r0, [r7, #24]
 8008022:	f7ff fef9 	bl	8007e18 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	78fa      	ldrb	r2, [r7, #3]
 800802a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800802e:	bf00      	nop
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
	...

08008038 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b08e      	sub	sp, #56	; 0x38
 800803c:	af00      	add	r7, sp, #0
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	60b9      	str	r1, [r7, #8]
 8008042:	607a      	str	r2, [r7, #4]
 8008044:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008046:	2300      	movs	r3, #0
 8008048:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800804e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10c      	bne.n	800806e <xQueueGenericSend+0x36>
	__asm volatile
 8008054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008058:	b672      	cpsid	i
 800805a:	f383 8811 	msr	BASEPRI, r3
 800805e:	f3bf 8f6f 	isb	sy
 8008062:	f3bf 8f4f 	dsb	sy
 8008066:	b662      	cpsie	i
 8008068:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800806a:	bf00      	nop
 800806c:	e7fe      	b.n	800806c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d103      	bne.n	800807c <xQueueGenericSend+0x44>
 8008074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008078:	2b00      	cmp	r3, #0
 800807a:	d101      	bne.n	8008080 <xQueueGenericSend+0x48>
 800807c:	2301      	movs	r3, #1
 800807e:	e000      	b.n	8008082 <xQueueGenericSend+0x4a>
 8008080:	2300      	movs	r3, #0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d10c      	bne.n	80080a0 <xQueueGenericSend+0x68>
	__asm volatile
 8008086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808a:	b672      	cpsid	i
 800808c:	f383 8811 	msr	BASEPRI, r3
 8008090:	f3bf 8f6f 	isb	sy
 8008094:	f3bf 8f4f 	dsb	sy
 8008098:	b662      	cpsie	i
 800809a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800809c:	bf00      	nop
 800809e:	e7fe      	b.n	800809e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	2b02      	cmp	r3, #2
 80080a4:	d103      	bne.n	80080ae <xQueueGenericSend+0x76>
 80080a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d101      	bne.n	80080b2 <xQueueGenericSend+0x7a>
 80080ae:	2301      	movs	r3, #1
 80080b0:	e000      	b.n	80080b4 <xQueueGenericSend+0x7c>
 80080b2:	2300      	movs	r3, #0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d10c      	bne.n	80080d2 <xQueueGenericSend+0x9a>
	__asm volatile
 80080b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080bc:	b672      	cpsid	i
 80080be:	f383 8811 	msr	BASEPRI, r3
 80080c2:	f3bf 8f6f 	isb	sy
 80080c6:	f3bf 8f4f 	dsb	sy
 80080ca:	b662      	cpsie	i
 80080cc:	623b      	str	r3, [r7, #32]
}
 80080ce:	bf00      	nop
 80080d0:	e7fe      	b.n	80080d0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080d2:	f001 feb7 	bl	8009e44 <xTaskGetSchedulerState>
 80080d6:	4603      	mov	r3, r0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d102      	bne.n	80080e2 <xQueueGenericSend+0xaa>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d101      	bne.n	80080e6 <xQueueGenericSend+0xae>
 80080e2:	2301      	movs	r3, #1
 80080e4:	e000      	b.n	80080e8 <xQueueGenericSend+0xb0>
 80080e6:	2300      	movs	r3, #0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d10c      	bne.n	8008106 <xQueueGenericSend+0xce>
	__asm volatile
 80080ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f0:	b672      	cpsid	i
 80080f2:	f383 8811 	msr	BASEPRI, r3
 80080f6:	f3bf 8f6f 	isb	sy
 80080fa:	f3bf 8f4f 	dsb	sy
 80080fe:	b662      	cpsie	i
 8008100:	61fb      	str	r3, [r7, #28]
}
 8008102:	bf00      	nop
 8008104:	e7fe      	b.n	8008104 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008106:	f002 fee1 	bl	800aecc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800810a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800810e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008112:	429a      	cmp	r2, r3
 8008114:	d302      	bcc.n	800811c <xQueueGenericSend+0xe4>
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	2b02      	cmp	r3, #2
 800811a:	d129      	bne.n	8008170 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800811c:	683a      	ldr	r2, [r7, #0]
 800811e:	68b9      	ldr	r1, [r7, #8]
 8008120:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008122:	f000 fa15 	bl	8008550 <prvCopyDataToQueue>
 8008126:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812c:	2b00      	cmp	r3, #0
 800812e:	d010      	beq.n	8008152 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008132:	3324      	adds	r3, #36	; 0x24
 8008134:	4618      	mov	r0, r3
 8008136:	f001 fc4b 	bl	80099d0 <xTaskRemoveFromEventList>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d013      	beq.n	8008168 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008140:	4b3f      	ldr	r3, [pc, #252]	; (8008240 <xQueueGenericSend+0x208>)
 8008142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008146:	601a      	str	r2, [r3, #0]
 8008148:	f3bf 8f4f 	dsb	sy
 800814c:	f3bf 8f6f 	isb	sy
 8008150:	e00a      	b.n	8008168 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008154:	2b00      	cmp	r3, #0
 8008156:	d007      	beq.n	8008168 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008158:	4b39      	ldr	r3, [pc, #228]	; (8008240 <xQueueGenericSend+0x208>)
 800815a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800815e:	601a      	str	r2, [r3, #0]
 8008160:	f3bf 8f4f 	dsb	sy
 8008164:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008168:	f002 fee4 	bl	800af34 <vPortExitCritical>
				return pdPASS;
 800816c:	2301      	movs	r3, #1
 800816e:	e063      	b.n	8008238 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d103      	bne.n	800817e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008176:	f002 fedd 	bl	800af34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800817a:	2300      	movs	r3, #0
 800817c:	e05c      	b.n	8008238 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800817e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008180:	2b00      	cmp	r3, #0
 8008182:	d106      	bne.n	8008192 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008184:	f107 0314 	add.w	r3, r7, #20
 8008188:	4618      	mov	r0, r3
 800818a:	f001 fcaf 	bl	8009aec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800818e:	2301      	movs	r3, #1
 8008190:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008192:	f002 fecf 	bl	800af34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008196:	f001 f9d5 	bl	8009544 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800819a:	f002 fe97 	bl	800aecc <vPortEnterCritical>
 800819e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081a4:	b25b      	sxtb	r3, r3
 80081a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081aa:	d103      	bne.n	80081b4 <xQueueGenericSend+0x17c>
 80081ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ae:	2200      	movs	r2, #0
 80081b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081ba:	b25b      	sxtb	r3, r3
 80081bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081c0:	d103      	bne.n	80081ca <xQueueGenericSend+0x192>
 80081c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c4:	2200      	movs	r2, #0
 80081c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081ca:	f002 feb3 	bl	800af34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80081ce:	1d3a      	adds	r2, r7, #4
 80081d0:	f107 0314 	add.w	r3, r7, #20
 80081d4:	4611      	mov	r1, r2
 80081d6:	4618      	mov	r0, r3
 80081d8:	f001 fc9e 	bl	8009b18 <xTaskCheckForTimeOut>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d124      	bne.n	800822c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80081e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081e4:	f000 faac 	bl	8008740 <prvIsQueueFull>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d018      	beq.n	8008220 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80081ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f0:	3310      	adds	r3, #16
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	4611      	mov	r1, r2
 80081f6:	4618      	mov	r0, r3
 80081f8:	f001 fb96 	bl	8009928 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80081fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081fe:	f000 fa37 	bl	8008670 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008202:	f001 f9ad 	bl	8009560 <xTaskResumeAll>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	f47f af7c 	bne.w	8008106 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800820e:	4b0c      	ldr	r3, [pc, #48]	; (8008240 <xQueueGenericSend+0x208>)
 8008210:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008214:	601a      	str	r2, [r3, #0]
 8008216:	f3bf 8f4f 	dsb	sy
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	e772      	b.n	8008106 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008220:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008222:	f000 fa25 	bl	8008670 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008226:	f001 f99b 	bl	8009560 <xTaskResumeAll>
 800822a:	e76c      	b.n	8008106 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800822c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800822e:	f000 fa1f 	bl	8008670 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008232:	f001 f995 	bl	8009560 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008236:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008238:	4618      	mov	r0, r3
 800823a:	3738      	adds	r7, #56	; 0x38
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}
 8008240:	e000ed04 	.word	0xe000ed04

08008244 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b08e      	sub	sp, #56	; 0x38
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	607a      	str	r2, [r7, #4]
 8008250:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008258:	2b00      	cmp	r3, #0
 800825a:	d10c      	bne.n	8008276 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800825c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008260:	b672      	cpsid	i
 8008262:	f383 8811 	msr	BASEPRI, r3
 8008266:	f3bf 8f6f 	isb	sy
 800826a:	f3bf 8f4f 	dsb	sy
 800826e:	b662      	cpsie	i
 8008270:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008272:	bf00      	nop
 8008274:	e7fe      	b.n	8008274 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d103      	bne.n	8008284 <xQueueGenericSendFromISR+0x40>
 800827c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008280:	2b00      	cmp	r3, #0
 8008282:	d101      	bne.n	8008288 <xQueueGenericSendFromISR+0x44>
 8008284:	2301      	movs	r3, #1
 8008286:	e000      	b.n	800828a <xQueueGenericSendFromISR+0x46>
 8008288:	2300      	movs	r3, #0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d10c      	bne.n	80082a8 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800828e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008292:	b672      	cpsid	i
 8008294:	f383 8811 	msr	BASEPRI, r3
 8008298:	f3bf 8f6f 	isb	sy
 800829c:	f3bf 8f4f 	dsb	sy
 80082a0:	b662      	cpsie	i
 80082a2:	623b      	str	r3, [r7, #32]
}
 80082a4:	bf00      	nop
 80082a6:	e7fe      	b.n	80082a6 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	d103      	bne.n	80082b6 <xQueueGenericSendFromISR+0x72>
 80082ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d101      	bne.n	80082ba <xQueueGenericSendFromISR+0x76>
 80082b6:	2301      	movs	r3, #1
 80082b8:	e000      	b.n	80082bc <xQueueGenericSendFromISR+0x78>
 80082ba:	2300      	movs	r3, #0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d10c      	bne.n	80082da <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80082c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c4:	b672      	cpsid	i
 80082c6:	f383 8811 	msr	BASEPRI, r3
 80082ca:	f3bf 8f6f 	isb	sy
 80082ce:	f3bf 8f4f 	dsb	sy
 80082d2:	b662      	cpsie	i
 80082d4:	61fb      	str	r3, [r7, #28]
}
 80082d6:	bf00      	nop
 80082d8:	e7fe      	b.n	80082d8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80082da:	f002 fedf 	bl	800b09c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80082de:	f3ef 8211 	mrs	r2, BASEPRI
 80082e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e6:	b672      	cpsid	i
 80082e8:	f383 8811 	msr	BASEPRI, r3
 80082ec:	f3bf 8f6f 	isb	sy
 80082f0:	f3bf 8f4f 	dsb	sy
 80082f4:	b662      	cpsie	i
 80082f6:	61ba      	str	r2, [r7, #24]
 80082f8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80082fa:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80082fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80082fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008300:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008306:	429a      	cmp	r2, r3
 8008308:	d302      	bcc.n	8008310 <xQueueGenericSendFromISR+0xcc>
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	2b02      	cmp	r3, #2
 800830e:	d12c      	bne.n	800836a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008312:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008316:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800831a:	683a      	ldr	r2, [r7, #0]
 800831c:	68b9      	ldr	r1, [r7, #8]
 800831e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008320:	f000 f916 	bl	8008550 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008324:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800832c:	d112      	bne.n	8008354 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800832e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008332:	2b00      	cmp	r3, #0
 8008334:	d016      	beq.n	8008364 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008338:	3324      	adds	r3, #36	; 0x24
 800833a:	4618      	mov	r0, r3
 800833c:	f001 fb48 	bl	80099d0 <xTaskRemoveFromEventList>
 8008340:	4603      	mov	r3, r0
 8008342:	2b00      	cmp	r3, #0
 8008344:	d00e      	beq.n	8008364 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00b      	beq.n	8008364 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	601a      	str	r2, [r3, #0]
 8008352:	e007      	b.n	8008364 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008354:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008358:	3301      	adds	r3, #1
 800835a:	b2db      	uxtb	r3, r3
 800835c:	b25a      	sxtb	r2, r3
 800835e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008364:	2301      	movs	r3, #1
 8008366:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008368:	e001      	b.n	800836e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800836a:	2300      	movs	r3, #0
 800836c:	637b      	str	r3, [r7, #52]	; 0x34
 800836e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008370:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008378:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800837a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800837c:	4618      	mov	r0, r3
 800837e:	3738      	adds	r7, #56	; 0x38
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b08c      	sub	sp, #48	; 0x30
 8008388:	af00      	add	r7, sp, #0
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008390:	2300      	movs	r3, #0
 8008392:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839a:	2b00      	cmp	r3, #0
 800839c:	d10c      	bne.n	80083b8 <xQueueReceive+0x34>
	__asm volatile
 800839e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a2:	b672      	cpsid	i
 80083a4:	f383 8811 	msr	BASEPRI, r3
 80083a8:	f3bf 8f6f 	isb	sy
 80083ac:	f3bf 8f4f 	dsb	sy
 80083b0:	b662      	cpsie	i
 80083b2:	623b      	str	r3, [r7, #32]
}
 80083b4:	bf00      	nop
 80083b6:	e7fe      	b.n	80083b6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d103      	bne.n	80083c6 <xQueueReceive+0x42>
 80083be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d101      	bne.n	80083ca <xQueueReceive+0x46>
 80083c6:	2301      	movs	r3, #1
 80083c8:	e000      	b.n	80083cc <xQueueReceive+0x48>
 80083ca:	2300      	movs	r3, #0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10c      	bne.n	80083ea <xQueueReceive+0x66>
	__asm volatile
 80083d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d4:	b672      	cpsid	i
 80083d6:	f383 8811 	msr	BASEPRI, r3
 80083da:	f3bf 8f6f 	isb	sy
 80083de:	f3bf 8f4f 	dsb	sy
 80083e2:	b662      	cpsie	i
 80083e4:	61fb      	str	r3, [r7, #28]
}
 80083e6:	bf00      	nop
 80083e8:	e7fe      	b.n	80083e8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80083ea:	f001 fd2b 	bl	8009e44 <xTaskGetSchedulerState>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d102      	bne.n	80083fa <xQueueReceive+0x76>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d101      	bne.n	80083fe <xQueueReceive+0x7a>
 80083fa:	2301      	movs	r3, #1
 80083fc:	e000      	b.n	8008400 <xQueueReceive+0x7c>
 80083fe:	2300      	movs	r3, #0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d10c      	bne.n	800841e <xQueueReceive+0x9a>
	__asm volatile
 8008404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008408:	b672      	cpsid	i
 800840a:	f383 8811 	msr	BASEPRI, r3
 800840e:	f3bf 8f6f 	isb	sy
 8008412:	f3bf 8f4f 	dsb	sy
 8008416:	b662      	cpsie	i
 8008418:	61bb      	str	r3, [r7, #24]
}
 800841a:	bf00      	nop
 800841c:	e7fe      	b.n	800841c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800841e:	f002 fd55 	bl	800aecc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008426:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842a:	2b00      	cmp	r3, #0
 800842c:	d01f      	beq.n	800846e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800842e:	68b9      	ldr	r1, [r7, #8]
 8008430:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008432:	f000 f8f7 	bl	8008624 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008438:	1e5a      	subs	r2, r3, #1
 800843a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800843e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008440:	691b      	ldr	r3, [r3, #16]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00f      	beq.n	8008466 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008448:	3310      	adds	r3, #16
 800844a:	4618      	mov	r0, r3
 800844c:	f001 fac0 	bl	80099d0 <xTaskRemoveFromEventList>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d007      	beq.n	8008466 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008456:	4b3d      	ldr	r3, [pc, #244]	; (800854c <xQueueReceive+0x1c8>)
 8008458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800845c:	601a      	str	r2, [r3, #0]
 800845e:	f3bf 8f4f 	dsb	sy
 8008462:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008466:	f002 fd65 	bl	800af34 <vPortExitCritical>
				return pdPASS;
 800846a:	2301      	movs	r3, #1
 800846c:	e069      	b.n	8008542 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d103      	bne.n	800847c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008474:	f002 fd5e 	bl	800af34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008478:	2300      	movs	r3, #0
 800847a:	e062      	b.n	8008542 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800847c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800847e:	2b00      	cmp	r3, #0
 8008480:	d106      	bne.n	8008490 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008482:	f107 0310 	add.w	r3, r7, #16
 8008486:	4618      	mov	r0, r3
 8008488:	f001 fb30 	bl	8009aec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800848c:	2301      	movs	r3, #1
 800848e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008490:	f002 fd50 	bl	800af34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008494:	f001 f856 	bl	8009544 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008498:	f002 fd18 	bl	800aecc <vPortEnterCritical>
 800849c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084a2:	b25b      	sxtb	r3, r3
 80084a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084a8:	d103      	bne.n	80084b2 <xQueueReceive+0x12e>
 80084aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ac:	2200      	movs	r2, #0
 80084ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084b8:	b25b      	sxtb	r3, r3
 80084ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084be:	d103      	bne.n	80084c8 <xQueueReceive+0x144>
 80084c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c2:	2200      	movs	r2, #0
 80084c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084c8:	f002 fd34 	bl	800af34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084cc:	1d3a      	adds	r2, r7, #4
 80084ce:	f107 0310 	add.w	r3, r7, #16
 80084d2:	4611      	mov	r1, r2
 80084d4:	4618      	mov	r0, r3
 80084d6:	f001 fb1f 	bl	8009b18 <xTaskCheckForTimeOut>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d123      	bne.n	8008528 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084e2:	f000 f917 	bl	8008714 <prvIsQueueEmpty>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d017      	beq.n	800851c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80084ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ee:	3324      	adds	r3, #36	; 0x24
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	4611      	mov	r1, r2
 80084f4:	4618      	mov	r0, r3
 80084f6:	f001 fa17 	bl	8009928 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80084fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084fc:	f000 f8b8 	bl	8008670 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008500:	f001 f82e 	bl	8009560 <xTaskResumeAll>
 8008504:	4603      	mov	r3, r0
 8008506:	2b00      	cmp	r3, #0
 8008508:	d189      	bne.n	800841e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800850a:	4b10      	ldr	r3, [pc, #64]	; (800854c <xQueueReceive+0x1c8>)
 800850c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008510:	601a      	str	r2, [r3, #0]
 8008512:	f3bf 8f4f 	dsb	sy
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	e780      	b.n	800841e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800851c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800851e:	f000 f8a7 	bl	8008670 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008522:	f001 f81d 	bl	8009560 <xTaskResumeAll>
 8008526:	e77a      	b.n	800841e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800852a:	f000 f8a1 	bl	8008670 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800852e:	f001 f817 	bl	8009560 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008534:	f000 f8ee 	bl	8008714 <prvIsQueueEmpty>
 8008538:	4603      	mov	r3, r0
 800853a:	2b00      	cmp	r3, #0
 800853c:	f43f af6f 	beq.w	800841e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008540:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008542:	4618      	mov	r0, r3
 8008544:	3730      	adds	r7, #48	; 0x30
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	e000ed04 	.word	0xe000ed04

08008550 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b086      	sub	sp, #24
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800855c:	2300      	movs	r3, #0
 800855e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008564:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856a:	2b00      	cmp	r3, #0
 800856c:	d10d      	bne.n	800858a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d14d      	bne.n	8008612 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	4618      	mov	r0, r3
 800857c:	f001 fc80 	bl	8009e80 <xTaskPriorityDisinherit>
 8008580:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2200      	movs	r2, #0
 8008586:	609a      	str	r2, [r3, #8]
 8008588:	e043      	b.n	8008612 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d119      	bne.n	80085c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6858      	ldr	r0, [r3, #4]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008598:	461a      	mov	r2, r3
 800859a:	68b9      	ldr	r1, [r7, #8]
 800859c:	f003 f82a 	bl	800b5f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	685a      	ldr	r2, [r3, #4]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a8:	441a      	add	r2, r3
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	685a      	ldr	r2, [r3, #4]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d32b      	bcc.n	8008612 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	605a      	str	r2, [r3, #4]
 80085c2:	e026      	b.n	8008612 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	68d8      	ldr	r0, [r3, #12]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085cc:	461a      	mov	r2, r3
 80085ce:	68b9      	ldr	r1, [r7, #8]
 80085d0:	f003 f810 	bl	800b5f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	68da      	ldr	r2, [r3, #12]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085dc:	425b      	negs	r3, r3
 80085de:	441a      	add	r2, r3
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	68da      	ldr	r2, [r3, #12]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d207      	bcs.n	8008600 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	689a      	ldr	r2, [r3, #8]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f8:	425b      	negs	r3, r3
 80085fa:	441a      	add	r2, r3
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2b02      	cmp	r3, #2
 8008604:	d105      	bne.n	8008612 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d002      	beq.n	8008612 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	3b01      	subs	r3, #1
 8008610:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	1c5a      	adds	r2, r3, #1
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800861a:	697b      	ldr	r3, [r7, #20]
}
 800861c:	4618      	mov	r0, r3
 800861e:	3718      	adds	r7, #24
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008632:	2b00      	cmp	r3, #0
 8008634:	d018      	beq.n	8008668 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	68da      	ldr	r2, [r3, #12]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863e:	441a      	add	r2, r3
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	68da      	ldr	r2, [r3, #12]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	429a      	cmp	r2, r3
 800864e:	d303      	bcc.n	8008658 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	68d9      	ldr	r1, [r3, #12]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008660:	461a      	mov	r2, r3
 8008662:	6838      	ldr	r0, [r7, #0]
 8008664:	f002 ffc6 	bl	800b5f4 <memcpy>
	}
}
 8008668:	bf00      	nop
 800866a:	3708      	adds	r7, #8
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008678:	f002 fc28 	bl	800aecc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008682:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008684:	e011      	b.n	80086aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868a:	2b00      	cmp	r3, #0
 800868c:	d012      	beq.n	80086b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	3324      	adds	r3, #36	; 0x24
 8008692:	4618      	mov	r0, r3
 8008694:	f001 f99c 	bl	80099d0 <xTaskRemoveFromEventList>
 8008698:	4603      	mov	r3, r0
 800869a:	2b00      	cmp	r3, #0
 800869c:	d001      	beq.n	80086a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800869e:	f001 faa1 	bl	8009be4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80086a2:	7bfb      	ldrb	r3, [r7, #15]
 80086a4:	3b01      	subs	r3, #1
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80086aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	dce9      	bgt.n	8008686 <prvUnlockQueue+0x16>
 80086b2:	e000      	b.n	80086b6 <prvUnlockQueue+0x46>
					break;
 80086b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	22ff      	movs	r2, #255	; 0xff
 80086ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80086be:	f002 fc39 	bl	800af34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80086c2:	f002 fc03 	bl	800aecc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80086ce:	e011      	b.n	80086f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	691b      	ldr	r3, [r3, #16]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d012      	beq.n	80086fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	3310      	adds	r3, #16
 80086dc:	4618      	mov	r0, r3
 80086de:	f001 f977 	bl	80099d0 <xTaskRemoveFromEventList>
 80086e2:	4603      	mov	r3, r0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d001      	beq.n	80086ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80086e8:	f001 fa7c 	bl	8009be4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80086ec:	7bbb      	ldrb	r3, [r7, #14]
 80086ee:	3b01      	subs	r3, #1
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80086f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	dce9      	bgt.n	80086d0 <prvUnlockQueue+0x60>
 80086fc:	e000      	b.n	8008700 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80086fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	22ff      	movs	r2, #255	; 0xff
 8008704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008708:	f002 fc14 	bl	800af34 <vPortExitCritical>
}
 800870c:	bf00      	nop
 800870e:	3710      	adds	r7, #16
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800871c:	f002 fbd6 	bl	800aecc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008724:	2b00      	cmp	r3, #0
 8008726:	d102      	bne.n	800872e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008728:	2301      	movs	r3, #1
 800872a:	60fb      	str	r3, [r7, #12]
 800872c:	e001      	b.n	8008732 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800872e:	2300      	movs	r3, #0
 8008730:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008732:	f002 fbff 	bl	800af34 <vPortExitCritical>

	return xReturn;
 8008736:	68fb      	ldr	r3, [r7, #12]
}
 8008738:	4618      	mov	r0, r3
 800873a:	3710      	adds	r7, #16
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008748:	f002 fbc0 	bl	800aecc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008754:	429a      	cmp	r2, r3
 8008756:	d102      	bne.n	800875e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008758:	2301      	movs	r3, #1
 800875a:	60fb      	str	r3, [r7, #12]
 800875c:	e001      	b.n	8008762 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800875e:	2300      	movs	r3, #0
 8008760:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008762:	f002 fbe7 	bl	800af34 <vPortExitCritical>

	return xReturn;
 8008766:	68fb      	ldr	r3, [r7, #12]
}
 8008768:	4618      	mov	r0, r3
 800876a:	3710      	adds	r7, #16
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008770:	b480      	push	{r7}
 8008772:	b085      	sub	sp, #20
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800877a:	2300      	movs	r3, #0
 800877c:	60fb      	str	r3, [r7, #12]
 800877e:	e014      	b.n	80087aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008780:	4a0f      	ldr	r2, [pc, #60]	; (80087c0 <vQueueAddToRegistry+0x50>)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d10b      	bne.n	80087a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800878c:	490c      	ldr	r1, [pc, #48]	; (80087c0 <vQueueAddToRegistry+0x50>)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	683a      	ldr	r2, [r7, #0]
 8008792:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008796:	4a0a      	ldr	r2, [pc, #40]	; (80087c0 <vQueueAddToRegistry+0x50>)
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	00db      	lsls	r3, r3, #3
 800879c:	4413      	add	r3, r2
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80087a2:	e006      	b.n	80087b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	3301      	adds	r3, #1
 80087a8:	60fb      	str	r3, [r7, #12]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2b07      	cmp	r3, #7
 80087ae:	d9e7      	bls.n	8008780 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80087b0:	bf00      	nop
 80087b2:	bf00      	nop
 80087b4:	3714      	adds	r7, #20
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr
 80087be:	bf00      	nop
 80087c0:	20001c68 	.word	0x20001c68

080087c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b086      	sub	sp, #24
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80087d4:	f002 fb7a 	bl	800aecc <vPortEnterCritical>
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087de:	b25b      	sxtb	r3, r3
 80087e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087e4:	d103      	bne.n	80087ee <vQueueWaitForMessageRestricted+0x2a>
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087f4:	b25b      	sxtb	r3, r3
 80087f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087fa:	d103      	bne.n	8008804 <vQueueWaitForMessageRestricted+0x40>
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	2200      	movs	r2, #0
 8008800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008804:	f002 fb96 	bl	800af34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800880c:	2b00      	cmp	r3, #0
 800880e:	d106      	bne.n	800881e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	3324      	adds	r3, #36	; 0x24
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	68b9      	ldr	r1, [r7, #8]
 8008818:	4618      	mov	r0, r3
 800881a:	f001 f8ab 	bl	8009974 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800881e:	6978      	ldr	r0, [r7, #20]
 8008820:	f7ff ff26 	bl	8008670 <prvUnlockQueue>
	}
 8008824:	bf00      	nop
 8008826:	3718      	adds	r7, #24
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 800882c:	b580      	push	{r7, lr}
 800882e:	b08c      	sub	sp, #48	; 0x30
 8008830:	af02      	add	r7, sp, #8
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2b01      	cmp	r3, #1
 800883c:	d112      	bne.n	8008864 <xStreamBufferGenericCreate+0x38>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 800883e:	2301      	movs	r3, #1
 8008840:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2b04      	cmp	r3, #4
 8008848:	d81f      	bhi.n	800888a <xStreamBufferGenericCreate+0x5e>
	__asm volatile
 800884a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884e:	b672      	cpsid	i
 8008850:	f383 8811 	msr	BASEPRI, r3
 8008854:	f3bf 8f6f 	isb	sy
 8008858:	f3bf 8f4f 	dsb	sy
 800885c:	b662      	cpsie	i
 800885e:	61fb      	str	r3, [r7, #28]
}
 8008860:	bf00      	nop
 8008862:	e7fe      	b.n	8008862 <xStreamBufferGenericCreate+0x36>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 8008864:	2300      	movs	r3, #0
 8008866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d10c      	bne.n	800888a <xStreamBufferGenericCreate+0x5e>
	__asm volatile
 8008870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008874:	b672      	cpsid	i
 8008876:	f383 8811 	msr	BASEPRI, r3
 800887a:	f3bf 8f6f 	isb	sy
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	b662      	cpsie	i
 8008884:	61bb      	str	r3, [r7, #24]
}
 8008886:	bf00      	nop
 8008888:	e7fe      	b.n	8008888 <xStreamBufferGenericCreate+0x5c>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 800888a:	68ba      	ldr	r2, [r7, #8]
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	429a      	cmp	r2, r3
 8008890:	d90c      	bls.n	80088ac <xStreamBufferGenericCreate+0x80>
	__asm volatile
 8008892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008896:	b672      	cpsid	i
 8008898:	f383 8811 	msr	BASEPRI, r3
 800889c:	f3bf 8f6f 	isb	sy
 80088a0:	f3bf 8f4f 	dsb	sy
 80088a4:	b662      	cpsie	i
 80088a6:	617b      	str	r3, [r7, #20]
}
 80088a8:	bf00      	nop
 80088aa:	e7fe      	b.n	80088aa <xStreamBufferGenericCreate+0x7e>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d101      	bne.n	80088b6 <xStreamBufferGenericCreate+0x8a>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 80088b2:	2301      	movs	r3, #1
 80088b4:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	3301      	adds	r3, #1
 80088ba:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	3324      	adds	r3, #36	; 0x24
 80088c0:	4618      	mov	r0, r3
 80088c2:	f002 fc2f 	bl	800b124 <pvPortMalloc>
 80088c6:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 80088c8:	6a3b      	ldr	r3, [r7, #32]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00a      	beq.n	80088e4 <xStreamBufferGenericCreate+0xb8>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 80088ce:	6a3b      	ldr	r3, [r7, #32]
 80088d0:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80088d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088d8:	9300      	str	r3, [sp, #0]
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	68fa      	ldr	r2, [r7, #12]
 80088de:	6a38      	ldr	r0, [r7, #32]
 80088e0:	f000 fb90 	bl	8009004 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 80088e4:	6a3b      	ldr	r3, [r7, #32]
	}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3728      	adds	r7, #40	; 0x28
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 80088ee:	b480      	push	{r7}
 80088f0:	b087      	sub	sp, #28
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d10c      	bne.n	800891a <xStreamBufferSpacesAvailable+0x2c>
	__asm volatile
 8008900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008904:	b672      	cpsid	i
 8008906:	f383 8811 	msr	BASEPRI, r3
 800890a:	f3bf 8f6f 	isb	sy
 800890e:	f3bf 8f4f 	dsb	sy
 8008912:	b662      	cpsie	i
 8008914:	60fb      	str	r3, [r7, #12]
}
 8008916:	bf00      	nop
 8008918:	e7fe      	b.n	8008918 <xStreamBufferSpacesAvailable+0x2a>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	689a      	ldr	r2, [r3, #8]
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4413      	add	r3, r2
 8008924:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	697a      	ldr	r2, [r7, #20]
 800892c:	1ad3      	subs	r3, r2, r3
 800892e:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	3b01      	subs	r3, #1
 8008934:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	697a      	ldr	r2, [r7, #20]
 800893c:	429a      	cmp	r2, r3
 800893e:	d304      	bcc.n	800894a <xStreamBufferSpacesAvailable+0x5c>
	{
		xSpace -= pxStreamBuffer->xLength;
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	697a      	ldr	r2, [r7, #20]
 8008946:	1ad3      	subs	r3, r2, r3
 8008948:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 800894a:	697b      	ldr	r3, [r7, #20]
}
 800894c:	4618      	mov	r0, r3
 800894e:	371c      	adds	r7, #28
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr

08008958 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b090      	sub	sp, #64	; 0x40
 800895c:	af02      	add	r7, sp, #8
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	607a      	str	r2, [r7, #4]
 8008964:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 800896a:	2300      	movs	r3, #0
 800896c:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d10c      	bne.n	8008992 <xStreamBufferSend+0x3a>
	__asm volatile
 8008978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800897c:	b672      	cpsid	i
 800897e:	f383 8811 	msr	BASEPRI, r3
 8008982:	f3bf 8f6f 	isb	sy
 8008986:	f3bf 8f4f 	dsb	sy
 800898a:	b662      	cpsie	i
 800898c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800898e:	bf00      	nop
 8008990:	e7fe      	b.n	8008990 <xStreamBufferSend+0x38>
	configASSERT( pxStreamBuffer );
 8008992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008994:	2b00      	cmp	r3, #0
 8008996:	d10c      	bne.n	80089b2 <xStreamBufferSend+0x5a>
	__asm volatile
 8008998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899c:	b672      	cpsid	i
 800899e:	f383 8811 	msr	BASEPRI, r3
 80089a2:	f3bf 8f6f 	isb	sy
 80089a6:	f3bf 8f4f 	dsb	sy
 80089aa:	b662      	cpsie	i
 80089ac:	623b      	str	r3, [r7, #32]
}
 80089ae:	bf00      	nop
 80089b0:	e7fe      	b.n	80089b0 <xStreamBufferSend+0x58>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80089b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b4:	7f1b      	ldrb	r3, [r3, #28]
 80089b6:	f003 0301 	and.w	r3, r3, #1
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d013      	beq.n	80089e6 <xStreamBufferSend+0x8e>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80089be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c0:	3304      	adds	r3, #4
 80089c2:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 80089c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d80c      	bhi.n	80089e6 <xStreamBufferSend+0x8e>
	__asm volatile
 80089cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d0:	b672      	cpsid	i
 80089d2:	f383 8811 	msr	BASEPRI, r3
 80089d6:	f3bf 8f6f 	isb	sy
 80089da:	f3bf 8f4f 	dsb	sy
 80089de:	b662      	cpsie	i
 80089e0:	61fb      	str	r3, [r7, #28]
}
 80089e2:	bf00      	nop
 80089e4:	e7fe      	b.n	80089e4 <xStreamBufferSend+0x8c>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d040      	beq.n	8008a6e <xStreamBufferSend+0x116>
	{
		vTaskSetTimeOutState( &xTimeOut );
 80089ec:	f107 0310 	add.w	r3, r7, #16
 80089f0:	4618      	mov	r0, r3
 80089f2:	f001 f853 	bl	8009a9c <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 80089f6:	f002 fa69 	bl	800aecc <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 80089fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089fc:	f7ff ff77 	bl	80088ee <xStreamBufferSpacesAvailable>
 8008a00:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 8008a02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d219      	bcs.n	8008a3e <xStreamBufferSend+0xe6>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 8008a0a:	2000      	movs	r0, #0
 8008a0c:	f001 fcba 	bl	800a384 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8008a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a12:	695b      	ldr	r3, [r3, #20]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d00c      	beq.n	8008a32 <xStreamBufferSend+0xda>
	__asm volatile
 8008a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a1c:	b672      	cpsid	i
 8008a1e:	f383 8811 	msr	BASEPRI, r3
 8008a22:	f3bf 8f6f 	isb	sy
 8008a26:	f3bf 8f4f 	dsb	sy
 8008a2a:	b662      	cpsie	i
 8008a2c:	61bb      	str	r3, [r7, #24]
}
 8008a2e:	bf00      	nop
 8008a30:	e7fe      	b.n	8008a30 <xStreamBufferSend+0xd8>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8008a32:	f001 f9f7 	bl	8009e24 <xTaskGetCurrentTaskHandle>
 8008a36:	4602      	mov	r2, r0
 8008a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a3a:	615a      	str	r2, [r3, #20]
 8008a3c:	e002      	b.n	8008a44 <xStreamBufferSend+0xec>
				}
				else
				{
					taskEXIT_CRITICAL();
 8008a3e:	f002 fa79 	bl	800af34 <vPortExitCritical>
					break;
 8008a42:	e014      	b.n	8008a6e <xStreamBufferSend+0x116>
				}
			}
			taskEXIT_CRITICAL();
 8008a44:	f002 fa76 	bl	800af34 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	2100      	movs	r1, #0
 8008a4e:	2000      	movs	r0, #0
 8008a50:	f001 fa88 	bl	8009f64 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 8008a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a56:	2200      	movs	r2, #0
 8008a58:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8008a5a:	463a      	mov	r2, r7
 8008a5c:	f107 0310 	add.w	r3, r7, #16
 8008a60:	4611      	mov	r1, r2
 8008a62:	4618      	mov	r0, r3
 8008a64:	f001 f858 	bl	8009b18 <xTaskCheckForTimeOut>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d0c3      	beq.n	80089f6 <xStreamBufferSend+0x9e>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 8008a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d103      	bne.n	8008a7c <xStreamBufferSend+0x124>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8008a74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008a76:	f7ff ff3a 	bl	80088ee <xStreamBufferSpacesAvailable>
 8008a7a:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8008a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a7e:	9300      	str	r3, [sp, #0]
 8008a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	68b9      	ldr	r1, [r7, #8]
 8008a86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008a88:	f000 f89a 	bl	8008bc0 <prvWriteMessageToBuffer>
 8008a8c:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 8008a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d019      	beq.n	8008ac8 <xStreamBufferSend+0x170>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8008a94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008a96:	f000 fa95 	bl	8008fc4 <prvBytesInBuffer>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a9e:	68db      	ldr	r3, [r3, #12]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d311      	bcc.n	8008ac8 <xStreamBufferSend+0x170>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 8008aa4:	f000 fd4e 	bl	8009544 <vTaskSuspendAll>
 8008aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d009      	beq.n	8008ac4 <xStreamBufferSend+0x16c>
 8008ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab2:	6918      	ldr	r0, [r3, #16]
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	2100      	movs	r1, #0
 8008aba:	f001 fab3 	bl	800a024 <xTaskGenericNotify>
 8008abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	611a      	str	r2, [r3, #16]
 8008ac4:	f000 fd4c 	bl	8009560 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 8008ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3738      	adds	r7, #56	; 0x38
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}

08008ad2 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008ad2:	b580      	push	{r7, lr}
 8008ad4:	b090      	sub	sp, #64	; 0x40
 8008ad6:	af02      	add	r7, sp, #8
 8008ad8:	60f8      	str	r0, [r7, #12]
 8008ada:	60b9      	str	r1, [r7, #8]
 8008adc:	607a      	str	r2, [r7, #4]
 8008ade:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	633b      	str	r3, [r7, #48]	; 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	637b      	str	r3, [r7, #52]	; 0x34

	configASSERT( pvTxData );
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d10c      	bne.n	8008b08 <xStreamBufferSendFromISR+0x36>
	__asm volatile
 8008aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af2:	b672      	cpsid	i
 8008af4:	f383 8811 	msr	BASEPRI, r3
 8008af8:	f3bf 8f6f 	isb	sy
 8008afc:	f3bf 8f4f 	dsb	sy
 8008b00:	b662      	cpsie	i
 8008b02:	623b      	str	r3, [r7, #32]
}
 8008b04:	bf00      	nop
 8008b06:	e7fe      	b.n	8008b06 <xStreamBufferSendFromISR+0x34>
	configASSERT( pxStreamBuffer );
 8008b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d10c      	bne.n	8008b28 <xStreamBufferSendFromISR+0x56>
	__asm volatile
 8008b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b12:	b672      	cpsid	i
 8008b14:	f383 8811 	msr	BASEPRI, r3
 8008b18:	f3bf 8f6f 	isb	sy
 8008b1c:	f3bf 8f4f 	dsb	sy
 8008b20:	b662      	cpsie	i
 8008b22:	61fb      	str	r3, [r7, #28]
}
 8008b24:	bf00      	nop
 8008b26:	e7fe      	b.n	8008b26 <xStreamBufferSendFromISR+0x54>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8008b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b2a:	7f1b      	ldrb	r3, [r3, #28]
 8008b2c:	f003 0301 	and.w	r3, r3, #1
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d002      	beq.n	8008b3a <xStreamBufferSendFromISR+0x68>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8008b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b36:	3304      	adds	r3, #4
 8008b38:	637b      	str	r3, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8008b3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b3c:	f7ff fed7 	bl	80088ee <xStreamBufferSpacesAvailable>
 8008b40:	62f8      	str	r0, [r7, #44]	; 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8008b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b44:	9300      	str	r3, [sp, #0]
 8008b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	68b9      	ldr	r1, [r7, #8]
 8008b4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b4e:	f000 f837 	bl	8008bc0 <prvWriteMessageToBuffer>
 8008b52:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 8008b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d02d      	beq.n	8008bb6 <xStreamBufferSendFromISR+0xe4>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8008b5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b5c:	f000 fa32 	bl	8008fc4 <prvBytesInBuffer>
 8008b60:	4602      	mov	r2, r0
 8008b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d325      	bcc.n	8008bb6 <xStreamBufferSendFromISR+0xe4>
	__asm volatile
 8008b6a:	f3ef 8211 	mrs	r2, BASEPRI
 8008b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b72:	b672      	cpsid	i
 8008b74:	f383 8811 	msr	BASEPRI, r3
 8008b78:	f3bf 8f6f 	isb	sy
 8008b7c:	f3bf 8f4f 	dsb	sy
 8008b80:	b662      	cpsie	i
 8008b82:	61ba      	str	r2, [r7, #24]
 8008b84:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008b86:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 8008b88:	627b      	str	r3, [r7, #36]	; 0x24
 8008b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8c:	691b      	ldr	r3, [r3, #16]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d00b      	beq.n	8008baa <xStreamBufferSendFromISR+0xd8>
 8008b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b94:	6918      	ldr	r0, [r3, #16]
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	9300      	str	r3, [sp, #0]
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	2100      	movs	r1, #0
 8008ba0:	f001 fb04 	bl	800a1ac <xTaskGenericNotifyFromISR>
 8008ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	611a      	str	r2, [r3, #16]
 8008baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bac:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	f383 8811 	msr	BASEPRI, r3
}
 8008bb4:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 8008bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3738      	adds	r7, #56	; 0x38
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b086      	sub	sp, #24
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	60b9      	str	r1, [r7, #8]
 8008bca:	607a      	str	r2, [r7, #4]
 8008bcc:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d102      	bne.n	8008bda <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	617b      	str	r3, [r7, #20]
 8008bd8:	e01d      	b.n	8008c16 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	7f1b      	ldrb	r3, [r3, #28]
 8008bde:	f003 0301 	and.w	r3, r3, #1
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d108      	bne.n	8008bf8 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8008be6:	2301      	movs	r3, #1
 8008be8:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	bf28      	it	cs
 8008bf2:	4613      	movcs	r3, r2
 8008bf4:	607b      	str	r3, [r7, #4]
 8008bf6:	e00e      	b.n	8008c16 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8008bf8:	683a      	ldr	r2, [r7, #0]
 8008bfa:	6a3b      	ldr	r3, [r7, #32]
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d308      	bcc.n	8008c12 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8008c00:	2301      	movs	r3, #1
 8008c02:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8008c04:	1d3b      	adds	r3, r7, #4
 8008c06:	2204      	movs	r2, #4
 8008c08:	4619      	mov	r1, r3
 8008c0a:	68f8      	ldr	r0, [r7, #12]
 8008c0c:	f000 f8e2 	bl	8008dd4 <prvWriteBytesToBuffer>
 8008c10:	e001      	b.n	8008c16 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8008c12:	2300      	movs	r3, #0
 8008c14:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d007      	beq.n	8008c2c <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	461a      	mov	r2, r3
 8008c20:	68b9      	ldr	r1, [r7, #8]
 8008c22:	68f8      	ldr	r0, [r7, #12]
 8008c24:	f000 f8d6 	bl	8008dd4 <prvWriteBytesToBuffer>
 8008c28:	6138      	str	r0, [r7, #16]
 8008c2a:	e001      	b.n	8008c30 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8008c30:	693b      	ldr	r3, [r7, #16]
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3718      	adds	r7, #24
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8008c3a:	b580      	push	{r7, lr}
 8008c3c:	b08e      	sub	sp, #56	; 0x38
 8008c3e:	af02      	add	r7, sp, #8
 8008c40:	60f8      	str	r0, [r7, #12]
 8008c42:	60b9      	str	r1, [r7, #8]
 8008c44:	607a      	str	r2, [r7, #4]
 8008c46:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d10c      	bne.n	8008c70 <xStreamBufferReceive+0x36>
	__asm volatile
 8008c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c5a:	b672      	cpsid	i
 8008c5c:	f383 8811 	msr	BASEPRI, r3
 8008c60:	f3bf 8f6f 	isb	sy
 8008c64:	f3bf 8f4f 	dsb	sy
 8008c68:	b662      	cpsie	i
 8008c6a:	61fb      	str	r3, [r7, #28]
}
 8008c6c:	bf00      	nop
 8008c6e:	e7fe      	b.n	8008c6e <xStreamBufferReceive+0x34>
	configASSERT( pxStreamBuffer );
 8008c70:	6a3b      	ldr	r3, [r7, #32]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d10c      	bne.n	8008c90 <xStreamBufferReceive+0x56>
	__asm volatile
 8008c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7a:	b672      	cpsid	i
 8008c7c:	f383 8811 	msr	BASEPRI, r3
 8008c80:	f3bf 8f6f 	isb	sy
 8008c84:	f3bf 8f4f 	dsb	sy
 8008c88:	b662      	cpsie	i
 8008c8a:	61bb      	str	r3, [r7, #24]
}
 8008c8c:	bf00      	nop
 8008c8e:	e7fe      	b.n	8008c8e <xStreamBufferReceive+0x54>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8008c90:	6a3b      	ldr	r3, [r7, #32]
 8008c92:	7f1b      	ldrb	r3, [r3, #28]
 8008c94:	f003 0301 	and.w	r3, r3, #1
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d002      	beq.n	8008ca2 <xStreamBufferReceive+0x68>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8008c9c:	2304      	movs	r3, #4
 8008c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8008ca0:	e001      	b.n	8008ca6 <xStreamBufferReceive+0x6c>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d036      	beq.n	8008d1a <xStreamBufferReceive+0xe0>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8008cac:	f002 f90e 	bl	800aecc <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8008cb0:	6a38      	ldr	r0, [r7, #32]
 8008cb2:	f000 f987 	bl	8008fc4 <prvBytesInBuffer>
 8008cb6:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8008cb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d818      	bhi.n	8008cf2 <xStreamBufferReceive+0xb8>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8008cc0:	2000      	movs	r0, #0
 8008cc2:	f001 fb5f 	bl	800a384 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8008cc6:	6a3b      	ldr	r3, [r7, #32]
 8008cc8:	691b      	ldr	r3, [r3, #16]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d00c      	beq.n	8008ce8 <xStreamBufferReceive+0xae>
	__asm volatile
 8008cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd2:	b672      	cpsid	i
 8008cd4:	f383 8811 	msr	BASEPRI, r3
 8008cd8:	f3bf 8f6f 	isb	sy
 8008cdc:	f3bf 8f4f 	dsb	sy
 8008ce0:	b662      	cpsie	i
 8008ce2:	617b      	str	r3, [r7, #20]
}
 8008ce4:	bf00      	nop
 8008ce6:	e7fe      	b.n	8008ce6 <xStreamBufferReceive+0xac>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8008ce8:	f001 f89c 	bl	8009e24 <xTaskGetCurrentTaskHandle>
 8008cec:	4602      	mov	r2, r0
 8008cee:	6a3b      	ldr	r3, [r7, #32]
 8008cf0:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008cf2:	f002 f91f 	bl	800af34 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8008cf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d811      	bhi.n	8008d22 <xStreamBufferReceive+0xe8>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	2200      	movs	r2, #0
 8008d02:	2100      	movs	r1, #0
 8008d04:	2000      	movs	r0, #0
 8008d06:	f001 f92d 	bl	8009f64 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8008d0a:	6a3b      	ldr	r3, [r7, #32]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8008d10:	6a38      	ldr	r0, [r7, #32]
 8008d12:	f000 f957 	bl	8008fc4 <prvBytesInBuffer>
 8008d16:	62b8      	str	r0, [r7, #40]	; 0x28
 8008d18:	e003      	b.n	8008d22 <xStreamBufferReceive+0xe8>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8008d1a:	6a38      	ldr	r0, [r7, #32]
 8008d1c:	f000 f952 	bl	8008fc4 <prvBytesInBuffer>
 8008d20:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8008d22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d91d      	bls.n	8008d66 <xStreamBufferReceive+0x12c>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8008d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2c:	9300      	str	r3, [sp, #0]
 8008d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	68b9      	ldr	r1, [r7, #8]
 8008d34:	6a38      	ldr	r0, [r7, #32]
 8008d36:	f000 f81b 	bl	8008d70 <prvReadMessageFromBuffer>
 8008d3a:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8008d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d011      	beq.n	8008d66 <xStreamBufferReceive+0x12c>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8008d42:	f000 fbff 	bl	8009544 <vTaskSuspendAll>
 8008d46:	6a3b      	ldr	r3, [r7, #32]
 8008d48:	695b      	ldr	r3, [r3, #20]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d009      	beq.n	8008d62 <xStreamBufferReceive+0x128>
 8008d4e:	6a3b      	ldr	r3, [r7, #32]
 8008d50:	6958      	ldr	r0, [r3, #20]
 8008d52:	2300      	movs	r3, #0
 8008d54:	2200      	movs	r2, #0
 8008d56:	2100      	movs	r1, #0
 8008d58:	f001 f964 	bl	800a024 <xTaskGenericNotify>
 8008d5c:	6a3b      	ldr	r3, [r7, #32]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	615a      	str	r2, [r3, #20]
 8008d62:	f000 fbfd 	bl	8009560 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8008d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3730      	adds	r7, #48	; 0x30
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b088      	sub	sp, #32
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	607a      	str	r2, [r7, #4]
 8008d7c:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8008d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d019      	beq.n	8008db8 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8008d8a:	f107 0110 	add.w	r1, r7, #16
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d92:	68f8      	ldr	r0, [r7, #12]
 8008d94:	f000 f896 	bl	8008ec4 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 8008d9c:	683a      	ldr	r2, [r7, #0]
 8008d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da0:	1ad3      	subs	r3, r2, r3
 8008da2:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8008da4:	69fa      	ldr	r2, [r7, #28]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d907      	bls.n	8008dbc <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	69ba      	ldr	r2, [r7, #24]
 8008db0:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8008db2:	2300      	movs	r3, #0
 8008db4:	61fb      	str	r3, [r7, #28]
 8008db6:	e001      	b.n	8008dbc <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	69fa      	ldr	r2, [r7, #28]
 8008dc0:	68b9      	ldr	r1, [r7, #8]
 8008dc2:	68f8      	ldr	r0, [r7, #12]
 8008dc4:	f000 f87e 	bl	8008ec4 <prvReadBytesFromBuffer>
 8008dc8:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8008dca:	697b      	ldr	r3, [r7, #20]
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3720      	adds	r7, #32
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b08a      	sub	sp, #40	; 0x28
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d10c      	bne.n	8008e00 <prvWriteBytesToBuffer+0x2c>
	__asm volatile
 8008de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dea:	b672      	cpsid	i
 8008dec:	f383 8811 	msr	BASEPRI, r3
 8008df0:	f3bf 8f6f 	isb	sy
 8008df4:	f3bf 8f4f 	dsb	sy
 8008df8:	b662      	cpsie	i
 8008dfa:	61fb      	str	r3, [r7, #28]
}
 8008dfc:	bf00      	nop
 8008dfe:	e7fe      	b.n	8008dfe <prvWriteBytesToBuffer+0x2a>

	xNextHead = pxStreamBuffer->xHead;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	689a      	ldr	r2, [r3, #8]
 8008e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0c:	1ad3      	subs	r3, r2, r3
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	4293      	cmp	r3, r2
 8008e12:	bf28      	it	cs
 8008e14:	4613      	movcs	r3, r2
 8008e16:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8008e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e1a:	6a3b      	ldr	r3, [r7, #32]
 8008e1c:	441a      	add	r2, r3
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	689b      	ldr	r3, [r3, #8]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d90c      	bls.n	8008e40 <prvWriteBytesToBuffer+0x6c>
	__asm volatile
 8008e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e2a:	b672      	cpsid	i
 8008e2c:	f383 8811 	msr	BASEPRI, r3
 8008e30:	f3bf 8f6f 	isb	sy
 8008e34:	f3bf 8f4f 	dsb	sy
 8008e38:	b662      	cpsie	i
 8008e3a:	61bb      	str	r3, [r7, #24]
}
 8008e3c:	bf00      	nop
 8008e3e:	e7fe      	b.n	8008e3e <prvWriteBytesToBuffer+0x6a>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	699a      	ldr	r2, [r3, #24]
 8008e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e46:	4413      	add	r3, r2
 8008e48:	6a3a      	ldr	r2, [r7, #32]
 8008e4a:	68b9      	ldr	r1, [r7, #8]
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f002 fbd1 	bl	800b5f4 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	6a3b      	ldr	r3, [r7, #32]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d91e      	bls.n	8008e98 <prvWriteBytesToBuffer+0xc4>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	6a3b      	ldr	r3, [r7, #32]
 8008e5e:	1ad2      	subs	r2, r2, r3
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d90c      	bls.n	8008e82 <prvWriteBytesToBuffer+0xae>
	__asm volatile
 8008e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6c:	b672      	cpsid	i
 8008e6e:	f383 8811 	msr	BASEPRI, r3
 8008e72:	f3bf 8f6f 	isb	sy
 8008e76:	f3bf 8f4f 	dsb	sy
 8008e7a:	b662      	cpsie	i
 8008e7c:	617b      	str	r3, [r7, #20]
}
 8008e7e:	bf00      	nop
 8008e80:	e7fe      	b.n	8008e80 <prvWriteBytesToBuffer+0xac>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	6998      	ldr	r0, [r3, #24]
 8008e86:	68ba      	ldr	r2, [r7, #8]
 8008e88:	6a3b      	ldr	r3, [r7, #32]
 8008e8a:	18d1      	adds	r1, r2, r3
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	6a3b      	ldr	r3, [r7, #32]
 8008e90:	1ad3      	subs	r3, r2, r3
 8008e92:	461a      	mov	r2, r3
 8008e94:	f002 fbae 	bl	800b5f4 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8008e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	689b      	ldr	r3, [r3, #8]
 8008ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d304      	bcc.n	8008eb4 <prvWriteBytesToBuffer+0xe0>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eb0:	1ad3      	subs	r3, r2, r3
 8008eb2:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eb8:	605a      	str	r2, [r3, #4]

	return xCount;
 8008eba:	687b      	ldr	r3, [r7, #4]
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3728      	adds	r7, #40	; 0x28
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b08a      	sub	sp, #40	; 0x28
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	60f8      	str	r0, [r7, #12]
 8008ecc:	60b9      	str	r1, [r7, #8]
 8008ece:	607a      	str	r2, [r7, #4]
 8008ed0:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8008ed2:	687a      	ldr	r2, [r7, #4]
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	bf28      	it	cs
 8008eda:	4613      	movcs	r3, r2
 8008edc:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8008ede:	6a3b      	ldr	r3, [r7, #32]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d06a      	beq.n	8008fba <prvReadBytesFromBuffer+0xf6>
	{
		xNextTail = pxStreamBuffer->xTail;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	689a      	ldr	r2, [r3, #8]
 8008eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef0:	1ad3      	subs	r3, r2, r3
 8008ef2:	6a3a      	ldr	r2, [r7, #32]
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	bf28      	it	cs
 8008ef8:	4613      	movcs	r3, r2
 8008efa:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 8008efc:	69fa      	ldr	r2, [r7, #28]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d90c      	bls.n	8008f1e <prvReadBytesFromBuffer+0x5a>
	__asm volatile
 8008f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f08:	b672      	cpsid	i
 8008f0a:	f383 8811 	msr	BASEPRI, r3
 8008f0e:	f3bf 8f6f 	isb	sy
 8008f12:	f3bf 8f4f 	dsb	sy
 8008f16:	b662      	cpsie	i
 8008f18:	61bb      	str	r3, [r7, #24]
}
 8008f1a:	bf00      	nop
 8008f1c:	e7fe      	b.n	8008f1c <prvReadBytesFromBuffer+0x58>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8008f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	441a      	add	r2, r3
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d90c      	bls.n	8008f46 <prvReadBytesFromBuffer+0x82>
	__asm volatile
 8008f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f30:	b672      	cpsid	i
 8008f32:	f383 8811 	msr	BASEPRI, r3
 8008f36:	f3bf 8f6f 	isb	sy
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	b662      	cpsie	i
 8008f40:	617b      	str	r3, [r7, #20]
}
 8008f42:	bf00      	nop
 8008f44:	e7fe      	b.n	8008f44 <prvReadBytesFromBuffer+0x80>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	699a      	ldr	r2, [r3, #24]
 8008f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4c:	4413      	add	r3, r2
 8008f4e:	69fa      	ldr	r2, [r7, #28]
 8008f50:	4619      	mov	r1, r3
 8008f52:	68b8      	ldr	r0, [r7, #8]
 8008f54:	f002 fb4e 	bl	800b5f4 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 8008f58:	6a3a      	ldr	r2, [r7, #32]
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d91b      	bls.n	8008f98 <prvReadBytesFromBuffer+0xd4>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8008f60:	6a3a      	ldr	r2, [r7, #32]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d90c      	bls.n	8008f82 <prvReadBytesFromBuffer+0xbe>
	__asm volatile
 8008f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6c:	b672      	cpsid	i
 8008f6e:	f383 8811 	msr	BASEPRI, r3
 8008f72:	f3bf 8f6f 	isb	sy
 8008f76:	f3bf 8f4f 	dsb	sy
 8008f7a:	b662      	cpsie	i
 8008f7c:	613b      	str	r3, [r7, #16]
}
 8008f7e:	bf00      	nop
 8008f80:	e7fe      	b.n	8008f80 <prvReadBytesFromBuffer+0xbc>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8008f82:	68ba      	ldr	r2, [r7, #8]
 8008f84:	69fb      	ldr	r3, [r7, #28]
 8008f86:	18d0      	adds	r0, r2, r3
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6999      	ldr	r1, [r3, #24]
 8008f8c:	6a3a      	ldr	r2, [r7, #32]
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	1ad3      	subs	r3, r2, r3
 8008f92:	461a      	mov	r2, r3
 8008f94:	f002 fb2e 	bl	800b5f4 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 8008f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f9a:	6a3b      	ldr	r3, [r7, #32]
 8008f9c:	4413      	add	r3, r2
 8008f9e:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d304      	bcc.n	8008fb4 <prvReadBytesFromBuffer+0xf0>
		{
			xNextTail -= pxStreamBuffer->xLength;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	689b      	ldr	r3, [r3, #8]
 8008fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fb0:	1ad3      	subs	r3, r2, r3
 8008fb2:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fb8:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8008fba:	6a3b      	ldr	r3, [r7, #32]
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3728      	adds	r7, #40	; 0x28
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b085      	sub	sp, #20
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	689a      	ldr	r2, [r3, #8]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	68fa      	ldr	r2, [r7, #12]
 8008fde:	1ad3      	subs	r3, r2, r3
 8008fe0:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	68fa      	ldr	r2, [r7, #12]
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d304      	bcc.n	8008ff6 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	68fa      	ldr	r2, [r7, #12]
 8008ff2:	1ad3      	subs	r3, r2, r3
 8008ff4:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3714      	adds	r7, #20
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b086      	sub	sp, #24
 8009008:	af00      	add	r7, sp, #0
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	60b9      	str	r1, [r7, #8]
 800900e:	607a      	str	r2, [r7, #4]
 8009010:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8009012:	2355      	movs	r3, #85	; 0x55
 8009014:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	6979      	ldr	r1, [r7, #20]
 800901a:	68b8      	ldr	r0, [r7, #8]
 800901c:	f002 fa66 	bl	800b4ec <memset>
 8009020:	4602      	mov	r2, r0
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	4293      	cmp	r3, r2
 8009026:	d00c      	beq.n	8009042 <prvInitialiseNewStreamBuffer+0x3e>
	__asm volatile
 8009028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800902c:	b672      	cpsid	i
 800902e:	f383 8811 	msr	BASEPRI, r3
 8009032:	f3bf 8f6f 	isb	sy
 8009036:	f3bf 8f4f 	dsb	sy
 800903a:	b662      	cpsie	i
 800903c:	613b      	str	r3, [r7, #16]
}
 800903e:	bf00      	nop
 8009040:	e7fe      	b.n	8009040 <prvInitialiseNewStreamBuffer+0x3c>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8009042:	2224      	movs	r2, #36	; 0x24
 8009044:	2100      	movs	r1, #0
 8009046:	68f8      	ldr	r0, [r7, #12]
 8009048:	f002 fa50 	bl	800b4ec <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	68ba      	ldr	r2, [r7, #8]
 8009050:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	683a      	ldr	r2, [r7, #0]
 800905c:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009064:	771a      	strb	r2, [r3, #28]
}
 8009066:	bf00      	nop
 8009068:	3718      	adds	r7, #24
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800906e:	b580      	push	{r7, lr}
 8009070:	b08e      	sub	sp, #56	; 0x38
 8009072:	af04      	add	r7, sp, #16
 8009074:	60f8      	str	r0, [r7, #12]
 8009076:	60b9      	str	r1, [r7, #8]
 8009078:	607a      	str	r2, [r7, #4]
 800907a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800907c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800907e:	2b00      	cmp	r3, #0
 8009080:	d10c      	bne.n	800909c <xTaskCreateStatic+0x2e>
	__asm volatile
 8009082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009086:	b672      	cpsid	i
 8009088:	f383 8811 	msr	BASEPRI, r3
 800908c:	f3bf 8f6f 	isb	sy
 8009090:	f3bf 8f4f 	dsb	sy
 8009094:	b662      	cpsie	i
 8009096:	623b      	str	r3, [r7, #32]
}
 8009098:	bf00      	nop
 800909a:	e7fe      	b.n	800909a <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800909c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d10c      	bne.n	80090bc <xTaskCreateStatic+0x4e>
	__asm volatile
 80090a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a6:	b672      	cpsid	i
 80090a8:	f383 8811 	msr	BASEPRI, r3
 80090ac:	f3bf 8f6f 	isb	sy
 80090b0:	f3bf 8f4f 	dsb	sy
 80090b4:	b662      	cpsie	i
 80090b6:	61fb      	str	r3, [r7, #28]
}
 80090b8:	bf00      	nop
 80090ba:	e7fe      	b.n	80090ba <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80090bc:	23a8      	movs	r3, #168	; 0xa8
 80090be:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	2ba8      	cmp	r3, #168	; 0xa8
 80090c4:	d00c      	beq.n	80090e0 <xTaskCreateStatic+0x72>
	__asm volatile
 80090c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ca:	b672      	cpsid	i
 80090cc:	f383 8811 	msr	BASEPRI, r3
 80090d0:	f3bf 8f6f 	isb	sy
 80090d4:	f3bf 8f4f 	dsb	sy
 80090d8:	b662      	cpsie	i
 80090da:	61bb      	str	r3, [r7, #24]
}
 80090dc:	bf00      	nop
 80090de:	e7fe      	b.n	80090de <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80090e0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80090e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d01e      	beq.n	8009126 <xTaskCreateStatic+0xb8>
 80090e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d01b      	beq.n	8009126 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80090ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80090f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090f6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80090f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fa:	2202      	movs	r2, #2
 80090fc:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009100:	2300      	movs	r3, #0
 8009102:	9303      	str	r3, [sp, #12]
 8009104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009106:	9302      	str	r3, [sp, #8]
 8009108:	f107 0314 	add.w	r3, r7, #20
 800910c:	9301      	str	r3, [sp, #4]
 800910e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009110:	9300      	str	r3, [sp, #0]
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	68b9      	ldr	r1, [r7, #8]
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f000 f851 	bl	80091c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800911e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009120:	f000 f8f6 	bl	8009310 <prvAddNewTaskToReadyList>
 8009124:	e001      	b.n	800912a <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8009126:	2300      	movs	r3, #0
 8009128:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800912a:	697b      	ldr	r3, [r7, #20]
	}
 800912c:	4618      	mov	r0, r3
 800912e:	3728      	adds	r7, #40	; 0x28
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009134:	b580      	push	{r7, lr}
 8009136:	b08c      	sub	sp, #48	; 0x30
 8009138:	af04      	add	r7, sp, #16
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	60b9      	str	r1, [r7, #8]
 800913e:	603b      	str	r3, [r7, #0]
 8009140:	4613      	mov	r3, r2
 8009142:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009144:	88fb      	ldrh	r3, [r7, #6]
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	4618      	mov	r0, r3
 800914a:	f001 ffeb 	bl	800b124 <pvPortMalloc>
 800914e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d00e      	beq.n	8009174 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009156:	20a8      	movs	r0, #168	; 0xa8
 8009158:	f001 ffe4 	bl	800b124 <pvPortMalloc>
 800915c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800915e:	69fb      	ldr	r3, [r7, #28]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d003      	beq.n	800916c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009164:	69fb      	ldr	r3, [r7, #28]
 8009166:	697a      	ldr	r2, [r7, #20]
 8009168:	631a      	str	r2, [r3, #48]	; 0x30
 800916a:	e005      	b.n	8009178 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800916c:	6978      	ldr	r0, [r7, #20]
 800916e:	f002 f8a3 	bl	800b2b8 <vPortFree>
 8009172:	e001      	b.n	8009178 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009174:	2300      	movs	r3, #0
 8009176:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009178:	69fb      	ldr	r3, [r7, #28]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d017      	beq.n	80091ae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	2200      	movs	r2, #0
 8009182:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009186:	88fa      	ldrh	r2, [r7, #6]
 8009188:	2300      	movs	r3, #0
 800918a:	9303      	str	r3, [sp, #12]
 800918c:	69fb      	ldr	r3, [r7, #28]
 800918e:	9302      	str	r3, [sp, #8]
 8009190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009192:	9301      	str	r3, [sp, #4]
 8009194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009196:	9300      	str	r3, [sp, #0]
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	68b9      	ldr	r1, [r7, #8]
 800919c:	68f8      	ldr	r0, [r7, #12]
 800919e:	f000 f80f 	bl	80091c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80091a2:	69f8      	ldr	r0, [r7, #28]
 80091a4:	f000 f8b4 	bl	8009310 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80091a8:	2301      	movs	r3, #1
 80091aa:	61bb      	str	r3, [r7, #24]
 80091ac:	e002      	b.n	80091b4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80091ae:	f04f 33ff 	mov.w	r3, #4294967295
 80091b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80091b4:	69bb      	ldr	r3, [r7, #24]
	}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3720      	adds	r7, #32
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
	...

080091c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b088      	sub	sp, #32
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	607a      	str	r2, [r7, #4]
 80091cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80091ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	461a      	mov	r2, r3
 80091d8:	21a5      	movs	r1, #165	; 0xa5
 80091da:	f002 f987 	bl	800b4ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80091de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091e2:	6879      	ldr	r1, [r7, #4]
 80091e4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80091e8:	440b      	add	r3, r1
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	4413      	add	r3, r2
 80091ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80091f0:	69bb      	ldr	r3, [r7, #24]
 80091f2:	f023 0307 	bic.w	r3, r3, #7
 80091f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80091f8:	69bb      	ldr	r3, [r7, #24]
 80091fa:	f003 0307 	and.w	r3, r3, #7
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d00c      	beq.n	800921c <prvInitialiseNewTask+0x5c>
	__asm volatile
 8009202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009206:	b672      	cpsid	i
 8009208:	f383 8811 	msr	BASEPRI, r3
 800920c:	f3bf 8f6f 	isb	sy
 8009210:	f3bf 8f4f 	dsb	sy
 8009214:	b662      	cpsie	i
 8009216:	617b      	str	r3, [r7, #20]
}
 8009218:	bf00      	nop
 800921a:	e7fe      	b.n	800921a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d01f      	beq.n	8009262 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009222:	2300      	movs	r3, #0
 8009224:	61fb      	str	r3, [r7, #28]
 8009226:	e012      	b.n	800924e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009228:	68ba      	ldr	r2, [r7, #8]
 800922a:	69fb      	ldr	r3, [r7, #28]
 800922c:	4413      	add	r3, r2
 800922e:	7819      	ldrb	r1, [r3, #0]
 8009230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	4413      	add	r3, r2
 8009236:	3334      	adds	r3, #52	; 0x34
 8009238:	460a      	mov	r2, r1
 800923a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800923c:	68ba      	ldr	r2, [r7, #8]
 800923e:	69fb      	ldr	r3, [r7, #28]
 8009240:	4413      	add	r3, r2
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d006      	beq.n	8009256 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009248:	69fb      	ldr	r3, [r7, #28]
 800924a:	3301      	adds	r3, #1
 800924c:	61fb      	str	r3, [r7, #28]
 800924e:	69fb      	ldr	r3, [r7, #28]
 8009250:	2b0f      	cmp	r3, #15
 8009252:	d9e9      	bls.n	8009228 <prvInitialiseNewTask+0x68>
 8009254:	e000      	b.n	8009258 <prvInitialiseNewTask+0x98>
			{
				break;
 8009256:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800925a:	2200      	movs	r2, #0
 800925c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009260:	e003      	b.n	800926a <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009264:	2200      	movs	r2, #0
 8009266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800926a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800926c:	2b37      	cmp	r3, #55	; 0x37
 800926e:	d901      	bls.n	8009274 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009270:	2337      	movs	r3, #55	; 0x37
 8009272:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009276:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009278:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800927a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800927e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009282:	2200      	movs	r2, #0
 8009284:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009288:	3304      	adds	r3, #4
 800928a:	4618      	mov	r0, r3
 800928c:	f7fe fd30 	bl	8007cf0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009292:	3318      	adds	r3, #24
 8009294:	4618      	mov	r0, r3
 8009296:	f7fe fd2b 	bl	8007cf0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800929a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800929e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80092a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80092aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80092b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b2:	2200      	movs	r2, #0
 80092b4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80092b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ba:	2200      	movs	r2, #0
 80092bc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80092c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c2:	3354      	adds	r3, #84	; 0x54
 80092c4:	224c      	movs	r2, #76	; 0x4c
 80092c6:	2100      	movs	r1, #0
 80092c8:	4618      	mov	r0, r3
 80092ca:	f002 f90f 	bl	800b4ec <memset>
 80092ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d0:	4a0c      	ldr	r2, [pc, #48]	; (8009304 <prvInitialiseNewTask+0x144>)
 80092d2:	659a      	str	r2, [r3, #88]	; 0x58
 80092d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d6:	4a0c      	ldr	r2, [pc, #48]	; (8009308 <prvInitialiseNewTask+0x148>)
 80092d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80092da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092dc:	4a0b      	ldr	r2, [pc, #44]	; (800930c <prvInitialiseNewTask+0x14c>)
 80092de:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80092e0:	683a      	ldr	r2, [r7, #0]
 80092e2:	68f9      	ldr	r1, [r7, #12]
 80092e4:	69b8      	ldr	r0, [r7, #24]
 80092e6:	f001 fce5 	bl	800acb4 <pxPortInitialiseStack>
 80092ea:	4602      	mov	r2, r0
 80092ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80092f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d002      	beq.n	80092fc <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80092f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092fc:	bf00      	nop
 80092fe:	3720      	adds	r7, #32
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}
 8009304:	20005ef4 	.word	0x20005ef4
 8009308:	20005f5c 	.word	0x20005f5c
 800930c:	20005fc4 	.word	0x20005fc4

08009310 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b082      	sub	sp, #8
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009318:	f001 fdd8 	bl	800aecc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800931c:	4b2d      	ldr	r3, [pc, #180]	; (80093d4 <prvAddNewTaskToReadyList+0xc4>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	3301      	adds	r3, #1
 8009322:	4a2c      	ldr	r2, [pc, #176]	; (80093d4 <prvAddNewTaskToReadyList+0xc4>)
 8009324:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009326:	4b2c      	ldr	r3, [pc, #176]	; (80093d8 <prvAddNewTaskToReadyList+0xc8>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d109      	bne.n	8009342 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800932e:	4a2a      	ldr	r2, [pc, #168]	; (80093d8 <prvAddNewTaskToReadyList+0xc8>)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009334:	4b27      	ldr	r3, [pc, #156]	; (80093d4 <prvAddNewTaskToReadyList+0xc4>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	2b01      	cmp	r3, #1
 800933a:	d110      	bne.n	800935e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800933c:	f000 fc76 	bl	8009c2c <prvInitialiseTaskLists>
 8009340:	e00d      	b.n	800935e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009342:	4b26      	ldr	r3, [pc, #152]	; (80093dc <prvAddNewTaskToReadyList+0xcc>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d109      	bne.n	800935e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800934a:	4b23      	ldr	r3, [pc, #140]	; (80093d8 <prvAddNewTaskToReadyList+0xc8>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009354:	429a      	cmp	r2, r3
 8009356:	d802      	bhi.n	800935e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009358:	4a1f      	ldr	r2, [pc, #124]	; (80093d8 <prvAddNewTaskToReadyList+0xc8>)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800935e:	4b20      	ldr	r3, [pc, #128]	; (80093e0 <prvAddNewTaskToReadyList+0xd0>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	3301      	adds	r3, #1
 8009364:	4a1e      	ldr	r2, [pc, #120]	; (80093e0 <prvAddNewTaskToReadyList+0xd0>)
 8009366:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009368:	4b1d      	ldr	r3, [pc, #116]	; (80093e0 <prvAddNewTaskToReadyList+0xd0>)
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009374:	4b1b      	ldr	r3, [pc, #108]	; (80093e4 <prvAddNewTaskToReadyList+0xd4>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	429a      	cmp	r2, r3
 800937a:	d903      	bls.n	8009384 <prvAddNewTaskToReadyList+0x74>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009380:	4a18      	ldr	r2, [pc, #96]	; (80093e4 <prvAddNewTaskToReadyList+0xd4>)
 8009382:	6013      	str	r3, [r2, #0]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009388:	4613      	mov	r3, r2
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	4413      	add	r3, r2
 800938e:	009b      	lsls	r3, r3, #2
 8009390:	4a15      	ldr	r2, [pc, #84]	; (80093e8 <prvAddNewTaskToReadyList+0xd8>)
 8009392:	441a      	add	r2, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	3304      	adds	r3, #4
 8009398:	4619      	mov	r1, r3
 800939a:	4610      	mov	r0, r2
 800939c:	f7fe fcb5 	bl	8007d0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80093a0:	f001 fdc8 	bl	800af34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80093a4:	4b0d      	ldr	r3, [pc, #52]	; (80093dc <prvAddNewTaskToReadyList+0xcc>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d00e      	beq.n	80093ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80093ac:	4b0a      	ldr	r3, [pc, #40]	; (80093d8 <prvAddNewTaskToReadyList+0xc8>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d207      	bcs.n	80093ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80093ba:	4b0c      	ldr	r3, [pc, #48]	; (80093ec <prvAddNewTaskToReadyList+0xdc>)
 80093bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093c0:	601a      	str	r2, [r3, #0]
 80093c2:	f3bf 8f4f 	dsb	sy
 80093c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093ca:	bf00      	nop
 80093cc:	3708      	adds	r7, #8
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	bf00      	nop
 80093d4:	2000217c 	.word	0x2000217c
 80093d8:	20001ca8 	.word	0x20001ca8
 80093dc:	20002188 	.word	0x20002188
 80093e0:	20002198 	.word	0x20002198
 80093e4:	20002184 	.word	0x20002184
 80093e8:	20001cac 	.word	0x20001cac
 80093ec:	e000ed04 	.word	0xe000ed04

080093f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80093f8:	2300      	movs	r3, #0
 80093fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d019      	beq.n	8009436 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009402:	4b14      	ldr	r3, [pc, #80]	; (8009454 <vTaskDelay+0x64>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d00c      	beq.n	8009424 <vTaskDelay+0x34>
	__asm volatile
 800940a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800940e:	b672      	cpsid	i
 8009410:	f383 8811 	msr	BASEPRI, r3
 8009414:	f3bf 8f6f 	isb	sy
 8009418:	f3bf 8f4f 	dsb	sy
 800941c:	b662      	cpsie	i
 800941e:	60bb      	str	r3, [r7, #8]
}
 8009420:	bf00      	nop
 8009422:	e7fe      	b.n	8009422 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8009424:	f000 f88e 	bl	8009544 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009428:	2100      	movs	r1, #0
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 ffd0 	bl	800a3d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009430:	f000 f896 	bl	8009560 <xTaskResumeAll>
 8009434:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d107      	bne.n	800944c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800943c:	4b06      	ldr	r3, [pc, #24]	; (8009458 <vTaskDelay+0x68>)
 800943e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009442:	601a      	str	r2, [r3, #0]
 8009444:	f3bf 8f4f 	dsb	sy
 8009448:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800944c:	bf00      	nop
 800944e:	3710      	adds	r7, #16
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}
 8009454:	200021a4 	.word	0x200021a4
 8009458:	e000ed04 	.word	0xe000ed04

0800945c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b08a      	sub	sp, #40	; 0x28
 8009460:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009462:	2300      	movs	r3, #0
 8009464:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009466:	2300      	movs	r3, #0
 8009468:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800946a:	463a      	mov	r2, r7
 800946c:	1d39      	adds	r1, r7, #4
 800946e:	f107 0308 	add.w	r3, r7, #8
 8009472:	4618      	mov	r0, r3
 8009474:	f7fe fbe8 	bl	8007c48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009478:	6839      	ldr	r1, [r7, #0]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	68ba      	ldr	r2, [r7, #8]
 800947e:	9202      	str	r2, [sp, #8]
 8009480:	9301      	str	r3, [sp, #4]
 8009482:	2300      	movs	r3, #0
 8009484:	9300      	str	r3, [sp, #0]
 8009486:	2300      	movs	r3, #0
 8009488:	460a      	mov	r2, r1
 800948a:	4926      	ldr	r1, [pc, #152]	; (8009524 <vTaskStartScheduler+0xc8>)
 800948c:	4826      	ldr	r0, [pc, #152]	; (8009528 <vTaskStartScheduler+0xcc>)
 800948e:	f7ff fdee 	bl	800906e <xTaskCreateStatic>
 8009492:	4603      	mov	r3, r0
 8009494:	4a25      	ldr	r2, [pc, #148]	; (800952c <vTaskStartScheduler+0xd0>)
 8009496:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009498:	4b24      	ldr	r3, [pc, #144]	; (800952c <vTaskStartScheduler+0xd0>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d002      	beq.n	80094a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80094a0:	2301      	movs	r3, #1
 80094a2:	617b      	str	r3, [r7, #20]
 80094a4:	e001      	b.n	80094aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80094a6:	2300      	movs	r3, #0
 80094a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d102      	bne.n	80094b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80094b0:	f000 ffe2 	bl	800a478 <xTimerCreateTimerTask>
 80094b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d11d      	bne.n	80094f8 <vTaskStartScheduler+0x9c>
	__asm volatile
 80094bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c0:	b672      	cpsid	i
 80094c2:	f383 8811 	msr	BASEPRI, r3
 80094c6:	f3bf 8f6f 	isb	sy
 80094ca:	f3bf 8f4f 	dsb	sy
 80094ce:	b662      	cpsie	i
 80094d0:	613b      	str	r3, [r7, #16]
}
 80094d2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80094d4:	4b16      	ldr	r3, [pc, #88]	; (8009530 <vTaskStartScheduler+0xd4>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	3354      	adds	r3, #84	; 0x54
 80094da:	4a16      	ldr	r2, [pc, #88]	; (8009534 <vTaskStartScheduler+0xd8>)
 80094dc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80094de:	4b16      	ldr	r3, [pc, #88]	; (8009538 <vTaskStartScheduler+0xdc>)
 80094e0:	f04f 32ff 	mov.w	r2, #4294967295
 80094e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80094e6:	4b15      	ldr	r3, [pc, #84]	; (800953c <vTaskStartScheduler+0xe0>)
 80094e8:	2201      	movs	r2, #1
 80094ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80094ec:	4b14      	ldr	r3, [pc, #80]	; (8009540 <vTaskStartScheduler+0xe4>)
 80094ee:	2200      	movs	r2, #0
 80094f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80094f2:	f001 fc6d 	bl	800add0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80094f6:	e010      	b.n	800951a <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094fe:	d10c      	bne.n	800951a <vTaskStartScheduler+0xbe>
	__asm volatile
 8009500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009504:	b672      	cpsid	i
 8009506:	f383 8811 	msr	BASEPRI, r3
 800950a:	f3bf 8f6f 	isb	sy
 800950e:	f3bf 8f4f 	dsb	sy
 8009512:	b662      	cpsie	i
 8009514:	60fb      	str	r3, [r7, #12]
}
 8009516:	bf00      	nop
 8009518:	e7fe      	b.n	8009518 <vTaskStartScheduler+0xbc>
}
 800951a:	bf00      	nop
 800951c:	3718      	adds	r7, #24
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	0800b7a0 	.word	0x0800b7a0
 8009528:	08009bfd 	.word	0x08009bfd
 800952c:	200021a0 	.word	0x200021a0
 8009530:	20001ca8 	.word	0x20001ca8
 8009534:	20000060 	.word	0x20000060
 8009538:	2000219c 	.word	0x2000219c
 800953c:	20002188 	.word	0x20002188
 8009540:	20002180 	.word	0x20002180

08009544 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009544:	b480      	push	{r7}
 8009546:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009548:	4b04      	ldr	r3, [pc, #16]	; (800955c <vTaskSuspendAll+0x18>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	3301      	adds	r3, #1
 800954e:	4a03      	ldr	r2, [pc, #12]	; (800955c <vTaskSuspendAll+0x18>)
 8009550:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009552:	bf00      	nop
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr
 800955c:	200021a4 	.word	0x200021a4

08009560 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b084      	sub	sp, #16
 8009564:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009566:	2300      	movs	r3, #0
 8009568:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800956a:	2300      	movs	r3, #0
 800956c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800956e:	4b43      	ldr	r3, [pc, #268]	; (800967c <xTaskResumeAll+0x11c>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d10c      	bne.n	8009590 <xTaskResumeAll+0x30>
	__asm volatile
 8009576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800957a:	b672      	cpsid	i
 800957c:	f383 8811 	msr	BASEPRI, r3
 8009580:	f3bf 8f6f 	isb	sy
 8009584:	f3bf 8f4f 	dsb	sy
 8009588:	b662      	cpsie	i
 800958a:	603b      	str	r3, [r7, #0]
}
 800958c:	bf00      	nop
 800958e:	e7fe      	b.n	800958e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009590:	f001 fc9c 	bl	800aecc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009594:	4b39      	ldr	r3, [pc, #228]	; (800967c <xTaskResumeAll+0x11c>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	3b01      	subs	r3, #1
 800959a:	4a38      	ldr	r2, [pc, #224]	; (800967c <xTaskResumeAll+0x11c>)
 800959c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800959e:	4b37      	ldr	r3, [pc, #220]	; (800967c <xTaskResumeAll+0x11c>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d162      	bne.n	800966c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80095a6:	4b36      	ldr	r3, [pc, #216]	; (8009680 <xTaskResumeAll+0x120>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d05e      	beq.n	800966c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80095ae:	e02f      	b.n	8009610 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095b0:	4b34      	ldr	r3, [pc, #208]	; (8009684 <xTaskResumeAll+0x124>)
 80095b2:	68db      	ldr	r3, [r3, #12]
 80095b4:	68db      	ldr	r3, [r3, #12]
 80095b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	3318      	adds	r3, #24
 80095bc:	4618      	mov	r0, r3
 80095be:	f7fe fc01 	bl	8007dc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	3304      	adds	r3, #4
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7fe fbfc 	bl	8007dc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095d0:	4b2d      	ldr	r3, [pc, #180]	; (8009688 <xTaskResumeAll+0x128>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d903      	bls.n	80095e0 <xTaskResumeAll+0x80>
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095dc:	4a2a      	ldr	r2, [pc, #168]	; (8009688 <xTaskResumeAll+0x128>)
 80095de:	6013      	str	r3, [r2, #0]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095e4:	4613      	mov	r3, r2
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	4413      	add	r3, r2
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	4a27      	ldr	r2, [pc, #156]	; (800968c <xTaskResumeAll+0x12c>)
 80095ee:	441a      	add	r2, r3
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	3304      	adds	r3, #4
 80095f4:	4619      	mov	r1, r3
 80095f6:	4610      	mov	r0, r2
 80095f8:	f7fe fb87 	bl	8007d0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009600:	4b23      	ldr	r3, [pc, #140]	; (8009690 <xTaskResumeAll+0x130>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009606:	429a      	cmp	r2, r3
 8009608:	d302      	bcc.n	8009610 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800960a:	4b22      	ldr	r3, [pc, #136]	; (8009694 <xTaskResumeAll+0x134>)
 800960c:	2201      	movs	r2, #1
 800960e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009610:	4b1c      	ldr	r3, [pc, #112]	; (8009684 <xTaskResumeAll+0x124>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d1cb      	bne.n	80095b0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d001      	beq.n	8009622 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800961e:	f000 fbe1 	bl	8009de4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009622:	4b1d      	ldr	r3, [pc, #116]	; (8009698 <xTaskResumeAll+0x138>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d010      	beq.n	8009650 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800962e:	f000 f859 	bl	80096e4 <xTaskIncrementTick>
 8009632:	4603      	mov	r3, r0
 8009634:	2b00      	cmp	r3, #0
 8009636:	d002      	beq.n	800963e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8009638:	4b16      	ldr	r3, [pc, #88]	; (8009694 <xTaskResumeAll+0x134>)
 800963a:	2201      	movs	r2, #1
 800963c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	3b01      	subs	r3, #1
 8009642:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d1f1      	bne.n	800962e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800964a:	4b13      	ldr	r3, [pc, #76]	; (8009698 <xTaskResumeAll+0x138>)
 800964c:	2200      	movs	r2, #0
 800964e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009650:	4b10      	ldr	r3, [pc, #64]	; (8009694 <xTaskResumeAll+0x134>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d009      	beq.n	800966c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009658:	2301      	movs	r3, #1
 800965a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800965c:	4b0f      	ldr	r3, [pc, #60]	; (800969c <xTaskResumeAll+0x13c>)
 800965e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009662:	601a      	str	r2, [r3, #0]
 8009664:	f3bf 8f4f 	dsb	sy
 8009668:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800966c:	f001 fc62 	bl	800af34 <vPortExitCritical>

	return xAlreadyYielded;
 8009670:	68bb      	ldr	r3, [r7, #8]
}
 8009672:	4618      	mov	r0, r3
 8009674:	3710      	adds	r7, #16
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
 800967a:	bf00      	nop
 800967c:	200021a4 	.word	0x200021a4
 8009680:	2000217c 	.word	0x2000217c
 8009684:	2000213c 	.word	0x2000213c
 8009688:	20002184 	.word	0x20002184
 800968c:	20001cac 	.word	0x20001cac
 8009690:	20001ca8 	.word	0x20001ca8
 8009694:	20002190 	.word	0x20002190
 8009698:	2000218c 	.word	0x2000218c
 800969c:	e000ed04 	.word	0xe000ed04

080096a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80096a6:	4b05      	ldr	r3, [pc, #20]	; (80096bc <xTaskGetTickCount+0x1c>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80096ac:	687b      	ldr	r3, [r7, #4]
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	370c      	adds	r7, #12
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr
 80096ba:	bf00      	nop
 80096bc:	20002180 	.word	0x20002180

080096c0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80096c6:	f001 fce9 	bl	800b09c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80096ca:	2300      	movs	r3, #0
 80096cc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80096ce:	4b04      	ldr	r3, [pc, #16]	; (80096e0 <xTaskGetTickCountFromISR+0x20>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80096d4:	683b      	ldr	r3, [r7, #0]
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3708      	adds	r7, #8
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
 80096de:	bf00      	nop
 80096e0:	20002180 	.word	0x20002180

080096e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b086      	sub	sp, #24
 80096e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80096ea:	2300      	movs	r3, #0
 80096ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096ee:	4b50      	ldr	r3, [pc, #320]	; (8009830 <xTaskIncrementTick+0x14c>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	f040 808b 	bne.w	800980e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80096f8:	4b4e      	ldr	r3, [pc, #312]	; (8009834 <xTaskIncrementTick+0x150>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	3301      	adds	r3, #1
 80096fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009700:	4a4c      	ldr	r2, [pc, #304]	; (8009834 <xTaskIncrementTick+0x150>)
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d122      	bne.n	8009752 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800970c:	4b4a      	ldr	r3, [pc, #296]	; (8009838 <xTaskIncrementTick+0x154>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d00c      	beq.n	8009730 <xTaskIncrementTick+0x4c>
	__asm volatile
 8009716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971a:	b672      	cpsid	i
 800971c:	f383 8811 	msr	BASEPRI, r3
 8009720:	f3bf 8f6f 	isb	sy
 8009724:	f3bf 8f4f 	dsb	sy
 8009728:	b662      	cpsie	i
 800972a:	603b      	str	r3, [r7, #0]
}
 800972c:	bf00      	nop
 800972e:	e7fe      	b.n	800972e <xTaskIncrementTick+0x4a>
 8009730:	4b41      	ldr	r3, [pc, #260]	; (8009838 <xTaskIncrementTick+0x154>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	60fb      	str	r3, [r7, #12]
 8009736:	4b41      	ldr	r3, [pc, #260]	; (800983c <xTaskIncrementTick+0x158>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4a3f      	ldr	r2, [pc, #252]	; (8009838 <xTaskIncrementTick+0x154>)
 800973c:	6013      	str	r3, [r2, #0]
 800973e:	4a3f      	ldr	r2, [pc, #252]	; (800983c <xTaskIncrementTick+0x158>)
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6013      	str	r3, [r2, #0]
 8009744:	4b3e      	ldr	r3, [pc, #248]	; (8009840 <xTaskIncrementTick+0x15c>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	3301      	adds	r3, #1
 800974a:	4a3d      	ldr	r2, [pc, #244]	; (8009840 <xTaskIncrementTick+0x15c>)
 800974c:	6013      	str	r3, [r2, #0]
 800974e:	f000 fb49 	bl	8009de4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009752:	4b3c      	ldr	r3, [pc, #240]	; (8009844 <xTaskIncrementTick+0x160>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	693a      	ldr	r2, [r7, #16]
 8009758:	429a      	cmp	r2, r3
 800975a:	d349      	bcc.n	80097f0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800975c:	4b36      	ldr	r3, [pc, #216]	; (8009838 <xTaskIncrementTick+0x154>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d104      	bne.n	8009770 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009766:	4b37      	ldr	r3, [pc, #220]	; (8009844 <xTaskIncrementTick+0x160>)
 8009768:	f04f 32ff 	mov.w	r2, #4294967295
 800976c:	601a      	str	r2, [r3, #0]
					break;
 800976e:	e03f      	b.n	80097f0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009770:	4b31      	ldr	r3, [pc, #196]	; (8009838 <xTaskIncrementTick+0x154>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	68db      	ldr	r3, [r3, #12]
 8009776:	68db      	ldr	r3, [r3, #12]
 8009778:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009780:	693a      	ldr	r2, [r7, #16]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	429a      	cmp	r2, r3
 8009786:	d203      	bcs.n	8009790 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009788:	4a2e      	ldr	r2, [pc, #184]	; (8009844 <xTaskIncrementTick+0x160>)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800978e:	e02f      	b.n	80097f0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	3304      	adds	r3, #4
 8009794:	4618      	mov	r0, r3
 8009796:	f7fe fb15 	bl	8007dc4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d004      	beq.n	80097ac <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	3318      	adds	r3, #24
 80097a6:	4618      	mov	r0, r3
 80097a8:	f7fe fb0c 	bl	8007dc4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097b0:	4b25      	ldr	r3, [pc, #148]	; (8009848 <xTaskIncrementTick+0x164>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d903      	bls.n	80097c0 <xTaskIncrementTick+0xdc>
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097bc:	4a22      	ldr	r2, [pc, #136]	; (8009848 <xTaskIncrementTick+0x164>)
 80097be:	6013      	str	r3, [r2, #0]
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097c4:	4613      	mov	r3, r2
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	4413      	add	r3, r2
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	4a1f      	ldr	r2, [pc, #124]	; (800984c <xTaskIncrementTick+0x168>)
 80097ce:	441a      	add	r2, r3
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	3304      	adds	r3, #4
 80097d4:	4619      	mov	r1, r3
 80097d6:	4610      	mov	r0, r2
 80097d8:	f7fe fa97 	bl	8007d0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097e0:	4b1b      	ldr	r3, [pc, #108]	; (8009850 <xTaskIncrementTick+0x16c>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d3b8      	bcc.n	800975c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80097ea:	2301      	movs	r3, #1
 80097ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097ee:	e7b5      	b.n	800975c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80097f0:	4b17      	ldr	r3, [pc, #92]	; (8009850 <xTaskIncrementTick+0x16c>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097f6:	4915      	ldr	r1, [pc, #84]	; (800984c <xTaskIncrementTick+0x168>)
 80097f8:	4613      	mov	r3, r2
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	4413      	add	r3, r2
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	440b      	add	r3, r1
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2b01      	cmp	r3, #1
 8009806:	d907      	bls.n	8009818 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8009808:	2301      	movs	r3, #1
 800980a:	617b      	str	r3, [r7, #20]
 800980c:	e004      	b.n	8009818 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800980e:	4b11      	ldr	r3, [pc, #68]	; (8009854 <xTaskIncrementTick+0x170>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	3301      	adds	r3, #1
 8009814:	4a0f      	ldr	r2, [pc, #60]	; (8009854 <xTaskIncrementTick+0x170>)
 8009816:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009818:	4b0f      	ldr	r3, [pc, #60]	; (8009858 <xTaskIncrementTick+0x174>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d001      	beq.n	8009824 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8009820:	2301      	movs	r3, #1
 8009822:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009824:	697b      	ldr	r3, [r7, #20]
}
 8009826:	4618      	mov	r0, r3
 8009828:	3718      	adds	r7, #24
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
 800982e:	bf00      	nop
 8009830:	200021a4 	.word	0x200021a4
 8009834:	20002180 	.word	0x20002180
 8009838:	20002134 	.word	0x20002134
 800983c:	20002138 	.word	0x20002138
 8009840:	20002194 	.word	0x20002194
 8009844:	2000219c 	.word	0x2000219c
 8009848:	20002184 	.word	0x20002184
 800984c:	20001cac 	.word	0x20001cac
 8009850:	20001ca8 	.word	0x20001ca8
 8009854:	2000218c 	.word	0x2000218c
 8009858:	20002190 	.word	0x20002190

0800985c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800985c:	b480      	push	{r7}
 800985e:	b085      	sub	sp, #20
 8009860:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009862:	4b2b      	ldr	r3, [pc, #172]	; (8009910 <vTaskSwitchContext+0xb4>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d003      	beq.n	8009872 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800986a:	4b2a      	ldr	r3, [pc, #168]	; (8009914 <vTaskSwitchContext+0xb8>)
 800986c:	2201      	movs	r2, #1
 800986e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009870:	e048      	b.n	8009904 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8009872:	4b28      	ldr	r3, [pc, #160]	; (8009914 <vTaskSwitchContext+0xb8>)
 8009874:	2200      	movs	r2, #0
 8009876:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009878:	4b27      	ldr	r3, [pc, #156]	; (8009918 <vTaskSwitchContext+0xbc>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	60fb      	str	r3, [r7, #12]
 800987e:	e012      	b.n	80098a6 <vTaskSwitchContext+0x4a>
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d10c      	bne.n	80098a0 <vTaskSwitchContext+0x44>
	__asm volatile
 8009886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988a:	b672      	cpsid	i
 800988c:	f383 8811 	msr	BASEPRI, r3
 8009890:	f3bf 8f6f 	isb	sy
 8009894:	f3bf 8f4f 	dsb	sy
 8009898:	b662      	cpsie	i
 800989a:	607b      	str	r3, [r7, #4]
}
 800989c:	bf00      	nop
 800989e:	e7fe      	b.n	800989e <vTaskSwitchContext+0x42>
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	3b01      	subs	r3, #1
 80098a4:	60fb      	str	r3, [r7, #12]
 80098a6:	491d      	ldr	r1, [pc, #116]	; (800991c <vTaskSwitchContext+0xc0>)
 80098a8:	68fa      	ldr	r2, [r7, #12]
 80098aa:	4613      	mov	r3, r2
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	4413      	add	r3, r2
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	440b      	add	r3, r1
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d0e2      	beq.n	8009880 <vTaskSwitchContext+0x24>
 80098ba:	68fa      	ldr	r2, [r7, #12]
 80098bc:	4613      	mov	r3, r2
 80098be:	009b      	lsls	r3, r3, #2
 80098c0:	4413      	add	r3, r2
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	4a15      	ldr	r2, [pc, #84]	; (800991c <vTaskSwitchContext+0xc0>)
 80098c6:	4413      	add	r3, r2
 80098c8:	60bb      	str	r3, [r7, #8]
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	685a      	ldr	r2, [r3, #4]
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	605a      	str	r2, [r3, #4]
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	685a      	ldr	r2, [r3, #4]
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	3308      	adds	r3, #8
 80098dc:	429a      	cmp	r2, r3
 80098de:	d104      	bne.n	80098ea <vTaskSwitchContext+0x8e>
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	685a      	ldr	r2, [r3, #4]
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	605a      	str	r2, [r3, #4]
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	68db      	ldr	r3, [r3, #12]
 80098f0:	4a0b      	ldr	r2, [pc, #44]	; (8009920 <vTaskSwitchContext+0xc4>)
 80098f2:	6013      	str	r3, [r2, #0]
 80098f4:	4a08      	ldr	r2, [pc, #32]	; (8009918 <vTaskSwitchContext+0xbc>)
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80098fa:	4b09      	ldr	r3, [pc, #36]	; (8009920 <vTaskSwitchContext+0xc4>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	3354      	adds	r3, #84	; 0x54
 8009900:	4a08      	ldr	r2, [pc, #32]	; (8009924 <vTaskSwitchContext+0xc8>)
 8009902:	6013      	str	r3, [r2, #0]
}
 8009904:	bf00      	nop
 8009906:	3714      	adds	r7, #20
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr
 8009910:	200021a4 	.word	0x200021a4
 8009914:	20002190 	.word	0x20002190
 8009918:	20002184 	.word	0x20002184
 800991c:	20001cac 	.word	0x20001cac
 8009920:	20001ca8 	.word	0x20001ca8
 8009924:	20000060 	.word	0x20000060

08009928 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d10c      	bne.n	8009952 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8009938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800993c:	b672      	cpsid	i
 800993e:	f383 8811 	msr	BASEPRI, r3
 8009942:	f3bf 8f6f 	isb	sy
 8009946:	f3bf 8f4f 	dsb	sy
 800994a:	b662      	cpsie	i
 800994c:	60fb      	str	r3, [r7, #12]
}
 800994e:	bf00      	nop
 8009950:	e7fe      	b.n	8009950 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009952:	4b07      	ldr	r3, [pc, #28]	; (8009970 <vTaskPlaceOnEventList+0x48>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	3318      	adds	r3, #24
 8009958:	4619      	mov	r1, r3
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f7fe f9f9 	bl	8007d52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009960:	2101      	movs	r1, #1
 8009962:	6838      	ldr	r0, [r7, #0]
 8009964:	f000 fd34 	bl	800a3d0 <prvAddCurrentTaskToDelayedList>
}
 8009968:	bf00      	nop
 800996a:	3710      	adds	r7, #16
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}
 8009970:	20001ca8 	.word	0x20001ca8

08009974 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009974:	b580      	push	{r7, lr}
 8009976:	b086      	sub	sp, #24
 8009978:	af00      	add	r7, sp, #0
 800997a:	60f8      	str	r0, [r7, #12]
 800997c:	60b9      	str	r1, [r7, #8]
 800997e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d10c      	bne.n	80099a0 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8009986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800998a:	b672      	cpsid	i
 800998c:	f383 8811 	msr	BASEPRI, r3
 8009990:	f3bf 8f6f 	isb	sy
 8009994:	f3bf 8f4f 	dsb	sy
 8009998:	b662      	cpsie	i
 800999a:	617b      	str	r3, [r7, #20]
}
 800999c:	bf00      	nop
 800999e:	e7fe      	b.n	800999e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099a0:	4b0a      	ldr	r3, [pc, #40]	; (80099cc <vTaskPlaceOnEventListRestricted+0x58>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	3318      	adds	r3, #24
 80099a6:	4619      	mov	r1, r3
 80099a8:	68f8      	ldr	r0, [r7, #12]
 80099aa:	f7fe f9ae 	bl	8007d0a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d002      	beq.n	80099ba <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80099b4:	f04f 33ff 	mov.w	r3, #4294967295
 80099b8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80099ba:	6879      	ldr	r1, [r7, #4]
 80099bc:	68b8      	ldr	r0, [r7, #8]
 80099be:	f000 fd07 	bl	800a3d0 <prvAddCurrentTaskToDelayedList>
	}
 80099c2:	bf00      	nop
 80099c4:	3718      	adds	r7, #24
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}
 80099ca:	bf00      	nop
 80099cc:	20001ca8 	.word	0x20001ca8

080099d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b086      	sub	sp, #24
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	68db      	ldr	r3, [r3, #12]
 80099de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d10c      	bne.n	8009a00 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80099e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ea:	b672      	cpsid	i
 80099ec:	f383 8811 	msr	BASEPRI, r3
 80099f0:	f3bf 8f6f 	isb	sy
 80099f4:	f3bf 8f4f 	dsb	sy
 80099f8:	b662      	cpsie	i
 80099fa:	60fb      	str	r3, [r7, #12]
}
 80099fc:	bf00      	nop
 80099fe:	e7fe      	b.n	80099fe <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	3318      	adds	r3, #24
 8009a04:	4618      	mov	r0, r3
 8009a06:	f7fe f9dd 	bl	8007dc4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a0a:	4b1e      	ldr	r3, [pc, #120]	; (8009a84 <xTaskRemoveFromEventList+0xb4>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d11d      	bne.n	8009a4e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	3304      	adds	r3, #4
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7fe f9d4 	bl	8007dc4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a20:	4b19      	ldr	r3, [pc, #100]	; (8009a88 <xTaskRemoveFromEventList+0xb8>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d903      	bls.n	8009a30 <xTaskRemoveFromEventList+0x60>
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a2c:	4a16      	ldr	r2, [pc, #88]	; (8009a88 <xTaskRemoveFromEventList+0xb8>)
 8009a2e:	6013      	str	r3, [r2, #0]
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a34:	4613      	mov	r3, r2
 8009a36:	009b      	lsls	r3, r3, #2
 8009a38:	4413      	add	r3, r2
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	4a13      	ldr	r2, [pc, #76]	; (8009a8c <xTaskRemoveFromEventList+0xbc>)
 8009a3e:	441a      	add	r2, r3
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	3304      	adds	r3, #4
 8009a44:	4619      	mov	r1, r3
 8009a46:	4610      	mov	r0, r2
 8009a48:	f7fe f95f 	bl	8007d0a <vListInsertEnd>
 8009a4c:	e005      	b.n	8009a5a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	3318      	adds	r3, #24
 8009a52:	4619      	mov	r1, r3
 8009a54:	480e      	ldr	r0, [pc, #56]	; (8009a90 <xTaskRemoveFromEventList+0xc0>)
 8009a56:	f7fe f958 	bl	8007d0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a5e:	4b0d      	ldr	r3, [pc, #52]	; (8009a94 <xTaskRemoveFromEventList+0xc4>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d905      	bls.n	8009a74 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009a6c:	4b0a      	ldr	r3, [pc, #40]	; (8009a98 <xTaskRemoveFromEventList+0xc8>)
 8009a6e:	2201      	movs	r2, #1
 8009a70:	601a      	str	r2, [r3, #0]
 8009a72:	e001      	b.n	8009a78 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8009a74:	2300      	movs	r3, #0
 8009a76:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009a78:	697b      	ldr	r3, [r7, #20]
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3718      	adds	r7, #24
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	bf00      	nop
 8009a84:	200021a4 	.word	0x200021a4
 8009a88:	20002184 	.word	0x20002184
 8009a8c:	20001cac 	.word	0x20001cac
 8009a90:	2000213c 	.word	0x2000213c
 8009a94:	20001ca8 	.word	0x20001ca8
 8009a98:	20002190 	.word	0x20002190

08009a9c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d10c      	bne.n	8009ac4 <vTaskSetTimeOutState+0x28>
	__asm volatile
 8009aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aae:	b672      	cpsid	i
 8009ab0:	f383 8811 	msr	BASEPRI, r3
 8009ab4:	f3bf 8f6f 	isb	sy
 8009ab8:	f3bf 8f4f 	dsb	sy
 8009abc:	b662      	cpsie	i
 8009abe:	60fb      	str	r3, [r7, #12]
}
 8009ac0:	bf00      	nop
 8009ac2:	e7fe      	b.n	8009ac2 <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 8009ac4:	f001 fa02 	bl	800aecc <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009ac8:	4b06      	ldr	r3, [pc, #24]	; (8009ae4 <vTaskSetTimeOutState+0x48>)
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8009ad0:	4b05      	ldr	r3, [pc, #20]	; (8009ae8 <vTaskSetTimeOutState+0x4c>)
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8009ad8:	f001 fa2c 	bl	800af34 <vPortExitCritical>
}
 8009adc:	bf00      	nop
 8009ade:	3710      	adds	r7, #16
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}
 8009ae4:	20002194 	.word	0x20002194
 8009ae8:	20002180 	.word	0x20002180

08009aec <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009af4:	4b06      	ldr	r3, [pc, #24]	; (8009b10 <vTaskInternalSetTimeOutState+0x24>)
 8009af6:	681a      	ldr	r2, [r3, #0]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009afc:	4b05      	ldr	r3, [pc, #20]	; (8009b14 <vTaskInternalSetTimeOutState+0x28>)
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	605a      	str	r2, [r3, #4]
}
 8009b04:	bf00      	nop
 8009b06:	370c      	adds	r7, #12
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr
 8009b10:	20002194 	.word	0x20002194
 8009b14:	20002180 	.word	0x20002180

08009b18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b088      	sub	sp, #32
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d10c      	bne.n	8009b42 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8009b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b2c:	b672      	cpsid	i
 8009b2e:	f383 8811 	msr	BASEPRI, r3
 8009b32:	f3bf 8f6f 	isb	sy
 8009b36:	f3bf 8f4f 	dsb	sy
 8009b3a:	b662      	cpsie	i
 8009b3c:	613b      	str	r3, [r7, #16]
}
 8009b3e:	bf00      	nop
 8009b40:	e7fe      	b.n	8009b40 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d10c      	bne.n	8009b62 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8009b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4c:	b672      	cpsid	i
 8009b4e:	f383 8811 	msr	BASEPRI, r3
 8009b52:	f3bf 8f6f 	isb	sy
 8009b56:	f3bf 8f4f 	dsb	sy
 8009b5a:	b662      	cpsie	i
 8009b5c:	60fb      	str	r3, [r7, #12]
}
 8009b5e:	bf00      	nop
 8009b60:	e7fe      	b.n	8009b60 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8009b62:	f001 f9b3 	bl	800aecc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009b66:	4b1d      	ldr	r3, [pc, #116]	; (8009bdc <xTaskCheckForTimeOut+0xc4>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	69ba      	ldr	r2, [r7, #24]
 8009b72:	1ad3      	subs	r3, r2, r3
 8009b74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b7e:	d102      	bne.n	8009b86 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009b80:	2300      	movs	r3, #0
 8009b82:	61fb      	str	r3, [r7, #28]
 8009b84:	e023      	b.n	8009bce <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	4b15      	ldr	r3, [pc, #84]	; (8009be0 <xTaskCheckForTimeOut+0xc8>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d007      	beq.n	8009ba2 <xTaskCheckForTimeOut+0x8a>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	69ba      	ldr	r2, [r7, #24]
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	d302      	bcc.n	8009ba2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	61fb      	str	r3, [r7, #28]
 8009ba0:	e015      	b.n	8009bce <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	697a      	ldr	r2, [r7, #20]
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d20b      	bcs.n	8009bc4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	1ad2      	subs	r2, r2, r3
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f7ff ff97 	bl	8009aec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	61fb      	str	r3, [r7, #28]
 8009bc2:	e004      	b.n	8009bce <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009bce:	f001 f9b1 	bl	800af34 <vPortExitCritical>

	return xReturn;
 8009bd2:	69fb      	ldr	r3, [r7, #28]
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3720      	adds	r7, #32
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}
 8009bdc:	20002180 	.word	0x20002180
 8009be0:	20002194 	.word	0x20002194

08009be4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009be4:	b480      	push	{r7}
 8009be6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009be8:	4b03      	ldr	r3, [pc, #12]	; (8009bf8 <vTaskMissedYield+0x14>)
 8009bea:	2201      	movs	r2, #1
 8009bec:	601a      	str	r2, [r3, #0]
}
 8009bee:	bf00      	nop
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr
 8009bf8:	20002190 	.word	0x20002190

08009bfc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b082      	sub	sp, #8
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009c04:	f000 f852 	bl	8009cac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009c08:	4b06      	ldr	r3, [pc, #24]	; (8009c24 <prvIdleTask+0x28>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d9f9      	bls.n	8009c04 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009c10:	4b05      	ldr	r3, [pc, #20]	; (8009c28 <prvIdleTask+0x2c>)
 8009c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c16:	601a      	str	r2, [r3, #0]
 8009c18:	f3bf 8f4f 	dsb	sy
 8009c1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009c20:	e7f0      	b.n	8009c04 <prvIdleTask+0x8>
 8009c22:	bf00      	nop
 8009c24:	20001cac 	.word	0x20001cac
 8009c28:	e000ed04 	.word	0xe000ed04

08009c2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c32:	2300      	movs	r3, #0
 8009c34:	607b      	str	r3, [r7, #4]
 8009c36:	e00c      	b.n	8009c52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	4613      	mov	r3, r2
 8009c3c:	009b      	lsls	r3, r3, #2
 8009c3e:	4413      	add	r3, r2
 8009c40:	009b      	lsls	r3, r3, #2
 8009c42:	4a12      	ldr	r2, [pc, #72]	; (8009c8c <prvInitialiseTaskLists+0x60>)
 8009c44:	4413      	add	r3, r2
 8009c46:	4618      	mov	r0, r3
 8009c48:	f7fe f832 	bl	8007cb0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	3301      	adds	r3, #1
 8009c50:	607b      	str	r3, [r7, #4]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2b37      	cmp	r3, #55	; 0x37
 8009c56:	d9ef      	bls.n	8009c38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009c58:	480d      	ldr	r0, [pc, #52]	; (8009c90 <prvInitialiseTaskLists+0x64>)
 8009c5a:	f7fe f829 	bl	8007cb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009c5e:	480d      	ldr	r0, [pc, #52]	; (8009c94 <prvInitialiseTaskLists+0x68>)
 8009c60:	f7fe f826 	bl	8007cb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009c64:	480c      	ldr	r0, [pc, #48]	; (8009c98 <prvInitialiseTaskLists+0x6c>)
 8009c66:	f7fe f823 	bl	8007cb0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009c6a:	480c      	ldr	r0, [pc, #48]	; (8009c9c <prvInitialiseTaskLists+0x70>)
 8009c6c:	f7fe f820 	bl	8007cb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009c70:	480b      	ldr	r0, [pc, #44]	; (8009ca0 <prvInitialiseTaskLists+0x74>)
 8009c72:	f7fe f81d 	bl	8007cb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009c76:	4b0b      	ldr	r3, [pc, #44]	; (8009ca4 <prvInitialiseTaskLists+0x78>)
 8009c78:	4a05      	ldr	r2, [pc, #20]	; (8009c90 <prvInitialiseTaskLists+0x64>)
 8009c7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009c7c:	4b0a      	ldr	r3, [pc, #40]	; (8009ca8 <prvInitialiseTaskLists+0x7c>)
 8009c7e:	4a05      	ldr	r2, [pc, #20]	; (8009c94 <prvInitialiseTaskLists+0x68>)
 8009c80:	601a      	str	r2, [r3, #0]
}
 8009c82:	bf00      	nop
 8009c84:	3708      	adds	r7, #8
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	20001cac 	.word	0x20001cac
 8009c90:	2000210c 	.word	0x2000210c
 8009c94:	20002120 	.word	0x20002120
 8009c98:	2000213c 	.word	0x2000213c
 8009c9c:	20002150 	.word	0x20002150
 8009ca0:	20002168 	.word	0x20002168
 8009ca4:	20002134 	.word	0x20002134
 8009ca8:	20002138 	.word	0x20002138

08009cac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b082      	sub	sp, #8
 8009cb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009cb2:	e019      	b.n	8009ce8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009cb4:	f001 f90a 	bl	800aecc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cb8:	4b10      	ldr	r3, [pc, #64]	; (8009cfc <prvCheckTasksWaitingTermination+0x50>)
 8009cba:	68db      	ldr	r3, [r3, #12]
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	3304      	adds	r3, #4
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f7fe f87d 	bl	8007dc4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009cca:	4b0d      	ldr	r3, [pc, #52]	; (8009d00 <prvCheckTasksWaitingTermination+0x54>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	3b01      	subs	r3, #1
 8009cd0:	4a0b      	ldr	r2, [pc, #44]	; (8009d00 <prvCheckTasksWaitingTermination+0x54>)
 8009cd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009cd4:	4b0b      	ldr	r3, [pc, #44]	; (8009d04 <prvCheckTasksWaitingTermination+0x58>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	3b01      	subs	r3, #1
 8009cda:	4a0a      	ldr	r2, [pc, #40]	; (8009d04 <prvCheckTasksWaitingTermination+0x58>)
 8009cdc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009cde:	f001 f929 	bl	800af34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 f848 	bl	8009d78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ce8:	4b06      	ldr	r3, [pc, #24]	; (8009d04 <prvCheckTasksWaitingTermination+0x58>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d1e1      	bne.n	8009cb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009cf0:	bf00      	nop
 8009cf2:	bf00      	nop
 8009cf4:	3708      	adds	r7, #8
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	bf00      	nop
 8009cfc:	20002150 	.word	0x20002150
 8009d00:	2000217c 	.word	0x2000217c
 8009d04:	20002164 	.word	0x20002164

08009d08 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8009d08:	b480      	push	{r7}
 8009d0a:	b085      	sub	sp, #20
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8009d10:	2300      	movs	r3, #0
 8009d12:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8009d14:	e005      	b.n	8009d22 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	3301      	adds	r3, #1
 8009d1a:	607b      	str	r3, [r7, #4]
			ulCount++;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	3301      	adds	r3, #1
 8009d20:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	2ba5      	cmp	r3, #165	; 0xa5
 8009d28:	d0f5      	beq.n	8009d16 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	089b      	lsrs	r3, r3, #2
 8009d2e:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	b29b      	uxth	r3, r3
	}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3714      	adds	r7, #20
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr

08009d40 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b086      	sub	sp, #24
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d102      	bne.n	8009d54 <uxTaskGetStackHighWaterMark+0x14>
 8009d4e:	4b09      	ldr	r3, [pc, #36]	; (8009d74 <uxTaskGetStackHighWaterMark+0x34>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	e000      	b.n	8009d56 <uxTaskGetStackHighWaterMark+0x16>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d5c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8009d5e:	6938      	ldr	r0, [r7, #16]
 8009d60:	f7ff ffd2 	bl	8009d08 <prvTaskCheckFreeStackSpace>
 8009d64:	4603      	mov	r3, r0
 8009d66:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8009d68:	68fb      	ldr	r3, [r7, #12]
	}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3718      	adds	r7, #24
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
 8009d72:	bf00      	nop
 8009d74:	20001ca8 	.word	0x20001ca8

08009d78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b084      	sub	sp, #16
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	3354      	adds	r3, #84	; 0x54
 8009d84:	4618      	mov	r0, r3
 8009d86:	f001 fbb9 	bl	800b4fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d108      	bne.n	8009da6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f001 fa8d 	bl	800b2b8 <vPortFree>
				vPortFree( pxTCB );
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f001 fa8a 	bl	800b2b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009da4:	e01a      	b.n	8009ddc <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	d103      	bne.n	8009db8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f001 fa81 	bl	800b2b8 <vPortFree>
	}
 8009db6:	e011      	b.n	8009ddc <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009dbe:	2b02      	cmp	r3, #2
 8009dc0:	d00c      	beq.n	8009ddc <prvDeleteTCB+0x64>
	__asm volatile
 8009dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc6:	b672      	cpsid	i
 8009dc8:	f383 8811 	msr	BASEPRI, r3
 8009dcc:	f3bf 8f6f 	isb	sy
 8009dd0:	f3bf 8f4f 	dsb	sy
 8009dd4:	b662      	cpsie	i
 8009dd6:	60fb      	str	r3, [r7, #12]
}
 8009dd8:	bf00      	nop
 8009dda:	e7fe      	b.n	8009dda <prvDeleteTCB+0x62>
	}
 8009ddc:	bf00      	nop
 8009dde:	3710      	adds	r7, #16
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009de4:	b480      	push	{r7}
 8009de6:	b083      	sub	sp, #12
 8009de8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009dea:	4b0c      	ldr	r3, [pc, #48]	; (8009e1c <prvResetNextTaskUnblockTime+0x38>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d104      	bne.n	8009dfe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009df4:	4b0a      	ldr	r3, [pc, #40]	; (8009e20 <prvResetNextTaskUnblockTime+0x3c>)
 8009df6:	f04f 32ff 	mov.w	r2, #4294967295
 8009dfa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009dfc:	e008      	b.n	8009e10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dfe:	4b07      	ldr	r3, [pc, #28]	; (8009e1c <prvResetNextTaskUnblockTime+0x38>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	68db      	ldr	r3, [r3, #12]
 8009e04:	68db      	ldr	r3, [r3, #12]
 8009e06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	4a04      	ldr	r2, [pc, #16]	; (8009e20 <prvResetNextTaskUnblockTime+0x3c>)
 8009e0e:	6013      	str	r3, [r2, #0]
}
 8009e10:	bf00      	nop
 8009e12:	370c      	adds	r7, #12
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr
 8009e1c:	20002134 	.word	0x20002134
 8009e20:	2000219c 	.word	0x2000219c

08009e24 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009e24:	b480      	push	{r7}
 8009e26:	b083      	sub	sp, #12
 8009e28:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009e2a:	4b05      	ldr	r3, [pc, #20]	; (8009e40 <xTaskGetCurrentTaskHandle+0x1c>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009e30:	687b      	ldr	r3, [r7, #4]
	}
 8009e32:	4618      	mov	r0, r3
 8009e34:	370c      	adds	r7, #12
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr
 8009e3e:	bf00      	nop
 8009e40:	20001ca8 	.word	0x20001ca8

08009e44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009e44:	b480      	push	{r7}
 8009e46:	b083      	sub	sp, #12
 8009e48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009e4a:	4b0b      	ldr	r3, [pc, #44]	; (8009e78 <xTaskGetSchedulerState+0x34>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d102      	bne.n	8009e58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009e52:	2301      	movs	r3, #1
 8009e54:	607b      	str	r3, [r7, #4]
 8009e56:	e008      	b.n	8009e6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e58:	4b08      	ldr	r3, [pc, #32]	; (8009e7c <xTaskGetSchedulerState+0x38>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d102      	bne.n	8009e66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009e60:	2302      	movs	r3, #2
 8009e62:	607b      	str	r3, [r7, #4]
 8009e64:	e001      	b.n	8009e6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009e66:	2300      	movs	r3, #0
 8009e68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009e6a:	687b      	ldr	r3, [r7, #4]
	}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	370c      	adds	r7, #12
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr
 8009e78:	20002188 	.word	0x20002188
 8009e7c:	200021a4 	.word	0x200021a4

08009e80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b086      	sub	sp, #24
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d05a      	beq.n	8009f4c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009e96:	4b30      	ldr	r3, [pc, #192]	; (8009f58 <xTaskPriorityDisinherit+0xd8>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	693a      	ldr	r2, [r7, #16]
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d00c      	beq.n	8009eba <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8009ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea4:	b672      	cpsid	i
 8009ea6:	f383 8811 	msr	BASEPRI, r3
 8009eaa:	f3bf 8f6f 	isb	sy
 8009eae:	f3bf 8f4f 	dsb	sy
 8009eb2:	b662      	cpsie	i
 8009eb4:	60fb      	str	r3, [r7, #12]
}
 8009eb6:	bf00      	nop
 8009eb8:	e7fe      	b.n	8009eb8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d10c      	bne.n	8009edc <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8009ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec6:	b672      	cpsid	i
 8009ec8:	f383 8811 	msr	BASEPRI, r3
 8009ecc:	f3bf 8f6f 	isb	sy
 8009ed0:	f3bf 8f4f 	dsb	sy
 8009ed4:	b662      	cpsie	i
 8009ed6:	60bb      	str	r3, [r7, #8]
}
 8009ed8:	bf00      	nop
 8009eda:	e7fe      	b.n	8009eda <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ee0:	1e5a      	subs	r2, r3, #1
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d02c      	beq.n	8009f4c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d128      	bne.n	8009f4c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	3304      	adds	r3, #4
 8009efe:	4618      	mov	r0, r3
 8009f00:	f7fd ff60 	bl	8007dc4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f10:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f1c:	4b0f      	ldr	r3, [pc, #60]	; (8009f5c <xTaskPriorityDisinherit+0xdc>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	429a      	cmp	r2, r3
 8009f22:	d903      	bls.n	8009f2c <xTaskPriorityDisinherit+0xac>
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f28:	4a0c      	ldr	r2, [pc, #48]	; (8009f5c <xTaskPriorityDisinherit+0xdc>)
 8009f2a:	6013      	str	r3, [r2, #0]
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f30:	4613      	mov	r3, r2
 8009f32:	009b      	lsls	r3, r3, #2
 8009f34:	4413      	add	r3, r2
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	4a09      	ldr	r2, [pc, #36]	; (8009f60 <xTaskPriorityDisinherit+0xe0>)
 8009f3a:	441a      	add	r2, r3
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	3304      	adds	r3, #4
 8009f40:	4619      	mov	r1, r3
 8009f42:	4610      	mov	r0, r2
 8009f44:	f7fd fee1 	bl	8007d0a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009f4c:	697b      	ldr	r3, [r7, #20]
	}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3718      	adds	r7, #24
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
 8009f56:	bf00      	nop
 8009f58:	20001ca8 	.word	0x20001ca8
 8009f5c:	20002184 	.word	0x20002184
 8009f60:	20001cac 	.word	0x20001cac

08009f64 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b086      	sub	sp, #24
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	60b9      	str	r1, [r7, #8]
 8009f6e:	607a      	str	r2, [r7, #4]
 8009f70:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8009f72:	f000 ffab 	bl	800aecc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009f76:	4b29      	ldr	r3, [pc, #164]	; (800a01c <xTaskNotifyWait+0xb8>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8009f7e:	b2db      	uxtb	r3, r3
 8009f80:	2b02      	cmp	r3, #2
 8009f82:	d01c      	beq.n	8009fbe <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009f84:	4b25      	ldr	r3, [pc, #148]	; (800a01c <xTaskNotifyWait+0xb8>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8009f8c:	68fa      	ldr	r2, [r7, #12]
 8009f8e:	43d2      	mvns	r2, r2
 8009f90:	400a      	ands	r2, r1
 8009f92:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009f96:	4b21      	ldr	r3, [pc, #132]	; (800a01c <xTaskNotifyWait+0xb8>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d00b      	beq.n	8009fbe <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009fa6:	2101      	movs	r1, #1
 8009fa8:	6838      	ldr	r0, [r7, #0]
 8009faa:	f000 fa11 	bl	800a3d0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009fae:	4b1c      	ldr	r3, [pc, #112]	; (800a020 <xTaskNotifyWait+0xbc>)
 8009fb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fb4:	601a      	str	r2, [r3, #0]
 8009fb6:	f3bf 8f4f 	dsb	sy
 8009fba:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009fbe:	f000 ffb9 	bl	800af34 <vPortExitCritical>

		taskENTER_CRITICAL();
 8009fc2:	f000 ff83 	bl	800aecc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d005      	beq.n	8009fd8 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009fcc:	4b13      	ldr	r3, [pc, #76]	; (800a01c <xTaskNotifyWait+0xb8>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009fd8:	4b10      	ldr	r3, [pc, #64]	; (800a01c <xTaskNotifyWait+0xb8>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8009fe0:	b2db      	uxtb	r3, r3
 8009fe2:	2b02      	cmp	r3, #2
 8009fe4:	d002      	beq.n	8009fec <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	617b      	str	r3, [r7, #20]
 8009fea:	e00a      	b.n	800a002 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009fec:	4b0b      	ldr	r3, [pc, #44]	; (800a01c <xTaskNotifyWait+0xb8>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8009ff4:	68ba      	ldr	r2, [r7, #8]
 8009ff6:	43d2      	mvns	r2, r2
 8009ff8:	400a      	ands	r2, r1
 8009ffa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
				xReturn = pdTRUE;
 8009ffe:	2301      	movs	r3, #1
 800a000:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a002:	4b06      	ldr	r3, [pc, #24]	; (800a01c <xTaskNotifyWait+0xb8>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	2200      	movs	r2, #0
 800a008:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
		}
		taskEXIT_CRITICAL();
 800a00c:	f000 ff92 	bl	800af34 <vPortExitCritical>

		return xReturn;
 800a010:	697b      	ldr	r3, [r7, #20]
	}
 800a012:	4618      	mov	r0, r3
 800a014:	3718      	adds	r7, #24
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
 800a01a:	bf00      	nop
 800a01c:	20001ca8 	.word	0x20001ca8
 800a020:	e000ed04 	.word	0xe000ed04

0800a024 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800a024:	b580      	push	{r7, lr}
 800a026:	b08a      	sub	sp, #40	; 0x28
 800a028:	af00      	add	r7, sp, #0
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	60b9      	str	r1, [r7, #8]
 800a02e:	603b      	str	r3, [r7, #0]
 800a030:	4613      	mov	r3, r2
 800a032:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800a034:	2301      	movs	r3, #1
 800a036:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d10c      	bne.n	800a058 <xTaskGenericNotify+0x34>
	__asm volatile
 800a03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a042:	b672      	cpsid	i
 800a044:	f383 8811 	msr	BASEPRI, r3
 800a048:	f3bf 8f6f 	isb	sy
 800a04c:	f3bf 8f4f 	dsb	sy
 800a050:	b662      	cpsie	i
 800a052:	61bb      	str	r3, [r7, #24]
}
 800a054:	bf00      	nop
 800a056:	e7fe      	b.n	800a056 <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800a05c:	f000 ff36 	bl	800aecc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d004      	beq.n	800a070 <xTaskGenericNotify+0x4c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a066:	6a3b      	ldr	r3, [r7, #32]
 800a068:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a070:	6a3b      	ldr	r3, [r7, #32]
 800a072:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800a076:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a078:	6a3b      	ldr	r3, [r7, #32]
 800a07a:	2202      	movs	r2, #2
 800a07c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

			switch( eAction )
 800a080:	79fb      	ldrb	r3, [r7, #7]
 800a082:	2b04      	cmp	r3, #4
 800a084:	d82d      	bhi.n	800a0e2 <xTaskGenericNotify+0xbe>
 800a086:	a201      	add	r2, pc, #4	; (adr r2, 800a08c <xTaskGenericNotify+0x68>)
 800a088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a08c:	0800a109 	.word	0x0800a109
 800a090:	0800a0a1 	.word	0x0800a0a1
 800a094:	0800a0b3 	.word	0x0800a0b3
 800a098:	0800a0c3 	.word	0x0800a0c3
 800a09c:	0800a0cd 	.word	0x0800a0cd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a0a0:	6a3b      	ldr	r3, [r7, #32]
 800a0a2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	431a      	orrs	r2, r3
 800a0aa:	6a3b      	ldr	r3, [r7, #32]
 800a0ac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800a0b0:	e02d      	b.n	800a10e <xTaskGenericNotify+0xea>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a0b2:	6a3b      	ldr	r3, [r7, #32]
 800a0b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a0b8:	1c5a      	adds	r2, r3, #1
 800a0ba:	6a3b      	ldr	r3, [r7, #32]
 800a0bc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800a0c0:	e025      	b.n	800a10e <xTaskGenericNotify+0xea>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a0c2:	6a3b      	ldr	r3, [r7, #32]
 800a0c4:	68ba      	ldr	r2, [r7, #8]
 800a0c6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800a0ca:	e020      	b.n	800a10e <xTaskGenericNotify+0xea>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a0cc:	7ffb      	ldrb	r3, [r7, #31]
 800a0ce:	2b02      	cmp	r3, #2
 800a0d0:	d004      	beq.n	800a0dc <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a0d2:	6a3b      	ldr	r3, [r7, #32]
 800a0d4:	68ba      	ldr	r2, [r7, #8]
 800a0d6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a0da:	e018      	b.n	800a10e <xTaskGenericNotify+0xea>
						xReturn = pdFAIL;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800a0e0:	e015      	b.n	800a10e <xTaskGenericNotify+0xea>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a0e2:	6a3b      	ldr	r3, [r7, #32]
 800a0e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a0e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ec:	d00e      	beq.n	800a10c <xTaskGenericNotify+0xe8>
	__asm volatile
 800a0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f2:	b672      	cpsid	i
 800a0f4:	f383 8811 	msr	BASEPRI, r3
 800a0f8:	f3bf 8f6f 	isb	sy
 800a0fc:	f3bf 8f4f 	dsb	sy
 800a100:	b662      	cpsie	i
 800a102:	617b      	str	r3, [r7, #20]
}
 800a104:	bf00      	nop
 800a106:	e7fe      	b.n	800a106 <xTaskGenericNotify+0xe2>
					break;
 800a108:	bf00      	nop
 800a10a:	e000      	b.n	800a10e <xTaskGenericNotify+0xea>

					break;
 800a10c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a10e:	7ffb      	ldrb	r3, [r7, #31]
 800a110:	2b01      	cmp	r3, #1
 800a112:	d13c      	bne.n	800a18e <xTaskGenericNotify+0x16a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a114:	6a3b      	ldr	r3, [r7, #32]
 800a116:	3304      	adds	r3, #4
 800a118:	4618      	mov	r0, r3
 800a11a:	f7fd fe53 	bl	8007dc4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800a11e:	6a3b      	ldr	r3, [r7, #32]
 800a120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a122:	4b1e      	ldr	r3, [pc, #120]	; (800a19c <xTaskGenericNotify+0x178>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	429a      	cmp	r2, r3
 800a128:	d903      	bls.n	800a132 <xTaskGenericNotify+0x10e>
 800a12a:	6a3b      	ldr	r3, [r7, #32]
 800a12c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a12e:	4a1b      	ldr	r2, [pc, #108]	; (800a19c <xTaskGenericNotify+0x178>)
 800a130:	6013      	str	r3, [r2, #0]
 800a132:	6a3b      	ldr	r3, [r7, #32]
 800a134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a136:	4613      	mov	r3, r2
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	4413      	add	r3, r2
 800a13c:	009b      	lsls	r3, r3, #2
 800a13e:	4a18      	ldr	r2, [pc, #96]	; (800a1a0 <xTaskGenericNotify+0x17c>)
 800a140:	441a      	add	r2, r3
 800a142:	6a3b      	ldr	r3, [r7, #32]
 800a144:	3304      	adds	r3, #4
 800a146:	4619      	mov	r1, r3
 800a148:	4610      	mov	r0, r2
 800a14a:	f7fd fdde 	bl	8007d0a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a14e:	6a3b      	ldr	r3, [r7, #32]
 800a150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a152:	2b00      	cmp	r3, #0
 800a154:	d00c      	beq.n	800a170 <xTaskGenericNotify+0x14c>
	__asm volatile
 800a156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a15a:	b672      	cpsid	i
 800a15c:	f383 8811 	msr	BASEPRI, r3
 800a160:	f3bf 8f6f 	isb	sy
 800a164:	f3bf 8f4f 	dsb	sy
 800a168:	b662      	cpsie	i
 800a16a:	613b      	str	r3, [r7, #16]
}
 800a16c:	bf00      	nop
 800a16e:	e7fe      	b.n	800a16e <xTaskGenericNotify+0x14a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a170:	6a3b      	ldr	r3, [r7, #32]
 800a172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a174:	4b0b      	ldr	r3, [pc, #44]	; (800a1a4 <xTaskGenericNotify+0x180>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d907      	bls.n	800a18e <xTaskGenericNotify+0x16a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800a17e:	4b0a      	ldr	r3, [pc, #40]	; (800a1a8 <xTaskGenericNotify+0x184>)
 800a180:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a184:	601a      	str	r2, [r3, #0]
 800a186:	f3bf 8f4f 	dsb	sy
 800a18a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a18e:	f000 fed1 	bl	800af34 <vPortExitCritical>

		return xReturn;
 800a192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a194:	4618      	mov	r0, r3
 800a196:	3728      	adds	r7, #40	; 0x28
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}
 800a19c:	20002184 	.word	0x20002184
 800a1a0:	20001cac 	.word	0x20001cac
 800a1a4:	20001ca8 	.word	0x20001ca8
 800a1a8:	e000ed04 	.word	0xe000ed04

0800a1ac <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b08e      	sub	sp, #56	; 0x38
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	603b      	str	r3, [r7, #0]
 800a1b8:	4613      	mov	r3, r2
 800a1ba:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800a1bc:	2301      	movs	r3, #1
 800a1be:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d10c      	bne.n	800a1e0 <xTaskGenericNotifyFromISR+0x34>
	__asm volatile
 800a1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ca:	b672      	cpsid	i
 800a1cc:	f383 8811 	msr	BASEPRI, r3
 800a1d0:	f3bf 8f6f 	isb	sy
 800a1d4:	f3bf 8f4f 	dsb	sy
 800a1d8:	b662      	cpsie	i
 800a1da:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a1dc:	bf00      	nop
 800a1de:	e7fe      	b.n	800a1de <xTaskGenericNotifyFromISR+0x32>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a1e0:	f000 ff5c 	bl	800b09c <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800a1e8:	f3ef 8211 	mrs	r2, BASEPRI
 800a1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f0:	b672      	cpsid	i
 800a1f2:	f383 8811 	msr	BASEPRI, r3
 800a1f6:	f3bf 8f6f 	isb	sy
 800a1fa:	f3bf 8f4f 	dsb	sy
 800a1fe:	b662      	cpsie	i
 800a200:	623a      	str	r2, [r7, #32]
 800a202:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800a204:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a206:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d004      	beq.n	800a218 <xTaskGenericNotifyFromISR+0x6c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a210:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a21a:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800a21e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a224:	2202      	movs	r2, #2
 800a226:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

			switch( eAction )
 800a22a:	79fb      	ldrb	r3, [r7, #7]
 800a22c:	2b04      	cmp	r3, #4
 800a22e:	d82f      	bhi.n	800a290 <xTaskGenericNotifyFromISR+0xe4>
 800a230:	a201      	add	r2, pc, #4	; (adr r2, 800a238 <xTaskGenericNotifyFromISR+0x8c>)
 800a232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a236:	bf00      	nop
 800a238:	0800a2b7 	.word	0x0800a2b7
 800a23c:	0800a24d 	.word	0x0800a24d
 800a240:	0800a25f 	.word	0x0800a25f
 800a244:	0800a26f 	.word	0x0800a26f
 800a248:	0800a279 	.word	0x0800a279
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a24e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	431a      	orrs	r2, r3
 800a256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a258:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800a25c:	e02e      	b.n	800a2bc <xTaskGenericNotifyFromISR+0x110>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a260:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a264:	1c5a      	adds	r2, r3, #1
 800a266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a268:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800a26c:	e026      	b.n	800a2bc <xTaskGenericNotifyFromISR+0x110>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a270:	68ba      	ldr	r2, [r7, #8]
 800a272:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800a276:	e021      	b.n	800a2bc <xTaskGenericNotifyFromISR+0x110>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a278:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a27c:	2b02      	cmp	r3, #2
 800a27e:	d004      	beq.n	800a28a <xTaskGenericNotifyFromISR+0xde>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a282:	68ba      	ldr	r2, [r7, #8]
 800a284:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a288:	e018      	b.n	800a2bc <xTaskGenericNotifyFromISR+0x110>
						xReturn = pdFAIL;
 800a28a:	2300      	movs	r3, #0
 800a28c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800a28e:	e015      	b.n	800a2bc <xTaskGenericNotifyFromISR+0x110>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a292:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a29a:	d00e      	beq.n	800a2ba <xTaskGenericNotifyFromISR+0x10e>
	__asm volatile
 800a29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a0:	b672      	cpsid	i
 800a2a2:	f383 8811 	msr	BASEPRI, r3
 800a2a6:	f3bf 8f6f 	isb	sy
 800a2aa:	f3bf 8f4f 	dsb	sy
 800a2ae:	b662      	cpsie	i
 800a2b0:	61bb      	str	r3, [r7, #24]
}
 800a2b2:	bf00      	nop
 800a2b4:	e7fe      	b.n	800a2b4 <xTaskGenericNotifyFromISR+0x108>
					break;
 800a2b6:	bf00      	nop
 800a2b8:	e000      	b.n	800a2bc <xTaskGenericNotifyFromISR+0x110>
					break;
 800a2ba:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a2bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	d148      	bne.n	800a356 <xTaskGenericNotifyFromISR+0x1aa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d00c      	beq.n	800a2e6 <xTaskGenericNotifyFromISR+0x13a>
	__asm volatile
 800a2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d0:	b672      	cpsid	i
 800a2d2:	f383 8811 	msr	BASEPRI, r3
 800a2d6:	f3bf 8f6f 	isb	sy
 800a2da:	f3bf 8f4f 	dsb	sy
 800a2de:	b662      	cpsie	i
 800a2e0:	617b      	str	r3, [r7, #20]
}
 800a2e2:	bf00      	nop
 800a2e4:	e7fe      	b.n	800a2e4 <xTaskGenericNotifyFromISR+0x138>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2e6:	4b21      	ldr	r3, [pc, #132]	; (800a36c <xTaskGenericNotifyFromISR+0x1c0>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d11d      	bne.n	800a32a <xTaskGenericNotifyFromISR+0x17e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f0:	3304      	adds	r3, #4
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f7fd fd66 	bl	8007dc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a2f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2fc:	4b1c      	ldr	r3, [pc, #112]	; (800a370 <xTaskGenericNotifyFromISR+0x1c4>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	429a      	cmp	r2, r3
 800a302:	d903      	bls.n	800a30c <xTaskGenericNotifyFromISR+0x160>
 800a304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a308:	4a19      	ldr	r2, [pc, #100]	; (800a370 <xTaskGenericNotifyFromISR+0x1c4>)
 800a30a:	6013      	str	r3, [r2, #0]
 800a30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a30e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a310:	4613      	mov	r3, r2
 800a312:	009b      	lsls	r3, r3, #2
 800a314:	4413      	add	r3, r2
 800a316:	009b      	lsls	r3, r3, #2
 800a318:	4a16      	ldr	r2, [pc, #88]	; (800a374 <xTaskGenericNotifyFromISR+0x1c8>)
 800a31a:	441a      	add	r2, r3
 800a31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a31e:	3304      	adds	r3, #4
 800a320:	4619      	mov	r1, r3
 800a322:	4610      	mov	r0, r2
 800a324:	f7fd fcf1 	bl	8007d0a <vListInsertEnd>
 800a328:	e005      	b.n	800a336 <xTaskGenericNotifyFromISR+0x18a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32c:	3318      	adds	r3, #24
 800a32e:	4619      	mov	r1, r3
 800a330:	4811      	ldr	r0, [pc, #68]	; (800a378 <xTaskGenericNotifyFromISR+0x1cc>)
 800a332:	f7fd fcea 	bl	8007d0a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a33a:	4b10      	ldr	r3, [pc, #64]	; (800a37c <xTaskGenericNotifyFromISR+0x1d0>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a340:	429a      	cmp	r2, r3
 800a342:	d908      	bls.n	800a356 <xTaskGenericNotifyFromISR+0x1aa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800a344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a346:	2b00      	cmp	r3, #0
 800a348:	d002      	beq.n	800a350 <xTaskGenericNotifyFromISR+0x1a4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800a34a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a34c:	2201      	movs	r2, #1
 800a34e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800a350:	4b0b      	ldr	r3, [pc, #44]	; (800a380 <xTaskGenericNotifyFromISR+0x1d4>)
 800a352:	2201      	movs	r2, #1
 800a354:	601a      	str	r2, [r3, #0]
 800a356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a358:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	f383 8811 	msr	BASEPRI, r3
}
 800a360:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800a362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800a364:	4618      	mov	r0, r3
 800a366:	3738      	adds	r7, #56	; 0x38
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}
 800a36c:	200021a4 	.word	0x200021a4
 800a370:	20002184 	.word	0x20002184
 800a374:	20001cac 	.word	0x20001cac
 800a378:	2000213c 	.word	0x2000213c
 800a37c:	20001ca8 	.word	0x20001ca8
 800a380:	20002190 	.word	0x20002190

0800a384 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d102      	bne.n	800a398 <xTaskNotifyStateClear+0x14>
 800a392:	4b0e      	ldr	r3, [pc, #56]	; (800a3cc <xTaskNotifyStateClear+0x48>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	e000      	b.n	800a39a <xTaskNotifyStateClear+0x16>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 800a39c:	f000 fd96 	bl	800aecc <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800a3a6:	b2db      	uxtb	r3, r3
 800a3a8:	2b02      	cmp	r3, #2
 800a3aa:	d106      	bne.n	800a3ba <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				xReturn = pdPASS;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	60fb      	str	r3, [r7, #12]
 800a3b8:	e001      	b.n	800a3be <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800a3be:	f000 fdb9 	bl	800af34 <vPortExitCritical>

		return xReturn;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
	}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3710      	adds	r7, #16
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}
 800a3cc:	20001ca8 	.word	0x20001ca8

0800a3d0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b084      	sub	sp, #16
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a3da:	4b21      	ldr	r3, [pc, #132]	; (800a460 <prvAddCurrentTaskToDelayedList+0x90>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a3e0:	4b20      	ldr	r3, [pc, #128]	; (800a464 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	3304      	adds	r3, #4
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f7fd fcec 	bl	8007dc4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3f2:	d10a      	bne.n	800a40a <prvAddCurrentTaskToDelayedList+0x3a>
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d007      	beq.n	800a40a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3fa:	4b1a      	ldr	r3, [pc, #104]	; (800a464 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	3304      	adds	r3, #4
 800a400:	4619      	mov	r1, r3
 800a402:	4819      	ldr	r0, [pc, #100]	; (800a468 <prvAddCurrentTaskToDelayedList+0x98>)
 800a404:	f7fd fc81 	bl	8007d0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a408:	e026      	b.n	800a458 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a40a:	68fa      	ldr	r2, [r7, #12]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	4413      	add	r3, r2
 800a410:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a412:	4b14      	ldr	r3, [pc, #80]	; (800a464 <prvAddCurrentTaskToDelayedList+0x94>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	68ba      	ldr	r2, [r7, #8]
 800a418:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a41a:	68ba      	ldr	r2, [r7, #8]
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	429a      	cmp	r2, r3
 800a420:	d209      	bcs.n	800a436 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a422:	4b12      	ldr	r3, [pc, #72]	; (800a46c <prvAddCurrentTaskToDelayedList+0x9c>)
 800a424:	681a      	ldr	r2, [r3, #0]
 800a426:	4b0f      	ldr	r3, [pc, #60]	; (800a464 <prvAddCurrentTaskToDelayedList+0x94>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	3304      	adds	r3, #4
 800a42c:	4619      	mov	r1, r3
 800a42e:	4610      	mov	r0, r2
 800a430:	f7fd fc8f 	bl	8007d52 <vListInsert>
}
 800a434:	e010      	b.n	800a458 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a436:	4b0e      	ldr	r3, [pc, #56]	; (800a470 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a438:	681a      	ldr	r2, [r3, #0]
 800a43a:	4b0a      	ldr	r3, [pc, #40]	; (800a464 <prvAddCurrentTaskToDelayedList+0x94>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	3304      	adds	r3, #4
 800a440:	4619      	mov	r1, r3
 800a442:	4610      	mov	r0, r2
 800a444:	f7fd fc85 	bl	8007d52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a448:	4b0a      	ldr	r3, [pc, #40]	; (800a474 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	68ba      	ldr	r2, [r7, #8]
 800a44e:	429a      	cmp	r2, r3
 800a450:	d202      	bcs.n	800a458 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a452:	4a08      	ldr	r2, [pc, #32]	; (800a474 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	6013      	str	r3, [r2, #0]
}
 800a458:	bf00      	nop
 800a45a:	3710      	adds	r7, #16
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}
 800a460:	20002180 	.word	0x20002180
 800a464:	20001ca8 	.word	0x20001ca8
 800a468:	20002168 	.word	0x20002168
 800a46c:	20002138 	.word	0x20002138
 800a470:	20002134 	.word	0x20002134
 800a474:	2000219c 	.word	0x2000219c

0800a478 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b08a      	sub	sp, #40	; 0x28
 800a47c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a47e:	2300      	movs	r3, #0
 800a480:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a482:	f000 fbb5 	bl	800abf0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a486:	4b1d      	ldr	r3, [pc, #116]	; (800a4fc <xTimerCreateTimerTask+0x84>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d021      	beq.n	800a4d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a48e:	2300      	movs	r3, #0
 800a490:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a492:	2300      	movs	r3, #0
 800a494:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a496:	1d3a      	adds	r2, r7, #4
 800a498:	f107 0108 	add.w	r1, r7, #8
 800a49c:	f107 030c 	add.w	r3, r7, #12
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f7fd fbeb 	bl	8007c7c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a4a6:	6879      	ldr	r1, [r7, #4]
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	68fa      	ldr	r2, [r7, #12]
 800a4ac:	9202      	str	r2, [sp, #8]
 800a4ae:	9301      	str	r3, [sp, #4]
 800a4b0:	2302      	movs	r3, #2
 800a4b2:	9300      	str	r3, [sp, #0]
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	460a      	mov	r2, r1
 800a4b8:	4911      	ldr	r1, [pc, #68]	; (800a500 <xTimerCreateTimerTask+0x88>)
 800a4ba:	4812      	ldr	r0, [pc, #72]	; (800a504 <xTimerCreateTimerTask+0x8c>)
 800a4bc:	f7fe fdd7 	bl	800906e <xTaskCreateStatic>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	4a11      	ldr	r2, [pc, #68]	; (800a508 <xTimerCreateTimerTask+0x90>)
 800a4c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a4c6:	4b10      	ldr	r3, [pc, #64]	; (800a508 <xTimerCreateTimerTask+0x90>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d001      	beq.n	800a4d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d10c      	bne.n	800a4f2 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800a4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4dc:	b672      	cpsid	i
 800a4de:	f383 8811 	msr	BASEPRI, r3
 800a4e2:	f3bf 8f6f 	isb	sy
 800a4e6:	f3bf 8f4f 	dsb	sy
 800a4ea:	b662      	cpsie	i
 800a4ec:	613b      	str	r3, [r7, #16]
}
 800a4ee:	bf00      	nop
 800a4f0:	e7fe      	b.n	800a4f0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800a4f2:	697b      	ldr	r3, [r7, #20]
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3718      	adds	r7, #24
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}
 800a4fc:	200021d8 	.word	0x200021d8
 800a500:	0800b7a8 	.word	0x0800b7a8
 800a504:	0800a789 	.word	0x0800a789
 800a508:	200021dc 	.word	0x200021dc

0800a50c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b088      	sub	sp, #32
 800a510:	af02      	add	r7, sp, #8
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	60b9      	str	r1, [r7, #8]
 800a516:	607a      	str	r2, [r7, #4]
 800a518:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800a51a:	202c      	movs	r0, #44	; 0x2c
 800a51c:	f000 fe02 	bl	800b124 <pvPortMalloc>
 800a520:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d00d      	beq.n	800a544 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	2200      	movs	r2, #0
 800a52c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	9301      	str	r3, [sp, #4]
 800a534:	6a3b      	ldr	r3, [r7, #32]
 800a536:	9300      	str	r3, [sp, #0]
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	687a      	ldr	r2, [r7, #4]
 800a53c:	68b9      	ldr	r1, [r7, #8]
 800a53e:	68f8      	ldr	r0, [r7, #12]
 800a540:	f000 f847 	bl	800a5d2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a544:	697b      	ldr	r3, [r7, #20]
	}
 800a546:	4618      	mov	r0, r3
 800a548:	3718      	adds	r7, #24
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}

0800a54e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800a54e:	b580      	push	{r7, lr}
 800a550:	b08a      	sub	sp, #40	; 0x28
 800a552:	af02      	add	r7, sp, #8
 800a554:	60f8      	str	r0, [r7, #12]
 800a556:	60b9      	str	r1, [r7, #8]
 800a558:	607a      	str	r2, [r7, #4]
 800a55a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800a55c:	232c      	movs	r3, #44	; 0x2c
 800a55e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	2b2c      	cmp	r3, #44	; 0x2c
 800a564:	d00c      	beq.n	800a580 <xTimerCreateStatic+0x32>
	__asm volatile
 800a566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a56a:	b672      	cpsid	i
 800a56c:	f383 8811 	msr	BASEPRI, r3
 800a570:	f3bf 8f6f 	isb	sy
 800a574:	f3bf 8f4f 	dsb	sy
 800a578:	b662      	cpsie	i
 800a57a:	61bb      	str	r3, [r7, #24]
}
 800a57c:	bf00      	nop
 800a57e:	e7fe      	b.n	800a57e <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a580:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800a582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a584:	2b00      	cmp	r3, #0
 800a586:	d10c      	bne.n	800a5a2 <xTimerCreateStatic+0x54>
	__asm volatile
 800a588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a58c:	b672      	cpsid	i
 800a58e:	f383 8811 	msr	BASEPRI, r3
 800a592:	f3bf 8f6f 	isb	sy
 800a596:	f3bf 8f4f 	dsb	sy
 800a59a:	b662      	cpsie	i
 800a59c:	617b      	str	r3, [r7, #20]
}
 800a59e:	bf00      	nop
 800a5a0:	e7fe      	b.n	800a5a0 <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800a5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a4:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800a5a6:	69fb      	ldr	r3, [r7, #28]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d00d      	beq.n	800a5c8 <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800a5ac:	69fb      	ldr	r3, [r7, #28]
 800a5ae:	2202      	movs	r2, #2
 800a5b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a5b4:	69fb      	ldr	r3, [r7, #28]
 800a5b6:	9301      	str	r3, [sp, #4]
 800a5b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ba:	9300      	str	r3, [sp, #0]
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	687a      	ldr	r2, [r7, #4]
 800a5c0:	68b9      	ldr	r1, [r7, #8]
 800a5c2:	68f8      	ldr	r0, [r7, #12]
 800a5c4:	f000 f805 	bl	800a5d2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a5c8:	69fb      	ldr	r3, [r7, #28]
	}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3720      	adds	r7, #32
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}

0800a5d2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800a5d2:	b580      	push	{r7, lr}
 800a5d4:	b086      	sub	sp, #24
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	60f8      	str	r0, [r7, #12]
 800a5da:	60b9      	str	r1, [r7, #8]
 800a5dc:	607a      	str	r2, [r7, #4]
 800a5de:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d10c      	bne.n	800a600 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 800a5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ea:	b672      	cpsid	i
 800a5ec:	f383 8811 	msr	BASEPRI, r3
 800a5f0:	f3bf 8f6f 	isb	sy
 800a5f4:	f3bf 8f4f 	dsb	sy
 800a5f8:	b662      	cpsie	i
 800a5fa:	617b      	str	r3, [r7, #20]
}
 800a5fc:	bf00      	nop
 800a5fe:	e7fe      	b.n	800a5fe <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 800a600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a602:	2b00      	cmp	r3, #0
 800a604:	d01e      	beq.n	800a644 <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800a606:	f000 faf3 	bl	800abf0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800a60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60c:	68fa      	ldr	r2, [r7, #12]
 800a60e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a612:	68ba      	ldr	r2, [r7, #8]
 800a614:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800a616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a618:	683a      	ldr	r2, [r7, #0]
 800a61a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61e:	6a3a      	ldr	r2, [r7, #32]
 800a620:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a624:	3304      	adds	r3, #4
 800a626:	4618      	mov	r0, r3
 800a628:	f7fd fb62 	bl	8007cf0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d008      	beq.n	800a644 <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800a632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a634:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a638:	f043 0304 	orr.w	r3, r3, #4
 800a63c:	b2da      	uxtb	r2, r3
 800a63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a640:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800a644:	bf00      	nop
 800a646:	3718      	adds	r7, #24
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b08a      	sub	sp, #40	; 0x28
 800a650:	af00      	add	r7, sp, #0
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	60b9      	str	r1, [r7, #8]
 800a656:	607a      	str	r2, [r7, #4]
 800a658:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a65a:	2300      	movs	r3, #0
 800a65c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d10c      	bne.n	800a67e <xTimerGenericCommand+0x32>
	__asm volatile
 800a664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a668:	b672      	cpsid	i
 800a66a:	f383 8811 	msr	BASEPRI, r3
 800a66e:	f3bf 8f6f 	isb	sy
 800a672:	f3bf 8f4f 	dsb	sy
 800a676:	b662      	cpsie	i
 800a678:	623b      	str	r3, [r7, #32]
}
 800a67a:	bf00      	nop
 800a67c:	e7fe      	b.n	800a67c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a67e:	4b1a      	ldr	r3, [pc, #104]	; (800a6e8 <xTimerGenericCommand+0x9c>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d02a      	beq.n	800a6dc <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	2b05      	cmp	r3, #5
 800a696:	dc18      	bgt.n	800a6ca <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a698:	f7ff fbd4 	bl	8009e44 <xTaskGetSchedulerState>
 800a69c:	4603      	mov	r3, r0
 800a69e:	2b02      	cmp	r3, #2
 800a6a0:	d109      	bne.n	800a6b6 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a6a2:	4b11      	ldr	r3, [pc, #68]	; (800a6e8 <xTimerGenericCommand+0x9c>)
 800a6a4:	6818      	ldr	r0, [r3, #0]
 800a6a6:	f107 0110 	add.w	r1, r7, #16
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6ae:	f7fd fcc3 	bl	8008038 <xQueueGenericSend>
 800a6b2:	6278      	str	r0, [r7, #36]	; 0x24
 800a6b4:	e012      	b.n	800a6dc <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a6b6:	4b0c      	ldr	r3, [pc, #48]	; (800a6e8 <xTimerGenericCommand+0x9c>)
 800a6b8:	6818      	ldr	r0, [r3, #0]
 800a6ba:	f107 0110 	add.w	r1, r7, #16
 800a6be:	2300      	movs	r3, #0
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	f7fd fcb9 	bl	8008038 <xQueueGenericSend>
 800a6c6:	6278      	str	r0, [r7, #36]	; 0x24
 800a6c8:	e008      	b.n	800a6dc <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a6ca:	4b07      	ldr	r3, [pc, #28]	; (800a6e8 <xTimerGenericCommand+0x9c>)
 800a6cc:	6818      	ldr	r0, [r3, #0]
 800a6ce:	f107 0110 	add.w	r1, r7, #16
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	683a      	ldr	r2, [r7, #0]
 800a6d6:	f7fd fdb5 	bl	8008244 <xQueueGenericSendFromISR>
 800a6da:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3728      	adds	r7, #40	; 0x28
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	200021d8 	.word	0x200021d8

0800a6ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b088      	sub	sp, #32
 800a6f0:	af02      	add	r7, sp, #8
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6f6:	4b23      	ldr	r3, [pc, #140]	; (800a784 <prvProcessExpiredTimer+0x98>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	68db      	ldr	r3, [r3, #12]
 800a6fc:	68db      	ldr	r3, [r3, #12]
 800a6fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	3304      	adds	r3, #4
 800a704:	4618      	mov	r0, r3
 800a706:	f7fd fb5d 	bl	8007dc4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a710:	f003 0304 	and.w	r3, r3, #4
 800a714:	2b00      	cmp	r3, #0
 800a716:	d024      	beq.n	800a762 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	699a      	ldr	r2, [r3, #24]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	18d1      	adds	r1, r2, r3
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	683a      	ldr	r2, [r7, #0]
 800a724:	6978      	ldr	r0, [r7, #20]
 800a726:	f000 f8d3 	bl	800a8d0 <prvInsertTimerInActiveList>
 800a72a:	4603      	mov	r3, r0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d021      	beq.n	800a774 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a730:	2300      	movs	r3, #0
 800a732:	9300      	str	r3, [sp, #0]
 800a734:	2300      	movs	r3, #0
 800a736:	687a      	ldr	r2, [r7, #4]
 800a738:	2100      	movs	r1, #0
 800a73a:	6978      	ldr	r0, [r7, #20]
 800a73c:	f7ff ff86 	bl	800a64c <xTimerGenericCommand>
 800a740:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d115      	bne.n	800a774 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800a748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a74c:	b672      	cpsid	i
 800a74e:	f383 8811 	msr	BASEPRI, r3
 800a752:	f3bf 8f6f 	isb	sy
 800a756:	f3bf 8f4f 	dsb	sy
 800a75a:	b662      	cpsie	i
 800a75c:	60fb      	str	r3, [r7, #12]
}
 800a75e:	bf00      	nop
 800a760:	e7fe      	b.n	800a760 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a768:	f023 0301 	bic.w	r3, r3, #1
 800a76c:	b2da      	uxtb	r2, r3
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	6a1b      	ldr	r3, [r3, #32]
 800a778:	6978      	ldr	r0, [r7, #20]
 800a77a:	4798      	blx	r3
}
 800a77c:	bf00      	nop
 800a77e:	3718      	adds	r7, #24
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}
 800a784:	200021d0 	.word	0x200021d0

0800a788 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b084      	sub	sp, #16
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a790:	f107 0308 	add.w	r3, r7, #8
 800a794:	4618      	mov	r0, r3
 800a796:	f000 f857 	bl	800a848 <prvGetNextExpireTime>
 800a79a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	4619      	mov	r1, r3
 800a7a0:	68f8      	ldr	r0, [r7, #12]
 800a7a2:	f000 f803 	bl	800a7ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a7a6:	f000 f8d5 	bl	800a954 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a7aa:	e7f1      	b.n	800a790 <prvTimerTask+0x8>

0800a7ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b084      	sub	sp, #16
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a7b6:	f7fe fec5 	bl	8009544 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a7ba:	f107 0308 	add.w	r3, r7, #8
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f000 f866 	bl	800a890 <prvSampleTimeNow>
 800a7c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d130      	bne.n	800a82e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d10a      	bne.n	800a7e8 <prvProcessTimerOrBlockTask+0x3c>
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d806      	bhi.n	800a7e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a7da:	f7fe fec1 	bl	8009560 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a7de:	68f9      	ldr	r1, [r7, #12]
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f7ff ff83 	bl	800a6ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a7e6:	e024      	b.n	800a832 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d008      	beq.n	800a800 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a7ee:	4b13      	ldr	r3, [pc, #76]	; (800a83c <prvProcessTimerOrBlockTask+0x90>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d101      	bne.n	800a7fc <prvProcessTimerOrBlockTask+0x50>
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	e000      	b.n	800a7fe <prvProcessTimerOrBlockTask+0x52>
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a800:	4b0f      	ldr	r3, [pc, #60]	; (800a840 <prvProcessTimerOrBlockTask+0x94>)
 800a802:	6818      	ldr	r0, [r3, #0]
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	1ad3      	subs	r3, r2, r3
 800a80a:	683a      	ldr	r2, [r7, #0]
 800a80c:	4619      	mov	r1, r3
 800a80e:	f7fd ffd9 	bl	80087c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a812:	f7fe fea5 	bl	8009560 <xTaskResumeAll>
 800a816:	4603      	mov	r3, r0
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d10a      	bne.n	800a832 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a81c:	4b09      	ldr	r3, [pc, #36]	; (800a844 <prvProcessTimerOrBlockTask+0x98>)
 800a81e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a822:	601a      	str	r2, [r3, #0]
 800a824:	f3bf 8f4f 	dsb	sy
 800a828:	f3bf 8f6f 	isb	sy
}
 800a82c:	e001      	b.n	800a832 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a82e:	f7fe fe97 	bl	8009560 <xTaskResumeAll>
}
 800a832:	bf00      	nop
 800a834:	3710      	adds	r7, #16
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}
 800a83a:	bf00      	nop
 800a83c:	200021d4 	.word	0x200021d4
 800a840:	200021d8 	.word	0x200021d8
 800a844:	e000ed04 	.word	0xe000ed04

0800a848 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a848:	b480      	push	{r7}
 800a84a:	b085      	sub	sp, #20
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a850:	4b0e      	ldr	r3, [pc, #56]	; (800a88c <prvGetNextExpireTime+0x44>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d101      	bne.n	800a85e <prvGetNextExpireTime+0x16>
 800a85a:	2201      	movs	r2, #1
 800a85c:	e000      	b.n	800a860 <prvGetNextExpireTime+0x18>
 800a85e:	2200      	movs	r2, #0
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d105      	bne.n	800a878 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a86c:	4b07      	ldr	r3, [pc, #28]	; (800a88c <prvGetNextExpireTime+0x44>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	68db      	ldr	r3, [r3, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	60fb      	str	r3, [r7, #12]
 800a876:	e001      	b.n	800a87c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a878:	2300      	movs	r3, #0
 800a87a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a87c:	68fb      	ldr	r3, [r7, #12]
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3714      	adds	r7, #20
 800a882:	46bd      	mov	sp, r7
 800a884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a888:	4770      	bx	lr
 800a88a:	bf00      	nop
 800a88c:	200021d0 	.word	0x200021d0

0800a890 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b084      	sub	sp, #16
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a898:	f7fe ff02 	bl	80096a0 <xTaskGetTickCount>
 800a89c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a89e:	4b0b      	ldr	r3, [pc, #44]	; (800a8cc <prvSampleTimeNow+0x3c>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	68fa      	ldr	r2, [r7, #12]
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	d205      	bcs.n	800a8b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a8a8:	f000 f93c 	bl	800ab24 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	601a      	str	r2, [r3, #0]
 800a8b2:	e002      	b.n	800a8ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a8ba:	4a04      	ldr	r2, [pc, #16]	; (800a8cc <prvSampleTimeNow+0x3c>)
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3710      	adds	r7, #16
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
 800a8ca:	bf00      	nop
 800a8cc:	200021e0 	.word	0x200021e0

0800a8d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b086      	sub	sp, #24
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	60f8      	str	r0, [r7, #12]
 800a8d8:	60b9      	str	r1, [r7, #8]
 800a8da:	607a      	str	r2, [r7, #4]
 800a8dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	68ba      	ldr	r2, [r7, #8]
 800a8e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	68fa      	ldr	r2, [r7, #12]
 800a8ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a8ee:	68ba      	ldr	r2, [r7, #8]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d812      	bhi.n	800a91c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	1ad2      	subs	r2, r2, r3
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	699b      	ldr	r3, [r3, #24]
 800a900:	429a      	cmp	r2, r3
 800a902:	d302      	bcc.n	800a90a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a904:	2301      	movs	r3, #1
 800a906:	617b      	str	r3, [r7, #20]
 800a908:	e01b      	b.n	800a942 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a90a:	4b10      	ldr	r3, [pc, #64]	; (800a94c <prvInsertTimerInActiveList+0x7c>)
 800a90c:	681a      	ldr	r2, [r3, #0]
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	3304      	adds	r3, #4
 800a912:	4619      	mov	r1, r3
 800a914:	4610      	mov	r0, r2
 800a916:	f7fd fa1c 	bl	8007d52 <vListInsert>
 800a91a:	e012      	b.n	800a942 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	429a      	cmp	r2, r3
 800a922:	d206      	bcs.n	800a932 <prvInsertTimerInActiveList+0x62>
 800a924:	68ba      	ldr	r2, [r7, #8]
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	429a      	cmp	r2, r3
 800a92a:	d302      	bcc.n	800a932 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a92c:	2301      	movs	r3, #1
 800a92e:	617b      	str	r3, [r7, #20]
 800a930:	e007      	b.n	800a942 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a932:	4b07      	ldr	r3, [pc, #28]	; (800a950 <prvInsertTimerInActiveList+0x80>)
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	3304      	adds	r3, #4
 800a93a:	4619      	mov	r1, r3
 800a93c:	4610      	mov	r0, r2
 800a93e:	f7fd fa08 	bl	8007d52 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a942:	697b      	ldr	r3, [r7, #20]
}
 800a944:	4618      	mov	r0, r3
 800a946:	3718      	adds	r7, #24
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}
 800a94c:	200021d4 	.word	0x200021d4
 800a950:	200021d0 	.word	0x200021d0

0800a954 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b08e      	sub	sp, #56	; 0x38
 800a958:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a95a:	e0d0      	b.n	800aafe <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	da1a      	bge.n	800a998 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a962:	1d3b      	adds	r3, r7, #4
 800a964:	3304      	adds	r3, #4
 800a966:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d10c      	bne.n	800a988 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800a96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a972:	b672      	cpsid	i
 800a974:	f383 8811 	msr	BASEPRI, r3
 800a978:	f3bf 8f6f 	isb	sy
 800a97c:	f3bf 8f4f 	dsb	sy
 800a980:	b662      	cpsie	i
 800a982:	61fb      	str	r3, [r7, #28]
}
 800a984:	bf00      	nop
 800a986:	e7fe      	b.n	800a986 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a98e:	6850      	ldr	r0, [r2, #4]
 800a990:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a992:	6892      	ldr	r2, [r2, #8]
 800a994:	4611      	mov	r1, r2
 800a996:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	f2c0 80af 	blt.w	800aafe <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a6:	695b      	ldr	r3, [r3, #20]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d004      	beq.n	800a9b6 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ae:	3304      	adds	r3, #4
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f7fd fa07 	bl	8007dc4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a9b6:	463b      	mov	r3, r7
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f7ff ff69 	bl	800a890 <prvSampleTimeNow>
 800a9be:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2b09      	cmp	r3, #9
 800a9c4:	f200 809a 	bhi.w	800aafc <prvProcessReceivedCommands+0x1a8>
 800a9c8:	a201      	add	r2, pc, #4	; (adr r2, 800a9d0 <prvProcessReceivedCommands+0x7c>)
 800a9ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9ce:	bf00      	nop
 800a9d0:	0800a9f9 	.word	0x0800a9f9
 800a9d4:	0800a9f9 	.word	0x0800a9f9
 800a9d8:	0800a9f9 	.word	0x0800a9f9
 800a9dc:	0800aa71 	.word	0x0800aa71
 800a9e0:	0800aa85 	.word	0x0800aa85
 800a9e4:	0800aad3 	.word	0x0800aad3
 800a9e8:	0800a9f9 	.word	0x0800a9f9
 800a9ec:	0800a9f9 	.word	0x0800a9f9
 800a9f0:	0800aa71 	.word	0x0800aa71
 800a9f4:	0800aa85 	.word	0x0800aa85
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9fe:	f043 0301 	orr.w	r3, r3, #1
 800aa02:	b2da      	uxtb	r2, r3
 800aa04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aa0a:	68ba      	ldr	r2, [r7, #8]
 800aa0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa0e:	699b      	ldr	r3, [r3, #24]
 800aa10:	18d1      	adds	r1, r2, r3
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa18:	f7ff ff5a 	bl	800a8d0 <prvInsertTimerInActiveList>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d06d      	beq.n	800aafe <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa24:	6a1b      	ldr	r3, [r3, #32]
 800aa26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa28:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa30:	f003 0304 	and.w	r3, r3, #4
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d062      	beq.n	800aafe <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aa38:	68ba      	ldr	r2, [r7, #8]
 800aa3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa3c:	699b      	ldr	r3, [r3, #24]
 800aa3e:	441a      	add	r2, r3
 800aa40:	2300      	movs	r3, #0
 800aa42:	9300      	str	r3, [sp, #0]
 800aa44:	2300      	movs	r3, #0
 800aa46:	2100      	movs	r1, #0
 800aa48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa4a:	f7ff fdff 	bl	800a64c <xTimerGenericCommand>
 800aa4e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aa50:	6a3b      	ldr	r3, [r7, #32]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d153      	bne.n	800aafe <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800aa56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa5a:	b672      	cpsid	i
 800aa5c:	f383 8811 	msr	BASEPRI, r3
 800aa60:	f3bf 8f6f 	isb	sy
 800aa64:	f3bf 8f4f 	dsb	sy
 800aa68:	b662      	cpsie	i
 800aa6a:	61bb      	str	r3, [r7, #24]
}
 800aa6c:	bf00      	nop
 800aa6e:	e7fe      	b.n	800aa6e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa76:	f023 0301 	bic.w	r3, r3, #1
 800aa7a:	b2da      	uxtb	r2, r3
 800aa7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800aa82:	e03c      	b.n	800aafe <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aa84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa8a:	f043 0301 	orr.w	r3, r3, #1
 800aa8e:	b2da      	uxtb	r2, r3
 800aa90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aa96:	68ba      	ldr	r2, [r7, #8]
 800aa98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa9a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aa9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa9e:	699b      	ldr	r3, [r3, #24]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d10c      	bne.n	800aabe <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800aaa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa8:	b672      	cpsid	i
 800aaaa:	f383 8811 	msr	BASEPRI, r3
 800aaae:	f3bf 8f6f 	isb	sy
 800aab2:	f3bf 8f4f 	dsb	sy
 800aab6:	b662      	cpsie	i
 800aab8:	617b      	str	r3, [r7, #20]
}
 800aaba:	bf00      	nop
 800aabc:	e7fe      	b.n	800aabc <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aabe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac0:	699a      	ldr	r2, [r3, #24]
 800aac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac4:	18d1      	adds	r1, r2, r3
 800aac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aaca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aacc:	f7ff ff00 	bl	800a8d0 <prvInsertTimerInActiveList>
					break;
 800aad0:	e015      	b.n	800aafe <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800aad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aad8:	f003 0302 	and.w	r3, r3, #2
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d103      	bne.n	800aae8 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800aae0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aae2:	f000 fbe9 	bl	800b2b8 <vPortFree>
 800aae6:	e00a      	b.n	800aafe <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aaee:	f023 0301 	bic.w	r3, r3, #1
 800aaf2:	b2da      	uxtb	r2, r3
 800aaf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aafa:	e000      	b.n	800aafe <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800aafc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aafe:	4b08      	ldr	r3, [pc, #32]	; (800ab20 <prvProcessReceivedCommands+0x1cc>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	1d39      	adds	r1, r7, #4
 800ab04:	2200      	movs	r2, #0
 800ab06:	4618      	mov	r0, r3
 800ab08:	f7fd fc3c 	bl	8008384 <xQueueReceive>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	f47f af24 	bne.w	800a95c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ab14:	bf00      	nop
 800ab16:	bf00      	nop
 800ab18:	3730      	adds	r7, #48	; 0x30
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}
 800ab1e:	bf00      	nop
 800ab20:	200021d8 	.word	0x200021d8

0800ab24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b088      	sub	sp, #32
 800ab28:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ab2a:	e04a      	b.n	800abc2 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ab2c:	4b2e      	ldr	r3, [pc, #184]	; (800abe8 <prvSwitchTimerLists+0xc4>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	68db      	ldr	r3, [r3, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab36:	4b2c      	ldr	r3, [pc, #176]	; (800abe8 <prvSwitchTimerLists+0xc4>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	68db      	ldr	r3, [r3, #12]
 800ab3c:	68db      	ldr	r3, [r3, #12]
 800ab3e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	3304      	adds	r3, #4
 800ab44:	4618      	mov	r0, r3
 800ab46:	f7fd f93d 	bl	8007dc4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	6a1b      	ldr	r3, [r3, #32]
 800ab4e:	68f8      	ldr	r0, [r7, #12]
 800ab50:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab58:	f003 0304 	and.w	r3, r3, #4
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d030      	beq.n	800abc2 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	699b      	ldr	r3, [r3, #24]
 800ab64:	693a      	ldr	r2, [r7, #16]
 800ab66:	4413      	add	r3, r2
 800ab68:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ab6a:	68ba      	ldr	r2, [r7, #8]
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d90e      	bls.n	800ab90 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	68ba      	ldr	r2, [r7, #8]
 800ab76:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	68fa      	ldr	r2, [r7, #12]
 800ab7c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ab7e:	4b1a      	ldr	r3, [pc, #104]	; (800abe8 <prvSwitchTimerLists+0xc4>)
 800ab80:	681a      	ldr	r2, [r3, #0]
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	3304      	adds	r3, #4
 800ab86:	4619      	mov	r1, r3
 800ab88:	4610      	mov	r0, r2
 800ab8a:	f7fd f8e2 	bl	8007d52 <vListInsert>
 800ab8e:	e018      	b.n	800abc2 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ab90:	2300      	movs	r3, #0
 800ab92:	9300      	str	r3, [sp, #0]
 800ab94:	2300      	movs	r3, #0
 800ab96:	693a      	ldr	r2, [r7, #16]
 800ab98:	2100      	movs	r1, #0
 800ab9a:	68f8      	ldr	r0, [r7, #12]
 800ab9c:	f7ff fd56 	bl	800a64c <xTimerGenericCommand>
 800aba0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d10c      	bne.n	800abc2 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800aba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abac:	b672      	cpsid	i
 800abae:	f383 8811 	msr	BASEPRI, r3
 800abb2:	f3bf 8f6f 	isb	sy
 800abb6:	f3bf 8f4f 	dsb	sy
 800abba:	b662      	cpsie	i
 800abbc:	603b      	str	r3, [r7, #0]
}
 800abbe:	bf00      	nop
 800abc0:	e7fe      	b.n	800abc0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800abc2:	4b09      	ldr	r3, [pc, #36]	; (800abe8 <prvSwitchTimerLists+0xc4>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d1af      	bne.n	800ab2c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800abcc:	4b06      	ldr	r3, [pc, #24]	; (800abe8 <prvSwitchTimerLists+0xc4>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800abd2:	4b06      	ldr	r3, [pc, #24]	; (800abec <prvSwitchTimerLists+0xc8>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	4a04      	ldr	r2, [pc, #16]	; (800abe8 <prvSwitchTimerLists+0xc4>)
 800abd8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800abda:	4a04      	ldr	r2, [pc, #16]	; (800abec <prvSwitchTimerLists+0xc8>)
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	6013      	str	r3, [r2, #0]
}
 800abe0:	bf00      	nop
 800abe2:	3718      	adds	r7, #24
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}
 800abe8:	200021d0 	.word	0x200021d0
 800abec:	200021d4 	.word	0x200021d4

0800abf0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b082      	sub	sp, #8
 800abf4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800abf6:	f000 f969 	bl	800aecc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800abfa:	4b15      	ldr	r3, [pc, #84]	; (800ac50 <prvCheckForValidListAndQueue+0x60>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d120      	bne.n	800ac44 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ac02:	4814      	ldr	r0, [pc, #80]	; (800ac54 <prvCheckForValidListAndQueue+0x64>)
 800ac04:	f7fd f854 	bl	8007cb0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ac08:	4813      	ldr	r0, [pc, #76]	; (800ac58 <prvCheckForValidListAndQueue+0x68>)
 800ac0a:	f7fd f851 	bl	8007cb0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ac0e:	4b13      	ldr	r3, [pc, #76]	; (800ac5c <prvCheckForValidListAndQueue+0x6c>)
 800ac10:	4a10      	ldr	r2, [pc, #64]	; (800ac54 <prvCheckForValidListAndQueue+0x64>)
 800ac12:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ac14:	4b12      	ldr	r3, [pc, #72]	; (800ac60 <prvCheckForValidListAndQueue+0x70>)
 800ac16:	4a10      	ldr	r2, [pc, #64]	; (800ac58 <prvCheckForValidListAndQueue+0x68>)
 800ac18:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	9300      	str	r3, [sp, #0]
 800ac1e:	4b11      	ldr	r3, [pc, #68]	; (800ac64 <prvCheckForValidListAndQueue+0x74>)
 800ac20:	4a11      	ldr	r2, [pc, #68]	; (800ac68 <prvCheckForValidListAndQueue+0x78>)
 800ac22:	2110      	movs	r1, #16
 800ac24:	200a      	movs	r0, #10
 800ac26:	f7fd f961 	bl	8007eec <xQueueGenericCreateStatic>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	4a08      	ldr	r2, [pc, #32]	; (800ac50 <prvCheckForValidListAndQueue+0x60>)
 800ac2e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ac30:	4b07      	ldr	r3, [pc, #28]	; (800ac50 <prvCheckForValidListAndQueue+0x60>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d005      	beq.n	800ac44 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ac38:	4b05      	ldr	r3, [pc, #20]	; (800ac50 <prvCheckForValidListAndQueue+0x60>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	490b      	ldr	r1, [pc, #44]	; (800ac6c <prvCheckForValidListAndQueue+0x7c>)
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f7fd fd96 	bl	8008770 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ac44:	f000 f976 	bl	800af34 <vPortExitCritical>
}
 800ac48:	bf00      	nop
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
 800ac4e:	bf00      	nop
 800ac50:	200021d8 	.word	0x200021d8
 800ac54:	200021a8 	.word	0x200021a8
 800ac58:	200021bc 	.word	0x200021bc
 800ac5c:	200021d0 	.word	0x200021d0
 800ac60:	200021d4 	.word	0x200021d4
 800ac64:	20002284 	.word	0x20002284
 800ac68:	200021e4 	.word	0x200021e4
 800ac6c:	0800b7b0 	.word	0x0800b7b0

0800ac70 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b086      	sub	sp, #24
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d10c      	bne.n	800ac9c <pvTimerGetTimerID+0x2c>
	__asm volatile
 800ac82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac86:	b672      	cpsid	i
 800ac88:	f383 8811 	msr	BASEPRI, r3
 800ac8c:	f3bf 8f6f 	isb	sy
 800ac90:	f3bf 8f4f 	dsb	sy
 800ac94:	b662      	cpsie	i
 800ac96:	60fb      	str	r3, [r7, #12]
}
 800ac98:	bf00      	nop
 800ac9a:	e7fe      	b.n	800ac9a <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 800ac9c:	f000 f916 	bl	800aecc <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	69db      	ldr	r3, [r3, #28]
 800aca4:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800aca6:	f000 f945 	bl	800af34 <vPortExitCritical>

	return pvReturn;
 800acaa:	693b      	ldr	r3, [r7, #16]
}
 800acac:	4618      	mov	r0, r3
 800acae:	3718      	adds	r7, #24
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}

0800acb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800acb4:	b480      	push	{r7}
 800acb6:	b085      	sub	sp, #20
 800acb8:	af00      	add	r7, sp, #0
 800acba:	60f8      	str	r0, [r7, #12]
 800acbc:	60b9      	str	r1, [r7, #8]
 800acbe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	3b04      	subs	r3, #4
 800acc4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800accc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	3b04      	subs	r3, #4
 800acd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	f023 0201 	bic.w	r2, r3, #1
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	3b04      	subs	r3, #4
 800ace2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ace4:	4a0c      	ldr	r2, [pc, #48]	; (800ad18 <pxPortInitialiseStack+0x64>)
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	3b14      	subs	r3, #20
 800acee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	3b04      	subs	r3, #4
 800acfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f06f 0202 	mvn.w	r2, #2
 800ad02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	3b20      	subs	r3, #32
 800ad08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3714      	adds	r7, #20
 800ad10:	46bd      	mov	sp, r7
 800ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad16:	4770      	bx	lr
 800ad18:	0800ad1d 	.word	0x0800ad1d

0800ad1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b085      	sub	sp, #20
 800ad20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ad22:	2300      	movs	r3, #0
 800ad24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ad26:	4b14      	ldr	r3, [pc, #80]	; (800ad78 <prvTaskExitError+0x5c>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad2e:	d00c      	beq.n	800ad4a <prvTaskExitError+0x2e>
	__asm volatile
 800ad30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad34:	b672      	cpsid	i
 800ad36:	f383 8811 	msr	BASEPRI, r3
 800ad3a:	f3bf 8f6f 	isb	sy
 800ad3e:	f3bf 8f4f 	dsb	sy
 800ad42:	b662      	cpsie	i
 800ad44:	60fb      	str	r3, [r7, #12]
}
 800ad46:	bf00      	nop
 800ad48:	e7fe      	b.n	800ad48 <prvTaskExitError+0x2c>
	__asm volatile
 800ad4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad4e:	b672      	cpsid	i
 800ad50:	f383 8811 	msr	BASEPRI, r3
 800ad54:	f3bf 8f6f 	isb	sy
 800ad58:	f3bf 8f4f 	dsb	sy
 800ad5c:	b662      	cpsie	i
 800ad5e:	60bb      	str	r3, [r7, #8]
}
 800ad60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ad62:	bf00      	nop
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d0fc      	beq.n	800ad64 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ad6a:	bf00      	nop
 800ad6c:	bf00      	nop
 800ad6e:	3714      	adds	r7, #20
 800ad70:	46bd      	mov	sp, r7
 800ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad76:	4770      	bx	lr
 800ad78:	20000010 	.word	0x20000010
 800ad7c:	00000000 	.word	0x00000000

0800ad80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ad80:	4b07      	ldr	r3, [pc, #28]	; (800ada0 <pxCurrentTCBConst2>)
 800ad82:	6819      	ldr	r1, [r3, #0]
 800ad84:	6808      	ldr	r0, [r1, #0]
 800ad86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad8a:	f380 8809 	msr	PSP, r0
 800ad8e:	f3bf 8f6f 	isb	sy
 800ad92:	f04f 0000 	mov.w	r0, #0
 800ad96:	f380 8811 	msr	BASEPRI, r0
 800ad9a:	4770      	bx	lr
 800ad9c:	f3af 8000 	nop.w

0800ada0 <pxCurrentTCBConst2>:
 800ada0:	20001ca8 	.word	0x20001ca8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ada4:	bf00      	nop
 800ada6:	bf00      	nop

0800ada8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ada8:	4808      	ldr	r0, [pc, #32]	; (800adcc <prvPortStartFirstTask+0x24>)
 800adaa:	6800      	ldr	r0, [r0, #0]
 800adac:	6800      	ldr	r0, [r0, #0]
 800adae:	f380 8808 	msr	MSP, r0
 800adb2:	f04f 0000 	mov.w	r0, #0
 800adb6:	f380 8814 	msr	CONTROL, r0
 800adba:	b662      	cpsie	i
 800adbc:	b661      	cpsie	f
 800adbe:	f3bf 8f4f 	dsb	sy
 800adc2:	f3bf 8f6f 	isb	sy
 800adc6:	df00      	svc	0
 800adc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800adca:	bf00      	nop
 800adcc:	e000ed08 	.word	0xe000ed08

0800add0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b084      	sub	sp, #16
 800add4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800add6:	4b37      	ldr	r3, [pc, #220]	; (800aeb4 <xPortStartScheduler+0xe4>)
 800add8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	b2db      	uxtb	r3, r3
 800ade0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	22ff      	movs	r2, #255	; 0xff
 800ade6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	b2db      	uxtb	r3, r3
 800adee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800adf0:	78fb      	ldrb	r3, [r7, #3]
 800adf2:	b2db      	uxtb	r3, r3
 800adf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800adf8:	b2da      	uxtb	r2, r3
 800adfa:	4b2f      	ldr	r3, [pc, #188]	; (800aeb8 <xPortStartScheduler+0xe8>)
 800adfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800adfe:	4b2f      	ldr	r3, [pc, #188]	; (800aebc <xPortStartScheduler+0xec>)
 800ae00:	2207      	movs	r2, #7
 800ae02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae04:	e009      	b.n	800ae1a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800ae06:	4b2d      	ldr	r3, [pc, #180]	; (800aebc <xPortStartScheduler+0xec>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	3b01      	subs	r3, #1
 800ae0c:	4a2b      	ldr	r2, [pc, #172]	; (800aebc <xPortStartScheduler+0xec>)
 800ae0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ae10:	78fb      	ldrb	r3, [r7, #3]
 800ae12:	b2db      	uxtb	r3, r3
 800ae14:	005b      	lsls	r3, r3, #1
 800ae16:	b2db      	uxtb	r3, r3
 800ae18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae1a:	78fb      	ldrb	r3, [r7, #3]
 800ae1c:	b2db      	uxtb	r3, r3
 800ae1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae22:	2b80      	cmp	r3, #128	; 0x80
 800ae24:	d0ef      	beq.n	800ae06 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ae26:	4b25      	ldr	r3, [pc, #148]	; (800aebc <xPortStartScheduler+0xec>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f1c3 0307 	rsb	r3, r3, #7
 800ae2e:	2b04      	cmp	r3, #4
 800ae30:	d00c      	beq.n	800ae4c <xPortStartScheduler+0x7c>
	__asm volatile
 800ae32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae36:	b672      	cpsid	i
 800ae38:	f383 8811 	msr	BASEPRI, r3
 800ae3c:	f3bf 8f6f 	isb	sy
 800ae40:	f3bf 8f4f 	dsb	sy
 800ae44:	b662      	cpsie	i
 800ae46:	60bb      	str	r3, [r7, #8]
}
 800ae48:	bf00      	nop
 800ae4a:	e7fe      	b.n	800ae4a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ae4c:	4b1b      	ldr	r3, [pc, #108]	; (800aebc <xPortStartScheduler+0xec>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	021b      	lsls	r3, r3, #8
 800ae52:	4a1a      	ldr	r2, [pc, #104]	; (800aebc <xPortStartScheduler+0xec>)
 800ae54:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ae56:	4b19      	ldr	r3, [pc, #100]	; (800aebc <xPortStartScheduler+0xec>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ae5e:	4a17      	ldr	r2, [pc, #92]	; (800aebc <xPortStartScheduler+0xec>)
 800ae60:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	b2da      	uxtb	r2, r3
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ae6a:	4b15      	ldr	r3, [pc, #84]	; (800aec0 <xPortStartScheduler+0xf0>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	4a14      	ldr	r2, [pc, #80]	; (800aec0 <xPortStartScheduler+0xf0>)
 800ae70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ae74:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ae76:	4b12      	ldr	r3, [pc, #72]	; (800aec0 <xPortStartScheduler+0xf0>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	4a11      	ldr	r2, [pc, #68]	; (800aec0 <xPortStartScheduler+0xf0>)
 800ae7c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ae80:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ae82:	f000 f8dd 	bl	800b040 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ae86:	4b0f      	ldr	r3, [pc, #60]	; (800aec4 <xPortStartScheduler+0xf4>)
 800ae88:	2200      	movs	r2, #0
 800ae8a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ae8c:	f000 f8fc 	bl	800b088 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ae90:	4b0d      	ldr	r3, [pc, #52]	; (800aec8 <xPortStartScheduler+0xf8>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	4a0c      	ldr	r2, [pc, #48]	; (800aec8 <xPortStartScheduler+0xf8>)
 800ae96:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ae9a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ae9c:	f7ff ff84 	bl	800ada8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aea0:	f7fe fcdc 	bl	800985c <vTaskSwitchContext>
	prvTaskExitError();
 800aea4:	f7ff ff3a 	bl	800ad1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aea8:	2300      	movs	r3, #0
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3710      	adds	r7, #16
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}
 800aeb2:	bf00      	nop
 800aeb4:	e000e400 	.word	0xe000e400
 800aeb8:	200022d4 	.word	0x200022d4
 800aebc:	200022d8 	.word	0x200022d8
 800aec0:	e000ed20 	.word	0xe000ed20
 800aec4:	20000010 	.word	0x20000010
 800aec8:	e000ef34 	.word	0xe000ef34

0800aecc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aecc:	b480      	push	{r7}
 800aece:	b083      	sub	sp, #12
 800aed0:	af00      	add	r7, sp, #0
	__asm volatile
 800aed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed6:	b672      	cpsid	i
 800aed8:	f383 8811 	msr	BASEPRI, r3
 800aedc:	f3bf 8f6f 	isb	sy
 800aee0:	f3bf 8f4f 	dsb	sy
 800aee4:	b662      	cpsie	i
 800aee6:	607b      	str	r3, [r7, #4]
}
 800aee8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aeea:	4b10      	ldr	r3, [pc, #64]	; (800af2c <vPortEnterCritical+0x60>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	3301      	adds	r3, #1
 800aef0:	4a0e      	ldr	r2, [pc, #56]	; (800af2c <vPortEnterCritical+0x60>)
 800aef2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aef4:	4b0d      	ldr	r3, [pc, #52]	; (800af2c <vPortEnterCritical+0x60>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d111      	bne.n	800af20 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aefc:	4b0c      	ldr	r3, [pc, #48]	; (800af30 <vPortEnterCritical+0x64>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	b2db      	uxtb	r3, r3
 800af02:	2b00      	cmp	r3, #0
 800af04:	d00c      	beq.n	800af20 <vPortEnterCritical+0x54>
	__asm volatile
 800af06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af0a:	b672      	cpsid	i
 800af0c:	f383 8811 	msr	BASEPRI, r3
 800af10:	f3bf 8f6f 	isb	sy
 800af14:	f3bf 8f4f 	dsb	sy
 800af18:	b662      	cpsie	i
 800af1a:	603b      	str	r3, [r7, #0]
}
 800af1c:	bf00      	nop
 800af1e:	e7fe      	b.n	800af1e <vPortEnterCritical+0x52>
	}
}
 800af20:	bf00      	nop
 800af22:	370c      	adds	r7, #12
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr
 800af2c:	20000010 	.word	0x20000010
 800af30:	e000ed04 	.word	0xe000ed04

0800af34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800af34:	b480      	push	{r7}
 800af36:	b083      	sub	sp, #12
 800af38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800af3a:	4b13      	ldr	r3, [pc, #76]	; (800af88 <vPortExitCritical+0x54>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d10c      	bne.n	800af5c <vPortExitCritical+0x28>
	__asm volatile
 800af42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af46:	b672      	cpsid	i
 800af48:	f383 8811 	msr	BASEPRI, r3
 800af4c:	f3bf 8f6f 	isb	sy
 800af50:	f3bf 8f4f 	dsb	sy
 800af54:	b662      	cpsie	i
 800af56:	607b      	str	r3, [r7, #4]
}
 800af58:	bf00      	nop
 800af5a:	e7fe      	b.n	800af5a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800af5c:	4b0a      	ldr	r3, [pc, #40]	; (800af88 <vPortExitCritical+0x54>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	3b01      	subs	r3, #1
 800af62:	4a09      	ldr	r2, [pc, #36]	; (800af88 <vPortExitCritical+0x54>)
 800af64:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800af66:	4b08      	ldr	r3, [pc, #32]	; (800af88 <vPortExitCritical+0x54>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d105      	bne.n	800af7a <vPortExitCritical+0x46>
 800af6e:	2300      	movs	r3, #0
 800af70:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	f383 8811 	msr	BASEPRI, r3
}
 800af78:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800af7a:	bf00      	nop
 800af7c:	370c      	adds	r7, #12
 800af7e:	46bd      	mov	sp, r7
 800af80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af84:	4770      	bx	lr
 800af86:	bf00      	nop
 800af88:	20000010 	.word	0x20000010
 800af8c:	00000000 	.word	0x00000000

0800af90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800af90:	f3ef 8009 	mrs	r0, PSP
 800af94:	f3bf 8f6f 	isb	sy
 800af98:	4b15      	ldr	r3, [pc, #84]	; (800aff0 <pxCurrentTCBConst>)
 800af9a:	681a      	ldr	r2, [r3, #0]
 800af9c:	f01e 0f10 	tst.w	lr, #16
 800afa0:	bf08      	it	eq
 800afa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800afa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afaa:	6010      	str	r0, [r2, #0]
 800afac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800afb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800afb4:	b672      	cpsid	i
 800afb6:	f380 8811 	msr	BASEPRI, r0
 800afba:	f3bf 8f4f 	dsb	sy
 800afbe:	f3bf 8f6f 	isb	sy
 800afc2:	b662      	cpsie	i
 800afc4:	f7fe fc4a 	bl	800985c <vTaskSwitchContext>
 800afc8:	f04f 0000 	mov.w	r0, #0
 800afcc:	f380 8811 	msr	BASEPRI, r0
 800afd0:	bc09      	pop	{r0, r3}
 800afd2:	6819      	ldr	r1, [r3, #0]
 800afd4:	6808      	ldr	r0, [r1, #0]
 800afd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afda:	f01e 0f10 	tst.w	lr, #16
 800afde:	bf08      	it	eq
 800afe0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800afe4:	f380 8809 	msr	PSP, r0
 800afe8:	f3bf 8f6f 	isb	sy
 800afec:	4770      	bx	lr
 800afee:	bf00      	nop

0800aff0 <pxCurrentTCBConst>:
 800aff0:	20001ca8 	.word	0x20001ca8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aff4:	bf00      	nop
 800aff6:	bf00      	nop

0800aff8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b082      	sub	sp, #8
 800affc:	af00      	add	r7, sp, #0
	__asm volatile
 800affe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b002:	b672      	cpsid	i
 800b004:	f383 8811 	msr	BASEPRI, r3
 800b008:	f3bf 8f6f 	isb	sy
 800b00c:	f3bf 8f4f 	dsb	sy
 800b010:	b662      	cpsie	i
 800b012:	607b      	str	r3, [r7, #4]
}
 800b014:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b016:	f7fe fb65 	bl	80096e4 <xTaskIncrementTick>
 800b01a:	4603      	mov	r3, r0
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d003      	beq.n	800b028 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b020:	4b06      	ldr	r3, [pc, #24]	; (800b03c <SysTick_Handler+0x44>)
 800b022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b026:	601a      	str	r2, [r3, #0]
 800b028:	2300      	movs	r3, #0
 800b02a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	f383 8811 	msr	BASEPRI, r3
}
 800b032:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b034:	bf00      	nop
 800b036:	3708      	adds	r7, #8
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}
 800b03c:	e000ed04 	.word	0xe000ed04

0800b040 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b040:	b480      	push	{r7}
 800b042:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b044:	4b0b      	ldr	r3, [pc, #44]	; (800b074 <vPortSetupTimerInterrupt+0x34>)
 800b046:	2200      	movs	r2, #0
 800b048:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b04a:	4b0b      	ldr	r3, [pc, #44]	; (800b078 <vPortSetupTimerInterrupt+0x38>)
 800b04c:	2200      	movs	r2, #0
 800b04e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b050:	4b0a      	ldr	r3, [pc, #40]	; (800b07c <vPortSetupTimerInterrupt+0x3c>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	4a0a      	ldr	r2, [pc, #40]	; (800b080 <vPortSetupTimerInterrupt+0x40>)
 800b056:	fba2 2303 	umull	r2, r3, r2, r3
 800b05a:	099b      	lsrs	r3, r3, #6
 800b05c:	4a09      	ldr	r2, [pc, #36]	; (800b084 <vPortSetupTimerInterrupt+0x44>)
 800b05e:	3b01      	subs	r3, #1
 800b060:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b062:	4b04      	ldr	r3, [pc, #16]	; (800b074 <vPortSetupTimerInterrupt+0x34>)
 800b064:	2207      	movs	r2, #7
 800b066:	601a      	str	r2, [r3, #0]
}
 800b068:	bf00      	nop
 800b06a:	46bd      	mov	sp, r7
 800b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b070:	4770      	bx	lr
 800b072:	bf00      	nop
 800b074:	e000e010 	.word	0xe000e010
 800b078:	e000e018 	.word	0xe000e018
 800b07c:	20000004 	.word	0x20000004
 800b080:	10624dd3 	.word	0x10624dd3
 800b084:	e000e014 	.word	0xe000e014

0800b088 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b088:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b098 <vPortEnableVFP+0x10>
 800b08c:	6801      	ldr	r1, [r0, #0]
 800b08e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b092:	6001      	str	r1, [r0, #0]
 800b094:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b096:	bf00      	nop
 800b098:	e000ed88 	.word	0xe000ed88

0800b09c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b09c:	b480      	push	{r7}
 800b09e:	b085      	sub	sp, #20
 800b0a0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b0a2:	f3ef 8305 	mrs	r3, IPSR
 800b0a6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	2b0f      	cmp	r3, #15
 800b0ac:	d916      	bls.n	800b0dc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b0ae:	4a19      	ldr	r2, [pc, #100]	; (800b114 <vPortValidateInterruptPriority+0x78>)
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	4413      	add	r3, r2
 800b0b4:	781b      	ldrb	r3, [r3, #0]
 800b0b6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b0b8:	4b17      	ldr	r3, [pc, #92]	; (800b118 <vPortValidateInterruptPriority+0x7c>)
 800b0ba:	781b      	ldrb	r3, [r3, #0]
 800b0bc:	7afa      	ldrb	r2, [r7, #11]
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	d20c      	bcs.n	800b0dc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800b0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c6:	b672      	cpsid	i
 800b0c8:	f383 8811 	msr	BASEPRI, r3
 800b0cc:	f3bf 8f6f 	isb	sy
 800b0d0:	f3bf 8f4f 	dsb	sy
 800b0d4:	b662      	cpsie	i
 800b0d6:	607b      	str	r3, [r7, #4]
}
 800b0d8:	bf00      	nop
 800b0da:	e7fe      	b.n	800b0da <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b0dc:	4b0f      	ldr	r3, [pc, #60]	; (800b11c <vPortValidateInterruptPriority+0x80>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b0e4:	4b0e      	ldr	r3, [pc, #56]	; (800b120 <vPortValidateInterruptPriority+0x84>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	429a      	cmp	r2, r3
 800b0ea:	d90c      	bls.n	800b106 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800b0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f0:	b672      	cpsid	i
 800b0f2:	f383 8811 	msr	BASEPRI, r3
 800b0f6:	f3bf 8f6f 	isb	sy
 800b0fa:	f3bf 8f4f 	dsb	sy
 800b0fe:	b662      	cpsie	i
 800b100:	603b      	str	r3, [r7, #0]
}
 800b102:	bf00      	nop
 800b104:	e7fe      	b.n	800b104 <vPortValidateInterruptPriority+0x68>
	}
 800b106:	bf00      	nop
 800b108:	3714      	adds	r7, #20
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr
 800b112:	bf00      	nop
 800b114:	e000e3f0 	.word	0xe000e3f0
 800b118:	200022d4 	.word	0x200022d4
 800b11c:	e000ed0c 	.word	0xe000ed0c
 800b120:	200022d8 	.word	0x200022d8

0800b124 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b08a      	sub	sp, #40	; 0x28
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b12c:	2300      	movs	r3, #0
 800b12e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b130:	f7fe fa08 	bl	8009544 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b134:	4b5b      	ldr	r3, [pc, #364]	; (800b2a4 <pvPortMalloc+0x180>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d101      	bne.n	800b140 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b13c:	f000 f91a 	bl	800b374 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b140:	4b59      	ldr	r3, [pc, #356]	; (800b2a8 <pvPortMalloc+0x184>)
 800b142:	681a      	ldr	r2, [r3, #0]
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	4013      	ands	r3, r2
 800b148:	2b00      	cmp	r3, #0
 800b14a:	f040 8092 	bne.w	800b272 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d01f      	beq.n	800b194 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800b154:	2208      	movs	r2, #8
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	4413      	add	r3, r2
 800b15a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f003 0307 	and.w	r3, r3, #7
 800b162:	2b00      	cmp	r3, #0
 800b164:	d016      	beq.n	800b194 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f023 0307 	bic.w	r3, r3, #7
 800b16c:	3308      	adds	r3, #8
 800b16e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f003 0307 	and.w	r3, r3, #7
 800b176:	2b00      	cmp	r3, #0
 800b178:	d00c      	beq.n	800b194 <pvPortMalloc+0x70>
	__asm volatile
 800b17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b17e:	b672      	cpsid	i
 800b180:	f383 8811 	msr	BASEPRI, r3
 800b184:	f3bf 8f6f 	isb	sy
 800b188:	f3bf 8f4f 	dsb	sy
 800b18c:	b662      	cpsie	i
 800b18e:	617b      	str	r3, [r7, #20]
}
 800b190:	bf00      	nop
 800b192:	e7fe      	b.n	800b192 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d06b      	beq.n	800b272 <pvPortMalloc+0x14e>
 800b19a:	4b44      	ldr	r3, [pc, #272]	; (800b2ac <pvPortMalloc+0x188>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	687a      	ldr	r2, [r7, #4]
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d866      	bhi.n	800b272 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b1a4:	4b42      	ldr	r3, [pc, #264]	; (800b2b0 <pvPortMalloc+0x18c>)
 800b1a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b1a8:	4b41      	ldr	r3, [pc, #260]	; (800b2b0 <pvPortMalloc+0x18c>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b1ae:	e004      	b.n	800b1ba <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800b1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	687a      	ldr	r2, [r7, #4]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d903      	bls.n	800b1cc <pvPortMalloc+0xa8>
 800b1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d1f1      	bne.n	800b1b0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b1cc:	4b35      	ldr	r3, [pc, #212]	; (800b2a4 <pvPortMalloc+0x180>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d04d      	beq.n	800b272 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b1d6:	6a3b      	ldr	r3, [r7, #32]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	2208      	movs	r2, #8
 800b1dc:	4413      	add	r3, r2
 800b1de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e2:	681a      	ldr	r2, [r3, #0]
 800b1e4:	6a3b      	ldr	r3, [r7, #32]
 800b1e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ea:	685a      	ldr	r2, [r3, #4]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	1ad2      	subs	r2, r2, r3
 800b1f0:	2308      	movs	r3, #8
 800b1f2:	005b      	lsls	r3, r3, #1
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	d921      	bls.n	800b23c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b1f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	4413      	add	r3, r2
 800b1fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b200:	69bb      	ldr	r3, [r7, #24]
 800b202:	f003 0307 	and.w	r3, r3, #7
 800b206:	2b00      	cmp	r3, #0
 800b208:	d00c      	beq.n	800b224 <pvPortMalloc+0x100>
	__asm volatile
 800b20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b20e:	b672      	cpsid	i
 800b210:	f383 8811 	msr	BASEPRI, r3
 800b214:	f3bf 8f6f 	isb	sy
 800b218:	f3bf 8f4f 	dsb	sy
 800b21c:	b662      	cpsie	i
 800b21e:	613b      	str	r3, [r7, #16]
}
 800b220:	bf00      	nop
 800b222:	e7fe      	b.n	800b222 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b226:	685a      	ldr	r2, [r3, #4]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	1ad2      	subs	r2, r2, r3
 800b22c:	69bb      	ldr	r3, [r7, #24]
 800b22e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b232:	687a      	ldr	r2, [r7, #4]
 800b234:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b236:	69b8      	ldr	r0, [r7, #24]
 800b238:	f000 f8fe 	bl	800b438 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b23c:	4b1b      	ldr	r3, [pc, #108]	; (800b2ac <pvPortMalloc+0x188>)
 800b23e:	681a      	ldr	r2, [r3, #0]
 800b240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	1ad3      	subs	r3, r2, r3
 800b246:	4a19      	ldr	r2, [pc, #100]	; (800b2ac <pvPortMalloc+0x188>)
 800b248:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b24a:	4b18      	ldr	r3, [pc, #96]	; (800b2ac <pvPortMalloc+0x188>)
 800b24c:	681a      	ldr	r2, [r3, #0]
 800b24e:	4b19      	ldr	r3, [pc, #100]	; (800b2b4 <pvPortMalloc+0x190>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	429a      	cmp	r2, r3
 800b254:	d203      	bcs.n	800b25e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b256:	4b15      	ldr	r3, [pc, #84]	; (800b2ac <pvPortMalloc+0x188>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4a16      	ldr	r2, [pc, #88]	; (800b2b4 <pvPortMalloc+0x190>)
 800b25c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b260:	685a      	ldr	r2, [r3, #4]
 800b262:	4b11      	ldr	r3, [pc, #68]	; (800b2a8 <pvPortMalloc+0x184>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	431a      	orrs	r2, r3
 800b268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b26a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b26e:	2200      	movs	r2, #0
 800b270:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b272:	f7fe f975 	bl	8009560 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b276:	69fb      	ldr	r3, [r7, #28]
 800b278:	f003 0307 	and.w	r3, r3, #7
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d00c      	beq.n	800b29a <pvPortMalloc+0x176>
	__asm volatile
 800b280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b284:	b672      	cpsid	i
 800b286:	f383 8811 	msr	BASEPRI, r3
 800b28a:	f3bf 8f6f 	isb	sy
 800b28e:	f3bf 8f4f 	dsb	sy
 800b292:	b662      	cpsie	i
 800b294:	60fb      	str	r3, [r7, #12]
}
 800b296:	bf00      	nop
 800b298:	e7fe      	b.n	800b298 <pvPortMalloc+0x174>
	return pvReturn;
 800b29a:	69fb      	ldr	r3, [r7, #28]
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3728      	adds	r7, #40	; 0x28
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}
 800b2a4:	20005ee4 	.word	0x20005ee4
 800b2a8:	20005ef0 	.word	0x20005ef0
 800b2ac:	20005ee8 	.word	0x20005ee8
 800b2b0:	20005edc 	.word	0x20005edc
 800b2b4:	20005eec 	.word	0x20005eec

0800b2b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b086      	sub	sp, #24
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d04c      	beq.n	800b364 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b2ca:	2308      	movs	r3, #8
 800b2cc:	425b      	negs	r3, r3
 800b2ce:	697a      	ldr	r2, [r7, #20]
 800b2d0:	4413      	add	r3, r2
 800b2d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b2d4:	697b      	ldr	r3, [r7, #20]
 800b2d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	685a      	ldr	r2, [r3, #4]
 800b2dc:	4b23      	ldr	r3, [pc, #140]	; (800b36c <vPortFree+0xb4>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	4013      	ands	r3, r2
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d10c      	bne.n	800b300 <vPortFree+0x48>
	__asm volatile
 800b2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ea:	b672      	cpsid	i
 800b2ec:	f383 8811 	msr	BASEPRI, r3
 800b2f0:	f3bf 8f6f 	isb	sy
 800b2f4:	f3bf 8f4f 	dsb	sy
 800b2f8:	b662      	cpsie	i
 800b2fa:	60fb      	str	r3, [r7, #12]
}
 800b2fc:	bf00      	nop
 800b2fe:	e7fe      	b.n	800b2fe <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d00c      	beq.n	800b322 <vPortFree+0x6a>
	__asm volatile
 800b308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b30c:	b672      	cpsid	i
 800b30e:	f383 8811 	msr	BASEPRI, r3
 800b312:	f3bf 8f6f 	isb	sy
 800b316:	f3bf 8f4f 	dsb	sy
 800b31a:	b662      	cpsie	i
 800b31c:	60bb      	str	r3, [r7, #8]
}
 800b31e:	bf00      	nop
 800b320:	e7fe      	b.n	800b320 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	685a      	ldr	r2, [r3, #4]
 800b326:	4b11      	ldr	r3, [pc, #68]	; (800b36c <vPortFree+0xb4>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	4013      	ands	r3, r2
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d019      	beq.n	800b364 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d115      	bne.n	800b364 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	685a      	ldr	r2, [r3, #4]
 800b33c:	4b0b      	ldr	r3, [pc, #44]	; (800b36c <vPortFree+0xb4>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	43db      	mvns	r3, r3
 800b342:	401a      	ands	r2, r3
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b348:	f7fe f8fc 	bl	8009544 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	685a      	ldr	r2, [r3, #4]
 800b350:	4b07      	ldr	r3, [pc, #28]	; (800b370 <vPortFree+0xb8>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	4413      	add	r3, r2
 800b356:	4a06      	ldr	r2, [pc, #24]	; (800b370 <vPortFree+0xb8>)
 800b358:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b35a:	6938      	ldr	r0, [r7, #16]
 800b35c:	f000 f86c 	bl	800b438 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b360:	f7fe f8fe 	bl	8009560 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b364:	bf00      	nop
 800b366:	3718      	adds	r7, #24
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}
 800b36c:	20005ef0 	.word	0x20005ef0
 800b370:	20005ee8 	.word	0x20005ee8

0800b374 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b374:	b480      	push	{r7}
 800b376:	b085      	sub	sp, #20
 800b378:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b37a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b37e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b380:	4b27      	ldr	r3, [pc, #156]	; (800b420 <prvHeapInit+0xac>)
 800b382:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f003 0307 	and.w	r3, r3, #7
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d00c      	beq.n	800b3a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	3307      	adds	r3, #7
 800b392:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f023 0307 	bic.w	r3, r3, #7
 800b39a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b39c:	68ba      	ldr	r2, [r7, #8]
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	1ad3      	subs	r3, r2, r3
 800b3a2:	4a1f      	ldr	r2, [pc, #124]	; (800b420 <prvHeapInit+0xac>)
 800b3a4:	4413      	add	r3, r2
 800b3a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b3ac:	4a1d      	ldr	r2, [pc, #116]	; (800b424 <prvHeapInit+0xb0>)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b3b2:	4b1c      	ldr	r3, [pc, #112]	; (800b424 <prvHeapInit+0xb0>)
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	68ba      	ldr	r2, [r7, #8]
 800b3bc:	4413      	add	r3, r2
 800b3be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b3c0:	2208      	movs	r2, #8
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	1a9b      	subs	r3, r3, r2
 800b3c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	f023 0307 	bic.w	r3, r3, #7
 800b3ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	4a15      	ldr	r2, [pc, #84]	; (800b428 <prvHeapInit+0xb4>)
 800b3d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b3d6:	4b14      	ldr	r3, [pc, #80]	; (800b428 <prvHeapInit+0xb4>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b3de:	4b12      	ldr	r3, [pc, #72]	; (800b428 <prvHeapInit+0xb4>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	68fa      	ldr	r2, [r7, #12]
 800b3ee:	1ad2      	subs	r2, r2, r3
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b3f4:	4b0c      	ldr	r3, [pc, #48]	; (800b428 <prvHeapInit+0xb4>)
 800b3f6:	681a      	ldr	r2, [r3, #0]
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	685b      	ldr	r3, [r3, #4]
 800b400:	4a0a      	ldr	r2, [pc, #40]	; (800b42c <prvHeapInit+0xb8>)
 800b402:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	685b      	ldr	r3, [r3, #4]
 800b408:	4a09      	ldr	r2, [pc, #36]	; (800b430 <prvHeapInit+0xbc>)
 800b40a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b40c:	4b09      	ldr	r3, [pc, #36]	; (800b434 <prvHeapInit+0xc0>)
 800b40e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b412:	601a      	str	r2, [r3, #0]
}
 800b414:	bf00      	nop
 800b416:	3714      	adds	r7, #20
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr
 800b420:	200022dc 	.word	0x200022dc
 800b424:	20005edc 	.word	0x20005edc
 800b428:	20005ee4 	.word	0x20005ee4
 800b42c:	20005eec 	.word	0x20005eec
 800b430:	20005ee8 	.word	0x20005ee8
 800b434:	20005ef0 	.word	0x20005ef0

0800b438 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b438:	b480      	push	{r7}
 800b43a:	b085      	sub	sp, #20
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b440:	4b28      	ldr	r3, [pc, #160]	; (800b4e4 <prvInsertBlockIntoFreeList+0xac>)
 800b442:	60fb      	str	r3, [r7, #12]
 800b444:	e002      	b.n	800b44c <prvInsertBlockIntoFreeList+0x14>
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	60fb      	str	r3, [r7, #12]
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	687a      	ldr	r2, [r7, #4]
 800b452:	429a      	cmp	r2, r3
 800b454:	d8f7      	bhi.n	800b446 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	68ba      	ldr	r2, [r7, #8]
 800b460:	4413      	add	r3, r2
 800b462:	687a      	ldr	r2, [r7, #4]
 800b464:	429a      	cmp	r2, r3
 800b466:	d108      	bne.n	800b47a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	685a      	ldr	r2, [r3, #4]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	685b      	ldr	r3, [r3, #4]
 800b470:	441a      	add	r2, r3
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	68ba      	ldr	r2, [r7, #8]
 800b484:	441a      	add	r2, r3
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	429a      	cmp	r2, r3
 800b48c:	d118      	bne.n	800b4c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681a      	ldr	r2, [r3, #0]
 800b492:	4b15      	ldr	r3, [pc, #84]	; (800b4e8 <prvInsertBlockIntoFreeList+0xb0>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	429a      	cmp	r2, r3
 800b498:	d00d      	beq.n	800b4b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	685a      	ldr	r2, [r3, #4]
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	441a      	add	r2, r3
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	681a      	ldr	r2, [r3, #0]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	601a      	str	r2, [r3, #0]
 800b4b4:	e008      	b.n	800b4c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b4b6:	4b0c      	ldr	r3, [pc, #48]	; (800b4e8 <prvInsertBlockIntoFreeList+0xb0>)
 800b4b8:	681a      	ldr	r2, [r3, #0]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	601a      	str	r2, [r3, #0]
 800b4be:	e003      	b.n	800b4c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	681a      	ldr	r2, [r3, #0]
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b4c8:	68fa      	ldr	r2, [r7, #12]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	d002      	beq.n	800b4d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	687a      	ldr	r2, [r7, #4]
 800b4d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b4d6:	bf00      	nop
 800b4d8:	3714      	adds	r7, #20
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e0:	4770      	bx	lr
 800b4e2:	bf00      	nop
 800b4e4:	20005edc 	.word	0x20005edc
 800b4e8:	20005ee4 	.word	0x20005ee4

0800b4ec <memset>:
 800b4ec:	4402      	add	r2, r0
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	4293      	cmp	r3, r2
 800b4f2:	d100      	bne.n	800b4f6 <memset+0xa>
 800b4f4:	4770      	bx	lr
 800b4f6:	f803 1b01 	strb.w	r1, [r3], #1
 800b4fa:	e7f9      	b.n	800b4f0 <memset+0x4>

0800b4fc <_reclaim_reent>:
 800b4fc:	4b29      	ldr	r3, [pc, #164]	; (800b5a4 <_reclaim_reent+0xa8>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	4283      	cmp	r3, r0
 800b502:	b570      	push	{r4, r5, r6, lr}
 800b504:	4604      	mov	r4, r0
 800b506:	d04b      	beq.n	800b5a0 <_reclaim_reent+0xa4>
 800b508:	69c3      	ldr	r3, [r0, #28]
 800b50a:	b143      	cbz	r3, 800b51e <_reclaim_reent+0x22>
 800b50c:	68db      	ldr	r3, [r3, #12]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d144      	bne.n	800b59c <_reclaim_reent+0xa0>
 800b512:	69e3      	ldr	r3, [r4, #28]
 800b514:	6819      	ldr	r1, [r3, #0]
 800b516:	b111      	cbz	r1, 800b51e <_reclaim_reent+0x22>
 800b518:	4620      	mov	r0, r4
 800b51a:	f000 f879 	bl	800b610 <_free_r>
 800b51e:	6961      	ldr	r1, [r4, #20]
 800b520:	b111      	cbz	r1, 800b528 <_reclaim_reent+0x2c>
 800b522:	4620      	mov	r0, r4
 800b524:	f000 f874 	bl	800b610 <_free_r>
 800b528:	69e1      	ldr	r1, [r4, #28]
 800b52a:	b111      	cbz	r1, 800b532 <_reclaim_reent+0x36>
 800b52c:	4620      	mov	r0, r4
 800b52e:	f000 f86f 	bl	800b610 <_free_r>
 800b532:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b534:	b111      	cbz	r1, 800b53c <_reclaim_reent+0x40>
 800b536:	4620      	mov	r0, r4
 800b538:	f000 f86a 	bl	800b610 <_free_r>
 800b53c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b53e:	b111      	cbz	r1, 800b546 <_reclaim_reent+0x4a>
 800b540:	4620      	mov	r0, r4
 800b542:	f000 f865 	bl	800b610 <_free_r>
 800b546:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b548:	b111      	cbz	r1, 800b550 <_reclaim_reent+0x54>
 800b54a:	4620      	mov	r0, r4
 800b54c:	f000 f860 	bl	800b610 <_free_r>
 800b550:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b552:	b111      	cbz	r1, 800b55a <_reclaim_reent+0x5e>
 800b554:	4620      	mov	r0, r4
 800b556:	f000 f85b 	bl	800b610 <_free_r>
 800b55a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b55c:	b111      	cbz	r1, 800b564 <_reclaim_reent+0x68>
 800b55e:	4620      	mov	r0, r4
 800b560:	f000 f856 	bl	800b610 <_free_r>
 800b564:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b566:	b111      	cbz	r1, 800b56e <_reclaim_reent+0x72>
 800b568:	4620      	mov	r0, r4
 800b56a:	f000 f851 	bl	800b610 <_free_r>
 800b56e:	6a23      	ldr	r3, [r4, #32]
 800b570:	b1b3      	cbz	r3, 800b5a0 <_reclaim_reent+0xa4>
 800b572:	4620      	mov	r0, r4
 800b574:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b578:	4718      	bx	r3
 800b57a:	5949      	ldr	r1, [r1, r5]
 800b57c:	b941      	cbnz	r1, 800b590 <_reclaim_reent+0x94>
 800b57e:	3504      	adds	r5, #4
 800b580:	69e3      	ldr	r3, [r4, #28]
 800b582:	2d80      	cmp	r5, #128	; 0x80
 800b584:	68d9      	ldr	r1, [r3, #12]
 800b586:	d1f8      	bne.n	800b57a <_reclaim_reent+0x7e>
 800b588:	4620      	mov	r0, r4
 800b58a:	f000 f841 	bl	800b610 <_free_r>
 800b58e:	e7c0      	b.n	800b512 <_reclaim_reent+0x16>
 800b590:	680e      	ldr	r6, [r1, #0]
 800b592:	4620      	mov	r0, r4
 800b594:	f000 f83c 	bl	800b610 <_free_r>
 800b598:	4631      	mov	r1, r6
 800b59a:	e7ef      	b.n	800b57c <_reclaim_reent+0x80>
 800b59c:	2500      	movs	r5, #0
 800b59e:	e7ef      	b.n	800b580 <_reclaim_reent+0x84>
 800b5a0:	bd70      	pop	{r4, r5, r6, pc}
 800b5a2:	bf00      	nop
 800b5a4:	20000060 	.word	0x20000060

0800b5a8 <__libc_init_array>:
 800b5a8:	b570      	push	{r4, r5, r6, lr}
 800b5aa:	4d0d      	ldr	r5, [pc, #52]	; (800b5e0 <__libc_init_array+0x38>)
 800b5ac:	4c0d      	ldr	r4, [pc, #52]	; (800b5e4 <__libc_init_array+0x3c>)
 800b5ae:	1b64      	subs	r4, r4, r5
 800b5b0:	10a4      	asrs	r4, r4, #2
 800b5b2:	2600      	movs	r6, #0
 800b5b4:	42a6      	cmp	r6, r4
 800b5b6:	d109      	bne.n	800b5cc <__libc_init_array+0x24>
 800b5b8:	4d0b      	ldr	r5, [pc, #44]	; (800b5e8 <__libc_init_array+0x40>)
 800b5ba:	4c0c      	ldr	r4, [pc, #48]	; (800b5ec <__libc_init_array+0x44>)
 800b5bc:	f000 f880 	bl	800b6c0 <_init>
 800b5c0:	1b64      	subs	r4, r4, r5
 800b5c2:	10a4      	asrs	r4, r4, #2
 800b5c4:	2600      	movs	r6, #0
 800b5c6:	42a6      	cmp	r6, r4
 800b5c8:	d105      	bne.n	800b5d6 <__libc_init_array+0x2e>
 800b5ca:	bd70      	pop	{r4, r5, r6, pc}
 800b5cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5d0:	4798      	blx	r3
 800b5d2:	3601      	adds	r6, #1
 800b5d4:	e7ee      	b.n	800b5b4 <__libc_init_array+0xc>
 800b5d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5da:	4798      	blx	r3
 800b5dc:	3601      	adds	r6, #1
 800b5de:	e7f2      	b.n	800b5c6 <__libc_init_array+0x1e>
 800b5e0:	0800b880 	.word	0x0800b880
 800b5e4:	0800b880 	.word	0x0800b880
 800b5e8:	0800b880 	.word	0x0800b880
 800b5ec:	0800b884 	.word	0x0800b884

0800b5f0 <__retarget_lock_acquire_recursive>:
 800b5f0:	4770      	bx	lr

0800b5f2 <__retarget_lock_release_recursive>:
 800b5f2:	4770      	bx	lr

0800b5f4 <memcpy>:
 800b5f4:	440a      	add	r2, r1
 800b5f6:	4291      	cmp	r1, r2
 800b5f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b5fc:	d100      	bne.n	800b600 <memcpy+0xc>
 800b5fe:	4770      	bx	lr
 800b600:	b510      	push	{r4, lr}
 800b602:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b606:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b60a:	4291      	cmp	r1, r2
 800b60c:	d1f9      	bne.n	800b602 <memcpy+0xe>
 800b60e:	bd10      	pop	{r4, pc}

0800b610 <_free_r>:
 800b610:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b612:	2900      	cmp	r1, #0
 800b614:	d044      	beq.n	800b6a0 <_free_r+0x90>
 800b616:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b61a:	9001      	str	r0, [sp, #4]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	f1a1 0404 	sub.w	r4, r1, #4
 800b622:	bfb8      	it	lt
 800b624:	18e4      	addlt	r4, r4, r3
 800b626:	f000 f83f 	bl	800b6a8 <__malloc_lock>
 800b62a:	4a1e      	ldr	r2, [pc, #120]	; (800b6a4 <_free_r+0x94>)
 800b62c:	9801      	ldr	r0, [sp, #4]
 800b62e:	6813      	ldr	r3, [r2, #0]
 800b630:	b933      	cbnz	r3, 800b640 <_free_r+0x30>
 800b632:	6063      	str	r3, [r4, #4]
 800b634:	6014      	str	r4, [r2, #0]
 800b636:	b003      	add	sp, #12
 800b638:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b63c:	f000 b83a 	b.w	800b6b4 <__malloc_unlock>
 800b640:	42a3      	cmp	r3, r4
 800b642:	d908      	bls.n	800b656 <_free_r+0x46>
 800b644:	6825      	ldr	r5, [r4, #0]
 800b646:	1961      	adds	r1, r4, r5
 800b648:	428b      	cmp	r3, r1
 800b64a:	bf01      	itttt	eq
 800b64c:	6819      	ldreq	r1, [r3, #0]
 800b64e:	685b      	ldreq	r3, [r3, #4]
 800b650:	1949      	addeq	r1, r1, r5
 800b652:	6021      	streq	r1, [r4, #0]
 800b654:	e7ed      	b.n	800b632 <_free_r+0x22>
 800b656:	461a      	mov	r2, r3
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	b10b      	cbz	r3, 800b660 <_free_r+0x50>
 800b65c:	42a3      	cmp	r3, r4
 800b65e:	d9fa      	bls.n	800b656 <_free_r+0x46>
 800b660:	6811      	ldr	r1, [r2, #0]
 800b662:	1855      	adds	r5, r2, r1
 800b664:	42a5      	cmp	r5, r4
 800b666:	d10b      	bne.n	800b680 <_free_r+0x70>
 800b668:	6824      	ldr	r4, [r4, #0]
 800b66a:	4421      	add	r1, r4
 800b66c:	1854      	adds	r4, r2, r1
 800b66e:	42a3      	cmp	r3, r4
 800b670:	6011      	str	r1, [r2, #0]
 800b672:	d1e0      	bne.n	800b636 <_free_r+0x26>
 800b674:	681c      	ldr	r4, [r3, #0]
 800b676:	685b      	ldr	r3, [r3, #4]
 800b678:	6053      	str	r3, [r2, #4]
 800b67a:	440c      	add	r4, r1
 800b67c:	6014      	str	r4, [r2, #0]
 800b67e:	e7da      	b.n	800b636 <_free_r+0x26>
 800b680:	d902      	bls.n	800b688 <_free_r+0x78>
 800b682:	230c      	movs	r3, #12
 800b684:	6003      	str	r3, [r0, #0]
 800b686:	e7d6      	b.n	800b636 <_free_r+0x26>
 800b688:	6825      	ldr	r5, [r4, #0]
 800b68a:	1961      	adds	r1, r4, r5
 800b68c:	428b      	cmp	r3, r1
 800b68e:	bf04      	itt	eq
 800b690:	6819      	ldreq	r1, [r3, #0]
 800b692:	685b      	ldreq	r3, [r3, #4]
 800b694:	6063      	str	r3, [r4, #4]
 800b696:	bf04      	itt	eq
 800b698:	1949      	addeq	r1, r1, r5
 800b69a:	6021      	streq	r1, [r4, #0]
 800b69c:	6054      	str	r4, [r2, #4]
 800b69e:	e7ca      	b.n	800b636 <_free_r+0x26>
 800b6a0:	b003      	add	sp, #12
 800b6a2:	bd30      	pop	{r4, r5, pc}
 800b6a4:	20006030 	.word	0x20006030

0800b6a8 <__malloc_lock>:
 800b6a8:	4801      	ldr	r0, [pc, #4]	; (800b6b0 <__malloc_lock+0x8>)
 800b6aa:	f7ff bfa1 	b.w	800b5f0 <__retarget_lock_acquire_recursive>
 800b6ae:	bf00      	nop
 800b6b0:	2000602c 	.word	0x2000602c

0800b6b4 <__malloc_unlock>:
 800b6b4:	4801      	ldr	r0, [pc, #4]	; (800b6bc <__malloc_unlock+0x8>)
 800b6b6:	f7ff bf9c 	b.w	800b5f2 <__retarget_lock_release_recursive>
 800b6ba:	bf00      	nop
 800b6bc:	2000602c 	.word	0x2000602c

0800b6c0 <_init>:
 800b6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6c2:	bf00      	nop
 800b6c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6c6:	bc08      	pop	{r3}
 800b6c8:	469e      	mov	lr, r3
 800b6ca:	4770      	bx	lr

0800b6cc <_fini>:
 800b6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ce:	bf00      	nop
 800b6d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6d2:	bc08      	pop	{r3}
 800b6d4:	469e      	mov	lr, r3
 800b6d6:	4770      	bx	lr
