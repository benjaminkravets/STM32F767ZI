
uart_isr_dma_lowlevel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2b0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  0800b4b0  0800b4b0  0001b4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6ac  0800b6ac  000201b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b6ac  0800b6ac  0001b6ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b6b4  0800b6b4  000201b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6b4  0800b6b4  0001b6b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b6b8  0800b6b8  0001b6b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800b6bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000078  0800b734  00020078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000118  0800b7d4  00020118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005d88  200001b8  0800b874  000201b8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20005f40  0800b874  00025f40  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002c392  00000000  00000000  000201e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004ddd  00000000  00000000  0004c578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002098  00000000  00000000  00051358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001ea0  00000000  00000000  000533f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00007cd2  00000000  00000000  00055290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000240a2  00000000  00000000  0005cf62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001159fc  00000000  00000000  00081004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00196a00  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008e20  00000000  00000000  00196a50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001b8 	.word	0x200001b8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b498 	.word	0x0800b498

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001bc 	.word	0x200001bc
 800023c:	0800b498 	.word	0x0800b498

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002d0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d332      	bcc.n	80002c2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d314      	bcc.n	8000290 <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000284:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000288:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800028a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028e:	4770      	bx	lr

08000290 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000290:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000292:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000294:	d319      	bcc.n	80002ca <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000296:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000298:	1b12      	subs	r2, r2, r4

0800029a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800029a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80002a2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a4:	d1f9      	bne.n	800029a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a8:	d005      	beq.n	80002b6 <_No2ChunkNeeded>

080002aa <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002aa:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002ae:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002b2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b4:	d1f9      	bne.n	80002aa <_LoopCopyAfterWrapAround>

080002b6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80002b6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002ba:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002bc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002be:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002c0:	4770      	bx	lr

080002c2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002c2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002c4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002c6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c8:	d2cd      	bcs.n	8000266 <_Case4>

080002ca <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002ca:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ce:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002d0:	200001d4 	.word	0x200001d4

080002d4 <__aeabi_uldivmod>:
 80002d4:	b953      	cbnz	r3, 80002ec <__aeabi_uldivmod+0x18>
 80002d6:	b94a      	cbnz	r2, 80002ec <__aeabi_uldivmod+0x18>
 80002d8:	2900      	cmp	r1, #0
 80002da:	bf08      	it	eq
 80002dc:	2800      	cmpeq	r0, #0
 80002de:	bf1c      	itt	ne
 80002e0:	f04f 31ff 	movne.w	r1, #4294967295
 80002e4:	f04f 30ff 	movne.w	r0, #4294967295
 80002e8:	f000 b974 	b.w	80005d4 <__aeabi_idiv0>
 80002ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f4:	f000 f806 	bl	8000304 <__udivmoddi4>
 80002f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000300:	b004      	add	sp, #16
 8000302:	4770      	bx	lr

08000304 <__udivmoddi4>:
 8000304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000308:	9d08      	ldr	r5, [sp, #32]
 800030a:	4604      	mov	r4, r0
 800030c:	468e      	mov	lr, r1
 800030e:	2b00      	cmp	r3, #0
 8000310:	d14d      	bne.n	80003ae <__udivmoddi4+0xaa>
 8000312:	428a      	cmp	r2, r1
 8000314:	4694      	mov	ip, r2
 8000316:	d969      	bls.n	80003ec <__udivmoddi4+0xe8>
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	b152      	cbz	r2, 8000334 <__udivmoddi4+0x30>
 800031e:	fa01 f302 	lsl.w	r3, r1, r2
 8000322:	f1c2 0120 	rsb	r1, r2, #32
 8000326:	fa20 f101 	lsr.w	r1, r0, r1
 800032a:	fa0c fc02 	lsl.w	ip, ip, r2
 800032e:	ea41 0e03 	orr.w	lr, r1, r3
 8000332:	4094      	lsls	r4, r2
 8000334:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000338:	0c21      	lsrs	r1, r4, #16
 800033a:	fbbe f6f8 	udiv	r6, lr, r8
 800033e:	fa1f f78c 	uxth.w	r7, ip
 8000342:	fb08 e316 	mls	r3, r8, r6, lr
 8000346:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034a:	fb06 f107 	mul.w	r1, r6, r7
 800034e:	4299      	cmp	r1, r3
 8000350:	d90a      	bls.n	8000368 <__udivmoddi4+0x64>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 811f 	bcs.w	800059c <__udivmoddi4+0x298>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 811c 	bls.w	800059c <__udivmoddi4+0x298>
 8000364:	3e02      	subs	r6, #2
 8000366:	4463      	add	r3, ip
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 f707 	mul.w	r7, r0, r7
 800037c:	42a7      	cmp	r7, r4
 800037e:	d90a      	bls.n	8000396 <__udivmoddi4+0x92>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f100 33ff 	add.w	r3, r0, #4294967295
 8000388:	f080 810a 	bcs.w	80005a0 <__udivmoddi4+0x29c>
 800038c:	42a7      	cmp	r7, r4
 800038e:	f240 8107 	bls.w	80005a0 <__udivmoddi4+0x29c>
 8000392:	4464      	add	r4, ip
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039a:	1be4      	subs	r4, r4, r7
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa4>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xc2>
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	f000 80ef 	beq.w	8000596 <__udivmoddi4+0x292>
 80003b8:	2600      	movs	r6, #0
 80003ba:	e9c5 0100 	strd	r0, r1, [r5]
 80003be:	4630      	mov	r0, r6
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f683 	clz	r6, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d14a      	bne.n	8000464 <__udivmoddi4+0x160>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd4>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80f9 	bhi.w	80005ca <__udivmoddi4+0x2c6>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	469e      	mov	lr, r3
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa4>
 80003e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa4>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xec>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 8092 	bne.w	800051e <__udivmoddi4+0x21a>
 80003fa:	eba1 010c 	sub.w	r1, r1, ip
 80003fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000402:	fa1f fe8c 	uxth.w	lr, ip
 8000406:	2601      	movs	r6, #1
 8000408:	0c20      	lsrs	r0, r4, #16
 800040a:	fbb1 f3f7 	udiv	r3, r1, r7
 800040e:	fb07 1113 	mls	r1, r7, r3, r1
 8000412:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000416:	fb0e f003 	mul.w	r0, lr, r3
 800041a:	4288      	cmp	r0, r1
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x12c>
 800041e:	eb1c 0101 	adds.w	r1, ip, r1
 8000422:	f103 38ff 	add.w	r8, r3, #4294967295
 8000426:	d202      	bcs.n	800042e <__udivmoddi4+0x12a>
 8000428:	4288      	cmp	r0, r1
 800042a:	f200 80cb 	bhi.w	80005c4 <__udivmoddi4+0x2c0>
 800042e:	4643      	mov	r3, r8
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1110 	mls	r1, r7, r0, r1
 800043c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000440:	fb0e fe00 	mul.w	lr, lr, r0
 8000444:	45a6      	cmp	lr, r4
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x156>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d202      	bcs.n	8000458 <__udivmoddi4+0x154>
 8000452:	45a6      	cmp	lr, r4
 8000454:	f200 80bb 	bhi.w	80005ce <__udivmoddi4+0x2ca>
 8000458:	4608      	mov	r0, r1
 800045a:	eba4 040e 	sub.w	r4, r4, lr
 800045e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000462:	e79c      	b.n	800039e <__udivmoddi4+0x9a>
 8000464:	f1c6 0720 	rsb	r7, r6, #32
 8000468:	40b3      	lsls	r3, r6
 800046a:	fa22 fc07 	lsr.w	ip, r2, r7
 800046e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000472:	fa20 f407 	lsr.w	r4, r0, r7
 8000476:	fa01 f306 	lsl.w	r3, r1, r6
 800047a:	431c      	orrs	r4, r3
 800047c:	40f9      	lsrs	r1, r7
 800047e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000482:	fa00 f306 	lsl.w	r3, r0, r6
 8000486:	fbb1 f8f9 	udiv	r8, r1, r9
 800048a:	0c20      	lsrs	r0, r4, #16
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	fb09 1118 	mls	r1, r9, r8, r1
 8000494:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000498:	fb08 f00e 	mul.w	r0, r8, lr
 800049c:	4288      	cmp	r0, r1
 800049e:	fa02 f206 	lsl.w	r2, r2, r6
 80004a2:	d90b      	bls.n	80004bc <__udivmoddi4+0x1b8>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004ac:	f080 8088 	bcs.w	80005c0 <__udivmoddi4+0x2bc>
 80004b0:	4288      	cmp	r0, r1
 80004b2:	f240 8085 	bls.w	80005c0 <__udivmoddi4+0x2bc>
 80004b6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	1a09      	subs	r1, r1, r0
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c4:	fb09 1110 	mls	r1, r9, r0, r1
 80004c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d0:	458e      	cmp	lr, r1
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x1e2>
 80004d4:	eb1c 0101 	adds.w	r1, ip, r1
 80004d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80004dc:	d26c      	bcs.n	80005b8 <__udivmoddi4+0x2b4>
 80004de:	458e      	cmp	lr, r1
 80004e0:	d96a      	bls.n	80005b8 <__udivmoddi4+0x2b4>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4461      	add	r1, ip
 80004e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ea:	fba0 9402 	umull	r9, r4, r0, r2
 80004ee:	eba1 010e 	sub.w	r1, r1, lr
 80004f2:	42a1      	cmp	r1, r4
 80004f4:	46c8      	mov	r8, r9
 80004f6:	46a6      	mov	lr, r4
 80004f8:	d356      	bcc.n	80005a8 <__udivmoddi4+0x2a4>
 80004fa:	d053      	beq.n	80005a4 <__udivmoddi4+0x2a0>
 80004fc:	b15d      	cbz	r5, 8000516 <__udivmoddi4+0x212>
 80004fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000502:	eb61 010e 	sbc.w	r1, r1, lr
 8000506:	fa01 f707 	lsl.w	r7, r1, r7
 800050a:	fa22 f306 	lsr.w	r3, r2, r6
 800050e:	40f1      	lsrs	r1, r6
 8000510:	431f      	orrs	r7, r3
 8000512:	e9c5 7100 	strd	r7, r1, [r5]
 8000516:	2600      	movs	r6, #0
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	f1c2 0320 	rsb	r3, r2, #32
 8000522:	40d8      	lsrs	r0, r3
 8000524:	fa0c fc02 	lsl.w	ip, ip, r2
 8000528:	fa21 f303 	lsr.w	r3, r1, r3
 800052c:	4091      	lsls	r1, r2
 800052e:	4301      	orrs	r1, r0
 8000530:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000534:	fa1f fe8c 	uxth.w	lr, ip
 8000538:	fbb3 f0f7 	udiv	r0, r3, r7
 800053c:	fb07 3610 	mls	r6, r7, r0, r3
 8000540:	0c0b      	lsrs	r3, r1, #16
 8000542:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000546:	fb00 f60e 	mul.w	r6, r0, lr
 800054a:	429e      	cmp	r6, r3
 800054c:	fa04 f402 	lsl.w	r4, r4, r2
 8000550:	d908      	bls.n	8000564 <__udivmoddi4+0x260>
 8000552:	eb1c 0303 	adds.w	r3, ip, r3
 8000556:	f100 38ff 	add.w	r8, r0, #4294967295
 800055a:	d22f      	bcs.n	80005bc <__udivmoddi4+0x2b8>
 800055c:	429e      	cmp	r6, r3
 800055e:	d92d      	bls.n	80005bc <__udivmoddi4+0x2b8>
 8000560:	3802      	subs	r0, #2
 8000562:	4463      	add	r3, ip
 8000564:	1b9b      	subs	r3, r3, r6
 8000566:	b289      	uxth	r1, r1
 8000568:	fbb3 f6f7 	udiv	r6, r3, r7
 800056c:	fb07 3316 	mls	r3, r7, r6, r3
 8000570:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000574:	fb06 f30e 	mul.w	r3, r6, lr
 8000578:	428b      	cmp	r3, r1
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x28a>
 800057c:	eb1c 0101 	adds.w	r1, ip, r1
 8000580:	f106 38ff 	add.w	r8, r6, #4294967295
 8000584:	d216      	bcs.n	80005b4 <__udivmoddi4+0x2b0>
 8000586:	428b      	cmp	r3, r1
 8000588:	d914      	bls.n	80005b4 <__udivmoddi4+0x2b0>
 800058a:	3e02      	subs	r6, #2
 800058c:	4461      	add	r1, ip
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000594:	e738      	b.n	8000408 <__udivmoddi4+0x104>
 8000596:	462e      	mov	r6, r5
 8000598:	4628      	mov	r0, r5
 800059a:	e705      	b.n	80003a8 <__udivmoddi4+0xa4>
 800059c:	4606      	mov	r6, r0
 800059e:	e6e3      	b.n	8000368 <__udivmoddi4+0x64>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6f8      	b.n	8000396 <__udivmoddi4+0x92>
 80005a4:	454b      	cmp	r3, r9
 80005a6:	d2a9      	bcs.n	80004fc <__udivmoddi4+0x1f8>
 80005a8:	ebb9 0802 	subs.w	r8, r9, r2
 80005ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b0:	3801      	subs	r0, #1
 80005b2:	e7a3      	b.n	80004fc <__udivmoddi4+0x1f8>
 80005b4:	4646      	mov	r6, r8
 80005b6:	e7ea      	b.n	800058e <__udivmoddi4+0x28a>
 80005b8:	4620      	mov	r0, r4
 80005ba:	e794      	b.n	80004e6 <__udivmoddi4+0x1e2>
 80005bc:	4640      	mov	r0, r8
 80005be:	e7d1      	b.n	8000564 <__udivmoddi4+0x260>
 80005c0:	46d0      	mov	r8, sl
 80005c2:	e77b      	b.n	80004bc <__udivmoddi4+0x1b8>
 80005c4:	3b02      	subs	r3, #2
 80005c6:	4461      	add	r1, ip
 80005c8:	e732      	b.n	8000430 <__udivmoddi4+0x12c>
 80005ca:	4630      	mov	r0, r6
 80005cc:	e709      	b.n	80003e2 <__udivmoddi4+0xde>
 80005ce:	4464      	add	r4, ip
 80005d0:	3802      	subs	r0, #2
 80005d2:	e742      	b.n	800045a <__udivmoddi4+0x156>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80005de:	4b26      	ldr	r3, [pc, #152]	; (8000678 <_DoInit+0xa0>)
 80005e0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80005e2:	22a8      	movs	r2, #168	; 0xa8
 80005e4:	2100      	movs	r1, #0
 80005e6:	6838      	ldr	r0, [r7, #0]
 80005e8:	f00a fe8c 	bl	800b304 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	2203      	movs	r2, #3
 80005f0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	2203      	movs	r2, #3
 80005f6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	4a20      	ldr	r2, [pc, #128]	; (800067c <_DoInit+0xa4>)
 80005fc:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	4a1f      	ldr	r2, [pc, #124]	; (8000680 <_DoInit+0xa8>)
 8000602:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800060a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	2200      	movs	r2, #0
 8000610:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	2200      	movs	r2, #0
 8000616:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	2200      	movs	r2, #0
 800061c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	4a16      	ldr	r2, [pc, #88]	; (800067c <_DoInit+0xa4>)
 8000622:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	4a17      	ldr	r2, [pc, #92]	; (8000684 <_DoInit+0xac>)
 8000628:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	2210      	movs	r2, #16
 800062e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	2200      	movs	r2, #0
 8000634:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	2200      	movs	r2, #0
 800063a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	2200      	movs	r2, #0
 8000640:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000642:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	e00c      	b.n	8000666 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f1c3 030f 	rsb	r3, r3, #15
 8000652:	4a0d      	ldr	r2, [pc, #52]	; (8000688 <_DoInit+0xb0>)
 8000654:	5cd1      	ldrb	r1, [r2, r3]
 8000656:	683a      	ldr	r2, [r7, #0]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4413      	add	r3, r2
 800065c:	460a      	mov	r2, r1
 800065e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	3301      	adds	r3, #1
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2b0f      	cmp	r3, #15
 800066a:	d9ef      	bls.n	800064c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800066c:	f3bf 8f5f 	dmb	sy
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	200001d4 	.word	0x200001d4
 800067c:	0800b4b0 	.word	0x0800b4b0
 8000680:	2000027c 	.word	0x2000027c
 8000684:	2000067c 	.word	0x2000067c
 8000688:	0800b58c 	.word	0x0800b58c

0800068c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b08c      	sub	sp, #48	; 0x30
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8000698:	4b3e      	ldr	r3, [pc, #248]	; (8000794 <SEGGER_RTT_ReadNoLock+0x108>)
 800069a:	623b      	str	r3, [r7, #32]
 800069c:	6a3b      	ldr	r3, [r7, #32]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d101      	bne.n	80006aa <SEGGER_RTT_ReadNoLock+0x1e>
 80006a6:	f7ff ff97 	bl	80005d8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80006aa:	68fa      	ldr	r2, [r7, #12]
 80006ac:	4613      	mov	r3, r2
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	4413      	add	r3, r2
 80006b2:	00db      	lsls	r3, r3, #3
 80006b4:	3360      	adds	r3, #96	; 0x60
 80006b6:	4a37      	ldr	r2, [pc, #220]	; (8000794 <SEGGER_RTT_ReadNoLock+0x108>)
 80006b8:	4413      	add	r3, r2
 80006ba:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	691b      	ldr	r3, [r3, #16]
 80006c4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80006c6:	69fb      	ldr	r3, [r7, #28]
 80006c8:	68db      	ldr	r3, [r3, #12]
 80006ca:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80006cc:	2300      	movs	r3, #0
 80006ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80006d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006d2:	69bb      	ldr	r3, [r7, #24]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d92b      	bls.n	8000730 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80006d8:	69fb      	ldr	r3, [r7, #28]
 80006da:	689a      	ldr	r2, [r3, #8]
 80006dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006de:	1ad3      	subs	r3, r2, r3
 80006e0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80006e2:	697a      	ldr	r2, [r7, #20]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4293      	cmp	r3, r2
 80006e8:	bf28      	it	cs
 80006ea:	4613      	movcs	r3, r2
 80006ec:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	685a      	ldr	r2, [r3, #4]
 80006f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006f4:	4413      	add	r3, r2
 80006f6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80006f8:	697a      	ldr	r2, [r7, #20]
 80006fa:	6939      	ldr	r1, [r7, #16]
 80006fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006fe:	f00a fdf3 	bl	800b2e8 <memcpy>
    NumBytesRead += NumBytesRem;
 8000702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	4413      	add	r3, r2
 8000708:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800070a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	4413      	add	r3, r2
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	1ad3      	subs	r3, r2, r3
 8000718:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800071a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	4413      	add	r3, r2
 8000720:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	689b      	ldr	r3, [r3, #8]
 8000726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000728:	429a      	cmp	r2, r3
 800072a:	d101      	bne.n	8000730 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800072c:	2300      	movs	r3, #0
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8000730:	69ba      	ldr	r2, [r7, #24]
 8000732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000734:	1ad3      	subs	r3, r2, r3
 8000736:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8000738:	697a      	ldr	r2, [r7, #20]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4293      	cmp	r3, r2
 800073e:	bf28      	it	cs
 8000740:	4613      	movcs	r3, r2
 8000742:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d019      	beq.n	800077e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	685a      	ldr	r2, [r3, #4]
 800074e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000750:	4413      	add	r3, r2
 8000752:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8000754:	697a      	ldr	r2, [r7, #20]
 8000756:	6939      	ldr	r1, [r7, #16]
 8000758:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800075a:	f00a fdc5 	bl	800b2e8 <memcpy>
    NumBytesRead += NumBytesRem;
 800075e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	4413      	add	r3, r2
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8000766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	4413      	add	r3, r2
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	1ad3      	subs	r3, r2, r3
 8000774:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8000776:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	4413      	add	r3, r2
 800077c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800077e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000780:	2b00      	cmp	r3, #0
 8000782:	d002      	beq.n	800078a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000788:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800078a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800078c:	4618      	mov	r0, r3
 800078e:	3730      	adds	r7, #48	; 0x30
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200001d4 	.word	0x200001d4

08000798 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
 80007a4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80007a6:	4b3d      	ldr	r3, [pc, #244]	; (800089c <SEGGER_RTT_AllocUpBuffer+0x104>)
 80007a8:	61bb      	str	r3, [r7, #24]
 80007aa:	69bb      	ldr	r3, [r7, #24]
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d101      	bne.n	80007b8 <SEGGER_RTT_AllocUpBuffer+0x20>
 80007b4:	f7ff ff10 	bl	80005d8 <_DoInit>
  SEGGER_RTT_LOCK();
 80007b8:	f3ef 8311 	mrs	r3, BASEPRI
 80007bc:	f04f 0120 	mov.w	r1, #32
 80007c0:	f381 8811 	msr	BASEPRI, r1
 80007c4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80007c6:	4b35      	ldr	r3, [pc, #212]	; (800089c <SEGGER_RTT_AllocUpBuffer+0x104>)
 80007c8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80007ce:	6939      	ldr	r1, [r7, #16]
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	1c5a      	adds	r2, r3, #1
 80007d4:	4613      	mov	r3, r2
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	4413      	add	r3, r2
 80007da:	00db      	lsls	r3, r3, #3
 80007dc:	440b      	add	r3, r1
 80007de:	3304      	adds	r3, #4
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d008      	beq.n	80007f8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	3301      	adds	r3, #1
 80007ea:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80007ec:	693b      	ldr	r3, [r7, #16]
 80007ee:	691b      	ldr	r3, [r3, #16]
 80007f0:	69fa      	ldr	r2, [r7, #28]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	dbeb      	blt.n	80007ce <SEGGER_RTT_AllocUpBuffer+0x36>
 80007f6:	e000      	b.n	80007fa <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80007f8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	691b      	ldr	r3, [r3, #16]
 80007fe:	69fa      	ldr	r2, [r7, #28]
 8000800:	429a      	cmp	r2, r3
 8000802:	da3f      	bge.n	8000884 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8000804:	6939      	ldr	r1, [r7, #16]
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	1c5a      	adds	r2, r3, #1
 800080a:	4613      	mov	r3, r2
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	4413      	add	r3, r2
 8000810:	00db      	lsls	r3, r3, #3
 8000812:	440b      	add	r3, r1
 8000814:	68fa      	ldr	r2, [r7, #12]
 8000816:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8000818:	6939      	ldr	r1, [r7, #16]
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	1c5a      	adds	r2, r3, #1
 800081e:	4613      	mov	r3, r2
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	4413      	add	r3, r2
 8000824:	00db      	lsls	r3, r3, #3
 8000826:	440b      	add	r3, r1
 8000828:	3304      	adds	r3, #4
 800082a:	68ba      	ldr	r2, [r7, #8]
 800082c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800082e:	6939      	ldr	r1, [r7, #16]
 8000830:	69fa      	ldr	r2, [r7, #28]
 8000832:	4613      	mov	r3, r2
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	4413      	add	r3, r2
 8000838:	00db      	lsls	r3, r3, #3
 800083a:	440b      	add	r3, r1
 800083c:	3320      	adds	r3, #32
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8000842:	6939      	ldr	r1, [r7, #16]
 8000844:	69fa      	ldr	r2, [r7, #28]
 8000846:	4613      	mov	r3, r2
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	4413      	add	r3, r2
 800084c:	00db      	lsls	r3, r3, #3
 800084e:	440b      	add	r3, r1
 8000850:	3328      	adds	r3, #40	; 0x28
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8000856:	6939      	ldr	r1, [r7, #16]
 8000858:	69fa      	ldr	r2, [r7, #28]
 800085a:	4613      	mov	r3, r2
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	4413      	add	r3, r2
 8000860:	00db      	lsls	r3, r3, #3
 8000862:	440b      	add	r3, r1
 8000864:	3324      	adds	r3, #36	; 0x24
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800086a:	6939      	ldr	r1, [r7, #16]
 800086c:	69fa      	ldr	r2, [r7, #28]
 800086e:	4613      	mov	r3, r2
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	4413      	add	r3, r2
 8000874:	00db      	lsls	r3, r3, #3
 8000876:	440b      	add	r3, r1
 8000878:	332c      	adds	r3, #44	; 0x2c
 800087a:	683a      	ldr	r2, [r7, #0]
 800087c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800087e:	f3bf 8f5f 	dmb	sy
 8000882:	e002      	b.n	800088a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8000884:	f04f 33ff 	mov.w	r3, #4294967295
 8000888:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8000890:	69fb      	ldr	r3, [r7, #28]
}
 8000892:	4618      	mov	r0, r3
 8000894:	3720      	adds	r7, #32
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200001d4 	.word	0x200001d4

080008a0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	; 0x28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
 80008ac:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80008ae:	4b21      	ldr	r3, [pc, #132]	; (8000934 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80008b0:	623b      	str	r3, [r7, #32]
 80008b2:	6a3b      	ldr	r3, [r7, #32]
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d101      	bne.n	80008c0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80008bc:	f7ff fe8c 	bl	80005d8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80008c0:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80008c2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	2b02      	cmp	r3, #2
 80008c8:	d82c      	bhi.n	8000924 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80008ca:	f3ef 8311 	mrs	r3, BASEPRI
 80008ce:	f04f 0120 	mov.w	r1, #32
 80008d2:	f381 8811 	msr	BASEPRI, r1
 80008d6:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80008d8:	68fa      	ldr	r2, [r7, #12]
 80008da:	4613      	mov	r3, r2
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	4413      	add	r3, r2
 80008e0:	00db      	lsls	r3, r3, #3
 80008e2:	3360      	adds	r3, #96	; 0x60
 80008e4:	69fa      	ldr	r2, [r7, #28]
 80008e6:	4413      	add	r3, r2
 80008e8:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d00e      	beq.n	800090e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	68ba      	ldr	r2, [r7, #8]
 80008f4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	683a      	ldr	r2, [r7, #0]
 8000900:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000912:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000914:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8000918:	69bb      	ldr	r3, [r7, #24]
 800091a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
 8000922:	e002      	b.n	800092a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8000924:	f04f 33ff 	mov.w	r3, #4294967295
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800092c:	4618      	mov	r0, r3
 800092e:	3728      	adds	r7, #40	; 0x28
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200001d4 	.word	0x200001d4

08000938 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8000938:	b480      	push	{r7}
 800093a:	b087      	sub	sp, #28
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	1c5a      	adds	r2, r3, #1
 800094c:	60fa      	str	r2, [r7, #12]
 800094e:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2b80      	cmp	r3, #128	; 0x80
 8000954:	d90a      	bls.n	800096c <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8000956:	2380      	movs	r3, #128	; 0x80
 8000958:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 800095a:	e007      	b.n	800096c <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 800095c:	68ba      	ldr	r2, [r7, #8]
 800095e:	1c53      	adds	r3, r2, #1
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	1c59      	adds	r1, r3, #1
 8000966:	60f9      	str	r1, [r7, #12]
 8000968:	7812      	ldrb	r2, [r2, #0]
 800096a:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	1e5a      	subs	r2, r3, #1
 8000970:	607a      	str	r2, [r7, #4]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d003      	beq.n	800097e <_EncodeStr+0x46>
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d1ee      	bne.n	800095c <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800097e:	68ba      	ldr	r2, [r7, #8]
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	b2da      	uxtb	r2, r3
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 800098a:	68fb      	ldr	r3, [r7, #12]
}
 800098c:	4618      	mov	r0, r3
 800098e:	371c      	adds	r7, #28
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3307      	adds	r3, #7
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80009b6:	4b35      	ldr	r3, [pc, #212]	; (8000a8c <_HandleIncomingPacket+0xdc>)
 80009b8:	7e1b      	ldrb	r3, [r3, #24]
 80009ba:	4618      	mov	r0, r3
 80009bc:	1cfb      	adds	r3, r7, #3
 80009be:	2201      	movs	r2, #1
 80009c0:	4619      	mov	r1, r3
 80009c2:	f7ff fe63 	bl	800068c <SEGGER_RTT_ReadNoLock>
 80009c6:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d052      	beq.n	8000a74 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 80009ce:	78fb      	ldrb	r3, [r7, #3]
 80009d0:	2b80      	cmp	r3, #128	; 0x80
 80009d2:	d031      	beq.n	8000a38 <_HandleIncomingPacket+0x88>
 80009d4:	2b80      	cmp	r3, #128	; 0x80
 80009d6:	dc40      	bgt.n	8000a5a <_HandleIncomingPacket+0xaa>
 80009d8:	2b07      	cmp	r3, #7
 80009da:	dc15      	bgt.n	8000a08 <_HandleIncomingPacket+0x58>
 80009dc:	2b00      	cmp	r3, #0
 80009de:	dd3c      	ble.n	8000a5a <_HandleIncomingPacket+0xaa>
 80009e0:	3b01      	subs	r3, #1
 80009e2:	2b06      	cmp	r3, #6
 80009e4:	d839      	bhi.n	8000a5a <_HandleIncomingPacket+0xaa>
 80009e6:	a201      	add	r2, pc, #4	; (adr r2, 80009ec <_HandleIncomingPacket+0x3c>)
 80009e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ec:	08000a0f 	.word	0x08000a0f
 80009f0:	08000a15 	.word	0x08000a15
 80009f4:	08000a1b 	.word	0x08000a1b
 80009f8:	08000a21 	.word	0x08000a21
 80009fc:	08000a27 	.word	0x08000a27
 8000a00:	08000a2d 	.word	0x08000a2d
 8000a04:	08000a33 	.word	0x08000a33
 8000a08:	2b7f      	cmp	r3, #127	; 0x7f
 8000a0a:	d035      	beq.n	8000a78 <_HandleIncomingPacket+0xc8>
 8000a0c:	e025      	b.n	8000a5a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8000a0e:	f000 fbe5 	bl	80011dc <SEGGER_SYSVIEW_Start>
      break;
 8000a12:	e036      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8000a14:	f000 fc9c 	bl	8001350 <SEGGER_SYSVIEW_Stop>
      break;
 8000a18:	e033      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8000a1a:	f000 fe75 	bl	8001708 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8000a1e:	e030      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8000a20:	f000 fe3a 	bl	8001698 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8000a24:	e02d      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8000a26:	f000 fcb9 	bl	800139c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8000a2a:	e02a      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8000a2c:	f000 ffa4 	bl	8001978 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8000a30:	e027      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8000a32:	f000 ff83 	bl	800193c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8000a36:	e024      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <_HandleIncomingPacket+0xdc>)
 8000a3a:	7e1b      	ldrb	r3, [r3, #24]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	1cfb      	adds	r3, r7, #3
 8000a40:	2201      	movs	r2, #1
 8000a42:	4619      	mov	r1, r3
 8000a44:	f7ff fe22 	bl	800068c <SEGGER_RTT_ReadNoLock>
 8000a48:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d015      	beq.n	8000a7c <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8000a50:	78fb      	ldrb	r3, [r7, #3]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 fee8 	bl	8001828 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8000a58:	e010      	b.n	8000a7c <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8000a5a:	78fb      	ldrb	r3, [r7, #3]
 8000a5c:	b25b      	sxtb	r3, r3
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	da0e      	bge.n	8000a80 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000a62:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <_HandleIncomingPacket+0xdc>)
 8000a64:	7e1b      	ldrb	r3, [r3, #24]
 8000a66:	4618      	mov	r0, r3
 8000a68:	1cfb      	adds	r3, r7, #3
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f7ff fe0d 	bl	800068c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8000a72:	e005      	b.n	8000a80 <_HandleIncomingPacket+0xd0>
    }
  }
 8000a74:	bf00      	nop
 8000a76:	e004      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
      break;
 8000a78:	bf00      	nop
 8000a7a:	e002      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
      break;
 8000a7c:	bf00      	nop
 8000a7e:	e000      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
      break;
 8000a80:	bf00      	nop
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000a94 	.word	0x20000a94

08000a90 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08c      	sub	sp, #48	; 0x30
 8000a94:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8000a96:	2301      	movs	r3, #1
 8000a98:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000aa4:	4b31      	ldr	r3, [pc, #196]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000aa6:	695b      	ldr	r3, [r3, #20]
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000aaa:	e00b      	b.n	8000ac4 <_TrySendOverflowPacket+0x34>
 8000aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ab2:	1c59      	adds	r1, r3, #1
 8000ab4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8000ab6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000aba:	b2d2      	uxtb	r2, r2
 8000abc:	701a      	strb	r2, [r3, #0]
 8000abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac0:	09db      	lsrs	r3, r3, #7
 8000ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ac8:	d8f0      	bhi.n	8000aac <_TrySendOverflowPacket+0x1c>
 8000aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000acc:	1c5a      	adds	r2, r3, #1
 8000ace:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000ad0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ad2:	b2d2      	uxtb	r2, r2
 8000ad4:	701a      	strb	r2, [r3, #0]
 8000ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ad8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000ada:	4b25      	ldr	r3, [pc, #148]	; (8000b70 <_TrySendOverflowPacket+0xe0>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000ae0:	4b22      	ldr	r3, [pc, #136]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	1ad3      	subs	r3, r2, r3
 8000ae8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	623b      	str	r3, [r7, #32]
 8000af2:	e00b      	b.n	8000b0c <_TrySendOverflowPacket+0x7c>
 8000af4:	6a3b      	ldr	r3, [r7, #32]
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afa:	1c59      	adds	r1, r3, #1
 8000afc:	6279      	str	r1, [r7, #36]	; 0x24
 8000afe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000b02:	b2d2      	uxtb	r2, r2
 8000b04:	701a      	strb	r2, [r3, #0]
 8000b06:	6a3b      	ldr	r3, [r7, #32]
 8000b08:	09db      	lsrs	r3, r3, #7
 8000b0a:	623b      	str	r3, [r7, #32]
 8000b0c:	6a3b      	ldr	r3, [r7, #32]
 8000b0e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b10:	d8f0      	bhi.n	8000af4 <_TrySendOverflowPacket+0x64>
 8000b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b14:	1c5a      	adds	r2, r3, #1
 8000b16:	627a      	str	r2, [r7, #36]	; 0x24
 8000b18:	6a3a      	ldr	r2, [r7, #32]
 8000b1a:	b2d2      	uxtb	r2, r2
 8000b1c:	701a      	strb	r2, [r3, #0]
 8000b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b20:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8000b22:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b24:	785b      	ldrb	r3, [r3, #1]
 8000b26:	4618      	mov	r0, r3
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	69fa      	ldr	r2, [r7, #28]
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	461a      	mov	r2, r3
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	4619      	mov	r1, r3
 8000b34:	f7ff fb84 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d009      	beq.n	8000b56 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000b42:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	3b01      	subs	r3, #1
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b52:	701a      	strb	r2, [r3, #0]
 8000b54:	e004      	b.n	8000b60 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8000b56:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	4a03      	ldr	r2, [pc, #12]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b5e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8000b60:	693b      	ldr	r3, [r7, #16]
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3730      	adds	r7, #48	; 0x30
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000a94 	.word	0x20000a94
 8000b70:	e0001004 	.word	0xe0001004

08000b74 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8000b80:	4b98      	ldr	r3, [pc, #608]	; (8000de4 <_SendPacket+0x270>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d010      	beq.n	8000baa <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8000b88:	4b96      	ldr	r3, [pc, #600]	; (8000de4 <_SendPacket+0x270>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	f000 812d 	beq.w	8000dec <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8000b92:	4b94      	ldr	r3, [pc, #592]	; (8000de4 <_SendPacket+0x270>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d109      	bne.n	8000bae <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8000b9a:	f7ff ff79 	bl	8000a90 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8000b9e:	4b91      	ldr	r3, [pc, #580]	; (8000de4 <_SendPacket+0x270>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	f040 8124 	bne.w	8000df0 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8000ba8:	e001      	b.n	8000bae <_SendPacket+0x3a>
    goto Send;
 8000baa:	bf00      	nop
 8000bac:	e000      	b.n	8000bb0 <_SendPacket+0x3c>
Send:
 8000bae:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b1f      	cmp	r3, #31
 8000bb4:	d809      	bhi.n	8000bca <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8000bb6:	4b8b      	ldr	r3, [pc, #556]	; (8000de4 <_SendPacket+0x270>)
 8000bb8:	69da      	ldr	r2, [r3, #28]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8000bc0:	f003 0301 	and.w	r3, r3, #1
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	f040 8115 	bne.w	8000df4 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2b17      	cmp	r3, #23
 8000bce:	d807      	bhi.n	8000be0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	701a      	strb	r2, [r3, #0]
 8000bde:	e0c4      	b.n	8000d6a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8000be0:	68ba      	ldr	r2, [r7, #8]
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	2b7f      	cmp	r3, #127	; 0x7f
 8000bec:	d912      	bls.n	8000c14 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	09da      	lsrs	r2, r3, #7
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	3a01      	subs	r2, #1
 8000c06:	60fa      	str	r2, [r7, #12]
 8000c08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	701a      	strb	r2, [r3, #0]
 8000c12:	e006      	b.n	8000c22 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2b7e      	cmp	r3, #126	; 0x7e
 8000c26:	d807      	bhi.n	8000c38 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	701a      	strb	r2, [r3, #0]
 8000c36:	e098      	b.n	8000d6a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c3e:	d212      	bcs.n	8000c66 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	09da      	lsrs	r2, r3, #7
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	b2d2      	uxtb	r2, r2
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	3a01      	subs	r2, #1
 8000c58:	60fa      	str	r2, [r7, #12]
 8000c5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	701a      	strb	r2, [r3, #0]
 8000c64:	e081      	b.n	8000d6a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000c6c:	d21d      	bcs.n	8000caa <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	0b9a      	lsrs	r2, r3, #14
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	3b01      	subs	r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	09db      	lsrs	r3, r3, #7
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	68fa      	ldr	r2, [r7, #12]
 8000c86:	3a01      	subs	r2, #1
 8000c88:	60fa      	str	r2, [r7, #12]
 8000c8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	68fa      	ldr	r2, [r7, #12]
 8000c9a:	3a01      	subs	r2, #1
 8000c9c:	60fa      	str	r2, [r7, #12]
 8000c9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	701a      	strb	r2, [r3, #0]
 8000ca8:	e05f      	b.n	8000d6a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000cb0:	d228      	bcs.n	8000d04 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	0d5a      	lsrs	r2, r3, #21
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	b2d2      	uxtb	r2, r2
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	0b9b      	lsrs	r3, r3, #14
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	68fa      	ldr	r2, [r7, #12]
 8000cca:	3a01      	subs	r2, #1
 8000ccc:	60fa      	str	r2, [r7, #12]
 8000cce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	09db      	lsrs	r3, r3, #7
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	3a01      	subs	r2, #1
 8000ce2:	60fa      	str	r2, [r7, #12]
 8000ce4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	3a01      	subs	r2, #1
 8000cf6:	60fa      	str	r2, [r7, #12]
 8000cf8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	701a      	strb	r2, [r3, #0]
 8000d02:	e032      	b.n	8000d6a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	0f1a      	lsrs	r2, r3, #28
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	0d5b      	lsrs	r3, r3, #21
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	3a01      	subs	r2, #1
 8000d1e:	60fa      	str	r2, [r7, #12]
 8000d20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	0b9b      	lsrs	r3, r3, #14
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	68fa      	ldr	r2, [r7, #12]
 8000d32:	3a01      	subs	r2, #1
 8000d34:	60fa      	str	r2, [r7, #12]
 8000d36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	09db      	lsrs	r3, r3, #7
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	60fa      	str	r2, [r7, #12]
 8000d4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	3a01      	subs	r2, #1
 8000d5e:	60fa      	str	r2, [r7, #12]
 8000d60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000d6a:	4b1f      	ldr	r3, [pc, #124]	; (8000de8 <_SendPacket+0x274>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000d70:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <_SendPacket+0x270>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	623b      	str	r3, [r7, #32]
 8000d82:	e00b      	b.n	8000d9c <_SendPacket+0x228>
 8000d84:	6a3b      	ldr	r3, [r7, #32]
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8a:	1c59      	adds	r1, r3, #1
 8000d8c:	6279      	str	r1, [r7, #36]	; 0x24
 8000d8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	701a      	strb	r2, [r3, #0]
 8000d96:	6a3b      	ldr	r3, [r7, #32]
 8000d98:	09db      	lsrs	r3, r3, #7
 8000d9a:	623b      	str	r3, [r7, #32]
 8000d9c:	6a3b      	ldr	r3, [r7, #32]
 8000d9e:	2b7f      	cmp	r3, #127	; 0x7f
 8000da0:	d8f0      	bhi.n	8000d84 <_SendPacket+0x210>
 8000da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da4:	1c5a      	adds	r2, r3, #1
 8000da6:	627a      	str	r2, [r7, #36]	; 0x24
 8000da8:	6a3a      	ldr	r2, [r7, #32]
 8000daa:	b2d2      	uxtb	r2, r2
 8000dac:	701a      	strb	r2, [r3, #0]
 8000dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db0:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <_SendPacket+0x270>)
 8000db4:	785b      	ldrb	r3, [r3, #1]
 8000db6:	4618      	mov	r0, r3
 8000db8:	68ba      	ldr	r2, [r7, #8]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	68f9      	ldr	r1, [r7, #12]
 8000dc2:	f7ff fa3d 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000dc6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d003      	beq.n	8000dd6 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000dce:	4a05      	ldr	r2, [pc, #20]	; (8000de4 <_SendPacket+0x270>)
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	60d3      	str	r3, [r2, #12]
 8000dd4:	e00f      	b.n	8000df6 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8000dd6:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <_SendPacket+0x270>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4b01      	ldr	r3, [pc, #4]	; (8000de4 <_SendPacket+0x270>)
 8000de0:	701a      	strb	r2, [r3, #0]
 8000de2:	e008      	b.n	8000df6 <_SendPacket+0x282>
 8000de4:	20000a94 	.word	0x20000a94
 8000de8:	e0001004 	.word	0xe0001004
    goto SendDone;
 8000dec:	bf00      	nop
 8000dee:	e002      	b.n	8000df6 <_SendPacket+0x282>
      goto SendDone;
 8000df0:	bf00      	nop
 8000df2:	e000      	b.n	8000df6 <_SendPacket+0x282>
      goto SendDone;
 8000df4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <_SendPacket+0x2d4>)
 8000df8:	7e1b      	ldrb	r3, [r3, #24]
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4a13      	ldr	r2, [pc, #76]	; (8000e4c <_SendPacket+0x2d8>)
 8000dfe:	460b      	mov	r3, r1
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	440b      	add	r3, r1
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	4413      	add	r3, r2
 8000e08:	336c      	adds	r3, #108	; 0x6c
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <_SendPacket+0x2d4>)
 8000e0e:	7e1b      	ldrb	r3, [r3, #24]
 8000e10:	4618      	mov	r0, r3
 8000e12:	490e      	ldr	r1, [pc, #56]	; (8000e4c <_SendPacket+0x2d8>)
 8000e14:	4603      	mov	r3, r0
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	4403      	add	r3, r0
 8000e1a:	00db      	lsls	r3, r3, #3
 8000e1c:	440b      	add	r3, r1
 8000e1e:	3370      	adds	r3, #112	; 0x70
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d00b      	beq.n	8000e3e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8000e26:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <_SendPacket+0x2d4>)
 8000e28:	789b      	ldrb	r3, [r3, #2]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d107      	bne.n	8000e3e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <_SendPacket+0x2d4>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8000e34:	f7ff fdbc 	bl	80009b0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <_SendPacket+0x2d4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8000e3e:	bf00      	nop
 8000e40:	3728      	adds	r7, #40	; 0x28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000a94 	.word	0x20000a94
 8000e4c:	200001d4 	.word	0x200001d4

08000e50 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b0a2      	sub	sp, #136	; 0x88
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
#endif
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 8000e66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e68:	1c5a      	adds	r2, r3, #1
 8000e6a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 8000e72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d01d      	beq.n	8000eb6 <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 8000e7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000e7e:	2b25      	cmp	r3, #37	; 0x25
 8000e80:	d1f1      	bne.n	8000e66 <_VPrintHost+0x16>
      c = *p;
 8000e82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = (U32)(va_arg(*pParamList, int));
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	1d19      	adds	r1, r3, #4
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	6011      	str	r1, [r2, #0]
 8000e94:	6819      	ldr	r1, [r3, #0]
 8000e96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000e9a:	1c5a      	adds	r2, r3, #1
 8000e9c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8000ea0:	460a      	mov	r2, r1
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	3388      	adds	r3, #136	; 0x88
 8000ea6:	443b      	add	r3, r7
 8000ea8:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 8000eac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000eb0:	2b10      	cmp	r3, #16
 8000eb2:	d002      	beq.n	8000eba <_VPrintHost+0x6a>
    c = *p++;
 8000eb4:	e7d7      	b.n	8000e66 <_VPrintHost+0x16>
      break;
 8000eb6:	bf00      	nop
 8000eb8:	e000      	b.n	8000ebc <_VPrintHost+0x6c>
        break;
 8000eba:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 8000ebc:	f3ef 8311 	mrs	r3, BASEPRI
 8000ec0:	f04f 0120 	mov.w	r1, #32
 8000ec4:	f381 8811 	msr	BASEPRI, r1
 8000ec8:	65bb      	str	r3, [r7, #88]	; 0x58
 8000eca:	483f      	ldr	r0, [pc, #252]	; (8000fc8 <_VPrintHost+0x178>)
 8000ecc:	f7ff fd64 	bl	8000998 <_PreparePacket>
 8000ed0:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8000ed2:	2280      	movs	r2, #128	; 0x80
 8000ed4:	68f9      	ldr	r1, [r7, #12]
 8000ed6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000ed8:	f7ff fd2e 	bl	8000938 <_EncodeStr>
 8000edc:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 8000ede:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ee0:	677b      	str	r3, [r7, #116]	; 0x74
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	673b      	str	r3, [r7, #112]	; 0x70
 8000ee6:	e00b      	b.n	8000f00 <_VPrintHost+0xb0>
 8000ee8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000eee:	1c59      	adds	r1, r3, #1
 8000ef0:	6779      	str	r1, [r7, #116]	; 0x74
 8000ef2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	701a      	strb	r2, [r3, #0]
 8000efa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000efc:	09db      	lsrs	r3, r3, #7
 8000efe:	673b      	str	r3, [r7, #112]	; 0x70
 8000f00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f02:	2b7f      	cmp	r3, #127	; 0x7f
 8000f04:	d8f0      	bhi.n	8000ee8 <_VPrintHost+0x98>
 8000f06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f08:	1c5a      	adds	r2, r3, #1
 8000f0a:	677a      	str	r2, [r7, #116]	; 0x74
 8000f0c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	701a      	strb	r2, [r3, #0]
 8000f12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f14:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 8000f16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000f1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000f1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f20:	e00b      	b.n	8000f3a <_VPrintHost+0xea>
 8000f22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f28:	1c59      	adds	r1, r3, #1
 8000f2a:	66f9      	str	r1, [r7, #108]	; 0x6c
 8000f2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	701a      	strb	r2, [r3, #0]
 8000f34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f36:	09db      	lsrs	r3, r3, #7
 8000f38:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f3c:	2b7f      	cmp	r3, #127	; 0x7f
 8000f3e:	d8f0      	bhi.n	8000f22 <_VPrintHost+0xd2>
 8000f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f42:	1c5a      	adds	r2, r3, #1
 8000f44:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000f46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	701a      	strb	r2, [r3, #0]
 8000f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f4e:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8000f58:	e022      	b.n	8000fa0 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 8000f5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f5c:	667b      	str	r3, [r7, #100]	; 0x64
 8000f5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	663b      	str	r3, [r7, #96]	; 0x60
 8000f66:	e00b      	b.n	8000f80 <_VPrintHost+0x130>
 8000f68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f6e:	1c59      	adds	r1, r3, #1
 8000f70:	6679      	str	r1, [r7, #100]	; 0x64
 8000f72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	701a      	strb	r2, [r3, #0]
 8000f7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f7c:	09db      	lsrs	r3, r3, #7
 8000f7e:	663b      	str	r3, [r7, #96]	; 0x60
 8000f80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f82:	2b7f      	cmp	r3, #127	; 0x7f
 8000f84:	d8f0      	bhi.n	8000f68 <_VPrintHost+0x118>
 8000f86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f88:	1c5a      	adds	r2, r3, #1
 8000f8a:	667a      	str	r2, [r7, #100]	; 0x64
 8000f8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	701a      	strb	r2, [r3, #0]
 8000f92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f94:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 8000f96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f9a:	3304      	adds	r3, #4
 8000f9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8000fa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000fa4:	1e5a      	subs	r2, r3, #1
 8000fa6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d1d5      	bne.n	8000f5a <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8000fae:	221a      	movs	r2, #26
 8000fb0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000fb2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000fb4:	f7ff fdde 	bl	8000b74 <_SendPacket>
    RECORD_END();
 8000fb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000fba:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 8000fbe:	2300      	movs	r3, #0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3788      	adds	r7, #136	; 0x88
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000ac4 	.word	0x20000ac4

08000fcc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af02      	add	r7, sp, #8
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
 8000fd8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fe0:	4917      	ldr	r1, [pc, #92]	; (8001040 <SEGGER_SYSVIEW_Init+0x74>)
 8000fe2:	4818      	ldr	r0, [pc, #96]	; (8001044 <SEGGER_SYSVIEW_Init+0x78>)
 8000fe4:	f7ff fbd8 	bl	8000798 <SEGGER_RTT_AllocUpBuffer>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	4b16      	ldr	r3, [pc, #88]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8000fee:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8000ff2:	785a      	ldrb	r2, [r3, #1]
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8000ff6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8000ff8:	4b13      	ldr	r3, [pc, #76]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8000ffa:	7e1b      	ldrb	r3, [r3, #24]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	2300      	movs	r3, #0
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2308      	movs	r3, #8
 8001004:	4a11      	ldr	r2, [pc, #68]	; (800104c <SEGGER_SYSVIEW_Init+0x80>)
 8001006:	490f      	ldr	r1, [pc, #60]	; (8001044 <SEGGER_SYSVIEW_Init+0x78>)
 8001008:	f7ff fc4a 	bl	80008a0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <SEGGER_SYSVIEW_Init+0x84>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a0c      	ldr	r2, [pc, #48]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8001018:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800101a:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8001020:	4a09      	ldr	r2, [pc, #36]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8001026:	4a08      	ldr	r2, [pc, #32]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800102c:	4a06      	ldr	r2, [pc, #24]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8001032:	4b05      	ldr	r3, [pc, #20]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	2000068c 	.word	0x2000068c
 8001044:	0800b4c4 	.word	0x0800b4c4
 8001048:	20000a94 	.word	0x20000a94
 800104c:	20000a8c 	.word	0x20000a8c
 8001050:	e0001004 	.word	0xe0001004

08001054 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800105c:	4a04      	ldr	r2, [pc, #16]	; (8001070 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6113      	str	r3, [r2, #16]
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000a94 	.word	0x20000a94

08001074 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800107c:	f3ef 8311 	mrs	r3, BASEPRI
 8001080:	f04f 0120 	mov.w	r1, #32
 8001084:	f381 8811 	msr	BASEPRI, r1
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	4808      	ldr	r0, [pc, #32]	; (80010ac <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800108c:	f7ff fc84 	bl	8000998 <_PreparePacket>
 8001090:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	68b9      	ldr	r1, [r7, #8]
 8001096:	68b8      	ldr	r0, [r7, #8]
 8001098:	f7ff fd6c 	bl	8000b74 <_SendPacket>
  RECORD_END();
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f383 8811 	msr	BASEPRI, r3
}
 80010a2:	bf00      	nop
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000ac4 	.word	0x20000ac4

080010b0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80010ba:	f3ef 8311 	mrs	r3, BASEPRI
 80010be:	f04f 0120 	mov.w	r1, #32
 80010c2:	f381 8811 	msr	BASEPRI, r1
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	4816      	ldr	r0, [pc, #88]	; (8001124 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80010ca:	f7ff fc65 	bl	8000998 <_PreparePacket>
 80010ce:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	61fb      	str	r3, [r7, #28]
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	61bb      	str	r3, [r7, #24]
 80010dc:	e00b      	b.n	80010f6 <SEGGER_SYSVIEW_RecordU32+0x46>
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	1c59      	adds	r1, r3, #1
 80010e6:	61f9      	str	r1, [r7, #28]
 80010e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	701a      	strb	r2, [r3, #0]
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	09db      	lsrs	r3, r3, #7
 80010f4:	61bb      	str	r3, [r7, #24]
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	2b7f      	cmp	r3, #127	; 0x7f
 80010fa:	d8f0      	bhi.n	80010de <SEGGER_SYSVIEW_RecordU32+0x2e>
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	1c5a      	adds	r2, r3, #1
 8001100:	61fa      	str	r2, [r7, #28]
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	701a      	strb	r2, [r3, #0]
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	68f9      	ldr	r1, [r7, #12]
 8001110:	6938      	ldr	r0, [r7, #16]
 8001112:	f7ff fd2f 	bl	8000b74 <_SendPacket>
  RECORD_END();
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	f383 8811 	msr	BASEPRI, r3
}
 800111c:	bf00      	nop
 800111e:	3720      	adds	r7, #32
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000ac4 	.word	0x20000ac4

08001128 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b08c      	sub	sp, #48	; 0x30
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8001134:	f3ef 8311 	mrs	r3, BASEPRI
 8001138:	f04f 0120 	mov.w	r1, #32
 800113c:	f381 8811 	msr	BASEPRI, r1
 8001140:	61fb      	str	r3, [r7, #28]
 8001142:	4825      	ldr	r0, [pc, #148]	; (80011d8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8001144:	f7ff fc28 	bl	8000998 <_PreparePacket>
 8001148:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	62bb      	str	r3, [r7, #40]	; 0x28
 8001156:	e00b      	b.n	8001170 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8001158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115a:	b2da      	uxtb	r2, r3
 800115c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800115e:	1c59      	adds	r1, r3, #1
 8001160:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001162:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	701a      	strb	r2, [r3, #0]
 800116a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116c:	09db      	lsrs	r3, r3, #7
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001172:	2b7f      	cmp	r3, #127	; 0x7f
 8001174:	d8f0      	bhi.n	8001158 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8001176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001178:	1c5a      	adds	r2, r3, #1
 800117a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800117c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	701a      	strb	r2, [r3, #0]
 8001182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001184:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	623b      	str	r3, [r7, #32]
 800118e:	e00b      	b.n	80011a8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8001190:	6a3b      	ldr	r3, [r7, #32]
 8001192:	b2da      	uxtb	r2, r3
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	1c59      	adds	r1, r3, #1
 8001198:	6279      	str	r1, [r7, #36]	; 0x24
 800119a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	701a      	strb	r2, [r3, #0]
 80011a2:	6a3b      	ldr	r3, [r7, #32]
 80011a4:	09db      	lsrs	r3, r3, #7
 80011a6:	623b      	str	r3, [r7, #32]
 80011a8:	6a3b      	ldr	r3, [r7, #32]
 80011aa:	2b7f      	cmp	r3, #127	; 0x7f
 80011ac:	d8f0      	bhi.n	8001190 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	1c5a      	adds	r2, r3, #1
 80011b2:	627a      	str	r2, [r7, #36]	; 0x24
 80011b4:	6a3a      	ldr	r2, [r7, #32]
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	701a      	strb	r2, [r3, #0]
 80011ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011bc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	6979      	ldr	r1, [r7, #20]
 80011c2:	69b8      	ldr	r0, [r7, #24]
 80011c4:	f7ff fcd6 	bl	8000b74 <_SendPacket>
  RECORD_END();
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f383 8811 	msr	BASEPRI, r3
}
 80011ce:	bf00      	nop
 80011d0:	3730      	adds	r7, #48	; 0x30
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000ac4 	.word	0x20000ac4

080011dc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08c      	sub	sp, #48	; 0x30
 80011e0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80011e2:	4b58      	ldr	r3, [pc, #352]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80011e8:	f3ef 8311 	mrs	r3, BASEPRI
 80011ec:	f04f 0120 	mov.w	r1, #32
 80011f0:	f381 8811 	msr	BASEPRI, r1
 80011f4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80011f6:	4b53      	ldr	r3, [pc, #332]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 80011f8:	785b      	ldrb	r3, [r3, #1]
 80011fa:	220a      	movs	r2, #10
 80011fc:	4952      	ldr	r1, [pc, #328]	; (8001348 <SEGGER_SYSVIEW_Start+0x16c>)
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f81e 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800120a:	200a      	movs	r0, #10
 800120c:	f7ff ff32 	bl	8001074 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001210:	f3ef 8311 	mrs	r3, BASEPRI
 8001214:	f04f 0120 	mov.w	r1, #32
 8001218:	f381 8811 	msr	BASEPRI, r1
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	484b      	ldr	r0, [pc, #300]	; (800134c <SEGGER_SYSVIEW_Start+0x170>)
 8001220:	f7ff fbba 	bl	8000998 <_PreparePacket>
 8001224:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800122e:	4b45      	ldr	r3, [pc, #276]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28
 8001234:	e00b      	b.n	800124e <SEGGER_SYSVIEW_Start+0x72>
 8001236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001238:	b2da      	uxtb	r2, r3
 800123a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800123c:	1c59      	adds	r1, r3, #1
 800123e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001240:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	701a      	strb	r2, [r3, #0]
 8001248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800124a:	09db      	lsrs	r3, r3, #7
 800124c:	62bb      	str	r3, [r7, #40]	; 0x28
 800124e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001250:	2b7f      	cmp	r3, #127	; 0x7f
 8001252:	d8f0      	bhi.n	8001236 <SEGGER_SYSVIEW_Start+0x5a>
 8001254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001256:	1c5a      	adds	r2, r3, #1
 8001258:	62fa      	str	r2, [r7, #44]	; 0x2c
 800125a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	701a      	strb	r2, [r3, #0]
 8001260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001262:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
 8001268:	4b36      	ldr	r3, [pc, #216]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	623b      	str	r3, [r7, #32]
 800126e:	e00b      	b.n	8001288 <SEGGER_SYSVIEW_Start+0xac>
 8001270:	6a3b      	ldr	r3, [r7, #32]
 8001272:	b2da      	uxtb	r2, r3
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001276:	1c59      	adds	r1, r3, #1
 8001278:	6279      	str	r1, [r7, #36]	; 0x24
 800127a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800127e:	b2d2      	uxtb	r2, r2
 8001280:	701a      	strb	r2, [r3, #0]
 8001282:	6a3b      	ldr	r3, [r7, #32]
 8001284:	09db      	lsrs	r3, r3, #7
 8001286:	623b      	str	r3, [r7, #32]
 8001288:	6a3b      	ldr	r3, [r7, #32]
 800128a:	2b7f      	cmp	r3, #127	; 0x7f
 800128c:	d8f0      	bhi.n	8001270 <SEGGER_SYSVIEW_Start+0x94>
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	1c5a      	adds	r2, r3, #1
 8001292:	627a      	str	r2, [r7, #36]	; 0x24
 8001294:	6a3a      	ldr	r2, [r7, #32]
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	701a      	strb	r2, [r3, #0]
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	61fb      	str	r3, [r7, #28]
 80012a2:	4b28      	ldr	r3, [pc, #160]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 80012a4:	691b      	ldr	r3, [r3, #16]
 80012a6:	61bb      	str	r3, [r7, #24]
 80012a8:	e00b      	b.n	80012c2 <SEGGER_SYSVIEW_Start+0xe6>
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	1c59      	adds	r1, r3, #1
 80012b2:	61f9      	str	r1, [r7, #28]
 80012b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	701a      	strb	r2, [r3, #0]
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	09db      	lsrs	r3, r3, #7
 80012c0:	61bb      	str	r3, [r7, #24]
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	2b7f      	cmp	r3, #127	; 0x7f
 80012c6:	d8f0      	bhi.n	80012aa <SEGGER_SYSVIEW_Start+0xce>
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	1c5a      	adds	r2, r3, #1
 80012cc:	61fa      	str	r2, [r7, #28]
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	701a      	strb	r2, [r3, #0]
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	2300      	movs	r3, #0
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	e00b      	b.n	80012fa <SEGGER_SYSVIEW_Start+0x11e>
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	1c59      	adds	r1, r3, #1
 80012ea:	6179      	str	r1, [r7, #20]
 80012ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	701a      	strb	r2, [r3, #0]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	09db      	lsrs	r3, r3, #7
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	2b7f      	cmp	r3, #127	; 0x7f
 80012fe:	d8f0      	bhi.n	80012e2 <SEGGER_SYSVIEW_Start+0x106>
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	1c5a      	adds	r2, r3, #1
 8001304:	617a      	str	r2, [r7, #20]
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	701a      	strb	r2, [r3, #0]
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8001310:	2218      	movs	r2, #24
 8001312:	6839      	ldr	r1, [r7, #0]
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff fc2d 	bl	8000b74 <_SendPacket>
      RECORD_END();
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 8001322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001324:	2b00      	cmp	r3, #0
 8001326:	d002      	beq.n	800132e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 800132a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800132e:	f000 f9eb 	bl	8001708 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8001332:	f000 f9b1 	bl	8001698 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8001336:	f000 fb1f 	bl	8001978 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800133a:	bf00      	nop
 800133c:	3730      	adds	r7, #48	; 0x30
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000a94 	.word	0x20000a94
 8001348:	0800b5a0 	.word	0x0800b5a0
 800134c:	20000ac4 	.word	0x20000ac4

08001350 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8001356:	f3ef 8311 	mrs	r3, BASEPRI
 800135a:	f04f 0120 	mov.w	r1, #32
 800135e:	f381 8811 	msr	BASEPRI, r1
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	480b      	ldr	r0, [pc, #44]	; (8001394 <SEGGER_SYSVIEW_Stop+0x44>)
 8001366:	f7ff fb17 	bl	8000998 <_PreparePacket>
 800136a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800136c:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <SEGGER_SYSVIEW_Stop+0x48>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d007      	beq.n	8001384 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8001374:	220b      	movs	r2, #11
 8001376:	6839      	ldr	r1, [r7, #0]
 8001378:	6838      	ldr	r0, [r7, #0]
 800137a:	f7ff fbfb 	bl	8000b74 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <SEGGER_SYSVIEW_Stop+0x48>)
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f383 8811 	msr	BASEPRI, r3
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000ac4 	.word	0x20000ac4
 8001398:	20000a94 	.word	0x20000a94

0800139c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b08c      	sub	sp, #48	; 0x30
 80013a0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80013a2:	f3ef 8311 	mrs	r3, BASEPRI
 80013a6:	f04f 0120 	mov.w	r1, #32
 80013aa:	f381 8811 	msr	BASEPRI, r1
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	4845      	ldr	r0, [pc, #276]	; (80014c8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80013b2:	f7ff faf1 	bl	8000998 <_PreparePacket>
 80013b6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013c0:	4b42      	ldr	r3, [pc, #264]	; (80014cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80013c6:	e00b      	b.n	80013e0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80013c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ce:	1c59      	adds	r1, r3, #1
 80013d0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80013d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	701a      	strb	r2, [r3, #0]
 80013da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013dc:	09db      	lsrs	r3, r3, #7
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28
 80013e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e2:	2b7f      	cmp	r3, #127	; 0x7f
 80013e4:	d8f0      	bhi.n	80013c8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80013e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e8:	1c5a      	adds	r2, r3, #1
 80013ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80013ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	701a      	strb	r2, [r3, #0]
 80013f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
 80013fa:	4b34      	ldr	r3, [pc, #208]	; (80014cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	623b      	str	r3, [r7, #32]
 8001400:	e00b      	b.n	800141a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	b2da      	uxtb	r2, r3
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	1c59      	adds	r1, r3, #1
 800140a:	6279      	str	r1, [r7, #36]	; 0x24
 800140c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001410:	b2d2      	uxtb	r2, r2
 8001412:	701a      	strb	r2, [r3, #0]
 8001414:	6a3b      	ldr	r3, [r7, #32]
 8001416:	09db      	lsrs	r3, r3, #7
 8001418:	623b      	str	r3, [r7, #32]
 800141a:	6a3b      	ldr	r3, [r7, #32]
 800141c:	2b7f      	cmp	r3, #127	; 0x7f
 800141e:	d8f0      	bhi.n	8001402 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	1c5a      	adds	r2, r3, #1
 8001424:	627a      	str	r2, [r7, #36]	; 0x24
 8001426:	6a3a      	ldr	r2, [r7, #32]
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	701a      	strb	r2, [r3, #0]
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	61fb      	str	r3, [r7, #28]
 8001434:	4b25      	ldr	r3, [pc, #148]	; (80014cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	61bb      	str	r3, [r7, #24]
 800143a:	e00b      	b.n	8001454 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	b2da      	uxtb	r2, r3
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	1c59      	adds	r1, r3, #1
 8001444:	61f9      	str	r1, [r7, #28]
 8001446:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	701a      	strb	r2, [r3, #0]
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	09db      	lsrs	r3, r3, #7
 8001452:	61bb      	str	r3, [r7, #24]
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	2b7f      	cmp	r3, #127	; 0x7f
 8001458:	d8f0      	bhi.n	800143c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	1c5a      	adds	r2, r3, #1
 800145e:	61fa      	str	r2, [r7, #28]
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	701a      	strb	r2, [r3, #0]
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	617b      	str	r3, [r7, #20]
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	e00b      	b.n	800148c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	b2da      	uxtb	r2, r3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	1c59      	adds	r1, r3, #1
 800147c:	6179      	str	r1, [r7, #20]
 800147e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	701a      	strb	r2, [r3, #0]
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	09db      	lsrs	r3, r3, #7
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	2b7f      	cmp	r3, #127	; 0x7f
 8001490:	d8f0      	bhi.n	8001474 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	1c5a      	adds	r2, r3, #1
 8001496:	617a      	str	r2, [r7, #20]
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	701a      	strb	r2, [r3, #0]
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80014a2:	2218      	movs	r2, #24
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	68b8      	ldr	r0, [r7, #8]
 80014a8:	f7ff fb64 	bl	8000b74 <_SendPacket>
  RECORD_END();
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80014b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d002      	beq.n	80014c0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80014ba:	4b04      	ldr	r3, [pc, #16]	; (80014cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80014bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014be:	4798      	blx	r3
  }
}
 80014c0:	bf00      	nop
 80014c2:	3730      	adds	r7, #48	; 0x30
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000ac4 	.word	0x20000ac4
 80014cc:	20000a94 	.word	0x20000a94

080014d0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b092      	sub	sp, #72	; 0x48
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80014d8:	f3ef 8311 	mrs	r3, BASEPRI
 80014dc:	f04f 0120 	mov.w	r1, #32
 80014e0:	f381 8811 	msr	BASEPRI, r1
 80014e4:	617b      	str	r3, [r7, #20]
 80014e6:	486a      	ldr	r0, [pc, #424]	; (8001690 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80014e8:	f7ff fa56 	bl	8000998 <_PreparePacket>
 80014ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	647b      	str	r3, [r7, #68]	; 0x44
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	4b66      	ldr	r3, [pc, #408]	; (8001694 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	643b      	str	r3, [r7, #64]	; 0x40
 8001502:	e00b      	b.n	800151c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8001504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001506:	b2da      	uxtb	r2, r3
 8001508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800150a:	1c59      	adds	r1, r3, #1
 800150c:	6479      	str	r1, [r7, #68]	; 0x44
 800150e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	701a      	strb	r2, [r3, #0]
 8001516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001518:	09db      	lsrs	r3, r3, #7
 800151a:	643b      	str	r3, [r7, #64]	; 0x40
 800151c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800151e:	2b7f      	cmp	r3, #127	; 0x7f
 8001520:	d8f0      	bhi.n	8001504 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8001522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	647a      	str	r2, [r7, #68]	; 0x44
 8001528:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	701a      	strb	r2, [r3, #0]
 800152e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001530:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	63bb      	str	r3, [r7, #56]	; 0x38
 800153c:	e00b      	b.n	8001556 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800153e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001540:	b2da      	uxtb	r2, r3
 8001542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001544:	1c59      	adds	r1, r3, #1
 8001546:	63f9      	str	r1, [r7, #60]	; 0x3c
 8001548:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	701a      	strb	r2, [r3, #0]
 8001550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001552:	09db      	lsrs	r3, r3, #7
 8001554:	63bb      	str	r3, [r7, #56]	; 0x38
 8001556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001558:	2b7f      	cmp	r3, #127	; 0x7f
 800155a:	d8f0      	bhi.n	800153e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800155c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001562:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	701a      	strb	r2, [r3, #0]
 8001568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800156a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2220      	movs	r2, #32
 8001572:	4619      	mov	r1, r3
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	f7ff f9df 	bl	8000938 <_EncodeStr>
 800157a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800157c:	2209      	movs	r2, #9
 800157e:	68f9      	ldr	r1, [r7, #12]
 8001580:	6938      	ldr	r0, [r7, #16]
 8001582:	f7ff faf7 	bl	8000b74 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	637b      	str	r3, [r7, #52]	; 0x34
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	4b40      	ldr	r3, [pc, #256]	; (8001694 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	633b      	str	r3, [r7, #48]	; 0x30
 800159a:	e00b      	b.n	80015b4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800159c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015a2:	1c59      	adds	r1, r3, #1
 80015a4:	6379      	str	r1, [r7, #52]	; 0x34
 80015a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	701a      	strb	r2, [r3, #0]
 80015ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b0:	09db      	lsrs	r3, r3, #7
 80015b2:	633b      	str	r3, [r7, #48]	; 0x30
 80015b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b6:	2b7f      	cmp	r3, #127	; 0x7f
 80015b8:	d8f0      	bhi.n	800159c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80015ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015bc:	1c5a      	adds	r2, r3, #1
 80015be:	637a      	str	r2, [r7, #52]	; 0x34
 80015c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	701a      	strb	r2, [r3, #0]
 80015c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80015d4:	e00b      	b.n	80015ee <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80015d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015dc:	1c59      	adds	r1, r3, #1
 80015de:	62f9      	str	r1, [r7, #44]	; 0x2c
 80015e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	701a      	strb	r2, [r3, #0]
 80015e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ea:	09db      	lsrs	r3, r3, #7
 80015ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80015ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f0:	2b7f      	cmp	r3, #127	; 0x7f
 80015f2:	d8f0      	bhi.n	80015d6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80015f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f6:	1c5a      	adds	r2, r3, #1
 80015f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80015fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	701a      	strb	r2, [r3, #0]
 8001600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001602:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	623b      	str	r3, [r7, #32]
 800160e:	e00b      	b.n	8001628 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8001610:	6a3b      	ldr	r3, [r7, #32]
 8001612:	b2da      	uxtb	r2, r3
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	1c59      	adds	r1, r3, #1
 8001618:	6279      	str	r1, [r7, #36]	; 0x24
 800161a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	701a      	strb	r2, [r3, #0]
 8001622:	6a3b      	ldr	r3, [r7, #32]
 8001624:	09db      	lsrs	r3, r3, #7
 8001626:	623b      	str	r3, [r7, #32]
 8001628:	6a3b      	ldr	r3, [r7, #32]
 800162a:	2b7f      	cmp	r3, #127	; 0x7f
 800162c:	d8f0      	bhi.n	8001610 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	1c5a      	adds	r2, r3, #1
 8001632:	627a      	str	r2, [r7, #36]	; 0x24
 8001634:	6a3a      	ldr	r2, [r7, #32]
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	701a      	strb	r2, [r3, #0]
 800163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	61fb      	str	r3, [r7, #28]
 8001642:	2300      	movs	r3, #0
 8001644:	61bb      	str	r3, [r7, #24]
 8001646:	e00b      	b.n	8001660 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	b2da      	uxtb	r2, r3
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	1c59      	adds	r1, r3, #1
 8001650:	61f9      	str	r1, [r7, #28]
 8001652:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	701a      	strb	r2, [r3, #0]
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	09db      	lsrs	r3, r3, #7
 800165e:	61bb      	str	r3, [r7, #24]
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	2b7f      	cmp	r3, #127	; 0x7f
 8001664:	d8f0      	bhi.n	8001648 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	1c5a      	adds	r2, r3, #1
 800166a:	61fa      	str	r2, [r7, #28]
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	701a      	strb	r2, [r3, #0]
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8001676:	2215      	movs	r2, #21
 8001678:	68f9      	ldr	r1, [r7, #12]
 800167a:	6938      	ldr	r0, [r7, #16]
 800167c:	f7ff fa7a 	bl	8000b74 <_SendPacket>
  RECORD_END();
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	f383 8811 	msr	BASEPRI, r3
}
 8001686:	bf00      	nop
 8001688:	3748      	adds	r7, #72	; 0x48
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000ac4 	.word	0x20000ac4
 8001694:	20000a94 	.word	0x20000a94

08001698 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800169c:	4b07      	ldr	r3, [pc, #28]	; (80016bc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d008      	beq.n	80016b6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80016a4:	4b05      	ldr	r3, [pc, #20]	; (80016bc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80016ae:	4b03      	ldr	r3, [pc, #12]	; (80016bc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	4798      	blx	r3
  }
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000a94 	.word	0x20000a94

080016c0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80016c8:	f3ef 8311 	mrs	r3, BASEPRI
 80016cc:	f04f 0120 	mov.w	r1, #32
 80016d0:	f381 8811 	msr	BASEPRI, r1
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	480b      	ldr	r0, [pc, #44]	; (8001704 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80016d8:	f7ff f95e 	bl	8000998 <_PreparePacket>
 80016dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80016de:	2280      	movs	r2, #128	; 0x80
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	6938      	ldr	r0, [r7, #16]
 80016e4:	f7ff f928 	bl	8000938 <_EncodeStr>
 80016e8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80016ea:	220e      	movs	r2, #14
 80016ec:	68f9      	ldr	r1, [r7, #12]
 80016ee:	6938      	ldr	r0, [r7, #16]
 80016f0:	f7ff fa40 	bl	8000b74 <_SendPacket>
  RECORD_END();
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	f383 8811 	msr	BASEPRI, r3
}
 80016fa:	bf00      	nop
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000ac4 	.word	0x20000ac4

08001708 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d01a      	beq.n	800174c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8001716:	4b13      	ldr	r3, [pc, #76]	; (8001764 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d015      	beq.n	800174c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8001720:	4b10      	ldr	r3, [pc, #64]	; (8001764 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4798      	blx	r3
 8001728:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800172c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800172e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	000a      	movs	r2, r1
 800173c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800173e:	4613      	mov	r3, r2
 8001740:	461a      	mov	r2, r3
 8001742:	4621      	mov	r1, r4
 8001744:	200d      	movs	r0, #13
 8001746:	f7ff fcef 	bl	8001128 <SEGGER_SYSVIEW_RecordU32x2>
 800174a:	e006      	b.n	800175a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4619      	mov	r1, r3
 8001752:	200c      	movs	r0, #12
 8001754:	f7ff fcac 	bl	80010b0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8001758:	bf00      	nop
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	bd90      	pop	{r4, r7, pc}
 8001762:	bf00      	nop
 8001764:	20000a94 	.word	0x20000a94
 8001768:	e0001004 	.word	0xe0001004

0800176c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8001772:	f3ef 8311 	mrs	r3, BASEPRI
 8001776:	f04f 0120 	mov.w	r1, #32
 800177a:	f381 8811 	msr	BASEPRI, r1
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	4819      	ldr	r0, [pc, #100]	; (80017e8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8001782:	f7ff f909 	bl	8000998 <_PreparePacket>
 8001786:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800178c:	4b17      	ldr	r3, [pc, #92]	; (80017ec <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001794:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	617b      	str	r3, [r7, #20]
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	e00b      	b.n	80017b8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	1c59      	adds	r1, r3, #1
 80017a8:	6179      	str	r1, [r7, #20]
 80017aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	701a      	strb	r2, [r3, #0]
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	09db      	lsrs	r3, r3, #7
 80017b6:	613b      	str	r3, [r7, #16]
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	2b7f      	cmp	r3, #127	; 0x7f
 80017bc:	d8f0      	bhi.n	80017a0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	1c5a      	adds	r2, r3, #1
 80017c2:	617a      	str	r2, [r7, #20]
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	701a      	strb	r2, [r3, #0]
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80017ce:	2202      	movs	r2, #2
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	68b8      	ldr	r0, [r7, #8]
 80017d4:	f7ff f9ce 	bl	8000b74 <_SendPacket>
  RECORD_END();
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f383 8811 	msr	BASEPRI, r3
}
 80017de:	bf00      	nop
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000ac4 	.word	0x20000ac4
 80017ec:	e000ed04 	.word	0xe000ed04

080017f0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80017f6:	f3ef 8311 	mrs	r3, BASEPRI
 80017fa:	f04f 0120 	mov.w	r1, #32
 80017fe:	f381 8811 	msr	BASEPRI, r1
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	4807      	ldr	r0, [pc, #28]	; (8001824 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8001806:	f7ff f8c7 	bl	8000998 <_PreparePacket>
 800180a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800180c:	2203      	movs	r2, #3
 800180e:	6839      	ldr	r1, [r7, #0]
 8001810:	6838      	ldr	r0, [r7, #0]
 8001812:	f7ff f9af 	bl	8000b74 <_SendPacket>
  RECORD_END();
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f383 8811 	msr	BASEPRI, r3
}
 800181c:	bf00      	nop
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000ac4 	.word	0x20000ac4

08001828 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b08c      	sub	sp, #48	; 0x30
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8001832:	4b40      	ldr	r3, [pc, #256]	; (8001934 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d077      	beq.n	800192a <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800183a:	4b3e      	ldr	r3, [pc, #248]	; (8001934 <SEGGER_SYSVIEW_SendModule+0x10c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8001840:	2300      	movs	r3, #0
 8001842:	62bb      	str	r3, [r7, #40]	; 0x28
 8001844:	e008      	b.n	8001858 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8001846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184e:	2b00      	cmp	r3, #0
 8001850:	d007      	beq.n	8001862 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8001852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001854:	3301      	adds	r3, #1
 8001856:	62bb      	str	r3, [r7, #40]	; 0x28
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800185c:	429a      	cmp	r2, r3
 800185e:	d3f2      	bcc.n	8001846 <SEGGER_SYSVIEW_SendModule+0x1e>
 8001860:	e000      	b.n	8001864 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8001862:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8001864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001866:	2b00      	cmp	r3, #0
 8001868:	d055      	beq.n	8001916 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800186a:	f3ef 8311 	mrs	r3, BASEPRI
 800186e:	f04f 0120 	mov.w	r1, #32
 8001872:	f381 8811 	msr	BASEPRI, r1
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	482f      	ldr	r0, [pc, #188]	; (8001938 <SEGGER_SYSVIEW_SendModule+0x110>)
 800187a:	f7ff f88d 	bl	8000998 <_PreparePacket>
 800187e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	623b      	str	r3, [r7, #32]
 800188c:	e00b      	b.n	80018a6 <SEGGER_SYSVIEW_SendModule+0x7e>
 800188e:	6a3b      	ldr	r3, [r7, #32]
 8001890:	b2da      	uxtb	r2, r3
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	1c59      	adds	r1, r3, #1
 8001896:	6279      	str	r1, [r7, #36]	; 0x24
 8001898:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	701a      	strb	r2, [r3, #0]
 80018a0:	6a3b      	ldr	r3, [r7, #32]
 80018a2:	09db      	lsrs	r3, r3, #7
 80018a4:	623b      	str	r3, [r7, #32]
 80018a6:	6a3b      	ldr	r3, [r7, #32]
 80018a8:	2b7f      	cmp	r3, #127	; 0x7f
 80018aa:	d8f0      	bhi.n	800188e <SEGGER_SYSVIEW_SendModule+0x66>
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	1c5a      	adds	r2, r3, #1
 80018b0:	627a      	str	r2, [r7, #36]	; 0x24
 80018b2:	6a3a      	ldr	r2, [r7, #32]
 80018b4:	b2d2      	uxtb	r2, r2
 80018b6:	701a      	strb	r2, [r3, #0]
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	61fb      	str	r3, [r7, #28]
 80018c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	61bb      	str	r3, [r7, #24]
 80018c6:	e00b      	b.n	80018e0 <SEGGER_SYSVIEW_SendModule+0xb8>
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	1c59      	adds	r1, r3, #1
 80018d0:	61f9      	str	r1, [r7, #28]
 80018d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	701a      	strb	r2, [r3, #0]
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	09db      	lsrs	r3, r3, #7
 80018de:	61bb      	str	r3, [r7, #24]
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	2b7f      	cmp	r3, #127	; 0x7f
 80018e4:	d8f0      	bhi.n	80018c8 <SEGGER_SYSVIEW_SendModule+0xa0>
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	1c5a      	adds	r2, r3, #1
 80018ea:	61fa      	str	r2, [r7, #28]
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	701a      	strb	r2, [r3, #0]
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80018f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2280      	movs	r2, #128	; 0x80
 80018fc:	4619      	mov	r1, r3
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	f7ff f81a 	bl	8000938 <_EncodeStr>
 8001904:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8001906:	2216      	movs	r2, #22
 8001908:	68f9      	ldr	r1, [r7, #12]
 800190a:	6938      	ldr	r0, [r7, #16]
 800190c:	f7ff f932 	bl	8000b74 <_SendPacket>
      RECORD_END();
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8001916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001918:	2b00      	cmp	r3, #0
 800191a:	d006      	beq.n	800192a <SEGGER_SYSVIEW_SendModule+0x102>
 800191c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d002      	beq.n	800192a <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8001924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	4798      	blx	r3
    }
  }
}
 800192a:	bf00      	nop
 800192c:	3730      	adds	r7, #48	; 0x30
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000abc 	.word	0x20000abc
 8001938:	20000ac4 	.word	0x20000ac4

0800193c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8001942:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00f      	beq.n	800196a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800194a:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d002      	beq.n	800195e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f2      	bne.n	8001950 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20000abc 	.word	0x20000abc

08001978 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800197e:	f3ef 8311 	mrs	r3, BASEPRI
 8001982:	f04f 0120 	mov.w	r1, #32
 8001986:	f381 8811 	msr	BASEPRI, r1
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	4817      	ldr	r0, [pc, #92]	; (80019ec <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800198e:	f7ff f803 	bl	8000998 <_PreparePacket>
 8001992:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	e00b      	b.n	80019bc <SEGGER_SYSVIEW_SendNumModules+0x44>
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	1c59      	adds	r1, r3, #1
 80019ac:	6179      	str	r1, [r7, #20]
 80019ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	701a      	strb	r2, [r3, #0]
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	09db      	lsrs	r3, r3, #7
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	2b7f      	cmp	r3, #127	; 0x7f
 80019c0:	d8f0      	bhi.n	80019a4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	1c5a      	adds	r2, r3, #1
 80019c6:	617a      	str	r2, [r7, #20]
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	701a      	strb	r2, [r3, #0]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80019d2:	221b      	movs	r2, #27
 80019d4:	6879      	ldr	r1, [r7, #4]
 80019d6:	68b8      	ldr	r0, [r7, #8]
 80019d8:	f7ff f8cc 	bl	8000b74 <_SendPacket>
  RECORD_END();
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f383 8811 	msr	BASEPRI, r3
}
 80019e2:	bf00      	nop
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000ac4 	.word	0x20000ac4
 80019f0:	20000ac0 	.word	0x20000ac0

080019f4 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 80019f4:	b40f      	push	{r0, r1, r2, r3}
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	461a      	mov	r2, r3
 8001a06:	2100      	movs	r1, #0
 8001a08:	6938      	ldr	r0, [r7, #16]
 8001a0a:	f7ff fa21 	bl	8000e50 <_VPrintHost>
  va_end(ParamList);
#endif
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a18:	b004      	add	sp, #16
 8001a1a:	4770      	bx	lr

08001a1c <SEGGER_SYSVIEW_Print>:
*    Print a string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Print(const char* s) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08a      	sub	sp, #40	; 0x28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8001a24:	f3ef 8311 	mrs	r3, BASEPRI
 8001a28:	f04f 0120 	mov.w	r1, #32
 8001a2c:	f381 8811 	msr	BASEPRI, r1
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	4827      	ldr	r0, [pc, #156]	; (8001ad0 <SEGGER_SYSVIEW_Print+0xb4>)
 8001a34:	f7fe ffb0 	bl	8000998 <_PreparePacket>
 8001a38:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8001a3a:	2280      	movs	r2, #128	; 0x80
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	6938      	ldr	r0, [r7, #16]
 8001a40:	f7fe ff7a 	bl	8000938 <_EncodeStr>
 8001a44:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_LOG);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	623b      	str	r3, [r7, #32]
 8001a4e:	e00b      	b.n	8001a68 <SEGGER_SYSVIEW_Print+0x4c>
 8001a50:	6a3b      	ldr	r3, [r7, #32]
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	1c59      	adds	r1, r3, #1
 8001a58:	6279      	str	r1, [r7, #36]	; 0x24
 8001a5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	701a      	strb	r2, [r3, #0]
 8001a62:	6a3b      	ldr	r3, [r7, #32]
 8001a64:	09db      	lsrs	r3, r3, #7
 8001a66:	623b      	str	r3, [r7, #32]
 8001a68:	6a3b      	ldr	r3, [r7, #32]
 8001a6a:	2b7f      	cmp	r3, #127	; 0x7f
 8001a6c:	d8f0      	bhi.n	8001a50 <SEGGER_SYSVIEW_Print+0x34>
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a70:	1c5a      	adds	r2, r3, #1
 8001a72:	627a      	str	r2, [r7, #36]	; 0x24
 8001a74:	6a3a      	ldr	r2, [r7, #32]
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	701a      	strb	r2, [r3, #0]
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	61fb      	str	r3, [r7, #28]
 8001a82:	2300      	movs	r3, #0
 8001a84:	61bb      	str	r3, [r7, #24]
 8001a86:	e00b      	b.n	8001aa0 <SEGGER_SYSVIEW_Print+0x84>
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	1c59      	adds	r1, r3, #1
 8001a90:	61f9      	str	r1, [r7, #28]
 8001a92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	701a      	strb	r2, [r3, #0]
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	09db      	lsrs	r3, r3, #7
 8001a9e:	61bb      	str	r3, [r7, #24]
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	2b7f      	cmp	r3, #127	; 0x7f
 8001aa4:	d8f0      	bhi.n	8001a88 <SEGGER_SYSVIEW_Print+0x6c>
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	1c5a      	adds	r2, r3, #1
 8001aaa:	61fa      	str	r2, [r7, #28]
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	701a      	strb	r2, [r3, #0]
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8001ab6:	221a      	movs	r2, #26
 8001ab8:	68f9      	ldr	r1, [r7, #12]
 8001aba:	6938      	ldr	r0, [r7, #16]
 8001abc:	f7ff f85a 	bl	8000b74 <_SendPacket>
  RECORD_END();
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f383 8811 	msr	BASEPRI, r3
}
 8001ac6:	bf00      	nop
 8001ac8:	3728      	adds	r7, #40	; 0x28
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000ac4 	.word	0x20000ac4

08001ad4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001ad8:	4803      	ldr	r0, [pc, #12]	; (8001ae8 <_cbSendSystemDesc+0x14>)
 8001ada:	f7ff fdf1 	bl	80016c0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001ade:	4803      	ldr	r0, [pc, #12]	; (8001aec <_cbSendSystemDesc+0x18>)
 8001ae0:	f7ff fdee 	bl	80016c0 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	0800b4cc 	.word	0x0800b4cc
 8001aec:	0800b500 	.word	0x0800b500

08001af0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001af4:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <SEGGER_SYSVIEW_Conf+0x20>)
 8001af6:	6818      	ldr	r0, [r3, #0]
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <SEGGER_SYSVIEW_Conf+0x20>)
 8001afa:	6819      	ldr	r1, [r3, #0]
 8001afc:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <SEGGER_SYSVIEW_Conf+0x24>)
 8001afe:	4a06      	ldr	r2, [pc, #24]	; (8001b18 <SEGGER_SYSVIEW_Conf+0x28>)
 8001b00:	f7ff fa64 	bl	8000fcc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001b04:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001b08:	f7ff faa4 	bl	8001054 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	20000004 	.word	0x20000004
 8001b14:	08001ad5 	.word	0x08001ad5
 8001b18:	0800b5ac 	.word	0x0800b5ac

08001b1c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001b22:	2300      	movs	r3, #0
 8001b24:	607b      	str	r3, [r7, #4]
 8001b26:	e048      	b.n	8001bba <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8001b28:	4929      	ldr	r1, [pc, #164]	; (8001bd0 <_cbSendTaskList+0xb4>)
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	440b      	add	r3, r1
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f007 ffdb 	bl	8009af4 <uxTaskGetStackHighWaterMark>
 8001b3e:	4601      	mov	r1, r0
 8001b40:	4823      	ldr	r0, [pc, #140]	; (8001bd0 <_cbSendTaskList+0xb4>)
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	4613      	mov	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4403      	add	r3, r0
 8001b4e:	3310      	adds	r3, #16
 8001b50:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8001b52:	491f      	ldr	r1, [pc, #124]	; (8001bd0 <_cbSendTaskList+0xb4>)
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	4613      	mov	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	440b      	add	r3, r1
 8001b60:	6818      	ldr	r0, [r3, #0]
 8001b62:	491b      	ldr	r1, [pc, #108]	; (8001bd0 <_cbSendTaskList+0xb4>)
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	4613      	mov	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	440b      	add	r3, r1
 8001b70:	3304      	adds	r3, #4
 8001b72:	6819      	ldr	r1, [r3, #0]
 8001b74:	4c16      	ldr	r4, [pc, #88]	; (8001bd0 <_cbSendTaskList+0xb4>)
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4423      	add	r3, r4
 8001b82:	3308      	adds	r3, #8
 8001b84:	681c      	ldr	r4, [r3, #0]
 8001b86:	4d12      	ldr	r5, [pc, #72]	; (8001bd0 <_cbSendTaskList+0xb4>)
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	442b      	add	r3, r5
 8001b94:	330c      	adds	r3, #12
 8001b96:	681d      	ldr	r5, [r3, #0]
 8001b98:	4e0d      	ldr	r6, [pc, #52]	; (8001bd0 <_cbSendTaskList+0xb4>)
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4433      	add	r3, r6
 8001ba6:	3310      	adds	r3, #16
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	462b      	mov	r3, r5
 8001bae:	4622      	mov	r2, r4
 8001bb0:	f000 f855 	bl	8001c5e <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	607b      	str	r3, [r7, #4]
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <_cbSendTaskList+0xb8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d3b1      	bcc.n	8001b28 <_cbSendTaskList+0xc>
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000ba8 	.word	0x20000ba8
 8001bd4:	20000c48 	.word	0x20000c48

08001bd8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001be0:	f007 fc70 	bl	80094c4 <xTaskGetTickCountFromISR>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2200      	movs	r2, #0
 8001be8:	469a      	mov	sl, r3
 8001bea:	4693      	mov	fp, r2
 8001bec:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001bf0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	f04f 0a00 	mov.w	sl, #0
 8001bfc:	f04f 0b00 	mov.w	fp, #0
 8001c00:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8001c04:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8001c08:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8001c0c:	4652      	mov	r2, sl
 8001c0e:	465b      	mov	r3, fp
 8001c10:	1a14      	subs	r4, r2, r0
 8001c12:	eb63 0501 	sbc.w	r5, r3, r1
 8001c16:	f04f 0200 	mov.w	r2, #0
 8001c1a:	f04f 0300 	mov.w	r3, #0
 8001c1e:	00ab      	lsls	r3, r5, #2
 8001c20:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8001c24:	00a2      	lsls	r2, r4, #2
 8001c26:	4614      	mov	r4, r2
 8001c28:	461d      	mov	r5, r3
 8001c2a:	eb14 0800 	adds.w	r8, r4, r0
 8001c2e:	eb45 0901 	adc.w	r9, r5, r1
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	f04f 0300 	mov.w	r3, #0
 8001c3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c46:	4690      	mov	r8, r2
 8001c48:	4699      	mov	r9, r3
 8001c4a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8001c4e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001c52:	4610      	mov	r0, r2
 8001c54:	4619      	mov	r1, r3
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001c5e <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b08a      	sub	sp, #40	; 0x28
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	60f8      	str	r0, [r7, #12]
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	607a      	str	r2, [r7, #4]
 8001c6a:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	2214      	movs	r2, #20
 8001c72:	2100      	movs	r1, #0
 8001c74:	4618      	mov	r0, r3
 8001c76:	f009 fb45 	bl	800b304 <memset>
  TaskInfo.TaskID     = TaskID;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001c8e:	f107 0314 	add.w	r3, r7, #20
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff fc1c 	bl	80014d0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001c98:	bf00      	nop
 8001c9a:	3728      	adds	r7, #40	; 0x28
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <__NVIC_SetPriorityGrouping+0x40>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cce:	4a04      	ldr	r2, [pc, #16]	; (8001ce0 <__NVIC_SetPriorityGrouping+0x40>)
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	60d3      	str	r3, [r2, #12]
}
 8001cd4:	bf00      	nop
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	e000ed00 	.word	0xe000ed00
 8001ce4:	05fa0000 	.word	0x05fa0000

08001ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	db0b      	blt.n	8001d12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	f003 021f 	and.w	r2, r3, #31
 8001d00:	4907      	ldr	r1, [pc, #28]	; (8001d20 <__NVIC_EnableIRQ+0x38>)
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	095b      	lsrs	r3, r3, #5
 8001d08:	2001      	movs	r0, #1
 8001d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	e000e100 	.word	0xe000e100

08001d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	6039      	str	r1, [r7, #0]
 8001d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	db0a      	blt.n	8001d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	490c      	ldr	r1, [pc, #48]	; (8001d70 <__NVIC_SetPriority+0x4c>)
 8001d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d42:	0112      	lsls	r2, r2, #4
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	440b      	add	r3, r1
 8001d48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d4c:	e00a      	b.n	8001d64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	4908      	ldr	r1, [pc, #32]	; (8001d74 <__NVIC_SetPriority+0x50>)
 8001d54:	79fb      	ldrb	r3, [r7, #7]
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	3b04      	subs	r3, #4
 8001d5c:	0112      	lsls	r2, r2, #4
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	440b      	add	r3, r1
 8001d62:	761a      	strb	r2, [r3, #24]
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	e000e100 	.word	0xe000e100
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d7c:	f000 ff43 	bl	8002c06 <HAL_Init>

  /* USER CODE BEGIN Init */
  SEGGER_SYSVIEW_Conf();
 8001d80:	f7ff feb6 	bl	8001af0 <SEGGER_SYSVIEW_Conf>
  NVIC_SetPriorityGrouping(0);
 8001d84:	2000      	movs	r0, #0
 8001d86:	f7ff ff8b 	bl	8001ca0 <__NVIC_SetPriorityGrouping>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d8a:	f000 f863 	bl	8001e54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d8e:	f000 f9fd 	bl	800218c <MX_GPIO_Init>
  MX_DMA_Init();
 8001d92:	f000 f9dd 	bl	8002150 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001d96:	f000 f97d 	bl	8002094 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001d9a:	f000 f9ab 	bl	80020f4 <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 8001d9e:	f000 f919 	bl	8001fd4 <MX_UART4_Init>
  MX_ETH_Init();
 8001da2:	f000 f8c9 	bl	8001f38 <MX_ETH_Init>
  MX_USART2_UART_Init();
 8001da6:	f000 f945 	bl	8002034 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001daa:	f005 fcf5 	bl	8007798 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  rxStream = xStreamBufferCreate(100, 1);
 8001dae:	2200      	movs	r2, #0
 8001db0:	2101      	movs	r1, #1
 8001db2:	2064      	movs	r0, #100	; 0x64
 8001db4:	f006 fcfa 	bl	80087ac <xStreamBufferGenericCreate>
 8001db8:	4603      	mov	r3, r0
 8001dba:	4a18      	ldr	r2, [pc, #96]	; (8001e1c <main+0xa4>)
 8001dbc:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of startUart4Traffic */
  startUart4TrafficHandle = osTimerNew(startUart4TrafficEntry, osTimerOnce, NULL, &startUart4Traffic_attributes);
 8001dbe:	4b18      	ldr	r3, [pc, #96]	; (8001e20 <main+0xa8>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	4817      	ldr	r0, [pc, #92]	; (8001e24 <main+0xac>)
 8001dc6:	f005 fe3b 	bl	8007a40 <osTimerNew>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	4a16      	ldr	r2, [pc, #88]	; (8001e28 <main+0xb0>)
 8001dce:	6013      	str	r3, [r2, #0]

  /* creation of uart4Send */
  uart4SendHandle = osTimerNew(uart4SendEntry, osTimerPeriodic, NULL, &uart4Send_attributes);
 8001dd0:	4b16      	ldr	r3, [pc, #88]	; (8001e2c <main+0xb4>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	4816      	ldr	r0, [pc, #88]	; (8001e30 <main+0xb8>)
 8001dd8:	f005 fe32 	bl	8007a40 <osTimerNew>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	4a15      	ldr	r2, [pc, #84]	; (8001e34 <main+0xbc>)
 8001de0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  osTimerStart(startUart4TrafficHandle, 500 / portTICK_PERIOD_MS);
 8001de2:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <main+0xb0>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001dea:	4618      	mov	r0, r3
 8001dec:	f005 feac 	bl	8007b48 <osTimerStart>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001df0:	4a11      	ldr	r2, [pc, #68]	; (8001e38 <main+0xc0>)
 8001df2:	2100      	movs	r1, #0
 8001df4:	4811      	ldr	r0, [pc, #68]	; (8001e3c <main+0xc4>)
 8001df6:	f005 fd39 	bl	800786c <osThreadNew>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	4a10      	ldr	r2, [pc, #64]	; (8001e40 <main+0xc8>)
 8001dfe:	6013      	str	r3, [r2, #0]

  /* creation of uartPrintTask */
  //uartPrintTaskHandle = osThreadNew(uartPrintTaskEntry, NULL, &uartPrintTask_attributes);
  uartPrintTaskHandle = osThreadNew(uartPrintOutTask, NULL, &uartPrintTask_attributes);
 8001e00:	4a10      	ldr	r2, [pc, #64]	; (8001e44 <main+0xcc>)
 8001e02:	2100      	movs	r1, #0
 8001e04:	4810      	ldr	r0, [pc, #64]	; (8001e48 <main+0xd0>)
 8001e06:	f005 fd31 	bl	800786c <osThreadNew>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	4a0f      	ldr	r2, [pc, #60]	; (8001e4c <main+0xd4>)
 8001e0e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001e10:	f005 fcf6 	bl	8007800 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    SEGGER_SYSVIEW_PrintfHost("problem");
 8001e14:	480e      	ldr	r0, [pc, #56]	; (8001e50 <main+0xd8>)
 8001e16:	f7ff fded 	bl	80019f4 <SEGGER_SYSVIEW_PrintfHost>
 8001e1a:	e7fb      	b.n	8001e14 <main+0x9c>
 8001e1c:	20000cc8 	.word	0x20000cc8
 8001e20:	0800b60c 	.word	0x0800b60c
 8001e24:	080024dd 	.word	0x080024dd
 8001e28:	200014c0 	.word	0x200014c0
 8001e2c:	0800b61c 	.word	0x0800b61c
 8001e30:	08002501 	.word	0x08002501
 8001e34:	200014c4 	.word	0x200014c4
 8001e38:	0800b5c4 	.word	0x0800b5c4
 8001e3c:	080024b5 	.word	0x080024b5
 8001e40:	200014b8 	.word	0x200014b8
 8001e44:	0800b5e8 	.word	0x0800b5e8
 8001e48:	0800238d 	.word	0x0800238d
 8001e4c:	200014bc 	.word	0x200014bc
 8001e50:	0800b54c 	.word	0x0800b54c

08001e54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b094      	sub	sp, #80	; 0x50
 8001e58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e5a:	f107 031c 	add.w	r3, r7, #28
 8001e5e:	2234      	movs	r2, #52	; 0x34
 8001e60:	2100      	movs	r1, #0
 8001e62:	4618      	mov	r0, r3
 8001e64:	f009 fa4e 	bl	800b304 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e68:	f107 0308 	add.w	r3, r7, #8
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	60da      	str	r2, [r3, #12]
 8001e76:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001e78:	f002 fa72 	bl	8004360 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e7c:	4b2c      	ldr	r3, [pc, #176]	; (8001f30 <SystemClock_Config+0xdc>)
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e80:	4a2b      	ldr	r2, [pc, #172]	; (8001f30 <SystemClock_Config+0xdc>)
 8001e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e86:	6413      	str	r3, [r2, #64]	; 0x40
 8001e88:	4b29      	ldr	r3, [pc, #164]	; (8001f30 <SystemClock_Config+0xdc>)
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e90:	607b      	str	r3, [r7, #4]
 8001e92:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e94:	4b27      	ldr	r3, [pc, #156]	; (8001f34 <SystemClock_Config+0xe0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e9c:	4a25      	ldr	r2, [pc, #148]	; (8001f34 <SystemClock_Config+0xe0>)
 8001e9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ea2:	6013      	str	r3, [r2, #0]
 8001ea4:	4b23      	ldr	r3, [pc, #140]	; (8001f34 <SystemClock_Config+0xe0>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001eac:	603b      	str	r3, [r7, #0]
 8001eae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001eb4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001eb8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ebe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ec2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ec4:	2304      	movs	r3, #4
 8001ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001ec8:	2360      	movs	r3, #96	; 0x60
 8001eca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ed0:	2304      	movs	r3, #4
 8001ed2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ed8:	f107 031c 	add.w	r3, r7, #28
 8001edc:	4618      	mov	r0, r3
 8001ede:	f002 fa9f 	bl	8004420 <HAL_RCC_OscConfig>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001ee8:	f000 fb34 	bl	8002554 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001eec:	f002 fa48 	bl	8004380 <HAL_PWREx_EnableOverDrive>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001ef6:	f000 fb2d 	bl	8002554 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001efa:	230f      	movs	r3, #15
 8001efc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001efe:	2302      	movs	r3, #2
 8001f00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001f10:	f107 0308 	add.w	r3, r7, #8
 8001f14:	2103      	movs	r1, #3
 8001f16:	4618      	mov	r0, r3
 8001f18:	f002 fd30 	bl	800497c <HAL_RCC_ClockConfig>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001f22:	f000 fb17 	bl	8002554 <Error_Handler>
  }
}
 8001f26:	bf00      	nop
 8001f28:	3750      	adds	r7, #80	; 0x50
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40007000 	.word	0x40007000

08001f38 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001f3c:	4b1f      	ldr	r3, [pc, #124]	; (8001fbc <MX_ETH_Init+0x84>)
 8001f3e:	4a20      	ldr	r2, [pc, #128]	; (8001fc0 <MX_ETH_Init+0x88>)
 8001f40:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001f42:	4b20      	ldr	r3, [pc, #128]	; (8001fc4 <MX_ETH_Init+0x8c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001f48:	4b1e      	ldr	r3, [pc, #120]	; (8001fc4 <MX_ETH_Init+0x8c>)
 8001f4a:	2280      	movs	r2, #128	; 0x80
 8001f4c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001f4e:	4b1d      	ldr	r3, [pc, #116]	; (8001fc4 <MX_ETH_Init+0x8c>)
 8001f50:	22e1      	movs	r2, #225	; 0xe1
 8001f52:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001f54:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <MX_ETH_Init+0x8c>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001f5a:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <MX_ETH_Init+0x8c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001f60:	4b18      	ldr	r3, [pc, #96]	; (8001fc4 <MX_ETH_Init+0x8c>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001f66:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <MX_ETH_Init+0x84>)
 8001f68:	4a16      	ldr	r2, [pc, #88]	; (8001fc4 <MX_ETH_Init+0x8c>)
 8001f6a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001f6c:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <MX_ETH_Init+0x84>)
 8001f6e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001f72:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <MX_ETH_Init+0x84>)
 8001f76:	4a14      	ldr	r2, [pc, #80]	; (8001fc8 <MX_ETH_Init+0x90>)
 8001f78:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <MX_ETH_Init+0x84>)
 8001f7c:	4a13      	ldr	r2, [pc, #76]	; (8001fcc <MX_ETH_Init+0x94>)
 8001f7e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001f80:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <MX_ETH_Init+0x84>)
 8001f82:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001f86:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001f88:	480c      	ldr	r0, [pc, #48]	; (8001fbc <MX_ETH_Init+0x84>)
 8001f8a:	f001 fbb5 	bl	80036f8 <HAL_ETH_Init>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001f94:	f000 fade 	bl	8002554 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001f98:	2238      	movs	r2, #56	; 0x38
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	480c      	ldr	r0, [pc, #48]	; (8001fd0 <MX_ETH_Init+0x98>)
 8001f9e:	f009 f9b1 	bl	800b304 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <MX_ETH_Init+0x98>)
 8001fa4:	2221      	movs	r2, #33	; 0x21
 8001fa6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001fa8:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <MX_ETH_Init+0x98>)
 8001faa:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001fae:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001fb0:	4b07      	ldr	r3, [pc, #28]	; (8001fd0 <MX_ETH_Init+0x98>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000d08 	.word	0x20000d08
 8001fc0:	40028000 	.word	0x40028000
 8001fc4:	200014c8 	.word	0x200014c8
 8001fc8:	20000118 	.word	0x20000118
 8001fcc:	20000078 	.word	0x20000078
 8001fd0:	20000cd0 	.word	0x20000cd0

08001fd4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001fd8:	4b14      	ldr	r3, [pc, #80]	; (800202c <MX_UART4_Init+0x58>)
 8001fda:	4a15      	ldr	r2, [pc, #84]	; (8002030 <MX_UART4_Init+0x5c>)
 8001fdc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001fde:	4b13      	ldr	r3, [pc, #76]	; (800202c <MX_UART4_Init+0x58>)
 8001fe0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fe4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001fe6:	4b11      	ldr	r3, [pc, #68]	; (800202c <MX_UART4_Init+0x58>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001fec:	4b0f      	ldr	r3, [pc, #60]	; (800202c <MX_UART4_Init+0x58>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001ff2:	4b0e      	ldr	r3, [pc, #56]	; (800202c <MX_UART4_Init+0x58>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001ff8:	4b0c      	ldr	r3, [pc, #48]	; (800202c <MX_UART4_Init+0x58>)
 8001ffa:	220c      	movs	r2, #12
 8001ffc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ffe:	4b0b      	ldr	r3, [pc, #44]	; (800202c <MX_UART4_Init+0x58>)
 8002000:	2200      	movs	r2, #0
 8002002:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002004:	4b09      	ldr	r3, [pc, #36]	; (800202c <MX_UART4_Init+0x58>)
 8002006:	2200      	movs	r2, #0
 8002008:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800200a:	4b08      	ldr	r3, [pc, #32]	; (800202c <MX_UART4_Init+0x58>)
 800200c:	2200      	movs	r2, #0
 800200e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002010:	4b06      	ldr	r3, [pc, #24]	; (800202c <MX_UART4_Init+0x58>)
 8002012:	2200      	movs	r2, #0
 8002014:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002016:	4805      	ldr	r0, [pc, #20]	; (800202c <MX_UART4_Init+0x58>)
 8002018:	f003 fe10 	bl	8005c3c <HAL_UART_Init>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002022:	f000 fa97 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000db8 	.word	0x20000db8
 8002030:	40004c00 	.word	0x40004c00

08002034 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002038:	4b14      	ldr	r3, [pc, #80]	; (800208c <MX_USART2_UART_Init+0x58>)
 800203a:	4a15      	ldr	r2, [pc, #84]	; (8002090 <MX_USART2_UART_Init+0x5c>)
 800203c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800203e:	4b13      	ldr	r3, [pc, #76]	; (800208c <MX_USART2_UART_Init+0x58>)
 8002040:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002044:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002046:	4b11      	ldr	r3, [pc, #68]	; (800208c <MX_USART2_UART_Init+0x58>)
 8002048:	2200      	movs	r2, #0
 800204a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800204c:	4b0f      	ldr	r3, [pc, #60]	; (800208c <MX_USART2_UART_Init+0x58>)
 800204e:	2200      	movs	r2, #0
 8002050:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002052:	4b0e      	ldr	r3, [pc, #56]	; (800208c <MX_USART2_UART_Init+0x58>)
 8002054:	2200      	movs	r2, #0
 8002056:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002058:	4b0c      	ldr	r3, [pc, #48]	; (800208c <MX_USART2_UART_Init+0x58>)
 800205a:	220c      	movs	r2, #12
 800205c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800205e:	4b0b      	ldr	r3, [pc, #44]	; (800208c <MX_USART2_UART_Init+0x58>)
 8002060:	2200      	movs	r2, #0
 8002062:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002064:	4b09      	ldr	r3, [pc, #36]	; (800208c <MX_USART2_UART_Init+0x58>)
 8002066:	2200      	movs	r2, #0
 8002068:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800206a:	4b08      	ldr	r3, [pc, #32]	; (800208c <MX_USART2_UART_Init+0x58>)
 800206c:	2200      	movs	r2, #0
 800206e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <MX_USART2_UART_Init+0x58>)
 8002072:	2200      	movs	r2, #0
 8002074:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002076:	4805      	ldr	r0, [pc, #20]	; (800208c <MX_USART2_UART_Init+0x58>)
 8002078:	f003 fde0 	bl	8005c3c <HAL_UART_Init>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002082:	f000 fa67 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000e40 	.word	0x20000e40
 8002090:	40004400 	.word	0x40004400

08002094 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002098:	4b14      	ldr	r3, [pc, #80]	; (80020ec <MX_USART3_UART_Init+0x58>)
 800209a:	4a15      	ldr	r2, [pc, #84]	; (80020f0 <MX_USART3_UART_Init+0x5c>)
 800209c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800209e:	4b13      	ldr	r3, [pc, #76]	; (80020ec <MX_USART3_UART_Init+0x58>)
 80020a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020a6:	4b11      	ldr	r3, [pc, #68]	; (80020ec <MX_USART3_UART_Init+0x58>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020ac:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <MX_USART3_UART_Init+0x58>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020b2:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <MX_USART3_UART_Init+0x58>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020b8:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <MX_USART3_UART_Init+0x58>)
 80020ba:	220c      	movs	r2, #12
 80020bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020be:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <MX_USART3_UART_Init+0x58>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020c4:	4b09      	ldr	r3, [pc, #36]	; (80020ec <MX_USART3_UART_Init+0x58>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020ca:	4b08      	ldr	r3, [pc, #32]	; (80020ec <MX_USART3_UART_Init+0x58>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020d0:	4b06      	ldr	r3, [pc, #24]	; (80020ec <MX_USART3_UART_Init+0x58>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020d6:	4805      	ldr	r0, [pc, #20]	; (80020ec <MX_USART3_UART_Init+0x58>)
 80020d8:	f003 fdb0 	bl	8005c3c <HAL_UART_Init>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80020e2:	f000 fa37 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20000ec8 	.word	0x20000ec8
 80020f0:	40004800 	.word	0x40004800

080020f4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80020f8:	4b14      	ldr	r3, [pc, #80]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80020fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002100:	4b12      	ldr	r3, [pc, #72]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002102:	2206      	movs	r2, #6
 8002104:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002106:	4b11      	ldr	r3, [pc, #68]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002108:	2202      	movs	r2, #2
 800210a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800210c:	4b0f      	ldr	r3, [pc, #60]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800210e:	2200      	movs	r2, #0
 8002110:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002112:	4b0e      	ldr	r3, [pc, #56]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002114:	2202      	movs	r2, #2
 8002116:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002118:	4b0c      	ldr	r3, [pc, #48]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800211a:	2201      	movs	r2, #1
 800211c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800211e:	4b0b      	ldr	r3, [pc, #44]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002120:	2200      	movs	r2, #0
 8002122:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002124:	4b09      	ldr	r3, [pc, #36]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002126:	2200      	movs	r2, #0
 8002128:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800212a:	4b08      	ldr	r3, [pc, #32]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800212c:	2201      	movs	r2, #1
 800212e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002130:	4b06      	ldr	r3, [pc, #24]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002132:	2200      	movs	r2, #0
 8002134:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002136:	4805      	ldr	r0, [pc, #20]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002138:	f001 ffc9 	bl	80040ce <HAL_PCD_Init>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002142:	f000 fa07 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000fb0 	.word	0x20000fb0

08002150 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002156:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <MX_DMA_Init+0x38>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	4a0b      	ldr	r2, [pc, #44]	; (8002188 <MX_DMA_Init+0x38>)
 800215c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002160:	6313      	str	r3, [r2, #48]	; 0x30
 8002162:	4b09      	ldr	r3, [pc, #36]	; (8002188 <MX_DMA_Init+0x38>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800216a:	607b      	str	r3, [r7, #4]
 800216c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800216e:	2200      	movs	r2, #0
 8002170:	2105      	movs	r1, #5
 8002172:	2010      	movs	r0, #16
 8002174:	f000 fe50 	bl	8002e18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002178:	2010      	movs	r0, #16
 800217a:	f000 fe69 	bl	8002e50 <HAL_NVIC_EnableIRQ>

}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40023800 	.word	0x40023800

0800218c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08c      	sub	sp, #48	; 0x30
 8002190:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002192:	f107 031c 	add.w	r3, r7, #28
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	605a      	str	r2, [r3, #4]
 800219c:	609a      	str	r2, [r3, #8]
 800219e:	60da      	str	r2, [r3, #12]
 80021a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021a2:	4b47      	ldr	r3, [pc, #284]	; (80022c0 <MX_GPIO_Init+0x134>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	4a46      	ldr	r2, [pc, #280]	; (80022c0 <MX_GPIO_Init+0x134>)
 80021a8:	f043 0304 	orr.w	r3, r3, #4
 80021ac:	6313      	str	r3, [r2, #48]	; 0x30
 80021ae:	4b44      	ldr	r3, [pc, #272]	; (80022c0 <MX_GPIO_Init+0x134>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	f003 0304 	and.w	r3, r3, #4
 80021b6:	61bb      	str	r3, [r7, #24]
 80021b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021ba:	4b41      	ldr	r3, [pc, #260]	; (80022c0 <MX_GPIO_Init+0x134>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	4a40      	ldr	r2, [pc, #256]	; (80022c0 <MX_GPIO_Init+0x134>)
 80021c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021c4:	6313      	str	r3, [r2, #48]	; 0x30
 80021c6:	4b3e      	ldr	r3, [pc, #248]	; (80022c0 <MX_GPIO_Init+0x134>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d2:	4b3b      	ldr	r3, [pc, #236]	; (80022c0 <MX_GPIO_Init+0x134>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	4a3a      	ldr	r2, [pc, #232]	; (80022c0 <MX_GPIO_Init+0x134>)
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	6313      	str	r3, [r2, #48]	; 0x30
 80021de:	4b38      	ldr	r3, [pc, #224]	; (80022c0 <MX_GPIO_Init+0x134>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	613b      	str	r3, [r7, #16]
 80021e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ea:	4b35      	ldr	r3, [pc, #212]	; (80022c0 <MX_GPIO_Init+0x134>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	4a34      	ldr	r2, [pc, #208]	; (80022c0 <MX_GPIO_Init+0x134>)
 80021f0:	f043 0302 	orr.w	r3, r3, #2
 80021f4:	6313      	str	r3, [r2, #48]	; 0x30
 80021f6:	4b32      	ldr	r3, [pc, #200]	; (80022c0 <MX_GPIO_Init+0x134>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002202:	4b2f      	ldr	r3, [pc, #188]	; (80022c0 <MX_GPIO_Init+0x134>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	4a2e      	ldr	r2, [pc, #184]	; (80022c0 <MX_GPIO_Init+0x134>)
 8002208:	f043 0308 	orr.w	r3, r3, #8
 800220c:	6313      	str	r3, [r2, #48]	; 0x30
 800220e:	4b2c      	ldr	r3, [pc, #176]	; (80022c0 <MX_GPIO_Init+0x134>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800221a:	4b29      	ldr	r3, [pc, #164]	; (80022c0 <MX_GPIO_Init+0x134>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	4a28      	ldr	r2, [pc, #160]	; (80022c0 <MX_GPIO_Init+0x134>)
 8002220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002224:	6313      	str	r3, [r2, #48]	; 0x30
 8002226:	4b26      	ldr	r3, [pc, #152]	; (80022c0 <MX_GPIO_Init+0x134>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800222e:	607b      	str	r3, [r7, #4]
 8002230:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002232:	2200      	movs	r2, #0
 8002234:	f244 0181 	movw	r1, #16513	; 0x4081
 8002238:	4822      	ldr	r0, [pc, #136]	; (80022c4 <MX_GPIO_Init+0x138>)
 800223a:	f001 ff2f 	bl	800409c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800223e:	2200      	movs	r2, #0
 8002240:	2140      	movs	r1, #64	; 0x40
 8002242:	4821      	ldr	r0, [pc, #132]	; (80022c8 <MX_GPIO_Init+0x13c>)
 8002244:	f001 ff2a 	bl	800409c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002248:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800224c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800224e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002252:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002258:	f107 031c 	add.w	r3, r7, #28
 800225c:	4619      	mov	r1, r3
 800225e:	481b      	ldr	r0, [pc, #108]	; (80022cc <MX_GPIO_Init+0x140>)
 8002260:	f001 fd70 	bl	8003d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002264:	f244 0381 	movw	r3, #16513	; 0x4081
 8002268:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800226a:	2301      	movs	r3, #1
 800226c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002272:	2300      	movs	r3, #0
 8002274:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002276:	f107 031c 	add.w	r3, r7, #28
 800227a:	4619      	mov	r1, r3
 800227c:	4811      	ldr	r0, [pc, #68]	; (80022c4 <MX_GPIO_Init+0x138>)
 800227e:	f001 fd61 	bl	8003d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002282:	2340      	movs	r3, #64	; 0x40
 8002284:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002286:	2301      	movs	r3, #1
 8002288:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228a:	2300      	movs	r3, #0
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228e:	2300      	movs	r3, #0
 8002290:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002292:	f107 031c 	add.w	r3, r7, #28
 8002296:	4619      	mov	r1, r3
 8002298:	480b      	ldr	r0, [pc, #44]	; (80022c8 <MX_GPIO_Init+0x13c>)
 800229a:	f001 fd53 	bl	8003d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800229e:	2380      	movs	r3, #128	; 0x80
 80022a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022a2:	2300      	movs	r3, #0
 80022a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80022aa:	f107 031c 	add.w	r3, r7, #28
 80022ae:	4619      	mov	r1, r3
 80022b0:	4805      	ldr	r0, [pc, #20]	; (80022c8 <MX_GPIO_Init+0x13c>)
 80022b2:	f001 fd47 	bl	8003d44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022b6:	bf00      	nop
 80022b8:	3730      	adds	r7, #48	; 0x30
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40020400 	.word	0x40020400
 80022c8:	40021800 	.word	0x40021800
 80022cc:	40020800 	.word	0x40020800

080022d0 <startReceiveDMA>:

/* USER CODE BEGIN 4 */

int32_t startReceiveDMA( uint8_t* Buffer, uint_fast16_t Len )
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
	if(!rxInProgress && (Buffer != NULL))
 80022da:	4b20      	ldr	r3, [pc, #128]	; (800235c <startReceiveDMA+0x8c>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	f083 0301 	eor.w	r3, r3, #1
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d033      	beq.n	8002350 <startReceiveDMA+0x80>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d030      	beq.n	8002350 <startReceiveDMA+0x80>
	{
		rxInProgress = true;
 80022ee:	4b1b      	ldr	r3, [pc, #108]	; (800235c <startReceiveDMA+0x8c>)
 80022f0:	2201      	movs	r2, #1
 80022f2:	701a      	strb	r2, [r3, #0]
		rxLen = Len;
 80022f4:	4a1a      	ldr	r2, [pc, #104]	; (8002360 <startReceiveDMA+0x90>)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	6013      	str	r3, [r2, #0]

		//get the DMA peripheral ready to receive data immediately before enabling UART
		//so there is no chance of overrun
		//dma stream enable bit must be toggled before a transfer will properly restart
		__HAL_DMA_DISABLE(&usart2DmaRx);
 80022fa:	4b1a      	ldr	r3, [pc, #104]	; (8002364 <startReceiveDMA+0x94>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4b18      	ldr	r3, [pc, #96]	; (8002364 <startReceiveDMA+0x94>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 0201 	bic.w	r2, r2, #1
 8002308:	601a      	str	r2, [r3, #0]
		MX_DMA_Init();
 800230a:	f7ff ff21 	bl	8002150 <MX_DMA_Init>
		if(HAL_DMA_Start(&usart2DmaRx, (uint32_t)&(USART2->RDR), (uint32_t) Buffer, Len) != HAL_OK)
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	4915      	ldr	r1, [pc, #84]	; (8002368 <startReceiveDMA+0x98>)
 8002314:	4813      	ldr	r0, [pc, #76]	; (8002364 <startReceiveDMA+0x94>)
 8002316:	f000 fe57 	bl	8002fc8 <HAL_DMA_Start>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d002      	beq.n	8002326 <startReceiveDMA+0x56>
		{
			return -1;
 8002320:	f04f 33ff 	mov.w	r3, #4294967295
 8002324:	e016      	b.n	8002354 <startReceiveDMA+0x84>
		}

		//enable the UART
		//clears error flags
		USART2->ICR |= (USART_ICR_FECF | USART_ICR_PECF |
 8002326:	4b11      	ldr	r3, [pc, #68]	; (800236c <startReceiveDMA+0x9c>)
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	4a10      	ldr	r2, [pc, #64]	; (800236c <startReceiveDMA+0x9c>)
 800232c:	f043 030f 	orr.w	r3, r3, #15
 8002330:	6213      	str	r3, [r2, #32]
		//we'll wind up with a lot of noise on the line (the way the ISR is written will
		//cause a transfer to terminate if there are any errors are detected, rather than simply
		//continue with what data it can).  In practice, most of the "errors" at baudrates below
		//460800 are noise detection
//		USART2->CR3 |= (USART_CR3_EIE);	//enable error interrupts
		NVIC_SetPriority(USART2_IRQn, 6);
 8002332:	2106      	movs	r1, #6
 8002334:	2026      	movs	r0, #38	; 0x26
 8002336:	f7ff fcf5 	bl	8001d24 <__NVIC_SetPriority>
		NVIC_EnableIRQ(USART2_IRQn);
 800233a:	2026      	movs	r0, #38	; 0x26
 800233c:	f7ff fcd4 	bl	8001ce8 <__NVIC_EnableIRQ>
		USART2->CR1 |= (USART_CR1_UE);
 8002340:	4b0a      	ldr	r3, [pc, #40]	; (800236c <startReceiveDMA+0x9c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a09      	ldr	r2, [pc, #36]	; (800236c <startReceiveDMA+0x9c>)
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	6013      	str	r3, [r2, #0]
		return 0;
 800234c:	2300      	movs	r3, #0
 800234e:	e001      	b.n	8002354 <startReceiveDMA+0x84>
	}

	return -1;
 8002350:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002354:	4618      	mov	r0, r3
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20000cac 	.word	0x20000cac
 8002360:	20000cb0 	.word	0x20000cb0
 8002364:	20000c4c 	.word	0x20000c4c
 8002368:	40004424 	.word	0x40004424
 800236c:	40004400 	.word	0x40004400

08002370 <stopReceiveDMA>:

void stopReceiveDMA( void )
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
	rxInProgress = false;
 8002374:	4b03      	ldr	r3, [pc, #12]	; (8002384 <stopReceiveDMA+0x14>)
 8002376:	2200      	movs	r2, #0
 8002378:	701a      	strb	r2, [r3, #0]
	HAL_DMA_Abort(&usart2DmaRx);
 800237a:	4803      	ldr	r0, [pc, #12]	; (8002388 <stopReceiveDMA+0x18>)
 800237c:	f000 febf 	bl	80030fe <HAL_DMA_Abort>
}
 8002380:	bf00      	nop
 8002382:	bd80      	pop	{r7, pc}
 8002384:	20000cac 	.word	0x20000cac
 8002388:	20000c4c 	.word	0x20000c4c

0800238c <uartPrintOutTask>:
void uartPrintOutTask( void* NotUsed)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b088      	sub	sp, #32
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
	uint8_t rxBufferedData[20];
	uint8_t numBytesReceived = 16;
 8002394:	2310      	movs	r3, #16
 8002396:	77fb      	strb	r3, [r7, #31]

	MX_DMA_Init();
 8002398:	f7ff feda 	bl	8002150 <MX_DMA_Init>
	//STM_UartInit(USART2, BAUDRATE, NULL, &usart2DmaRx);
	MX_USART2_UART_Init();
 800239c:	f7ff fe4a 	bl	8002034 <MX_USART2_UART_Init>
	while(1)
	{
		//SEGGER_SYSVIEW_PrintfHost("Printer task");
		memset(rxBufferedData, 0, 20);
 80023a0:	f107 0308 	add.w	r3, r7, #8
 80023a4:	2214      	movs	r2, #20
 80023a6:	2100      	movs	r1, #0
 80023a8:	4618      	mov	r0, r3
 80023aa:	f008 ffab 	bl	800b304 <memset>
		startReceiveDMA(rxData, expectedLen);
 80023ae:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <uartPrintOutTask+0x68>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	4619      	mov	r1, r3
 80023b4:	4810      	ldr	r0, [pc, #64]	; (80023f8 <uartPrintOutTask+0x6c>)
 80023b6:	f7ff ff8b 	bl	80022d0 <startReceiveDMA>
		uint8_t numBytes = xStreamBufferReceive(	rxStream,
 80023ba:	4b10      	ldr	r3, [pc, #64]	; (80023fc <uartPrintOutTask+0x70>)
 80023bc:	6818      	ldr	r0, [r3, #0]
 80023be:	7ffa      	ldrb	r2, [r7, #31]
 80023c0:	f107 0108 	add.w	r1, r7, #8
 80023c4:	2364      	movs	r3, #100	; 0x64
 80023c6:	f006 fb3b 	bl	8008a40 <xStreamBufferReceive>
 80023ca:	4603      	mov	r3, r0
 80023cc:	77bb      	strb	r3, [r7, #30]
													rxBufferedData,
													numBytesReceived,
													100 );
		if(numBytes > 0)
 80023ce:	7fbb      	ldrb	r3, [r7, #30]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d008      	beq.n	80023e6 <uartPrintOutTask+0x5a>
		{
			SEGGER_SYSVIEW_PrintfHost("received: ");
 80023d4:	480a      	ldr	r0, [pc, #40]	; (8002400 <uartPrintOutTask+0x74>)
 80023d6:	f7ff fb0d 	bl	80019f4 <SEGGER_SYSVIEW_PrintfHost>
			SEGGER_SYSVIEW_Print((char*)rxBufferedData);
 80023da:	f107 0308 	add.w	r3, r7, #8
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff fb1c 	bl	8001a1c <SEGGER_SYSVIEW_Print>
 80023e4:	e7dc      	b.n	80023a0 <uartPrintOutTask+0x14>
		}
		else
		{
	        stopReceiveDMA();
 80023e6:	f7ff ffc3 	bl	8002370 <stopReceiveDMA>
			SEGGER_SYSVIEW_PrintfHost("timeout");
 80023ea:	4806      	ldr	r0, [pc, #24]	; (8002404 <uartPrintOutTask+0x78>)
 80023ec:	f7ff fb02 	bl	80019f4 <SEGGER_SYSVIEW_PrintfHost>
	{
 80023f0:	e7d6      	b.n	80023a0 <uartPrintOutTask+0x14>
 80023f2:	bf00      	nop
 80023f4:	20000000 	.word	0x20000000
 80023f8:	20000cb4 	.word	0x20000cb4
 80023fc:	20000cc8 	.word	0x20000cc8
 8002400:	0800b554 	.word	0x0800b554
 8002404:	0800b560 	.word	0x0800b560

08002408 <DMA1_Stream5_IRQHandler>:
		}
	}
}

void DMA1_Stream5_IRQHandler(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	static uint8_t tmpBuffer[14] = {0};

	HAL_UART_Receive_DMA(&huart2, tmpBuffer, 14);
 800240e:	220e      	movs	r2, #14
 8002410:	491e      	ldr	r1, [pc, #120]	; (800248c <DMA1_Stream5_IRQHandler+0x84>)
 8002412:	481f      	ldr	r0, [pc, #124]	; (8002490 <DMA1_Stream5_IRQHandler+0x88>)
 8002414:	f003 fce3 	bl	8005dde <HAL_UART_Receive_DMA>

	SEGGER_SYSVIEW_PrintfHost(&tmpBuffer);
 8002418:	481c      	ldr	r0, [pc, #112]	; (800248c <DMA1_Stream5_IRQHandler+0x84>)
 800241a:	f7ff faeb 	bl	80019f4 <SEGGER_SYSVIEW_PrintfHost>
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800241e:	481d      	ldr	r0, [pc, #116]	; (8002494 <DMA1_Stream5_IRQHandler+0x8c>)
 8002420:	f000 ff00 	bl	8003224 <HAL_DMA_IRQHandler>

  //SEGGER_SYSVIEW_PrintfHost("irq");
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8002424:	2300      	movs	r3, #0
 8002426:	607b      	str	r3, [r7, #4]
	SEGGER_SYSVIEW_RecordEnterISR();
 8002428:	f7ff f9a0 	bl	800176c <SEGGER_SYSVIEW_RecordEnterISR>


	if(rxInProgress && (DMA1->HISR & DMA_HISR_TCIF5))
 800242c:	4b1a      	ldr	r3, [pc, #104]	; (8002498 <DMA1_Stream5_IRQHandler+0x90>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d01a      	beq.n	800246a <DMA1_Stream5_IRQHandler+0x62>
 8002434:	4b19      	ldr	r3, [pc, #100]	; (800249c <DMA1_Stream5_IRQHandler+0x94>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800243c:	2b00      	cmp	r3, #0
 800243e:	d014      	beq.n	800246a <DMA1_Stream5_IRQHandler+0x62>
	{
		rxInProgress = false;
 8002440:	4b15      	ldr	r3, [pc, #84]	; (8002498 <DMA1_Stream5_IRQHandler+0x90>)
 8002442:	2200      	movs	r2, #0
 8002444:	701a      	strb	r2, [r3, #0]
		DMA1->HIFCR |= DMA_HIFCR_CTCIF5;
 8002446:	4b15      	ldr	r3, [pc, #84]	; (800249c <DMA1_Stream5_IRQHandler+0x94>)
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	4a14      	ldr	r2, [pc, #80]	; (800249c <DMA1_Stream5_IRQHandler+0x94>)
 800244c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002450:	60d3      	str	r3, [r2, #12]
		//SEGGER_SYSVIEW_PrintfHost(&rxData);
		xStreamBufferSendFromISR(	rxStream,
 8002452:	4b13      	ldr	r3, [pc, #76]	; (80024a0 <DMA1_Stream5_IRQHandler+0x98>)
 8002454:	6818      	ldr	r0, [r3, #0]
 8002456:	4b13      	ldr	r3, [pc, #76]	; (80024a4 <DMA1_Stream5_IRQHandler+0x9c>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	461a      	mov	r2, r3
									rxData,
									expectedLen - DMA1_Stream5->NDTR,
 800245c:	4b12      	ldr	r3, [pc, #72]	; (80024a8 <DMA1_Stream5_IRQHandler+0xa0>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	1ad2      	subs	r2, r2, r3
		xStreamBufferSendFromISR(	rxStream,
 8002462:	1d3b      	adds	r3, r7, #4
 8002464:	4911      	ldr	r1, [pc, #68]	; (80024ac <DMA1_Stream5_IRQHandler+0xa4>)
 8002466:	f006 fa37 	bl	80088d8 <xStreamBufferSendFromISR>
									&xHigherPriorityTaskWoken);
	}
	SEGGER_SYSVIEW_RecordExitISR();
 800246a:	f7ff f9c1 	bl	80017f0 <SEGGER_SYSVIEW_RecordExitISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d007      	beq.n	8002484 <DMA1_Stream5_IRQHandler+0x7c>
 8002474:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <DMA1_Stream5_IRQHandler+0xa8>)
 8002476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	f3bf 8f4f 	dsb	sy
 8002480:	f3bf 8f6f 	isb	sy
  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002484:	bf00      	nop
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	200014d0 	.word	0x200014d0
 8002490:	20000e40 	.word	0x20000e40
 8002494:	20000f50 	.word	0x20000f50
 8002498:	20000cac 	.word	0x20000cac
 800249c:	40026000 	.word	0x40026000
 80024a0:	20000cc8 	.word	0x20000cc8
 80024a4:	20000000 	.word	0x20000000
 80024a8:	40026088 	.word	0x40026088
 80024ac:	20000cb4 	.word	0x20000cb4
 80024b0:	e000ed04 	.word	0xe000ed04

080024b4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80024bc:	2001      	movs	r0, #1
 80024be:	f005 fa7b 	bl	80079b8 <osDelay>
    //SEGGER_SYSVIEW_PrintfHost("def");
    HAL_UART_Receive_DMA (&huart2, uart2dmaMsg, 14);
 80024c2:	220e      	movs	r2, #14
 80024c4:	4903      	ldr	r1, [pc, #12]	; (80024d4 <StartDefaultTask+0x20>)
 80024c6:	4804      	ldr	r0, [pc, #16]	; (80024d8 <StartDefaultTask+0x24>)
 80024c8:	f003 fc89 	bl	8005dde <HAL_UART_Receive_DMA>
    SEGGER_SYSVIEW_PrintfHost(&uart2dmaMsg);
 80024cc:	4801      	ldr	r0, [pc, #4]	; (80024d4 <StartDefaultTask+0x20>)
 80024ce:	f7ff fa91 	bl	80019f4 <SEGGER_SYSVIEW_PrintfHost>
    osDelay(1);
 80024d2:	e7f3      	b.n	80024bc <StartDefaultTask+0x8>
 80024d4:	20000ccc 	.word	0x20000ccc
 80024d8:	20000e40 	.word	0x20000e40

080024dc <startUart4TrafficEntry>:
  /* USER CODE END uartPrintTaskEntry */
}

/* startUart4TrafficEntry function */
void startUart4TrafficEntry(void *argument)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startUart4TrafficEntry */
  osTimerStart(uart4SendHandle, 500 / portTICK_PERIOD_MS);
 80024e4:	4b05      	ldr	r3, [pc, #20]	; (80024fc <startUart4TrafficEntry+0x20>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80024ec:	4618      	mov	r0, r3
 80024ee:	f005 fb2b 	bl	8007b48 <osTimerStart>

  /* USER CODE END startUart4TrafficEntry */
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	200014c4 	.word	0x200014c4

08002500 <uart4SendEntry>:

/* uart4SendEntry function */
void uart4SendEntry(void *argument)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uart4SendEntry */
	SEGGER_SYSVIEW_PrintfHost("UART 4 Send");
 8002508:	4806      	ldr	r0, [pc, #24]	; (8002524 <uart4SendEntry+0x24>)
 800250a:	f7ff fa73 	bl	80019f4 <SEGGER_SYSVIEW_PrintfHost>
	HAL_UART_Transmit(&huart4, uart4Msg, sizeof(uart4Msg), 100);
 800250e:	2364      	movs	r3, #100	; 0x64
 8002510:	220e      	movs	r2, #14
 8002512:	4905      	ldr	r1, [pc, #20]	; (8002528 <uart4SendEntry+0x28>)
 8002514:	4805      	ldr	r0, [pc, #20]	; (800252c <uart4SendEntry+0x2c>)
 8002516:	f003 fbdf 	bl	8005cd8 <HAL_UART_Transmit>
  /* USER CODE END uart4SendEntry */
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	0800b568 	.word	0x0800b568
 8002528:	0800b5b4 	.word	0x0800b5b4
 800252c:	20000db8 	.word	0x20000db8

08002530 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a04      	ldr	r2, [pc, #16]	; (8002550 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d101      	bne.n	8002546 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002542:	f000 fb6d 	bl	8002c20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40010000 	.word	0x40010000

08002554 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002558:	b672      	cpsid	i
}
 800255a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800255c:	e7fe      	b.n	800255c <Error_Handler+0x8>
	...

08002560 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002566:	4b11      	ldr	r3, [pc, #68]	; (80025ac <HAL_MspInit+0x4c>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	4a10      	ldr	r2, [pc, #64]	; (80025ac <HAL_MspInit+0x4c>)
 800256c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002570:	6413      	str	r3, [r2, #64]	; 0x40
 8002572:	4b0e      	ldr	r3, [pc, #56]	; (80025ac <HAL_MspInit+0x4c>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257a:	607b      	str	r3, [r7, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800257e:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <HAL_MspInit+0x4c>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002582:	4a0a      	ldr	r2, [pc, #40]	; (80025ac <HAL_MspInit+0x4c>)
 8002584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002588:	6453      	str	r3, [r2, #68]	; 0x44
 800258a:	4b08      	ldr	r3, [pc, #32]	; (80025ac <HAL_MspInit+0x4c>)
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002592:	603b      	str	r3, [r7, #0]
 8002594:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002596:	2200      	movs	r2, #0
 8002598:	210f      	movs	r1, #15
 800259a:	f06f 0001 	mvn.w	r0, #1
 800259e:	f000 fc3b 	bl	8002e18 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40023800 	.word	0x40023800

080025b0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08e      	sub	sp, #56	; 0x38
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	60da      	str	r2, [r3, #12]
 80025c6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a4e      	ldr	r2, [pc, #312]	; (8002708 <HAL_ETH_MspInit+0x158>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	f040 8096 	bne.w	8002700 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80025d4:	4b4d      	ldr	r3, [pc, #308]	; (800270c <HAL_ETH_MspInit+0x15c>)
 80025d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d8:	4a4c      	ldr	r2, [pc, #304]	; (800270c <HAL_ETH_MspInit+0x15c>)
 80025da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025de:	6313      	str	r3, [r2, #48]	; 0x30
 80025e0:	4b4a      	ldr	r3, [pc, #296]	; (800270c <HAL_ETH_MspInit+0x15c>)
 80025e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e8:	623b      	str	r3, [r7, #32]
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	4b47      	ldr	r3, [pc, #284]	; (800270c <HAL_ETH_MspInit+0x15c>)
 80025ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f0:	4a46      	ldr	r2, [pc, #280]	; (800270c <HAL_ETH_MspInit+0x15c>)
 80025f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025f6:	6313      	str	r3, [r2, #48]	; 0x30
 80025f8:	4b44      	ldr	r3, [pc, #272]	; (800270c <HAL_ETH_MspInit+0x15c>)
 80025fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002600:	61fb      	str	r3, [r7, #28]
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	4b41      	ldr	r3, [pc, #260]	; (800270c <HAL_ETH_MspInit+0x15c>)
 8002606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002608:	4a40      	ldr	r2, [pc, #256]	; (800270c <HAL_ETH_MspInit+0x15c>)
 800260a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800260e:	6313      	str	r3, [r2, #48]	; 0x30
 8002610:	4b3e      	ldr	r3, [pc, #248]	; (800270c <HAL_ETH_MspInit+0x15c>)
 8002612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002614:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002618:	61bb      	str	r3, [r7, #24]
 800261a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800261c:	4b3b      	ldr	r3, [pc, #236]	; (800270c <HAL_ETH_MspInit+0x15c>)
 800261e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002620:	4a3a      	ldr	r2, [pc, #232]	; (800270c <HAL_ETH_MspInit+0x15c>)
 8002622:	f043 0304 	orr.w	r3, r3, #4
 8002626:	6313      	str	r3, [r2, #48]	; 0x30
 8002628:	4b38      	ldr	r3, [pc, #224]	; (800270c <HAL_ETH_MspInit+0x15c>)
 800262a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002634:	4b35      	ldr	r3, [pc, #212]	; (800270c <HAL_ETH_MspInit+0x15c>)
 8002636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002638:	4a34      	ldr	r2, [pc, #208]	; (800270c <HAL_ETH_MspInit+0x15c>)
 800263a:	f043 0301 	orr.w	r3, r3, #1
 800263e:	6313      	str	r3, [r2, #48]	; 0x30
 8002640:	4b32      	ldr	r3, [pc, #200]	; (800270c <HAL_ETH_MspInit+0x15c>)
 8002642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800264c:	4b2f      	ldr	r3, [pc, #188]	; (800270c <HAL_ETH_MspInit+0x15c>)
 800264e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002650:	4a2e      	ldr	r2, [pc, #184]	; (800270c <HAL_ETH_MspInit+0x15c>)
 8002652:	f043 0302 	orr.w	r3, r3, #2
 8002656:	6313      	str	r3, [r2, #48]	; 0x30
 8002658:	4b2c      	ldr	r3, [pc, #176]	; (800270c <HAL_ETH_MspInit+0x15c>)
 800265a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002664:	4b29      	ldr	r3, [pc, #164]	; (800270c <HAL_ETH_MspInit+0x15c>)
 8002666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002668:	4a28      	ldr	r2, [pc, #160]	; (800270c <HAL_ETH_MspInit+0x15c>)
 800266a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800266e:	6313      	str	r3, [r2, #48]	; 0x30
 8002670:	4b26      	ldr	r3, [pc, #152]	; (800270c <HAL_ETH_MspInit+0x15c>)
 8002672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800267c:	2332      	movs	r3, #50	; 0x32
 800267e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002680:	2302      	movs	r3, #2
 8002682:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002684:	2300      	movs	r3, #0
 8002686:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002688:	2303      	movs	r3, #3
 800268a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800268c:	230b      	movs	r3, #11
 800268e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002694:	4619      	mov	r1, r3
 8002696:	481e      	ldr	r0, [pc, #120]	; (8002710 <HAL_ETH_MspInit+0x160>)
 8002698:	f001 fb54 	bl	8003d44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800269c:	2386      	movs	r3, #134	; 0x86
 800269e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a0:	2302      	movs	r3, #2
 80026a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a8:	2303      	movs	r3, #3
 80026aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80026ac:	230b      	movs	r3, #11
 80026ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026b4:	4619      	mov	r1, r3
 80026b6:	4817      	ldr	r0, [pc, #92]	; (8002714 <HAL_ETH_MspInit+0x164>)
 80026b8:	f001 fb44 	bl	8003d44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80026bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c2:	2302      	movs	r3, #2
 80026c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ca:	2303      	movs	r3, #3
 80026cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80026ce:	230b      	movs	r3, #11
 80026d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80026d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026d6:	4619      	mov	r1, r3
 80026d8:	480f      	ldr	r0, [pc, #60]	; (8002718 <HAL_ETH_MspInit+0x168>)
 80026da:	f001 fb33 	bl	8003d44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80026de:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e4:	2302      	movs	r3, #2
 80026e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e8:	2300      	movs	r3, #0
 80026ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ec:	2303      	movs	r3, #3
 80026ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80026f0:	230b      	movs	r3, #11
 80026f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026f8:	4619      	mov	r1, r3
 80026fa:	4808      	ldr	r0, [pc, #32]	; (800271c <HAL_ETH_MspInit+0x16c>)
 80026fc:	f001 fb22 	bl	8003d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002700:	bf00      	nop
 8002702:	3738      	adds	r7, #56	; 0x38
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40028000 	.word	0x40028000
 800270c:	40023800 	.word	0x40023800
 8002710:	40020800 	.word	0x40020800
 8002714:	40020000 	.word	0x40020000
 8002718:	40020400 	.word	0x40020400
 800271c:	40021800 	.word	0x40021800

08002720 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b0b2      	sub	sp, #200	; 0xc8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002728:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	605a      	str	r2, [r3, #4]
 8002732:	609a      	str	r2, [r3, #8]
 8002734:	60da      	str	r2, [r3, #12]
 8002736:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800273c:	2290      	movs	r2, #144	; 0x90
 800273e:	2100      	movs	r1, #0
 8002740:	4618      	mov	r0, r3
 8002742:	f008 fddf 	bl	800b304 <memset>
  if(huart->Instance==UART4)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a7f      	ldr	r2, [pc, #508]	; (8002948 <HAL_UART_MspInit+0x228>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d13d      	bne.n	80027cc <HAL_UART_MspInit+0xac>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002750:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002756:	2300      	movs	r3, #0
 8002758:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800275a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800275e:	4618      	mov	r0, r3
 8002760:	f002 fb64 	bl	8004e2c <HAL_RCCEx_PeriphCLKConfig>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800276a:	f7ff fef3 	bl	8002554 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800276e:	4b77      	ldr	r3, [pc, #476]	; (800294c <HAL_UART_MspInit+0x22c>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4a76      	ldr	r2, [pc, #472]	; (800294c <HAL_UART_MspInit+0x22c>)
 8002774:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002778:	6413      	str	r3, [r2, #64]	; 0x40
 800277a:	4b74      	ldr	r3, [pc, #464]	; (800294c <HAL_UART_MspInit+0x22c>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002782:	623b      	str	r3, [r7, #32]
 8002784:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002786:	4b71      	ldr	r3, [pc, #452]	; (800294c <HAL_UART_MspInit+0x22c>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	4a70      	ldr	r2, [pc, #448]	; (800294c <HAL_UART_MspInit+0x22c>)
 800278c:	f043 0304 	orr.w	r3, r3, #4
 8002790:	6313      	str	r3, [r2, #48]	; 0x30
 8002792:	4b6e      	ldr	r3, [pc, #440]	; (800294c <HAL_UART_MspInit+0x22c>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	f003 0304 	and.w	r3, r3, #4
 800279a:	61fb      	str	r3, [r7, #28]
 800279c:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800279e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80027a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a6:	2302      	movs	r3, #2
 80027a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b2:	2303      	movs	r3, #3
 80027b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80027b8:	2308      	movs	r3, #8
 80027ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027be:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80027c2:	4619      	mov	r1, r3
 80027c4:	4862      	ldr	r0, [pc, #392]	; (8002950 <HAL_UART_MspInit+0x230>)
 80027c6:	f001 fabd 	bl	8003d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80027ca:	e0b8      	b.n	800293e <HAL_UART_MspInit+0x21e>
  else if(huart->Instance==USART2)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a60      	ldr	r2, [pc, #384]	; (8002954 <HAL_UART_MspInit+0x234>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d171      	bne.n	80028ba <HAL_UART_MspInit+0x19a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80027d6:	2380      	movs	r3, #128	; 0x80
 80027d8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80027da:	2300      	movs	r3, #0
 80027dc:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027e2:	4618      	mov	r0, r3
 80027e4:	f002 fb22 	bl	8004e2c <HAL_RCCEx_PeriphCLKConfig>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 80027ee:	f7ff feb1 	bl	8002554 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027f2:	4b56      	ldr	r3, [pc, #344]	; (800294c <HAL_UART_MspInit+0x22c>)
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	4a55      	ldr	r2, [pc, #340]	; (800294c <HAL_UART_MspInit+0x22c>)
 80027f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027fc:	6413      	str	r3, [r2, #64]	; 0x40
 80027fe:	4b53      	ldr	r3, [pc, #332]	; (800294c <HAL_UART_MspInit+0x22c>)
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002806:	61bb      	str	r3, [r7, #24]
 8002808:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800280a:	4b50      	ldr	r3, [pc, #320]	; (800294c <HAL_UART_MspInit+0x22c>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	4a4f      	ldr	r2, [pc, #316]	; (800294c <HAL_UART_MspInit+0x22c>)
 8002810:	f043 0308 	orr.w	r3, r3, #8
 8002814:	6313      	str	r3, [r2, #48]	; 0x30
 8002816:	4b4d      	ldr	r3, [pc, #308]	; (800294c <HAL_UART_MspInit+0x22c>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	617b      	str	r3, [r7, #20]
 8002820:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002822:	2360      	movs	r3, #96	; 0x60
 8002824:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002828:	2302      	movs	r3, #2
 800282a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282e:	2300      	movs	r3, #0
 8002830:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002834:	2303      	movs	r3, #3
 8002836:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800283a:	2307      	movs	r3, #7
 800283c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002840:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002844:	4619      	mov	r1, r3
 8002846:	4844      	ldr	r0, [pc, #272]	; (8002958 <HAL_UART_MspInit+0x238>)
 8002848:	f001 fa7c 	bl	8003d44 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800284c:	4b43      	ldr	r3, [pc, #268]	; (800295c <HAL_UART_MspInit+0x23c>)
 800284e:	4a44      	ldr	r2, [pc, #272]	; (8002960 <HAL_UART_MspInit+0x240>)
 8002850:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002852:	4b42      	ldr	r3, [pc, #264]	; (800295c <HAL_UART_MspInit+0x23c>)
 8002854:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002858:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800285a:	4b40      	ldr	r3, [pc, #256]	; (800295c <HAL_UART_MspInit+0x23c>)
 800285c:	2200      	movs	r2, #0
 800285e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002860:	4b3e      	ldr	r3, [pc, #248]	; (800295c <HAL_UART_MspInit+0x23c>)
 8002862:	2200      	movs	r2, #0
 8002864:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002866:	4b3d      	ldr	r3, [pc, #244]	; (800295c <HAL_UART_MspInit+0x23c>)
 8002868:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800286c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800286e:	4b3b      	ldr	r3, [pc, #236]	; (800295c <HAL_UART_MspInit+0x23c>)
 8002870:	2200      	movs	r2, #0
 8002872:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002874:	4b39      	ldr	r3, [pc, #228]	; (800295c <HAL_UART_MspInit+0x23c>)
 8002876:	2200      	movs	r2, #0
 8002878:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800287a:	4b38      	ldr	r3, [pc, #224]	; (800295c <HAL_UART_MspInit+0x23c>)
 800287c:	2200      	movs	r2, #0
 800287e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002880:	4b36      	ldr	r3, [pc, #216]	; (800295c <HAL_UART_MspInit+0x23c>)
 8002882:	2200      	movs	r2, #0
 8002884:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002886:	4b35      	ldr	r3, [pc, #212]	; (800295c <HAL_UART_MspInit+0x23c>)
 8002888:	2200      	movs	r2, #0
 800288a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800288c:	4833      	ldr	r0, [pc, #204]	; (800295c <HAL_UART_MspInit+0x23c>)
 800288e:	f000 faed 	bl	8002e6c <HAL_DMA_Init>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <HAL_UART_MspInit+0x17c>
      Error_Handler();
 8002898:	f7ff fe5c 	bl	8002554 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a2f      	ldr	r2, [pc, #188]	; (800295c <HAL_UART_MspInit+0x23c>)
 80028a0:	675a      	str	r2, [r3, #116]	; 0x74
 80028a2:	4a2e      	ldr	r2, [pc, #184]	; (800295c <HAL_UART_MspInit+0x23c>)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80028a8:	2200      	movs	r2, #0
 80028aa:	2105      	movs	r1, #5
 80028ac:	2026      	movs	r0, #38	; 0x26
 80028ae:	f000 fab3 	bl	8002e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80028b2:	2026      	movs	r0, #38	; 0x26
 80028b4:	f000 facc 	bl	8002e50 <HAL_NVIC_EnableIRQ>
}
 80028b8:	e041      	b.n	800293e <HAL_UART_MspInit+0x21e>
  else if(huart->Instance==USART3)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a29      	ldr	r2, [pc, #164]	; (8002964 <HAL_UART_MspInit+0x244>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d13c      	bne.n	800293e <HAL_UART_MspInit+0x21e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80028c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028c8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80028ca:	2300      	movs	r3, #0
 80028cc:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028d2:	4618      	mov	r0, r3
 80028d4:	f002 faaa 	bl	8004e2c <HAL_RCCEx_PeriphCLKConfig>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_UART_MspInit+0x1c2>
      Error_Handler();
 80028de:	f7ff fe39 	bl	8002554 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80028e2:	4b1a      	ldr	r3, [pc, #104]	; (800294c <HAL_UART_MspInit+0x22c>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	4a19      	ldr	r2, [pc, #100]	; (800294c <HAL_UART_MspInit+0x22c>)
 80028e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028ec:	6413      	str	r3, [r2, #64]	; 0x40
 80028ee:	4b17      	ldr	r3, [pc, #92]	; (800294c <HAL_UART_MspInit+0x22c>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028f6:	613b      	str	r3, [r7, #16]
 80028f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028fa:	4b14      	ldr	r3, [pc, #80]	; (800294c <HAL_UART_MspInit+0x22c>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	4a13      	ldr	r2, [pc, #76]	; (800294c <HAL_UART_MspInit+0x22c>)
 8002900:	f043 0308 	orr.w	r3, r3, #8
 8002904:	6313      	str	r3, [r2, #48]	; 0x30
 8002906:	4b11      	ldr	r3, [pc, #68]	; (800294c <HAL_UART_MspInit+0x22c>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002912:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002916:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291a:	2302      	movs	r3, #2
 800291c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	2300      	movs	r3, #0
 8002922:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002926:	2303      	movs	r3, #3
 8002928:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800292c:	2307      	movs	r3, #7
 800292e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002932:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002936:	4619      	mov	r1, r3
 8002938:	4807      	ldr	r0, [pc, #28]	; (8002958 <HAL_UART_MspInit+0x238>)
 800293a:	f001 fa03 	bl	8003d44 <HAL_GPIO_Init>
}
 800293e:	bf00      	nop
 8002940:	37c8      	adds	r7, #200	; 0xc8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40004c00 	.word	0x40004c00
 800294c:	40023800 	.word	0x40023800
 8002950:	40020800 	.word	0x40020800
 8002954:	40004400 	.word	0x40004400
 8002958:	40020c00 	.word	0x40020c00
 800295c:	20000f50 	.word	0x20000f50
 8002960:	40026088 	.word	0x40026088
 8002964:	40004800 	.word	0x40004800

08002968 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b0ae      	sub	sp, #184	; 0xb8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002970:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	605a      	str	r2, [r3, #4]
 800297a:	609a      	str	r2, [r3, #8]
 800297c:	60da      	str	r2, [r3, #12]
 800297e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002980:	f107 0314 	add.w	r3, r7, #20
 8002984:	2290      	movs	r2, #144	; 0x90
 8002986:	2100      	movs	r1, #0
 8002988:	4618      	mov	r0, r3
 800298a:	f008 fcbb 	bl	800b304 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002996:	d159      	bne.n	8002a4c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002998:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800299c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800299e:	2300      	movs	r3, #0
 80029a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029a4:	f107 0314 	add.w	r3, r7, #20
 80029a8:	4618      	mov	r0, r3
 80029aa:	f002 fa3f 	bl	8004e2c <HAL_RCCEx_PeriphCLKConfig>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80029b4:	f7ff fdce 	bl	8002554 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b8:	4b26      	ldr	r3, [pc, #152]	; (8002a54 <HAL_PCD_MspInit+0xec>)
 80029ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029bc:	4a25      	ldr	r2, [pc, #148]	; (8002a54 <HAL_PCD_MspInit+0xec>)
 80029be:	f043 0301 	orr.w	r3, r3, #1
 80029c2:	6313      	str	r3, [r2, #48]	; 0x30
 80029c4:	4b23      	ldr	r3, [pc, #140]	; (8002a54 <HAL_PCD_MspInit+0xec>)
 80029c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	613b      	str	r3, [r7, #16]
 80029ce:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80029d0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80029d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d8:	2302      	movs	r3, #2
 80029da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e4:	2303      	movs	r3, #3
 80029e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80029ea:	230a      	movs	r3, #10
 80029ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80029f4:	4619      	mov	r1, r3
 80029f6:	4818      	ldr	r0, [pc, #96]	; (8002a58 <HAL_PCD_MspInit+0xf0>)
 80029f8:	f001 f9a4 	bl	8003d44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80029fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a04:	2300      	movs	r3, #0
 8002a06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002a10:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002a14:	4619      	mov	r1, r3
 8002a16:	4810      	ldr	r0, [pc, #64]	; (8002a58 <HAL_PCD_MspInit+0xf0>)
 8002a18:	f001 f994 	bl	8003d44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002a1c:	4b0d      	ldr	r3, [pc, #52]	; (8002a54 <HAL_PCD_MspInit+0xec>)
 8002a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a20:	4a0c      	ldr	r2, [pc, #48]	; (8002a54 <HAL_PCD_MspInit+0xec>)
 8002a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a26:	6353      	str	r3, [r2, #52]	; 0x34
 8002a28:	4b0a      	ldr	r3, [pc, #40]	; (8002a54 <HAL_PCD_MspInit+0xec>)
 8002a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	4b07      	ldr	r3, [pc, #28]	; (8002a54 <HAL_PCD_MspInit+0xec>)
 8002a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a38:	4a06      	ldr	r2, [pc, #24]	; (8002a54 <HAL_PCD_MspInit+0xec>)
 8002a3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a3e:	6453      	str	r3, [r2, #68]	; 0x44
 8002a40:	4b04      	ldr	r3, [pc, #16]	; (8002a54 <HAL_PCD_MspInit+0xec>)
 8002a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a48:	60bb      	str	r3, [r7, #8]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002a4c:	bf00      	nop
 8002a4e:	37b8      	adds	r7, #184	; 0xb8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40023800 	.word	0x40023800
 8002a58:	40020000 	.word	0x40020000

08002a5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08c      	sub	sp, #48	; 0x30
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002a6c:	4b2e      	ldr	r3, [pc, #184]	; (8002b28 <HAL_InitTick+0xcc>)
 8002a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a70:	4a2d      	ldr	r2, [pc, #180]	; (8002b28 <HAL_InitTick+0xcc>)
 8002a72:	f043 0301 	orr.w	r3, r3, #1
 8002a76:	6453      	str	r3, [r2, #68]	; 0x44
 8002a78:	4b2b      	ldr	r3, [pc, #172]	; (8002b28 <HAL_InitTick+0xcc>)
 8002a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	60bb      	str	r3, [r7, #8]
 8002a82:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a84:	f107 020c 	add.w	r2, r7, #12
 8002a88:	f107 0310 	add.w	r3, r7, #16
 8002a8c:	4611      	mov	r1, r2
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f002 f99a 	bl	8004dc8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002a94:	f002 f984 	bl	8004da0 <HAL_RCC_GetPCLK2Freq>
 8002a98:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9c:	4a23      	ldr	r2, [pc, #140]	; (8002b2c <HAL_InitTick+0xd0>)
 8002a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa2:	0c9b      	lsrs	r3, r3, #18
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002aa8:	4b21      	ldr	r3, [pc, #132]	; (8002b30 <HAL_InitTick+0xd4>)
 8002aaa:	4a22      	ldr	r2, [pc, #136]	; (8002b34 <HAL_InitTick+0xd8>)
 8002aac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002aae:	4b20      	ldr	r3, [pc, #128]	; (8002b30 <HAL_InitTick+0xd4>)
 8002ab0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ab4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002ab6:	4a1e      	ldr	r2, [pc, #120]	; (8002b30 <HAL_InitTick+0xd4>)
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002abc:	4b1c      	ldr	r3, [pc, #112]	; (8002b30 <HAL_InitTick+0xd4>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ac2:	4b1b      	ldr	r3, [pc, #108]	; (8002b30 <HAL_InitTick+0xd4>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ac8:	4b19      	ldr	r3, [pc, #100]	; (8002b30 <HAL_InitTick+0xd4>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002ace:	4818      	ldr	r0, [pc, #96]	; (8002b30 <HAL_InitTick+0xd4>)
 8002ad0:	f002 fdd4 	bl	800567c <HAL_TIM_Base_Init>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002ada:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d11b      	bne.n	8002b1a <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002ae2:	4813      	ldr	r0, [pc, #76]	; (8002b30 <HAL_InitTick+0xd4>)
 8002ae4:	f002 fe2c 	bl	8005740 <HAL_TIM_Base_Start_IT>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002aee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d111      	bne.n	8002b1a <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002af6:	2019      	movs	r0, #25
 8002af8:	f000 f9aa 	bl	8002e50 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b0f      	cmp	r3, #15
 8002b00:	d808      	bhi.n	8002b14 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002b02:	2200      	movs	r2, #0
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	2019      	movs	r0, #25
 8002b08:	f000 f986 	bl	8002e18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b0c:	4a0a      	ldr	r2, [pc, #40]	; (8002b38 <HAL_InitTick+0xdc>)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	e002      	b.n	8002b1a <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002b1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3730      	adds	r7, #48	; 0x30
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	431bde83 	.word	0x431bde83
 8002b30:	200014e0 	.word	0x200014e0
 8002b34:	40010000 	.word	0x40010000
 8002b38:	20000008 	.word	0x20000008

08002b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b40:	e7fe      	b.n	8002b40 <NMI_Handler+0x4>

08002b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b42:	b480      	push	{r7}
 8002b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b46:	e7fe      	b.n	8002b46 <HardFault_Handler+0x4>

08002b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b4c:	e7fe      	b.n	8002b4c <MemManage_Handler+0x4>

08002b4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b52:	e7fe      	b.n	8002b52 <BusFault_Handler+0x4>

08002b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b58:	e7fe      	b.n	8002b58 <UsageFault_Handler+0x4>

08002b5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b5e:	bf00      	nop
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b6c:	4802      	ldr	r0, [pc, #8]	; (8002b78 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002b6e:	f002 fe5f 	bl	8005830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002b72:	bf00      	nop
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	200014e0 	.word	0x200014e0

08002b7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b80:	4802      	ldr	r0, [pc, #8]	; (8002b8c <USART2_IRQHandler+0x10>)
 8002b82:	f003 f971 	bl	8005e68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b86:	bf00      	nop
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20000e40 	.word	0x20000e40

08002b90 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b94:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <SystemInit+0x20>)
 8002b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9a:	4a05      	ldr	r2, [pc, #20]	; (8002bb0 <SystemInit+0x20>)
 8002b9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ba0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ba4:	bf00      	nop
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	e000ed00 	.word	0xe000ed00

08002bb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002bb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bb8:	480d      	ldr	r0, [pc, #52]	; (8002bf0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002bba:	490e      	ldr	r1, [pc, #56]	; (8002bf4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002bbc:	4a0e      	ldr	r2, [pc, #56]	; (8002bf8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bc0:	e002      	b.n	8002bc8 <LoopCopyDataInit>

08002bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bc6:	3304      	adds	r3, #4

08002bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bcc:	d3f9      	bcc.n	8002bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bce:	4a0b      	ldr	r2, [pc, #44]	; (8002bfc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002bd0:	4c0b      	ldr	r4, [pc, #44]	; (8002c00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bd4:	e001      	b.n	8002bda <LoopFillZerobss>

08002bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bd8:	3204      	adds	r2, #4

08002bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bdc:	d3fb      	bcc.n	8002bd6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002bde:	f7ff ffd7 	bl	8002b90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002be2:	f008 fb5b 	bl	800b29c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002be6:	f7ff f8c7 	bl	8001d78 <main>
  bx  lr    
 8002bea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002bec:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bf4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002bf8:	0800b6bc 	.word	0x0800b6bc
  ldr r2, =_sbss
 8002bfc:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 8002c00:	20005f40 	.word	0x20005f40

08002c04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c04:	e7fe      	b.n	8002c04 <ADC_IRQHandler>

08002c06 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c0a:	2003      	movs	r0, #3
 8002c0c:	f000 f8f9 	bl	8002e02 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c10:	200f      	movs	r0, #15
 8002c12:	f7ff ff23 	bl	8002a5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c16:	f7ff fca3 	bl	8002560 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c24:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <HAL_IncTick+0x20>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	461a      	mov	r2, r3
 8002c2a:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <HAL_IncTick+0x24>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4413      	add	r3, r2
 8002c30:	4a04      	ldr	r2, [pc, #16]	; (8002c44 <HAL_IncTick+0x24>)
 8002c32:	6013      	str	r3, [r2, #0]
}
 8002c34:	bf00      	nop
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	2000000c 	.word	0x2000000c
 8002c44:	2000152c 	.word	0x2000152c

08002c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c4c:	4b03      	ldr	r3, [pc, #12]	; (8002c5c <HAL_GetTick+0x14>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	2000152c 	.word	0x2000152c

08002c60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c68:	f7ff ffee 	bl	8002c48 <HAL_GetTick>
 8002c6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c78:	d005      	beq.n	8002c86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <HAL_Delay+0x44>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4413      	add	r3, r2
 8002c84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c86:	bf00      	nop
 8002c88:	f7ff ffde 	bl	8002c48 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d8f7      	bhi.n	8002c88 <HAL_Delay+0x28>
  {
  }
}
 8002c98:	bf00      	nop
 8002c9a:	bf00      	nop
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	2000000c 	.word	0x2000000c

08002ca8 <__NVIC_SetPriorityGrouping>:
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <__NVIC_SetPriorityGrouping+0x40>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cbe:	68ba      	ldr	r2, [r7, #8]
 8002cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002cd0:	4b06      	ldr	r3, [pc, #24]	; (8002cec <__NVIC_SetPriorityGrouping+0x44>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cd6:	4a04      	ldr	r2, [pc, #16]	; (8002ce8 <__NVIC_SetPriorityGrouping+0x40>)
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	60d3      	str	r3, [r2, #12]
}
 8002cdc:	bf00      	nop
 8002cde:	3714      	adds	r7, #20
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	e000ed00 	.word	0xe000ed00
 8002cec:	05fa0000 	.word	0x05fa0000

08002cf0 <__NVIC_GetPriorityGrouping>:
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cf4:	4b04      	ldr	r3, [pc, #16]	; (8002d08 <__NVIC_GetPriorityGrouping+0x18>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	0a1b      	lsrs	r3, r3, #8
 8002cfa:	f003 0307 	and.w	r3, r3, #7
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	e000ed00 	.word	0xe000ed00

08002d0c <__NVIC_EnableIRQ>:
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4603      	mov	r3, r0
 8002d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	db0b      	blt.n	8002d36 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d1e:	79fb      	ldrb	r3, [r7, #7]
 8002d20:	f003 021f 	and.w	r2, r3, #31
 8002d24:	4907      	ldr	r1, [pc, #28]	; (8002d44 <__NVIC_EnableIRQ+0x38>)
 8002d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2a:	095b      	lsrs	r3, r3, #5
 8002d2c:	2001      	movs	r0, #1
 8002d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	e000e100 	.word	0xe000e100

08002d48 <__NVIC_SetPriority>:
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	6039      	str	r1, [r7, #0]
 8002d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	db0a      	blt.n	8002d72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	490c      	ldr	r1, [pc, #48]	; (8002d94 <__NVIC_SetPriority+0x4c>)
 8002d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d66:	0112      	lsls	r2, r2, #4
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	440b      	add	r3, r1
 8002d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002d70:	e00a      	b.n	8002d88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	4908      	ldr	r1, [pc, #32]	; (8002d98 <__NVIC_SetPriority+0x50>)
 8002d78:	79fb      	ldrb	r3, [r7, #7]
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	3b04      	subs	r3, #4
 8002d80:	0112      	lsls	r2, r2, #4
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	440b      	add	r3, r1
 8002d86:	761a      	strb	r2, [r3, #24]
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	e000e100 	.word	0xe000e100
 8002d98:	e000ed00 	.word	0xe000ed00

08002d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b089      	sub	sp, #36	; 0x24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	f1c3 0307 	rsb	r3, r3, #7
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	bf28      	it	cs
 8002dba:	2304      	movcs	r3, #4
 8002dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	2b06      	cmp	r3, #6
 8002dc4:	d902      	bls.n	8002dcc <NVIC_EncodePriority+0x30>
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	3b03      	subs	r3, #3
 8002dca:	e000      	b.n	8002dce <NVIC_EncodePriority+0x32>
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	43da      	mvns	r2, r3
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	401a      	ands	r2, r3
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002de4:	f04f 31ff 	mov.w	r1, #4294967295
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	fa01 f303 	lsl.w	r3, r1, r3
 8002dee:	43d9      	mvns	r1, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df4:	4313      	orrs	r3, r2
         );
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3724      	adds	r7, #36	; 0x24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7ff ff4c 	bl	8002ca8 <__NVIC_SetPriorityGrouping>
}
 8002e10:	bf00      	nop
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	4603      	mov	r3, r0
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
 8002e24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e2a:	f7ff ff61 	bl	8002cf0 <__NVIC_GetPriorityGrouping>
 8002e2e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	68b9      	ldr	r1, [r7, #8]
 8002e34:	6978      	ldr	r0, [r7, #20]
 8002e36:	f7ff ffb1 	bl	8002d9c <NVIC_EncodePriority>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e40:	4611      	mov	r1, r2
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff ff80 	bl	8002d48 <__NVIC_SetPriority>
}
 8002e48:	bf00      	nop
 8002e4a:	3718      	adds	r7, #24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	4603      	mov	r3, r0
 8002e58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff ff54 	bl	8002d0c <__NVIC_EnableIRQ>
}
 8002e64:	bf00      	nop
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e74:	2300      	movs	r3, #0
 8002e76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e78:	f7ff fee6 	bl	8002c48 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e099      	b.n	8002fbc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f022 0201 	bic.w	r2, r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ea8:	e00f      	b.n	8002eca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002eaa:	f7ff fecd 	bl	8002c48 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b05      	cmp	r3, #5
 8002eb6:	d908      	bls.n	8002eca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2203      	movs	r2, #3
 8002ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e078      	b.n	8002fbc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1e8      	bne.n	8002eaa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	4b38      	ldr	r3, [pc, #224]	; (8002fc4 <HAL_DMA_Init+0x158>)
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ef6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d107      	bne.n	8002f34 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	f023 0307 	bic.w	r3, r3, #7
 8002f4a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	d117      	bne.n	8002f8e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00e      	beq.n	8002f8e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 fb45 	bl	8003600 <DMA_CheckFifoParam>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d008      	beq.n	8002f8e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2240      	movs	r2, #64	; 0x40
 8002f80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e016      	b.n	8002fbc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 fafc 	bl	8003594 <DMA_CalcBaseAndBitshift>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa4:	223f      	movs	r2, #63	; 0x3f
 8002fa6:	409a      	lsls	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3718      	adds	r7, #24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	e010803f 	.word	0xe010803f

08002fc8 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
 8002fd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d101      	bne.n	8002fe8 <HAL_DMA_Start+0x20>
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	e026      	b.n	8003036 <HAL_DMA_Start+0x6e>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d115      	bne.n	8003028 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2202      	movs	r2, #2
 8003000:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	68b9      	ldr	r1, [r7, #8]
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f000 fa91 	bl	8003538 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f042 0201 	orr.w	r2, r2, #1
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	e005      	b.n	8003034 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003030:	2302      	movs	r3, #2
 8003032:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8003034:	7dfb      	ldrb	r3, [r7, #23]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b086      	sub	sp, #24
 8003042:	af00      	add	r7, sp, #0
 8003044:	60f8      	str	r0, [r7, #12]
 8003046:	60b9      	str	r1, [r7, #8]
 8003048:	607a      	str	r2, [r7, #4]
 800304a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800304c:	2300      	movs	r3, #0
 800304e:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003054:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_DMA_Start_IT+0x26>
 8003060:	2302      	movs	r3, #2
 8003062:	e048      	b.n	80030f6 <HAL_DMA_Start_IT+0xb8>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b01      	cmp	r3, #1
 8003076:	d137      	bne.n	80030e8 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2202      	movs	r2, #2
 800307c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	68b9      	ldr	r1, [r7, #8]
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f000 fa53 	bl	8003538 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003096:	223f      	movs	r2, #63	; 0x3f
 8003098:	409a      	lsls	r2, r3
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f042 0216 	orr.w	r2, r2, #22
 80030ac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695a      	ldr	r2, [r3, #20]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030bc:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d007      	beq.n	80030d6 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f042 0208 	orr.w	r2, r2, #8
 80030d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f042 0201 	orr.w	r2, r2, #1
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	e005      	b.n	80030f4 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80030f0:	2302      	movs	r3, #2
 80030f2:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80030f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3718      	adds	r7, #24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b084      	sub	sp, #16
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800310c:	f7ff fd9c 	bl	8002c48 <HAL_GetTick>
 8003110:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d008      	beq.n	8003130 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2280      	movs	r2, #128	; 0x80
 8003122:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e052      	b.n	80031d6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0216 	bic.w	r2, r2, #22
 800313e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	695a      	ldr	r2, [r3, #20]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800314e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	2b00      	cmp	r3, #0
 8003156:	d103      	bne.n	8003160 <HAL_DMA_Abort+0x62>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800315c:	2b00      	cmp	r3, #0
 800315e:	d007      	beq.n	8003170 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 0208 	bic.w	r2, r2, #8
 800316e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0201 	bic.w	r2, r2, #1
 800317e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003180:	e013      	b.n	80031aa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003182:	f7ff fd61 	bl	8002c48 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b05      	cmp	r3, #5
 800318e:	d90c      	bls.n	80031aa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2220      	movs	r2, #32
 8003194:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2203      	movs	r2, #3
 800319a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e015      	b.n	80031d6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1e4      	bne.n	8003182 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031bc:	223f      	movs	r2, #63	; 0x3f
 80031be:	409a      	lsls	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d004      	beq.n	80031fc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2280      	movs	r2, #128	; 0x80
 80031f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e00c      	b.n	8003216 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2205      	movs	r2, #5
 8003200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0201 	bic.w	r2, r2, #1
 8003212:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
	...

08003224 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800322c:	2300      	movs	r3, #0
 800322e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003230:	4b8e      	ldr	r3, [pc, #568]	; (800346c <HAL_DMA_IRQHandler+0x248>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a8e      	ldr	r2, [pc, #568]	; (8003470 <HAL_DMA_IRQHandler+0x24c>)
 8003236:	fba2 2303 	umull	r2, r3, r2, r3
 800323a:	0a9b      	lsrs	r3, r3, #10
 800323c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003242:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324e:	2208      	movs	r2, #8
 8003250:	409a      	lsls	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	4013      	ands	r3, r2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d01a      	beq.n	8003290 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b00      	cmp	r3, #0
 8003266:	d013      	beq.n	8003290 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0204 	bic.w	r2, r2, #4
 8003276:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800327c:	2208      	movs	r2, #8
 800327e:	409a      	lsls	r2, r3
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003288:	f043 0201 	orr.w	r2, r3, #1
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003294:	2201      	movs	r2, #1
 8003296:	409a      	lsls	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4013      	ands	r3, r2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d012      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00b      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b2:	2201      	movs	r2, #1
 80032b4:	409a      	lsls	r2, r3
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032be:	f043 0202 	orr.w	r2, r3, #2
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ca:	2204      	movs	r2, #4
 80032cc:	409a      	lsls	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	4013      	ands	r3, r2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d012      	beq.n	80032fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00b      	beq.n	80032fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e8:	2204      	movs	r2, #4
 80032ea:	409a      	lsls	r2, r3
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f4:	f043 0204 	orr.w	r2, r3, #4
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003300:	2210      	movs	r2, #16
 8003302:	409a      	lsls	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	4013      	ands	r3, r2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d043      	beq.n	8003394 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0308 	and.w	r3, r3, #8
 8003316:	2b00      	cmp	r3, #0
 8003318:	d03c      	beq.n	8003394 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800331e:	2210      	movs	r2, #16
 8003320:	409a      	lsls	r2, r3
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d018      	beq.n	8003366 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d108      	bne.n	8003354 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	2b00      	cmp	r3, #0
 8003348:	d024      	beq.n	8003394 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	4798      	blx	r3
 8003352:	e01f      	b.n	8003394 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003358:	2b00      	cmp	r3, #0
 800335a:	d01b      	beq.n	8003394 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	4798      	blx	r3
 8003364:	e016      	b.n	8003394 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003370:	2b00      	cmp	r3, #0
 8003372:	d107      	bne.n	8003384 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0208 	bic.w	r2, r2, #8
 8003382:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003398:	2220      	movs	r2, #32
 800339a:	409a      	lsls	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4013      	ands	r3, r2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 808f 	beq.w	80034c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0310 	and.w	r3, r3, #16
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 8087 	beq.w	80034c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ba:	2220      	movs	r2, #32
 80033bc:	409a      	lsls	r2, r3
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b05      	cmp	r3, #5
 80033cc:	d136      	bne.n	800343c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0216 	bic.w	r2, r2, #22
 80033dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	695a      	ldr	r2, [r3, #20]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d103      	bne.n	80033fe <HAL_DMA_IRQHandler+0x1da>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d007      	beq.n	800340e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0208 	bic.w	r2, r2, #8
 800340c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003412:	223f      	movs	r2, #63	; 0x3f
 8003414:	409a      	lsls	r2, r3
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800342e:	2b00      	cmp	r3, #0
 8003430:	d07e      	beq.n	8003530 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	4798      	blx	r3
        }
        return;
 800343a:	e079      	b.n	8003530 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d01d      	beq.n	8003486 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d10d      	bne.n	8003474 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345c:	2b00      	cmp	r3, #0
 800345e:	d031      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	4798      	blx	r3
 8003468:	e02c      	b.n	80034c4 <HAL_DMA_IRQHandler+0x2a0>
 800346a:	bf00      	nop
 800346c:	20000004 	.word	0x20000004
 8003470:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003478:	2b00      	cmp	r3, #0
 800347a:	d023      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	4798      	blx	r3
 8003484:	e01e      	b.n	80034c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10f      	bne.n	80034b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 0210 	bic.w	r2, r2, #16
 80034a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d032      	beq.n	8003532 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d022      	beq.n	800351e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2205      	movs	r2, #5
 80034dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0201 	bic.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	3301      	adds	r3, #1
 80034f4:	60bb      	str	r3, [r7, #8]
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d307      	bcc.n	800350c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1f2      	bne.n	80034f0 <HAL_DMA_IRQHandler+0x2cc>
 800350a:	e000      	b.n	800350e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800350c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003522:	2b00      	cmp	r3, #0
 8003524:	d005      	beq.n	8003532 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	4798      	blx	r3
 800352e:	e000      	b.n	8003532 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003530:	bf00      	nop
    }
  }
}
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
 8003544:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003554:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	2b40      	cmp	r3, #64	; 0x40
 8003564:	d108      	bne.n	8003578 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68ba      	ldr	r2, [r7, #8]
 8003574:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003576:	e007      	b.n	8003588 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	60da      	str	r2, [r3, #12]
}
 8003588:	bf00      	nop
 800358a:	3714      	adds	r7, #20
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	3b10      	subs	r3, #16
 80035a4:	4a13      	ldr	r2, [pc, #76]	; (80035f4 <DMA_CalcBaseAndBitshift+0x60>)
 80035a6:	fba2 2303 	umull	r2, r3, r2, r3
 80035aa:	091b      	lsrs	r3, r3, #4
 80035ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035ae:	4a12      	ldr	r2, [pc, #72]	; (80035f8 <DMA_CalcBaseAndBitshift+0x64>)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4413      	add	r3, r2
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	461a      	mov	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2b03      	cmp	r3, #3
 80035c0:	d908      	bls.n	80035d4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	461a      	mov	r2, r3
 80035c8:	4b0c      	ldr	r3, [pc, #48]	; (80035fc <DMA_CalcBaseAndBitshift+0x68>)
 80035ca:	4013      	ands	r3, r2
 80035cc:	1d1a      	adds	r2, r3, #4
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	659a      	str	r2, [r3, #88]	; 0x58
 80035d2:	e006      	b.n	80035e2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	461a      	mov	r2, r3
 80035da:	4b08      	ldr	r3, [pc, #32]	; (80035fc <DMA_CalcBaseAndBitshift+0x68>)
 80035dc:	4013      	ands	r3, r2
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	aaaaaaab 	.word	0xaaaaaaab
 80035f8:	0800b644 	.word	0x0800b644
 80035fc:	fffffc00 	.word	0xfffffc00

08003600 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003608:	2300      	movs	r3, #0
 800360a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003610:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d11f      	bne.n	800365a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	2b03      	cmp	r3, #3
 800361e:	d856      	bhi.n	80036ce <DMA_CheckFifoParam+0xce>
 8003620:	a201      	add	r2, pc, #4	; (adr r2, 8003628 <DMA_CheckFifoParam+0x28>)
 8003622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003626:	bf00      	nop
 8003628:	08003639 	.word	0x08003639
 800362c:	0800364b 	.word	0x0800364b
 8003630:	08003639 	.word	0x08003639
 8003634:	080036cf 	.word	0x080036cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d046      	beq.n	80036d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003648:	e043      	b.n	80036d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003652:	d140      	bne.n	80036d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003658:	e03d      	b.n	80036d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003662:	d121      	bne.n	80036a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	2b03      	cmp	r3, #3
 8003668:	d837      	bhi.n	80036da <DMA_CheckFifoParam+0xda>
 800366a:	a201      	add	r2, pc, #4	; (adr r2, 8003670 <DMA_CheckFifoParam+0x70>)
 800366c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003670:	08003681 	.word	0x08003681
 8003674:	08003687 	.word	0x08003687
 8003678:	08003681 	.word	0x08003681
 800367c:	08003699 	.word	0x08003699
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	73fb      	strb	r3, [r7, #15]
      break;
 8003684:	e030      	b.n	80036e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d025      	beq.n	80036de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003696:	e022      	b.n	80036de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036a0:	d11f      	bne.n	80036e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036a6:	e01c      	b.n	80036e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d903      	bls.n	80036b6 <DMA_CheckFifoParam+0xb6>
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	2b03      	cmp	r3, #3
 80036b2:	d003      	beq.n	80036bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036b4:	e018      	b.n	80036e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	73fb      	strb	r3, [r7, #15]
      break;
 80036ba:	e015      	b.n	80036e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00e      	beq.n	80036e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	73fb      	strb	r3, [r7, #15]
      break;
 80036cc:	e00b      	b.n	80036e6 <DMA_CheckFifoParam+0xe6>
      break;
 80036ce:	bf00      	nop
 80036d0:	e00a      	b.n	80036e8 <DMA_CheckFifoParam+0xe8>
      break;
 80036d2:	bf00      	nop
 80036d4:	e008      	b.n	80036e8 <DMA_CheckFifoParam+0xe8>
      break;
 80036d6:	bf00      	nop
 80036d8:	e006      	b.n	80036e8 <DMA_CheckFifoParam+0xe8>
      break;
 80036da:	bf00      	nop
 80036dc:	e004      	b.n	80036e8 <DMA_CheckFifoParam+0xe8>
      break;
 80036de:	bf00      	nop
 80036e0:	e002      	b.n	80036e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80036e2:	bf00      	nop
 80036e4:	e000      	b.n	80036e8 <DMA_CheckFifoParam+0xe8>
      break;
 80036e6:	bf00      	nop
    }
  } 
  
  return status; 
 80036e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3714      	adds	r7, #20
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop

080036f8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e06a      	b.n	80037e0 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003710:	2b00      	cmp	r3, #0
 8003712:	d106      	bne.n	8003722 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2223      	movs	r2, #35	; 0x23
 8003718:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7fe ff47 	bl	80025b0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003722:	4b31      	ldr	r3, [pc, #196]	; (80037e8 <HAL_ETH_Init+0xf0>)
 8003724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003726:	4a30      	ldr	r2, [pc, #192]	; (80037e8 <HAL_ETH_Init+0xf0>)
 8003728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800372c:	6453      	str	r3, [r2, #68]	; 0x44
 800372e:	4b2e      	ldr	r3, [pc, #184]	; (80037e8 <HAL_ETH_Init+0xf0>)
 8003730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003736:	60bb      	str	r3, [r7, #8]
 8003738:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800373a:	4b2c      	ldr	r3, [pc, #176]	; (80037ec <HAL_ETH_Init+0xf4>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	4a2b      	ldr	r2, [pc, #172]	; (80037ec <HAL_ETH_Init+0xf4>)
 8003740:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003744:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003746:	4b29      	ldr	r3, [pc, #164]	; (80037ec <HAL_ETH_Init+0xf4>)
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	4927      	ldr	r1, [pc, #156]	; (80037ec <HAL_ETH_Init+0xf4>)
 8003750:	4313      	orrs	r3, r2
 8003752:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003754:	4b25      	ldr	r3, [pc, #148]	; (80037ec <HAL_ETH_Init+0xf4>)
 8003756:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	6812      	ldr	r2, [r2, #0]
 8003766:	f043 0301 	orr.w	r3, r3, #1
 800376a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800376e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003770:	f7ff fa6a 	bl	8002c48 <HAL_GetTick>
 8003774:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003776:	e011      	b.n	800379c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003778:	f7ff fa66 	bl	8002c48 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003786:	d909      	bls.n	800379c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2204      	movs	r2, #4
 800378c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	22e0      	movs	r2, #224	; 0xe0
 8003794:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e021      	b.n	80037e0 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1e4      	bne.n	8003778 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f958 	bl	8003a64 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 f9ff 	bl	8003bb8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 fa55 	bl	8003c6a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	461a      	mov	r2, r3
 80037c6:	2100      	movs	r1, #0
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f9bd 	bl	8003b48 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2210      	movs	r2, #16
 80037da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40023800 	.word	0x40023800
 80037ec:	40013800 	.word	0x40013800

080037f0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	4b51      	ldr	r3, [pc, #324]	; (800394c <ETH_SetMACConfig+0x15c>)
 8003806:	4013      	ands	r3, r2
 8003808:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	7c1b      	ldrb	r3, [r3, #16]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d102      	bne.n	8003818 <ETH_SetMACConfig+0x28>
 8003812:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003816:	e000      	b.n	800381a <ETH_SetMACConfig+0x2a>
 8003818:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	7c5b      	ldrb	r3, [r3, #17]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d102      	bne.n	8003828 <ETH_SetMACConfig+0x38>
 8003822:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003826:	e000      	b.n	800382a <ETH_SetMACConfig+0x3a>
 8003828:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800382a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003830:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	7fdb      	ldrb	r3, [r3, #31]
 8003836:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003838:	431a      	orrs	r2, r3
                        macconf->Speed |
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800383e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	7f92      	ldrb	r2, [r2, #30]
 8003844:	2a00      	cmp	r2, #0
 8003846:	d102      	bne.n	800384e <ETH_SetMACConfig+0x5e>
 8003848:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800384c:	e000      	b.n	8003850 <ETH_SetMACConfig+0x60>
 800384e:	2200      	movs	r2, #0
                        macconf->Speed |
 8003850:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	7f1b      	ldrb	r3, [r3, #28]
 8003856:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003858:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800385e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	791b      	ldrb	r3, [r3, #4]
 8003864:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003866:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800386e:	2a00      	cmp	r2, #0
 8003870:	d102      	bne.n	8003878 <ETH_SetMACConfig+0x88>
 8003872:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003876:	e000      	b.n	800387a <ETH_SetMACConfig+0x8a>
 8003878:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800387a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	7bdb      	ldrb	r3, [r3, #15]
 8003880:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003882:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003888:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003890:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003892:	4313      	orrs	r3, r2
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	4313      	orrs	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80038aa:	2001      	movs	r0, #1
 80038ac:	f7ff f9d8 	bl	8002c60 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80038c6:	4013      	ands	r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ce:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80038d6:	2a00      	cmp	r2, #0
 80038d8:	d101      	bne.n	80038de <ETH_SetMACConfig+0xee>
 80038da:	2280      	movs	r2, #128	; 0x80
 80038dc:	e000      	b.n	80038e0 <ETH_SetMACConfig+0xf0>
 80038de:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80038e0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80038e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80038ee:	2a01      	cmp	r2, #1
 80038f0:	d101      	bne.n	80038f6 <ETH_SetMACConfig+0x106>
 80038f2:	2208      	movs	r2, #8
 80038f4:	e000      	b.n	80038f8 <ETH_SetMACConfig+0x108>
 80038f6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80038f8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003900:	2a01      	cmp	r2, #1
 8003902:	d101      	bne.n	8003908 <ETH_SetMACConfig+0x118>
 8003904:	2204      	movs	r2, #4
 8003906:	e000      	b.n	800390a <ETH_SetMACConfig+0x11a>
 8003908:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800390a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003912:	2a01      	cmp	r2, #1
 8003914:	d101      	bne.n	800391a <ETH_SetMACConfig+0x12a>
 8003916:	2202      	movs	r2, #2
 8003918:	e000      	b.n	800391c <ETH_SetMACConfig+0x12c>
 800391a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800391c:	4313      	orrs	r3, r2
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	4313      	orrs	r3, r2
 8003922:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003934:	2001      	movs	r0, #1
 8003936:	f7ff f993 	bl	8002c60 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	619a      	str	r2, [r3, #24]
}
 8003942:	bf00      	nop
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	ff20810f 	.word	0xff20810f

08003950 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	4b3d      	ldr	r3, [pc, #244]	; (8003a60 <ETH_SetDMAConfig+0x110>)
 800396a:	4013      	ands	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	7b1b      	ldrb	r3, [r3, #12]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d102      	bne.n	800397c <ETH_SetDMAConfig+0x2c>
 8003976:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800397a:	e000      	b.n	800397e <ETH_SetDMAConfig+0x2e>
 800397c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	7b5b      	ldrb	r3, [r3, #13]
 8003982:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003984:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	7f52      	ldrb	r2, [r2, #29]
 800398a:	2a00      	cmp	r2, #0
 800398c:	d102      	bne.n	8003994 <ETH_SetDMAConfig+0x44>
 800398e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003992:	e000      	b.n	8003996 <ETH_SetDMAConfig+0x46>
 8003994:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003996:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	7b9b      	ldrb	r3, [r3, #14]
 800399c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800399e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80039a4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	7f1b      	ldrb	r3, [r3, #28]
 80039aa:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80039ac:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	7f9b      	ldrb	r3, [r3, #30]
 80039b2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80039b4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80039ba:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039c2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80039c4:	4313      	orrs	r3, r2
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039d4:	461a      	mov	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80039e6:	2001      	movs	r0, #1
 80039e8:	f7ff f93a 	bl	8002c60 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039f4:	461a      	mov	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	791b      	ldrb	r3, [r3, #4]
 80039fe:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003a04:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003a0a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003a10:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a18:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003a1a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a20:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003a22:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003a28:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	6812      	ldr	r2, [r2, #0]
 8003a2e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a36:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a44:	2001      	movs	r0, #1
 8003a46:	f7ff f90b 	bl	8002c60 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a52:	461a      	mov	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6013      	str	r3, [r2, #0]
}
 8003a58:	bf00      	nop
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	f8de3f23 	.word	0xf8de3f23

08003a64 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b0a6      	sub	sp, #152	; 0x98
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003a72:	2301      	movs	r3, #1
 8003a74:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003a82:	2301      	movs	r3, #1
 8003a84:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003a94:	2300      	movs	r3, #0
 8003a96:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003aba:	2300      	movs	r3, #0
 8003abc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003ac6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003aca:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003acc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003ad8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003adc:	4619      	mov	r1, r3
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7ff fe86 	bl	80037f0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003aec:	2301      	movs	r3, #1
 8003aee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003af2:	2301      	movs	r3, #1
 8003af4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003af6:	2300      	movs	r3, #0
 8003af8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003afa:	2300      	movs	r3, #0
 8003afc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003b00:	2300      	movs	r3, #0
 8003b02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003b06:	2300      	movs	r3, #0
 8003b08:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003b10:	2301      	movs	r3, #1
 8003b12:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003b14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b18:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003b1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b1e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003b20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b24:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003b26:	2301      	movs	r3, #1
 8003b28:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003b30:	2300      	movs	r3, #0
 8003b32:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003b34:	f107 0308 	add.w	r3, r7, #8
 8003b38:	4619      	mov	r1, r3
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7ff ff08 	bl	8003950 <ETH_SetDMAConfig>
}
 8003b40:	bf00      	nop
 8003b42:	3798      	adds	r7, #152	; 0x98
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b087      	sub	sp, #28
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3305      	adds	r3, #5
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	021b      	lsls	r3, r3, #8
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	3204      	adds	r2, #4
 8003b60:	7812      	ldrb	r2, [r2, #0]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	4b11      	ldr	r3, [pc, #68]	; (8003bb0 <ETH_MACAddressConfig+0x68>)
 8003b6a:	4413      	add	r3, r2
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	3303      	adds	r3, #3
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	061a      	lsls	r2, r3, #24
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3302      	adds	r3, #2
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	041b      	lsls	r3, r3, #16
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	3301      	adds	r3, #1
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	021b      	lsls	r3, r3, #8
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	7812      	ldrb	r2, [r2, #0]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <ETH_MACAddressConfig+0x6c>)
 8003b9a:	4413      	add	r3, r2
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	6013      	str	r3, [r2, #0]
}
 8003ba2:	bf00      	nop
 8003ba4:	371c      	adds	r7, #28
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	40028040 	.word	0x40028040
 8003bb4:	40028044 	.word	0x40028044

08003bb8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	60fb      	str	r3, [r7, #12]
 8003bc4:	e03e      	b.n	8003c44 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68d9      	ldr	r1, [r3, #12]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	440b      	add	r3, r1
 8003bd6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	2200      	movs	r2, #0
 8003be2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	2200      	movs	r2, #0
 8003be8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	2200      	movs	r2, #0
 8003bee:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003bf0:	68b9      	ldr	r1, [r7, #8]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	3206      	adds	r2, #6
 8003bf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d80c      	bhi.n	8003c28 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68d9      	ldr	r1, [r3, #12]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	1c5a      	adds	r2, r3, #1
 8003c16:	4613      	mov	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4413      	add	r3, r2
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	440b      	add	r3, r1
 8003c20:	461a      	mov	r2, r3
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	60da      	str	r2, [r3, #12]
 8003c26:	e004      	b.n	8003c32 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	3301      	adds	r3, #1
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2b03      	cmp	r3, #3
 8003c48:	d9bd      	bls.n	8003bc6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68da      	ldr	r2, [r3, #12]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c5c:	611a      	str	r2, [r3, #16]
}
 8003c5e:	bf00      	nop
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b085      	sub	sp, #20
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003c72:	2300      	movs	r3, #0
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	e046      	b.n	8003d06 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6919      	ldr	r1, [r3, #16]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4413      	add	r3, r2
 8003c84:	00db      	lsls	r3, r3, #3
 8003c86:	440b      	add	r3, r1
 8003c88:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	2200      	movs	r2, #0
 8003c94:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2200      	movs	r2, #0
 8003cac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003cb4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003cbc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003cca:	68b9      	ldr	r1, [r7, #8]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	3212      	adds	r2, #18
 8003cd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d80c      	bhi.n	8003cf6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6919      	ldr	r1, [r3, #16]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	1c5a      	adds	r2, r3, #1
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	440b      	add	r3, r1
 8003cee:	461a      	mov	r2, r3
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	60da      	str	r2, [r3, #12]
 8003cf4:	e004      	b.n	8003d00 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	3301      	adds	r3, #1
 8003d04:	60fb      	str	r3, [r7, #12]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2b03      	cmp	r3, #3
 8003d0a:	d9b5      	bls.n	8003c78 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691a      	ldr	r2, [r3, #16]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d36:	60da      	str	r2, [r3, #12]
}
 8003d38:	bf00      	nop
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b089      	sub	sp, #36	; 0x24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003d52:	2300      	movs	r3, #0
 8003d54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003d56:	2300      	movs	r3, #0
 8003d58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003d5e:	2300      	movs	r3, #0
 8003d60:	61fb      	str	r3, [r7, #28]
 8003d62:	e175      	b.n	8004050 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003d64:	2201      	movs	r2, #1
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	4013      	ands	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	f040 8164 	bne.w	800404a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f003 0303 	and.w	r3, r3, #3
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d005      	beq.n	8003d9a <HAL_GPIO_Init+0x56>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f003 0303 	and.w	r3, r3, #3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d130      	bne.n	8003dfc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	2203      	movs	r2, #3
 8003da6:	fa02 f303 	lsl.w	r3, r2, r3
 8003daa:	43db      	mvns	r3, r3
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	4013      	ands	r3, r2
 8003db0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	68da      	ldr	r2, [r3, #12]
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd8:	43db      	mvns	r3, r3
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	091b      	lsrs	r3, r3, #4
 8003de6:	f003 0201 	and.w	r2, r3, #1
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f003 0303 	and.w	r3, r3, #3
 8003e04:	2b03      	cmp	r3, #3
 8003e06:	d017      	beq.n	8003e38 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	2203      	movs	r2, #3
 8003e14:	fa02 f303 	lsl.w	r3, r2, r3
 8003e18:	43db      	mvns	r3, r3
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	689a      	ldr	r2, [r3, #8]
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f003 0303 	and.w	r3, r3, #3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d123      	bne.n	8003e8c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	08da      	lsrs	r2, r3, #3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3208      	adds	r2, #8
 8003e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	f003 0307 	and.w	r3, r3, #7
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	220f      	movs	r2, #15
 8003e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e60:	43db      	mvns	r3, r3
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	4013      	ands	r3, r2
 8003e66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	691a      	ldr	r2, [r3, #16]
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	f003 0307 	and.w	r3, r3, #7
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	fa02 f303 	lsl.w	r3, r2, r3
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	08da      	lsrs	r2, r3, #3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	3208      	adds	r2, #8
 8003e86:	69b9      	ldr	r1, [r7, #24]
 8003e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	2203      	movs	r2, #3
 8003e98:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9c:	43db      	mvns	r3, r3
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f003 0203 	and.w	r2, r3, #3
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 80be 	beq.w	800404a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ece:	4b66      	ldr	r3, [pc, #408]	; (8004068 <HAL_GPIO_Init+0x324>)
 8003ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed2:	4a65      	ldr	r2, [pc, #404]	; (8004068 <HAL_GPIO_Init+0x324>)
 8003ed4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8003eda:	4b63      	ldr	r3, [pc, #396]	; (8004068 <HAL_GPIO_Init+0x324>)
 8003edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003ee6:	4a61      	ldr	r2, [pc, #388]	; (800406c <HAL_GPIO_Init+0x328>)
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	089b      	lsrs	r3, r3, #2
 8003eec:	3302      	adds	r3, #2
 8003eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	f003 0303 	and.w	r3, r3, #3
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	220f      	movs	r2, #15
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	43db      	mvns	r3, r3
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	4013      	ands	r3, r2
 8003f08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a58      	ldr	r2, [pc, #352]	; (8004070 <HAL_GPIO_Init+0x32c>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d037      	beq.n	8003f82 <HAL_GPIO_Init+0x23e>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a57      	ldr	r2, [pc, #348]	; (8004074 <HAL_GPIO_Init+0x330>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d031      	beq.n	8003f7e <HAL_GPIO_Init+0x23a>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a56      	ldr	r2, [pc, #344]	; (8004078 <HAL_GPIO_Init+0x334>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d02b      	beq.n	8003f7a <HAL_GPIO_Init+0x236>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a55      	ldr	r2, [pc, #340]	; (800407c <HAL_GPIO_Init+0x338>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d025      	beq.n	8003f76 <HAL_GPIO_Init+0x232>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a54      	ldr	r2, [pc, #336]	; (8004080 <HAL_GPIO_Init+0x33c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d01f      	beq.n	8003f72 <HAL_GPIO_Init+0x22e>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a53      	ldr	r2, [pc, #332]	; (8004084 <HAL_GPIO_Init+0x340>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d019      	beq.n	8003f6e <HAL_GPIO_Init+0x22a>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a52      	ldr	r2, [pc, #328]	; (8004088 <HAL_GPIO_Init+0x344>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d013      	beq.n	8003f6a <HAL_GPIO_Init+0x226>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a51      	ldr	r2, [pc, #324]	; (800408c <HAL_GPIO_Init+0x348>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d00d      	beq.n	8003f66 <HAL_GPIO_Init+0x222>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a50      	ldr	r2, [pc, #320]	; (8004090 <HAL_GPIO_Init+0x34c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d007      	beq.n	8003f62 <HAL_GPIO_Init+0x21e>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a4f      	ldr	r2, [pc, #316]	; (8004094 <HAL_GPIO_Init+0x350>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d101      	bne.n	8003f5e <HAL_GPIO_Init+0x21a>
 8003f5a:	2309      	movs	r3, #9
 8003f5c:	e012      	b.n	8003f84 <HAL_GPIO_Init+0x240>
 8003f5e:	230a      	movs	r3, #10
 8003f60:	e010      	b.n	8003f84 <HAL_GPIO_Init+0x240>
 8003f62:	2308      	movs	r3, #8
 8003f64:	e00e      	b.n	8003f84 <HAL_GPIO_Init+0x240>
 8003f66:	2307      	movs	r3, #7
 8003f68:	e00c      	b.n	8003f84 <HAL_GPIO_Init+0x240>
 8003f6a:	2306      	movs	r3, #6
 8003f6c:	e00a      	b.n	8003f84 <HAL_GPIO_Init+0x240>
 8003f6e:	2305      	movs	r3, #5
 8003f70:	e008      	b.n	8003f84 <HAL_GPIO_Init+0x240>
 8003f72:	2304      	movs	r3, #4
 8003f74:	e006      	b.n	8003f84 <HAL_GPIO_Init+0x240>
 8003f76:	2303      	movs	r3, #3
 8003f78:	e004      	b.n	8003f84 <HAL_GPIO_Init+0x240>
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	e002      	b.n	8003f84 <HAL_GPIO_Init+0x240>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e000      	b.n	8003f84 <HAL_GPIO_Init+0x240>
 8003f82:	2300      	movs	r3, #0
 8003f84:	69fa      	ldr	r2, [r7, #28]
 8003f86:	f002 0203 	and.w	r2, r2, #3
 8003f8a:	0092      	lsls	r2, r2, #2
 8003f8c:	4093      	lsls	r3, r2
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003f94:	4935      	ldr	r1, [pc, #212]	; (800406c <HAL_GPIO_Init+0x328>)
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	089b      	lsrs	r3, r3, #2
 8003f9a:	3302      	adds	r3, #2
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fa2:	4b3d      	ldr	r3, [pc, #244]	; (8004098 <HAL_GPIO_Init+0x354>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	43db      	mvns	r3, r3
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d003      	beq.n	8003fc6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fc6:	4a34      	ldr	r2, [pc, #208]	; (8004098 <HAL_GPIO_Init+0x354>)
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fcc:	4b32      	ldr	r3, [pc, #200]	; (8004098 <HAL_GPIO_Init+0x354>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	43db      	mvns	r3, r3
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	4013      	ands	r3, r2
 8003fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d003      	beq.n	8003ff0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ff0:	4a29      	ldr	r2, [pc, #164]	; (8004098 <HAL_GPIO_Init+0x354>)
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ff6:	4b28      	ldr	r3, [pc, #160]	; (8004098 <HAL_GPIO_Init+0x354>)
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	43db      	mvns	r3, r3
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	4013      	ands	r3, r2
 8004004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800401a:	4a1f      	ldr	r2, [pc, #124]	; (8004098 <HAL_GPIO_Init+0x354>)
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004020:	4b1d      	ldr	r3, [pc, #116]	; (8004098 <HAL_GPIO_Init+0x354>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	43db      	mvns	r3, r3
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	4013      	ands	r3, r2
 800402e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d003      	beq.n	8004044 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	4313      	orrs	r3, r2
 8004042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004044:	4a14      	ldr	r2, [pc, #80]	; (8004098 <HAL_GPIO_Init+0x354>)
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	3301      	adds	r3, #1
 800404e:	61fb      	str	r3, [r7, #28]
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	2b0f      	cmp	r3, #15
 8004054:	f67f ae86 	bls.w	8003d64 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004058:	bf00      	nop
 800405a:	bf00      	nop
 800405c:	3724      	adds	r7, #36	; 0x24
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	40023800 	.word	0x40023800
 800406c:	40013800 	.word	0x40013800
 8004070:	40020000 	.word	0x40020000
 8004074:	40020400 	.word	0x40020400
 8004078:	40020800 	.word	0x40020800
 800407c:	40020c00 	.word	0x40020c00
 8004080:	40021000 	.word	0x40021000
 8004084:	40021400 	.word	0x40021400
 8004088:	40021800 	.word	0x40021800
 800408c:	40021c00 	.word	0x40021c00
 8004090:	40022000 	.word	0x40022000
 8004094:	40022400 	.word	0x40022400
 8004098:	40013c00 	.word	0x40013c00

0800409c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	460b      	mov	r3, r1
 80040a6:	807b      	strh	r3, [r7, #2]
 80040a8:	4613      	mov	r3, r2
 80040aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040ac:	787b      	ldrb	r3, [r7, #1]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040b2:	887a      	ldrh	r2, [r7, #2]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80040b8:	e003      	b.n	80040c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80040ba:	887b      	ldrh	r3, [r7, #2]
 80040bc:	041a      	lsls	r2, r3, #16
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	619a      	str	r2, [r3, #24]
}
 80040c2:	bf00      	nop
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80040ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040d0:	b08f      	sub	sp, #60	; 0x3c
 80040d2:	af0a      	add	r7, sp, #40	; 0x28
 80040d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e116      	b.n	800430e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d106      	bne.n	8004100 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7fe fc34 	bl	8002968 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2203      	movs	r2, #3
 8004104:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800410c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004110:	2b00      	cmp	r3, #0
 8004112:	d102      	bne.n	800411a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f003 f896 	bl	8007250 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	603b      	str	r3, [r7, #0]
 800412a:	687e      	ldr	r6, [r7, #4]
 800412c:	466d      	mov	r5, sp
 800412e:	f106 0410 	add.w	r4, r6, #16
 8004132:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004134:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004136:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004138:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800413a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800413e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004142:	1d33      	adds	r3, r6, #4
 8004144:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004146:	6838      	ldr	r0, [r7, #0]
 8004148:	f003 f82a 	bl	80071a0 <USB_CoreInit>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d005      	beq.n	800415e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2202      	movs	r2, #2
 8004156:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e0d7      	b.n	800430e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2100      	movs	r1, #0
 8004164:	4618      	mov	r0, r3
 8004166:	f003 f884 	bl	8007272 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800416a:	2300      	movs	r3, #0
 800416c:	73fb      	strb	r3, [r7, #15]
 800416e:	e04a      	b.n	8004206 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004170:	7bfa      	ldrb	r2, [r7, #15]
 8004172:	6879      	ldr	r1, [r7, #4]
 8004174:	4613      	mov	r3, r2
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	4413      	add	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	440b      	add	r3, r1
 800417e:	333d      	adds	r3, #61	; 0x3d
 8004180:	2201      	movs	r2, #1
 8004182:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004184:	7bfa      	ldrb	r2, [r7, #15]
 8004186:	6879      	ldr	r1, [r7, #4]
 8004188:	4613      	mov	r3, r2
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	4413      	add	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	440b      	add	r3, r1
 8004192:	333c      	adds	r3, #60	; 0x3c
 8004194:	7bfa      	ldrb	r2, [r7, #15]
 8004196:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004198:	7bfa      	ldrb	r2, [r7, #15]
 800419a:	7bfb      	ldrb	r3, [r7, #15]
 800419c:	b298      	uxth	r0, r3
 800419e:	6879      	ldr	r1, [r7, #4]
 80041a0:	4613      	mov	r3, r2
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	4413      	add	r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	440b      	add	r3, r1
 80041aa:	3344      	adds	r3, #68	; 0x44
 80041ac:	4602      	mov	r2, r0
 80041ae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80041b0:	7bfa      	ldrb	r2, [r7, #15]
 80041b2:	6879      	ldr	r1, [r7, #4]
 80041b4:	4613      	mov	r3, r2
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	4413      	add	r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	440b      	add	r3, r1
 80041be:	3340      	adds	r3, #64	; 0x40
 80041c0:	2200      	movs	r2, #0
 80041c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80041c4:	7bfa      	ldrb	r2, [r7, #15]
 80041c6:	6879      	ldr	r1, [r7, #4]
 80041c8:	4613      	mov	r3, r2
 80041ca:	00db      	lsls	r3, r3, #3
 80041cc:	4413      	add	r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	440b      	add	r3, r1
 80041d2:	3348      	adds	r3, #72	; 0x48
 80041d4:	2200      	movs	r2, #0
 80041d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80041d8:	7bfa      	ldrb	r2, [r7, #15]
 80041da:	6879      	ldr	r1, [r7, #4]
 80041dc:	4613      	mov	r3, r2
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	4413      	add	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	334c      	adds	r3, #76	; 0x4c
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80041ec:	7bfa      	ldrb	r2, [r7, #15]
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	4613      	mov	r3, r2
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	4413      	add	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	440b      	add	r3, r1
 80041fa:	3354      	adds	r3, #84	; 0x54
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004200:	7bfb      	ldrb	r3, [r7, #15]
 8004202:	3301      	adds	r3, #1
 8004204:	73fb      	strb	r3, [r7, #15]
 8004206:	7bfa      	ldrb	r2, [r7, #15]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	429a      	cmp	r2, r3
 800420e:	d3af      	bcc.n	8004170 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004210:	2300      	movs	r3, #0
 8004212:	73fb      	strb	r3, [r7, #15]
 8004214:	e044      	b.n	80042a0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004216:	7bfa      	ldrb	r2, [r7, #15]
 8004218:	6879      	ldr	r1, [r7, #4]
 800421a:	4613      	mov	r3, r2
 800421c:	00db      	lsls	r3, r3, #3
 800421e:	4413      	add	r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	440b      	add	r3, r1
 8004224:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004228:	2200      	movs	r2, #0
 800422a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800422c:	7bfa      	ldrb	r2, [r7, #15]
 800422e:	6879      	ldr	r1, [r7, #4]
 8004230:	4613      	mov	r3, r2
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	4413      	add	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	440b      	add	r3, r1
 800423a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800423e:	7bfa      	ldrb	r2, [r7, #15]
 8004240:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004242:	7bfa      	ldrb	r2, [r7, #15]
 8004244:	6879      	ldr	r1, [r7, #4]
 8004246:	4613      	mov	r3, r2
 8004248:	00db      	lsls	r3, r3, #3
 800424a:	4413      	add	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	440b      	add	r3, r1
 8004250:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004254:	2200      	movs	r2, #0
 8004256:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004258:	7bfa      	ldrb	r2, [r7, #15]
 800425a:	6879      	ldr	r1, [r7, #4]
 800425c:	4613      	mov	r3, r2
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	4413      	add	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	440b      	add	r3, r1
 8004266:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800426a:	2200      	movs	r2, #0
 800426c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800426e:	7bfa      	ldrb	r2, [r7, #15]
 8004270:	6879      	ldr	r1, [r7, #4]
 8004272:	4613      	mov	r3, r2
 8004274:	00db      	lsls	r3, r3, #3
 8004276:	4413      	add	r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	440b      	add	r3, r1
 800427c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004280:	2200      	movs	r2, #0
 8004282:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004284:	7bfa      	ldrb	r2, [r7, #15]
 8004286:	6879      	ldr	r1, [r7, #4]
 8004288:	4613      	mov	r3, r2
 800428a:	00db      	lsls	r3, r3, #3
 800428c:	4413      	add	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	440b      	add	r3, r1
 8004292:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004296:	2200      	movs	r2, #0
 8004298:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800429a:	7bfb      	ldrb	r3, [r7, #15]
 800429c:	3301      	adds	r3, #1
 800429e:	73fb      	strb	r3, [r7, #15]
 80042a0:	7bfa      	ldrb	r2, [r7, #15]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d3b5      	bcc.n	8004216 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	603b      	str	r3, [r7, #0]
 80042b0:	687e      	ldr	r6, [r7, #4]
 80042b2:	466d      	mov	r5, sp
 80042b4:	f106 0410 	add.w	r4, r6, #16
 80042b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80042c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80042c8:	1d33      	adds	r3, r6, #4
 80042ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042cc:	6838      	ldr	r0, [r7, #0]
 80042ce:	f003 f81d 	bl	800730c <USB_DevInit>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d005      	beq.n	80042e4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2202      	movs	r2, #2
 80042dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e014      	b.n	800430e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d102      	bne.n	8004302 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 f80b 	bl	8004318 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4618      	mov	r0, r3
 8004308:	f003 f9db 	bl	80076c2 <USB_DevDisconnect>

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3714      	adds	r7, #20
 8004312:	46bd      	mov	sp, r7
 8004314:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004318 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004346:	4b05      	ldr	r3, [pc, #20]	; (800435c <HAL_PCDEx_ActivateLPM+0x44>)
 8004348:	4313      	orrs	r3, r2
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	10000003 	.word	0x10000003

08004360 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004360:	b480      	push	{r7}
 8004362:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004364:	4b05      	ldr	r3, [pc, #20]	; (800437c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a04      	ldr	r2, [pc, #16]	; (800437c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800436a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800436e:	6013      	str	r3, [r2, #0]
}
 8004370:	bf00      	nop
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	40007000 	.word	0x40007000

08004380 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004386:	2300      	movs	r3, #0
 8004388:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800438a:	4b23      	ldr	r3, [pc, #140]	; (8004418 <HAL_PWREx_EnableOverDrive+0x98>)
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	4a22      	ldr	r2, [pc, #136]	; (8004418 <HAL_PWREx_EnableOverDrive+0x98>)
 8004390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004394:	6413      	str	r3, [r2, #64]	; 0x40
 8004396:	4b20      	ldr	r3, [pc, #128]	; (8004418 <HAL_PWREx_EnableOverDrive+0x98>)
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800439e:	603b      	str	r3, [r7, #0]
 80043a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80043a2:	4b1e      	ldr	r3, [pc, #120]	; (800441c <HAL_PWREx_EnableOverDrive+0x9c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a1d      	ldr	r2, [pc, #116]	; (800441c <HAL_PWREx_EnableOverDrive+0x9c>)
 80043a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043ae:	f7fe fc4b 	bl	8002c48 <HAL_GetTick>
 80043b2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80043b4:	e009      	b.n	80043ca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80043b6:	f7fe fc47 	bl	8002c48 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043c4:	d901      	bls.n	80043ca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e022      	b.n	8004410 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80043ca:	4b14      	ldr	r3, [pc, #80]	; (800441c <HAL_PWREx_EnableOverDrive+0x9c>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d6:	d1ee      	bne.n	80043b6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80043d8:	4b10      	ldr	r3, [pc, #64]	; (800441c <HAL_PWREx_EnableOverDrive+0x9c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a0f      	ldr	r2, [pc, #60]	; (800441c <HAL_PWREx_EnableOverDrive+0x9c>)
 80043de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043e4:	f7fe fc30 	bl	8002c48 <HAL_GetTick>
 80043e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80043ea:	e009      	b.n	8004400 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80043ec:	f7fe fc2c 	bl	8002c48 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043fa:	d901      	bls.n	8004400 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e007      	b.n	8004410 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004400:	4b06      	ldr	r3, [pc, #24]	; (800441c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004408:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800440c:	d1ee      	bne.n	80043ec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40023800 	.word	0x40023800
 800441c:	40007000 	.word	0x40007000

08004420 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004428:	2300      	movs	r3, #0
 800442a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e29b      	b.n	800496e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 8087 	beq.w	8004552 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004444:	4b96      	ldr	r3, [pc, #600]	; (80046a0 <HAL_RCC_OscConfig+0x280>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f003 030c 	and.w	r3, r3, #12
 800444c:	2b04      	cmp	r3, #4
 800444e:	d00c      	beq.n	800446a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004450:	4b93      	ldr	r3, [pc, #588]	; (80046a0 <HAL_RCC_OscConfig+0x280>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f003 030c 	and.w	r3, r3, #12
 8004458:	2b08      	cmp	r3, #8
 800445a:	d112      	bne.n	8004482 <HAL_RCC_OscConfig+0x62>
 800445c:	4b90      	ldr	r3, [pc, #576]	; (80046a0 <HAL_RCC_OscConfig+0x280>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004464:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004468:	d10b      	bne.n	8004482 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800446a:	4b8d      	ldr	r3, [pc, #564]	; (80046a0 <HAL_RCC_OscConfig+0x280>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d06c      	beq.n	8004550 <HAL_RCC_OscConfig+0x130>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d168      	bne.n	8004550 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e275      	b.n	800496e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800448a:	d106      	bne.n	800449a <HAL_RCC_OscConfig+0x7a>
 800448c:	4b84      	ldr	r3, [pc, #528]	; (80046a0 <HAL_RCC_OscConfig+0x280>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a83      	ldr	r2, [pc, #524]	; (80046a0 <HAL_RCC_OscConfig+0x280>)
 8004492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004496:	6013      	str	r3, [r2, #0]
 8004498:	e02e      	b.n	80044f8 <HAL_RCC_OscConfig+0xd8>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10c      	bne.n	80044bc <HAL_RCC_OscConfig+0x9c>
 80044a2:	4b7f      	ldr	r3, [pc, #508]	; (80046a0 <HAL_RCC_OscConfig+0x280>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a7e      	ldr	r2, [pc, #504]	; (80046a0 <HAL_RCC_OscConfig+0x280>)
 80044a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ac:	6013      	str	r3, [r2, #0]
 80044ae:	4b7c      	ldr	r3, [pc, #496]	; (80046a0 <HAL_RCC_OscConfig+0x280>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a7b      	ldr	r2, [pc, #492]	; (80046a0 <HAL_RCC_OscConfig+0x280>)
 80044b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044b8:	6013      	str	r3, [r2, #0]
 80044ba:	e01d      	b.n	80044f8 <HAL_RCC_OscConfig+0xd8>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044c4:	d10c      	bne.n	80044e0 <HAL_RCC_OscConfig+0xc0>
 80044c6:	4b76      	ldr	r3, [pc, #472]	; (80046a0 <HAL_RCC_OscConfig+0x280>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a75      	ldr	r2, [pc, #468]	; (80046a0 <HAL_RCC_OscConfig+0x280>)
 80044cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044d0:	6013      	str	r3, [r2, #0]
 80044d2:	4b73      	ldr	r3, [pc, #460]	; (80046a0 <HAL_RCC_OscConfig+0x280>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a72      	ldr	r2, [pc, #456]	; (80046a0 <HAL_RCC_OscConfig+0x280>)
 80044d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044dc:	6013      	str	r3, [r2, #0]
 80044de:	e00b      	b.n	80044f8 <HAL_RCC_OscConfig+0xd8>
 80044e0:	4b6f      	ldr	r3, [pc, #444]	; (80046a0 <HAL_RCC_OscConfig+0x280>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a6e      	ldr	r2, [pc, #440]	; (80046a0 <HAL_RCC_OscConfig+0x280>)
 80044e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ea:	6013      	str	r3, [r2, #0]
 80044ec:	4b6c      	ldr	r3, [pc, #432]	; (80046a0 <HAL_RCC_OscConfig+0x280>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a6b      	ldr	r2, [pc, #428]	; (80046a0 <HAL_RCC_OscConfig+0x280>)
 80044f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d013      	beq.n	8004528 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004500:	f7fe fba2 	bl	8002c48 <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004508:	f7fe fb9e 	bl	8002c48 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b64      	cmp	r3, #100	; 0x64
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e229      	b.n	800496e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800451a:	4b61      	ldr	r3, [pc, #388]	; (80046a0 <HAL_RCC_OscConfig+0x280>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0f0      	beq.n	8004508 <HAL_RCC_OscConfig+0xe8>
 8004526:	e014      	b.n	8004552 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004528:	f7fe fb8e 	bl	8002c48 <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004530:	f7fe fb8a 	bl	8002c48 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b64      	cmp	r3, #100	; 0x64
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e215      	b.n	800496e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004542:	4b57      	ldr	r3, [pc, #348]	; (80046a0 <HAL_RCC_OscConfig+0x280>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1f0      	bne.n	8004530 <HAL_RCC_OscConfig+0x110>
 800454e:	e000      	b.n	8004552 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d069      	beq.n	8004632 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800455e:	4b50      	ldr	r3, [pc, #320]	; (80046a0 <HAL_RCC_OscConfig+0x280>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 030c 	and.w	r3, r3, #12
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00b      	beq.n	8004582 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800456a:	4b4d      	ldr	r3, [pc, #308]	; (80046a0 <HAL_RCC_OscConfig+0x280>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f003 030c 	and.w	r3, r3, #12
 8004572:	2b08      	cmp	r3, #8
 8004574:	d11c      	bne.n	80045b0 <HAL_RCC_OscConfig+0x190>
 8004576:	4b4a      	ldr	r3, [pc, #296]	; (80046a0 <HAL_RCC_OscConfig+0x280>)
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d116      	bne.n	80045b0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004582:	4b47      	ldr	r3, [pc, #284]	; (80046a0 <HAL_RCC_OscConfig+0x280>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d005      	beq.n	800459a <HAL_RCC_OscConfig+0x17a>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d001      	beq.n	800459a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e1e9      	b.n	800496e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800459a:	4b41      	ldr	r3, [pc, #260]	; (80046a0 <HAL_RCC_OscConfig+0x280>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	00db      	lsls	r3, r3, #3
 80045a8:	493d      	ldr	r1, [pc, #244]	; (80046a0 <HAL_RCC_OscConfig+0x280>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ae:	e040      	b.n	8004632 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d023      	beq.n	8004600 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045b8:	4b39      	ldr	r3, [pc, #228]	; (80046a0 <HAL_RCC_OscConfig+0x280>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a38      	ldr	r2, [pc, #224]	; (80046a0 <HAL_RCC_OscConfig+0x280>)
 80045be:	f043 0301 	orr.w	r3, r3, #1
 80045c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c4:	f7fe fb40 	bl	8002c48 <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045cc:	f7fe fb3c 	bl	8002c48 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e1c7      	b.n	800496e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045de:	4b30      	ldr	r3, [pc, #192]	; (80046a0 <HAL_RCC_OscConfig+0x280>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0f0      	beq.n	80045cc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ea:	4b2d      	ldr	r3, [pc, #180]	; (80046a0 <HAL_RCC_OscConfig+0x280>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	4929      	ldr	r1, [pc, #164]	; (80046a0 <HAL_RCC_OscConfig+0x280>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	600b      	str	r3, [r1, #0]
 80045fe:	e018      	b.n	8004632 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004600:	4b27      	ldr	r3, [pc, #156]	; (80046a0 <HAL_RCC_OscConfig+0x280>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a26      	ldr	r2, [pc, #152]	; (80046a0 <HAL_RCC_OscConfig+0x280>)
 8004606:	f023 0301 	bic.w	r3, r3, #1
 800460a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460c:	f7fe fb1c 	bl	8002c48 <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004614:	f7fe fb18 	bl	8002c48 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e1a3      	b.n	800496e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004626:	4b1e      	ldr	r3, [pc, #120]	; (80046a0 <HAL_RCC_OscConfig+0x280>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1f0      	bne.n	8004614 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0308 	and.w	r3, r3, #8
 800463a:	2b00      	cmp	r3, #0
 800463c:	d038      	beq.n	80046b0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d019      	beq.n	800467a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004646:	4b16      	ldr	r3, [pc, #88]	; (80046a0 <HAL_RCC_OscConfig+0x280>)
 8004648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800464a:	4a15      	ldr	r2, [pc, #84]	; (80046a0 <HAL_RCC_OscConfig+0x280>)
 800464c:	f043 0301 	orr.w	r3, r3, #1
 8004650:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004652:	f7fe faf9 	bl	8002c48 <HAL_GetTick>
 8004656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004658:	e008      	b.n	800466c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800465a:	f7fe faf5 	bl	8002c48 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d901      	bls.n	800466c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e180      	b.n	800496e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800466c:	4b0c      	ldr	r3, [pc, #48]	; (80046a0 <HAL_RCC_OscConfig+0x280>)
 800466e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d0f0      	beq.n	800465a <HAL_RCC_OscConfig+0x23a>
 8004678:	e01a      	b.n	80046b0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800467a:	4b09      	ldr	r3, [pc, #36]	; (80046a0 <HAL_RCC_OscConfig+0x280>)
 800467c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800467e:	4a08      	ldr	r2, [pc, #32]	; (80046a0 <HAL_RCC_OscConfig+0x280>)
 8004680:	f023 0301 	bic.w	r3, r3, #1
 8004684:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004686:	f7fe fadf 	bl	8002c48 <HAL_GetTick>
 800468a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800468c:	e00a      	b.n	80046a4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800468e:	f7fe fadb 	bl	8002c48 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	2b02      	cmp	r3, #2
 800469a:	d903      	bls.n	80046a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e166      	b.n	800496e <HAL_RCC_OscConfig+0x54e>
 80046a0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046a4:	4b92      	ldr	r3, [pc, #584]	; (80048f0 <HAL_RCC_OscConfig+0x4d0>)
 80046a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1ee      	bne.n	800468e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0304 	and.w	r3, r3, #4
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f000 80a4 	beq.w	8004806 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046be:	4b8c      	ldr	r3, [pc, #560]	; (80048f0 <HAL_RCC_OscConfig+0x4d0>)
 80046c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10d      	bne.n	80046e6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80046ca:	4b89      	ldr	r3, [pc, #548]	; (80048f0 <HAL_RCC_OscConfig+0x4d0>)
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	4a88      	ldr	r2, [pc, #544]	; (80048f0 <HAL_RCC_OscConfig+0x4d0>)
 80046d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046d4:	6413      	str	r3, [r2, #64]	; 0x40
 80046d6:	4b86      	ldr	r3, [pc, #536]	; (80048f0 <HAL_RCC_OscConfig+0x4d0>)
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046de:	60bb      	str	r3, [r7, #8]
 80046e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046e2:	2301      	movs	r3, #1
 80046e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046e6:	4b83      	ldr	r3, [pc, #524]	; (80048f4 <HAL_RCC_OscConfig+0x4d4>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d118      	bne.n	8004724 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80046f2:	4b80      	ldr	r3, [pc, #512]	; (80048f4 <HAL_RCC_OscConfig+0x4d4>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a7f      	ldr	r2, [pc, #508]	; (80048f4 <HAL_RCC_OscConfig+0x4d4>)
 80046f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046fe:	f7fe faa3 	bl	8002c48 <HAL_GetTick>
 8004702:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004704:	e008      	b.n	8004718 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004706:	f7fe fa9f 	bl	8002c48 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b64      	cmp	r3, #100	; 0x64
 8004712:	d901      	bls.n	8004718 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e12a      	b.n	800496e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004718:	4b76      	ldr	r3, [pc, #472]	; (80048f4 <HAL_RCC_OscConfig+0x4d4>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004720:	2b00      	cmp	r3, #0
 8004722:	d0f0      	beq.n	8004706 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d106      	bne.n	800473a <HAL_RCC_OscConfig+0x31a>
 800472c:	4b70      	ldr	r3, [pc, #448]	; (80048f0 <HAL_RCC_OscConfig+0x4d0>)
 800472e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004730:	4a6f      	ldr	r2, [pc, #444]	; (80048f0 <HAL_RCC_OscConfig+0x4d0>)
 8004732:	f043 0301 	orr.w	r3, r3, #1
 8004736:	6713      	str	r3, [r2, #112]	; 0x70
 8004738:	e02d      	b.n	8004796 <HAL_RCC_OscConfig+0x376>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10c      	bne.n	800475c <HAL_RCC_OscConfig+0x33c>
 8004742:	4b6b      	ldr	r3, [pc, #428]	; (80048f0 <HAL_RCC_OscConfig+0x4d0>)
 8004744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004746:	4a6a      	ldr	r2, [pc, #424]	; (80048f0 <HAL_RCC_OscConfig+0x4d0>)
 8004748:	f023 0301 	bic.w	r3, r3, #1
 800474c:	6713      	str	r3, [r2, #112]	; 0x70
 800474e:	4b68      	ldr	r3, [pc, #416]	; (80048f0 <HAL_RCC_OscConfig+0x4d0>)
 8004750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004752:	4a67      	ldr	r2, [pc, #412]	; (80048f0 <HAL_RCC_OscConfig+0x4d0>)
 8004754:	f023 0304 	bic.w	r3, r3, #4
 8004758:	6713      	str	r3, [r2, #112]	; 0x70
 800475a:	e01c      	b.n	8004796 <HAL_RCC_OscConfig+0x376>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	2b05      	cmp	r3, #5
 8004762:	d10c      	bne.n	800477e <HAL_RCC_OscConfig+0x35e>
 8004764:	4b62      	ldr	r3, [pc, #392]	; (80048f0 <HAL_RCC_OscConfig+0x4d0>)
 8004766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004768:	4a61      	ldr	r2, [pc, #388]	; (80048f0 <HAL_RCC_OscConfig+0x4d0>)
 800476a:	f043 0304 	orr.w	r3, r3, #4
 800476e:	6713      	str	r3, [r2, #112]	; 0x70
 8004770:	4b5f      	ldr	r3, [pc, #380]	; (80048f0 <HAL_RCC_OscConfig+0x4d0>)
 8004772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004774:	4a5e      	ldr	r2, [pc, #376]	; (80048f0 <HAL_RCC_OscConfig+0x4d0>)
 8004776:	f043 0301 	orr.w	r3, r3, #1
 800477a:	6713      	str	r3, [r2, #112]	; 0x70
 800477c:	e00b      	b.n	8004796 <HAL_RCC_OscConfig+0x376>
 800477e:	4b5c      	ldr	r3, [pc, #368]	; (80048f0 <HAL_RCC_OscConfig+0x4d0>)
 8004780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004782:	4a5b      	ldr	r2, [pc, #364]	; (80048f0 <HAL_RCC_OscConfig+0x4d0>)
 8004784:	f023 0301 	bic.w	r3, r3, #1
 8004788:	6713      	str	r3, [r2, #112]	; 0x70
 800478a:	4b59      	ldr	r3, [pc, #356]	; (80048f0 <HAL_RCC_OscConfig+0x4d0>)
 800478c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800478e:	4a58      	ldr	r2, [pc, #352]	; (80048f0 <HAL_RCC_OscConfig+0x4d0>)
 8004790:	f023 0304 	bic.w	r3, r3, #4
 8004794:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d015      	beq.n	80047ca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800479e:	f7fe fa53 	bl	8002c48 <HAL_GetTick>
 80047a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a4:	e00a      	b.n	80047bc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047a6:	f7fe fa4f 	bl	8002c48 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d901      	bls.n	80047bc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e0d8      	b.n	800496e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047bc:	4b4c      	ldr	r3, [pc, #304]	; (80048f0 <HAL_RCC_OscConfig+0x4d0>)
 80047be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d0ee      	beq.n	80047a6 <HAL_RCC_OscConfig+0x386>
 80047c8:	e014      	b.n	80047f4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ca:	f7fe fa3d 	bl	8002c48 <HAL_GetTick>
 80047ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047d0:	e00a      	b.n	80047e8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d2:	f7fe fa39 	bl	8002c48 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e0c2      	b.n	800496e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047e8:	4b41      	ldr	r3, [pc, #260]	; (80048f0 <HAL_RCC_OscConfig+0x4d0>)
 80047ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1ee      	bne.n	80047d2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047f4:	7dfb      	ldrb	r3, [r7, #23]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d105      	bne.n	8004806 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047fa:	4b3d      	ldr	r3, [pc, #244]	; (80048f0 <HAL_RCC_OscConfig+0x4d0>)
 80047fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fe:	4a3c      	ldr	r2, [pc, #240]	; (80048f0 <HAL_RCC_OscConfig+0x4d0>)
 8004800:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004804:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 80ae 	beq.w	800496c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004810:	4b37      	ldr	r3, [pc, #220]	; (80048f0 <HAL_RCC_OscConfig+0x4d0>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f003 030c 	and.w	r3, r3, #12
 8004818:	2b08      	cmp	r3, #8
 800481a:	d06d      	beq.n	80048f8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	2b02      	cmp	r3, #2
 8004822:	d14b      	bne.n	80048bc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004824:	4b32      	ldr	r3, [pc, #200]	; (80048f0 <HAL_RCC_OscConfig+0x4d0>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a31      	ldr	r2, [pc, #196]	; (80048f0 <HAL_RCC_OscConfig+0x4d0>)
 800482a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800482e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004830:	f7fe fa0a 	bl	8002c48 <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004836:	e008      	b.n	800484a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004838:	f7fe fa06 	bl	8002c48 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b02      	cmp	r3, #2
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e091      	b.n	800496e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800484a:	4b29      	ldr	r3, [pc, #164]	; (80048f0 <HAL_RCC_OscConfig+0x4d0>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1f0      	bne.n	8004838 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	69da      	ldr	r2, [r3, #28]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	431a      	orrs	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004864:	019b      	lsls	r3, r3, #6
 8004866:	431a      	orrs	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486c:	085b      	lsrs	r3, r3, #1
 800486e:	3b01      	subs	r3, #1
 8004870:	041b      	lsls	r3, r3, #16
 8004872:	431a      	orrs	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004878:	061b      	lsls	r3, r3, #24
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004880:	071b      	lsls	r3, r3, #28
 8004882:	491b      	ldr	r1, [pc, #108]	; (80048f0 <HAL_RCC_OscConfig+0x4d0>)
 8004884:	4313      	orrs	r3, r2
 8004886:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004888:	4b19      	ldr	r3, [pc, #100]	; (80048f0 <HAL_RCC_OscConfig+0x4d0>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a18      	ldr	r2, [pc, #96]	; (80048f0 <HAL_RCC_OscConfig+0x4d0>)
 800488e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004892:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004894:	f7fe f9d8 	bl	8002c48 <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800489c:	f7fe f9d4 	bl	8002c48 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e05f      	b.n	800496e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ae:	4b10      	ldr	r3, [pc, #64]	; (80048f0 <HAL_RCC_OscConfig+0x4d0>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d0f0      	beq.n	800489c <HAL_RCC_OscConfig+0x47c>
 80048ba:	e057      	b.n	800496c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048bc:	4b0c      	ldr	r3, [pc, #48]	; (80048f0 <HAL_RCC_OscConfig+0x4d0>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a0b      	ldr	r2, [pc, #44]	; (80048f0 <HAL_RCC_OscConfig+0x4d0>)
 80048c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c8:	f7fe f9be 	bl	8002c48 <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ce:	e008      	b.n	80048e2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d0:	f7fe f9ba 	bl	8002c48 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e045      	b.n	800496e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048e2:	4b03      	ldr	r3, [pc, #12]	; (80048f0 <HAL_RCC_OscConfig+0x4d0>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1f0      	bne.n	80048d0 <HAL_RCC_OscConfig+0x4b0>
 80048ee:	e03d      	b.n	800496c <HAL_RCC_OscConfig+0x54c>
 80048f0:	40023800 	.word	0x40023800
 80048f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80048f8:	4b1f      	ldr	r3, [pc, #124]	; (8004978 <HAL_RCC_OscConfig+0x558>)
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d030      	beq.n	8004968 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004910:	429a      	cmp	r2, r3
 8004912:	d129      	bne.n	8004968 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800491e:	429a      	cmp	r2, r3
 8004920:	d122      	bne.n	8004968 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004928:	4013      	ands	r3, r2
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800492e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004930:	4293      	cmp	r3, r2
 8004932:	d119      	bne.n	8004968 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493e:	085b      	lsrs	r3, r3, #1
 8004940:	3b01      	subs	r3, #1
 8004942:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004944:	429a      	cmp	r2, r3
 8004946:	d10f      	bne.n	8004968 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004952:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004954:	429a      	cmp	r2, r3
 8004956:	d107      	bne.n	8004968 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004962:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004964:	429a      	cmp	r2, r3
 8004966:	d001      	beq.n	800496c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e000      	b.n	800496e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	40023800 	.word	0x40023800

0800497c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004986:	2300      	movs	r3, #0
 8004988:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d101      	bne.n	8004994 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e0d0      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004994:	4b6a      	ldr	r3, [pc, #424]	; (8004b40 <HAL_RCC_ClockConfig+0x1c4>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 030f 	and.w	r3, r3, #15
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d910      	bls.n	80049c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049a2:	4b67      	ldr	r3, [pc, #412]	; (8004b40 <HAL_RCC_ClockConfig+0x1c4>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f023 020f 	bic.w	r2, r3, #15
 80049aa:	4965      	ldr	r1, [pc, #404]	; (8004b40 <HAL_RCC_ClockConfig+0x1c4>)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049b2:	4b63      	ldr	r3, [pc, #396]	; (8004b40 <HAL_RCC_ClockConfig+0x1c4>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 030f 	and.w	r3, r3, #15
 80049ba:	683a      	ldr	r2, [r7, #0]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d001      	beq.n	80049c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e0b8      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0302 	and.w	r3, r3, #2
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d020      	beq.n	8004a12 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0304 	and.w	r3, r3, #4
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d005      	beq.n	80049e8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049dc:	4b59      	ldr	r3, [pc, #356]	; (8004b44 <HAL_RCC_ClockConfig+0x1c8>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	4a58      	ldr	r2, [pc, #352]	; (8004b44 <HAL_RCC_ClockConfig+0x1c8>)
 80049e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0308 	and.w	r3, r3, #8
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d005      	beq.n	8004a00 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049f4:	4b53      	ldr	r3, [pc, #332]	; (8004b44 <HAL_RCC_ClockConfig+0x1c8>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	4a52      	ldr	r2, [pc, #328]	; (8004b44 <HAL_RCC_ClockConfig+0x1c8>)
 80049fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a00:	4b50      	ldr	r3, [pc, #320]	; (8004b44 <HAL_RCC_ClockConfig+0x1c8>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	494d      	ldr	r1, [pc, #308]	; (8004b44 <HAL_RCC_ClockConfig+0x1c8>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d040      	beq.n	8004aa0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d107      	bne.n	8004a36 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a26:	4b47      	ldr	r3, [pc, #284]	; (8004b44 <HAL_RCC_ClockConfig+0x1c8>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d115      	bne.n	8004a5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e07f      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d107      	bne.n	8004a4e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a3e:	4b41      	ldr	r3, [pc, #260]	; (8004b44 <HAL_RCC_ClockConfig+0x1c8>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d109      	bne.n	8004a5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e073      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a4e:	4b3d      	ldr	r3, [pc, #244]	; (8004b44 <HAL_RCC_ClockConfig+0x1c8>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e06b      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a5e:	4b39      	ldr	r3, [pc, #228]	; (8004b44 <HAL_RCC_ClockConfig+0x1c8>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f023 0203 	bic.w	r2, r3, #3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	4936      	ldr	r1, [pc, #216]	; (8004b44 <HAL_RCC_ClockConfig+0x1c8>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a70:	f7fe f8ea 	bl	8002c48 <HAL_GetTick>
 8004a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a76:	e00a      	b.n	8004a8e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a78:	f7fe f8e6 	bl	8002c48 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e053      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a8e:	4b2d      	ldr	r3, [pc, #180]	; (8004b44 <HAL_RCC_ClockConfig+0x1c8>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f003 020c 	and.w	r2, r3, #12
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d1eb      	bne.n	8004a78 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004aa0:	4b27      	ldr	r3, [pc, #156]	; (8004b40 <HAL_RCC_ClockConfig+0x1c4>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 030f 	and.w	r3, r3, #15
 8004aa8:	683a      	ldr	r2, [r7, #0]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d210      	bcs.n	8004ad0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aae:	4b24      	ldr	r3, [pc, #144]	; (8004b40 <HAL_RCC_ClockConfig+0x1c4>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f023 020f 	bic.w	r2, r3, #15
 8004ab6:	4922      	ldr	r1, [pc, #136]	; (8004b40 <HAL_RCC_ClockConfig+0x1c4>)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004abe:	4b20      	ldr	r3, [pc, #128]	; (8004b40 <HAL_RCC_ClockConfig+0x1c4>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 030f 	and.w	r3, r3, #15
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d001      	beq.n	8004ad0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e032      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0304 	and.w	r3, r3, #4
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d008      	beq.n	8004aee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004adc:	4b19      	ldr	r3, [pc, #100]	; (8004b44 <HAL_RCC_ClockConfig+0x1c8>)
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	4916      	ldr	r1, [pc, #88]	; (8004b44 <HAL_RCC_ClockConfig+0x1c8>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0308 	and.w	r3, r3, #8
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d009      	beq.n	8004b0e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004afa:	4b12      	ldr	r3, [pc, #72]	; (8004b44 <HAL_RCC_ClockConfig+0x1c8>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	00db      	lsls	r3, r3, #3
 8004b08:	490e      	ldr	r1, [pc, #56]	; (8004b44 <HAL_RCC_ClockConfig+0x1c8>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b0e:	f000 f821 	bl	8004b54 <HAL_RCC_GetSysClockFreq>
 8004b12:	4602      	mov	r2, r0
 8004b14:	4b0b      	ldr	r3, [pc, #44]	; (8004b44 <HAL_RCC_ClockConfig+0x1c8>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	091b      	lsrs	r3, r3, #4
 8004b1a:	f003 030f 	and.w	r3, r3, #15
 8004b1e:	490a      	ldr	r1, [pc, #40]	; (8004b48 <HAL_RCC_ClockConfig+0x1cc>)
 8004b20:	5ccb      	ldrb	r3, [r1, r3]
 8004b22:	fa22 f303 	lsr.w	r3, r2, r3
 8004b26:	4a09      	ldr	r2, [pc, #36]	; (8004b4c <HAL_RCC_ClockConfig+0x1d0>)
 8004b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b2a:	4b09      	ldr	r3, [pc, #36]	; (8004b50 <HAL_RCC_ClockConfig+0x1d4>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7fd ff94 	bl	8002a5c <HAL_InitTick>

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	40023c00 	.word	0x40023c00
 8004b44:	40023800 	.word	0x40023800
 8004b48:	0800b62c 	.word	0x0800b62c
 8004b4c:	20000004 	.word	0x20000004
 8004b50:	20000008 	.word	0x20000008

08004b54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b58:	b094      	sub	sp, #80	; 0x50
 8004b5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	647b      	str	r3, [r7, #68]	; 0x44
 8004b60:	2300      	movs	r3, #0
 8004b62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b64:	2300      	movs	r3, #0
 8004b66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b6c:	4b79      	ldr	r3, [pc, #484]	; (8004d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f003 030c 	and.w	r3, r3, #12
 8004b74:	2b08      	cmp	r3, #8
 8004b76:	d00d      	beq.n	8004b94 <HAL_RCC_GetSysClockFreq+0x40>
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	f200 80e1 	bhi.w	8004d40 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d002      	beq.n	8004b88 <HAL_RCC_GetSysClockFreq+0x34>
 8004b82:	2b04      	cmp	r3, #4
 8004b84:	d003      	beq.n	8004b8e <HAL_RCC_GetSysClockFreq+0x3a>
 8004b86:	e0db      	b.n	8004d40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b88:	4b73      	ldr	r3, [pc, #460]	; (8004d58 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b8a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b8c:	e0db      	b.n	8004d46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b8e:	4b73      	ldr	r3, [pc, #460]	; (8004d5c <HAL_RCC_GetSysClockFreq+0x208>)
 8004b90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b92:	e0d8      	b.n	8004d46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b94:	4b6f      	ldr	r3, [pc, #444]	; (8004d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b9c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004b9e:	4b6d      	ldr	r3, [pc, #436]	; (8004d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d063      	beq.n	8004c72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004baa:	4b6a      	ldr	r3, [pc, #424]	; (8004d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	099b      	lsrs	r3, r3, #6
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bb4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bbc:	633b      	str	r3, [r7, #48]	; 0x30
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	637b      	str	r3, [r7, #52]	; 0x34
 8004bc2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004bc6:	4622      	mov	r2, r4
 8004bc8:	462b      	mov	r3, r5
 8004bca:	f04f 0000 	mov.w	r0, #0
 8004bce:	f04f 0100 	mov.w	r1, #0
 8004bd2:	0159      	lsls	r1, r3, #5
 8004bd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bd8:	0150      	lsls	r0, r2, #5
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	4621      	mov	r1, r4
 8004be0:	1a51      	subs	r1, r2, r1
 8004be2:	6139      	str	r1, [r7, #16]
 8004be4:	4629      	mov	r1, r5
 8004be6:	eb63 0301 	sbc.w	r3, r3, r1
 8004bea:	617b      	str	r3, [r7, #20]
 8004bec:	f04f 0200 	mov.w	r2, #0
 8004bf0:	f04f 0300 	mov.w	r3, #0
 8004bf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bf8:	4659      	mov	r1, fp
 8004bfa:	018b      	lsls	r3, r1, #6
 8004bfc:	4651      	mov	r1, sl
 8004bfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c02:	4651      	mov	r1, sl
 8004c04:	018a      	lsls	r2, r1, #6
 8004c06:	4651      	mov	r1, sl
 8004c08:	ebb2 0801 	subs.w	r8, r2, r1
 8004c0c:	4659      	mov	r1, fp
 8004c0e:	eb63 0901 	sbc.w	r9, r3, r1
 8004c12:	f04f 0200 	mov.w	r2, #0
 8004c16:	f04f 0300 	mov.w	r3, #0
 8004c1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c26:	4690      	mov	r8, r2
 8004c28:	4699      	mov	r9, r3
 8004c2a:	4623      	mov	r3, r4
 8004c2c:	eb18 0303 	adds.w	r3, r8, r3
 8004c30:	60bb      	str	r3, [r7, #8]
 8004c32:	462b      	mov	r3, r5
 8004c34:	eb49 0303 	adc.w	r3, r9, r3
 8004c38:	60fb      	str	r3, [r7, #12]
 8004c3a:	f04f 0200 	mov.w	r2, #0
 8004c3e:	f04f 0300 	mov.w	r3, #0
 8004c42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c46:	4629      	mov	r1, r5
 8004c48:	024b      	lsls	r3, r1, #9
 8004c4a:	4621      	mov	r1, r4
 8004c4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c50:	4621      	mov	r1, r4
 8004c52:	024a      	lsls	r2, r1, #9
 8004c54:	4610      	mov	r0, r2
 8004c56:	4619      	mov	r1, r3
 8004c58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c64:	f7fb fb36 	bl	80002d4 <__aeabi_uldivmod>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c70:	e058      	b.n	8004d24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c72:	4b38      	ldr	r3, [pc, #224]	; (8004d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	099b      	lsrs	r3, r3, #6
 8004c78:	2200      	movs	r2, #0
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	4611      	mov	r1, r2
 8004c7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c82:	623b      	str	r3, [r7, #32]
 8004c84:	2300      	movs	r3, #0
 8004c86:	627b      	str	r3, [r7, #36]	; 0x24
 8004c88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c8c:	4642      	mov	r2, r8
 8004c8e:	464b      	mov	r3, r9
 8004c90:	f04f 0000 	mov.w	r0, #0
 8004c94:	f04f 0100 	mov.w	r1, #0
 8004c98:	0159      	lsls	r1, r3, #5
 8004c9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c9e:	0150      	lsls	r0, r2, #5
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	4641      	mov	r1, r8
 8004ca6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004caa:	4649      	mov	r1, r9
 8004cac:	eb63 0b01 	sbc.w	fp, r3, r1
 8004cb0:	f04f 0200 	mov.w	r2, #0
 8004cb4:	f04f 0300 	mov.w	r3, #0
 8004cb8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004cbc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004cc0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004cc4:	ebb2 040a 	subs.w	r4, r2, sl
 8004cc8:	eb63 050b 	sbc.w	r5, r3, fp
 8004ccc:	f04f 0200 	mov.w	r2, #0
 8004cd0:	f04f 0300 	mov.w	r3, #0
 8004cd4:	00eb      	lsls	r3, r5, #3
 8004cd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cda:	00e2      	lsls	r2, r4, #3
 8004cdc:	4614      	mov	r4, r2
 8004cde:	461d      	mov	r5, r3
 8004ce0:	4643      	mov	r3, r8
 8004ce2:	18e3      	adds	r3, r4, r3
 8004ce4:	603b      	str	r3, [r7, #0]
 8004ce6:	464b      	mov	r3, r9
 8004ce8:	eb45 0303 	adc.w	r3, r5, r3
 8004cec:	607b      	str	r3, [r7, #4]
 8004cee:	f04f 0200 	mov.w	r2, #0
 8004cf2:	f04f 0300 	mov.w	r3, #0
 8004cf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cfa:	4629      	mov	r1, r5
 8004cfc:	028b      	lsls	r3, r1, #10
 8004cfe:	4621      	mov	r1, r4
 8004d00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d04:	4621      	mov	r1, r4
 8004d06:	028a      	lsls	r2, r1, #10
 8004d08:	4610      	mov	r0, r2
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d0e:	2200      	movs	r2, #0
 8004d10:	61bb      	str	r3, [r7, #24]
 8004d12:	61fa      	str	r2, [r7, #28]
 8004d14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d18:	f7fb fadc 	bl	80002d4 <__aeabi_uldivmod>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	4613      	mov	r3, r2
 8004d22:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004d24:	4b0b      	ldr	r3, [pc, #44]	; (8004d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	0c1b      	lsrs	r3, r3, #16
 8004d2a:	f003 0303 	and.w	r3, r3, #3
 8004d2e:	3301      	adds	r3, #1
 8004d30:	005b      	lsls	r3, r3, #1
 8004d32:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004d34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d3e:	e002      	b.n	8004d46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d40:	4b05      	ldr	r3, [pc, #20]	; (8004d58 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3750      	adds	r7, #80	; 0x50
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d52:	bf00      	nop
 8004d54:	40023800 	.word	0x40023800
 8004d58:	00f42400 	.word	0x00f42400
 8004d5c:	007a1200 	.word	0x007a1200

08004d60 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d60:	b480      	push	{r7}
 8004d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d64:	4b03      	ldr	r3, [pc, #12]	; (8004d74 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d66:	681b      	ldr	r3, [r3, #0]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	20000004 	.word	0x20000004

08004d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d7c:	f7ff fff0 	bl	8004d60 <HAL_RCC_GetHCLKFreq>
 8004d80:	4602      	mov	r2, r0
 8004d82:	4b05      	ldr	r3, [pc, #20]	; (8004d98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	0a9b      	lsrs	r3, r3, #10
 8004d88:	f003 0307 	and.w	r3, r3, #7
 8004d8c:	4903      	ldr	r1, [pc, #12]	; (8004d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d8e:	5ccb      	ldrb	r3, [r1, r3]
 8004d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	40023800 	.word	0x40023800
 8004d9c:	0800b63c 	.word	0x0800b63c

08004da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004da4:	f7ff ffdc 	bl	8004d60 <HAL_RCC_GetHCLKFreq>
 8004da8:	4602      	mov	r2, r0
 8004daa:	4b05      	ldr	r3, [pc, #20]	; (8004dc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	0b5b      	lsrs	r3, r3, #13
 8004db0:	f003 0307 	and.w	r3, r3, #7
 8004db4:	4903      	ldr	r1, [pc, #12]	; (8004dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004db6:	5ccb      	ldrb	r3, [r1, r3]
 8004db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	40023800 	.word	0x40023800
 8004dc4:	0800b63c 	.word	0x0800b63c

08004dc8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	220f      	movs	r2, #15
 8004dd6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004dd8:	4b12      	ldr	r3, [pc, #72]	; (8004e24 <HAL_RCC_GetClockConfig+0x5c>)
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f003 0203 	and.w	r2, r3, #3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004de4:	4b0f      	ldr	r3, [pc, #60]	; (8004e24 <HAL_RCC_GetClockConfig+0x5c>)
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004df0:	4b0c      	ldr	r3, [pc, #48]	; (8004e24 <HAL_RCC_GetClockConfig+0x5c>)
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004dfc:	4b09      	ldr	r3, [pc, #36]	; (8004e24 <HAL_RCC_GetClockConfig+0x5c>)
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	08db      	lsrs	r3, r3, #3
 8004e02:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004e0a:	4b07      	ldr	r3, [pc, #28]	; (8004e28 <HAL_RCC_GetClockConfig+0x60>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 020f 	and.w	r2, r3, #15
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	601a      	str	r2, [r3, #0]
}
 8004e16:	bf00      	nop
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	40023800 	.word	0x40023800
 8004e28:	40023c00 	.word	0x40023c00

08004e2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b088      	sub	sp, #32
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004e34:	2300      	movs	r3, #0
 8004e36:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004e40:	2300      	movs	r3, #0
 8004e42:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004e44:	2300      	movs	r3, #0
 8004e46:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d012      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e54:	4b69      	ldr	r3, [pc, #420]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	4a68      	ldr	r2, [pc, #416]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e5a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004e5e:	6093      	str	r3, [r2, #8]
 8004e60:	4b66      	ldr	r3, [pc, #408]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e62:	689a      	ldr	r2, [r3, #8]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e68:	4964      	ldr	r1, [pc, #400]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004e76:	2301      	movs	r3, #1
 8004e78:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d017      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e86:	4b5d      	ldr	r3, [pc, #372]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e94:	4959      	ldr	r1, [pc, #356]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ea4:	d101      	bne.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d017      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ec2:	4b4e      	ldr	r3, [pc, #312]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ec8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed0:	494a      	ldr	r1, [pc, #296]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004edc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ee0:	d101      	bne.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004efe:	2301      	movs	r3, #1
 8004f00:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0320 	and.w	r3, r3, #32
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f000 808b 	beq.w	8005026 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f10:	4b3a      	ldr	r3, [pc, #232]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f14:	4a39      	ldr	r2, [pc, #228]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f1a:	6413      	str	r3, [r2, #64]	; 0x40
 8004f1c:	4b37      	ldr	r3, [pc, #220]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f24:	60bb      	str	r3, [r7, #8]
 8004f26:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f28:	4b35      	ldr	r3, [pc, #212]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a34      	ldr	r2, [pc, #208]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f34:	f7fd fe88 	bl	8002c48 <HAL_GetTick>
 8004f38:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004f3a:	e008      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f3c:	f7fd fe84 	bl	8002c48 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b64      	cmp	r3, #100	; 0x64
 8004f48:	d901      	bls.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e38f      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004f4e:	4b2c      	ldr	r3, [pc, #176]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d0f0      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f5a:	4b28      	ldr	r3, [pc, #160]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f62:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d035      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d02e      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f78:	4b20      	ldr	r3, [pc, #128]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f80:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f82:	4b1e      	ldr	r3, [pc, #120]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f86:	4a1d      	ldr	r2, [pc, #116]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f8c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f8e:	4b1b      	ldr	r3, [pc, #108]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f92:	4a1a      	ldr	r2, [pc, #104]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f98:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004f9a:	4a18      	ldr	r2, [pc, #96]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004fa0:	4b16      	ldr	r3, [pc, #88]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d114      	bne.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fac:	f7fd fe4c 	bl	8002c48 <HAL_GetTick>
 8004fb0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fb2:	e00a      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fb4:	f7fd fe48 	bl	8002c48 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e351      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fca:	4b0c      	ldr	r3, [pc, #48]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d0ee      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fe2:	d111      	bne.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004fe4:	4b05      	ldr	r3, [pc, #20]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ff0:	4b04      	ldr	r3, [pc, #16]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ff2:	400b      	ands	r3, r1
 8004ff4:	4901      	ldr	r1, [pc, #4]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	608b      	str	r3, [r1, #8]
 8004ffa:	e00b      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004ffc:	40023800 	.word	0x40023800
 8005000:	40007000 	.word	0x40007000
 8005004:	0ffffcff 	.word	0x0ffffcff
 8005008:	4bac      	ldr	r3, [pc, #688]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	4aab      	ldr	r2, [pc, #684]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800500e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005012:	6093      	str	r3, [r2, #8]
 8005014:	4ba9      	ldr	r3, [pc, #676]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005016:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005020:	49a6      	ldr	r1, [pc, #664]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005022:	4313      	orrs	r3, r2
 8005024:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0310 	and.w	r3, r3, #16
 800502e:	2b00      	cmp	r3, #0
 8005030:	d010      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005032:	4ba2      	ldr	r3, [pc, #648]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005034:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005038:	4aa0      	ldr	r2, [pc, #640]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800503a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800503e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005042:	4b9e      	ldr	r3, [pc, #632]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005044:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504c:	499b      	ldr	r1, [pc, #620]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800504e:	4313      	orrs	r3, r2
 8005050:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00a      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005060:	4b96      	ldr	r3, [pc, #600]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005066:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800506e:	4993      	ldr	r1, [pc, #588]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005070:	4313      	orrs	r3, r2
 8005072:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00a      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005082:	4b8e      	ldr	r3, [pc, #568]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005088:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005090:	498a      	ldr	r1, [pc, #552]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005092:	4313      	orrs	r3, r2
 8005094:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00a      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050a4:	4b85      	ldr	r3, [pc, #532]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050b2:	4982      	ldr	r1, [pc, #520]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00a      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80050c6:	4b7d      	ldr	r3, [pc, #500]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d4:	4979      	ldr	r1, [pc, #484]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00a      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050e8:	4b74      	ldr	r3, [pc, #464]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ee:	f023 0203 	bic.w	r2, r3, #3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f6:	4971      	ldr	r1, [pc, #452]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00a      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800510a:	4b6c      	ldr	r3, [pc, #432]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800510c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005110:	f023 020c 	bic.w	r2, r3, #12
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005118:	4968      	ldr	r1, [pc, #416]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800511a:	4313      	orrs	r3, r2
 800511c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00a      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800512c:	4b63      	ldr	r3, [pc, #396]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800512e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005132:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800513a:	4960      	ldr	r1, [pc, #384]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800513c:	4313      	orrs	r3, r2
 800513e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00a      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800514e:	4b5b      	ldr	r3, [pc, #364]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005154:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800515c:	4957      	ldr	r1, [pc, #348]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800515e:	4313      	orrs	r3, r2
 8005160:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00a      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005170:	4b52      	ldr	r3, [pc, #328]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005176:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800517e:	494f      	ldr	r1, [pc, #316]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005180:	4313      	orrs	r3, r2
 8005182:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00a      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005192:	4b4a      	ldr	r3, [pc, #296]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005198:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a0:	4946      	ldr	r1, [pc, #280]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00a      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80051b4:	4b41      	ldr	r3, [pc, #260]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c2:	493e      	ldr	r1, [pc, #248]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00a      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80051d6:	4b39      	ldr	r3, [pc, #228]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051e4:	4935      	ldr	r1, [pc, #212]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00a      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80051f8:	4b30      	ldr	r3, [pc, #192]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051fe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005206:	492d      	ldr	r1, [pc, #180]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005208:	4313      	orrs	r3, r2
 800520a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d011      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800521a:	4b28      	ldr	r3, [pc, #160]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800521c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005220:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005228:	4924      	ldr	r1, [pc, #144]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800522a:	4313      	orrs	r3, r2
 800522c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005234:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005238:	d101      	bne.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800523a:	2301      	movs	r3, #1
 800523c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0308 	and.w	r3, r3, #8
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800524a:	2301      	movs	r3, #1
 800524c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00a      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800525a:	4b18      	ldr	r3, [pc, #96]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800525c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005260:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005268:	4914      	ldr	r1, [pc, #80]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800526a:	4313      	orrs	r3, r2
 800526c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00b      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800527c:	4b0f      	ldr	r3, [pc, #60]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800527e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005282:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800528c:	490b      	ldr	r1, [pc, #44]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800528e:	4313      	orrs	r3, r2
 8005290:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00f      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80052a0:	4b06      	ldr	r3, [pc, #24]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052b0:	4902      	ldr	r1, [pc, #8]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80052b8:	e002      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80052ba:	bf00      	nop
 80052bc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00b      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80052cc:	4b8a      	ldr	r3, [pc, #552]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052d2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052dc:	4986      	ldr	r1, [pc, #536]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00b      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80052f0:	4b81      	ldr	r3, [pc, #516]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052f6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005300:	497d      	ldr	r1, [pc, #500]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005302:	4313      	orrs	r3, r2
 8005304:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d006      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005316:	2b00      	cmp	r3, #0
 8005318:	f000 80d6 	beq.w	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800531c:	4b76      	ldr	r3, [pc, #472]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a75      	ldr	r2, [pc, #468]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005322:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005326:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005328:	f7fd fc8e 	bl	8002c48 <HAL_GetTick>
 800532c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800532e:	e008      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005330:	f7fd fc8a 	bl	8002c48 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b64      	cmp	r3, #100	; 0x64
 800533c:	d901      	bls.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e195      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005342:	4b6d      	ldr	r3, [pc, #436]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1f0      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b00      	cmp	r3, #0
 8005358:	d021      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800535e:	2b00      	cmp	r3, #0
 8005360:	d11d      	bne.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005362:	4b65      	ldr	r3, [pc, #404]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005368:	0c1b      	lsrs	r3, r3, #16
 800536a:	f003 0303 	and.w	r3, r3, #3
 800536e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005370:	4b61      	ldr	r3, [pc, #388]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005372:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005376:	0e1b      	lsrs	r3, r3, #24
 8005378:	f003 030f 	and.w	r3, r3, #15
 800537c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	019a      	lsls	r2, r3, #6
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	041b      	lsls	r3, r3, #16
 8005388:	431a      	orrs	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	061b      	lsls	r3, r3, #24
 800538e:	431a      	orrs	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	071b      	lsls	r3, r3, #28
 8005396:	4958      	ldr	r1, [pc, #352]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005398:	4313      	orrs	r3, r2
 800539a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d004      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053b2:	d00a      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d02e      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053c8:	d129      	bne.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80053ca:	4b4b      	ldr	r3, [pc, #300]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053d0:	0c1b      	lsrs	r3, r3, #16
 80053d2:	f003 0303 	and.w	r3, r3, #3
 80053d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80053d8:	4b47      	ldr	r3, [pc, #284]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053de:	0f1b      	lsrs	r3, r3, #28
 80053e0:	f003 0307 	and.w	r3, r3, #7
 80053e4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	019a      	lsls	r2, r3, #6
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	041b      	lsls	r3, r3, #16
 80053f0:	431a      	orrs	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	061b      	lsls	r3, r3, #24
 80053f8:	431a      	orrs	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	071b      	lsls	r3, r3, #28
 80053fe:	493e      	ldr	r1, [pc, #248]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005400:	4313      	orrs	r3, r2
 8005402:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005406:	4b3c      	ldr	r3, [pc, #240]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005408:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800540c:	f023 021f 	bic.w	r2, r3, #31
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005414:	3b01      	subs	r3, #1
 8005416:	4938      	ldr	r1, [pc, #224]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005418:	4313      	orrs	r3, r2
 800541a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d01d      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800542a:	4b33      	ldr	r3, [pc, #204]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800542c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005430:	0e1b      	lsrs	r3, r3, #24
 8005432:	f003 030f 	and.w	r3, r3, #15
 8005436:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005438:	4b2f      	ldr	r3, [pc, #188]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800543a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800543e:	0f1b      	lsrs	r3, r3, #28
 8005440:	f003 0307 	and.w	r3, r3, #7
 8005444:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	019a      	lsls	r2, r3, #6
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	041b      	lsls	r3, r3, #16
 8005452:	431a      	orrs	r2, r3
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	061b      	lsls	r3, r3, #24
 8005458:	431a      	orrs	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	071b      	lsls	r3, r3, #28
 800545e:	4926      	ldr	r1, [pc, #152]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005460:	4313      	orrs	r3, r2
 8005462:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d011      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	019a      	lsls	r2, r3, #6
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	041b      	lsls	r3, r3, #16
 800547e:	431a      	orrs	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	061b      	lsls	r3, r3, #24
 8005486:	431a      	orrs	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	071b      	lsls	r3, r3, #28
 800548e:	491a      	ldr	r1, [pc, #104]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005490:	4313      	orrs	r3, r2
 8005492:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005496:	4b18      	ldr	r3, [pc, #96]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a17      	ldr	r2, [pc, #92]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800549c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054a2:	f7fd fbd1 	bl	8002c48 <HAL_GetTick>
 80054a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054a8:	e008      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80054aa:	f7fd fbcd 	bl	8002c48 <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	2b64      	cmp	r3, #100	; 0x64
 80054b6:	d901      	bls.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e0d8      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054bc:	4b0e      	ldr	r3, [pc, #56]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d0f0      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	f040 80ce 	bne.w	800566c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80054d0:	4b09      	ldr	r3, [pc, #36]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a08      	ldr	r2, [pc, #32]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054dc:	f7fd fbb4 	bl	8002c48 <HAL_GetTick>
 80054e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80054e2:	e00b      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80054e4:	f7fd fbb0 	bl	8002c48 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b64      	cmp	r3, #100	; 0x64
 80054f0:	d904      	bls.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e0bb      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80054f6:	bf00      	nop
 80054f8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80054fc:	4b5e      	ldr	r3, [pc, #376]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005504:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005508:	d0ec      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800551a:	2b00      	cmp	r3, #0
 800551c:	d009      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005526:	2b00      	cmp	r3, #0
 8005528:	d02e      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552e:	2b00      	cmp	r3, #0
 8005530:	d12a      	bne.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005532:	4b51      	ldr	r3, [pc, #324]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005538:	0c1b      	lsrs	r3, r3, #16
 800553a:	f003 0303 	and.w	r3, r3, #3
 800553e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005540:	4b4d      	ldr	r3, [pc, #308]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005546:	0f1b      	lsrs	r3, r3, #28
 8005548:	f003 0307 	and.w	r3, r3, #7
 800554c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	019a      	lsls	r2, r3, #6
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	041b      	lsls	r3, r3, #16
 8005558:	431a      	orrs	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	061b      	lsls	r3, r3, #24
 8005560:	431a      	orrs	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	071b      	lsls	r3, r3, #28
 8005566:	4944      	ldr	r1, [pc, #272]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005568:	4313      	orrs	r3, r2
 800556a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800556e:	4b42      	ldr	r3, [pc, #264]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005574:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557c:	3b01      	subs	r3, #1
 800557e:	021b      	lsls	r3, r3, #8
 8005580:	493d      	ldr	r1, [pc, #244]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005582:	4313      	orrs	r3, r2
 8005584:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d022      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005598:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800559c:	d11d      	bne.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800559e:	4b36      	ldr	r3, [pc, #216]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055a4:	0e1b      	lsrs	r3, r3, #24
 80055a6:	f003 030f 	and.w	r3, r3, #15
 80055aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80055ac:	4b32      	ldr	r3, [pc, #200]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b2:	0f1b      	lsrs	r3, r3, #28
 80055b4:	f003 0307 	and.w	r3, r3, #7
 80055b8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	019a      	lsls	r2, r3, #6
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a1b      	ldr	r3, [r3, #32]
 80055c4:	041b      	lsls	r3, r3, #16
 80055c6:	431a      	orrs	r2, r3
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	061b      	lsls	r3, r3, #24
 80055cc:	431a      	orrs	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	071b      	lsls	r3, r3, #28
 80055d2:	4929      	ldr	r1, [pc, #164]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0308 	and.w	r3, r3, #8
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d028      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80055e6:	4b24      	ldr	r3, [pc, #144]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ec:	0e1b      	lsrs	r3, r3, #24
 80055ee:	f003 030f 	and.w	r3, r3, #15
 80055f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80055f4:	4b20      	ldr	r3, [pc, #128]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055fa:	0c1b      	lsrs	r3, r3, #16
 80055fc:	f003 0303 	and.w	r3, r3, #3
 8005600:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	019a      	lsls	r2, r3, #6
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	041b      	lsls	r3, r3, #16
 800560c:	431a      	orrs	r2, r3
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	061b      	lsls	r3, r3, #24
 8005612:	431a      	orrs	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	69db      	ldr	r3, [r3, #28]
 8005618:	071b      	lsls	r3, r3, #28
 800561a:	4917      	ldr	r1, [pc, #92]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800561c:	4313      	orrs	r3, r2
 800561e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005622:	4b15      	ldr	r3, [pc, #84]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005628:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005630:	4911      	ldr	r1, [pc, #68]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005632:	4313      	orrs	r3, r2
 8005634:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005638:	4b0f      	ldr	r3, [pc, #60]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a0e      	ldr	r2, [pc, #56]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800563e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005642:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005644:	f7fd fb00 	bl	8002c48 <HAL_GetTick>
 8005648:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800564a:	e008      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800564c:	f7fd fafc 	bl	8002c48 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b64      	cmp	r3, #100	; 0x64
 8005658:	d901      	bls.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e007      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800565e:	4b06      	ldr	r3, [pc, #24]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005666:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800566a:	d1ef      	bne.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3720      	adds	r7, #32
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	40023800 	.word	0x40023800

0800567c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e049      	b.n	8005722 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d106      	bne.n	80056a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f841 	bl	800572a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2202      	movs	r2, #2
 80056ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	3304      	adds	r3, #4
 80056b8:	4619      	mov	r1, r3
 80056ba:	4610      	mov	r0, r2
 80056bc:	f000 fa00 	bl	8005ac0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3708      	adds	r7, #8
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800572a:	b480      	push	{r7}
 800572c:	b083      	sub	sp, #12
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005732:	bf00      	nop
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
	...

08005740 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b01      	cmp	r3, #1
 8005752:	d001      	beq.n	8005758 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e054      	b.n	8005802 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2202      	movs	r2, #2
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68da      	ldr	r2, [r3, #12]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f042 0201 	orr.w	r2, r2, #1
 800576e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a26      	ldr	r2, [pc, #152]	; (8005810 <HAL_TIM_Base_Start_IT+0xd0>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d022      	beq.n	80057c0 <HAL_TIM_Base_Start_IT+0x80>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005782:	d01d      	beq.n	80057c0 <HAL_TIM_Base_Start_IT+0x80>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a22      	ldr	r2, [pc, #136]	; (8005814 <HAL_TIM_Base_Start_IT+0xd4>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d018      	beq.n	80057c0 <HAL_TIM_Base_Start_IT+0x80>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a21      	ldr	r2, [pc, #132]	; (8005818 <HAL_TIM_Base_Start_IT+0xd8>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d013      	beq.n	80057c0 <HAL_TIM_Base_Start_IT+0x80>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a1f      	ldr	r2, [pc, #124]	; (800581c <HAL_TIM_Base_Start_IT+0xdc>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d00e      	beq.n	80057c0 <HAL_TIM_Base_Start_IT+0x80>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a1e      	ldr	r2, [pc, #120]	; (8005820 <HAL_TIM_Base_Start_IT+0xe0>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d009      	beq.n	80057c0 <HAL_TIM_Base_Start_IT+0x80>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a1c      	ldr	r2, [pc, #112]	; (8005824 <HAL_TIM_Base_Start_IT+0xe4>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d004      	beq.n	80057c0 <HAL_TIM_Base_Start_IT+0x80>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a1b      	ldr	r2, [pc, #108]	; (8005828 <HAL_TIM_Base_Start_IT+0xe8>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d115      	bne.n	80057ec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689a      	ldr	r2, [r3, #8]
 80057c6:	4b19      	ldr	r3, [pc, #100]	; (800582c <HAL_TIM_Base_Start_IT+0xec>)
 80057c8:	4013      	ands	r3, r2
 80057ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2b06      	cmp	r3, #6
 80057d0:	d015      	beq.n	80057fe <HAL_TIM_Base_Start_IT+0xbe>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057d8:	d011      	beq.n	80057fe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f042 0201 	orr.w	r2, r2, #1
 80057e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ea:	e008      	b.n	80057fe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f042 0201 	orr.w	r2, r2, #1
 80057fa:	601a      	str	r2, [r3, #0]
 80057fc:	e000      	b.n	8005800 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3714      	adds	r7, #20
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	40010000 	.word	0x40010000
 8005814:	40000400 	.word	0x40000400
 8005818:	40000800 	.word	0x40000800
 800581c:	40000c00 	.word	0x40000c00
 8005820:	40010400 	.word	0x40010400
 8005824:	40014000 	.word	0x40014000
 8005828:	40001800 	.word	0x40001800
 800582c:	00010007 	.word	0x00010007

08005830 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	f003 0302 	and.w	r3, r3, #2
 8005842:	2b02      	cmp	r3, #2
 8005844:	d122      	bne.n	800588c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	f003 0302 	and.w	r3, r3, #2
 8005850:	2b02      	cmp	r3, #2
 8005852:	d11b      	bne.n	800588c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f06f 0202 	mvn.w	r2, #2
 800585c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	f003 0303 	and.w	r3, r3, #3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f905 	bl	8005a82 <HAL_TIM_IC_CaptureCallback>
 8005878:	e005      	b.n	8005886 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f8f7 	bl	8005a6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 f908 	bl	8005a96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	f003 0304 	and.w	r3, r3, #4
 8005896:	2b04      	cmp	r3, #4
 8005898:	d122      	bne.n	80058e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f003 0304 	and.w	r3, r3, #4
 80058a4:	2b04      	cmp	r3, #4
 80058a6:	d11b      	bne.n	80058e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f06f 0204 	mvn.w	r2, #4
 80058b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2202      	movs	r2, #2
 80058b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d003      	beq.n	80058ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f8db 	bl	8005a82 <HAL_TIM_IC_CaptureCallback>
 80058cc:	e005      	b.n	80058da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f8cd 	bl	8005a6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f8de 	bl	8005a96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	f003 0308 	and.w	r3, r3, #8
 80058ea:	2b08      	cmp	r3, #8
 80058ec:	d122      	bne.n	8005934 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f003 0308 	and.w	r3, r3, #8
 80058f8:	2b08      	cmp	r3, #8
 80058fa:	d11b      	bne.n	8005934 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f06f 0208 	mvn.w	r2, #8
 8005904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2204      	movs	r2, #4
 800590a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	f003 0303 	and.w	r3, r3, #3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f8b1 	bl	8005a82 <HAL_TIM_IC_CaptureCallback>
 8005920:	e005      	b.n	800592e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f8a3 	bl	8005a6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 f8b4 	bl	8005a96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	f003 0310 	and.w	r3, r3, #16
 800593e:	2b10      	cmp	r3, #16
 8005940:	d122      	bne.n	8005988 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	f003 0310 	and.w	r3, r3, #16
 800594c:	2b10      	cmp	r3, #16
 800594e:	d11b      	bne.n	8005988 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f06f 0210 	mvn.w	r2, #16
 8005958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2208      	movs	r2, #8
 800595e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	69db      	ldr	r3, [r3, #28]
 8005966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800596a:	2b00      	cmp	r3, #0
 800596c:	d003      	beq.n	8005976 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f887 	bl	8005a82 <HAL_TIM_IC_CaptureCallback>
 8005974:	e005      	b.n	8005982 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f879 	bl	8005a6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 f88a 	bl	8005a96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b01      	cmp	r3, #1
 8005994:	d10e      	bne.n	80059b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d107      	bne.n	80059b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f06f 0201 	mvn.w	r2, #1
 80059ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7fc fdbe 	bl	8002530 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059be:	2b80      	cmp	r3, #128	; 0x80
 80059c0:	d10e      	bne.n	80059e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059cc:	2b80      	cmp	r3, #128	; 0x80
 80059ce:	d107      	bne.n	80059e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f91a 	bl	8005c14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059ee:	d10e      	bne.n	8005a0e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059fa:	2b80      	cmp	r3, #128	; 0x80
 80059fc:	d107      	bne.n	8005a0e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 f90d 	bl	8005c28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a18:	2b40      	cmp	r3, #64	; 0x40
 8005a1a:	d10e      	bne.n	8005a3a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a26:	2b40      	cmp	r3, #64	; 0x40
 8005a28:	d107      	bne.n	8005a3a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 f838 	bl	8005aaa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	f003 0320 	and.w	r3, r3, #32
 8005a44:	2b20      	cmp	r3, #32
 8005a46:	d10e      	bne.n	8005a66 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	f003 0320 	and.w	r3, r3, #32
 8005a52:	2b20      	cmp	r3, #32
 8005a54:	d107      	bne.n	8005a66 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f06f 0220 	mvn.w	r2, #32
 8005a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 f8cd 	bl	8005c00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a66:	bf00      	nop
 8005a68:	3708      	adds	r7, #8
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b083      	sub	sp, #12
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a76:	bf00      	nop
 8005a78:	370c      	adds	r7, #12
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b083      	sub	sp, #12
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a8a:	bf00      	nop
 8005a8c:	370c      	adds	r7, #12
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b083      	sub	sp, #12
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a9e:	bf00      	nop
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b083      	sub	sp, #12
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ab2:	bf00      	nop
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
	...

08005ac0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a40      	ldr	r2, [pc, #256]	; (8005bd4 <TIM_Base_SetConfig+0x114>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d013      	beq.n	8005b00 <TIM_Base_SetConfig+0x40>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ade:	d00f      	beq.n	8005b00 <TIM_Base_SetConfig+0x40>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a3d      	ldr	r2, [pc, #244]	; (8005bd8 <TIM_Base_SetConfig+0x118>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d00b      	beq.n	8005b00 <TIM_Base_SetConfig+0x40>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a3c      	ldr	r2, [pc, #240]	; (8005bdc <TIM_Base_SetConfig+0x11c>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d007      	beq.n	8005b00 <TIM_Base_SetConfig+0x40>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a3b      	ldr	r2, [pc, #236]	; (8005be0 <TIM_Base_SetConfig+0x120>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d003      	beq.n	8005b00 <TIM_Base_SetConfig+0x40>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a3a      	ldr	r2, [pc, #232]	; (8005be4 <TIM_Base_SetConfig+0x124>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d108      	bne.n	8005b12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a2f      	ldr	r2, [pc, #188]	; (8005bd4 <TIM_Base_SetConfig+0x114>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d02b      	beq.n	8005b72 <TIM_Base_SetConfig+0xb2>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b20:	d027      	beq.n	8005b72 <TIM_Base_SetConfig+0xb2>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a2c      	ldr	r2, [pc, #176]	; (8005bd8 <TIM_Base_SetConfig+0x118>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d023      	beq.n	8005b72 <TIM_Base_SetConfig+0xb2>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a2b      	ldr	r2, [pc, #172]	; (8005bdc <TIM_Base_SetConfig+0x11c>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d01f      	beq.n	8005b72 <TIM_Base_SetConfig+0xb2>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a2a      	ldr	r2, [pc, #168]	; (8005be0 <TIM_Base_SetConfig+0x120>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d01b      	beq.n	8005b72 <TIM_Base_SetConfig+0xb2>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a29      	ldr	r2, [pc, #164]	; (8005be4 <TIM_Base_SetConfig+0x124>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d017      	beq.n	8005b72 <TIM_Base_SetConfig+0xb2>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a28      	ldr	r2, [pc, #160]	; (8005be8 <TIM_Base_SetConfig+0x128>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d013      	beq.n	8005b72 <TIM_Base_SetConfig+0xb2>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a27      	ldr	r2, [pc, #156]	; (8005bec <TIM_Base_SetConfig+0x12c>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d00f      	beq.n	8005b72 <TIM_Base_SetConfig+0xb2>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a26      	ldr	r2, [pc, #152]	; (8005bf0 <TIM_Base_SetConfig+0x130>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d00b      	beq.n	8005b72 <TIM_Base_SetConfig+0xb2>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a25      	ldr	r2, [pc, #148]	; (8005bf4 <TIM_Base_SetConfig+0x134>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d007      	beq.n	8005b72 <TIM_Base_SetConfig+0xb2>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a24      	ldr	r2, [pc, #144]	; (8005bf8 <TIM_Base_SetConfig+0x138>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d003      	beq.n	8005b72 <TIM_Base_SetConfig+0xb2>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a23      	ldr	r2, [pc, #140]	; (8005bfc <TIM_Base_SetConfig+0x13c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d108      	bne.n	8005b84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	689a      	ldr	r2, [r3, #8]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a0a      	ldr	r2, [pc, #40]	; (8005bd4 <TIM_Base_SetConfig+0x114>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d003      	beq.n	8005bb8 <TIM_Base_SetConfig+0xf8>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a0c      	ldr	r2, [pc, #48]	; (8005be4 <TIM_Base_SetConfig+0x124>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d103      	bne.n	8005bc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	691a      	ldr	r2, [r3, #16]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	615a      	str	r2, [r3, #20]
}
 8005bc6:	bf00      	nop
 8005bc8:	3714      	adds	r7, #20
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	40010000 	.word	0x40010000
 8005bd8:	40000400 	.word	0x40000400
 8005bdc:	40000800 	.word	0x40000800
 8005be0:	40000c00 	.word	0x40000c00
 8005be4:	40010400 	.word	0x40010400
 8005be8:	40014000 	.word	0x40014000
 8005bec:	40014400 	.word	0x40014400
 8005bf0:	40014800 	.word	0x40014800
 8005bf4:	40001800 	.word	0x40001800
 8005bf8:	40001c00 	.word	0x40001c00
 8005bfc:	40002000 	.word	0x40002000

08005c00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d101      	bne.n	8005c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e040      	b.n	8005cd0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d106      	bne.n	8005c64 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7fc fd5e 	bl	8002720 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2224      	movs	r2, #36	; 0x24
 8005c68:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f022 0201 	bic.w	r2, r2, #1
 8005c78:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 fc1a 	bl	80064b4 <UART_SetConfig>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d101      	bne.n	8005c8a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e022      	b.n	8005cd0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d002      	beq.n	8005c98 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 fe72 	bl	800697c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ca6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689a      	ldr	r2, [r3, #8]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f042 0201 	orr.w	r2, r2, #1
 8005cc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 fef9 	bl	8006ac0 <UART_CheckIdleState>
 8005cce:	4603      	mov	r3, r0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3708      	adds	r7, #8
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b08a      	sub	sp, #40	; 0x28
 8005cdc:	af02      	add	r7, sp, #8
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	603b      	str	r3, [r7, #0]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cec:	2b20      	cmp	r3, #32
 8005cee:	d171      	bne.n	8005dd4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d002      	beq.n	8005cfc <HAL_UART_Transmit+0x24>
 8005cf6:	88fb      	ldrh	r3, [r7, #6]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d101      	bne.n	8005d00 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e06a      	b.n	8005dd6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2221      	movs	r2, #33	; 0x21
 8005d0c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d0e:	f7fc ff9b 	bl	8002c48 <HAL_GetTick>
 8005d12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	88fa      	ldrh	r2, [r7, #6]
 8005d18:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	88fa      	ldrh	r2, [r7, #6]
 8005d20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d2c:	d108      	bne.n	8005d40 <HAL_UART_Transmit+0x68>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d104      	bne.n	8005d40 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005d36:	2300      	movs	r3, #0
 8005d38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	61bb      	str	r3, [r7, #24]
 8005d3e:	e003      	b.n	8005d48 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d44:	2300      	movs	r3, #0
 8005d46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d48:	e02c      	b.n	8005da4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	2200      	movs	r2, #0
 8005d52:	2180      	movs	r1, #128	; 0x80
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f000 ff00 	bl	8006b5a <UART_WaitOnFlagUntilTimeout>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d001      	beq.n	8005d64 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e038      	b.n	8005dd6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10b      	bne.n	8005d82 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	881b      	ldrh	r3, [r3, #0]
 8005d6e:	461a      	mov	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d78:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	3302      	adds	r3, #2
 8005d7e:	61bb      	str	r3, [r7, #24]
 8005d80:	e007      	b.n	8005d92 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	781a      	ldrb	r2, [r3, #0]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d1cc      	bne.n	8005d4a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	9300      	str	r3, [sp, #0]
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	2200      	movs	r2, #0
 8005db8:	2140      	movs	r1, #64	; 0x40
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f000 fecd 	bl	8006b5a <UART_WaitOnFlagUntilTimeout>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d001      	beq.n	8005dca <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e005      	b.n	8005dd6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2220      	movs	r2, #32
 8005dce:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	e000      	b.n	8005dd6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005dd4:	2302      	movs	r3, #2
  }
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3720      	adds	r7, #32
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b08a      	sub	sp, #40	; 0x28
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	60f8      	str	r0, [r7, #12]
 8005de6:	60b9      	str	r1, [r7, #8]
 8005de8:	4613      	mov	r3, r2
 8005dea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005df2:	2b20      	cmp	r3, #32
 8005df4:	d132      	bne.n	8005e5c <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d002      	beq.n	8005e02 <HAL_UART_Receive_DMA+0x24>
 8005dfc:	88fb      	ldrh	r3, [r7, #6]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d101      	bne.n	8005e06 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e02b      	b.n	8005e5e <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d018      	beq.n	8005e4c <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	e853 3f00 	ldrex	r3, [r3]
 8005e26:	613b      	str	r3, [r7, #16]
   return(result);
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	461a      	mov	r2, r3
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e38:	623b      	str	r3, [r7, #32]
 8005e3a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3c:	69f9      	ldr	r1, [r7, #28]
 8005e3e:	6a3a      	ldr	r2, [r7, #32]
 8005e40:	e841 2300 	strex	r3, r2, [r1]
 8005e44:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1e6      	bne.n	8005e1a <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005e4c:	88fb      	ldrh	r3, [r7, #6]
 8005e4e:	461a      	mov	r2, r3
 8005e50:	68b9      	ldr	r1, [r7, #8]
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f000 ff48 	bl	8006ce8 <UART_Start_Receive_DMA>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	e000      	b.n	8005e5e <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005e5c:	2302      	movs	r3, #2
  }
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3728      	adds	r7, #40	; 0x28
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
	...

08005e68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b0ba      	sub	sp, #232	; 0xe8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005e92:	f640 030f 	movw	r3, #2063	; 0x80f
 8005e96:	4013      	ands	r3, r2
 8005e98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005e9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d115      	bne.n	8005ed0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ea8:	f003 0320 	and.w	r3, r3, #32
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00f      	beq.n	8005ed0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eb4:	f003 0320 	and.w	r3, r3, #32
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d009      	beq.n	8005ed0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f000 82ac 	beq.w	800641e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	4798      	blx	r3
      }
      return;
 8005ece:	e2a6      	b.n	800641e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005ed0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f000 8117 	beq.w	8006108 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005eda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d106      	bne.n	8005ef4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005ee6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005eea:	4b85      	ldr	r3, [pc, #532]	; (8006100 <HAL_UART_IRQHandler+0x298>)
 8005eec:	4013      	ands	r3, r2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f000 810a 	beq.w	8006108 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ef8:	f003 0301 	and.w	r3, r3, #1
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d011      	beq.n	8005f24 <HAL_UART_IRQHandler+0xbc>
 8005f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00b      	beq.n	8005f24 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2201      	movs	r2, #1
 8005f12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f1a:	f043 0201 	orr.w	r2, r3, #1
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d011      	beq.n	8005f54 <HAL_UART_IRQHandler+0xec>
 8005f30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f34:	f003 0301 	and.w	r3, r3, #1
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00b      	beq.n	8005f54 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2202      	movs	r2, #2
 8005f42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f4a:	f043 0204 	orr.w	r2, r3, #4
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f58:	f003 0304 	and.w	r3, r3, #4
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d011      	beq.n	8005f84 <HAL_UART_IRQHandler+0x11c>
 8005f60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00b      	beq.n	8005f84 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2204      	movs	r2, #4
 8005f72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f7a:	f043 0202 	orr.w	r2, r3, #2
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f88:	f003 0308 	and.w	r3, r3, #8
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d017      	beq.n	8005fc0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f94:	f003 0320 	and.w	r3, r3, #32
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d105      	bne.n	8005fa8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005f9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fa0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00b      	beq.n	8005fc0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2208      	movs	r2, #8
 8005fae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fb6:	f043 0208 	orr.w	r2, r3, #8
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d012      	beq.n	8005ff2 <HAL_UART_IRQHandler+0x18a>
 8005fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00c      	beq.n	8005ff2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fe0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fe8:	f043 0220 	orr.w	r2, r3, #32
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f000 8212 	beq.w	8006422 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006002:	f003 0320 	and.w	r3, r3, #32
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00d      	beq.n	8006026 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800600a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800600e:	f003 0320 	and.w	r3, r3, #32
 8006012:	2b00      	cmp	r3, #0
 8006014:	d007      	beq.n	8006026 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800602c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603a:	2b40      	cmp	r3, #64	; 0x40
 800603c:	d005      	beq.n	800604a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800603e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006042:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006046:	2b00      	cmp	r3, #0
 8006048:	d04f      	beq.n	80060ea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 ff12 	bl	8006e74 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800605a:	2b40      	cmp	r3, #64	; 0x40
 800605c:	d141      	bne.n	80060e2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	3308      	adds	r3, #8
 8006064:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006068:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800606c:	e853 3f00 	ldrex	r3, [r3]
 8006070:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006074:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006078:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800607c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	3308      	adds	r3, #8
 8006086:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800608a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800608e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006092:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006096:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800609a:	e841 2300 	strex	r3, r2, [r1]
 800609e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80060a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1d9      	bne.n	800605e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d013      	beq.n	80060da <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060b6:	4a13      	ldr	r2, [pc, #76]	; (8006104 <HAL_UART_IRQHandler+0x29c>)
 80060b8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060be:	4618      	mov	r0, r3
 80060c0:	f7fd f88d 	bl	80031de <HAL_DMA_Abort_IT>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d017      	beq.n	80060fa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80060d4:	4610      	mov	r0, r2
 80060d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d8:	e00f      	b.n	80060fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f9ca 	bl	8006474 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e0:	e00b      	b.n	80060fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f9c6 	bl	8006474 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e8:	e007      	b.n	80060fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 f9c2 	bl	8006474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80060f8:	e193      	b.n	8006422 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060fa:	bf00      	nop
    return;
 80060fc:	e191      	b.n	8006422 <HAL_UART_IRQHandler+0x5ba>
 80060fe:	bf00      	nop
 8006100:	04000120 	.word	0x04000120
 8006104:	08007121 	.word	0x08007121

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800610c:	2b01      	cmp	r3, #1
 800610e:	f040 814c 	bne.w	80063aa <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006116:	f003 0310 	and.w	r3, r3, #16
 800611a:	2b00      	cmp	r3, #0
 800611c:	f000 8145 	beq.w	80063aa <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006124:	f003 0310 	and.w	r3, r3, #16
 8006128:	2b00      	cmp	r3, #0
 800612a:	f000 813e 	beq.w	80063aa <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2210      	movs	r2, #16
 8006134:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006140:	2b40      	cmp	r3, #64	; 0x40
 8006142:	f040 80b6 	bne.w	80062b2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006152:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006156:	2b00      	cmp	r3, #0
 8006158:	f000 8165 	beq.w	8006426 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006162:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006166:	429a      	cmp	r2, r3
 8006168:	f080 815d 	bcs.w	8006426 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006172:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800617a:	69db      	ldr	r3, [r3, #28]
 800617c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006180:	f000 8086 	beq.w	8006290 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006190:	e853 3f00 	ldrex	r3, [r3]
 8006194:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006198:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800619c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	461a      	mov	r2, r3
 80061aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80061b2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80061ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80061be:	e841 2300 	strex	r3, r2, [r1]
 80061c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80061c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1da      	bne.n	8006184 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	3308      	adds	r3, #8
 80061d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061d8:	e853 3f00 	ldrex	r3, [r3]
 80061dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80061de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061e0:	f023 0301 	bic.w	r3, r3, #1
 80061e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	3308      	adds	r3, #8
 80061ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80061f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80061f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80061fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80061fe:	e841 2300 	strex	r3, r2, [r1]
 8006202:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006204:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1e1      	bne.n	80061ce <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	3308      	adds	r3, #8
 8006210:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006212:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006214:	e853 3f00 	ldrex	r3, [r3]
 8006218:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800621a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800621c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006220:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	3308      	adds	r3, #8
 800622a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800622e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006230:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006232:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006234:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006236:	e841 2300 	strex	r3, r2, [r1]
 800623a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800623c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1e3      	bne.n	800620a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2220      	movs	r2, #32
 8006246:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006258:	e853 3f00 	ldrex	r3, [r3]
 800625c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800625e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006260:	f023 0310 	bic.w	r3, r3, #16
 8006264:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	461a      	mov	r2, r3
 800626e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006272:	65bb      	str	r3, [r7, #88]	; 0x58
 8006274:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006276:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006278:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800627a:	e841 2300 	strex	r3, r2, [r1]
 800627e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1e4      	bne.n	8006250 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800628a:	4618      	mov	r0, r3
 800628c:	f7fc ff37 	bl	80030fe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2202      	movs	r2, #2
 8006294:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	4619      	mov	r1, r3
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f8ec 	bl	8006488 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062b0:	e0b9      	b.n	8006426 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062be:	b29b      	uxth	r3, r3
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f000 80ab 	beq.w	800642a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80062d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f000 80a6 	beq.w	800642a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e6:	e853 3f00 	ldrex	r3, [r3]
 80062ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80062ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	461a      	mov	r2, r3
 80062fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006300:	647b      	str	r3, [r7, #68]	; 0x44
 8006302:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006304:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006306:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006308:	e841 2300 	strex	r3, r2, [r1]
 800630c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800630e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1e4      	bne.n	80062de <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	3308      	adds	r3, #8
 800631a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631e:	e853 3f00 	ldrex	r3, [r3]
 8006322:	623b      	str	r3, [r7, #32]
   return(result);
 8006324:	6a3b      	ldr	r3, [r7, #32]
 8006326:	f023 0301 	bic.w	r3, r3, #1
 800632a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	3308      	adds	r3, #8
 8006334:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006338:	633a      	str	r2, [r7, #48]	; 0x30
 800633a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800633e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006340:	e841 2300 	strex	r3, r2, [r1]
 8006344:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1e3      	bne.n	8006314 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2220      	movs	r2, #32
 8006350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	e853 3f00 	ldrex	r3, [r3]
 800636c:	60fb      	str	r3, [r7, #12]
   return(result);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f023 0310 	bic.w	r3, r3, #16
 8006374:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	461a      	mov	r2, r3
 800637e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006382:	61fb      	str	r3, [r7, #28]
 8006384:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006386:	69b9      	ldr	r1, [r7, #24]
 8006388:	69fa      	ldr	r2, [r7, #28]
 800638a:	e841 2300 	strex	r3, r2, [r1]
 800638e:	617b      	str	r3, [r7, #20]
   return(result);
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1e4      	bne.n	8006360 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2202      	movs	r2, #2
 800639a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800639c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063a0:	4619      	mov	r1, r3
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f870 	bl	8006488 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80063a8:	e03f      	b.n	800642a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80063aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00e      	beq.n	80063d4 <HAL_UART_IRQHandler+0x56c>
 80063b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d008      	beq.n	80063d4 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80063ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 f867 	bl	80064a0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063d2:	e02d      	b.n	8006430 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80063d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00e      	beq.n	80063fe <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80063e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d008      	beq.n	80063fe <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d01c      	beq.n	800642e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	4798      	blx	r3
    }
    return;
 80063fc:	e017      	b.n	800642e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80063fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006406:	2b00      	cmp	r3, #0
 8006408:	d012      	beq.n	8006430 <HAL_UART_IRQHandler+0x5c8>
 800640a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800640e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00c      	beq.n	8006430 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 fe98 	bl	800714c <UART_EndTransmit_IT>
    return;
 800641c:	e008      	b.n	8006430 <HAL_UART_IRQHandler+0x5c8>
      return;
 800641e:	bf00      	nop
 8006420:	e006      	b.n	8006430 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006422:	bf00      	nop
 8006424:	e004      	b.n	8006430 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006426:	bf00      	nop
 8006428:	e002      	b.n	8006430 <HAL_UART_IRQHandler+0x5c8>
      return;
 800642a:	bf00      	nop
 800642c:	e000      	b.n	8006430 <HAL_UART_IRQHandler+0x5c8>
    return;
 800642e:	bf00      	nop
  }

}
 8006430:	37e8      	adds	r7, #232	; 0xe8
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop

08006438 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006440:	bf00      	nop
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006454:	bf00      	nop
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800647c:	bf00      	nop
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	460b      	mov	r3, r1
 8006492:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006494:	bf00      	nop
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80064a8:	bf00      	nop
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b088      	sub	sp, #32
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064bc:	2300      	movs	r3, #0
 80064be:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	689a      	ldr	r2, [r3, #8]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	431a      	orrs	r2, r3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	431a      	orrs	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	69db      	ldr	r3, [r3, #28]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	4ba6      	ldr	r3, [pc, #664]	; (8006778 <UART_SetConfig+0x2c4>)
 80064e0:	4013      	ands	r3, r2
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	6812      	ldr	r2, [r2, #0]
 80064e6:	6979      	ldr	r1, [r7, #20]
 80064e8:	430b      	orrs	r3, r1
 80064ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	68da      	ldr	r2, [r3, #12]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	430a      	orrs	r2, r1
 8006500:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a1b      	ldr	r3, [r3, #32]
 800650c:	697a      	ldr	r2, [r7, #20]
 800650e:	4313      	orrs	r3, r2
 8006510:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	697a      	ldr	r2, [r7, #20]
 8006522:	430a      	orrs	r2, r1
 8006524:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a94      	ldr	r2, [pc, #592]	; (800677c <UART_SetConfig+0x2c8>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d120      	bne.n	8006572 <UART_SetConfig+0xbe>
 8006530:	4b93      	ldr	r3, [pc, #588]	; (8006780 <UART_SetConfig+0x2cc>)
 8006532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006536:	f003 0303 	and.w	r3, r3, #3
 800653a:	2b03      	cmp	r3, #3
 800653c:	d816      	bhi.n	800656c <UART_SetConfig+0xb8>
 800653e:	a201      	add	r2, pc, #4	; (adr r2, 8006544 <UART_SetConfig+0x90>)
 8006540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006544:	08006555 	.word	0x08006555
 8006548:	08006561 	.word	0x08006561
 800654c:	0800655b 	.word	0x0800655b
 8006550:	08006567 	.word	0x08006567
 8006554:	2301      	movs	r3, #1
 8006556:	77fb      	strb	r3, [r7, #31]
 8006558:	e150      	b.n	80067fc <UART_SetConfig+0x348>
 800655a:	2302      	movs	r3, #2
 800655c:	77fb      	strb	r3, [r7, #31]
 800655e:	e14d      	b.n	80067fc <UART_SetConfig+0x348>
 8006560:	2304      	movs	r3, #4
 8006562:	77fb      	strb	r3, [r7, #31]
 8006564:	e14a      	b.n	80067fc <UART_SetConfig+0x348>
 8006566:	2308      	movs	r3, #8
 8006568:	77fb      	strb	r3, [r7, #31]
 800656a:	e147      	b.n	80067fc <UART_SetConfig+0x348>
 800656c:	2310      	movs	r3, #16
 800656e:	77fb      	strb	r3, [r7, #31]
 8006570:	e144      	b.n	80067fc <UART_SetConfig+0x348>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a83      	ldr	r2, [pc, #524]	; (8006784 <UART_SetConfig+0x2d0>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d132      	bne.n	80065e2 <UART_SetConfig+0x12e>
 800657c:	4b80      	ldr	r3, [pc, #512]	; (8006780 <UART_SetConfig+0x2cc>)
 800657e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006582:	f003 030c 	and.w	r3, r3, #12
 8006586:	2b0c      	cmp	r3, #12
 8006588:	d828      	bhi.n	80065dc <UART_SetConfig+0x128>
 800658a:	a201      	add	r2, pc, #4	; (adr r2, 8006590 <UART_SetConfig+0xdc>)
 800658c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006590:	080065c5 	.word	0x080065c5
 8006594:	080065dd 	.word	0x080065dd
 8006598:	080065dd 	.word	0x080065dd
 800659c:	080065dd 	.word	0x080065dd
 80065a0:	080065d1 	.word	0x080065d1
 80065a4:	080065dd 	.word	0x080065dd
 80065a8:	080065dd 	.word	0x080065dd
 80065ac:	080065dd 	.word	0x080065dd
 80065b0:	080065cb 	.word	0x080065cb
 80065b4:	080065dd 	.word	0x080065dd
 80065b8:	080065dd 	.word	0x080065dd
 80065bc:	080065dd 	.word	0x080065dd
 80065c0:	080065d7 	.word	0x080065d7
 80065c4:	2300      	movs	r3, #0
 80065c6:	77fb      	strb	r3, [r7, #31]
 80065c8:	e118      	b.n	80067fc <UART_SetConfig+0x348>
 80065ca:	2302      	movs	r3, #2
 80065cc:	77fb      	strb	r3, [r7, #31]
 80065ce:	e115      	b.n	80067fc <UART_SetConfig+0x348>
 80065d0:	2304      	movs	r3, #4
 80065d2:	77fb      	strb	r3, [r7, #31]
 80065d4:	e112      	b.n	80067fc <UART_SetConfig+0x348>
 80065d6:	2308      	movs	r3, #8
 80065d8:	77fb      	strb	r3, [r7, #31]
 80065da:	e10f      	b.n	80067fc <UART_SetConfig+0x348>
 80065dc:	2310      	movs	r3, #16
 80065de:	77fb      	strb	r3, [r7, #31]
 80065e0:	e10c      	b.n	80067fc <UART_SetConfig+0x348>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a68      	ldr	r2, [pc, #416]	; (8006788 <UART_SetConfig+0x2d4>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d120      	bne.n	800662e <UART_SetConfig+0x17a>
 80065ec:	4b64      	ldr	r3, [pc, #400]	; (8006780 <UART_SetConfig+0x2cc>)
 80065ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80065f6:	2b30      	cmp	r3, #48	; 0x30
 80065f8:	d013      	beq.n	8006622 <UART_SetConfig+0x16e>
 80065fa:	2b30      	cmp	r3, #48	; 0x30
 80065fc:	d814      	bhi.n	8006628 <UART_SetConfig+0x174>
 80065fe:	2b20      	cmp	r3, #32
 8006600:	d009      	beq.n	8006616 <UART_SetConfig+0x162>
 8006602:	2b20      	cmp	r3, #32
 8006604:	d810      	bhi.n	8006628 <UART_SetConfig+0x174>
 8006606:	2b00      	cmp	r3, #0
 8006608:	d002      	beq.n	8006610 <UART_SetConfig+0x15c>
 800660a:	2b10      	cmp	r3, #16
 800660c:	d006      	beq.n	800661c <UART_SetConfig+0x168>
 800660e:	e00b      	b.n	8006628 <UART_SetConfig+0x174>
 8006610:	2300      	movs	r3, #0
 8006612:	77fb      	strb	r3, [r7, #31]
 8006614:	e0f2      	b.n	80067fc <UART_SetConfig+0x348>
 8006616:	2302      	movs	r3, #2
 8006618:	77fb      	strb	r3, [r7, #31]
 800661a:	e0ef      	b.n	80067fc <UART_SetConfig+0x348>
 800661c:	2304      	movs	r3, #4
 800661e:	77fb      	strb	r3, [r7, #31]
 8006620:	e0ec      	b.n	80067fc <UART_SetConfig+0x348>
 8006622:	2308      	movs	r3, #8
 8006624:	77fb      	strb	r3, [r7, #31]
 8006626:	e0e9      	b.n	80067fc <UART_SetConfig+0x348>
 8006628:	2310      	movs	r3, #16
 800662a:	77fb      	strb	r3, [r7, #31]
 800662c:	e0e6      	b.n	80067fc <UART_SetConfig+0x348>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a56      	ldr	r2, [pc, #344]	; (800678c <UART_SetConfig+0x2d8>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d120      	bne.n	800667a <UART_SetConfig+0x1c6>
 8006638:	4b51      	ldr	r3, [pc, #324]	; (8006780 <UART_SetConfig+0x2cc>)
 800663a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800663e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006642:	2bc0      	cmp	r3, #192	; 0xc0
 8006644:	d013      	beq.n	800666e <UART_SetConfig+0x1ba>
 8006646:	2bc0      	cmp	r3, #192	; 0xc0
 8006648:	d814      	bhi.n	8006674 <UART_SetConfig+0x1c0>
 800664a:	2b80      	cmp	r3, #128	; 0x80
 800664c:	d009      	beq.n	8006662 <UART_SetConfig+0x1ae>
 800664e:	2b80      	cmp	r3, #128	; 0x80
 8006650:	d810      	bhi.n	8006674 <UART_SetConfig+0x1c0>
 8006652:	2b00      	cmp	r3, #0
 8006654:	d002      	beq.n	800665c <UART_SetConfig+0x1a8>
 8006656:	2b40      	cmp	r3, #64	; 0x40
 8006658:	d006      	beq.n	8006668 <UART_SetConfig+0x1b4>
 800665a:	e00b      	b.n	8006674 <UART_SetConfig+0x1c0>
 800665c:	2300      	movs	r3, #0
 800665e:	77fb      	strb	r3, [r7, #31]
 8006660:	e0cc      	b.n	80067fc <UART_SetConfig+0x348>
 8006662:	2302      	movs	r3, #2
 8006664:	77fb      	strb	r3, [r7, #31]
 8006666:	e0c9      	b.n	80067fc <UART_SetConfig+0x348>
 8006668:	2304      	movs	r3, #4
 800666a:	77fb      	strb	r3, [r7, #31]
 800666c:	e0c6      	b.n	80067fc <UART_SetConfig+0x348>
 800666e:	2308      	movs	r3, #8
 8006670:	77fb      	strb	r3, [r7, #31]
 8006672:	e0c3      	b.n	80067fc <UART_SetConfig+0x348>
 8006674:	2310      	movs	r3, #16
 8006676:	77fb      	strb	r3, [r7, #31]
 8006678:	e0c0      	b.n	80067fc <UART_SetConfig+0x348>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a44      	ldr	r2, [pc, #272]	; (8006790 <UART_SetConfig+0x2dc>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d125      	bne.n	80066d0 <UART_SetConfig+0x21c>
 8006684:	4b3e      	ldr	r3, [pc, #248]	; (8006780 <UART_SetConfig+0x2cc>)
 8006686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800668a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800668e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006692:	d017      	beq.n	80066c4 <UART_SetConfig+0x210>
 8006694:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006698:	d817      	bhi.n	80066ca <UART_SetConfig+0x216>
 800669a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800669e:	d00b      	beq.n	80066b8 <UART_SetConfig+0x204>
 80066a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066a4:	d811      	bhi.n	80066ca <UART_SetConfig+0x216>
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d003      	beq.n	80066b2 <UART_SetConfig+0x1fe>
 80066aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066ae:	d006      	beq.n	80066be <UART_SetConfig+0x20a>
 80066b0:	e00b      	b.n	80066ca <UART_SetConfig+0x216>
 80066b2:	2300      	movs	r3, #0
 80066b4:	77fb      	strb	r3, [r7, #31]
 80066b6:	e0a1      	b.n	80067fc <UART_SetConfig+0x348>
 80066b8:	2302      	movs	r3, #2
 80066ba:	77fb      	strb	r3, [r7, #31]
 80066bc:	e09e      	b.n	80067fc <UART_SetConfig+0x348>
 80066be:	2304      	movs	r3, #4
 80066c0:	77fb      	strb	r3, [r7, #31]
 80066c2:	e09b      	b.n	80067fc <UART_SetConfig+0x348>
 80066c4:	2308      	movs	r3, #8
 80066c6:	77fb      	strb	r3, [r7, #31]
 80066c8:	e098      	b.n	80067fc <UART_SetConfig+0x348>
 80066ca:	2310      	movs	r3, #16
 80066cc:	77fb      	strb	r3, [r7, #31]
 80066ce:	e095      	b.n	80067fc <UART_SetConfig+0x348>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a2f      	ldr	r2, [pc, #188]	; (8006794 <UART_SetConfig+0x2e0>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d125      	bne.n	8006726 <UART_SetConfig+0x272>
 80066da:	4b29      	ldr	r3, [pc, #164]	; (8006780 <UART_SetConfig+0x2cc>)
 80066dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80066e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066e8:	d017      	beq.n	800671a <UART_SetConfig+0x266>
 80066ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066ee:	d817      	bhi.n	8006720 <UART_SetConfig+0x26c>
 80066f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066f4:	d00b      	beq.n	800670e <UART_SetConfig+0x25a>
 80066f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066fa:	d811      	bhi.n	8006720 <UART_SetConfig+0x26c>
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d003      	beq.n	8006708 <UART_SetConfig+0x254>
 8006700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006704:	d006      	beq.n	8006714 <UART_SetConfig+0x260>
 8006706:	e00b      	b.n	8006720 <UART_SetConfig+0x26c>
 8006708:	2301      	movs	r3, #1
 800670a:	77fb      	strb	r3, [r7, #31]
 800670c:	e076      	b.n	80067fc <UART_SetConfig+0x348>
 800670e:	2302      	movs	r3, #2
 8006710:	77fb      	strb	r3, [r7, #31]
 8006712:	e073      	b.n	80067fc <UART_SetConfig+0x348>
 8006714:	2304      	movs	r3, #4
 8006716:	77fb      	strb	r3, [r7, #31]
 8006718:	e070      	b.n	80067fc <UART_SetConfig+0x348>
 800671a:	2308      	movs	r3, #8
 800671c:	77fb      	strb	r3, [r7, #31]
 800671e:	e06d      	b.n	80067fc <UART_SetConfig+0x348>
 8006720:	2310      	movs	r3, #16
 8006722:	77fb      	strb	r3, [r7, #31]
 8006724:	e06a      	b.n	80067fc <UART_SetConfig+0x348>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a1b      	ldr	r2, [pc, #108]	; (8006798 <UART_SetConfig+0x2e4>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d138      	bne.n	80067a2 <UART_SetConfig+0x2ee>
 8006730:	4b13      	ldr	r3, [pc, #76]	; (8006780 <UART_SetConfig+0x2cc>)
 8006732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006736:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800673a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800673e:	d017      	beq.n	8006770 <UART_SetConfig+0x2bc>
 8006740:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006744:	d82a      	bhi.n	800679c <UART_SetConfig+0x2e8>
 8006746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800674a:	d00b      	beq.n	8006764 <UART_SetConfig+0x2b0>
 800674c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006750:	d824      	bhi.n	800679c <UART_SetConfig+0x2e8>
 8006752:	2b00      	cmp	r3, #0
 8006754:	d003      	beq.n	800675e <UART_SetConfig+0x2aa>
 8006756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800675a:	d006      	beq.n	800676a <UART_SetConfig+0x2b6>
 800675c:	e01e      	b.n	800679c <UART_SetConfig+0x2e8>
 800675e:	2300      	movs	r3, #0
 8006760:	77fb      	strb	r3, [r7, #31]
 8006762:	e04b      	b.n	80067fc <UART_SetConfig+0x348>
 8006764:	2302      	movs	r3, #2
 8006766:	77fb      	strb	r3, [r7, #31]
 8006768:	e048      	b.n	80067fc <UART_SetConfig+0x348>
 800676a:	2304      	movs	r3, #4
 800676c:	77fb      	strb	r3, [r7, #31]
 800676e:	e045      	b.n	80067fc <UART_SetConfig+0x348>
 8006770:	2308      	movs	r3, #8
 8006772:	77fb      	strb	r3, [r7, #31]
 8006774:	e042      	b.n	80067fc <UART_SetConfig+0x348>
 8006776:	bf00      	nop
 8006778:	efff69f3 	.word	0xefff69f3
 800677c:	40011000 	.word	0x40011000
 8006780:	40023800 	.word	0x40023800
 8006784:	40004400 	.word	0x40004400
 8006788:	40004800 	.word	0x40004800
 800678c:	40004c00 	.word	0x40004c00
 8006790:	40005000 	.word	0x40005000
 8006794:	40011400 	.word	0x40011400
 8006798:	40007800 	.word	0x40007800
 800679c:	2310      	movs	r3, #16
 800679e:	77fb      	strb	r3, [r7, #31]
 80067a0:	e02c      	b.n	80067fc <UART_SetConfig+0x348>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a72      	ldr	r2, [pc, #456]	; (8006970 <UART_SetConfig+0x4bc>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d125      	bne.n	80067f8 <UART_SetConfig+0x344>
 80067ac:	4b71      	ldr	r3, [pc, #452]	; (8006974 <UART_SetConfig+0x4c0>)
 80067ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80067b6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80067ba:	d017      	beq.n	80067ec <UART_SetConfig+0x338>
 80067bc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80067c0:	d817      	bhi.n	80067f2 <UART_SetConfig+0x33e>
 80067c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067c6:	d00b      	beq.n	80067e0 <UART_SetConfig+0x32c>
 80067c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067cc:	d811      	bhi.n	80067f2 <UART_SetConfig+0x33e>
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d003      	beq.n	80067da <UART_SetConfig+0x326>
 80067d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067d6:	d006      	beq.n	80067e6 <UART_SetConfig+0x332>
 80067d8:	e00b      	b.n	80067f2 <UART_SetConfig+0x33e>
 80067da:	2300      	movs	r3, #0
 80067dc:	77fb      	strb	r3, [r7, #31]
 80067de:	e00d      	b.n	80067fc <UART_SetConfig+0x348>
 80067e0:	2302      	movs	r3, #2
 80067e2:	77fb      	strb	r3, [r7, #31]
 80067e4:	e00a      	b.n	80067fc <UART_SetConfig+0x348>
 80067e6:	2304      	movs	r3, #4
 80067e8:	77fb      	strb	r3, [r7, #31]
 80067ea:	e007      	b.n	80067fc <UART_SetConfig+0x348>
 80067ec:	2308      	movs	r3, #8
 80067ee:	77fb      	strb	r3, [r7, #31]
 80067f0:	e004      	b.n	80067fc <UART_SetConfig+0x348>
 80067f2:	2310      	movs	r3, #16
 80067f4:	77fb      	strb	r3, [r7, #31]
 80067f6:	e001      	b.n	80067fc <UART_SetConfig+0x348>
 80067f8:	2310      	movs	r3, #16
 80067fa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	69db      	ldr	r3, [r3, #28]
 8006800:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006804:	d15b      	bne.n	80068be <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006806:	7ffb      	ldrb	r3, [r7, #31]
 8006808:	2b08      	cmp	r3, #8
 800680a:	d828      	bhi.n	800685e <UART_SetConfig+0x3aa>
 800680c:	a201      	add	r2, pc, #4	; (adr r2, 8006814 <UART_SetConfig+0x360>)
 800680e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006812:	bf00      	nop
 8006814:	08006839 	.word	0x08006839
 8006818:	08006841 	.word	0x08006841
 800681c:	08006849 	.word	0x08006849
 8006820:	0800685f 	.word	0x0800685f
 8006824:	0800684f 	.word	0x0800684f
 8006828:	0800685f 	.word	0x0800685f
 800682c:	0800685f 	.word	0x0800685f
 8006830:	0800685f 	.word	0x0800685f
 8006834:	08006857 	.word	0x08006857
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006838:	f7fe fa9e 	bl	8004d78 <HAL_RCC_GetPCLK1Freq>
 800683c:	61b8      	str	r0, [r7, #24]
        break;
 800683e:	e013      	b.n	8006868 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006840:	f7fe faae 	bl	8004da0 <HAL_RCC_GetPCLK2Freq>
 8006844:	61b8      	str	r0, [r7, #24]
        break;
 8006846:	e00f      	b.n	8006868 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006848:	4b4b      	ldr	r3, [pc, #300]	; (8006978 <UART_SetConfig+0x4c4>)
 800684a:	61bb      	str	r3, [r7, #24]
        break;
 800684c:	e00c      	b.n	8006868 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800684e:	f7fe f981 	bl	8004b54 <HAL_RCC_GetSysClockFreq>
 8006852:	61b8      	str	r0, [r7, #24]
        break;
 8006854:	e008      	b.n	8006868 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800685a:	61bb      	str	r3, [r7, #24]
        break;
 800685c:	e004      	b.n	8006868 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800685e:	2300      	movs	r3, #0
 8006860:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	77bb      	strb	r3, [r7, #30]
        break;
 8006866:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d074      	beq.n	8006958 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	005a      	lsls	r2, r3, #1
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	085b      	lsrs	r3, r3, #1
 8006878:	441a      	add	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006882:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	2b0f      	cmp	r3, #15
 8006888:	d916      	bls.n	80068b8 <UART_SetConfig+0x404>
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006890:	d212      	bcs.n	80068b8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	b29b      	uxth	r3, r3
 8006896:	f023 030f 	bic.w	r3, r3, #15
 800689a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	085b      	lsrs	r3, r3, #1
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	f003 0307 	and.w	r3, r3, #7
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	89fb      	ldrh	r3, [r7, #14]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	89fa      	ldrh	r2, [r7, #14]
 80068b4:	60da      	str	r2, [r3, #12]
 80068b6:	e04f      	b.n	8006958 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	77bb      	strb	r3, [r7, #30]
 80068bc:	e04c      	b.n	8006958 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068be:	7ffb      	ldrb	r3, [r7, #31]
 80068c0:	2b08      	cmp	r3, #8
 80068c2:	d828      	bhi.n	8006916 <UART_SetConfig+0x462>
 80068c4:	a201      	add	r2, pc, #4	; (adr r2, 80068cc <UART_SetConfig+0x418>)
 80068c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ca:	bf00      	nop
 80068cc:	080068f1 	.word	0x080068f1
 80068d0:	080068f9 	.word	0x080068f9
 80068d4:	08006901 	.word	0x08006901
 80068d8:	08006917 	.word	0x08006917
 80068dc:	08006907 	.word	0x08006907
 80068e0:	08006917 	.word	0x08006917
 80068e4:	08006917 	.word	0x08006917
 80068e8:	08006917 	.word	0x08006917
 80068ec:	0800690f 	.word	0x0800690f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068f0:	f7fe fa42 	bl	8004d78 <HAL_RCC_GetPCLK1Freq>
 80068f4:	61b8      	str	r0, [r7, #24]
        break;
 80068f6:	e013      	b.n	8006920 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068f8:	f7fe fa52 	bl	8004da0 <HAL_RCC_GetPCLK2Freq>
 80068fc:	61b8      	str	r0, [r7, #24]
        break;
 80068fe:	e00f      	b.n	8006920 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006900:	4b1d      	ldr	r3, [pc, #116]	; (8006978 <UART_SetConfig+0x4c4>)
 8006902:	61bb      	str	r3, [r7, #24]
        break;
 8006904:	e00c      	b.n	8006920 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006906:	f7fe f925 	bl	8004b54 <HAL_RCC_GetSysClockFreq>
 800690a:	61b8      	str	r0, [r7, #24]
        break;
 800690c:	e008      	b.n	8006920 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800690e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006912:	61bb      	str	r3, [r7, #24]
        break;
 8006914:	e004      	b.n	8006920 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006916:	2300      	movs	r3, #0
 8006918:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	77bb      	strb	r3, [r7, #30]
        break;
 800691e:	bf00      	nop
    }

    if (pclk != 0U)
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d018      	beq.n	8006958 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	085a      	lsrs	r2, r3, #1
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	441a      	add	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	fbb2 f3f3 	udiv	r3, r2, r3
 8006938:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	2b0f      	cmp	r3, #15
 800693e:	d909      	bls.n	8006954 <UART_SetConfig+0x4a0>
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006946:	d205      	bcs.n	8006954 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	b29a      	uxth	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	60da      	str	r2, [r3, #12]
 8006952:	e001      	b.n	8006958 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006964:	7fbb      	ldrb	r3, [r7, #30]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3720      	adds	r7, #32
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	40007c00 	.word	0x40007c00
 8006974:	40023800 	.word	0x40023800
 8006978:	00f42400 	.word	0x00f42400

0800697c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006988:	f003 0301 	and.w	r3, r3, #1
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00a      	beq.n	80069a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	430a      	orrs	r2, r1
 80069a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00a      	beq.n	80069c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	430a      	orrs	r2, r1
 80069c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069cc:	f003 0304 	and.w	r3, r3, #4
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00a      	beq.n	80069ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	430a      	orrs	r2, r1
 80069e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ee:	f003 0308 	and.w	r3, r3, #8
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00a      	beq.n	8006a0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	430a      	orrs	r2, r1
 8006a0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a10:	f003 0310 	and.w	r3, r3, #16
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00a      	beq.n	8006a2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	430a      	orrs	r2, r1
 8006a2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a32:	f003 0320 	and.w	r3, r3, #32
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00a      	beq.n	8006a50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	430a      	orrs	r2, r1
 8006a4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d01a      	beq.n	8006a92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	430a      	orrs	r2, r1
 8006a70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a7a:	d10a      	bne.n	8006a92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	430a      	orrs	r2, r1
 8006a90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00a      	beq.n	8006ab4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	430a      	orrs	r2, r1
 8006ab2:	605a      	str	r2, [r3, #4]
  }
}
 8006ab4:	bf00      	nop
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af02      	add	r7, sp, #8
 8006ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ad0:	f7fc f8ba 	bl	8002c48 <HAL_GetTick>
 8006ad4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0308 	and.w	r3, r3, #8
 8006ae0:	2b08      	cmp	r3, #8
 8006ae2:	d10e      	bne.n	8006b02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ae4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ae8:	9300      	str	r3, [sp, #0]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 f831 	bl	8006b5a <UART_WaitOnFlagUntilTimeout>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d001      	beq.n	8006b02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e027      	b.n	8006b52 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0304 	and.w	r3, r3, #4
 8006b0c:	2b04      	cmp	r3, #4
 8006b0e:	d10e      	bne.n	8006b2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b14:	9300      	str	r3, [sp, #0]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 f81b 	bl	8006b5a <UART_WaitOnFlagUntilTimeout>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d001      	beq.n	8006b2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	e011      	b.n	8006b52 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2220      	movs	r2, #32
 8006b32:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2220      	movs	r2, #32
 8006b38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b09c      	sub	sp, #112	; 0x70
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	60f8      	str	r0, [r7, #12]
 8006b62:	60b9      	str	r1, [r7, #8]
 8006b64:	603b      	str	r3, [r7, #0]
 8006b66:	4613      	mov	r3, r2
 8006b68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b6a:	e0a7      	b.n	8006cbc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b72:	f000 80a3 	beq.w	8006cbc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b76:	f7fc f867 	bl	8002c48 <HAL_GetTick>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d302      	bcc.n	8006b8c <UART_WaitOnFlagUntilTimeout+0x32>
 8006b86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d13f      	bne.n	8006c0c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b94:	e853 3f00 	ldrex	r3, [r3]
 8006b98:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ba0:	667b      	str	r3, [r7, #100]	; 0x64
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006baa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bac:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006bb0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006bb2:	e841 2300 	strex	r3, r2, [r1]
 8006bb6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006bb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1e6      	bne.n	8006b8c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	3308      	adds	r3, #8
 8006bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bc8:	e853 3f00 	ldrex	r3, [r3]
 8006bcc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd0:	f023 0301 	bic.w	r3, r3, #1
 8006bd4:	663b      	str	r3, [r7, #96]	; 0x60
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	3308      	adds	r3, #8
 8006bdc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006bde:	64ba      	str	r2, [r7, #72]	; 0x48
 8006be0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006be4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006be6:	e841 2300 	strex	r3, r2, [r1]
 8006bea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006bec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1e5      	bne.n	8006bbe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2220      	movs	r2, #32
 8006bf6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2220      	movs	r2, #32
 8006bfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e068      	b.n	8006cde <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 0304 	and.w	r3, r3, #4
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d050      	beq.n	8006cbc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	69db      	ldr	r3, [r3, #28]
 8006c20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c28:	d148      	bne.n	8006cbc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c32:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3c:	e853 3f00 	ldrex	r3, [r3]
 8006c40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	461a      	mov	r2, r3
 8006c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c52:	637b      	str	r3, [r7, #52]	; 0x34
 8006c54:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c5a:	e841 2300 	strex	r3, r2, [r1]
 8006c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1e6      	bne.n	8006c34 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	3308      	adds	r3, #8
 8006c6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	e853 3f00 	ldrex	r3, [r3]
 8006c74:	613b      	str	r3, [r7, #16]
   return(result);
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	f023 0301 	bic.w	r3, r3, #1
 8006c7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	3308      	adds	r3, #8
 8006c84:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c86:	623a      	str	r2, [r7, #32]
 8006c88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8a:	69f9      	ldr	r1, [r7, #28]
 8006c8c:	6a3a      	ldr	r2, [r7, #32]
 8006c8e:	e841 2300 	strex	r3, r2, [r1]
 8006c92:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1e5      	bne.n	8006c66 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2220      	movs	r2, #32
 8006c9e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2220      	movs	r2, #32
 8006ca4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2220      	movs	r2, #32
 8006cac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	e010      	b.n	8006cde <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	69da      	ldr	r2, [r3, #28]
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	68ba      	ldr	r2, [r7, #8]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	bf0c      	ite	eq
 8006ccc:	2301      	moveq	r3, #1
 8006cce:	2300      	movne	r3, #0
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	79fb      	ldrb	r3, [r7, #7]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	f43f af48 	beq.w	8006b6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3770      	adds	r7, #112	; 0x70
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
	...

08006ce8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b096      	sub	sp, #88	; 0x58
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	68ba      	ldr	r2, [r7, #8]
 8006cfa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	88fa      	ldrh	r2, [r7, #6]
 8006d00:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2222      	movs	r2, #34	; 0x22
 8006d10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d028      	beq.n	8006d6e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d20:	4a3e      	ldr	r2, [pc, #248]	; (8006e1c <UART_Start_Receive_DMA+0x134>)
 8006d22:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d28:	4a3d      	ldr	r2, [pc, #244]	; (8006e20 <UART_Start_Receive_DMA+0x138>)
 8006d2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d30:	4a3c      	ldr	r2, [pc, #240]	; (8006e24 <UART_Start_Receive_DMA+0x13c>)
 8006d32:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d38:	2200      	movs	r2, #0
 8006d3a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	3324      	adds	r3, #36	; 0x24
 8006d46:	4619      	mov	r1, r3
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	88fb      	ldrh	r3, [r7, #6]
 8006d50:	f7fc f975 	bl	800303e <HAL_DMA_Start_IT>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d009      	beq.n	8006d6e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2210      	movs	r2, #16
 8006d5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2220      	movs	r2, #32
 8006d66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e051      	b.n	8006e12 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d018      	beq.n	8006da8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d7e:	e853 3f00 	ldrex	r3, [r3]
 8006d82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d8a:	657b      	str	r3, [r7, #84]	; 0x54
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	461a      	mov	r2, r3
 8006d92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d94:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d96:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d98:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d9c:	e841 2300 	strex	r3, r2, [r1]
 8006da0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d1e6      	bne.n	8006d76 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	3308      	adds	r3, #8
 8006dae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db2:	e853 3f00 	ldrex	r3, [r3]
 8006db6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dba:	f043 0301 	orr.w	r3, r3, #1
 8006dbe:	653b      	str	r3, [r7, #80]	; 0x50
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	3308      	adds	r3, #8
 8006dc6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006dc8:	637a      	str	r2, [r7, #52]	; 0x34
 8006dca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dcc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006dce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006dd0:	e841 2300 	strex	r3, r2, [r1]
 8006dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1e5      	bne.n	8006da8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	3308      	adds	r3, #8
 8006de2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	e853 3f00 	ldrex	r3, [r3]
 8006dea:	613b      	str	r3, [r7, #16]
   return(result);
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006df2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	3308      	adds	r3, #8
 8006dfa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006dfc:	623a      	str	r2, [r7, #32]
 8006dfe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e00:	69f9      	ldr	r1, [r7, #28]
 8006e02:	6a3a      	ldr	r2, [r7, #32]
 8006e04:	e841 2300 	strex	r3, r2, [r1]
 8006e08:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d1e5      	bne.n	8006ddc <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3758      	adds	r7, #88	; 0x58
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	08006f3d 	.word	0x08006f3d
 8006e20:	08007065 	.word	0x08007065
 8006e24:	080070a3 	.word	0x080070a3

08006e28 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b089      	sub	sp, #36	; 0x24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	e853 3f00 	ldrex	r3, [r3]
 8006e3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006e44:	61fb      	str	r3, [r7, #28]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	61bb      	str	r3, [r7, #24]
 8006e50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e52:	6979      	ldr	r1, [r7, #20]
 8006e54:	69ba      	ldr	r2, [r7, #24]
 8006e56:	e841 2300 	strex	r3, r2, [r1]
 8006e5a:	613b      	str	r3, [r7, #16]
   return(result);
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1e6      	bne.n	8006e30 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2220      	movs	r2, #32
 8006e66:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8006e68:	bf00      	nop
 8006e6a:	3724      	adds	r7, #36	; 0x24
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b095      	sub	sp, #84	; 0x54
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e84:	e853 3f00 	ldrex	r3, [r3]
 8006e88:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	461a      	mov	r2, r3
 8006e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e9a:	643b      	str	r3, [r7, #64]	; 0x40
 8006e9c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ea0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ea2:	e841 2300 	strex	r3, r2, [r1]
 8006ea6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1e6      	bne.n	8006e7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	3308      	adds	r3, #8
 8006eb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb6:	6a3b      	ldr	r3, [r7, #32]
 8006eb8:	e853 3f00 	ldrex	r3, [r3]
 8006ebc:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	f023 0301 	bic.w	r3, r3, #1
 8006ec4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	3308      	adds	r3, #8
 8006ecc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ece:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ed0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ed4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ed6:	e841 2300 	strex	r3, r2, [r1]
 8006eda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1e5      	bne.n	8006eae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d118      	bne.n	8006f1c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	e853 3f00 	ldrex	r3, [r3]
 8006ef6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	f023 0310 	bic.w	r3, r3, #16
 8006efe:	647b      	str	r3, [r7, #68]	; 0x44
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	461a      	mov	r2, r3
 8006f06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f08:	61bb      	str	r3, [r7, #24]
 8006f0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0c:	6979      	ldr	r1, [r7, #20]
 8006f0e:	69ba      	ldr	r2, [r7, #24]
 8006f10:	e841 2300 	strex	r3, r2, [r1]
 8006f14:	613b      	str	r3, [r7, #16]
   return(result);
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1e6      	bne.n	8006eea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2220      	movs	r2, #32
 8006f20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006f30:	bf00      	nop
 8006f32:	3754      	adds	r7, #84	; 0x54
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b09c      	sub	sp, #112	; 0x70
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f48:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	69db      	ldr	r3, [r3, #28]
 8006f4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f52:	d071      	beq.n	8007038 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8006f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f56:	2200      	movs	r2, #0
 8006f58:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f64:	e853 3f00 	ldrex	r3, [r3]
 8006f68:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f70:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	461a      	mov	r2, r3
 8006f78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f7c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f82:	e841 2300 	strex	r3, r2, [r1]
 8006f86:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d1e6      	bne.n	8006f5c <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	3308      	adds	r3, #8
 8006f94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f98:	e853 3f00 	ldrex	r3, [r3]
 8006f9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fa0:	f023 0301 	bic.w	r3, r3, #1
 8006fa4:	667b      	str	r3, [r7, #100]	; 0x64
 8006fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	3308      	adds	r3, #8
 8006fac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006fae:	647a      	str	r2, [r7, #68]	; 0x44
 8006fb0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006fb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fb6:	e841 2300 	strex	r3, r2, [r1]
 8006fba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1e5      	bne.n	8006f8e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	3308      	adds	r3, #8
 8006fc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fcc:	e853 3f00 	ldrex	r3, [r3]
 8006fd0:	623b      	str	r3, [r7, #32]
   return(result);
 8006fd2:	6a3b      	ldr	r3, [r7, #32]
 8006fd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fd8:	663b      	str	r3, [r7, #96]	; 0x60
 8006fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	3308      	adds	r3, #8
 8006fe0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006fe2:	633a      	str	r2, [r7, #48]	; 0x30
 8006fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006fe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fea:	e841 2300 	strex	r3, r2, [r1]
 8006fee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d1e5      	bne.n	8006fc2 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ff8:	2220      	movs	r2, #32
 8006ffa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007002:	2b01      	cmp	r3, #1
 8007004:	d118      	bne.n	8007038 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	e853 3f00 	ldrex	r3, [r3]
 8007012:	60fb      	str	r3, [r7, #12]
   return(result);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f023 0310 	bic.w	r3, r3, #16
 800701a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800701c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	461a      	mov	r2, r3
 8007022:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007024:	61fb      	str	r3, [r7, #28]
 8007026:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007028:	69b9      	ldr	r1, [r7, #24]
 800702a:	69fa      	ldr	r2, [r7, #28]
 800702c:	e841 2300 	strex	r3, r2, [r1]
 8007030:	617b      	str	r3, [r7, #20]
   return(result);
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1e6      	bne.n	8007006 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800703a:	2200      	movs	r2, #0
 800703c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800703e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007042:	2b01      	cmp	r3, #1
 8007044:	d107      	bne.n	8007056 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007048:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800704c:	4619      	mov	r1, r3
 800704e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007050:	f7ff fa1a 	bl	8006488 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007054:	e002      	b.n	800705c <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8007056:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007058:	f7ff f9f8 	bl	800644c <HAL_UART_RxCpltCallback>
}
 800705c:	bf00      	nop
 800705e:	3770      	adds	r7, #112	; 0x70
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007070:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2201      	movs	r2, #1
 8007076:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800707c:	2b01      	cmp	r3, #1
 800707e:	d109      	bne.n	8007094 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007086:	085b      	lsrs	r3, r3, #1
 8007088:	b29b      	uxth	r3, r3
 800708a:	4619      	mov	r1, r3
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	f7ff f9fb 	bl	8006488 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007092:	e002      	b.n	800709a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f7ff f9e3 	bl	8006460 <HAL_UART_RxHalfCpltCallback>
}
 800709a:	bf00      	nop
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b086      	sub	sp, #24
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ae:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070b4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070bc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070c8:	2b80      	cmp	r3, #128	; 0x80
 80070ca:	d109      	bne.n	80070e0 <UART_DMAError+0x3e>
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	2b21      	cmp	r3, #33	; 0x21
 80070d0:	d106      	bne.n	80070e0 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80070da:	6978      	ldr	r0, [r7, #20]
 80070dc:	f7ff fea4 	bl	8006e28 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ea:	2b40      	cmp	r3, #64	; 0x40
 80070ec:	d109      	bne.n	8007102 <UART_DMAError+0x60>
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2b22      	cmp	r3, #34	; 0x22
 80070f2:	d106      	bne.n	8007102 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80070fc:	6978      	ldr	r0, [r7, #20]
 80070fe:	f7ff feb9 	bl	8006e74 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007108:	f043 0210 	orr.w	r2, r3, #16
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007112:	6978      	ldr	r0, [r7, #20]
 8007114:	f7ff f9ae 	bl	8006474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007118:	bf00      	nop
 800711a:	3718      	adds	r7, #24
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800712c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f7ff f998 	bl	8006474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007144:	bf00      	nop
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b088      	sub	sp, #32
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	e853 3f00 	ldrex	r3, [r3]
 8007160:	60bb      	str	r3, [r7, #8]
   return(result);
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007168:	61fb      	str	r3, [r7, #28]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	461a      	mov	r2, r3
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	61bb      	str	r3, [r7, #24]
 8007174:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007176:	6979      	ldr	r1, [r7, #20]
 8007178:	69ba      	ldr	r2, [r7, #24]
 800717a:	e841 2300 	strex	r3, r2, [r1]
 800717e:	613b      	str	r3, [r7, #16]
   return(result);
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1e6      	bne.n	8007154 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2220      	movs	r2, #32
 800718a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f7ff f950 	bl	8006438 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007198:	bf00      	nop
 800719a:	3720      	adds	r7, #32
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80071a0:	b084      	sub	sp, #16
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b084      	sub	sp, #16
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
 80071aa:	f107 001c 	add.w	r0, r7, #28
 80071ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80071b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d120      	bne.n	80071fa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	68da      	ldr	r2, [r3, #12]
 80071c8:	4b20      	ldr	r3, [pc, #128]	; (800724c <USB_CoreInit+0xac>)
 80071ca:	4013      	ands	r3, r2
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80071dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d105      	bne.n	80071ee <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 fa96 	bl	8007720 <USB_CoreReset>
 80071f4:	4603      	mov	r3, r0
 80071f6:	73fb      	strb	r3, [r7, #15]
 80071f8:	e010      	b.n	800721c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 fa8a 	bl	8007720 <USB_CoreReset>
 800720c:	4603      	mov	r3, r0
 800720e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007214:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800721c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721e:	2b01      	cmp	r3, #1
 8007220:	d10b      	bne.n	800723a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	f043 0206 	orr.w	r2, r3, #6
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	f043 0220 	orr.w	r2, r3, #32
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800723a:	7bfb      	ldrb	r3, [r7, #15]
}
 800723c:	4618      	mov	r0, r3
 800723e:	3710      	adds	r7, #16
 8007240:	46bd      	mov	sp, r7
 8007242:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007246:	b004      	add	sp, #16
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	ffbdffbf 	.word	0xffbdffbf

08007250 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	f023 0201 	bic.w	r2, r3, #1
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	370c      	adds	r7, #12
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr

08007272 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b084      	sub	sp, #16
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
 800727a:	460b      	mov	r3, r1
 800727c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800727e:	2300      	movs	r3, #0
 8007280:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800728e:	78fb      	ldrb	r3, [r7, #3]
 8007290:	2b01      	cmp	r3, #1
 8007292:	d115      	bne.n	80072c0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80072a0:	2001      	movs	r0, #1
 80072a2:	f7fb fcdd 	bl	8002c60 <HAL_Delay>
      ms++;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	3301      	adds	r3, #1
 80072aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 fa29 	bl	8007704 <USB_GetMode>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d01e      	beq.n	80072f6 <USB_SetCurrentMode+0x84>
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2b31      	cmp	r3, #49	; 0x31
 80072bc:	d9f0      	bls.n	80072a0 <USB_SetCurrentMode+0x2e>
 80072be:	e01a      	b.n	80072f6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80072c0:	78fb      	ldrb	r3, [r7, #3]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d115      	bne.n	80072f2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80072d2:	2001      	movs	r0, #1
 80072d4:	f7fb fcc4 	bl	8002c60 <HAL_Delay>
      ms++;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	3301      	adds	r3, #1
 80072dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 fa10 	bl	8007704 <USB_GetMode>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d005      	beq.n	80072f6 <USB_SetCurrentMode+0x84>
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2b31      	cmp	r3, #49	; 0x31
 80072ee:	d9f0      	bls.n	80072d2 <USB_SetCurrentMode+0x60>
 80072f0:	e001      	b.n	80072f6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e005      	b.n	8007302 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2b32      	cmp	r3, #50	; 0x32
 80072fa:	d101      	bne.n	8007300 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	e000      	b.n	8007302 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	3710      	adds	r7, #16
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
	...

0800730c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800730c:	b084      	sub	sp, #16
 800730e:	b580      	push	{r7, lr}
 8007310:	b086      	sub	sp, #24
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
 8007316:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800731a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800731e:	2300      	movs	r3, #0
 8007320:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007326:	2300      	movs	r3, #0
 8007328:	613b      	str	r3, [r7, #16]
 800732a:	e009      	b.n	8007340 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	3340      	adds	r3, #64	; 0x40
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	4413      	add	r3, r2
 8007336:	2200      	movs	r2, #0
 8007338:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	3301      	adds	r3, #1
 800733e:	613b      	str	r3, [r7, #16]
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	2b0e      	cmp	r3, #14
 8007344:	d9f2      	bls.n	800732c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007348:	2b00      	cmp	r3, #0
 800734a:	d11c      	bne.n	8007386 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800735a:	f043 0302 	orr.w	r3, r3, #2
 800735e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007364:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	601a      	str	r2, [r3, #0]
 8007384:	e005      	b.n	8007392 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007398:	461a      	mov	r2, r3
 800739a:	2300      	movs	r3, #0
 800739c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073a4:	4619      	mov	r1, r3
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ac:	461a      	mov	r2, r3
 80073ae:	680b      	ldr	r3, [r1, #0]
 80073b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80073b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d10c      	bne.n	80073d2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80073b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d104      	bne.n	80073c8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80073be:	2100      	movs	r1, #0
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 f965 	bl	8007690 <USB_SetDevSpeed>
 80073c6:	e008      	b.n	80073da <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80073c8:	2101      	movs	r1, #1
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 f960 	bl	8007690 <USB_SetDevSpeed>
 80073d0:	e003      	b.n	80073da <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80073d2:	2103      	movs	r1, #3
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 f95b 	bl	8007690 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80073da:	2110      	movs	r1, #16
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 f8f3 	bl	80075c8 <USB_FlushTxFifo>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d001      	beq.n	80073ec <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 f91f 	bl	8007630 <USB_FlushRxFifo>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d001      	beq.n	80073fc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007402:	461a      	mov	r2, r3
 8007404:	2300      	movs	r3, #0
 8007406:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800740e:	461a      	mov	r2, r3
 8007410:	2300      	movs	r3, #0
 8007412:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800741a:	461a      	mov	r2, r3
 800741c:	2300      	movs	r3, #0
 800741e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007420:	2300      	movs	r3, #0
 8007422:	613b      	str	r3, [r7, #16]
 8007424:	e043      	b.n	80074ae <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	015a      	lsls	r2, r3, #5
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	4413      	add	r3, r2
 800742e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007438:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800743c:	d118      	bne.n	8007470 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d10a      	bne.n	800745a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	015a      	lsls	r2, r3, #5
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	4413      	add	r3, r2
 800744c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007450:	461a      	mov	r2, r3
 8007452:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007456:	6013      	str	r3, [r2, #0]
 8007458:	e013      	b.n	8007482 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	015a      	lsls	r2, r3, #5
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	4413      	add	r3, r2
 8007462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007466:	461a      	mov	r2, r3
 8007468:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800746c:	6013      	str	r3, [r2, #0]
 800746e:	e008      	b.n	8007482 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	015a      	lsls	r2, r3, #5
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	4413      	add	r3, r2
 8007478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800747c:	461a      	mov	r2, r3
 800747e:	2300      	movs	r3, #0
 8007480:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	015a      	lsls	r2, r3, #5
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	4413      	add	r3, r2
 800748a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800748e:	461a      	mov	r2, r3
 8007490:	2300      	movs	r3, #0
 8007492:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	015a      	lsls	r2, r3, #5
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	4413      	add	r3, r2
 800749c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074a0:	461a      	mov	r2, r3
 80074a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80074a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	3301      	adds	r3, #1
 80074ac:	613b      	str	r3, [r7, #16]
 80074ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b0:	693a      	ldr	r2, [r7, #16]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d3b7      	bcc.n	8007426 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074b6:	2300      	movs	r3, #0
 80074b8:	613b      	str	r3, [r7, #16]
 80074ba:	e043      	b.n	8007544 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	015a      	lsls	r2, r3, #5
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	4413      	add	r3, r2
 80074c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074d2:	d118      	bne.n	8007506 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d10a      	bne.n	80074f0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	015a      	lsls	r2, r3, #5
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	4413      	add	r3, r2
 80074e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074e6:	461a      	mov	r2, r3
 80074e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80074ec:	6013      	str	r3, [r2, #0]
 80074ee:	e013      	b.n	8007518 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	015a      	lsls	r2, r3, #5
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	4413      	add	r3, r2
 80074f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074fc:	461a      	mov	r2, r3
 80074fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007502:	6013      	str	r3, [r2, #0]
 8007504:	e008      	b.n	8007518 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	015a      	lsls	r2, r3, #5
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	4413      	add	r3, r2
 800750e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007512:	461a      	mov	r2, r3
 8007514:	2300      	movs	r3, #0
 8007516:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	015a      	lsls	r2, r3, #5
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	4413      	add	r3, r2
 8007520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007524:	461a      	mov	r2, r3
 8007526:	2300      	movs	r3, #0
 8007528:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	015a      	lsls	r2, r3, #5
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	4413      	add	r3, r2
 8007532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007536:	461a      	mov	r2, r3
 8007538:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800753c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	3301      	adds	r3, #1
 8007542:	613b      	str	r3, [r7, #16]
 8007544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007546:	693a      	ldr	r2, [r7, #16]
 8007548:	429a      	cmp	r2, r3
 800754a:	d3b7      	bcc.n	80074bc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800755a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800755e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800756c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800756e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007570:	2b00      	cmp	r3, #0
 8007572:	d105      	bne.n	8007580 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	699b      	ldr	r3, [r3, #24]
 8007578:	f043 0210 	orr.w	r2, r3, #16
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	699a      	ldr	r2, [r3, #24]
 8007584:	4b0e      	ldr	r3, [pc, #56]	; (80075c0 <USB_DevInit+0x2b4>)
 8007586:	4313      	orrs	r3, r2
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800758c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800758e:	2b00      	cmp	r3, #0
 8007590:	d005      	beq.n	800759e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	699b      	ldr	r3, [r3, #24]
 8007596:	f043 0208 	orr.w	r2, r3, #8
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800759e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d105      	bne.n	80075b0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	699a      	ldr	r2, [r3, #24]
 80075a8:	4b06      	ldr	r3, [pc, #24]	; (80075c4 <USB_DevInit+0x2b8>)
 80075aa:	4313      	orrs	r3, r2
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80075b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3718      	adds	r7, #24
 80075b6:	46bd      	mov	sp, r7
 80075b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075bc:	b004      	add	sp, #16
 80075be:	4770      	bx	lr
 80075c0:	803c3800 	.word	0x803c3800
 80075c4:	40000004 	.word	0x40000004

080075c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80075d2:	2300      	movs	r3, #0
 80075d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	3301      	adds	r3, #1
 80075da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	4a13      	ldr	r2, [pc, #76]	; (800762c <USB_FlushTxFifo+0x64>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d901      	bls.n	80075e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80075e4:	2303      	movs	r3, #3
 80075e6:	e01b      	b.n	8007620 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	691b      	ldr	r3, [r3, #16]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	daf2      	bge.n	80075d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80075f0:	2300      	movs	r3, #0
 80075f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	019b      	lsls	r3, r3, #6
 80075f8:	f043 0220 	orr.w	r2, r3, #32
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	3301      	adds	r3, #1
 8007604:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	4a08      	ldr	r2, [pc, #32]	; (800762c <USB_FlushTxFifo+0x64>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d901      	bls.n	8007612 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	e006      	b.n	8007620 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	f003 0320 	and.w	r3, r3, #32
 800761a:	2b20      	cmp	r3, #32
 800761c:	d0f0      	beq.n	8007600 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	3714      	adds	r7, #20
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr
 800762c:	00030d40 	.word	0x00030d40

08007630 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007638:	2300      	movs	r3, #0
 800763a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	3301      	adds	r3, #1
 8007640:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	4a11      	ldr	r2, [pc, #68]	; (800768c <USB_FlushRxFifo+0x5c>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d901      	bls.n	800764e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	e018      	b.n	8007680 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	2b00      	cmp	r3, #0
 8007654:	daf2      	bge.n	800763c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007656:	2300      	movs	r3, #0
 8007658:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2210      	movs	r2, #16
 800765e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	3301      	adds	r3, #1
 8007664:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	4a08      	ldr	r2, [pc, #32]	; (800768c <USB_FlushRxFifo+0x5c>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d901      	bls.n	8007672 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800766e:	2303      	movs	r3, #3
 8007670:	e006      	b.n	8007680 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	f003 0310 	and.w	r3, r3, #16
 800767a:	2b10      	cmp	r3, #16
 800767c:	d0f0      	beq.n	8007660 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800767e:	2300      	movs	r3, #0
}
 8007680:	4618      	mov	r0, r3
 8007682:	3714      	adds	r7, #20
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr
 800768c:	00030d40 	.word	0x00030d40

08007690 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	460b      	mov	r3, r1
 800769a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	78fb      	ldrb	r3, [r7, #3]
 80076aa:	68f9      	ldr	r1, [r7, #12]
 80076ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076b0:	4313      	orrs	r3, r2
 80076b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3714      	adds	r7, #20
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr

080076c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80076c2:	b480      	push	{r7}
 80076c4:	b085      	sub	sp, #20
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80076dc:	f023 0303 	bic.w	r3, r3, #3
 80076e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076f0:	f043 0302 	orr.w	r3, r3, #2
 80076f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3714      	adds	r7, #20
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	695b      	ldr	r3, [r3, #20]
 8007710:	f003 0301 	and.w	r3, r3, #1
}
 8007714:	4618      	mov	r0, r3
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007720:	b480      	push	{r7}
 8007722:	b085      	sub	sp, #20
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007728:	2300      	movs	r3, #0
 800772a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	3301      	adds	r3, #1
 8007730:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	4a13      	ldr	r2, [pc, #76]	; (8007784 <USB_CoreReset+0x64>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d901      	bls.n	800773e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800773a:	2303      	movs	r3, #3
 800773c:	e01b      	b.n	8007776 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	2b00      	cmp	r3, #0
 8007744:	daf2      	bge.n	800772c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007746:	2300      	movs	r3, #0
 8007748:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	f043 0201 	orr.w	r2, r3, #1
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	3301      	adds	r3, #1
 800775a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	4a09      	ldr	r2, [pc, #36]	; (8007784 <USB_CoreReset+0x64>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d901      	bls.n	8007768 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007764:	2303      	movs	r3, #3
 8007766:	e006      	b.n	8007776 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	f003 0301 	and.w	r3, r3, #1
 8007770:	2b01      	cmp	r3, #1
 8007772:	d0f0      	beq.n	8007756 <USB_CoreReset+0x36>

  return HAL_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	3714      	adds	r7, #20
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	00030d40 	.word	0x00030d40

08007788 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007788:	b480      	push	{r7}
 800778a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800778c:	bf00      	nop
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr
	...

08007798 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800779e:	f3ef 8305 	mrs	r3, IPSR
 80077a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80077a4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d10f      	bne.n	80077ca <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077aa:	f3ef 8310 	mrs	r3, PRIMASK
 80077ae:	607b      	str	r3, [r7, #4]
  return(result);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d105      	bne.n	80077c2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80077b6:	f3ef 8311 	mrs	r3, BASEPRI
 80077ba:	603b      	str	r3, [r7, #0]
  return(result);
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d007      	beq.n	80077d2 <osKernelInitialize+0x3a>
 80077c2:	4b0e      	ldr	r3, [pc, #56]	; (80077fc <osKernelInitialize+0x64>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	d103      	bne.n	80077d2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80077ca:	f06f 0305 	mvn.w	r3, #5
 80077ce:	60fb      	str	r3, [r7, #12]
 80077d0:	e00c      	b.n	80077ec <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80077d2:	4b0a      	ldr	r3, [pc, #40]	; (80077fc <osKernelInitialize+0x64>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d105      	bne.n	80077e6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80077da:	4b08      	ldr	r3, [pc, #32]	; (80077fc <osKernelInitialize+0x64>)
 80077dc:	2201      	movs	r2, #1
 80077de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80077e0:	2300      	movs	r3, #0
 80077e2:	60fb      	str	r3, [r7, #12]
 80077e4:	e002      	b.n	80077ec <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80077e6:	f04f 33ff 	mov.w	r3, #4294967295
 80077ea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80077ec:	68fb      	ldr	r3, [r7, #12]
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3714      	adds	r7, #20
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	20001530 	.word	0x20001530

08007800 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007806:	f3ef 8305 	mrs	r3, IPSR
 800780a:	60bb      	str	r3, [r7, #8]
  return(result);
 800780c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800780e:	2b00      	cmp	r3, #0
 8007810:	d10f      	bne.n	8007832 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007812:	f3ef 8310 	mrs	r3, PRIMASK
 8007816:	607b      	str	r3, [r7, #4]
  return(result);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d105      	bne.n	800782a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800781e:	f3ef 8311 	mrs	r3, BASEPRI
 8007822:	603b      	str	r3, [r7, #0]
  return(result);
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d007      	beq.n	800783a <osKernelStart+0x3a>
 800782a:	4b0f      	ldr	r3, [pc, #60]	; (8007868 <osKernelStart+0x68>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2b02      	cmp	r3, #2
 8007830:	d103      	bne.n	800783a <osKernelStart+0x3a>
    stat = osErrorISR;
 8007832:	f06f 0305 	mvn.w	r3, #5
 8007836:	60fb      	str	r3, [r7, #12]
 8007838:	e010      	b.n	800785c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800783a:	4b0b      	ldr	r3, [pc, #44]	; (8007868 <osKernelStart+0x68>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2b01      	cmp	r3, #1
 8007840:	d109      	bne.n	8007856 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007842:	f7ff ffa1 	bl	8007788 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007846:	4b08      	ldr	r3, [pc, #32]	; (8007868 <osKernelStart+0x68>)
 8007848:	2202      	movs	r2, #2
 800784a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800784c:	f001 fd08 	bl	8009260 <vTaskStartScheduler>
      stat = osOK;
 8007850:	2300      	movs	r3, #0
 8007852:	60fb      	str	r3, [r7, #12]
 8007854:	e002      	b.n	800785c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8007856:	f04f 33ff 	mov.w	r3, #4294967295
 800785a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800785c:	68fb      	ldr	r3, [r7, #12]
}
 800785e:	4618      	mov	r0, r3
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	20001530 	.word	0x20001530

0800786c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800786c:	b580      	push	{r7, lr}
 800786e:	b090      	sub	sp, #64	; 0x40
 8007870:	af04      	add	r7, sp, #16
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007878:	2300      	movs	r3, #0
 800787a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800787c:	f3ef 8305 	mrs	r3, IPSR
 8007880:	61fb      	str	r3, [r7, #28]
  return(result);
 8007882:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007884:	2b00      	cmp	r3, #0
 8007886:	f040 808f 	bne.w	80079a8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800788a:	f3ef 8310 	mrs	r3, PRIMASK
 800788e:	61bb      	str	r3, [r7, #24]
  return(result);
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d105      	bne.n	80078a2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007896:	f3ef 8311 	mrs	r3, BASEPRI
 800789a:	617b      	str	r3, [r7, #20]
  return(result);
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d003      	beq.n	80078aa <osThreadNew+0x3e>
 80078a2:	4b44      	ldr	r3, [pc, #272]	; (80079b4 <osThreadNew+0x148>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	d07e      	beq.n	80079a8 <osThreadNew+0x13c>
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d07b      	beq.n	80079a8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80078b0:	2380      	movs	r3, #128	; 0x80
 80078b2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80078b4:	2318      	movs	r3, #24
 80078b6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80078b8:	2300      	movs	r3, #0
 80078ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80078bc:	f04f 33ff 	mov.w	r3, #4294967295
 80078c0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d045      	beq.n	8007954 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d002      	beq.n	80078d6 <osThreadNew+0x6a>
        name = attr->name;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	699b      	ldr	r3, [r3, #24]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d002      	beq.n	80078e4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	699b      	ldr	r3, [r3, #24]
 80078e2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80078e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d008      	beq.n	80078fc <osThreadNew+0x90>
 80078ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ec:	2b38      	cmp	r3, #56	; 0x38
 80078ee:	d805      	bhi.n	80078fc <osThreadNew+0x90>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	f003 0301 	and.w	r3, r3, #1
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d001      	beq.n	8007900 <osThreadNew+0x94>
        return (NULL);
 80078fc:	2300      	movs	r3, #0
 80078fe:	e054      	b.n	80079aa <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	695b      	ldr	r3, [r3, #20]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d003      	beq.n	8007910 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	695b      	ldr	r3, [r3, #20]
 800790c:	089b      	lsrs	r3, r3, #2
 800790e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00e      	beq.n	8007936 <osThreadNew+0xca>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	2bbb      	cmp	r3, #187	; 0xbb
 800791e:	d90a      	bls.n	8007936 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007924:	2b00      	cmp	r3, #0
 8007926:	d006      	beq.n	8007936 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	695b      	ldr	r3, [r3, #20]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d002      	beq.n	8007936 <osThreadNew+0xca>
        mem = 1;
 8007930:	2301      	movs	r3, #1
 8007932:	623b      	str	r3, [r7, #32]
 8007934:	e010      	b.n	8007958 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d10c      	bne.n	8007958 <osThreadNew+0xec>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d108      	bne.n	8007958 <osThreadNew+0xec>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d104      	bne.n	8007958 <osThreadNew+0xec>
          mem = 0;
 800794e:	2300      	movs	r3, #0
 8007950:	623b      	str	r3, [r7, #32]
 8007952:	e001      	b.n	8007958 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007954:	2300      	movs	r3, #0
 8007956:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007958:	6a3b      	ldr	r3, [r7, #32]
 800795a:	2b01      	cmp	r3, #1
 800795c:	d110      	bne.n	8007980 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007966:	9202      	str	r2, [sp, #8]
 8007968:	9301      	str	r3, [sp, #4]
 800796a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796c:	9300      	str	r3, [sp, #0]
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007972:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007974:	68f8      	ldr	r0, [r7, #12]
 8007976:	f001 fa7d 	bl	8008e74 <xTaskCreateStatic>
 800797a:	4603      	mov	r3, r0
 800797c:	613b      	str	r3, [r7, #16]
 800797e:	e013      	b.n	80079a8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007980:	6a3b      	ldr	r3, [r7, #32]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d110      	bne.n	80079a8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007988:	b29a      	uxth	r2, r3
 800798a:	f107 0310 	add.w	r3, r7, #16
 800798e:	9301      	str	r3, [sp, #4]
 8007990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007992:	9300      	str	r3, [sp, #0]
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	f001 face 	bl	8008f3a <xTaskCreate>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d001      	beq.n	80079a8 <osThreadNew+0x13c>
          hTask = NULL;
 80079a4:	2300      	movs	r3, #0
 80079a6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80079a8:	693b      	ldr	r3, [r7, #16]
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3730      	adds	r7, #48	; 0x30
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	20001530 	.word	0x20001530

080079b8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b086      	sub	sp, #24
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079c0:	f3ef 8305 	mrs	r3, IPSR
 80079c4:	613b      	str	r3, [r7, #16]
  return(result);
 80079c6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d10f      	bne.n	80079ec <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079cc:	f3ef 8310 	mrs	r3, PRIMASK
 80079d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d105      	bne.n	80079e4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80079d8:	f3ef 8311 	mrs	r3, BASEPRI
 80079dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d007      	beq.n	80079f4 <osDelay+0x3c>
 80079e4:	4b0a      	ldr	r3, [pc, #40]	; (8007a10 <osDelay+0x58>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d103      	bne.n	80079f4 <osDelay+0x3c>
    stat = osErrorISR;
 80079ec:	f06f 0305 	mvn.w	r3, #5
 80079f0:	617b      	str	r3, [r7, #20]
 80079f2:	e007      	b.n	8007a04 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80079f4:	2300      	movs	r3, #0
 80079f6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d002      	beq.n	8007a04 <osDelay+0x4c>
      vTaskDelay(ticks);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f001 fbf8 	bl	80091f4 <vTaskDelay>
    }
  }

  return (stat);
 8007a04:	697b      	ldr	r3, [r7, #20]
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3718      	adds	r7, #24
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	20001530 	.word	0x20001530

08007a14 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f003 f801 	bl	800aa24 <pvTimerGetTimerID>
 8007a22:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d005      	beq.n	8007a36 <TimerCallback+0x22>
    callb->func (callb->arg);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68fa      	ldr	r2, [r7, #12]
 8007a30:	6852      	ldr	r2, [r2, #4]
 8007a32:	4610      	mov	r0, r2
 8007a34:	4798      	blx	r3
  }
}
 8007a36:	bf00      	nop
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
	...

08007a40 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b08e      	sub	sp, #56	; 0x38
 8007a44:	af02      	add	r7, sp, #8
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	607a      	str	r2, [r7, #4]
 8007a4a:	603b      	str	r3, [r7, #0]
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8007a50:	2300      	movs	r3, #0
 8007a52:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a54:	f3ef 8305 	mrs	r3, IPSR
 8007a58:	61bb      	str	r3, [r7, #24]
  return(result);
 8007a5a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d16a      	bne.n	8007b36 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a60:	f3ef 8310 	mrs	r3, PRIMASK
 8007a64:	617b      	str	r3, [r7, #20]
  return(result);
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d105      	bne.n	8007a78 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007a6c:	f3ef 8311 	mrs	r3, BASEPRI
 8007a70:	613b      	str	r3, [r7, #16]
  return(result);
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d003      	beq.n	8007a80 <osTimerNew+0x40>
 8007a78:	4b31      	ldr	r3, [pc, #196]	; (8007b40 <osTimerNew+0x100>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	d05a      	beq.n	8007b36 <osTimerNew+0xf6>
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d057      	beq.n	8007b36 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8007a86:	2008      	movs	r0, #8
 8007a88:	f003 fa24 	bl	800aed4 <pvPortMalloc>
 8007a8c:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d050      	beq.n	8007b36 <osTimerNew+0xf6>
      callb->func = func;
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	68fa      	ldr	r2, [r7, #12]
 8007a98:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8007aa0:	7afb      	ldrb	r3, [r7, #11]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d102      	bne.n	8007aac <osTimerNew+0x6c>
        reload = pdFALSE;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8007aaa:	e001      	b.n	8007ab0 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8007aac:	2301      	movs	r3, #1
 8007aae:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8007ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ab4:	623b      	str	r3, [r7, #32]
      name = NULL;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d01c      	beq.n	8007afa <osTimerNew+0xba>
        if (attr->name != NULL) {
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d002      	beq.n	8007ace <osTimerNew+0x8e>
          name = attr->name;
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d006      	beq.n	8007ae4 <osTimerNew+0xa4>
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	2b2b      	cmp	r3, #43	; 0x2b
 8007adc:	d902      	bls.n	8007ae4 <osTimerNew+0xa4>
          mem = 1;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	623b      	str	r3, [r7, #32]
 8007ae2:	e00c      	b.n	8007afe <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d108      	bne.n	8007afe <osTimerNew+0xbe>
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d104      	bne.n	8007afe <osTimerNew+0xbe>
            mem = 0;
 8007af4:	2300      	movs	r3, #0
 8007af6:	623b      	str	r3, [r7, #32]
 8007af8:	e001      	b.n	8007afe <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8007afa:	2300      	movs	r3, #0
 8007afc:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8007afe:	6a3b      	ldr	r3, [r7, #32]
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d10c      	bne.n	8007b1e <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	9301      	str	r3, [sp, #4]
 8007b0a:	4b0e      	ldr	r3, [pc, #56]	; (8007b44 <osTimerNew+0x104>)
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b12:	2101      	movs	r1, #1
 8007b14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b16:	f002 fbf4 	bl	800a302 <xTimerCreateStatic>
 8007b1a:	62b8      	str	r0, [r7, #40]	; 0x28
 8007b1c:	e00b      	b.n	8007b36 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8007b1e:	6a3b      	ldr	r3, [r7, #32]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d108      	bne.n	8007b36 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8007b24:	4b07      	ldr	r3, [pc, #28]	; (8007b44 <osTimerNew+0x104>)
 8007b26:	9300      	str	r3, [sp, #0]
 8007b28:	69fb      	ldr	r3, [r7, #28]
 8007b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b2c:	2101      	movs	r1, #1
 8007b2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b30:	f002 fbc6 	bl	800a2c0 <xTimerCreate>
 8007b34:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8007b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3730      	adds	r7, #48	; 0x30
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	20001530 	.word	0x20001530
 8007b44:	08007a15 	.word	0x08007a15

08007b48 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b08a      	sub	sp, #40	; 0x28
 8007b4c:	af02      	add	r7, sp, #8
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b56:	f3ef 8305 	mrs	r3, IPSR
 8007b5a:	617b      	str	r3, [r7, #20]
  return(result);
 8007b5c:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d10f      	bne.n	8007b82 <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b62:	f3ef 8310 	mrs	r3, PRIMASK
 8007b66:	613b      	str	r3, [r7, #16]
  return(result);
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d105      	bne.n	8007b7a <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007b6e:	f3ef 8311 	mrs	r3, BASEPRI
 8007b72:	60fb      	str	r3, [r7, #12]
  return(result);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d007      	beq.n	8007b8a <osTimerStart+0x42>
 8007b7a:	4b12      	ldr	r3, [pc, #72]	; (8007bc4 <osTimerStart+0x7c>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d103      	bne.n	8007b8a <osTimerStart+0x42>
    stat = osErrorISR;
 8007b82:	f06f 0305 	mvn.w	r3, #5
 8007b86:	61fb      	str	r3, [r7, #28]
 8007b88:	e017      	b.n	8007bba <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 8007b8a:	69bb      	ldr	r3, [r7, #24]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d103      	bne.n	8007b98 <osTimerStart+0x50>
    stat = osErrorParameter;
 8007b90:	f06f 0303 	mvn.w	r3, #3
 8007b94:	61fb      	str	r3, [r7, #28]
 8007b96:	e010      	b.n	8007bba <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8007b98:	2300      	movs	r3, #0
 8007b9a:	9300      	str	r3, [sp, #0]
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	2104      	movs	r1, #4
 8007ba2:	69b8      	ldr	r0, [r7, #24]
 8007ba4:	f002 fc2c 	bl	800a400 <xTimerGenericCommand>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d102      	bne.n	8007bb4 <osTimerStart+0x6c>
      stat = osOK;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	61fb      	str	r3, [r7, #28]
 8007bb2:	e002      	b.n	8007bba <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 8007bb4:	f06f 0302 	mvn.w	r3, #2
 8007bb8:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8007bba:	69fb      	ldr	r3, [r7, #28]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3720      	adds	r7, #32
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	20001530 	.word	0x20001530

08007bc8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	4a07      	ldr	r2, [pc, #28]	; (8007bf4 <vApplicationGetIdleTaskMemory+0x2c>)
 8007bd8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	4a06      	ldr	r2, [pc, #24]	; (8007bf8 <vApplicationGetIdleTaskMemory+0x30>)
 8007bde:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2280      	movs	r2, #128	; 0x80
 8007be4:	601a      	str	r2, [r3, #0]
}
 8007be6:	bf00      	nop
 8007be8:	3714      	adds	r7, #20
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	20001534 	.word	0x20001534
 8007bf8:	200015f0 	.word	0x200015f0

08007bfc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007bfc:	b480      	push	{r7}
 8007bfe:	b085      	sub	sp, #20
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	4a07      	ldr	r2, [pc, #28]	; (8007c28 <vApplicationGetTimerTaskMemory+0x2c>)
 8007c0c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	4a06      	ldr	r2, [pc, #24]	; (8007c2c <vApplicationGetTimerTaskMemory+0x30>)
 8007c12:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c1a:	601a      	str	r2, [r3, #0]
}
 8007c1c:	bf00      	nop
 8007c1e:	3714      	adds	r7, #20
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr
 8007c28:	200017f0 	.word	0x200017f0
 8007c2c:	200018ac 	.word	0x200018ac

08007c30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f103 0208 	add.w	r2, r3, #8
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f04f 32ff 	mov.w	r2, #4294967295
 8007c48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f103 0208 	add.w	r2, r3, #8
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f103 0208 	add.w	r2, r3, #8
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007c64:	bf00      	nop
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007c7e:	bf00      	nop
 8007c80:	370c      	adds	r7, #12
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr

08007c8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c8a:	b480      	push	{r7}
 8007c8c:	b085      	sub	sp, #20
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
 8007c92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	68fa      	ldr	r2, [r7, #12]
 8007c9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	689a      	ldr	r2, [r3, #8]
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	683a      	ldr	r2, [r7, #0]
 8007cae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	683a      	ldr	r2, [r7, #0]
 8007cb4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	1c5a      	adds	r2, r3, #1
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	601a      	str	r2, [r3, #0]
}
 8007cc6:	bf00      	nop
 8007cc8:	3714      	adds	r7, #20
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr

08007cd2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007cd2:	b480      	push	{r7}
 8007cd4:	b085      	sub	sp, #20
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
 8007cda:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ce8:	d103      	bne.n	8007cf2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	60fb      	str	r3, [r7, #12]
 8007cf0:	e00c      	b.n	8007d0c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	3308      	adds	r3, #8
 8007cf6:	60fb      	str	r3, [r7, #12]
 8007cf8:	e002      	b.n	8007d00 <vListInsert+0x2e>
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	60fb      	str	r3, [r7, #12]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68ba      	ldr	r2, [r7, #8]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d2f6      	bcs.n	8007cfa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	685a      	ldr	r2, [r3, #4]
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	683a      	ldr	r2, [r7, #0]
 8007d1a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	683a      	ldr	r2, [r7, #0]
 8007d26:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	1c5a      	adds	r2, r3, #1
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	601a      	str	r2, [r3, #0]
}
 8007d38:	bf00      	nop
 8007d3a:	3714      	adds	r7, #20
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	691b      	ldr	r3, [r3, #16]
 8007d50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	6892      	ldr	r2, [r2, #8]
 8007d5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	6852      	ldr	r2, [r2, #4]
 8007d64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d103      	bne.n	8007d78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	689a      	ldr	r2, [r3, #8]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	1e5a      	subs	r2, r3, #1
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3714      	adds	r7, #20
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d10c      	bne.n	8007dc6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db0:	b672      	cpsid	i
 8007db2:	f383 8811 	msr	BASEPRI, r3
 8007db6:	f3bf 8f6f 	isb	sy
 8007dba:	f3bf 8f4f 	dsb	sy
 8007dbe:	b662      	cpsie	i
 8007dc0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007dc2:	bf00      	nop
 8007dc4:	e7fe      	b.n	8007dc4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007dc6:	f002 ff59 	bl	800ac7c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dd2:	68f9      	ldr	r1, [r7, #12]
 8007dd4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007dd6:	fb01 f303 	mul.w	r3, r1, r3
 8007dda:	441a      	add	r2, r3
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2200      	movs	r2, #0
 8007de4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007df6:	3b01      	subs	r3, #1
 8007df8:	68f9      	ldr	r1, [r7, #12]
 8007dfa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007dfc:	fb01 f303 	mul.w	r3, r1, r3
 8007e00:	441a      	add	r2, r3
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	22ff      	movs	r2, #255	; 0xff
 8007e0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	22ff      	movs	r2, #255	; 0xff
 8007e12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d114      	bne.n	8007e46 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	691b      	ldr	r3, [r3, #16]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d01a      	beq.n	8007e5a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	3310      	adds	r3, #16
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f001 fcd3 	bl	80097d4 <xTaskRemoveFromEventList>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d012      	beq.n	8007e5a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007e34:	4b0c      	ldr	r3, [pc, #48]	; (8007e68 <xQueueGenericReset+0xd0>)
 8007e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e3a:	601a      	str	r2, [r3, #0]
 8007e3c:	f3bf 8f4f 	dsb	sy
 8007e40:	f3bf 8f6f 	isb	sy
 8007e44:	e009      	b.n	8007e5a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	3310      	adds	r3, #16
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7ff fef0 	bl	8007c30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	3324      	adds	r3, #36	; 0x24
 8007e54:	4618      	mov	r0, r3
 8007e56:	f7ff feeb 	bl	8007c30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007e5a:	f002 ff43 	bl	800ace4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007e5e:	2301      	movs	r3, #1
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3710      	adds	r7, #16
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	e000ed04 	.word	0xe000ed04

08007e6c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b08e      	sub	sp, #56	; 0x38
 8007e70:	af02      	add	r7, sp, #8
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	607a      	str	r2, [r7, #4]
 8007e78:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d10c      	bne.n	8007e9a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8007e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e84:	b672      	cpsid	i
 8007e86:	f383 8811 	msr	BASEPRI, r3
 8007e8a:	f3bf 8f6f 	isb	sy
 8007e8e:	f3bf 8f4f 	dsb	sy
 8007e92:	b662      	cpsie	i
 8007e94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007e96:	bf00      	nop
 8007e98:	e7fe      	b.n	8007e98 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d10c      	bne.n	8007eba <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8007ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea4:	b672      	cpsid	i
 8007ea6:	f383 8811 	msr	BASEPRI, r3
 8007eaa:	f3bf 8f6f 	isb	sy
 8007eae:	f3bf 8f4f 	dsb	sy
 8007eb2:	b662      	cpsie	i
 8007eb4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007eb6:	bf00      	nop
 8007eb8:	e7fe      	b.n	8007eb8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d002      	beq.n	8007ec6 <xQueueGenericCreateStatic+0x5a>
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d001      	beq.n	8007eca <xQueueGenericCreateStatic+0x5e>
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e000      	b.n	8007ecc <xQueueGenericCreateStatic+0x60>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d10c      	bne.n	8007eea <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8007ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed4:	b672      	cpsid	i
 8007ed6:	f383 8811 	msr	BASEPRI, r3
 8007eda:	f3bf 8f6f 	isb	sy
 8007ede:	f3bf 8f4f 	dsb	sy
 8007ee2:	b662      	cpsie	i
 8007ee4:	623b      	str	r3, [r7, #32]
}
 8007ee6:	bf00      	nop
 8007ee8:	e7fe      	b.n	8007ee8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d102      	bne.n	8007ef6 <xQueueGenericCreateStatic+0x8a>
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d101      	bne.n	8007efa <xQueueGenericCreateStatic+0x8e>
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e000      	b.n	8007efc <xQueueGenericCreateStatic+0x90>
 8007efa:	2300      	movs	r3, #0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d10c      	bne.n	8007f1a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8007f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f04:	b672      	cpsid	i
 8007f06:	f383 8811 	msr	BASEPRI, r3
 8007f0a:	f3bf 8f6f 	isb	sy
 8007f0e:	f3bf 8f4f 	dsb	sy
 8007f12:	b662      	cpsie	i
 8007f14:	61fb      	str	r3, [r7, #28]
}
 8007f16:	bf00      	nop
 8007f18:	e7fe      	b.n	8007f18 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007f1a:	2350      	movs	r3, #80	; 0x50
 8007f1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	2b50      	cmp	r3, #80	; 0x50
 8007f22:	d00c      	beq.n	8007f3e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f28:	b672      	cpsid	i
 8007f2a:	f383 8811 	msr	BASEPRI, r3
 8007f2e:	f3bf 8f6f 	isb	sy
 8007f32:	f3bf 8f4f 	dsb	sy
 8007f36:	b662      	cpsie	i
 8007f38:	61bb      	str	r3, [r7, #24]
}
 8007f3a:	bf00      	nop
 8007f3c:	e7fe      	b.n	8007f3c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007f3e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00d      	beq.n	8007f66 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007f52:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f58:	9300      	str	r3, [sp, #0]
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	68b9      	ldr	r1, [r7, #8]
 8007f60:	68f8      	ldr	r0, [r7, #12]
 8007f62:	f000 f805 	bl	8007f70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3730      	adds	r7, #48	; 0x30
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
 8007f7c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d103      	bne.n	8007f8c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	69ba      	ldr	r2, [r7, #24]
 8007f88:	601a      	str	r2, [r3, #0]
 8007f8a:	e002      	b.n	8007f92 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	68ba      	ldr	r2, [r7, #8]
 8007f9c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007f9e:	2101      	movs	r1, #1
 8007fa0:	69b8      	ldr	r0, [r7, #24]
 8007fa2:	f7ff fef9 	bl	8007d98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	78fa      	ldrb	r2, [r7, #3]
 8007faa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007fae:	bf00      	nop
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
	...

08007fb8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b08e      	sub	sp, #56	; 0x38
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	607a      	str	r2, [r7, #4]
 8007fc4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d10c      	bne.n	8007fee <xQueueGenericSend+0x36>
	__asm volatile
 8007fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd8:	b672      	cpsid	i
 8007fda:	f383 8811 	msr	BASEPRI, r3
 8007fde:	f3bf 8f6f 	isb	sy
 8007fe2:	f3bf 8f4f 	dsb	sy
 8007fe6:	b662      	cpsie	i
 8007fe8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007fea:	bf00      	nop
 8007fec:	e7fe      	b.n	8007fec <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d103      	bne.n	8007ffc <xQueueGenericSend+0x44>
 8007ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d101      	bne.n	8008000 <xQueueGenericSend+0x48>
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e000      	b.n	8008002 <xQueueGenericSend+0x4a>
 8008000:	2300      	movs	r3, #0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d10c      	bne.n	8008020 <xQueueGenericSend+0x68>
	__asm volatile
 8008006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800800a:	b672      	cpsid	i
 800800c:	f383 8811 	msr	BASEPRI, r3
 8008010:	f3bf 8f6f 	isb	sy
 8008014:	f3bf 8f4f 	dsb	sy
 8008018:	b662      	cpsie	i
 800801a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800801c:	bf00      	nop
 800801e:	e7fe      	b.n	800801e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	2b02      	cmp	r3, #2
 8008024:	d103      	bne.n	800802e <xQueueGenericSend+0x76>
 8008026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800802a:	2b01      	cmp	r3, #1
 800802c:	d101      	bne.n	8008032 <xQueueGenericSend+0x7a>
 800802e:	2301      	movs	r3, #1
 8008030:	e000      	b.n	8008034 <xQueueGenericSend+0x7c>
 8008032:	2300      	movs	r3, #0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d10c      	bne.n	8008052 <xQueueGenericSend+0x9a>
	__asm volatile
 8008038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800803c:	b672      	cpsid	i
 800803e:	f383 8811 	msr	BASEPRI, r3
 8008042:	f3bf 8f6f 	isb	sy
 8008046:	f3bf 8f4f 	dsb	sy
 800804a:	b662      	cpsie	i
 800804c:	623b      	str	r3, [r7, #32]
}
 800804e:	bf00      	nop
 8008050:	e7fe      	b.n	8008050 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008052:	f001 fdd1 	bl	8009bf8 <xTaskGetSchedulerState>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d102      	bne.n	8008062 <xQueueGenericSend+0xaa>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d101      	bne.n	8008066 <xQueueGenericSend+0xae>
 8008062:	2301      	movs	r3, #1
 8008064:	e000      	b.n	8008068 <xQueueGenericSend+0xb0>
 8008066:	2300      	movs	r3, #0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d10c      	bne.n	8008086 <xQueueGenericSend+0xce>
	__asm volatile
 800806c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008070:	b672      	cpsid	i
 8008072:	f383 8811 	msr	BASEPRI, r3
 8008076:	f3bf 8f6f 	isb	sy
 800807a:	f3bf 8f4f 	dsb	sy
 800807e:	b662      	cpsie	i
 8008080:	61fb      	str	r3, [r7, #28]
}
 8008082:	bf00      	nop
 8008084:	e7fe      	b.n	8008084 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008086:	f002 fdf9 	bl	800ac7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800808a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800808e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008092:	429a      	cmp	r2, r3
 8008094:	d302      	bcc.n	800809c <xQueueGenericSend+0xe4>
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	2b02      	cmp	r3, #2
 800809a:	d129      	bne.n	80080f0 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800809c:	683a      	ldr	r2, [r7, #0]
 800809e:	68b9      	ldr	r1, [r7, #8]
 80080a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080a2:	f000 fa15 	bl	80084d0 <prvCopyDataToQueue>
 80080a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d010      	beq.n	80080d2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b2:	3324      	adds	r3, #36	; 0x24
 80080b4:	4618      	mov	r0, r3
 80080b6:	f001 fb8d 	bl	80097d4 <xTaskRemoveFromEventList>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d013      	beq.n	80080e8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80080c0:	4b3f      	ldr	r3, [pc, #252]	; (80081c0 <xQueueGenericSend+0x208>)
 80080c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080c6:	601a      	str	r2, [r3, #0]
 80080c8:	f3bf 8f4f 	dsb	sy
 80080cc:	f3bf 8f6f 	isb	sy
 80080d0:	e00a      	b.n	80080e8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80080d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d007      	beq.n	80080e8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80080d8:	4b39      	ldr	r3, [pc, #228]	; (80081c0 <xQueueGenericSend+0x208>)
 80080da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080de:	601a      	str	r2, [r3, #0]
 80080e0:	f3bf 8f4f 	dsb	sy
 80080e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80080e8:	f002 fdfc 	bl	800ace4 <vPortExitCritical>
				return pdPASS;
 80080ec:	2301      	movs	r3, #1
 80080ee:	e063      	b.n	80081b8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d103      	bne.n	80080fe <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80080f6:	f002 fdf5 	bl	800ace4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80080fa:	2300      	movs	r3, #0
 80080fc:	e05c      	b.n	80081b8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80080fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008100:	2b00      	cmp	r3, #0
 8008102:	d106      	bne.n	8008112 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008104:	f107 0314 	add.w	r3, r7, #20
 8008108:	4618      	mov	r0, r3
 800810a:	f001 fbc9 	bl	80098a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800810e:	2301      	movs	r3, #1
 8008110:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008112:	f002 fde7 	bl	800ace4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008116:	f001 f917 	bl	8009348 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800811a:	f002 fdaf 	bl	800ac7c <vPortEnterCritical>
 800811e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008120:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008124:	b25b      	sxtb	r3, r3
 8008126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800812a:	d103      	bne.n	8008134 <xQueueGenericSend+0x17c>
 800812c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812e:	2200      	movs	r2, #0
 8008130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008136:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800813a:	b25b      	sxtb	r3, r3
 800813c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008140:	d103      	bne.n	800814a <xQueueGenericSend+0x192>
 8008142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008144:	2200      	movs	r2, #0
 8008146:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800814a:	f002 fdcb 	bl	800ace4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800814e:	1d3a      	adds	r2, r7, #4
 8008150:	f107 0314 	add.w	r3, r7, #20
 8008154:	4611      	mov	r1, r2
 8008156:	4618      	mov	r0, r3
 8008158:	f001 fbb8 	bl	80098cc <xTaskCheckForTimeOut>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d124      	bne.n	80081ac <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008162:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008164:	f000 faac 	bl	80086c0 <prvIsQueueFull>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d018      	beq.n	80081a0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800816e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008170:	3310      	adds	r3, #16
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	4611      	mov	r1, r2
 8008176:	4618      	mov	r0, r3
 8008178:	f001 fad8 	bl	800972c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800817c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800817e:	f000 fa37 	bl	80085f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008182:	f001 f8ef 	bl	8009364 <xTaskResumeAll>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	f47f af7c 	bne.w	8008086 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800818e:	4b0c      	ldr	r3, [pc, #48]	; (80081c0 <xQueueGenericSend+0x208>)
 8008190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008194:	601a      	str	r2, [r3, #0]
 8008196:	f3bf 8f4f 	dsb	sy
 800819a:	f3bf 8f6f 	isb	sy
 800819e:	e772      	b.n	8008086 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80081a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081a2:	f000 fa25 	bl	80085f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081a6:	f001 f8dd 	bl	8009364 <xTaskResumeAll>
 80081aa:	e76c      	b.n	8008086 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80081ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081ae:	f000 fa1f 	bl	80085f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081b2:	f001 f8d7 	bl	8009364 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80081b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3738      	adds	r7, #56	; 0x38
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}
 80081c0:	e000ed04 	.word	0xe000ed04

080081c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b08e      	sub	sp, #56	; 0x38
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	607a      	str	r2, [r7, #4]
 80081d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80081d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d10c      	bne.n	80081f6 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80081dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e0:	b672      	cpsid	i
 80081e2:	f383 8811 	msr	BASEPRI, r3
 80081e6:	f3bf 8f6f 	isb	sy
 80081ea:	f3bf 8f4f 	dsb	sy
 80081ee:	b662      	cpsie	i
 80081f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80081f2:	bf00      	nop
 80081f4:	e7fe      	b.n	80081f4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d103      	bne.n	8008204 <xQueueGenericSendFromISR+0x40>
 80081fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008200:	2b00      	cmp	r3, #0
 8008202:	d101      	bne.n	8008208 <xQueueGenericSendFromISR+0x44>
 8008204:	2301      	movs	r3, #1
 8008206:	e000      	b.n	800820a <xQueueGenericSendFromISR+0x46>
 8008208:	2300      	movs	r3, #0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d10c      	bne.n	8008228 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800820e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008212:	b672      	cpsid	i
 8008214:	f383 8811 	msr	BASEPRI, r3
 8008218:	f3bf 8f6f 	isb	sy
 800821c:	f3bf 8f4f 	dsb	sy
 8008220:	b662      	cpsie	i
 8008222:	623b      	str	r3, [r7, #32]
}
 8008224:	bf00      	nop
 8008226:	e7fe      	b.n	8008226 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	2b02      	cmp	r3, #2
 800822c:	d103      	bne.n	8008236 <xQueueGenericSendFromISR+0x72>
 800822e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008232:	2b01      	cmp	r3, #1
 8008234:	d101      	bne.n	800823a <xQueueGenericSendFromISR+0x76>
 8008236:	2301      	movs	r3, #1
 8008238:	e000      	b.n	800823c <xQueueGenericSendFromISR+0x78>
 800823a:	2300      	movs	r3, #0
 800823c:	2b00      	cmp	r3, #0
 800823e:	d10c      	bne.n	800825a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8008240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008244:	b672      	cpsid	i
 8008246:	f383 8811 	msr	BASEPRI, r3
 800824a:	f3bf 8f6f 	isb	sy
 800824e:	f3bf 8f4f 	dsb	sy
 8008252:	b662      	cpsie	i
 8008254:	61fb      	str	r3, [r7, #28]
}
 8008256:	bf00      	nop
 8008258:	e7fe      	b.n	8008258 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800825a:	f002 fdf7 	bl	800ae4c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800825e:	f3ef 8211 	mrs	r2, BASEPRI
 8008262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008266:	b672      	cpsid	i
 8008268:	f383 8811 	msr	BASEPRI, r3
 800826c:	f3bf 8f6f 	isb	sy
 8008270:	f3bf 8f4f 	dsb	sy
 8008274:	b662      	cpsie	i
 8008276:	61ba      	str	r2, [r7, #24]
 8008278:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800827a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800827c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800827e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008286:	429a      	cmp	r2, r3
 8008288:	d302      	bcc.n	8008290 <xQueueGenericSendFromISR+0xcc>
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	2b02      	cmp	r3, #2
 800828e:	d12c      	bne.n	80082ea <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008292:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800829a:	683a      	ldr	r2, [r7, #0]
 800829c:	68b9      	ldr	r1, [r7, #8]
 800829e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082a0:	f000 f916 	bl	80084d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80082a4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80082a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ac:	d112      	bne.n	80082d4 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d016      	beq.n	80082e4 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b8:	3324      	adds	r3, #36	; 0x24
 80082ba:	4618      	mov	r0, r3
 80082bc:	f001 fa8a 	bl	80097d4 <xTaskRemoveFromEventList>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d00e      	beq.n	80082e4 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00b      	beq.n	80082e4 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	601a      	str	r2, [r3, #0]
 80082d2:	e007      	b.n	80082e4 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80082d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80082d8:	3301      	adds	r3, #1
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	b25a      	sxtb	r2, r3
 80082de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80082e4:	2301      	movs	r3, #1
 80082e6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80082e8:	e001      	b.n	80082ee <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80082ea:	2300      	movs	r3, #0
 80082ec:	637b      	str	r3, [r7, #52]	; 0x34
 80082ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80082f8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80082fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3738      	adds	r7, #56	; 0x38
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b08c      	sub	sp, #48	; 0x30
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008310:	2300      	movs	r3, #0
 8008312:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800831a:	2b00      	cmp	r3, #0
 800831c:	d10c      	bne.n	8008338 <xQueueReceive+0x34>
	__asm volatile
 800831e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008322:	b672      	cpsid	i
 8008324:	f383 8811 	msr	BASEPRI, r3
 8008328:	f3bf 8f6f 	isb	sy
 800832c:	f3bf 8f4f 	dsb	sy
 8008330:	b662      	cpsie	i
 8008332:	623b      	str	r3, [r7, #32]
}
 8008334:	bf00      	nop
 8008336:	e7fe      	b.n	8008336 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d103      	bne.n	8008346 <xQueueReceive+0x42>
 800833e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008342:	2b00      	cmp	r3, #0
 8008344:	d101      	bne.n	800834a <xQueueReceive+0x46>
 8008346:	2301      	movs	r3, #1
 8008348:	e000      	b.n	800834c <xQueueReceive+0x48>
 800834a:	2300      	movs	r3, #0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10c      	bne.n	800836a <xQueueReceive+0x66>
	__asm volatile
 8008350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008354:	b672      	cpsid	i
 8008356:	f383 8811 	msr	BASEPRI, r3
 800835a:	f3bf 8f6f 	isb	sy
 800835e:	f3bf 8f4f 	dsb	sy
 8008362:	b662      	cpsie	i
 8008364:	61fb      	str	r3, [r7, #28]
}
 8008366:	bf00      	nop
 8008368:	e7fe      	b.n	8008368 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800836a:	f001 fc45 	bl	8009bf8 <xTaskGetSchedulerState>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d102      	bne.n	800837a <xQueueReceive+0x76>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d101      	bne.n	800837e <xQueueReceive+0x7a>
 800837a:	2301      	movs	r3, #1
 800837c:	e000      	b.n	8008380 <xQueueReceive+0x7c>
 800837e:	2300      	movs	r3, #0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d10c      	bne.n	800839e <xQueueReceive+0x9a>
	__asm volatile
 8008384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008388:	b672      	cpsid	i
 800838a:	f383 8811 	msr	BASEPRI, r3
 800838e:	f3bf 8f6f 	isb	sy
 8008392:	f3bf 8f4f 	dsb	sy
 8008396:	b662      	cpsie	i
 8008398:	61bb      	str	r3, [r7, #24]
}
 800839a:	bf00      	nop
 800839c:	e7fe      	b.n	800839c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800839e:	f002 fc6d 	bl	800ac7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80083a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d01f      	beq.n	80083ee <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80083ae:	68b9      	ldr	r1, [r7, #8]
 80083b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083b2:	f000 f8f7 	bl	80085a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80083b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b8:	1e5a      	subs	r2, r3, #1
 80083ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c0:	691b      	ldr	r3, [r3, #16]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00f      	beq.n	80083e6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c8:	3310      	adds	r3, #16
 80083ca:	4618      	mov	r0, r3
 80083cc:	f001 fa02 	bl	80097d4 <xTaskRemoveFromEventList>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d007      	beq.n	80083e6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80083d6:	4b3d      	ldr	r3, [pc, #244]	; (80084cc <xQueueReceive+0x1c8>)
 80083d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083dc:	601a      	str	r2, [r3, #0]
 80083de:	f3bf 8f4f 	dsb	sy
 80083e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80083e6:	f002 fc7d 	bl	800ace4 <vPortExitCritical>
				return pdPASS;
 80083ea:	2301      	movs	r3, #1
 80083ec:	e069      	b.n	80084c2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d103      	bne.n	80083fc <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80083f4:	f002 fc76 	bl	800ace4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80083f8:	2300      	movs	r3, #0
 80083fa:	e062      	b.n	80084c2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d106      	bne.n	8008410 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008402:	f107 0310 	add.w	r3, r7, #16
 8008406:	4618      	mov	r0, r3
 8008408:	f001 fa4a 	bl	80098a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800840c:	2301      	movs	r3, #1
 800840e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008410:	f002 fc68 	bl	800ace4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008414:	f000 ff98 	bl	8009348 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008418:	f002 fc30 	bl	800ac7c <vPortEnterCritical>
 800841c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008422:	b25b      	sxtb	r3, r3
 8008424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008428:	d103      	bne.n	8008432 <xQueueReceive+0x12e>
 800842a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842c:	2200      	movs	r2, #0
 800842e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008434:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008438:	b25b      	sxtb	r3, r3
 800843a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800843e:	d103      	bne.n	8008448 <xQueueReceive+0x144>
 8008440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008442:	2200      	movs	r2, #0
 8008444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008448:	f002 fc4c 	bl	800ace4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800844c:	1d3a      	adds	r2, r7, #4
 800844e:	f107 0310 	add.w	r3, r7, #16
 8008452:	4611      	mov	r1, r2
 8008454:	4618      	mov	r0, r3
 8008456:	f001 fa39 	bl	80098cc <xTaskCheckForTimeOut>
 800845a:	4603      	mov	r3, r0
 800845c:	2b00      	cmp	r3, #0
 800845e:	d123      	bne.n	80084a8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008460:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008462:	f000 f917 	bl	8008694 <prvIsQueueEmpty>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d017      	beq.n	800849c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800846c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846e:	3324      	adds	r3, #36	; 0x24
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	4611      	mov	r1, r2
 8008474:	4618      	mov	r0, r3
 8008476:	f001 f959 	bl	800972c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800847a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800847c:	f000 f8b8 	bl	80085f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008480:	f000 ff70 	bl	8009364 <xTaskResumeAll>
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d189      	bne.n	800839e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800848a:	4b10      	ldr	r3, [pc, #64]	; (80084cc <xQueueReceive+0x1c8>)
 800848c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008490:	601a      	str	r2, [r3, #0]
 8008492:	f3bf 8f4f 	dsb	sy
 8008496:	f3bf 8f6f 	isb	sy
 800849a:	e780      	b.n	800839e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800849c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800849e:	f000 f8a7 	bl	80085f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084a2:	f000 ff5f 	bl	8009364 <xTaskResumeAll>
 80084a6:	e77a      	b.n	800839e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80084a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084aa:	f000 f8a1 	bl	80085f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084ae:	f000 ff59 	bl	8009364 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084b4:	f000 f8ee 	bl	8008694 <prvIsQueueEmpty>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	f43f af6f 	beq.w	800839e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80084c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3730      	adds	r7, #48	; 0x30
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	bf00      	nop
 80084cc:	e000ed04 	.word	0xe000ed04

080084d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b086      	sub	sp, #24
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80084dc:	2300      	movs	r3, #0
 80084de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d10d      	bne.n	800850a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d14d      	bne.n	8008592 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	4618      	mov	r0, r3
 80084fc:	f001 fb9a 	bl	8009c34 <xTaskPriorityDisinherit>
 8008500:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2200      	movs	r2, #0
 8008506:	609a      	str	r2, [r3, #8]
 8008508:	e043      	b.n	8008592 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d119      	bne.n	8008544 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6858      	ldr	r0, [r3, #4]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008518:	461a      	mov	r2, r3
 800851a:	68b9      	ldr	r1, [r7, #8]
 800851c:	f002 fee4 	bl	800b2e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	685a      	ldr	r2, [r3, #4]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008528:	441a      	add	r2, r3
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	685a      	ldr	r2, [r3, #4]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	429a      	cmp	r2, r3
 8008538:	d32b      	bcc.n	8008592 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	605a      	str	r2, [r3, #4]
 8008542:	e026      	b.n	8008592 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	68d8      	ldr	r0, [r3, #12]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854c:	461a      	mov	r2, r3
 800854e:	68b9      	ldr	r1, [r7, #8]
 8008550:	f002 feca 	bl	800b2e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	68da      	ldr	r2, [r3, #12]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800855c:	425b      	negs	r3, r3
 800855e:	441a      	add	r2, r3
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	68da      	ldr	r2, [r3, #12]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	429a      	cmp	r2, r3
 800856e:	d207      	bcs.n	8008580 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	689a      	ldr	r2, [r3, #8]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008578:	425b      	negs	r3, r3
 800857a:	441a      	add	r2, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2b02      	cmp	r3, #2
 8008584:	d105      	bne.n	8008592 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d002      	beq.n	8008592 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	3b01      	subs	r3, #1
 8008590:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	1c5a      	adds	r2, r3, #1
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800859a:	697b      	ldr	r3, [r7, #20]
}
 800859c:	4618      	mov	r0, r3
 800859e:	3718      	adds	r7, #24
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d018      	beq.n	80085e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	68da      	ldr	r2, [r3, #12]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085be:	441a      	add	r2, r3
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	68da      	ldr	r2, [r3, #12]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d303      	bcc.n	80085d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	68d9      	ldr	r1, [r3, #12]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e0:	461a      	mov	r2, r3
 80085e2:	6838      	ldr	r0, [r7, #0]
 80085e4:	f002 fe80 	bl	800b2e8 <memcpy>
	}
}
 80085e8:	bf00      	nop
 80085ea:	3708      	adds	r7, #8
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80085f8:	f002 fb40 	bl	800ac7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008602:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008604:	e011      	b.n	800862a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860a:	2b00      	cmp	r3, #0
 800860c:	d012      	beq.n	8008634 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	3324      	adds	r3, #36	; 0x24
 8008612:	4618      	mov	r0, r3
 8008614:	f001 f8de 	bl	80097d4 <xTaskRemoveFromEventList>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d001      	beq.n	8008622 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800861e:	f001 f9bb 	bl	8009998 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008622:	7bfb      	ldrb	r3, [r7, #15]
 8008624:	3b01      	subs	r3, #1
 8008626:	b2db      	uxtb	r3, r3
 8008628:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800862a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800862e:	2b00      	cmp	r3, #0
 8008630:	dce9      	bgt.n	8008606 <prvUnlockQueue+0x16>
 8008632:	e000      	b.n	8008636 <prvUnlockQueue+0x46>
					break;
 8008634:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	22ff      	movs	r2, #255	; 0xff
 800863a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800863e:	f002 fb51 	bl	800ace4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008642:	f002 fb1b 	bl	800ac7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800864c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800864e:	e011      	b.n	8008674 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d012      	beq.n	800867e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	3310      	adds	r3, #16
 800865c:	4618      	mov	r0, r3
 800865e:	f001 f8b9 	bl	80097d4 <xTaskRemoveFromEventList>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d001      	beq.n	800866c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008668:	f001 f996 	bl	8009998 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800866c:	7bbb      	ldrb	r3, [r7, #14]
 800866e:	3b01      	subs	r3, #1
 8008670:	b2db      	uxtb	r3, r3
 8008672:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008674:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008678:	2b00      	cmp	r3, #0
 800867a:	dce9      	bgt.n	8008650 <prvUnlockQueue+0x60>
 800867c:	e000      	b.n	8008680 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800867e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	22ff      	movs	r2, #255	; 0xff
 8008684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008688:	f002 fb2c 	bl	800ace4 <vPortExitCritical>
}
 800868c:	bf00      	nop
 800868e:	3710      	adds	r7, #16
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800869c:	f002 faee 	bl	800ac7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d102      	bne.n	80086ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80086a8:	2301      	movs	r3, #1
 80086aa:	60fb      	str	r3, [r7, #12]
 80086ac:	e001      	b.n	80086b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80086ae:	2300      	movs	r3, #0
 80086b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80086b2:	f002 fb17 	bl	800ace4 <vPortExitCritical>

	return xReturn;
 80086b6:	68fb      	ldr	r3, [r7, #12]
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3710      	adds	r7, #16
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086c8:	f002 fad8 	bl	800ac7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d102      	bne.n	80086de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80086d8:	2301      	movs	r3, #1
 80086da:	60fb      	str	r3, [r7, #12]
 80086dc:	e001      	b.n	80086e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80086de:	2300      	movs	r3, #0
 80086e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80086e2:	f002 faff 	bl	800ace4 <vPortExitCritical>

	return xReturn;
 80086e6:	68fb      	ldr	r3, [r7, #12]
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3710      	adds	r7, #16
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80086f0:	b480      	push	{r7}
 80086f2:	b085      	sub	sp, #20
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80086fa:	2300      	movs	r3, #0
 80086fc:	60fb      	str	r3, [r7, #12]
 80086fe:	e014      	b.n	800872a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008700:	4a0f      	ldr	r2, [pc, #60]	; (8008740 <vQueueAddToRegistry+0x50>)
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d10b      	bne.n	8008724 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800870c:	490c      	ldr	r1, [pc, #48]	; (8008740 <vQueueAddToRegistry+0x50>)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	683a      	ldr	r2, [r7, #0]
 8008712:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008716:	4a0a      	ldr	r2, [pc, #40]	; (8008740 <vQueueAddToRegistry+0x50>)
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	00db      	lsls	r3, r3, #3
 800871c:	4413      	add	r3, r2
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008722:	e006      	b.n	8008732 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	3301      	adds	r3, #1
 8008728:	60fb      	str	r3, [r7, #12]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2b07      	cmp	r3, #7
 800872e:	d9e7      	bls.n	8008700 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008730:	bf00      	nop
 8008732:	bf00      	nop
 8008734:	3714      	adds	r7, #20
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr
 800873e:	bf00      	nop
 8008740:	20001cac 	.word	0x20001cac

08008744 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008744:	b580      	push	{r7, lr}
 8008746:	b086      	sub	sp, #24
 8008748:	af00      	add	r7, sp, #0
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	60b9      	str	r1, [r7, #8]
 800874e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008754:	f002 fa92 	bl	800ac7c <vPortEnterCritical>
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800875e:	b25b      	sxtb	r3, r3
 8008760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008764:	d103      	bne.n	800876e <vQueueWaitForMessageRestricted+0x2a>
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	2200      	movs	r2, #0
 800876a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008774:	b25b      	sxtb	r3, r3
 8008776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800877a:	d103      	bne.n	8008784 <vQueueWaitForMessageRestricted+0x40>
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	2200      	movs	r2, #0
 8008780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008784:	f002 faae 	bl	800ace4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800878c:	2b00      	cmp	r3, #0
 800878e:	d106      	bne.n	800879e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	3324      	adds	r3, #36	; 0x24
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	68b9      	ldr	r1, [r7, #8]
 8008798:	4618      	mov	r0, r3
 800879a:	f000 ffed 	bl	8009778 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800879e:	6978      	ldr	r0, [r7, #20]
 80087a0:	f7ff ff26 	bl	80085f0 <prvUnlockQueue>
	}
 80087a4:	bf00      	nop
 80087a6:	3718      	adds	r7, #24
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b08c      	sub	sp, #48	; 0x30
 80087b0:	af02      	add	r7, sp, #8
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	60b9      	str	r1, [r7, #8]
 80087b6:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d112      	bne.n	80087e4 <xStreamBufferGenericCreate+0x38>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 80087be:	2301      	movs	r3, #1
 80087c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2b04      	cmp	r3, #4
 80087c8:	d81f      	bhi.n	800880a <xStreamBufferGenericCreate+0x5e>
	__asm volatile
 80087ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ce:	b672      	cpsid	i
 80087d0:	f383 8811 	msr	BASEPRI, r3
 80087d4:	f3bf 8f6f 	isb	sy
 80087d8:	f3bf 8f4f 	dsb	sy
 80087dc:	b662      	cpsie	i
 80087de:	61fb      	str	r3, [r7, #28]
}
 80087e0:	bf00      	nop
 80087e2:	e7fe      	b.n	80087e2 <xStreamBufferGenericCreate+0x36>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 80087e4:	2300      	movs	r3, #0
 80087e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d10c      	bne.n	800880a <xStreamBufferGenericCreate+0x5e>
	__asm volatile
 80087f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f4:	b672      	cpsid	i
 80087f6:	f383 8811 	msr	BASEPRI, r3
 80087fa:	f3bf 8f6f 	isb	sy
 80087fe:	f3bf 8f4f 	dsb	sy
 8008802:	b662      	cpsie	i
 8008804:	61bb      	str	r3, [r7, #24]
}
 8008806:	bf00      	nop
 8008808:	e7fe      	b.n	8008808 <xStreamBufferGenericCreate+0x5c>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	429a      	cmp	r2, r3
 8008810:	d90c      	bls.n	800882c <xStreamBufferGenericCreate+0x80>
	__asm volatile
 8008812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008816:	b672      	cpsid	i
 8008818:	f383 8811 	msr	BASEPRI, r3
 800881c:	f3bf 8f6f 	isb	sy
 8008820:	f3bf 8f4f 	dsb	sy
 8008824:	b662      	cpsie	i
 8008826:	617b      	str	r3, [r7, #20]
}
 8008828:	bf00      	nop
 800882a:	e7fe      	b.n	800882a <xStreamBufferGenericCreate+0x7e>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d101      	bne.n	8008836 <xStreamBufferGenericCreate+0x8a>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8008832:	2301      	movs	r3, #1
 8008834:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	3301      	adds	r3, #1
 800883a:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	3324      	adds	r3, #36	; 0x24
 8008840:	4618      	mov	r0, r3
 8008842:	f002 fb47 	bl	800aed4 <pvPortMalloc>
 8008846:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 8008848:	6a3b      	ldr	r3, [r7, #32]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d00a      	beq.n	8008864 <xStreamBufferGenericCreate+0xb8>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 800884e:	6a3b      	ldr	r3, [r7, #32]
 8008850:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8008854:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008858:	9300      	str	r3, [sp, #0]
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	6a38      	ldr	r0, [r7, #32]
 8008860:	f000 fad3 	bl	8008e0a <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8008864:	6a3b      	ldr	r3, [r7, #32]
	}
 8008866:	4618      	mov	r0, r3
 8008868:	3728      	adds	r7, #40	; 0x28
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 800886e:	b480      	push	{r7}
 8008870:	b087      	sub	sp, #28
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d10c      	bne.n	800889a <xStreamBufferSpacesAvailable+0x2c>
	__asm volatile
 8008880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008884:	b672      	cpsid	i
 8008886:	f383 8811 	msr	BASEPRI, r3
 800888a:	f3bf 8f6f 	isb	sy
 800888e:	f3bf 8f4f 	dsb	sy
 8008892:	b662      	cpsie	i
 8008894:	60fb      	str	r3, [r7, #12]
}
 8008896:	bf00      	nop
 8008898:	e7fe      	b.n	8008898 <xStreamBufferSpacesAvailable+0x2a>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	689a      	ldr	r2, [r3, #8]
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4413      	add	r3, r2
 80088a4:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	697a      	ldr	r2, [r7, #20]
 80088ac:	1ad3      	subs	r3, r2, r3
 80088ae:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	3b01      	subs	r3, #1
 80088b4:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	697a      	ldr	r2, [r7, #20]
 80088bc:	429a      	cmp	r2, r3
 80088be:	d304      	bcc.n	80088ca <xStreamBufferSpacesAvailable+0x5c>
	{
		xSpace -= pxStreamBuffer->xLength;
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	697a      	ldr	r2, [r7, #20]
 80088c6:	1ad3      	subs	r3, r2, r3
 80088c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 80088ca:	697b      	ldr	r3, [r7, #20]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	371c      	adds	r7, #28
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b090      	sub	sp, #64	; 0x40
 80088dc:	af02      	add	r7, sp, #8
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	607a      	str	r2, [r7, #4]
 80088e4:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	633b      	str	r3, [r7, #48]	; 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	637b      	str	r3, [r7, #52]	; 0x34

	configASSERT( pvTxData );
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d10c      	bne.n	800890e <xStreamBufferSendFromISR+0x36>
	__asm volatile
 80088f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f8:	b672      	cpsid	i
 80088fa:	f383 8811 	msr	BASEPRI, r3
 80088fe:	f3bf 8f6f 	isb	sy
 8008902:	f3bf 8f4f 	dsb	sy
 8008906:	b662      	cpsie	i
 8008908:	623b      	str	r3, [r7, #32]
}
 800890a:	bf00      	nop
 800890c:	e7fe      	b.n	800890c <xStreamBufferSendFromISR+0x34>
	configASSERT( pxStreamBuffer );
 800890e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008910:	2b00      	cmp	r3, #0
 8008912:	d10c      	bne.n	800892e <xStreamBufferSendFromISR+0x56>
	__asm volatile
 8008914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008918:	b672      	cpsid	i
 800891a:	f383 8811 	msr	BASEPRI, r3
 800891e:	f3bf 8f6f 	isb	sy
 8008922:	f3bf 8f4f 	dsb	sy
 8008926:	b662      	cpsie	i
 8008928:	61fb      	str	r3, [r7, #28]
}
 800892a:	bf00      	nop
 800892c:	e7fe      	b.n	800892c <xStreamBufferSendFromISR+0x54>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800892e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008930:	7f1b      	ldrb	r3, [r3, #28]
 8008932:	f003 0301 	and.w	r3, r3, #1
 8008936:	2b00      	cmp	r3, #0
 8008938:	d002      	beq.n	8008940 <xStreamBufferSendFromISR+0x68>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800893a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800893c:	3304      	adds	r3, #4
 800893e:	637b      	str	r3, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8008940:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008942:	f7ff ff94 	bl	800886e <xStreamBufferSpacesAvailable>
 8008946:	62f8      	str	r0, [r7, #44]	; 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8008948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800894a:	9300      	str	r3, [sp, #0]
 800894c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	68b9      	ldr	r1, [r7, #8]
 8008952:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008954:	f000 f837 	bl	80089c6 <prvWriteMessageToBuffer>
 8008958:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 800895a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800895c:	2b00      	cmp	r3, #0
 800895e:	d02d      	beq.n	80089bc <xStreamBufferSendFromISR+0xe4>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8008960:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008962:	f000 fa32 	bl	8008dca <prvBytesInBuffer>
 8008966:	4602      	mov	r2, r0
 8008968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	429a      	cmp	r2, r3
 800896e:	d325      	bcc.n	80089bc <xStreamBufferSendFromISR+0xe4>
	__asm volatile
 8008970:	f3ef 8211 	mrs	r2, BASEPRI
 8008974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008978:	b672      	cpsid	i
 800897a:	f383 8811 	msr	BASEPRI, r3
 800897e:	f3bf 8f6f 	isb	sy
 8008982:	f3bf 8f4f 	dsb	sy
 8008986:	b662      	cpsie	i
 8008988:	61ba      	str	r2, [r7, #24]
 800898a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800898c:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 800898e:	627b      	str	r3, [r7, #36]	; 0x24
 8008990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008992:	691b      	ldr	r3, [r3, #16]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00b      	beq.n	80089b0 <xStreamBufferSendFromISR+0xd8>
 8008998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899a:	6918      	ldr	r0, [r3, #16]
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	9300      	str	r3, [sp, #0]
 80089a0:	2300      	movs	r3, #0
 80089a2:	2200      	movs	r2, #0
 80089a4:	2100      	movs	r1, #0
 80089a6:	f001 fadb 	bl	8009f60 <xTaskGenericNotifyFromISR>
 80089aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ac:	2200      	movs	r2, #0
 80089ae:	611a      	str	r2, [r3, #16]
 80089b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b2:	613b      	str	r3, [r7, #16]
	__asm volatile
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	f383 8811 	msr	BASEPRI, r3
}
 80089ba:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 80089bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3738      	adds	r7, #56	; 0x38
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b086      	sub	sp, #24
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	60f8      	str	r0, [r7, #12]
 80089ce:	60b9      	str	r1, [r7, #8]
 80089d0:	607a      	str	r2, [r7, #4]
 80089d2:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d102      	bne.n	80089e0 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 80089da:	2300      	movs	r3, #0
 80089dc:	617b      	str	r3, [r7, #20]
 80089de:	e01d      	b.n	8008a1c <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	7f1b      	ldrb	r3, [r3, #28]
 80089e4:	f003 0301 	and.w	r3, r3, #1
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d108      	bne.n	80089fe <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 80089ec:	2301      	movs	r3, #1
 80089ee:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	4293      	cmp	r3, r2
 80089f6:	bf28      	it	cs
 80089f8:	4613      	movcs	r3, r2
 80089fa:	607b      	str	r3, [r7, #4]
 80089fc:	e00e      	b.n	8008a1c <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 80089fe:	683a      	ldr	r2, [r7, #0]
 8008a00:	6a3b      	ldr	r3, [r7, #32]
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d308      	bcc.n	8008a18 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8008a06:	2301      	movs	r3, #1
 8008a08:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8008a0a:	1d3b      	adds	r3, r7, #4
 8008a0c:	2204      	movs	r2, #4
 8008a0e:	4619      	mov	r1, r3
 8008a10:	68f8      	ldr	r0, [r7, #12]
 8008a12:	f000 f8e2 	bl	8008bda <prvWriteBytesToBuffer>
 8008a16:	e001      	b.n	8008a1c <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d007      	beq.n	8008a32 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	461a      	mov	r2, r3
 8008a26:	68b9      	ldr	r1, [r7, #8]
 8008a28:	68f8      	ldr	r0, [r7, #12]
 8008a2a:	f000 f8d6 	bl	8008bda <prvWriteBytesToBuffer>
 8008a2e:	6138      	str	r0, [r7, #16]
 8008a30:	e001      	b.n	8008a36 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8008a32:	2300      	movs	r3, #0
 8008a34:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8008a36:	693b      	ldr	r3, [r7, #16]
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3718      	adds	r7, #24
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b08e      	sub	sp, #56	; 0x38
 8008a44:	af02      	add	r7, sp, #8
 8008a46:	60f8      	str	r0, [r7, #12]
 8008a48:	60b9      	str	r1, [r7, #8]
 8008a4a:	607a      	str	r2, [r7, #4]
 8008a4c:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8008a52:	2300      	movs	r3, #0
 8008a54:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d10c      	bne.n	8008a76 <xStreamBufferReceive+0x36>
	__asm volatile
 8008a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a60:	b672      	cpsid	i
 8008a62:	f383 8811 	msr	BASEPRI, r3
 8008a66:	f3bf 8f6f 	isb	sy
 8008a6a:	f3bf 8f4f 	dsb	sy
 8008a6e:	b662      	cpsie	i
 8008a70:	61fb      	str	r3, [r7, #28]
}
 8008a72:	bf00      	nop
 8008a74:	e7fe      	b.n	8008a74 <xStreamBufferReceive+0x34>
	configASSERT( pxStreamBuffer );
 8008a76:	6a3b      	ldr	r3, [r7, #32]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d10c      	bne.n	8008a96 <xStreamBufferReceive+0x56>
	__asm volatile
 8008a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a80:	b672      	cpsid	i
 8008a82:	f383 8811 	msr	BASEPRI, r3
 8008a86:	f3bf 8f6f 	isb	sy
 8008a8a:	f3bf 8f4f 	dsb	sy
 8008a8e:	b662      	cpsie	i
 8008a90:	61bb      	str	r3, [r7, #24]
}
 8008a92:	bf00      	nop
 8008a94:	e7fe      	b.n	8008a94 <xStreamBufferReceive+0x54>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8008a96:	6a3b      	ldr	r3, [r7, #32]
 8008a98:	7f1b      	ldrb	r3, [r3, #28]
 8008a9a:	f003 0301 	and.w	r3, r3, #1
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d002      	beq.n	8008aa8 <xStreamBufferReceive+0x68>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8008aa2:	2304      	movs	r3, #4
 8008aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8008aa6:	e001      	b.n	8008aac <xStreamBufferReceive+0x6c>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d036      	beq.n	8008b20 <xStreamBufferReceive+0xe0>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8008ab2:	f002 f8e3 	bl	800ac7c <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8008ab6:	6a38      	ldr	r0, [r7, #32]
 8008ab8:	f000 f987 	bl	8008dca <prvBytesInBuffer>
 8008abc:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8008abe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d818      	bhi.n	8008af8 <xStreamBufferReceive+0xb8>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8008ac6:	2000      	movs	r0, #0
 8008ac8:	f001 fb36 	bl	800a138 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8008acc:	6a3b      	ldr	r3, [r7, #32]
 8008ace:	691b      	ldr	r3, [r3, #16]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d00c      	beq.n	8008aee <xStreamBufferReceive+0xae>
	__asm volatile
 8008ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad8:	b672      	cpsid	i
 8008ada:	f383 8811 	msr	BASEPRI, r3
 8008ade:	f3bf 8f6f 	isb	sy
 8008ae2:	f3bf 8f4f 	dsb	sy
 8008ae6:	b662      	cpsie	i
 8008ae8:	617b      	str	r3, [r7, #20]
}
 8008aea:	bf00      	nop
 8008aec:	e7fe      	b.n	8008aec <xStreamBufferReceive+0xac>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8008aee:	f001 f873 	bl	8009bd8 <xTaskGetCurrentTaskHandle>
 8008af2:	4602      	mov	r2, r0
 8008af4:	6a3b      	ldr	r3, [r7, #32]
 8008af6:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008af8:	f002 f8f4 	bl	800ace4 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8008afc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d811      	bhi.n	8008b28 <xStreamBufferReceive+0xe8>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	2200      	movs	r2, #0
 8008b08:	2100      	movs	r1, #0
 8008b0a:	2000      	movs	r0, #0
 8008b0c:	f001 f904 	bl	8009d18 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8008b10:	6a3b      	ldr	r3, [r7, #32]
 8008b12:	2200      	movs	r2, #0
 8008b14:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8008b16:	6a38      	ldr	r0, [r7, #32]
 8008b18:	f000 f957 	bl	8008dca <prvBytesInBuffer>
 8008b1c:	62b8      	str	r0, [r7, #40]	; 0x28
 8008b1e:	e003      	b.n	8008b28 <xStreamBufferReceive+0xe8>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8008b20:	6a38      	ldr	r0, [r7, #32]
 8008b22:	f000 f952 	bl	8008dca <prvBytesInBuffer>
 8008b26:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8008b28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d91d      	bls.n	8008b6c <xStreamBufferReceive+0x12c>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8008b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b32:	9300      	str	r3, [sp, #0]
 8008b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	68b9      	ldr	r1, [r7, #8]
 8008b3a:	6a38      	ldr	r0, [r7, #32]
 8008b3c:	f000 f81b 	bl	8008b76 <prvReadMessageFromBuffer>
 8008b40:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8008b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d011      	beq.n	8008b6c <xStreamBufferReceive+0x12c>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8008b48:	f000 fbfe 	bl	8009348 <vTaskSuspendAll>
 8008b4c:	6a3b      	ldr	r3, [r7, #32]
 8008b4e:	695b      	ldr	r3, [r3, #20]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d009      	beq.n	8008b68 <xStreamBufferReceive+0x128>
 8008b54:	6a3b      	ldr	r3, [r7, #32]
 8008b56:	6958      	ldr	r0, [r3, #20]
 8008b58:	2300      	movs	r3, #0
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	f001 f93b 	bl	8009dd8 <xTaskGenericNotify>
 8008b62:	6a3b      	ldr	r3, [r7, #32]
 8008b64:	2200      	movs	r2, #0
 8008b66:	615a      	str	r2, [r3, #20]
 8008b68:	f000 fbfc 	bl	8009364 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8008b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3730      	adds	r7, #48	; 0x30
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8008b76:	b580      	push	{r7, lr}
 8008b78:	b088      	sub	sp, #32
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	60f8      	str	r0, [r7, #12]
 8008b7e:	60b9      	str	r1, [r7, #8]
 8008b80:	607a      	str	r2, [r7, #4]
 8008b82:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8008b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d019      	beq.n	8008bbe <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8008b90:	f107 0110 	add.w	r1, r7, #16
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f000 f896 	bl	8008cca <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 8008ba2:	683a      	ldr	r2, [r7, #0]
 8008ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba6:	1ad3      	subs	r3, r2, r3
 8008ba8:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8008baa:	69fa      	ldr	r2, [r7, #28]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d907      	bls.n	8008bc2 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	69ba      	ldr	r2, [r7, #24]
 8008bb6:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	61fb      	str	r3, [r7, #28]
 8008bbc:	e001      	b.n	8008bc2 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	69fa      	ldr	r2, [r7, #28]
 8008bc6:	68b9      	ldr	r1, [r7, #8]
 8008bc8:	68f8      	ldr	r0, [r7, #12]
 8008bca:	f000 f87e 	bl	8008cca <prvReadBytesFromBuffer>
 8008bce:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8008bd0:	697b      	ldr	r3, [r7, #20]
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3720      	adds	r7, #32
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}

08008bda <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8008bda:	b580      	push	{r7, lr}
 8008bdc:	b08a      	sub	sp, #40	; 0x28
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	60f8      	str	r0, [r7, #12]
 8008be2:	60b9      	str	r1, [r7, #8]
 8008be4:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d10c      	bne.n	8008c06 <prvWriteBytesToBuffer+0x2c>
	__asm volatile
 8008bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf0:	b672      	cpsid	i
 8008bf2:	f383 8811 	msr	BASEPRI, r3
 8008bf6:	f3bf 8f6f 	isb	sy
 8008bfa:	f3bf 8f4f 	dsb	sy
 8008bfe:	b662      	cpsie	i
 8008c00:	61fb      	str	r3, [r7, #28]
}
 8008c02:	bf00      	nop
 8008c04:	e7fe      	b.n	8008c04 <prvWriteBytesToBuffer+0x2a>

	xNextHead = pxStreamBuffer->xHead;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	689a      	ldr	r2, [r3, #8]
 8008c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c12:	1ad3      	subs	r3, r2, r3
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	4293      	cmp	r3, r2
 8008c18:	bf28      	it	cs
 8008c1a:	4613      	movcs	r3, r2
 8008c1c:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8008c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c20:	6a3b      	ldr	r3, [r7, #32]
 8008c22:	441a      	add	r2, r3
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d90c      	bls.n	8008c46 <prvWriteBytesToBuffer+0x6c>
	__asm volatile
 8008c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c30:	b672      	cpsid	i
 8008c32:	f383 8811 	msr	BASEPRI, r3
 8008c36:	f3bf 8f6f 	isb	sy
 8008c3a:	f3bf 8f4f 	dsb	sy
 8008c3e:	b662      	cpsie	i
 8008c40:	61bb      	str	r3, [r7, #24]
}
 8008c42:	bf00      	nop
 8008c44:	e7fe      	b.n	8008c44 <prvWriteBytesToBuffer+0x6a>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	699a      	ldr	r2, [r3, #24]
 8008c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4c:	4413      	add	r3, r2
 8008c4e:	6a3a      	ldr	r2, [r7, #32]
 8008c50:	68b9      	ldr	r1, [r7, #8]
 8008c52:	4618      	mov	r0, r3
 8008c54:	f002 fb48 	bl	800b2e8 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	6a3b      	ldr	r3, [r7, #32]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d91e      	bls.n	8008c9e <prvWriteBytesToBuffer+0xc4>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	6a3b      	ldr	r3, [r7, #32]
 8008c64:	1ad2      	subs	r2, r2, r3
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	689b      	ldr	r3, [r3, #8]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d90c      	bls.n	8008c88 <prvWriteBytesToBuffer+0xae>
	__asm volatile
 8008c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c72:	b672      	cpsid	i
 8008c74:	f383 8811 	msr	BASEPRI, r3
 8008c78:	f3bf 8f6f 	isb	sy
 8008c7c:	f3bf 8f4f 	dsb	sy
 8008c80:	b662      	cpsie	i
 8008c82:	617b      	str	r3, [r7, #20]
}
 8008c84:	bf00      	nop
 8008c86:	e7fe      	b.n	8008c86 <prvWriteBytesToBuffer+0xac>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	6998      	ldr	r0, [r3, #24]
 8008c8c:	68ba      	ldr	r2, [r7, #8]
 8008c8e:	6a3b      	ldr	r3, [r7, #32]
 8008c90:	18d1      	adds	r1, r2, r3
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	6a3b      	ldr	r3, [r7, #32]
 8008c96:	1ad3      	subs	r3, r2, r3
 8008c98:	461a      	mov	r2, r3
 8008c9a:	f002 fb25 	bl	800b2e8 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8008c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4413      	add	r3, r2
 8008ca4:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d304      	bcc.n	8008cba <prvWriteBytesToBuffer+0xe0>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	689b      	ldr	r3, [r3, #8]
 8008cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cb6:	1ad3      	subs	r3, r2, r3
 8008cb8:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cbe:	605a      	str	r2, [r3, #4]

	return xCount;
 8008cc0:	687b      	ldr	r3, [r7, #4]
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3728      	adds	r7, #40	; 0x28
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b08a      	sub	sp, #40	; 0x28
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	60f8      	str	r0, [r7, #12]
 8008cd2:	60b9      	str	r1, [r7, #8]
 8008cd4:	607a      	str	r2, [r7, #4]
 8008cd6:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	bf28      	it	cs
 8008ce0:	4613      	movcs	r3, r2
 8008ce2:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8008ce4:	6a3b      	ldr	r3, [r7, #32]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d06a      	beq.n	8008dc0 <prvReadBytesFromBuffer+0xf6>
	{
		xNextTail = pxStreamBuffer->xTail;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	689a      	ldr	r2, [r3, #8]
 8008cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf6:	1ad3      	subs	r3, r2, r3
 8008cf8:	6a3a      	ldr	r2, [r7, #32]
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	bf28      	it	cs
 8008cfe:	4613      	movcs	r3, r2
 8008d00:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 8008d02:	69fa      	ldr	r2, [r7, #28]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d90c      	bls.n	8008d24 <prvReadBytesFromBuffer+0x5a>
	__asm volatile
 8008d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d0e:	b672      	cpsid	i
 8008d10:	f383 8811 	msr	BASEPRI, r3
 8008d14:	f3bf 8f6f 	isb	sy
 8008d18:	f3bf 8f4f 	dsb	sy
 8008d1c:	b662      	cpsie	i
 8008d1e:	61bb      	str	r3, [r7, #24]
}
 8008d20:	bf00      	nop
 8008d22:	e7fe      	b.n	8008d22 <prvReadBytesFromBuffer+0x58>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8008d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	441a      	add	r2, r3
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d90c      	bls.n	8008d4c <prvReadBytesFromBuffer+0x82>
	__asm volatile
 8008d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d36:	b672      	cpsid	i
 8008d38:	f383 8811 	msr	BASEPRI, r3
 8008d3c:	f3bf 8f6f 	isb	sy
 8008d40:	f3bf 8f4f 	dsb	sy
 8008d44:	b662      	cpsie	i
 8008d46:	617b      	str	r3, [r7, #20]
}
 8008d48:	bf00      	nop
 8008d4a:	e7fe      	b.n	8008d4a <prvReadBytesFromBuffer+0x80>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	699a      	ldr	r2, [r3, #24]
 8008d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d52:	4413      	add	r3, r2
 8008d54:	69fa      	ldr	r2, [r7, #28]
 8008d56:	4619      	mov	r1, r3
 8008d58:	68b8      	ldr	r0, [r7, #8]
 8008d5a:	f002 fac5 	bl	800b2e8 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 8008d5e:	6a3a      	ldr	r2, [r7, #32]
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d91b      	bls.n	8008d9e <prvReadBytesFromBuffer+0xd4>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8008d66:	6a3a      	ldr	r2, [r7, #32]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d90c      	bls.n	8008d88 <prvReadBytesFromBuffer+0xbe>
	__asm volatile
 8008d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d72:	b672      	cpsid	i
 8008d74:	f383 8811 	msr	BASEPRI, r3
 8008d78:	f3bf 8f6f 	isb	sy
 8008d7c:	f3bf 8f4f 	dsb	sy
 8008d80:	b662      	cpsie	i
 8008d82:	613b      	str	r3, [r7, #16]
}
 8008d84:	bf00      	nop
 8008d86:	e7fe      	b.n	8008d86 <prvReadBytesFromBuffer+0xbc>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8008d88:	68ba      	ldr	r2, [r7, #8]
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	18d0      	adds	r0, r2, r3
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	6999      	ldr	r1, [r3, #24]
 8008d92:	6a3a      	ldr	r2, [r7, #32]
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	1ad3      	subs	r3, r2, r3
 8008d98:	461a      	mov	r2, r3
 8008d9a:	f002 faa5 	bl	800b2e8 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 8008d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008da0:	6a3b      	ldr	r3, [r7, #32]
 8008da2:	4413      	add	r3, r2
 8008da4:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d304      	bcc.n	8008dba <prvReadBytesFromBuffer+0xf0>
		{
			xNextTail -= pxStreamBuffer->xLength;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008db6:	1ad3      	subs	r3, r2, r3
 8008db8:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dbe:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8008dc0:	6a3b      	ldr	r3, [r7, #32]
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3728      	adds	r7, #40	; 0x28
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8008dca:	b480      	push	{r7}
 8008dcc:	b085      	sub	sp, #20
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	689a      	ldr	r2, [r3, #8]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	4413      	add	r3, r2
 8008ddc:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	68fa      	ldr	r2, [r7, #12]
 8008de4:	1ad3      	subs	r3, r2, r3
 8008de6:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	68fa      	ldr	r2, [r7, #12]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d304      	bcc.n	8008dfc <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	689b      	ldr	r3, [r3, #8]
 8008df6:	68fa      	ldr	r2, [r7, #12]
 8008df8:	1ad3      	subs	r3, r2, r3
 8008dfa:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3714      	adds	r7, #20
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr

08008e0a <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b086      	sub	sp, #24
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	60f8      	str	r0, [r7, #12]
 8008e12:	60b9      	str	r1, [r7, #8]
 8008e14:	607a      	str	r2, [r7, #4]
 8008e16:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8008e18:	2355      	movs	r3, #85	; 0x55
 8008e1a:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	6979      	ldr	r1, [r7, #20]
 8008e20:	68b8      	ldr	r0, [r7, #8]
 8008e22:	f002 fa6f 	bl	800b304 <memset>
 8008e26:	4602      	mov	r2, r0
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d00c      	beq.n	8008e48 <prvInitialiseNewStreamBuffer+0x3e>
	__asm volatile
 8008e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e32:	b672      	cpsid	i
 8008e34:	f383 8811 	msr	BASEPRI, r3
 8008e38:	f3bf 8f6f 	isb	sy
 8008e3c:	f3bf 8f4f 	dsb	sy
 8008e40:	b662      	cpsie	i
 8008e42:	613b      	str	r3, [r7, #16]
}
 8008e44:	bf00      	nop
 8008e46:	e7fe      	b.n	8008e46 <prvInitialiseNewStreamBuffer+0x3c>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8008e48:	2224      	movs	r2, #36	; 0x24
 8008e4a:	2100      	movs	r1, #0
 8008e4c:	68f8      	ldr	r0, [r7, #12]
 8008e4e:	f002 fa59 	bl	800b304 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	68ba      	ldr	r2, [r7, #8]
 8008e56:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	683a      	ldr	r2, [r7, #0]
 8008e62:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008e6a:	771a      	strb	r2, [r3, #28]
}
 8008e6c:	bf00      	nop
 8008e6e:	3718      	adds	r7, #24
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b08e      	sub	sp, #56	; 0x38
 8008e78:	af04      	add	r7, sp, #16
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	607a      	str	r2, [r7, #4]
 8008e80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d10c      	bne.n	8008ea2 <xTaskCreateStatic+0x2e>
	__asm volatile
 8008e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e8c:	b672      	cpsid	i
 8008e8e:	f383 8811 	msr	BASEPRI, r3
 8008e92:	f3bf 8f6f 	isb	sy
 8008e96:	f3bf 8f4f 	dsb	sy
 8008e9a:	b662      	cpsie	i
 8008e9c:	623b      	str	r3, [r7, #32]
}
 8008e9e:	bf00      	nop
 8008ea0:	e7fe      	b.n	8008ea0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d10c      	bne.n	8008ec2 <xTaskCreateStatic+0x4e>
	__asm volatile
 8008ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eac:	b672      	cpsid	i
 8008eae:	f383 8811 	msr	BASEPRI, r3
 8008eb2:	f3bf 8f6f 	isb	sy
 8008eb6:	f3bf 8f4f 	dsb	sy
 8008eba:	b662      	cpsie	i
 8008ebc:	61fb      	str	r3, [r7, #28]
}
 8008ebe:	bf00      	nop
 8008ec0:	e7fe      	b.n	8008ec0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008ec2:	23bc      	movs	r3, #188	; 0xbc
 8008ec4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	2bbc      	cmp	r3, #188	; 0xbc
 8008eca:	d00c      	beq.n	8008ee6 <xTaskCreateStatic+0x72>
	__asm volatile
 8008ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed0:	b672      	cpsid	i
 8008ed2:	f383 8811 	msr	BASEPRI, r3
 8008ed6:	f3bf 8f6f 	isb	sy
 8008eda:	f3bf 8f4f 	dsb	sy
 8008ede:	b662      	cpsie	i
 8008ee0:	61bb      	str	r3, [r7, #24]
}
 8008ee2:	bf00      	nop
 8008ee4:	e7fe      	b.n	8008ee4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008ee6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d01e      	beq.n	8008f2c <xTaskCreateStatic+0xb8>
 8008eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d01b      	beq.n	8008f2c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008efc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f00:	2202      	movs	r2, #2
 8008f02:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008f06:	2300      	movs	r3, #0
 8008f08:	9303      	str	r3, [sp, #12]
 8008f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0c:	9302      	str	r3, [sp, #8]
 8008f0e:	f107 0314 	add.w	r3, r7, #20
 8008f12:	9301      	str	r3, [sp, #4]
 8008f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f16:	9300      	str	r3, [sp, #0]
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	68b9      	ldr	r1, [r7, #8]
 8008f1e:	68f8      	ldr	r0, [r7, #12]
 8008f20:	f000 f850 	bl	8008fc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f26:	f000 f8f5 	bl	8009114 <prvAddNewTaskToReadyList>
 8008f2a:	e001      	b.n	8008f30 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008f30:	697b      	ldr	r3, [r7, #20]
	}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3728      	adds	r7, #40	; 0x28
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b08c      	sub	sp, #48	; 0x30
 8008f3e:	af04      	add	r7, sp, #16
 8008f40:	60f8      	str	r0, [r7, #12]
 8008f42:	60b9      	str	r1, [r7, #8]
 8008f44:	603b      	str	r3, [r7, #0]
 8008f46:	4613      	mov	r3, r2
 8008f48:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008f4a:	88fb      	ldrh	r3, [r7, #6]
 8008f4c:	009b      	lsls	r3, r3, #2
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f001 ffc0 	bl	800aed4 <pvPortMalloc>
 8008f54:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d00e      	beq.n	8008f7a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008f5c:	20bc      	movs	r0, #188	; 0xbc
 8008f5e:	f001 ffb9 	bl	800aed4 <pvPortMalloc>
 8008f62:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008f64:	69fb      	ldr	r3, [r7, #28]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d003      	beq.n	8008f72 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008f6a:	69fb      	ldr	r3, [r7, #28]
 8008f6c:	697a      	ldr	r2, [r7, #20]
 8008f6e:	631a      	str	r2, [r3, #48]	; 0x30
 8008f70:	e005      	b.n	8008f7e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008f72:	6978      	ldr	r0, [r7, #20]
 8008f74:	f002 f878 	bl	800b068 <vPortFree>
 8008f78:	e001      	b.n	8008f7e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008f7e:	69fb      	ldr	r3, [r7, #28]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d017      	beq.n	8008fb4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008f84:	69fb      	ldr	r3, [r7, #28]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008f8c:	88fa      	ldrh	r2, [r7, #6]
 8008f8e:	2300      	movs	r3, #0
 8008f90:	9303      	str	r3, [sp, #12]
 8008f92:	69fb      	ldr	r3, [r7, #28]
 8008f94:	9302      	str	r3, [sp, #8]
 8008f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f98:	9301      	str	r3, [sp, #4]
 8008f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f9c:	9300      	str	r3, [sp, #0]
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	68b9      	ldr	r1, [r7, #8]
 8008fa2:	68f8      	ldr	r0, [r7, #12]
 8008fa4:	f000 f80e 	bl	8008fc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008fa8:	69f8      	ldr	r0, [r7, #28]
 8008faa:	f000 f8b3 	bl	8009114 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	61bb      	str	r3, [r7, #24]
 8008fb2:	e002      	b.n	8008fba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8008fb8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008fba:	69bb      	ldr	r3, [r7, #24]
	}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3720      	adds	r7, #32
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b088      	sub	sp, #32
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	60b9      	str	r1, [r7, #8]
 8008fce:	607a      	str	r2, [r7, #4]
 8008fd0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	461a      	mov	r2, r3
 8008fdc:	21a5      	movs	r1, #165	; 0xa5
 8008fde:	f002 f991 	bl	800b304 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fe6:	6879      	ldr	r1, [r7, #4]
 8008fe8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008fec:	440b      	add	r3, r1
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	4413      	add	r3, r2
 8008ff2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008ff4:	69bb      	ldr	r3, [r7, #24]
 8008ff6:	f023 0307 	bic.w	r3, r3, #7
 8008ffa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008ffc:	69bb      	ldr	r3, [r7, #24]
 8008ffe:	f003 0307 	and.w	r3, r3, #7
 8009002:	2b00      	cmp	r3, #0
 8009004:	d00c      	beq.n	8009020 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8009006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900a:	b672      	cpsid	i
 800900c:	f383 8811 	msr	BASEPRI, r3
 8009010:	f3bf 8f6f 	isb	sy
 8009014:	f3bf 8f4f 	dsb	sy
 8009018:	b662      	cpsie	i
 800901a:	617b      	str	r3, [r7, #20]
}
 800901c:	bf00      	nop
 800901e:	e7fe      	b.n	800901e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d01f      	beq.n	8009066 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009026:	2300      	movs	r3, #0
 8009028:	61fb      	str	r3, [r7, #28]
 800902a:	e012      	b.n	8009052 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800902c:	68ba      	ldr	r2, [r7, #8]
 800902e:	69fb      	ldr	r3, [r7, #28]
 8009030:	4413      	add	r3, r2
 8009032:	7819      	ldrb	r1, [r3, #0]
 8009034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009036:	69fb      	ldr	r3, [r7, #28]
 8009038:	4413      	add	r3, r2
 800903a:	3334      	adds	r3, #52	; 0x34
 800903c:	460a      	mov	r2, r1
 800903e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009040:	68ba      	ldr	r2, [r7, #8]
 8009042:	69fb      	ldr	r3, [r7, #28]
 8009044:	4413      	add	r3, r2
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d006      	beq.n	800905a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800904c:	69fb      	ldr	r3, [r7, #28]
 800904e:	3301      	adds	r3, #1
 8009050:	61fb      	str	r3, [r7, #28]
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	2b0f      	cmp	r3, #15
 8009056:	d9e9      	bls.n	800902c <prvInitialiseNewTask+0x68>
 8009058:	e000      	b.n	800905c <prvInitialiseNewTask+0x98>
			{
				break;
 800905a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800905c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800905e:	2200      	movs	r2, #0
 8009060:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009064:	e003      	b.n	800906e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009068:	2200      	movs	r2, #0
 800906a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800906e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009070:	2b37      	cmp	r3, #55	; 0x37
 8009072:	d901      	bls.n	8009078 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009074:	2337      	movs	r3, #55	; 0x37
 8009076:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800907c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800907e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009080:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009082:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009086:	2200      	movs	r2, #0
 8009088:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800908a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800908c:	3304      	adds	r3, #4
 800908e:	4618      	mov	r0, r3
 8009090:	f7fe fdee 	bl	8007c70 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009096:	3318      	adds	r3, #24
 8009098:	4618      	mov	r0, r3
 800909a:	f7fe fde9 	bl	8007c70 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800909e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80090aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80090ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80090b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b6:	2200      	movs	r2, #0
 80090b8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80090bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090be:	2200      	movs	r2, #0
 80090c0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80090c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c6:	3354      	adds	r3, #84	; 0x54
 80090c8:	2260      	movs	r2, #96	; 0x60
 80090ca:	2100      	movs	r1, #0
 80090cc:	4618      	mov	r0, r3
 80090ce:	f002 f919 	bl	800b304 <memset>
 80090d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d4:	4a0c      	ldr	r2, [pc, #48]	; (8009108 <prvInitialiseNewTask+0x144>)
 80090d6:	659a      	str	r2, [r3, #88]	; 0x58
 80090d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090da:	4a0c      	ldr	r2, [pc, #48]	; (800910c <prvInitialiseNewTask+0x148>)
 80090dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80090de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e0:	4a0b      	ldr	r2, [pc, #44]	; (8009110 <prvInitialiseNewTask+0x14c>)
 80090e2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80090e4:	683a      	ldr	r2, [r7, #0]
 80090e6:	68f9      	ldr	r1, [r7, #12]
 80090e8:	69b8      	ldr	r0, [r7, #24]
 80090ea:	f001 fcbd 	bl	800aa68 <pxPortInitialiseStack>
 80090ee:	4602      	mov	r2, r0
 80090f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80090f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d002      	beq.n	8009100 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80090fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009100:	bf00      	nop
 8009102:	3720      	adds	r7, #32
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}
 8009108:	0800b66c 	.word	0x0800b66c
 800910c:	0800b68c 	.word	0x0800b68c
 8009110:	0800b64c 	.word	0x0800b64c

08009114 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800911c:	f001 fdae 	bl	800ac7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009120:	4b2d      	ldr	r3, [pc, #180]	; (80091d8 <prvAddNewTaskToReadyList+0xc4>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	3301      	adds	r3, #1
 8009126:	4a2c      	ldr	r2, [pc, #176]	; (80091d8 <prvAddNewTaskToReadyList+0xc4>)
 8009128:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800912a:	4b2c      	ldr	r3, [pc, #176]	; (80091dc <prvAddNewTaskToReadyList+0xc8>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d109      	bne.n	8009146 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009132:	4a2a      	ldr	r2, [pc, #168]	; (80091dc <prvAddNewTaskToReadyList+0xc8>)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009138:	4b27      	ldr	r3, [pc, #156]	; (80091d8 <prvAddNewTaskToReadyList+0xc4>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2b01      	cmp	r3, #1
 800913e:	d110      	bne.n	8009162 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009140:	f000 fc4e 	bl	80099e0 <prvInitialiseTaskLists>
 8009144:	e00d      	b.n	8009162 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009146:	4b26      	ldr	r3, [pc, #152]	; (80091e0 <prvAddNewTaskToReadyList+0xcc>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d109      	bne.n	8009162 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800914e:	4b23      	ldr	r3, [pc, #140]	; (80091dc <prvAddNewTaskToReadyList+0xc8>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009158:	429a      	cmp	r2, r3
 800915a:	d802      	bhi.n	8009162 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800915c:	4a1f      	ldr	r2, [pc, #124]	; (80091dc <prvAddNewTaskToReadyList+0xc8>)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009162:	4b20      	ldr	r3, [pc, #128]	; (80091e4 <prvAddNewTaskToReadyList+0xd0>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	3301      	adds	r3, #1
 8009168:	4a1e      	ldr	r2, [pc, #120]	; (80091e4 <prvAddNewTaskToReadyList+0xd0>)
 800916a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800916c:	4b1d      	ldr	r3, [pc, #116]	; (80091e4 <prvAddNewTaskToReadyList+0xd0>)
 800916e:	681a      	ldr	r2, [r3, #0]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009178:	4b1b      	ldr	r3, [pc, #108]	; (80091e8 <prvAddNewTaskToReadyList+0xd4>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	429a      	cmp	r2, r3
 800917e:	d903      	bls.n	8009188 <prvAddNewTaskToReadyList+0x74>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009184:	4a18      	ldr	r2, [pc, #96]	; (80091e8 <prvAddNewTaskToReadyList+0xd4>)
 8009186:	6013      	str	r3, [r2, #0]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800918c:	4613      	mov	r3, r2
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	4413      	add	r3, r2
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	4a15      	ldr	r2, [pc, #84]	; (80091ec <prvAddNewTaskToReadyList+0xd8>)
 8009196:	441a      	add	r2, r3
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	3304      	adds	r3, #4
 800919c:	4619      	mov	r1, r3
 800919e:	4610      	mov	r0, r2
 80091a0:	f7fe fd73 	bl	8007c8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80091a4:	f001 fd9e 	bl	800ace4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80091a8:	4b0d      	ldr	r3, [pc, #52]	; (80091e0 <prvAddNewTaskToReadyList+0xcc>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d00e      	beq.n	80091ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80091b0:	4b0a      	ldr	r3, [pc, #40]	; (80091dc <prvAddNewTaskToReadyList+0xc8>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d207      	bcs.n	80091ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80091be:	4b0c      	ldr	r3, [pc, #48]	; (80091f0 <prvAddNewTaskToReadyList+0xdc>)
 80091c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091c4:	601a      	str	r2, [r3, #0]
 80091c6:	f3bf 8f4f 	dsb	sy
 80091ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091ce:	bf00      	nop
 80091d0:	3708      	adds	r7, #8
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	200021c0 	.word	0x200021c0
 80091dc:	20001cec 	.word	0x20001cec
 80091e0:	200021cc 	.word	0x200021cc
 80091e4:	200021dc 	.word	0x200021dc
 80091e8:	200021c8 	.word	0x200021c8
 80091ec:	20001cf0 	.word	0x20001cf0
 80091f0:	e000ed04 	.word	0xe000ed04

080091f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80091fc:	2300      	movs	r3, #0
 80091fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d019      	beq.n	800923a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009206:	4b14      	ldr	r3, [pc, #80]	; (8009258 <vTaskDelay+0x64>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d00c      	beq.n	8009228 <vTaskDelay+0x34>
	__asm volatile
 800920e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009212:	b672      	cpsid	i
 8009214:	f383 8811 	msr	BASEPRI, r3
 8009218:	f3bf 8f6f 	isb	sy
 800921c:	f3bf 8f4f 	dsb	sy
 8009220:	b662      	cpsie	i
 8009222:	60bb      	str	r3, [r7, #8]
}
 8009224:	bf00      	nop
 8009226:	e7fe      	b.n	8009226 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8009228:	f000 f88e 	bl	8009348 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800922c:	2100      	movs	r1, #0
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 ffa8 	bl	800a184 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009234:	f000 f896 	bl	8009364 <xTaskResumeAll>
 8009238:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d107      	bne.n	8009250 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8009240:	4b06      	ldr	r3, [pc, #24]	; (800925c <vTaskDelay+0x68>)
 8009242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009246:	601a      	str	r2, [r3, #0]
 8009248:	f3bf 8f4f 	dsb	sy
 800924c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009250:	bf00      	nop
 8009252:	3710      	adds	r7, #16
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}
 8009258:	200021e8 	.word	0x200021e8
 800925c:	e000ed04 	.word	0xe000ed04

08009260 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b08a      	sub	sp, #40	; 0x28
 8009264:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009266:	2300      	movs	r3, #0
 8009268:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800926a:	2300      	movs	r3, #0
 800926c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800926e:	463a      	mov	r2, r7
 8009270:	1d39      	adds	r1, r7, #4
 8009272:	f107 0308 	add.w	r3, r7, #8
 8009276:	4618      	mov	r0, r3
 8009278:	f7fe fca6 	bl	8007bc8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800927c:	6839      	ldr	r1, [r7, #0]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	68ba      	ldr	r2, [r7, #8]
 8009282:	9202      	str	r2, [sp, #8]
 8009284:	9301      	str	r3, [sp, #4]
 8009286:	2300      	movs	r3, #0
 8009288:	9300      	str	r3, [sp, #0]
 800928a:	2300      	movs	r3, #0
 800928c:	460a      	mov	r2, r1
 800928e:	4926      	ldr	r1, [pc, #152]	; (8009328 <vTaskStartScheduler+0xc8>)
 8009290:	4826      	ldr	r0, [pc, #152]	; (800932c <vTaskStartScheduler+0xcc>)
 8009292:	f7ff fdef 	bl	8008e74 <xTaskCreateStatic>
 8009296:	4603      	mov	r3, r0
 8009298:	4a25      	ldr	r2, [pc, #148]	; (8009330 <vTaskStartScheduler+0xd0>)
 800929a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800929c:	4b24      	ldr	r3, [pc, #144]	; (8009330 <vTaskStartScheduler+0xd0>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d002      	beq.n	80092aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80092a4:	2301      	movs	r3, #1
 80092a6:	617b      	str	r3, [r7, #20]
 80092a8:	e001      	b.n	80092ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80092aa:	2300      	movs	r3, #0
 80092ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d102      	bne.n	80092ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80092b4:	f000 ffba 	bl	800a22c <xTimerCreateTimerTask>
 80092b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d11d      	bne.n	80092fc <vTaskStartScheduler+0x9c>
	__asm volatile
 80092c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c4:	b672      	cpsid	i
 80092c6:	f383 8811 	msr	BASEPRI, r3
 80092ca:	f3bf 8f6f 	isb	sy
 80092ce:	f3bf 8f4f 	dsb	sy
 80092d2:	b662      	cpsie	i
 80092d4:	613b      	str	r3, [r7, #16]
}
 80092d6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80092d8:	4b16      	ldr	r3, [pc, #88]	; (8009334 <vTaskStartScheduler+0xd4>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	3354      	adds	r3, #84	; 0x54
 80092de:	4a16      	ldr	r2, [pc, #88]	; (8009338 <vTaskStartScheduler+0xd8>)
 80092e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80092e2:	4b16      	ldr	r3, [pc, #88]	; (800933c <vTaskStartScheduler+0xdc>)
 80092e4:	f04f 32ff 	mov.w	r2, #4294967295
 80092e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80092ea:	4b15      	ldr	r3, [pc, #84]	; (8009340 <vTaskStartScheduler+0xe0>)
 80092ec:	2201      	movs	r2, #1
 80092ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80092f0:	4b14      	ldr	r3, [pc, #80]	; (8009344 <vTaskStartScheduler+0xe4>)
 80092f2:	2200      	movs	r2, #0
 80092f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80092f6:	f001 fc43 	bl	800ab80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80092fa:	e010      	b.n	800931e <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009302:	d10c      	bne.n	800931e <vTaskStartScheduler+0xbe>
	__asm volatile
 8009304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009308:	b672      	cpsid	i
 800930a:	f383 8811 	msr	BASEPRI, r3
 800930e:	f3bf 8f6f 	isb	sy
 8009312:	f3bf 8f4f 	dsb	sy
 8009316:	b662      	cpsie	i
 8009318:	60fb      	str	r3, [r7, #12]
}
 800931a:	bf00      	nop
 800931c:	e7fe      	b.n	800931c <vTaskStartScheduler+0xbc>
}
 800931e:	bf00      	nop
 8009320:	3718      	adds	r7, #24
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	0800b574 	.word	0x0800b574
 800932c:	080099b1 	.word	0x080099b1
 8009330:	200021e4 	.word	0x200021e4
 8009334:	20001cec 	.word	0x20001cec
 8009338:	20000014 	.word	0x20000014
 800933c:	200021e0 	.word	0x200021e0
 8009340:	200021cc 	.word	0x200021cc
 8009344:	200021c4 	.word	0x200021c4

08009348 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009348:	b480      	push	{r7}
 800934a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800934c:	4b04      	ldr	r3, [pc, #16]	; (8009360 <vTaskSuspendAll+0x18>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	3301      	adds	r3, #1
 8009352:	4a03      	ldr	r2, [pc, #12]	; (8009360 <vTaskSuspendAll+0x18>)
 8009354:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009356:	bf00      	nop
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr
 8009360:	200021e8 	.word	0x200021e8

08009364 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b084      	sub	sp, #16
 8009368:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800936a:	2300      	movs	r3, #0
 800936c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800936e:	2300      	movs	r3, #0
 8009370:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009372:	4b43      	ldr	r3, [pc, #268]	; (8009480 <xTaskResumeAll+0x11c>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d10c      	bne.n	8009394 <xTaskResumeAll+0x30>
	__asm volatile
 800937a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800937e:	b672      	cpsid	i
 8009380:	f383 8811 	msr	BASEPRI, r3
 8009384:	f3bf 8f6f 	isb	sy
 8009388:	f3bf 8f4f 	dsb	sy
 800938c:	b662      	cpsie	i
 800938e:	603b      	str	r3, [r7, #0]
}
 8009390:	bf00      	nop
 8009392:	e7fe      	b.n	8009392 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009394:	f001 fc72 	bl	800ac7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009398:	4b39      	ldr	r3, [pc, #228]	; (8009480 <xTaskResumeAll+0x11c>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	3b01      	subs	r3, #1
 800939e:	4a38      	ldr	r2, [pc, #224]	; (8009480 <xTaskResumeAll+0x11c>)
 80093a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093a2:	4b37      	ldr	r3, [pc, #220]	; (8009480 <xTaskResumeAll+0x11c>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d162      	bne.n	8009470 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80093aa:	4b36      	ldr	r3, [pc, #216]	; (8009484 <xTaskResumeAll+0x120>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d05e      	beq.n	8009470 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80093b2:	e02f      	b.n	8009414 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093b4:	4b34      	ldr	r3, [pc, #208]	; (8009488 <xTaskResumeAll+0x124>)
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	68db      	ldr	r3, [r3, #12]
 80093ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	3318      	adds	r3, #24
 80093c0:	4618      	mov	r0, r3
 80093c2:	f7fe fcbf 	bl	8007d44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	3304      	adds	r3, #4
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7fe fcba 	bl	8007d44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093d4:	4b2d      	ldr	r3, [pc, #180]	; (800948c <xTaskResumeAll+0x128>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	429a      	cmp	r2, r3
 80093da:	d903      	bls.n	80093e4 <xTaskResumeAll+0x80>
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e0:	4a2a      	ldr	r2, [pc, #168]	; (800948c <xTaskResumeAll+0x128>)
 80093e2:	6013      	str	r3, [r2, #0]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093e8:	4613      	mov	r3, r2
 80093ea:	009b      	lsls	r3, r3, #2
 80093ec:	4413      	add	r3, r2
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	4a27      	ldr	r2, [pc, #156]	; (8009490 <xTaskResumeAll+0x12c>)
 80093f2:	441a      	add	r2, r3
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	3304      	adds	r3, #4
 80093f8:	4619      	mov	r1, r3
 80093fa:	4610      	mov	r0, r2
 80093fc:	f7fe fc45 	bl	8007c8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009404:	4b23      	ldr	r3, [pc, #140]	; (8009494 <xTaskResumeAll+0x130>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800940a:	429a      	cmp	r2, r3
 800940c:	d302      	bcc.n	8009414 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800940e:	4b22      	ldr	r3, [pc, #136]	; (8009498 <xTaskResumeAll+0x134>)
 8009410:	2201      	movs	r2, #1
 8009412:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009414:	4b1c      	ldr	r3, [pc, #112]	; (8009488 <xTaskResumeAll+0x124>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d1cb      	bne.n	80093b4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d001      	beq.n	8009426 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009422:	f000 fbb9 	bl	8009b98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009426:	4b1d      	ldr	r3, [pc, #116]	; (800949c <xTaskResumeAll+0x138>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d010      	beq.n	8009454 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009432:	f000 f859 	bl	80094e8 <xTaskIncrementTick>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d002      	beq.n	8009442 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800943c:	4b16      	ldr	r3, [pc, #88]	; (8009498 <xTaskResumeAll+0x134>)
 800943e:	2201      	movs	r2, #1
 8009440:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	3b01      	subs	r3, #1
 8009446:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d1f1      	bne.n	8009432 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800944e:	4b13      	ldr	r3, [pc, #76]	; (800949c <xTaskResumeAll+0x138>)
 8009450:	2200      	movs	r2, #0
 8009452:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009454:	4b10      	ldr	r3, [pc, #64]	; (8009498 <xTaskResumeAll+0x134>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d009      	beq.n	8009470 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800945c:	2301      	movs	r3, #1
 800945e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009460:	4b0f      	ldr	r3, [pc, #60]	; (80094a0 <xTaskResumeAll+0x13c>)
 8009462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009466:	601a      	str	r2, [r3, #0]
 8009468:	f3bf 8f4f 	dsb	sy
 800946c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009470:	f001 fc38 	bl	800ace4 <vPortExitCritical>

	return xAlreadyYielded;
 8009474:	68bb      	ldr	r3, [r7, #8]
}
 8009476:	4618      	mov	r0, r3
 8009478:	3710      	adds	r7, #16
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	200021e8 	.word	0x200021e8
 8009484:	200021c0 	.word	0x200021c0
 8009488:	20002180 	.word	0x20002180
 800948c:	200021c8 	.word	0x200021c8
 8009490:	20001cf0 	.word	0x20001cf0
 8009494:	20001cec 	.word	0x20001cec
 8009498:	200021d4 	.word	0x200021d4
 800949c:	200021d0 	.word	0x200021d0
 80094a0:	e000ed04 	.word	0xe000ed04

080094a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80094aa:	4b05      	ldr	r3, [pc, #20]	; (80094c0 <xTaskGetTickCount+0x1c>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80094b0:	687b      	ldr	r3, [r7, #4]
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	370c      	adds	r7, #12
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr
 80094be:	bf00      	nop
 80094c0:	200021c4 	.word	0x200021c4

080094c4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80094ca:	f001 fcbf 	bl	800ae4c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80094ce:	2300      	movs	r3, #0
 80094d0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80094d2:	4b04      	ldr	r3, [pc, #16]	; (80094e4 <xTaskGetTickCountFromISR+0x20>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80094d8:	683b      	ldr	r3, [r7, #0]
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3708      	adds	r7, #8
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}
 80094e2:	bf00      	nop
 80094e4:	200021c4 	.word	0x200021c4

080094e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b086      	sub	sp, #24
 80094ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80094ee:	2300      	movs	r3, #0
 80094f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094f2:	4b50      	ldr	r3, [pc, #320]	; (8009634 <xTaskIncrementTick+0x14c>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	f040 808b 	bne.w	8009612 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80094fc:	4b4e      	ldr	r3, [pc, #312]	; (8009638 <xTaskIncrementTick+0x150>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	3301      	adds	r3, #1
 8009502:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009504:	4a4c      	ldr	r2, [pc, #304]	; (8009638 <xTaskIncrementTick+0x150>)
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d122      	bne.n	8009556 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8009510:	4b4a      	ldr	r3, [pc, #296]	; (800963c <xTaskIncrementTick+0x154>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d00c      	beq.n	8009534 <xTaskIncrementTick+0x4c>
	__asm volatile
 800951a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800951e:	b672      	cpsid	i
 8009520:	f383 8811 	msr	BASEPRI, r3
 8009524:	f3bf 8f6f 	isb	sy
 8009528:	f3bf 8f4f 	dsb	sy
 800952c:	b662      	cpsie	i
 800952e:	603b      	str	r3, [r7, #0]
}
 8009530:	bf00      	nop
 8009532:	e7fe      	b.n	8009532 <xTaskIncrementTick+0x4a>
 8009534:	4b41      	ldr	r3, [pc, #260]	; (800963c <xTaskIncrementTick+0x154>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	60fb      	str	r3, [r7, #12]
 800953a:	4b41      	ldr	r3, [pc, #260]	; (8009640 <xTaskIncrementTick+0x158>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a3f      	ldr	r2, [pc, #252]	; (800963c <xTaskIncrementTick+0x154>)
 8009540:	6013      	str	r3, [r2, #0]
 8009542:	4a3f      	ldr	r2, [pc, #252]	; (8009640 <xTaskIncrementTick+0x158>)
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	6013      	str	r3, [r2, #0]
 8009548:	4b3e      	ldr	r3, [pc, #248]	; (8009644 <xTaskIncrementTick+0x15c>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	3301      	adds	r3, #1
 800954e:	4a3d      	ldr	r2, [pc, #244]	; (8009644 <xTaskIncrementTick+0x15c>)
 8009550:	6013      	str	r3, [r2, #0]
 8009552:	f000 fb21 	bl	8009b98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009556:	4b3c      	ldr	r3, [pc, #240]	; (8009648 <xTaskIncrementTick+0x160>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	693a      	ldr	r2, [r7, #16]
 800955c:	429a      	cmp	r2, r3
 800955e:	d349      	bcc.n	80095f4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009560:	4b36      	ldr	r3, [pc, #216]	; (800963c <xTaskIncrementTick+0x154>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d104      	bne.n	8009574 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800956a:	4b37      	ldr	r3, [pc, #220]	; (8009648 <xTaskIncrementTick+0x160>)
 800956c:	f04f 32ff 	mov.w	r2, #4294967295
 8009570:	601a      	str	r2, [r3, #0]
					break;
 8009572:	e03f      	b.n	80095f4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009574:	4b31      	ldr	r3, [pc, #196]	; (800963c <xTaskIncrementTick+0x154>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	68db      	ldr	r3, [r3, #12]
 800957c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009584:	693a      	ldr	r2, [r7, #16]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	429a      	cmp	r2, r3
 800958a:	d203      	bcs.n	8009594 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800958c:	4a2e      	ldr	r2, [pc, #184]	; (8009648 <xTaskIncrementTick+0x160>)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009592:	e02f      	b.n	80095f4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	3304      	adds	r3, #4
 8009598:	4618      	mov	r0, r3
 800959a:	f7fe fbd3 	bl	8007d44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d004      	beq.n	80095b0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	3318      	adds	r3, #24
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7fe fbca 	bl	8007d44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095b4:	4b25      	ldr	r3, [pc, #148]	; (800964c <xTaskIncrementTick+0x164>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d903      	bls.n	80095c4 <xTaskIncrementTick+0xdc>
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c0:	4a22      	ldr	r2, [pc, #136]	; (800964c <xTaskIncrementTick+0x164>)
 80095c2:	6013      	str	r3, [r2, #0]
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095c8:	4613      	mov	r3, r2
 80095ca:	009b      	lsls	r3, r3, #2
 80095cc:	4413      	add	r3, r2
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	4a1f      	ldr	r2, [pc, #124]	; (8009650 <xTaskIncrementTick+0x168>)
 80095d2:	441a      	add	r2, r3
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	3304      	adds	r3, #4
 80095d8:	4619      	mov	r1, r3
 80095da:	4610      	mov	r0, r2
 80095dc:	f7fe fb55 	bl	8007c8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095e4:	4b1b      	ldr	r3, [pc, #108]	; (8009654 <xTaskIncrementTick+0x16c>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d3b8      	bcc.n	8009560 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80095ee:	2301      	movs	r3, #1
 80095f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095f2:	e7b5      	b.n	8009560 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80095f4:	4b17      	ldr	r3, [pc, #92]	; (8009654 <xTaskIncrementTick+0x16c>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095fa:	4915      	ldr	r1, [pc, #84]	; (8009650 <xTaskIncrementTick+0x168>)
 80095fc:	4613      	mov	r3, r2
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	4413      	add	r3, r2
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	440b      	add	r3, r1
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	2b01      	cmp	r3, #1
 800960a:	d907      	bls.n	800961c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800960c:	2301      	movs	r3, #1
 800960e:	617b      	str	r3, [r7, #20]
 8009610:	e004      	b.n	800961c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009612:	4b11      	ldr	r3, [pc, #68]	; (8009658 <xTaskIncrementTick+0x170>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	3301      	adds	r3, #1
 8009618:	4a0f      	ldr	r2, [pc, #60]	; (8009658 <xTaskIncrementTick+0x170>)
 800961a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800961c:	4b0f      	ldr	r3, [pc, #60]	; (800965c <xTaskIncrementTick+0x174>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d001      	beq.n	8009628 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8009624:	2301      	movs	r3, #1
 8009626:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009628:	697b      	ldr	r3, [r7, #20]
}
 800962a:	4618      	mov	r0, r3
 800962c:	3718      	adds	r7, #24
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	200021e8 	.word	0x200021e8
 8009638:	200021c4 	.word	0x200021c4
 800963c:	20002178 	.word	0x20002178
 8009640:	2000217c 	.word	0x2000217c
 8009644:	200021d8 	.word	0x200021d8
 8009648:	200021e0 	.word	0x200021e0
 800964c:	200021c8 	.word	0x200021c8
 8009650:	20001cf0 	.word	0x20001cf0
 8009654:	20001cec 	.word	0x20001cec
 8009658:	200021d0 	.word	0x200021d0
 800965c:	200021d4 	.word	0x200021d4

08009660 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009660:	b480      	push	{r7}
 8009662:	b085      	sub	sp, #20
 8009664:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009666:	4b2b      	ldr	r3, [pc, #172]	; (8009714 <vTaskSwitchContext+0xb4>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d003      	beq.n	8009676 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800966e:	4b2a      	ldr	r3, [pc, #168]	; (8009718 <vTaskSwitchContext+0xb8>)
 8009670:	2201      	movs	r2, #1
 8009672:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009674:	e048      	b.n	8009708 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8009676:	4b28      	ldr	r3, [pc, #160]	; (8009718 <vTaskSwitchContext+0xb8>)
 8009678:	2200      	movs	r2, #0
 800967a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800967c:	4b27      	ldr	r3, [pc, #156]	; (800971c <vTaskSwitchContext+0xbc>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	60fb      	str	r3, [r7, #12]
 8009682:	e012      	b.n	80096aa <vTaskSwitchContext+0x4a>
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d10c      	bne.n	80096a4 <vTaskSwitchContext+0x44>
	__asm volatile
 800968a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968e:	b672      	cpsid	i
 8009690:	f383 8811 	msr	BASEPRI, r3
 8009694:	f3bf 8f6f 	isb	sy
 8009698:	f3bf 8f4f 	dsb	sy
 800969c:	b662      	cpsie	i
 800969e:	607b      	str	r3, [r7, #4]
}
 80096a0:	bf00      	nop
 80096a2:	e7fe      	b.n	80096a2 <vTaskSwitchContext+0x42>
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	3b01      	subs	r3, #1
 80096a8:	60fb      	str	r3, [r7, #12]
 80096aa:	491d      	ldr	r1, [pc, #116]	; (8009720 <vTaskSwitchContext+0xc0>)
 80096ac:	68fa      	ldr	r2, [r7, #12]
 80096ae:	4613      	mov	r3, r2
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	4413      	add	r3, r2
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	440b      	add	r3, r1
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d0e2      	beq.n	8009684 <vTaskSwitchContext+0x24>
 80096be:	68fa      	ldr	r2, [r7, #12]
 80096c0:	4613      	mov	r3, r2
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	4413      	add	r3, r2
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	4a15      	ldr	r2, [pc, #84]	; (8009720 <vTaskSwitchContext+0xc0>)
 80096ca:	4413      	add	r3, r2
 80096cc:	60bb      	str	r3, [r7, #8]
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	685a      	ldr	r2, [r3, #4]
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	605a      	str	r2, [r3, #4]
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	685a      	ldr	r2, [r3, #4]
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	3308      	adds	r3, #8
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d104      	bne.n	80096ee <vTaskSwitchContext+0x8e>
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	685a      	ldr	r2, [r3, #4]
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	605a      	str	r2, [r3, #4]
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	4a0b      	ldr	r2, [pc, #44]	; (8009724 <vTaskSwitchContext+0xc4>)
 80096f6:	6013      	str	r3, [r2, #0]
 80096f8:	4a08      	ldr	r2, [pc, #32]	; (800971c <vTaskSwitchContext+0xbc>)
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80096fe:	4b09      	ldr	r3, [pc, #36]	; (8009724 <vTaskSwitchContext+0xc4>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	3354      	adds	r3, #84	; 0x54
 8009704:	4a08      	ldr	r2, [pc, #32]	; (8009728 <vTaskSwitchContext+0xc8>)
 8009706:	6013      	str	r3, [r2, #0]
}
 8009708:	bf00      	nop
 800970a:	3714      	adds	r7, #20
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr
 8009714:	200021e8 	.word	0x200021e8
 8009718:	200021d4 	.word	0x200021d4
 800971c:	200021c8 	.word	0x200021c8
 8009720:	20001cf0 	.word	0x20001cf0
 8009724:	20001cec 	.word	0x20001cec
 8009728:	20000014 	.word	0x20000014

0800972c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d10c      	bne.n	8009756 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800973c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009740:	b672      	cpsid	i
 8009742:	f383 8811 	msr	BASEPRI, r3
 8009746:	f3bf 8f6f 	isb	sy
 800974a:	f3bf 8f4f 	dsb	sy
 800974e:	b662      	cpsie	i
 8009750:	60fb      	str	r3, [r7, #12]
}
 8009752:	bf00      	nop
 8009754:	e7fe      	b.n	8009754 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009756:	4b07      	ldr	r3, [pc, #28]	; (8009774 <vTaskPlaceOnEventList+0x48>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	3318      	adds	r3, #24
 800975c:	4619      	mov	r1, r3
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f7fe fab7 	bl	8007cd2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009764:	2101      	movs	r1, #1
 8009766:	6838      	ldr	r0, [r7, #0]
 8009768:	f000 fd0c 	bl	800a184 <prvAddCurrentTaskToDelayedList>
}
 800976c:	bf00      	nop
 800976e:	3710      	adds	r7, #16
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}
 8009774:	20001cec 	.word	0x20001cec

08009778 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009778:	b580      	push	{r7, lr}
 800977a:	b086      	sub	sp, #24
 800977c:	af00      	add	r7, sp, #0
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	60b9      	str	r1, [r7, #8]
 8009782:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d10c      	bne.n	80097a4 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800978a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800978e:	b672      	cpsid	i
 8009790:	f383 8811 	msr	BASEPRI, r3
 8009794:	f3bf 8f6f 	isb	sy
 8009798:	f3bf 8f4f 	dsb	sy
 800979c:	b662      	cpsie	i
 800979e:	617b      	str	r3, [r7, #20]
}
 80097a0:	bf00      	nop
 80097a2:	e7fe      	b.n	80097a2 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80097a4:	4b0a      	ldr	r3, [pc, #40]	; (80097d0 <vTaskPlaceOnEventListRestricted+0x58>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	3318      	adds	r3, #24
 80097aa:	4619      	mov	r1, r3
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f7fe fa6c 	bl	8007c8a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d002      	beq.n	80097be <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80097b8:	f04f 33ff 	mov.w	r3, #4294967295
 80097bc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80097be:	6879      	ldr	r1, [r7, #4]
 80097c0:	68b8      	ldr	r0, [r7, #8]
 80097c2:	f000 fcdf 	bl	800a184 <prvAddCurrentTaskToDelayedList>
	}
 80097c6:	bf00      	nop
 80097c8:	3718      	adds	r7, #24
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
 80097ce:	bf00      	nop
 80097d0:	20001cec 	.word	0x20001cec

080097d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b086      	sub	sp, #24
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	68db      	ldr	r3, [r3, #12]
 80097e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d10c      	bne.n	8009804 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80097ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ee:	b672      	cpsid	i
 80097f0:	f383 8811 	msr	BASEPRI, r3
 80097f4:	f3bf 8f6f 	isb	sy
 80097f8:	f3bf 8f4f 	dsb	sy
 80097fc:	b662      	cpsie	i
 80097fe:	60fb      	str	r3, [r7, #12]
}
 8009800:	bf00      	nop
 8009802:	e7fe      	b.n	8009802 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	3318      	adds	r3, #24
 8009808:	4618      	mov	r0, r3
 800980a:	f7fe fa9b 	bl	8007d44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800980e:	4b1e      	ldr	r3, [pc, #120]	; (8009888 <xTaskRemoveFromEventList+0xb4>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d11d      	bne.n	8009852 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	3304      	adds	r3, #4
 800981a:	4618      	mov	r0, r3
 800981c:	f7fe fa92 	bl	8007d44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009824:	4b19      	ldr	r3, [pc, #100]	; (800988c <xTaskRemoveFromEventList+0xb8>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	429a      	cmp	r2, r3
 800982a:	d903      	bls.n	8009834 <xTaskRemoveFromEventList+0x60>
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009830:	4a16      	ldr	r2, [pc, #88]	; (800988c <xTaskRemoveFromEventList+0xb8>)
 8009832:	6013      	str	r3, [r2, #0]
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009838:	4613      	mov	r3, r2
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	4413      	add	r3, r2
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	4a13      	ldr	r2, [pc, #76]	; (8009890 <xTaskRemoveFromEventList+0xbc>)
 8009842:	441a      	add	r2, r3
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	3304      	adds	r3, #4
 8009848:	4619      	mov	r1, r3
 800984a:	4610      	mov	r0, r2
 800984c:	f7fe fa1d 	bl	8007c8a <vListInsertEnd>
 8009850:	e005      	b.n	800985e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	3318      	adds	r3, #24
 8009856:	4619      	mov	r1, r3
 8009858:	480e      	ldr	r0, [pc, #56]	; (8009894 <xTaskRemoveFromEventList+0xc0>)
 800985a:	f7fe fa16 	bl	8007c8a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009862:	4b0d      	ldr	r3, [pc, #52]	; (8009898 <xTaskRemoveFromEventList+0xc4>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009868:	429a      	cmp	r2, r3
 800986a:	d905      	bls.n	8009878 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800986c:	2301      	movs	r3, #1
 800986e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009870:	4b0a      	ldr	r3, [pc, #40]	; (800989c <xTaskRemoveFromEventList+0xc8>)
 8009872:	2201      	movs	r2, #1
 8009874:	601a      	str	r2, [r3, #0]
 8009876:	e001      	b.n	800987c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8009878:	2300      	movs	r3, #0
 800987a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800987c:	697b      	ldr	r3, [r7, #20]
}
 800987e:	4618      	mov	r0, r3
 8009880:	3718      	adds	r7, #24
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	200021e8 	.word	0x200021e8
 800988c:	200021c8 	.word	0x200021c8
 8009890:	20001cf0 	.word	0x20001cf0
 8009894:	20002180 	.word	0x20002180
 8009898:	20001cec 	.word	0x20001cec
 800989c:	200021d4 	.word	0x200021d4

080098a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80098a0:	b480      	push	{r7}
 80098a2:	b083      	sub	sp, #12
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80098a8:	4b06      	ldr	r3, [pc, #24]	; (80098c4 <vTaskInternalSetTimeOutState+0x24>)
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80098b0:	4b05      	ldr	r3, [pc, #20]	; (80098c8 <vTaskInternalSetTimeOutState+0x28>)
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	605a      	str	r2, [r3, #4]
}
 80098b8:	bf00      	nop
 80098ba:	370c      	adds	r7, #12
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr
 80098c4:	200021d8 	.word	0x200021d8
 80098c8:	200021c4 	.word	0x200021c4

080098cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b088      	sub	sp, #32
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d10c      	bne.n	80098f6 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80098dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e0:	b672      	cpsid	i
 80098e2:	f383 8811 	msr	BASEPRI, r3
 80098e6:	f3bf 8f6f 	isb	sy
 80098ea:	f3bf 8f4f 	dsb	sy
 80098ee:	b662      	cpsie	i
 80098f0:	613b      	str	r3, [r7, #16]
}
 80098f2:	bf00      	nop
 80098f4:	e7fe      	b.n	80098f4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d10c      	bne.n	8009916 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80098fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009900:	b672      	cpsid	i
 8009902:	f383 8811 	msr	BASEPRI, r3
 8009906:	f3bf 8f6f 	isb	sy
 800990a:	f3bf 8f4f 	dsb	sy
 800990e:	b662      	cpsie	i
 8009910:	60fb      	str	r3, [r7, #12]
}
 8009912:	bf00      	nop
 8009914:	e7fe      	b.n	8009914 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8009916:	f001 f9b1 	bl	800ac7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800991a:	4b1d      	ldr	r3, [pc, #116]	; (8009990 <xTaskCheckForTimeOut+0xc4>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	69ba      	ldr	r2, [r7, #24]
 8009926:	1ad3      	subs	r3, r2, r3
 8009928:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009932:	d102      	bne.n	800993a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009934:	2300      	movs	r3, #0
 8009936:	61fb      	str	r3, [r7, #28]
 8009938:	e023      	b.n	8009982 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	4b15      	ldr	r3, [pc, #84]	; (8009994 <xTaskCheckForTimeOut+0xc8>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	429a      	cmp	r2, r3
 8009944:	d007      	beq.n	8009956 <xTaskCheckForTimeOut+0x8a>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	69ba      	ldr	r2, [r7, #24]
 800994c:	429a      	cmp	r2, r3
 800994e:	d302      	bcc.n	8009956 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009950:	2301      	movs	r3, #1
 8009952:	61fb      	str	r3, [r7, #28]
 8009954:	e015      	b.n	8009982 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	697a      	ldr	r2, [r7, #20]
 800995c:	429a      	cmp	r2, r3
 800995e:	d20b      	bcs.n	8009978 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	1ad2      	subs	r2, r2, r3
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f7ff ff97 	bl	80098a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009972:	2300      	movs	r3, #0
 8009974:	61fb      	str	r3, [r7, #28]
 8009976:	e004      	b.n	8009982 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	2200      	movs	r2, #0
 800997c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800997e:	2301      	movs	r3, #1
 8009980:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009982:	f001 f9af 	bl	800ace4 <vPortExitCritical>

	return xReturn;
 8009986:	69fb      	ldr	r3, [r7, #28]
}
 8009988:	4618      	mov	r0, r3
 800998a:	3720      	adds	r7, #32
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}
 8009990:	200021c4 	.word	0x200021c4
 8009994:	200021d8 	.word	0x200021d8

08009998 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009998:	b480      	push	{r7}
 800999a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800999c:	4b03      	ldr	r3, [pc, #12]	; (80099ac <vTaskMissedYield+0x14>)
 800999e:	2201      	movs	r2, #1
 80099a0:	601a      	str	r2, [r3, #0]
}
 80099a2:	bf00      	nop
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr
 80099ac:	200021d4 	.word	0x200021d4

080099b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80099b8:	f000 f852 	bl	8009a60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80099bc:	4b06      	ldr	r3, [pc, #24]	; (80099d8 <prvIdleTask+0x28>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d9f9      	bls.n	80099b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80099c4:	4b05      	ldr	r3, [pc, #20]	; (80099dc <prvIdleTask+0x2c>)
 80099c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099ca:	601a      	str	r2, [r3, #0]
 80099cc:	f3bf 8f4f 	dsb	sy
 80099d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80099d4:	e7f0      	b.n	80099b8 <prvIdleTask+0x8>
 80099d6:	bf00      	nop
 80099d8:	20001cf0 	.word	0x20001cf0
 80099dc:	e000ed04 	.word	0xe000ed04

080099e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80099e6:	2300      	movs	r3, #0
 80099e8:	607b      	str	r3, [r7, #4]
 80099ea:	e00c      	b.n	8009a06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	4613      	mov	r3, r2
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	4413      	add	r3, r2
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	4a12      	ldr	r2, [pc, #72]	; (8009a40 <prvInitialiseTaskLists+0x60>)
 80099f8:	4413      	add	r3, r2
 80099fa:	4618      	mov	r0, r3
 80099fc:	f7fe f918 	bl	8007c30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	3301      	adds	r3, #1
 8009a04:	607b      	str	r3, [r7, #4]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2b37      	cmp	r3, #55	; 0x37
 8009a0a:	d9ef      	bls.n	80099ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009a0c:	480d      	ldr	r0, [pc, #52]	; (8009a44 <prvInitialiseTaskLists+0x64>)
 8009a0e:	f7fe f90f 	bl	8007c30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009a12:	480d      	ldr	r0, [pc, #52]	; (8009a48 <prvInitialiseTaskLists+0x68>)
 8009a14:	f7fe f90c 	bl	8007c30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009a18:	480c      	ldr	r0, [pc, #48]	; (8009a4c <prvInitialiseTaskLists+0x6c>)
 8009a1a:	f7fe f909 	bl	8007c30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009a1e:	480c      	ldr	r0, [pc, #48]	; (8009a50 <prvInitialiseTaskLists+0x70>)
 8009a20:	f7fe f906 	bl	8007c30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009a24:	480b      	ldr	r0, [pc, #44]	; (8009a54 <prvInitialiseTaskLists+0x74>)
 8009a26:	f7fe f903 	bl	8007c30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009a2a:	4b0b      	ldr	r3, [pc, #44]	; (8009a58 <prvInitialiseTaskLists+0x78>)
 8009a2c:	4a05      	ldr	r2, [pc, #20]	; (8009a44 <prvInitialiseTaskLists+0x64>)
 8009a2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009a30:	4b0a      	ldr	r3, [pc, #40]	; (8009a5c <prvInitialiseTaskLists+0x7c>)
 8009a32:	4a05      	ldr	r2, [pc, #20]	; (8009a48 <prvInitialiseTaskLists+0x68>)
 8009a34:	601a      	str	r2, [r3, #0]
}
 8009a36:	bf00      	nop
 8009a38:	3708      	adds	r7, #8
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	20001cf0 	.word	0x20001cf0
 8009a44:	20002150 	.word	0x20002150
 8009a48:	20002164 	.word	0x20002164
 8009a4c:	20002180 	.word	0x20002180
 8009a50:	20002194 	.word	0x20002194
 8009a54:	200021ac 	.word	0x200021ac
 8009a58:	20002178 	.word	0x20002178
 8009a5c:	2000217c 	.word	0x2000217c

08009a60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b082      	sub	sp, #8
 8009a64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a66:	e019      	b.n	8009a9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009a68:	f001 f908 	bl	800ac7c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a6c:	4b10      	ldr	r3, [pc, #64]	; (8009ab0 <prvCheckTasksWaitingTermination+0x50>)
 8009a6e:	68db      	ldr	r3, [r3, #12]
 8009a70:	68db      	ldr	r3, [r3, #12]
 8009a72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	3304      	adds	r3, #4
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f7fe f963 	bl	8007d44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009a7e:	4b0d      	ldr	r3, [pc, #52]	; (8009ab4 <prvCheckTasksWaitingTermination+0x54>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	3b01      	subs	r3, #1
 8009a84:	4a0b      	ldr	r2, [pc, #44]	; (8009ab4 <prvCheckTasksWaitingTermination+0x54>)
 8009a86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009a88:	4b0b      	ldr	r3, [pc, #44]	; (8009ab8 <prvCheckTasksWaitingTermination+0x58>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	3b01      	subs	r3, #1
 8009a8e:	4a0a      	ldr	r2, [pc, #40]	; (8009ab8 <prvCheckTasksWaitingTermination+0x58>)
 8009a90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009a92:	f001 f927 	bl	800ace4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 f848 	bl	8009b2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a9c:	4b06      	ldr	r3, [pc, #24]	; (8009ab8 <prvCheckTasksWaitingTermination+0x58>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d1e1      	bne.n	8009a68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009aa4:	bf00      	nop
 8009aa6:	bf00      	nop
 8009aa8:	3708      	adds	r7, #8
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
 8009aae:	bf00      	nop
 8009ab0:	20002194 	.word	0x20002194
 8009ab4:	200021c0 	.word	0x200021c0
 8009ab8:	200021a8 	.word	0x200021a8

08009abc <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8009abc:	b480      	push	{r7}
 8009abe:	b085      	sub	sp, #20
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8009ac8:	e005      	b.n	8009ad6 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	3301      	adds	r3, #1
 8009ace:	607b      	str	r3, [r7, #4]
			ulCount++;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	2ba5      	cmp	r3, #165	; 0xa5
 8009adc:	d0f5      	beq.n	8009aca <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	089b      	lsrs	r3, r3, #2
 8009ae2:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	b29b      	uxth	r3, r3
	}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3714      	adds	r7, #20
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr

08009af4 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b086      	sub	sp, #24
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d102      	bne.n	8009b08 <uxTaskGetStackHighWaterMark+0x14>
 8009b02:	4b09      	ldr	r3, [pc, #36]	; (8009b28 <uxTaskGetStackHighWaterMark+0x34>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	e000      	b.n	8009b0a <uxTaskGetStackHighWaterMark+0x16>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b10:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8009b12:	6938      	ldr	r0, [r7, #16]
 8009b14:	f7ff ffd2 	bl	8009abc <prvTaskCheckFreeStackSpace>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
	}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3718      	adds	r7, #24
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	20001cec 	.word	0x20001cec

08009b2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	3354      	adds	r3, #84	; 0x54
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f001 fbf9 	bl	800b330 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d108      	bne.n	8009b5a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f001 fa8b 	bl	800b068 <vPortFree>
				vPortFree( pxTCB );
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f001 fa88 	bl	800b068 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009b58:	e01a      	b.n	8009b90 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d103      	bne.n	8009b6c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f001 fa7f 	bl	800b068 <vPortFree>
	}
 8009b6a:	e011      	b.n	8009b90 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009b72:	2b02      	cmp	r3, #2
 8009b74:	d00c      	beq.n	8009b90 <prvDeleteTCB+0x64>
	__asm volatile
 8009b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b7a:	b672      	cpsid	i
 8009b7c:	f383 8811 	msr	BASEPRI, r3
 8009b80:	f3bf 8f6f 	isb	sy
 8009b84:	f3bf 8f4f 	dsb	sy
 8009b88:	b662      	cpsie	i
 8009b8a:	60fb      	str	r3, [r7, #12]
}
 8009b8c:	bf00      	nop
 8009b8e:	e7fe      	b.n	8009b8e <prvDeleteTCB+0x62>
	}
 8009b90:	bf00      	nop
 8009b92:	3710      	adds	r7, #16
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b9e:	4b0c      	ldr	r3, [pc, #48]	; (8009bd0 <prvResetNextTaskUnblockTime+0x38>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d104      	bne.n	8009bb2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009ba8:	4b0a      	ldr	r3, [pc, #40]	; (8009bd4 <prvResetNextTaskUnblockTime+0x3c>)
 8009baa:	f04f 32ff 	mov.w	r2, #4294967295
 8009bae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009bb0:	e008      	b.n	8009bc4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bb2:	4b07      	ldr	r3, [pc, #28]	; (8009bd0 <prvResetNextTaskUnblockTime+0x38>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	68db      	ldr	r3, [r3, #12]
 8009bba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	685b      	ldr	r3, [r3, #4]
 8009bc0:	4a04      	ldr	r2, [pc, #16]	; (8009bd4 <prvResetNextTaskUnblockTime+0x3c>)
 8009bc2:	6013      	str	r3, [r2, #0]
}
 8009bc4:	bf00      	nop
 8009bc6:	370c      	adds	r7, #12
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr
 8009bd0:	20002178 	.word	0x20002178
 8009bd4:	200021e0 	.word	0x200021e0

08009bd8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009bd8:	b480      	push	{r7}
 8009bda:	b083      	sub	sp, #12
 8009bdc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009bde:	4b05      	ldr	r3, [pc, #20]	; (8009bf4 <xTaskGetCurrentTaskHandle+0x1c>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009be4:	687b      	ldr	r3, [r7, #4]
	}
 8009be6:	4618      	mov	r0, r3
 8009be8:	370c      	adds	r7, #12
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr
 8009bf2:	bf00      	nop
 8009bf4:	20001cec 	.word	0x20001cec

08009bf8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b083      	sub	sp, #12
 8009bfc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009bfe:	4b0b      	ldr	r3, [pc, #44]	; (8009c2c <xTaskGetSchedulerState+0x34>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d102      	bne.n	8009c0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009c06:	2301      	movs	r3, #1
 8009c08:	607b      	str	r3, [r7, #4]
 8009c0a:	e008      	b.n	8009c1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c0c:	4b08      	ldr	r3, [pc, #32]	; (8009c30 <xTaskGetSchedulerState+0x38>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d102      	bne.n	8009c1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009c14:	2302      	movs	r3, #2
 8009c16:	607b      	str	r3, [r7, #4]
 8009c18:	e001      	b.n	8009c1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009c1e:	687b      	ldr	r3, [r7, #4]
	}
 8009c20:	4618      	mov	r0, r3
 8009c22:	370c      	adds	r7, #12
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr
 8009c2c:	200021cc 	.word	0x200021cc
 8009c30:	200021e8 	.word	0x200021e8

08009c34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b086      	sub	sp, #24
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009c40:	2300      	movs	r3, #0
 8009c42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d05a      	beq.n	8009d00 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009c4a:	4b30      	ldr	r3, [pc, #192]	; (8009d0c <xTaskPriorityDisinherit+0xd8>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	693a      	ldr	r2, [r7, #16]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d00c      	beq.n	8009c6e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8009c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c58:	b672      	cpsid	i
 8009c5a:	f383 8811 	msr	BASEPRI, r3
 8009c5e:	f3bf 8f6f 	isb	sy
 8009c62:	f3bf 8f4f 	dsb	sy
 8009c66:	b662      	cpsie	i
 8009c68:	60fb      	str	r3, [r7, #12]
}
 8009c6a:	bf00      	nop
 8009c6c:	e7fe      	b.n	8009c6c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d10c      	bne.n	8009c90 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8009c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c7a:	b672      	cpsid	i
 8009c7c:	f383 8811 	msr	BASEPRI, r3
 8009c80:	f3bf 8f6f 	isb	sy
 8009c84:	f3bf 8f4f 	dsb	sy
 8009c88:	b662      	cpsie	i
 8009c8a:	60bb      	str	r3, [r7, #8]
}
 8009c8c:	bf00      	nop
 8009c8e:	e7fe      	b.n	8009c8e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c94:	1e5a      	subs	r2, r3, #1
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d02c      	beq.n	8009d00 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d128      	bne.n	8009d00 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	3304      	adds	r3, #4
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f7fe f846 	bl	8007d44 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cd0:	4b0f      	ldr	r3, [pc, #60]	; (8009d10 <xTaskPriorityDisinherit+0xdc>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d903      	bls.n	8009ce0 <xTaskPriorityDisinherit+0xac>
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cdc:	4a0c      	ldr	r2, [pc, #48]	; (8009d10 <xTaskPriorityDisinherit+0xdc>)
 8009cde:	6013      	str	r3, [r2, #0]
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ce4:	4613      	mov	r3, r2
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	4413      	add	r3, r2
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	4a09      	ldr	r2, [pc, #36]	; (8009d14 <xTaskPriorityDisinherit+0xe0>)
 8009cee:	441a      	add	r2, r3
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	3304      	adds	r3, #4
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	4610      	mov	r0, r2
 8009cf8:	f7fd ffc7 	bl	8007c8a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009d00:	697b      	ldr	r3, [r7, #20]
	}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3718      	adds	r7, #24
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	20001cec 	.word	0x20001cec
 8009d10:	200021c8 	.word	0x200021c8
 8009d14:	20001cf0 	.word	0x20001cf0

08009d18 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b086      	sub	sp, #24
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	60b9      	str	r1, [r7, #8]
 8009d22:	607a      	str	r2, [r7, #4]
 8009d24:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8009d26:	f000 ffa9 	bl	800ac7c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009d2a:	4b29      	ldr	r3, [pc, #164]	; (8009dd0 <xTaskNotifyWait+0xb8>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009d32:	b2db      	uxtb	r3, r3
 8009d34:	2b02      	cmp	r3, #2
 8009d36:	d01c      	beq.n	8009d72 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009d38:	4b25      	ldr	r3, [pc, #148]	; (8009dd0 <xTaskNotifyWait+0xb8>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8009d40:	68fa      	ldr	r2, [r7, #12]
 8009d42:	43d2      	mvns	r2, r2
 8009d44:	400a      	ands	r2, r1
 8009d46:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009d4a:	4b21      	ldr	r3, [pc, #132]	; (8009dd0 <xTaskNotifyWait+0xb8>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	2201      	movs	r2, #1
 8009d50:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d00b      	beq.n	8009d72 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009d5a:	2101      	movs	r1, #1
 8009d5c:	6838      	ldr	r0, [r7, #0]
 8009d5e:	f000 fa11 	bl	800a184 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009d62:	4b1c      	ldr	r3, [pc, #112]	; (8009dd4 <xTaskNotifyWait+0xbc>)
 8009d64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d68:	601a      	str	r2, [r3, #0]
 8009d6a:	f3bf 8f4f 	dsb	sy
 8009d6e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009d72:	f000 ffb7 	bl	800ace4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8009d76:	f000 ff81 	bl	800ac7c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d005      	beq.n	8009d8c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009d80:	4b13      	ldr	r3, [pc, #76]	; (8009dd0 <xTaskNotifyWait+0xb8>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009d8c:	4b10      	ldr	r3, [pc, #64]	; (8009dd0 <xTaskNotifyWait+0xb8>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	2b02      	cmp	r3, #2
 8009d98:	d002      	beq.n	8009da0 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	617b      	str	r3, [r7, #20]
 8009d9e:	e00a      	b.n	8009db6 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009da0:	4b0b      	ldr	r3, [pc, #44]	; (8009dd0 <xTaskNotifyWait+0xb8>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8009da8:	68ba      	ldr	r2, [r7, #8]
 8009daa:	43d2      	mvns	r2, r2
 8009dac:	400a      	ands	r2, r1
 8009dae:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 8009db2:	2301      	movs	r3, #1
 8009db4:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009db6:	4b06      	ldr	r3, [pc, #24]	; (8009dd0 <xTaskNotifyWait+0xb8>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 8009dc0:	f000 ff90 	bl	800ace4 <vPortExitCritical>

		return xReturn;
 8009dc4:	697b      	ldr	r3, [r7, #20]
	}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3718      	adds	r7, #24
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	20001cec 	.word	0x20001cec
 8009dd4:	e000ed04 	.word	0xe000ed04

08009dd8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b08a      	sub	sp, #40	; 0x28
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	60b9      	str	r1, [r7, #8]
 8009de2:	603b      	str	r3, [r7, #0]
 8009de4:	4613      	mov	r3, r2
 8009de6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009de8:	2301      	movs	r3, #1
 8009dea:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d10c      	bne.n	8009e0c <xTaskGenericNotify+0x34>
	__asm volatile
 8009df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df6:	b672      	cpsid	i
 8009df8:	f383 8811 	msr	BASEPRI, r3
 8009dfc:	f3bf 8f6f 	isb	sy
 8009e00:	f3bf 8f4f 	dsb	sy
 8009e04:	b662      	cpsie	i
 8009e06:	61bb      	str	r3, [r7, #24]
}
 8009e08:	bf00      	nop
 8009e0a:	e7fe      	b.n	8009e0a <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8009e10:	f000 ff34 	bl	800ac7c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d004      	beq.n	8009e24 <xTaskGenericNotify+0x4c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009e1a:	6a3b      	ldr	r3, [r7, #32]
 8009e1c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009e24:	6a3b      	ldr	r3, [r7, #32]
 8009e26:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009e2a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009e2c:	6a3b      	ldr	r3, [r7, #32]
 8009e2e:	2202      	movs	r2, #2
 8009e30:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8009e34:	79fb      	ldrb	r3, [r7, #7]
 8009e36:	2b04      	cmp	r3, #4
 8009e38:	d82d      	bhi.n	8009e96 <xTaskGenericNotify+0xbe>
 8009e3a:	a201      	add	r2, pc, #4	; (adr r2, 8009e40 <xTaskGenericNotify+0x68>)
 8009e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e40:	08009ebd 	.word	0x08009ebd
 8009e44:	08009e55 	.word	0x08009e55
 8009e48:	08009e67 	.word	0x08009e67
 8009e4c:	08009e77 	.word	0x08009e77
 8009e50:	08009e81 	.word	0x08009e81
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009e54:	6a3b      	ldr	r3, [r7, #32]
 8009e56:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	431a      	orrs	r2, r3
 8009e5e:	6a3b      	ldr	r3, [r7, #32]
 8009e60:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009e64:	e02d      	b.n	8009ec2 <xTaskGenericNotify+0xea>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009e66:	6a3b      	ldr	r3, [r7, #32]
 8009e68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009e6c:	1c5a      	adds	r2, r3, #1
 8009e6e:	6a3b      	ldr	r3, [r7, #32]
 8009e70:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009e74:	e025      	b.n	8009ec2 <xTaskGenericNotify+0xea>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009e76:	6a3b      	ldr	r3, [r7, #32]
 8009e78:	68ba      	ldr	r2, [r7, #8]
 8009e7a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009e7e:	e020      	b.n	8009ec2 <xTaskGenericNotify+0xea>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009e80:	7ffb      	ldrb	r3, [r7, #31]
 8009e82:	2b02      	cmp	r3, #2
 8009e84:	d004      	beq.n	8009e90 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009e86:	6a3b      	ldr	r3, [r7, #32]
 8009e88:	68ba      	ldr	r2, [r7, #8]
 8009e8a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009e8e:	e018      	b.n	8009ec2 <xTaskGenericNotify+0xea>
						xReturn = pdFAIL;
 8009e90:	2300      	movs	r3, #0
 8009e92:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8009e94:	e015      	b.n	8009ec2 <xTaskGenericNotify+0xea>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009e96:	6a3b      	ldr	r3, [r7, #32]
 8009e98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ea0:	d00e      	beq.n	8009ec0 <xTaskGenericNotify+0xe8>
	__asm volatile
 8009ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea6:	b672      	cpsid	i
 8009ea8:	f383 8811 	msr	BASEPRI, r3
 8009eac:	f3bf 8f6f 	isb	sy
 8009eb0:	f3bf 8f4f 	dsb	sy
 8009eb4:	b662      	cpsie	i
 8009eb6:	617b      	str	r3, [r7, #20]
}
 8009eb8:	bf00      	nop
 8009eba:	e7fe      	b.n	8009eba <xTaskGenericNotify+0xe2>
					break;
 8009ebc:	bf00      	nop
 8009ebe:	e000      	b.n	8009ec2 <xTaskGenericNotify+0xea>

					break;
 8009ec0:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009ec2:	7ffb      	ldrb	r3, [r7, #31]
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d13c      	bne.n	8009f42 <xTaskGenericNotify+0x16a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ec8:	6a3b      	ldr	r3, [r7, #32]
 8009eca:	3304      	adds	r3, #4
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f7fd ff39 	bl	8007d44 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009ed2:	6a3b      	ldr	r3, [r7, #32]
 8009ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ed6:	4b1e      	ldr	r3, [pc, #120]	; (8009f50 <xTaskGenericNotify+0x178>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d903      	bls.n	8009ee6 <xTaskGenericNotify+0x10e>
 8009ede:	6a3b      	ldr	r3, [r7, #32]
 8009ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee2:	4a1b      	ldr	r2, [pc, #108]	; (8009f50 <xTaskGenericNotify+0x178>)
 8009ee4:	6013      	str	r3, [r2, #0]
 8009ee6:	6a3b      	ldr	r3, [r7, #32]
 8009ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eea:	4613      	mov	r3, r2
 8009eec:	009b      	lsls	r3, r3, #2
 8009eee:	4413      	add	r3, r2
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	4a18      	ldr	r2, [pc, #96]	; (8009f54 <xTaskGenericNotify+0x17c>)
 8009ef4:	441a      	add	r2, r3
 8009ef6:	6a3b      	ldr	r3, [r7, #32]
 8009ef8:	3304      	adds	r3, #4
 8009efa:	4619      	mov	r1, r3
 8009efc:	4610      	mov	r0, r2
 8009efe:	f7fd fec4 	bl	8007c8a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009f02:	6a3b      	ldr	r3, [r7, #32]
 8009f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d00c      	beq.n	8009f24 <xTaskGenericNotify+0x14c>
	__asm volatile
 8009f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f0e:	b672      	cpsid	i
 8009f10:	f383 8811 	msr	BASEPRI, r3
 8009f14:	f3bf 8f6f 	isb	sy
 8009f18:	f3bf 8f4f 	dsb	sy
 8009f1c:	b662      	cpsie	i
 8009f1e:	613b      	str	r3, [r7, #16]
}
 8009f20:	bf00      	nop
 8009f22:	e7fe      	b.n	8009f22 <xTaskGenericNotify+0x14a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009f24:	6a3b      	ldr	r3, [r7, #32]
 8009f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f28:	4b0b      	ldr	r3, [pc, #44]	; (8009f58 <xTaskGenericNotify+0x180>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d907      	bls.n	8009f42 <xTaskGenericNotify+0x16a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8009f32:	4b0a      	ldr	r3, [pc, #40]	; (8009f5c <xTaskGenericNotify+0x184>)
 8009f34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f38:	601a      	str	r2, [r3, #0]
 8009f3a:	f3bf 8f4f 	dsb	sy
 8009f3e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009f42:	f000 fecf 	bl	800ace4 <vPortExitCritical>

		return xReturn;
 8009f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3728      	adds	r7, #40	; 0x28
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	200021c8 	.word	0x200021c8
 8009f54:	20001cf0 	.word	0x20001cf0
 8009f58:	20001cec 	.word	0x20001cec
 8009f5c:	e000ed04 	.word	0xe000ed04

08009f60 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b08e      	sub	sp, #56	; 0x38
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	60f8      	str	r0, [r7, #12]
 8009f68:	60b9      	str	r1, [r7, #8]
 8009f6a:	603b      	str	r3, [r7, #0]
 8009f6c:	4613      	mov	r3, r2
 8009f6e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8009f70:	2301      	movs	r3, #1
 8009f72:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d10c      	bne.n	8009f94 <xTaskGenericNotifyFromISR+0x34>
	__asm volatile
 8009f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7e:	b672      	cpsid	i
 8009f80:	f383 8811 	msr	BASEPRI, r3
 8009f84:	f3bf 8f6f 	isb	sy
 8009f88:	f3bf 8f4f 	dsb	sy
 8009f8c:	b662      	cpsie	i
 8009f8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009f90:	bf00      	nop
 8009f92:	e7fe      	b.n	8009f92 <xTaskGenericNotifyFromISR+0x32>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f94:	f000 ff5a 	bl	800ae4c <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8009f9c:	f3ef 8211 	mrs	r2, BASEPRI
 8009fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa4:	b672      	cpsid	i
 8009fa6:	f383 8811 	msr	BASEPRI, r3
 8009faa:	f3bf 8f6f 	isb	sy
 8009fae:	f3bf 8f4f 	dsb	sy
 8009fb2:	b662      	cpsie	i
 8009fb4:	623a      	str	r2, [r7, #32]
 8009fb6:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8009fb8:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009fba:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d004      	beq.n	8009fcc <xTaskGenericNotifyFromISR+0x6c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fce:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd8:	2202      	movs	r2, #2
 8009fda:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8009fde:	79fb      	ldrb	r3, [r7, #7]
 8009fe0:	2b04      	cmp	r3, #4
 8009fe2:	d82f      	bhi.n	800a044 <xTaskGenericNotifyFromISR+0xe4>
 8009fe4:	a201      	add	r2, pc, #4	; (adr r2, 8009fec <xTaskGenericNotifyFromISR+0x8c>)
 8009fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fea:	bf00      	nop
 8009fec:	0800a06b 	.word	0x0800a06b
 8009ff0:	0800a001 	.word	0x0800a001
 8009ff4:	0800a013 	.word	0x0800a013
 8009ff8:	0800a023 	.word	0x0800a023
 8009ffc:	0800a02d 	.word	0x0800a02d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a002:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	431a      	orrs	r2, r3
 800a00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a00c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800a010:	e02e      	b.n	800a070 <xTaskGenericNotifyFromISR+0x110>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a014:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a018:	1c5a      	adds	r2, r3, #1
 800a01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a01c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800a020:	e026      	b.n	800a070 <xTaskGenericNotifyFromISR+0x110>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a024:	68ba      	ldr	r2, [r7, #8]
 800a026:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800a02a:	e021      	b.n	800a070 <xTaskGenericNotifyFromISR+0x110>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a02c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a030:	2b02      	cmp	r3, #2
 800a032:	d004      	beq.n	800a03e <xTaskGenericNotifyFromISR+0xde>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a036:	68ba      	ldr	r2, [r7, #8]
 800a038:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a03c:	e018      	b.n	800a070 <xTaskGenericNotifyFromISR+0x110>
						xReturn = pdFAIL;
 800a03e:	2300      	movs	r3, #0
 800a040:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800a042:	e015      	b.n	800a070 <xTaskGenericNotifyFromISR+0x110>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a046:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a04a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a04e:	d00e      	beq.n	800a06e <xTaskGenericNotifyFromISR+0x10e>
	__asm volatile
 800a050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a054:	b672      	cpsid	i
 800a056:	f383 8811 	msr	BASEPRI, r3
 800a05a:	f3bf 8f6f 	isb	sy
 800a05e:	f3bf 8f4f 	dsb	sy
 800a062:	b662      	cpsie	i
 800a064:	61bb      	str	r3, [r7, #24]
}
 800a066:	bf00      	nop
 800a068:	e7fe      	b.n	800a068 <xTaskGenericNotifyFromISR+0x108>
					break;
 800a06a:	bf00      	nop
 800a06c:	e000      	b.n	800a070 <xTaskGenericNotifyFromISR+0x110>
					break;
 800a06e:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a070:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a074:	2b01      	cmp	r3, #1
 800a076:	d148      	bne.n	800a10a <xTaskGenericNotifyFromISR+0x1aa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a07a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d00c      	beq.n	800a09a <xTaskGenericNotifyFromISR+0x13a>
	__asm volatile
 800a080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a084:	b672      	cpsid	i
 800a086:	f383 8811 	msr	BASEPRI, r3
 800a08a:	f3bf 8f6f 	isb	sy
 800a08e:	f3bf 8f4f 	dsb	sy
 800a092:	b662      	cpsie	i
 800a094:	617b      	str	r3, [r7, #20]
}
 800a096:	bf00      	nop
 800a098:	e7fe      	b.n	800a098 <xTaskGenericNotifyFromISR+0x138>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a09a:	4b21      	ldr	r3, [pc, #132]	; (800a120 <xTaskGenericNotifyFromISR+0x1c0>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d11d      	bne.n	800a0de <xTaskGenericNotifyFromISR+0x17e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a4:	3304      	adds	r3, #4
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7fd fe4c 	bl	8007d44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0b0:	4b1c      	ldr	r3, [pc, #112]	; (800a124 <xTaskGenericNotifyFromISR+0x1c4>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d903      	bls.n	800a0c0 <xTaskGenericNotifyFromISR+0x160>
 800a0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0bc:	4a19      	ldr	r2, [pc, #100]	; (800a124 <xTaskGenericNotifyFromISR+0x1c4>)
 800a0be:	6013      	str	r3, [r2, #0]
 800a0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0c4:	4613      	mov	r3, r2
 800a0c6:	009b      	lsls	r3, r3, #2
 800a0c8:	4413      	add	r3, r2
 800a0ca:	009b      	lsls	r3, r3, #2
 800a0cc:	4a16      	ldr	r2, [pc, #88]	; (800a128 <xTaskGenericNotifyFromISR+0x1c8>)
 800a0ce:	441a      	add	r2, r3
 800a0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d2:	3304      	adds	r3, #4
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	4610      	mov	r0, r2
 800a0d8:	f7fd fdd7 	bl	8007c8a <vListInsertEnd>
 800a0dc:	e005      	b.n	800a0ea <xTaskGenericNotifyFromISR+0x18a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e0:	3318      	adds	r3, #24
 800a0e2:	4619      	mov	r1, r3
 800a0e4:	4811      	ldr	r0, [pc, #68]	; (800a12c <xTaskGenericNotifyFromISR+0x1cc>)
 800a0e6:	f7fd fdd0 	bl	8007c8a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0ee:	4b10      	ldr	r3, [pc, #64]	; (800a130 <xTaskGenericNotifyFromISR+0x1d0>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d908      	bls.n	800a10a <xTaskGenericNotifyFromISR+0x1aa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800a0f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d002      	beq.n	800a104 <xTaskGenericNotifyFromISR+0x1a4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800a0fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a100:	2201      	movs	r2, #1
 800a102:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800a104:	4b0b      	ldr	r3, [pc, #44]	; (800a134 <xTaskGenericNotifyFromISR+0x1d4>)
 800a106:	2201      	movs	r2, #1
 800a108:	601a      	str	r2, [r3, #0]
 800a10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a10c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	f383 8811 	msr	BASEPRI, r3
}
 800a114:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800a116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800a118:	4618      	mov	r0, r3
 800a11a:	3738      	adds	r7, #56	; 0x38
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}
 800a120:	200021e8 	.word	0x200021e8
 800a124:	200021c8 	.word	0x200021c8
 800a128:	20001cf0 	.word	0x20001cf0
 800a12c:	20002180 	.word	0x20002180
 800a130:	20001cec 	.word	0x20001cec
 800a134:	200021d4 	.word	0x200021d4

0800a138 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b084      	sub	sp, #16
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d102      	bne.n	800a14c <xTaskNotifyStateClear+0x14>
 800a146:	4b0e      	ldr	r3, [pc, #56]	; (800a180 <xTaskNotifyStateClear+0x48>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	e000      	b.n	800a14e <xTaskNotifyStateClear+0x16>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 800a150:	f000 fd94 	bl	800ac7c <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800a15a:	b2db      	uxtb	r3, r3
 800a15c:	2b02      	cmp	r3, #2
 800a15e:	d106      	bne.n	800a16e <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	2200      	movs	r2, #0
 800a164:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				xReturn = pdPASS;
 800a168:	2301      	movs	r3, #1
 800a16a:	60fb      	str	r3, [r7, #12]
 800a16c:	e001      	b.n	800a172 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800a16e:	2300      	movs	r3, #0
 800a170:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800a172:	f000 fdb7 	bl	800ace4 <vPortExitCritical>

		return xReturn;
 800a176:	68fb      	ldr	r3, [r7, #12]
	}
 800a178:	4618      	mov	r0, r3
 800a17a:	3710      	adds	r7, #16
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}
 800a180:	20001cec 	.word	0x20001cec

0800a184 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a18e:	4b21      	ldr	r3, [pc, #132]	; (800a214 <prvAddCurrentTaskToDelayedList+0x90>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a194:	4b20      	ldr	r3, [pc, #128]	; (800a218 <prvAddCurrentTaskToDelayedList+0x94>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	3304      	adds	r3, #4
 800a19a:	4618      	mov	r0, r3
 800a19c:	f7fd fdd2 	bl	8007d44 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1a6:	d10a      	bne.n	800a1be <prvAddCurrentTaskToDelayedList+0x3a>
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d007      	beq.n	800a1be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1ae:	4b1a      	ldr	r3, [pc, #104]	; (800a218 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	3304      	adds	r3, #4
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	4819      	ldr	r0, [pc, #100]	; (800a21c <prvAddCurrentTaskToDelayedList+0x98>)
 800a1b8:	f7fd fd67 	bl	8007c8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a1bc:	e026      	b.n	800a20c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a1be:	68fa      	ldr	r2, [r7, #12]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	4413      	add	r3, r2
 800a1c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a1c6:	4b14      	ldr	r3, [pc, #80]	; (800a218 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	68ba      	ldr	r2, [r7, #8]
 800a1cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a1ce:	68ba      	ldr	r2, [r7, #8]
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d209      	bcs.n	800a1ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1d6:	4b12      	ldr	r3, [pc, #72]	; (800a220 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a1d8:	681a      	ldr	r2, [r3, #0]
 800a1da:	4b0f      	ldr	r3, [pc, #60]	; (800a218 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	3304      	adds	r3, #4
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	4610      	mov	r0, r2
 800a1e4:	f7fd fd75 	bl	8007cd2 <vListInsert>
}
 800a1e8:	e010      	b.n	800a20c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1ea:	4b0e      	ldr	r3, [pc, #56]	; (800a224 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a1ec:	681a      	ldr	r2, [r3, #0]
 800a1ee:	4b0a      	ldr	r3, [pc, #40]	; (800a218 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	3304      	adds	r3, #4
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	4610      	mov	r0, r2
 800a1f8:	f7fd fd6b 	bl	8007cd2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a1fc:	4b0a      	ldr	r3, [pc, #40]	; (800a228 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	68ba      	ldr	r2, [r7, #8]
 800a202:	429a      	cmp	r2, r3
 800a204:	d202      	bcs.n	800a20c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a206:	4a08      	ldr	r2, [pc, #32]	; (800a228 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	6013      	str	r3, [r2, #0]
}
 800a20c:	bf00      	nop
 800a20e:	3710      	adds	r7, #16
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}
 800a214:	200021c4 	.word	0x200021c4
 800a218:	20001cec 	.word	0x20001cec
 800a21c:	200021ac 	.word	0x200021ac
 800a220:	2000217c 	.word	0x2000217c
 800a224:	20002178 	.word	0x20002178
 800a228:	200021e0 	.word	0x200021e0

0800a22c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b08a      	sub	sp, #40	; 0x28
 800a230:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a232:	2300      	movs	r3, #0
 800a234:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a236:	f000 fbb5 	bl	800a9a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a23a:	4b1d      	ldr	r3, [pc, #116]	; (800a2b0 <xTimerCreateTimerTask+0x84>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d021      	beq.n	800a286 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a242:	2300      	movs	r3, #0
 800a244:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a246:	2300      	movs	r3, #0
 800a248:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a24a:	1d3a      	adds	r2, r7, #4
 800a24c:	f107 0108 	add.w	r1, r7, #8
 800a250:	f107 030c 	add.w	r3, r7, #12
 800a254:	4618      	mov	r0, r3
 800a256:	f7fd fcd1 	bl	8007bfc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a25a:	6879      	ldr	r1, [r7, #4]
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	68fa      	ldr	r2, [r7, #12]
 800a260:	9202      	str	r2, [sp, #8]
 800a262:	9301      	str	r3, [sp, #4]
 800a264:	2302      	movs	r3, #2
 800a266:	9300      	str	r3, [sp, #0]
 800a268:	2300      	movs	r3, #0
 800a26a:	460a      	mov	r2, r1
 800a26c:	4911      	ldr	r1, [pc, #68]	; (800a2b4 <xTimerCreateTimerTask+0x88>)
 800a26e:	4812      	ldr	r0, [pc, #72]	; (800a2b8 <xTimerCreateTimerTask+0x8c>)
 800a270:	f7fe fe00 	bl	8008e74 <xTaskCreateStatic>
 800a274:	4603      	mov	r3, r0
 800a276:	4a11      	ldr	r2, [pc, #68]	; (800a2bc <xTimerCreateTimerTask+0x90>)
 800a278:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a27a:	4b10      	ldr	r3, [pc, #64]	; (800a2bc <xTimerCreateTimerTask+0x90>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d001      	beq.n	800a286 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a282:	2301      	movs	r3, #1
 800a284:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d10c      	bne.n	800a2a6 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800a28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a290:	b672      	cpsid	i
 800a292:	f383 8811 	msr	BASEPRI, r3
 800a296:	f3bf 8f6f 	isb	sy
 800a29a:	f3bf 8f4f 	dsb	sy
 800a29e:	b662      	cpsie	i
 800a2a0:	613b      	str	r3, [r7, #16]
}
 800a2a2:	bf00      	nop
 800a2a4:	e7fe      	b.n	800a2a4 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800a2a6:	697b      	ldr	r3, [r7, #20]
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3718      	adds	r7, #24
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}
 800a2b0:	2000221c 	.word	0x2000221c
 800a2b4:	0800b57c 	.word	0x0800b57c
 800a2b8:	0800a53d 	.word	0x0800a53d
 800a2bc:	20002220 	.word	0x20002220

0800a2c0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b088      	sub	sp, #32
 800a2c4:	af02      	add	r7, sp, #8
 800a2c6:	60f8      	str	r0, [r7, #12]
 800a2c8:	60b9      	str	r1, [r7, #8]
 800a2ca:	607a      	str	r2, [r7, #4]
 800a2cc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800a2ce:	202c      	movs	r0, #44	; 0x2c
 800a2d0:	f000 fe00 	bl	800aed4 <pvPortMalloc>
 800a2d4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d00d      	beq.n	800a2f8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800a2dc:	697b      	ldr	r3, [r7, #20]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	9301      	str	r3, [sp, #4]
 800a2e8:	6a3b      	ldr	r3, [r7, #32]
 800a2ea:	9300      	str	r3, [sp, #0]
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	687a      	ldr	r2, [r7, #4]
 800a2f0:	68b9      	ldr	r1, [r7, #8]
 800a2f2:	68f8      	ldr	r0, [r7, #12]
 800a2f4:	f000 f847 	bl	800a386 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a2f8:	697b      	ldr	r3, [r7, #20]
	}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3718      	adds	r7, #24
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}

0800a302 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800a302:	b580      	push	{r7, lr}
 800a304:	b08a      	sub	sp, #40	; 0x28
 800a306:	af02      	add	r7, sp, #8
 800a308:	60f8      	str	r0, [r7, #12]
 800a30a:	60b9      	str	r1, [r7, #8]
 800a30c:	607a      	str	r2, [r7, #4]
 800a30e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800a310:	232c      	movs	r3, #44	; 0x2c
 800a312:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	2b2c      	cmp	r3, #44	; 0x2c
 800a318:	d00c      	beq.n	800a334 <xTimerCreateStatic+0x32>
	__asm volatile
 800a31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a31e:	b672      	cpsid	i
 800a320:	f383 8811 	msr	BASEPRI, r3
 800a324:	f3bf 8f6f 	isb	sy
 800a328:	f3bf 8f4f 	dsb	sy
 800a32c:	b662      	cpsie	i
 800a32e:	61bb      	str	r3, [r7, #24]
}
 800a330:	bf00      	nop
 800a332:	e7fe      	b.n	800a332 <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a334:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800a336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d10c      	bne.n	800a356 <xTimerCreateStatic+0x54>
	__asm volatile
 800a33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a340:	b672      	cpsid	i
 800a342:	f383 8811 	msr	BASEPRI, r3
 800a346:	f3bf 8f6f 	isb	sy
 800a34a:	f3bf 8f4f 	dsb	sy
 800a34e:	b662      	cpsie	i
 800a350:	617b      	str	r3, [r7, #20]
}
 800a352:	bf00      	nop
 800a354:	e7fe      	b.n	800a354 <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800a356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a358:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800a35a:	69fb      	ldr	r3, [r7, #28]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d00d      	beq.n	800a37c <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800a360:	69fb      	ldr	r3, [r7, #28]
 800a362:	2202      	movs	r2, #2
 800a364:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a368:	69fb      	ldr	r3, [r7, #28]
 800a36a:	9301      	str	r3, [sp, #4]
 800a36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a36e:	9300      	str	r3, [sp, #0]
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	68b9      	ldr	r1, [r7, #8]
 800a376:	68f8      	ldr	r0, [r7, #12]
 800a378:	f000 f805 	bl	800a386 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a37c:	69fb      	ldr	r3, [r7, #28]
	}
 800a37e:	4618      	mov	r0, r3
 800a380:	3720      	adds	r7, #32
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}

0800a386 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800a386:	b580      	push	{r7, lr}
 800a388:	b086      	sub	sp, #24
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	60f8      	str	r0, [r7, #12]
 800a38e:	60b9      	str	r1, [r7, #8]
 800a390:	607a      	str	r2, [r7, #4]
 800a392:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d10c      	bne.n	800a3b4 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 800a39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a39e:	b672      	cpsid	i
 800a3a0:	f383 8811 	msr	BASEPRI, r3
 800a3a4:	f3bf 8f6f 	isb	sy
 800a3a8:	f3bf 8f4f 	dsb	sy
 800a3ac:	b662      	cpsie	i
 800a3ae:	617b      	str	r3, [r7, #20]
}
 800a3b0:	bf00      	nop
 800a3b2:	e7fe      	b.n	800a3b2 <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 800a3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d01e      	beq.n	800a3f8 <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800a3ba:	f000 faf3 	bl	800a9a4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800a3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c0:	68fa      	ldr	r2, [r7, #12]
 800a3c2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c6:	68ba      	ldr	r2, [r7, #8]
 800a3c8:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800a3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3cc:	683a      	ldr	r2, [r7, #0]
 800a3ce:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d2:	6a3a      	ldr	r2, [r7, #32]
 800a3d4:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d8:	3304      	adds	r3, #4
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7fd fc48 	bl	8007c70 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d008      	beq.n	800a3f8 <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800a3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3ec:	f043 0304 	orr.w	r3, r3, #4
 800a3f0:	b2da      	uxtb	r2, r3
 800a3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800a3f8:	bf00      	nop
 800a3fa:	3718      	adds	r7, #24
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b08a      	sub	sp, #40	; 0x28
 800a404:	af00      	add	r7, sp, #0
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	60b9      	str	r1, [r7, #8]
 800a40a:	607a      	str	r2, [r7, #4]
 800a40c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a40e:	2300      	movs	r3, #0
 800a410:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d10c      	bne.n	800a432 <xTimerGenericCommand+0x32>
	__asm volatile
 800a418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41c:	b672      	cpsid	i
 800a41e:	f383 8811 	msr	BASEPRI, r3
 800a422:	f3bf 8f6f 	isb	sy
 800a426:	f3bf 8f4f 	dsb	sy
 800a42a:	b662      	cpsie	i
 800a42c:	623b      	str	r3, [r7, #32]
}
 800a42e:	bf00      	nop
 800a430:	e7fe      	b.n	800a430 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a432:	4b1a      	ldr	r3, [pc, #104]	; (800a49c <xTimerGenericCommand+0x9c>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d02a      	beq.n	800a490 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	2b05      	cmp	r3, #5
 800a44a:	dc18      	bgt.n	800a47e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a44c:	f7ff fbd4 	bl	8009bf8 <xTaskGetSchedulerState>
 800a450:	4603      	mov	r3, r0
 800a452:	2b02      	cmp	r3, #2
 800a454:	d109      	bne.n	800a46a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a456:	4b11      	ldr	r3, [pc, #68]	; (800a49c <xTimerGenericCommand+0x9c>)
 800a458:	6818      	ldr	r0, [r3, #0]
 800a45a:	f107 0110 	add.w	r1, r7, #16
 800a45e:	2300      	movs	r3, #0
 800a460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a462:	f7fd fda9 	bl	8007fb8 <xQueueGenericSend>
 800a466:	6278      	str	r0, [r7, #36]	; 0x24
 800a468:	e012      	b.n	800a490 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a46a:	4b0c      	ldr	r3, [pc, #48]	; (800a49c <xTimerGenericCommand+0x9c>)
 800a46c:	6818      	ldr	r0, [r3, #0]
 800a46e:	f107 0110 	add.w	r1, r7, #16
 800a472:	2300      	movs	r3, #0
 800a474:	2200      	movs	r2, #0
 800a476:	f7fd fd9f 	bl	8007fb8 <xQueueGenericSend>
 800a47a:	6278      	str	r0, [r7, #36]	; 0x24
 800a47c:	e008      	b.n	800a490 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a47e:	4b07      	ldr	r3, [pc, #28]	; (800a49c <xTimerGenericCommand+0x9c>)
 800a480:	6818      	ldr	r0, [r3, #0]
 800a482:	f107 0110 	add.w	r1, r7, #16
 800a486:	2300      	movs	r3, #0
 800a488:	683a      	ldr	r2, [r7, #0]
 800a48a:	f7fd fe9b 	bl	80081c4 <xQueueGenericSendFromISR>
 800a48e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a492:	4618      	mov	r0, r3
 800a494:	3728      	adds	r7, #40	; 0x28
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}
 800a49a:	bf00      	nop
 800a49c:	2000221c 	.word	0x2000221c

0800a4a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b088      	sub	sp, #32
 800a4a4:	af02      	add	r7, sp, #8
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4aa:	4b23      	ldr	r3, [pc, #140]	; (800a538 <prvProcessExpiredTimer+0x98>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	68db      	ldr	r3, [r3, #12]
 800a4b0:	68db      	ldr	r3, [r3, #12]
 800a4b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	3304      	adds	r3, #4
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f7fd fc43 	bl	8007d44 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4c4:	f003 0304 	and.w	r3, r3, #4
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d024      	beq.n	800a516 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	699a      	ldr	r2, [r3, #24]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	18d1      	adds	r1, r2, r3
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	683a      	ldr	r2, [r7, #0]
 800a4d8:	6978      	ldr	r0, [r7, #20]
 800a4da:	f000 f8d3 	bl	800a684 <prvInsertTimerInActiveList>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d021      	beq.n	800a528 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	9300      	str	r3, [sp, #0]
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	687a      	ldr	r2, [r7, #4]
 800a4ec:	2100      	movs	r1, #0
 800a4ee:	6978      	ldr	r0, [r7, #20]
 800a4f0:	f7ff ff86 	bl	800a400 <xTimerGenericCommand>
 800a4f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d115      	bne.n	800a528 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800a4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a500:	b672      	cpsid	i
 800a502:	f383 8811 	msr	BASEPRI, r3
 800a506:	f3bf 8f6f 	isb	sy
 800a50a:	f3bf 8f4f 	dsb	sy
 800a50e:	b662      	cpsie	i
 800a510:	60fb      	str	r3, [r7, #12]
}
 800a512:	bf00      	nop
 800a514:	e7fe      	b.n	800a514 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a51c:	f023 0301 	bic.w	r3, r3, #1
 800a520:	b2da      	uxtb	r2, r3
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	6a1b      	ldr	r3, [r3, #32]
 800a52c:	6978      	ldr	r0, [r7, #20]
 800a52e:	4798      	blx	r3
}
 800a530:	bf00      	nop
 800a532:	3718      	adds	r7, #24
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}
 800a538:	20002214 	.word	0x20002214

0800a53c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b084      	sub	sp, #16
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a544:	f107 0308 	add.w	r3, r7, #8
 800a548:	4618      	mov	r0, r3
 800a54a:	f000 f857 	bl	800a5fc <prvGetNextExpireTime>
 800a54e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	4619      	mov	r1, r3
 800a554:	68f8      	ldr	r0, [r7, #12]
 800a556:	f000 f803 	bl	800a560 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a55a:	f000 f8d5 	bl	800a708 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a55e:	e7f1      	b.n	800a544 <prvTimerTask+0x8>

0800a560 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b084      	sub	sp, #16
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a56a:	f7fe feed 	bl	8009348 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a56e:	f107 0308 	add.w	r3, r7, #8
 800a572:	4618      	mov	r0, r3
 800a574:	f000 f866 	bl	800a644 <prvSampleTimeNow>
 800a578:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d130      	bne.n	800a5e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d10a      	bne.n	800a59c <prvProcessTimerOrBlockTask+0x3c>
 800a586:	687a      	ldr	r2, [r7, #4]
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d806      	bhi.n	800a59c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a58e:	f7fe fee9 	bl	8009364 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a592:	68f9      	ldr	r1, [r7, #12]
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f7ff ff83 	bl	800a4a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a59a:	e024      	b.n	800a5e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d008      	beq.n	800a5b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a5a2:	4b13      	ldr	r3, [pc, #76]	; (800a5f0 <prvProcessTimerOrBlockTask+0x90>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d101      	bne.n	800a5b0 <prvProcessTimerOrBlockTask+0x50>
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	e000      	b.n	800a5b2 <prvProcessTimerOrBlockTask+0x52>
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a5b4:	4b0f      	ldr	r3, [pc, #60]	; (800a5f4 <prvProcessTimerOrBlockTask+0x94>)
 800a5b6:	6818      	ldr	r0, [r3, #0]
 800a5b8:	687a      	ldr	r2, [r7, #4]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	1ad3      	subs	r3, r2, r3
 800a5be:	683a      	ldr	r2, [r7, #0]
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	f7fe f8bf 	bl	8008744 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a5c6:	f7fe fecd 	bl	8009364 <xTaskResumeAll>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d10a      	bne.n	800a5e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a5d0:	4b09      	ldr	r3, [pc, #36]	; (800a5f8 <prvProcessTimerOrBlockTask+0x98>)
 800a5d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5d6:	601a      	str	r2, [r3, #0]
 800a5d8:	f3bf 8f4f 	dsb	sy
 800a5dc:	f3bf 8f6f 	isb	sy
}
 800a5e0:	e001      	b.n	800a5e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a5e2:	f7fe febf 	bl	8009364 <xTaskResumeAll>
}
 800a5e6:	bf00      	nop
 800a5e8:	3710      	adds	r7, #16
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	20002218 	.word	0x20002218
 800a5f4:	2000221c 	.word	0x2000221c
 800a5f8:	e000ed04 	.word	0xe000ed04

0800a5fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b085      	sub	sp, #20
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a604:	4b0e      	ldr	r3, [pc, #56]	; (800a640 <prvGetNextExpireTime+0x44>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d101      	bne.n	800a612 <prvGetNextExpireTime+0x16>
 800a60e:	2201      	movs	r2, #1
 800a610:	e000      	b.n	800a614 <prvGetNextExpireTime+0x18>
 800a612:	2200      	movs	r2, #0
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d105      	bne.n	800a62c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a620:	4b07      	ldr	r3, [pc, #28]	; (800a640 <prvGetNextExpireTime+0x44>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	68db      	ldr	r3, [r3, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	60fb      	str	r3, [r7, #12]
 800a62a:	e001      	b.n	800a630 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a62c:	2300      	movs	r3, #0
 800a62e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a630:	68fb      	ldr	r3, [r7, #12]
}
 800a632:	4618      	mov	r0, r3
 800a634:	3714      	adds	r7, #20
 800a636:	46bd      	mov	sp, r7
 800a638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63c:	4770      	bx	lr
 800a63e:	bf00      	nop
 800a640:	20002214 	.word	0x20002214

0800a644 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b084      	sub	sp, #16
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a64c:	f7fe ff2a 	bl	80094a4 <xTaskGetTickCount>
 800a650:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a652:	4b0b      	ldr	r3, [pc, #44]	; (800a680 <prvSampleTimeNow+0x3c>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	68fa      	ldr	r2, [r7, #12]
 800a658:	429a      	cmp	r2, r3
 800a65a:	d205      	bcs.n	800a668 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a65c:	f000 f93c 	bl	800a8d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2201      	movs	r2, #1
 800a664:	601a      	str	r2, [r3, #0]
 800a666:	e002      	b.n	800a66e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2200      	movs	r2, #0
 800a66c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a66e:	4a04      	ldr	r2, [pc, #16]	; (800a680 <prvSampleTimeNow+0x3c>)
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a674:	68fb      	ldr	r3, [r7, #12]
}
 800a676:	4618      	mov	r0, r3
 800a678:	3710      	adds	r7, #16
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	bf00      	nop
 800a680:	20002224 	.word	0x20002224

0800a684 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b086      	sub	sp, #24
 800a688:	af00      	add	r7, sp, #0
 800a68a:	60f8      	str	r0, [r7, #12]
 800a68c:	60b9      	str	r1, [r7, #8]
 800a68e:	607a      	str	r2, [r7, #4]
 800a690:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a692:	2300      	movs	r3, #0
 800a694:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	68ba      	ldr	r2, [r7, #8]
 800a69a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	68fa      	ldr	r2, [r7, #12]
 800a6a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a6a2:	68ba      	ldr	r2, [r7, #8]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	d812      	bhi.n	800a6d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6aa:	687a      	ldr	r2, [r7, #4]
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	1ad2      	subs	r2, r2, r3
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	699b      	ldr	r3, [r3, #24]
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d302      	bcc.n	800a6be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	617b      	str	r3, [r7, #20]
 800a6bc:	e01b      	b.n	800a6f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a6be:	4b10      	ldr	r3, [pc, #64]	; (800a700 <prvInsertTimerInActiveList+0x7c>)
 800a6c0:	681a      	ldr	r2, [r3, #0]
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	3304      	adds	r3, #4
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	4610      	mov	r0, r2
 800a6ca:	f7fd fb02 	bl	8007cd2 <vListInsert>
 800a6ce:	e012      	b.n	800a6f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a6d0:	687a      	ldr	r2, [r7, #4]
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d206      	bcs.n	800a6e6 <prvInsertTimerInActiveList+0x62>
 800a6d8:	68ba      	ldr	r2, [r7, #8]
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d302      	bcc.n	800a6e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	617b      	str	r3, [r7, #20]
 800a6e4:	e007      	b.n	800a6f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a6e6:	4b07      	ldr	r3, [pc, #28]	; (800a704 <prvInsertTimerInActiveList+0x80>)
 800a6e8:	681a      	ldr	r2, [r3, #0]
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	3304      	adds	r3, #4
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	4610      	mov	r0, r2
 800a6f2:	f7fd faee 	bl	8007cd2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a6f6:	697b      	ldr	r3, [r7, #20]
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3718      	adds	r7, #24
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}
 800a700:	20002218 	.word	0x20002218
 800a704:	20002214 	.word	0x20002214

0800a708 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b08e      	sub	sp, #56	; 0x38
 800a70c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a70e:	e0d0      	b.n	800a8b2 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2b00      	cmp	r3, #0
 800a714:	da1a      	bge.n	800a74c <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a716:	1d3b      	adds	r3, r7, #4
 800a718:	3304      	adds	r3, #4
 800a71a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d10c      	bne.n	800a73c <prvProcessReceivedCommands+0x34>
	__asm volatile
 800a722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a726:	b672      	cpsid	i
 800a728:	f383 8811 	msr	BASEPRI, r3
 800a72c:	f3bf 8f6f 	isb	sy
 800a730:	f3bf 8f4f 	dsb	sy
 800a734:	b662      	cpsie	i
 800a736:	61fb      	str	r3, [r7, #28]
}
 800a738:	bf00      	nop
 800a73a:	e7fe      	b.n	800a73a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a742:	6850      	ldr	r0, [r2, #4]
 800a744:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a746:	6892      	ldr	r2, [r2, #8]
 800a748:	4611      	mov	r1, r2
 800a74a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	f2c0 80ae 	blt.w	800a8b0 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a75a:	695b      	ldr	r3, [r3, #20]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d004      	beq.n	800a76a <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a762:	3304      	adds	r3, #4
 800a764:	4618      	mov	r0, r3
 800a766:	f7fd faed 	bl	8007d44 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a76a:	463b      	mov	r3, r7
 800a76c:	4618      	mov	r0, r3
 800a76e:	f7ff ff69 	bl	800a644 <prvSampleTimeNow>
 800a772:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2b09      	cmp	r3, #9
 800a778:	f200 809b 	bhi.w	800a8b2 <prvProcessReceivedCommands+0x1aa>
 800a77c:	a201      	add	r2, pc, #4	; (adr r2, 800a784 <prvProcessReceivedCommands+0x7c>)
 800a77e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a782:	bf00      	nop
 800a784:	0800a7ad 	.word	0x0800a7ad
 800a788:	0800a7ad 	.word	0x0800a7ad
 800a78c:	0800a7ad 	.word	0x0800a7ad
 800a790:	0800a825 	.word	0x0800a825
 800a794:	0800a839 	.word	0x0800a839
 800a798:	0800a887 	.word	0x0800a887
 800a79c:	0800a7ad 	.word	0x0800a7ad
 800a7a0:	0800a7ad 	.word	0x0800a7ad
 800a7a4:	0800a825 	.word	0x0800a825
 800a7a8:	0800a839 	.word	0x0800a839
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7b2:	f043 0301 	orr.w	r3, r3, #1
 800a7b6:	b2da      	uxtb	r2, r3
 800a7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a7be:	68ba      	ldr	r2, [r7, #8]
 800a7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c2:	699b      	ldr	r3, [r3, #24]
 800a7c4:	18d1      	adds	r1, r2, r3
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7cc:	f7ff ff5a 	bl	800a684 <prvInsertTimerInActiveList>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d06d      	beq.n	800a8b2 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d8:	6a1b      	ldr	r3, [r3, #32]
 800a7da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7e4:	f003 0304 	and.w	r3, r3, #4
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d062      	beq.n	800a8b2 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a7ec:	68ba      	ldr	r2, [r7, #8]
 800a7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f0:	699b      	ldr	r3, [r3, #24]
 800a7f2:	441a      	add	r2, r3
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	9300      	str	r3, [sp, #0]
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7fe:	f7ff fdff 	bl	800a400 <xTimerGenericCommand>
 800a802:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a804:	6a3b      	ldr	r3, [r7, #32]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d153      	bne.n	800a8b2 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800a80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a80e:	b672      	cpsid	i
 800a810:	f383 8811 	msr	BASEPRI, r3
 800a814:	f3bf 8f6f 	isb	sy
 800a818:	f3bf 8f4f 	dsb	sy
 800a81c:	b662      	cpsie	i
 800a81e:	61bb      	str	r3, [r7, #24]
}
 800a820:	bf00      	nop
 800a822:	e7fe      	b.n	800a822 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a826:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a82a:	f023 0301 	bic.w	r3, r3, #1
 800a82e:	b2da      	uxtb	r2, r3
 800a830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a832:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a836:	e03c      	b.n	800a8b2 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a83a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a83e:	f043 0301 	orr.w	r3, r3, #1
 800a842:	b2da      	uxtb	r2, r3
 800a844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a846:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a84a:	68ba      	ldr	r2, [r7, #8]
 800a84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a84e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a852:	699b      	ldr	r3, [r3, #24]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d10c      	bne.n	800a872 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800a858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a85c:	b672      	cpsid	i
 800a85e:	f383 8811 	msr	BASEPRI, r3
 800a862:	f3bf 8f6f 	isb	sy
 800a866:	f3bf 8f4f 	dsb	sy
 800a86a:	b662      	cpsie	i
 800a86c:	617b      	str	r3, [r7, #20]
}
 800a86e:	bf00      	nop
 800a870:	e7fe      	b.n	800a870 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a874:	699a      	ldr	r2, [r3, #24]
 800a876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a878:	18d1      	adds	r1, r2, r3
 800a87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a87c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a87e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a880:	f7ff ff00 	bl	800a684 <prvInsertTimerInActiveList>
					break;
 800a884:	e015      	b.n	800a8b2 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a888:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a88c:	f003 0302 	and.w	r3, r3, #2
 800a890:	2b00      	cmp	r3, #0
 800a892:	d103      	bne.n	800a89c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800a894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a896:	f000 fbe7 	bl	800b068 <vPortFree>
 800a89a:	e00a      	b.n	800a8b2 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a89e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8a2:	f023 0301 	bic.w	r3, r3, #1
 800a8a6:	b2da      	uxtb	r2, r3
 800a8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a8ae:	e000      	b.n	800a8b2 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a8b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a8b2:	4b08      	ldr	r3, [pc, #32]	; (800a8d4 <prvProcessReceivedCommands+0x1cc>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	1d39      	adds	r1, r7, #4
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f7fd fd22 	bl	8008304 <xQueueReceive>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	f47f af24 	bne.w	800a710 <prvProcessReceivedCommands+0x8>
	}
}
 800a8c8:	bf00      	nop
 800a8ca:	bf00      	nop
 800a8cc:	3730      	adds	r7, #48	; 0x30
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
 800a8d2:	bf00      	nop
 800a8d4:	2000221c 	.word	0x2000221c

0800a8d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b088      	sub	sp, #32
 800a8dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a8de:	e04a      	b.n	800a976 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a8e0:	4b2e      	ldr	r3, [pc, #184]	; (800a99c <prvSwitchTimerLists+0xc4>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	68db      	ldr	r3, [r3, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8ea:	4b2c      	ldr	r3, [pc, #176]	; (800a99c <prvSwitchTimerLists+0xc4>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	68db      	ldr	r3, [r3, #12]
 800a8f0:	68db      	ldr	r3, [r3, #12]
 800a8f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	3304      	adds	r3, #4
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f7fd fa23 	bl	8007d44 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	6a1b      	ldr	r3, [r3, #32]
 800a902:	68f8      	ldr	r0, [r7, #12]
 800a904:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a90c:	f003 0304 	and.w	r3, r3, #4
 800a910:	2b00      	cmp	r3, #0
 800a912:	d030      	beq.n	800a976 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	699b      	ldr	r3, [r3, #24]
 800a918:	693a      	ldr	r2, [r7, #16]
 800a91a:	4413      	add	r3, r2
 800a91c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a91e:	68ba      	ldr	r2, [r7, #8]
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	429a      	cmp	r2, r3
 800a924:	d90e      	bls.n	800a944 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	68ba      	ldr	r2, [r7, #8]
 800a92a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	68fa      	ldr	r2, [r7, #12]
 800a930:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a932:	4b1a      	ldr	r3, [pc, #104]	; (800a99c <prvSwitchTimerLists+0xc4>)
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	3304      	adds	r3, #4
 800a93a:	4619      	mov	r1, r3
 800a93c:	4610      	mov	r0, r2
 800a93e:	f7fd f9c8 	bl	8007cd2 <vListInsert>
 800a942:	e018      	b.n	800a976 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a944:	2300      	movs	r3, #0
 800a946:	9300      	str	r3, [sp, #0]
 800a948:	2300      	movs	r3, #0
 800a94a:	693a      	ldr	r2, [r7, #16]
 800a94c:	2100      	movs	r1, #0
 800a94e:	68f8      	ldr	r0, [r7, #12]
 800a950:	f7ff fd56 	bl	800a400 <xTimerGenericCommand>
 800a954:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d10c      	bne.n	800a976 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800a95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a960:	b672      	cpsid	i
 800a962:	f383 8811 	msr	BASEPRI, r3
 800a966:	f3bf 8f6f 	isb	sy
 800a96a:	f3bf 8f4f 	dsb	sy
 800a96e:	b662      	cpsie	i
 800a970:	603b      	str	r3, [r7, #0]
}
 800a972:	bf00      	nop
 800a974:	e7fe      	b.n	800a974 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a976:	4b09      	ldr	r3, [pc, #36]	; (800a99c <prvSwitchTimerLists+0xc4>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d1af      	bne.n	800a8e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a980:	4b06      	ldr	r3, [pc, #24]	; (800a99c <prvSwitchTimerLists+0xc4>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a986:	4b06      	ldr	r3, [pc, #24]	; (800a9a0 <prvSwitchTimerLists+0xc8>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	4a04      	ldr	r2, [pc, #16]	; (800a99c <prvSwitchTimerLists+0xc4>)
 800a98c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a98e:	4a04      	ldr	r2, [pc, #16]	; (800a9a0 <prvSwitchTimerLists+0xc8>)
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	6013      	str	r3, [r2, #0]
}
 800a994:	bf00      	nop
 800a996:	3718      	adds	r7, #24
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}
 800a99c:	20002214 	.word	0x20002214
 800a9a0:	20002218 	.word	0x20002218

0800a9a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b082      	sub	sp, #8
 800a9a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a9aa:	f000 f967 	bl	800ac7c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a9ae:	4b15      	ldr	r3, [pc, #84]	; (800aa04 <prvCheckForValidListAndQueue+0x60>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d120      	bne.n	800a9f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a9b6:	4814      	ldr	r0, [pc, #80]	; (800aa08 <prvCheckForValidListAndQueue+0x64>)
 800a9b8:	f7fd f93a 	bl	8007c30 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a9bc:	4813      	ldr	r0, [pc, #76]	; (800aa0c <prvCheckForValidListAndQueue+0x68>)
 800a9be:	f7fd f937 	bl	8007c30 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a9c2:	4b13      	ldr	r3, [pc, #76]	; (800aa10 <prvCheckForValidListAndQueue+0x6c>)
 800a9c4:	4a10      	ldr	r2, [pc, #64]	; (800aa08 <prvCheckForValidListAndQueue+0x64>)
 800a9c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a9c8:	4b12      	ldr	r3, [pc, #72]	; (800aa14 <prvCheckForValidListAndQueue+0x70>)
 800a9ca:	4a10      	ldr	r2, [pc, #64]	; (800aa0c <prvCheckForValidListAndQueue+0x68>)
 800a9cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	9300      	str	r3, [sp, #0]
 800a9d2:	4b11      	ldr	r3, [pc, #68]	; (800aa18 <prvCheckForValidListAndQueue+0x74>)
 800a9d4:	4a11      	ldr	r2, [pc, #68]	; (800aa1c <prvCheckForValidListAndQueue+0x78>)
 800a9d6:	2110      	movs	r1, #16
 800a9d8:	200a      	movs	r0, #10
 800a9da:	f7fd fa47 	bl	8007e6c <xQueueGenericCreateStatic>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	4a08      	ldr	r2, [pc, #32]	; (800aa04 <prvCheckForValidListAndQueue+0x60>)
 800a9e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a9e4:	4b07      	ldr	r3, [pc, #28]	; (800aa04 <prvCheckForValidListAndQueue+0x60>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d005      	beq.n	800a9f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a9ec:	4b05      	ldr	r3, [pc, #20]	; (800aa04 <prvCheckForValidListAndQueue+0x60>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	490b      	ldr	r1, [pc, #44]	; (800aa20 <prvCheckForValidListAndQueue+0x7c>)
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f7fd fe7c 	bl	80086f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a9f8:	f000 f974 	bl	800ace4 <vPortExitCritical>
}
 800a9fc:	bf00      	nop
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}
 800aa02:	bf00      	nop
 800aa04:	2000221c 	.word	0x2000221c
 800aa08:	200021ec 	.word	0x200021ec
 800aa0c:	20002200 	.word	0x20002200
 800aa10:	20002214 	.word	0x20002214
 800aa14:	20002218 	.word	0x20002218
 800aa18:	200022c8 	.word	0x200022c8
 800aa1c:	20002228 	.word	0x20002228
 800aa20:	0800b584 	.word	0x0800b584

0800aa24 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b086      	sub	sp, #24
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d10c      	bne.n	800aa50 <pvTimerGetTimerID+0x2c>
	__asm volatile
 800aa36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa3a:	b672      	cpsid	i
 800aa3c:	f383 8811 	msr	BASEPRI, r3
 800aa40:	f3bf 8f6f 	isb	sy
 800aa44:	f3bf 8f4f 	dsb	sy
 800aa48:	b662      	cpsie	i
 800aa4a:	60fb      	str	r3, [r7, #12]
}
 800aa4c:	bf00      	nop
 800aa4e:	e7fe      	b.n	800aa4e <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 800aa50:	f000 f914 	bl	800ac7c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	69db      	ldr	r3, [r3, #28]
 800aa58:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800aa5a:	f000 f943 	bl	800ace4 <vPortExitCritical>

	return pvReturn;
 800aa5e:	693b      	ldr	r3, [r7, #16]
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3718      	adds	r7, #24
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b085      	sub	sp, #20
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	60f8      	str	r0, [r7, #12]
 800aa70:	60b9      	str	r1, [r7, #8]
 800aa72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	3b04      	subs	r3, #4
 800aa78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aa80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	3b04      	subs	r3, #4
 800aa86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	f023 0201 	bic.w	r2, r3, #1
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	3b04      	subs	r3, #4
 800aa96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aa98:	4a0c      	ldr	r2, [pc, #48]	; (800aacc <pxPortInitialiseStack+0x64>)
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	3b14      	subs	r3, #20
 800aaa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	3b04      	subs	r3, #4
 800aaae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f06f 0202 	mvn.w	r2, #2
 800aab6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	3b20      	subs	r3, #32
 800aabc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aabe:	68fb      	ldr	r3, [r7, #12]
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3714      	adds	r7, #20
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr
 800aacc:	0800aad1 	.word	0x0800aad1

0800aad0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aad0:	b480      	push	{r7}
 800aad2:	b085      	sub	sp, #20
 800aad4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aad6:	2300      	movs	r3, #0
 800aad8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aada:	4b14      	ldr	r3, [pc, #80]	; (800ab2c <prvTaskExitError+0x5c>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aae2:	d00c      	beq.n	800aafe <prvTaskExitError+0x2e>
	__asm volatile
 800aae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae8:	b672      	cpsid	i
 800aaea:	f383 8811 	msr	BASEPRI, r3
 800aaee:	f3bf 8f6f 	isb	sy
 800aaf2:	f3bf 8f4f 	dsb	sy
 800aaf6:	b662      	cpsie	i
 800aaf8:	60fb      	str	r3, [r7, #12]
}
 800aafa:	bf00      	nop
 800aafc:	e7fe      	b.n	800aafc <prvTaskExitError+0x2c>
	__asm volatile
 800aafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab02:	b672      	cpsid	i
 800ab04:	f383 8811 	msr	BASEPRI, r3
 800ab08:	f3bf 8f6f 	isb	sy
 800ab0c:	f3bf 8f4f 	dsb	sy
 800ab10:	b662      	cpsie	i
 800ab12:	60bb      	str	r3, [r7, #8]
}
 800ab14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ab16:	bf00      	nop
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d0fc      	beq.n	800ab18 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ab1e:	bf00      	nop
 800ab20:	bf00      	nop
 800ab22:	3714      	adds	r7, #20
 800ab24:	46bd      	mov	sp, r7
 800ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2a:	4770      	bx	lr
 800ab2c:	20000010 	.word	0x20000010

0800ab30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ab30:	4b07      	ldr	r3, [pc, #28]	; (800ab50 <pxCurrentTCBConst2>)
 800ab32:	6819      	ldr	r1, [r3, #0]
 800ab34:	6808      	ldr	r0, [r1, #0]
 800ab36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab3a:	f380 8809 	msr	PSP, r0
 800ab3e:	f3bf 8f6f 	isb	sy
 800ab42:	f04f 0000 	mov.w	r0, #0
 800ab46:	f380 8811 	msr	BASEPRI, r0
 800ab4a:	4770      	bx	lr
 800ab4c:	f3af 8000 	nop.w

0800ab50 <pxCurrentTCBConst2>:
 800ab50:	20001cec 	.word	0x20001cec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ab54:	bf00      	nop
 800ab56:	bf00      	nop

0800ab58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ab58:	4808      	ldr	r0, [pc, #32]	; (800ab7c <prvPortStartFirstTask+0x24>)
 800ab5a:	6800      	ldr	r0, [r0, #0]
 800ab5c:	6800      	ldr	r0, [r0, #0]
 800ab5e:	f380 8808 	msr	MSP, r0
 800ab62:	f04f 0000 	mov.w	r0, #0
 800ab66:	f380 8814 	msr	CONTROL, r0
 800ab6a:	b662      	cpsie	i
 800ab6c:	b661      	cpsie	f
 800ab6e:	f3bf 8f4f 	dsb	sy
 800ab72:	f3bf 8f6f 	isb	sy
 800ab76:	df00      	svc	0
 800ab78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ab7a:	bf00      	nop
 800ab7c:	e000ed08 	.word	0xe000ed08

0800ab80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b084      	sub	sp, #16
 800ab84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ab86:	4b37      	ldr	r3, [pc, #220]	; (800ac64 <xPortStartScheduler+0xe4>)
 800ab88:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	b2db      	uxtb	r3, r3
 800ab90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	22ff      	movs	r2, #255	; 0xff
 800ab96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aba0:	78fb      	ldrb	r3, [r7, #3]
 800aba2:	b2db      	uxtb	r3, r3
 800aba4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aba8:	b2da      	uxtb	r2, r3
 800abaa:	4b2f      	ldr	r3, [pc, #188]	; (800ac68 <xPortStartScheduler+0xe8>)
 800abac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800abae:	4b2f      	ldr	r3, [pc, #188]	; (800ac6c <xPortStartScheduler+0xec>)
 800abb0:	2207      	movs	r2, #7
 800abb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800abb4:	e009      	b.n	800abca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800abb6:	4b2d      	ldr	r3, [pc, #180]	; (800ac6c <xPortStartScheduler+0xec>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	3b01      	subs	r3, #1
 800abbc:	4a2b      	ldr	r2, [pc, #172]	; (800ac6c <xPortStartScheduler+0xec>)
 800abbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800abc0:	78fb      	ldrb	r3, [r7, #3]
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	005b      	lsls	r3, r3, #1
 800abc6:	b2db      	uxtb	r3, r3
 800abc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800abca:	78fb      	ldrb	r3, [r7, #3]
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abd2:	2b80      	cmp	r3, #128	; 0x80
 800abd4:	d0ef      	beq.n	800abb6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800abd6:	4b25      	ldr	r3, [pc, #148]	; (800ac6c <xPortStartScheduler+0xec>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f1c3 0307 	rsb	r3, r3, #7
 800abde:	2b04      	cmp	r3, #4
 800abe0:	d00c      	beq.n	800abfc <xPortStartScheduler+0x7c>
	__asm volatile
 800abe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe6:	b672      	cpsid	i
 800abe8:	f383 8811 	msr	BASEPRI, r3
 800abec:	f3bf 8f6f 	isb	sy
 800abf0:	f3bf 8f4f 	dsb	sy
 800abf4:	b662      	cpsie	i
 800abf6:	60bb      	str	r3, [r7, #8]
}
 800abf8:	bf00      	nop
 800abfa:	e7fe      	b.n	800abfa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800abfc:	4b1b      	ldr	r3, [pc, #108]	; (800ac6c <xPortStartScheduler+0xec>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	021b      	lsls	r3, r3, #8
 800ac02:	4a1a      	ldr	r2, [pc, #104]	; (800ac6c <xPortStartScheduler+0xec>)
 800ac04:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ac06:	4b19      	ldr	r3, [pc, #100]	; (800ac6c <xPortStartScheduler+0xec>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ac0e:	4a17      	ldr	r2, [pc, #92]	; (800ac6c <xPortStartScheduler+0xec>)
 800ac10:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	b2da      	uxtb	r2, r3
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ac1a:	4b15      	ldr	r3, [pc, #84]	; (800ac70 <xPortStartScheduler+0xf0>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4a14      	ldr	r2, [pc, #80]	; (800ac70 <xPortStartScheduler+0xf0>)
 800ac20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ac24:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ac26:	4b12      	ldr	r3, [pc, #72]	; (800ac70 <xPortStartScheduler+0xf0>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4a11      	ldr	r2, [pc, #68]	; (800ac70 <xPortStartScheduler+0xf0>)
 800ac2c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ac30:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ac32:	f000 f8dd 	bl	800adf0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ac36:	4b0f      	ldr	r3, [pc, #60]	; (800ac74 <xPortStartScheduler+0xf4>)
 800ac38:	2200      	movs	r2, #0
 800ac3a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ac3c:	f000 f8fc 	bl	800ae38 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ac40:	4b0d      	ldr	r3, [pc, #52]	; (800ac78 <xPortStartScheduler+0xf8>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	4a0c      	ldr	r2, [pc, #48]	; (800ac78 <xPortStartScheduler+0xf8>)
 800ac46:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ac4a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ac4c:	f7ff ff84 	bl	800ab58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ac50:	f7fe fd06 	bl	8009660 <vTaskSwitchContext>
	prvTaskExitError();
 800ac54:	f7ff ff3c 	bl	800aad0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ac58:	2300      	movs	r3, #0
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3710      	adds	r7, #16
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}
 800ac62:	bf00      	nop
 800ac64:	e000e400 	.word	0xe000e400
 800ac68:	20002318 	.word	0x20002318
 800ac6c:	2000231c 	.word	0x2000231c
 800ac70:	e000ed20 	.word	0xe000ed20
 800ac74:	20000010 	.word	0x20000010
 800ac78:	e000ef34 	.word	0xe000ef34

0800ac7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b083      	sub	sp, #12
 800ac80:	af00      	add	r7, sp, #0
	__asm volatile
 800ac82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac86:	b672      	cpsid	i
 800ac88:	f383 8811 	msr	BASEPRI, r3
 800ac8c:	f3bf 8f6f 	isb	sy
 800ac90:	f3bf 8f4f 	dsb	sy
 800ac94:	b662      	cpsie	i
 800ac96:	607b      	str	r3, [r7, #4]
}
 800ac98:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ac9a:	4b10      	ldr	r3, [pc, #64]	; (800acdc <vPortEnterCritical+0x60>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	3301      	adds	r3, #1
 800aca0:	4a0e      	ldr	r2, [pc, #56]	; (800acdc <vPortEnterCritical+0x60>)
 800aca2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aca4:	4b0d      	ldr	r3, [pc, #52]	; (800acdc <vPortEnterCritical+0x60>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	d111      	bne.n	800acd0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800acac:	4b0c      	ldr	r3, [pc, #48]	; (800ace0 <vPortEnterCritical+0x64>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	b2db      	uxtb	r3, r3
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d00c      	beq.n	800acd0 <vPortEnterCritical+0x54>
	__asm volatile
 800acb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acba:	b672      	cpsid	i
 800acbc:	f383 8811 	msr	BASEPRI, r3
 800acc0:	f3bf 8f6f 	isb	sy
 800acc4:	f3bf 8f4f 	dsb	sy
 800acc8:	b662      	cpsie	i
 800acca:	603b      	str	r3, [r7, #0]
}
 800accc:	bf00      	nop
 800acce:	e7fe      	b.n	800acce <vPortEnterCritical+0x52>
	}
}
 800acd0:	bf00      	nop
 800acd2:	370c      	adds	r7, #12
 800acd4:	46bd      	mov	sp, r7
 800acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acda:	4770      	bx	lr
 800acdc:	20000010 	.word	0x20000010
 800ace0:	e000ed04 	.word	0xe000ed04

0800ace4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ace4:	b480      	push	{r7}
 800ace6:	b083      	sub	sp, #12
 800ace8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800acea:	4b13      	ldr	r3, [pc, #76]	; (800ad38 <vPortExitCritical+0x54>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d10c      	bne.n	800ad0c <vPortExitCritical+0x28>
	__asm volatile
 800acf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf6:	b672      	cpsid	i
 800acf8:	f383 8811 	msr	BASEPRI, r3
 800acfc:	f3bf 8f6f 	isb	sy
 800ad00:	f3bf 8f4f 	dsb	sy
 800ad04:	b662      	cpsie	i
 800ad06:	607b      	str	r3, [r7, #4]
}
 800ad08:	bf00      	nop
 800ad0a:	e7fe      	b.n	800ad0a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800ad0c:	4b0a      	ldr	r3, [pc, #40]	; (800ad38 <vPortExitCritical+0x54>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	3b01      	subs	r3, #1
 800ad12:	4a09      	ldr	r2, [pc, #36]	; (800ad38 <vPortExitCritical+0x54>)
 800ad14:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ad16:	4b08      	ldr	r3, [pc, #32]	; (800ad38 <vPortExitCritical+0x54>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d105      	bne.n	800ad2a <vPortExitCritical+0x46>
 800ad1e:	2300      	movs	r3, #0
 800ad20:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	f383 8811 	msr	BASEPRI, r3
}
 800ad28:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ad2a:	bf00      	nop
 800ad2c:	370c      	adds	r7, #12
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad34:	4770      	bx	lr
 800ad36:	bf00      	nop
 800ad38:	20000010 	.word	0x20000010
 800ad3c:	00000000 	.word	0x00000000

0800ad40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ad40:	f3ef 8009 	mrs	r0, PSP
 800ad44:	f3bf 8f6f 	isb	sy
 800ad48:	4b15      	ldr	r3, [pc, #84]	; (800ada0 <pxCurrentTCBConst>)
 800ad4a:	681a      	ldr	r2, [r3, #0]
 800ad4c:	f01e 0f10 	tst.w	lr, #16
 800ad50:	bf08      	it	eq
 800ad52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ad56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad5a:	6010      	str	r0, [r2, #0]
 800ad5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ad60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ad64:	b672      	cpsid	i
 800ad66:	f380 8811 	msr	BASEPRI, r0
 800ad6a:	f3bf 8f4f 	dsb	sy
 800ad6e:	f3bf 8f6f 	isb	sy
 800ad72:	b662      	cpsie	i
 800ad74:	f7fe fc74 	bl	8009660 <vTaskSwitchContext>
 800ad78:	f04f 0000 	mov.w	r0, #0
 800ad7c:	f380 8811 	msr	BASEPRI, r0
 800ad80:	bc09      	pop	{r0, r3}
 800ad82:	6819      	ldr	r1, [r3, #0]
 800ad84:	6808      	ldr	r0, [r1, #0]
 800ad86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad8a:	f01e 0f10 	tst.w	lr, #16
 800ad8e:	bf08      	it	eq
 800ad90:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ad94:	f380 8809 	msr	PSP, r0
 800ad98:	f3bf 8f6f 	isb	sy
 800ad9c:	4770      	bx	lr
 800ad9e:	bf00      	nop

0800ada0 <pxCurrentTCBConst>:
 800ada0:	20001cec 	.word	0x20001cec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ada4:	bf00      	nop
 800ada6:	bf00      	nop

0800ada8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
	__asm volatile
 800adae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb2:	b672      	cpsid	i
 800adb4:	f383 8811 	msr	BASEPRI, r3
 800adb8:	f3bf 8f6f 	isb	sy
 800adbc:	f3bf 8f4f 	dsb	sy
 800adc0:	b662      	cpsie	i
 800adc2:	607b      	str	r3, [r7, #4]
}
 800adc4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800adc6:	f7fe fb8f 	bl	80094e8 <xTaskIncrementTick>
 800adca:	4603      	mov	r3, r0
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d003      	beq.n	800add8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800add0:	4b06      	ldr	r3, [pc, #24]	; (800adec <SysTick_Handler+0x44>)
 800add2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800add6:	601a      	str	r2, [r3, #0]
 800add8:	2300      	movs	r3, #0
 800adda:	603b      	str	r3, [r7, #0]
	__asm volatile
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	f383 8811 	msr	BASEPRI, r3
}
 800ade2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ade4:	bf00      	nop
 800ade6:	3708      	adds	r7, #8
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}
 800adec:	e000ed04 	.word	0xe000ed04

0800adf0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800adf0:	b480      	push	{r7}
 800adf2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800adf4:	4b0b      	ldr	r3, [pc, #44]	; (800ae24 <vPortSetupTimerInterrupt+0x34>)
 800adf6:	2200      	movs	r2, #0
 800adf8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800adfa:	4b0b      	ldr	r3, [pc, #44]	; (800ae28 <vPortSetupTimerInterrupt+0x38>)
 800adfc:	2200      	movs	r2, #0
 800adfe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ae00:	4b0a      	ldr	r3, [pc, #40]	; (800ae2c <vPortSetupTimerInterrupt+0x3c>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	4a0a      	ldr	r2, [pc, #40]	; (800ae30 <vPortSetupTimerInterrupt+0x40>)
 800ae06:	fba2 2303 	umull	r2, r3, r2, r3
 800ae0a:	099b      	lsrs	r3, r3, #6
 800ae0c:	4a09      	ldr	r2, [pc, #36]	; (800ae34 <vPortSetupTimerInterrupt+0x44>)
 800ae0e:	3b01      	subs	r3, #1
 800ae10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ae12:	4b04      	ldr	r3, [pc, #16]	; (800ae24 <vPortSetupTimerInterrupt+0x34>)
 800ae14:	2207      	movs	r2, #7
 800ae16:	601a      	str	r2, [r3, #0]
}
 800ae18:	bf00      	nop
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae20:	4770      	bx	lr
 800ae22:	bf00      	nop
 800ae24:	e000e010 	.word	0xe000e010
 800ae28:	e000e018 	.word	0xe000e018
 800ae2c:	20000004 	.word	0x20000004
 800ae30:	10624dd3 	.word	0x10624dd3
 800ae34:	e000e014 	.word	0xe000e014

0800ae38 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ae38:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ae48 <vPortEnableVFP+0x10>
 800ae3c:	6801      	ldr	r1, [r0, #0]
 800ae3e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ae42:	6001      	str	r1, [r0, #0]
 800ae44:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ae46:	bf00      	nop
 800ae48:	e000ed88 	.word	0xe000ed88

0800ae4c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b085      	sub	sp, #20
 800ae50:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ae52:	f3ef 8305 	mrs	r3, IPSR
 800ae56:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	2b0f      	cmp	r3, #15
 800ae5c:	d916      	bls.n	800ae8c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ae5e:	4a19      	ldr	r2, [pc, #100]	; (800aec4 <vPortValidateInterruptPriority+0x78>)
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	4413      	add	r3, r2
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ae68:	4b17      	ldr	r3, [pc, #92]	; (800aec8 <vPortValidateInterruptPriority+0x7c>)
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	7afa      	ldrb	r2, [r7, #11]
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d20c      	bcs.n	800ae8c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800ae72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae76:	b672      	cpsid	i
 800ae78:	f383 8811 	msr	BASEPRI, r3
 800ae7c:	f3bf 8f6f 	isb	sy
 800ae80:	f3bf 8f4f 	dsb	sy
 800ae84:	b662      	cpsie	i
 800ae86:	607b      	str	r3, [r7, #4]
}
 800ae88:	bf00      	nop
 800ae8a:	e7fe      	b.n	800ae8a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ae8c:	4b0f      	ldr	r3, [pc, #60]	; (800aecc <vPortValidateInterruptPriority+0x80>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ae94:	4b0e      	ldr	r3, [pc, #56]	; (800aed0 <vPortValidateInterruptPriority+0x84>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d90c      	bls.n	800aeb6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800ae9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea0:	b672      	cpsid	i
 800aea2:	f383 8811 	msr	BASEPRI, r3
 800aea6:	f3bf 8f6f 	isb	sy
 800aeaa:	f3bf 8f4f 	dsb	sy
 800aeae:	b662      	cpsie	i
 800aeb0:	603b      	str	r3, [r7, #0]
}
 800aeb2:	bf00      	nop
 800aeb4:	e7fe      	b.n	800aeb4 <vPortValidateInterruptPriority+0x68>
	}
 800aeb6:	bf00      	nop
 800aeb8:	3714      	adds	r7, #20
 800aeba:	46bd      	mov	sp, r7
 800aebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec0:	4770      	bx	lr
 800aec2:	bf00      	nop
 800aec4:	e000e3f0 	.word	0xe000e3f0
 800aec8:	20002318 	.word	0x20002318
 800aecc:	e000ed0c 	.word	0xe000ed0c
 800aed0:	2000231c 	.word	0x2000231c

0800aed4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b08a      	sub	sp, #40	; 0x28
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aedc:	2300      	movs	r3, #0
 800aede:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aee0:	f7fe fa32 	bl	8009348 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aee4:	4b5b      	ldr	r3, [pc, #364]	; (800b054 <pvPortMalloc+0x180>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d101      	bne.n	800aef0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aeec:	f000 f91a 	bl	800b124 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aef0:	4b59      	ldr	r3, [pc, #356]	; (800b058 <pvPortMalloc+0x184>)
 800aef2:	681a      	ldr	r2, [r3, #0]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	4013      	ands	r3, r2
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	f040 8092 	bne.w	800b022 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d01f      	beq.n	800af44 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800af04:	2208      	movs	r2, #8
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	4413      	add	r3, r2
 800af0a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f003 0307 	and.w	r3, r3, #7
 800af12:	2b00      	cmp	r3, #0
 800af14:	d016      	beq.n	800af44 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f023 0307 	bic.w	r3, r3, #7
 800af1c:	3308      	adds	r3, #8
 800af1e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f003 0307 	and.w	r3, r3, #7
 800af26:	2b00      	cmp	r3, #0
 800af28:	d00c      	beq.n	800af44 <pvPortMalloc+0x70>
	__asm volatile
 800af2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af2e:	b672      	cpsid	i
 800af30:	f383 8811 	msr	BASEPRI, r3
 800af34:	f3bf 8f6f 	isb	sy
 800af38:	f3bf 8f4f 	dsb	sy
 800af3c:	b662      	cpsie	i
 800af3e:	617b      	str	r3, [r7, #20]
}
 800af40:	bf00      	nop
 800af42:	e7fe      	b.n	800af42 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d06b      	beq.n	800b022 <pvPortMalloc+0x14e>
 800af4a:	4b44      	ldr	r3, [pc, #272]	; (800b05c <pvPortMalloc+0x188>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	687a      	ldr	r2, [r7, #4]
 800af50:	429a      	cmp	r2, r3
 800af52:	d866      	bhi.n	800b022 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800af54:	4b42      	ldr	r3, [pc, #264]	; (800b060 <pvPortMalloc+0x18c>)
 800af56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800af58:	4b41      	ldr	r3, [pc, #260]	; (800b060 <pvPortMalloc+0x18c>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af5e:	e004      	b.n	800af6a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800af60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800af64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	687a      	ldr	r2, [r7, #4]
 800af70:	429a      	cmp	r2, r3
 800af72:	d903      	bls.n	800af7c <pvPortMalloc+0xa8>
 800af74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d1f1      	bne.n	800af60 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800af7c:	4b35      	ldr	r3, [pc, #212]	; (800b054 <pvPortMalloc+0x180>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af82:	429a      	cmp	r2, r3
 800af84:	d04d      	beq.n	800b022 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800af86:	6a3b      	ldr	r3, [r7, #32]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	2208      	movs	r2, #8
 800af8c:	4413      	add	r3, r2
 800af8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800af90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af92:	681a      	ldr	r2, [r3, #0]
 800af94:	6a3b      	ldr	r3, [r7, #32]
 800af96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800af98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af9a:	685a      	ldr	r2, [r3, #4]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	1ad2      	subs	r2, r2, r3
 800afa0:	2308      	movs	r3, #8
 800afa2:	005b      	lsls	r3, r3, #1
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d921      	bls.n	800afec <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800afa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	4413      	add	r3, r2
 800afae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800afb0:	69bb      	ldr	r3, [r7, #24]
 800afb2:	f003 0307 	and.w	r3, r3, #7
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d00c      	beq.n	800afd4 <pvPortMalloc+0x100>
	__asm volatile
 800afba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afbe:	b672      	cpsid	i
 800afc0:	f383 8811 	msr	BASEPRI, r3
 800afc4:	f3bf 8f6f 	isb	sy
 800afc8:	f3bf 8f4f 	dsb	sy
 800afcc:	b662      	cpsie	i
 800afce:	613b      	str	r3, [r7, #16]
}
 800afd0:	bf00      	nop
 800afd2:	e7fe      	b.n	800afd2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800afd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd6:	685a      	ldr	r2, [r3, #4]
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	1ad2      	subs	r2, r2, r3
 800afdc:	69bb      	ldr	r3, [r7, #24]
 800afde:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800afe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800afe6:	69b8      	ldr	r0, [r7, #24]
 800afe8:	f000 f8fe 	bl	800b1e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800afec:	4b1b      	ldr	r3, [pc, #108]	; (800b05c <pvPortMalloc+0x188>)
 800afee:	681a      	ldr	r2, [r3, #0]
 800aff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	1ad3      	subs	r3, r2, r3
 800aff6:	4a19      	ldr	r2, [pc, #100]	; (800b05c <pvPortMalloc+0x188>)
 800aff8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800affa:	4b18      	ldr	r3, [pc, #96]	; (800b05c <pvPortMalloc+0x188>)
 800affc:	681a      	ldr	r2, [r3, #0]
 800affe:	4b19      	ldr	r3, [pc, #100]	; (800b064 <pvPortMalloc+0x190>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	429a      	cmp	r2, r3
 800b004:	d203      	bcs.n	800b00e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b006:	4b15      	ldr	r3, [pc, #84]	; (800b05c <pvPortMalloc+0x188>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	4a16      	ldr	r2, [pc, #88]	; (800b064 <pvPortMalloc+0x190>)
 800b00c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b010:	685a      	ldr	r2, [r3, #4]
 800b012:	4b11      	ldr	r3, [pc, #68]	; (800b058 <pvPortMalloc+0x184>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	431a      	orrs	r2, r3
 800b018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b01a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b01e:	2200      	movs	r2, #0
 800b020:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b022:	f7fe f99f 	bl	8009364 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b026:	69fb      	ldr	r3, [r7, #28]
 800b028:	f003 0307 	and.w	r3, r3, #7
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d00c      	beq.n	800b04a <pvPortMalloc+0x176>
	__asm volatile
 800b030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b034:	b672      	cpsid	i
 800b036:	f383 8811 	msr	BASEPRI, r3
 800b03a:	f3bf 8f6f 	isb	sy
 800b03e:	f3bf 8f4f 	dsb	sy
 800b042:	b662      	cpsie	i
 800b044:	60fb      	str	r3, [r7, #12]
}
 800b046:	bf00      	nop
 800b048:	e7fe      	b.n	800b048 <pvPortMalloc+0x174>
	return pvReturn;
 800b04a:	69fb      	ldr	r3, [r7, #28]
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3728      	adds	r7, #40	; 0x28
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}
 800b054:	20005f28 	.word	0x20005f28
 800b058:	20005f34 	.word	0x20005f34
 800b05c:	20005f2c 	.word	0x20005f2c
 800b060:	20005f20 	.word	0x20005f20
 800b064:	20005f30 	.word	0x20005f30

0800b068 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b086      	sub	sp, #24
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d04c      	beq.n	800b114 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b07a:	2308      	movs	r3, #8
 800b07c:	425b      	negs	r3, r3
 800b07e:	697a      	ldr	r2, [r7, #20]
 800b080:	4413      	add	r3, r2
 800b082:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	685a      	ldr	r2, [r3, #4]
 800b08c:	4b23      	ldr	r3, [pc, #140]	; (800b11c <vPortFree+0xb4>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	4013      	ands	r3, r2
 800b092:	2b00      	cmp	r3, #0
 800b094:	d10c      	bne.n	800b0b0 <vPortFree+0x48>
	__asm volatile
 800b096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b09a:	b672      	cpsid	i
 800b09c:	f383 8811 	msr	BASEPRI, r3
 800b0a0:	f3bf 8f6f 	isb	sy
 800b0a4:	f3bf 8f4f 	dsb	sy
 800b0a8:	b662      	cpsie	i
 800b0aa:	60fb      	str	r3, [r7, #12]
}
 800b0ac:	bf00      	nop
 800b0ae:	e7fe      	b.n	800b0ae <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d00c      	beq.n	800b0d2 <vPortFree+0x6a>
	__asm volatile
 800b0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0bc:	b672      	cpsid	i
 800b0be:	f383 8811 	msr	BASEPRI, r3
 800b0c2:	f3bf 8f6f 	isb	sy
 800b0c6:	f3bf 8f4f 	dsb	sy
 800b0ca:	b662      	cpsie	i
 800b0cc:	60bb      	str	r3, [r7, #8]
}
 800b0ce:	bf00      	nop
 800b0d0:	e7fe      	b.n	800b0d0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	685a      	ldr	r2, [r3, #4]
 800b0d6:	4b11      	ldr	r3, [pc, #68]	; (800b11c <vPortFree+0xb4>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	4013      	ands	r3, r2
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d019      	beq.n	800b114 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d115      	bne.n	800b114 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	685a      	ldr	r2, [r3, #4]
 800b0ec:	4b0b      	ldr	r3, [pc, #44]	; (800b11c <vPortFree+0xb4>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	43db      	mvns	r3, r3
 800b0f2:	401a      	ands	r2, r3
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b0f8:	f7fe f926 	bl	8009348 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	685a      	ldr	r2, [r3, #4]
 800b100:	4b07      	ldr	r3, [pc, #28]	; (800b120 <vPortFree+0xb8>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	4413      	add	r3, r2
 800b106:	4a06      	ldr	r2, [pc, #24]	; (800b120 <vPortFree+0xb8>)
 800b108:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b10a:	6938      	ldr	r0, [r7, #16]
 800b10c:	f000 f86c 	bl	800b1e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b110:	f7fe f928 	bl	8009364 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b114:	bf00      	nop
 800b116:	3718      	adds	r7, #24
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}
 800b11c:	20005f34 	.word	0x20005f34
 800b120:	20005f2c 	.word	0x20005f2c

0800b124 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b124:	b480      	push	{r7}
 800b126:	b085      	sub	sp, #20
 800b128:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b12a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b12e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b130:	4b27      	ldr	r3, [pc, #156]	; (800b1d0 <prvHeapInit+0xac>)
 800b132:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f003 0307 	and.w	r3, r3, #7
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d00c      	beq.n	800b158 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	3307      	adds	r3, #7
 800b142:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	f023 0307 	bic.w	r3, r3, #7
 800b14a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b14c:	68ba      	ldr	r2, [r7, #8]
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	1ad3      	subs	r3, r2, r3
 800b152:	4a1f      	ldr	r2, [pc, #124]	; (800b1d0 <prvHeapInit+0xac>)
 800b154:	4413      	add	r3, r2
 800b156:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b15c:	4a1d      	ldr	r2, [pc, #116]	; (800b1d4 <prvHeapInit+0xb0>)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b162:	4b1c      	ldr	r3, [pc, #112]	; (800b1d4 <prvHeapInit+0xb0>)
 800b164:	2200      	movs	r2, #0
 800b166:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	68ba      	ldr	r2, [r7, #8]
 800b16c:	4413      	add	r3, r2
 800b16e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b170:	2208      	movs	r2, #8
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	1a9b      	subs	r3, r3, r2
 800b176:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f023 0307 	bic.w	r3, r3, #7
 800b17e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	4a15      	ldr	r2, [pc, #84]	; (800b1d8 <prvHeapInit+0xb4>)
 800b184:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b186:	4b14      	ldr	r3, [pc, #80]	; (800b1d8 <prvHeapInit+0xb4>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	2200      	movs	r2, #0
 800b18c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b18e:	4b12      	ldr	r3, [pc, #72]	; (800b1d8 <prvHeapInit+0xb4>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	2200      	movs	r2, #0
 800b194:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	68fa      	ldr	r2, [r7, #12]
 800b19e:	1ad2      	subs	r2, r2, r3
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b1a4:	4b0c      	ldr	r3, [pc, #48]	; (800b1d8 <prvHeapInit+0xb4>)
 800b1a6:	681a      	ldr	r2, [r3, #0]
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	685b      	ldr	r3, [r3, #4]
 800b1b0:	4a0a      	ldr	r2, [pc, #40]	; (800b1dc <prvHeapInit+0xb8>)
 800b1b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	685b      	ldr	r3, [r3, #4]
 800b1b8:	4a09      	ldr	r2, [pc, #36]	; (800b1e0 <prvHeapInit+0xbc>)
 800b1ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b1bc:	4b09      	ldr	r3, [pc, #36]	; (800b1e4 <prvHeapInit+0xc0>)
 800b1be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b1c2:	601a      	str	r2, [r3, #0]
}
 800b1c4:	bf00      	nop
 800b1c6:	3714      	adds	r7, #20
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr
 800b1d0:	20002320 	.word	0x20002320
 800b1d4:	20005f20 	.word	0x20005f20
 800b1d8:	20005f28 	.word	0x20005f28
 800b1dc:	20005f30 	.word	0x20005f30
 800b1e0:	20005f2c 	.word	0x20005f2c
 800b1e4:	20005f34 	.word	0x20005f34

0800b1e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b085      	sub	sp, #20
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b1f0:	4b28      	ldr	r3, [pc, #160]	; (800b294 <prvInsertBlockIntoFreeList+0xac>)
 800b1f2:	60fb      	str	r3, [r7, #12]
 800b1f4:	e002      	b.n	800b1fc <prvInsertBlockIntoFreeList+0x14>
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	60fb      	str	r3, [r7, #12]
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	687a      	ldr	r2, [r7, #4]
 800b202:	429a      	cmp	r2, r3
 800b204:	d8f7      	bhi.n	800b1f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	685b      	ldr	r3, [r3, #4]
 800b20e:	68ba      	ldr	r2, [r7, #8]
 800b210:	4413      	add	r3, r2
 800b212:	687a      	ldr	r2, [r7, #4]
 800b214:	429a      	cmp	r2, r3
 800b216:	d108      	bne.n	800b22a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	685a      	ldr	r2, [r3, #4]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	441a      	add	r2, r3
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	68ba      	ldr	r2, [r7, #8]
 800b234:	441a      	add	r2, r3
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d118      	bne.n	800b270 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681a      	ldr	r2, [r3, #0]
 800b242:	4b15      	ldr	r3, [pc, #84]	; (800b298 <prvInsertBlockIntoFreeList+0xb0>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	429a      	cmp	r2, r3
 800b248:	d00d      	beq.n	800b266 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	685a      	ldr	r2, [r3, #4]
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	441a      	add	r2, r3
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	681a      	ldr	r2, [r3, #0]
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	601a      	str	r2, [r3, #0]
 800b264:	e008      	b.n	800b278 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b266:	4b0c      	ldr	r3, [pc, #48]	; (800b298 <prvInsertBlockIntoFreeList+0xb0>)
 800b268:	681a      	ldr	r2, [r3, #0]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	601a      	str	r2, [r3, #0]
 800b26e:	e003      	b.n	800b278 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681a      	ldr	r2, [r3, #0]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b278:	68fa      	ldr	r2, [r7, #12]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d002      	beq.n	800b286 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	687a      	ldr	r2, [r7, #4]
 800b284:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b286:	bf00      	nop
 800b288:	3714      	adds	r7, #20
 800b28a:	46bd      	mov	sp, r7
 800b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b290:	4770      	bx	lr
 800b292:	bf00      	nop
 800b294:	20005f20 	.word	0x20005f20
 800b298:	20005f28 	.word	0x20005f28

0800b29c <__libc_init_array>:
 800b29c:	b570      	push	{r4, r5, r6, lr}
 800b29e:	4d0d      	ldr	r5, [pc, #52]	; (800b2d4 <__libc_init_array+0x38>)
 800b2a0:	4c0d      	ldr	r4, [pc, #52]	; (800b2d8 <__libc_init_array+0x3c>)
 800b2a2:	1b64      	subs	r4, r4, r5
 800b2a4:	10a4      	asrs	r4, r4, #2
 800b2a6:	2600      	movs	r6, #0
 800b2a8:	42a6      	cmp	r6, r4
 800b2aa:	d109      	bne.n	800b2c0 <__libc_init_array+0x24>
 800b2ac:	4d0b      	ldr	r5, [pc, #44]	; (800b2dc <__libc_init_array+0x40>)
 800b2ae:	4c0c      	ldr	r4, [pc, #48]	; (800b2e0 <__libc_init_array+0x44>)
 800b2b0:	f000 f8f2 	bl	800b498 <_init>
 800b2b4:	1b64      	subs	r4, r4, r5
 800b2b6:	10a4      	asrs	r4, r4, #2
 800b2b8:	2600      	movs	r6, #0
 800b2ba:	42a6      	cmp	r6, r4
 800b2bc:	d105      	bne.n	800b2ca <__libc_init_array+0x2e>
 800b2be:	bd70      	pop	{r4, r5, r6, pc}
 800b2c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2c4:	4798      	blx	r3
 800b2c6:	3601      	adds	r6, #1
 800b2c8:	e7ee      	b.n	800b2a8 <__libc_init_array+0xc>
 800b2ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2ce:	4798      	blx	r3
 800b2d0:	3601      	adds	r6, #1
 800b2d2:	e7f2      	b.n	800b2ba <__libc_init_array+0x1e>
 800b2d4:	0800b6b4 	.word	0x0800b6b4
 800b2d8:	0800b6b4 	.word	0x0800b6b4
 800b2dc:	0800b6b4 	.word	0x0800b6b4
 800b2e0:	0800b6b8 	.word	0x0800b6b8

0800b2e4 <__retarget_lock_acquire_recursive>:
 800b2e4:	4770      	bx	lr

0800b2e6 <__retarget_lock_release_recursive>:
 800b2e6:	4770      	bx	lr

0800b2e8 <memcpy>:
 800b2e8:	440a      	add	r2, r1
 800b2ea:	4291      	cmp	r1, r2
 800b2ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800b2f0:	d100      	bne.n	800b2f4 <memcpy+0xc>
 800b2f2:	4770      	bx	lr
 800b2f4:	b510      	push	{r4, lr}
 800b2f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2fe:	4291      	cmp	r1, r2
 800b300:	d1f9      	bne.n	800b2f6 <memcpy+0xe>
 800b302:	bd10      	pop	{r4, pc}

0800b304 <memset>:
 800b304:	4402      	add	r2, r0
 800b306:	4603      	mov	r3, r0
 800b308:	4293      	cmp	r3, r2
 800b30a:	d100      	bne.n	800b30e <memset+0xa>
 800b30c:	4770      	bx	lr
 800b30e:	f803 1b01 	strb.w	r1, [r3], #1
 800b312:	e7f9      	b.n	800b308 <memset+0x4>

0800b314 <cleanup_glue>:
 800b314:	b538      	push	{r3, r4, r5, lr}
 800b316:	460c      	mov	r4, r1
 800b318:	6809      	ldr	r1, [r1, #0]
 800b31a:	4605      	mov	r5, r0
 800b31c:	b109      	cbz	r1, 800b322 <cleanup_glue+0xe>
 800b31e:	f7ff fff9 	bl	800b314 <cleanup_glue>
 800b322:	4621      	mov	r1, r4
 800b324:	4628      	mov	r0, r5
 800b326:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b32a:	f000 b869 	b.w	800b400 <_free_r>
	...

0800b330 <_reclaim_reent>:
 800b330:	4b2c      	ldr	r3, [pc, #176]	; (800b3e4 <_reclaim_reent+0xb4>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	4283      	cmp	r3, r0
 800b336:	b570      	push	{r4, r5, r6, lr}
 800b338:	4604      	mov	r4, r0
 800b33a:	d051      	beq.n	800b3e0 <_reclaim_reent+0xb0>
 800b33c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b33e:	b143      	cbz	r3, 800b352 <_reclaim_reent+0x22>
 800b340:	68db      	ldr	r3, [r3, #12]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d14a      	bne.n	800b3dc <_reclaim_reent+0xac>
 800b346:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b348:	6819      	ldr	r1, [r3, #0]
 800b34a:	b111      	cbz	r1, 800b352 <_reclaim_reent+0x22>
 800b34c:	4620      	mov	r0, r4
 800b34e:	f000 f857 	bl	800b400 <_free_r>
 800b352:	6961      	ldr	r1, [r4, #20]
 800b354:	b111      	cbz	r1, 800b35c <_reclaim_reent+0x2c>
 800b356:	4620      	mov	r0, r4
 800b358:	f000 f852 	bl	800b400 <_free_r>
 800b35c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b35e:	b111      	cbz	r1, 800b366 <_reclaim_reent+0x36>
 800b360:	4620      	mov	r0, r4
 800b362:	f000 f84d 	bl	800b400 <_free_r>
 800b366:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b368:	b111      	cbz	r1, 800b370 <_reclaim_reent+0x40>
 800b36a:	4620      	mov	r0, r4
 800b36c:	f000 f848 	bl	800b400 <_free_r>
 800b370:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b372:	b111      	cbz	r1, 800b37a <_reclaim_reent+0x4a>
 800b374:	4620      	mov	r0, r4
 800b376:	f000 f843 	bl	800b400 <_free_r>
 800b37a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b37c:	b111      	cbz	r1, 800b384 <_reclaim_reent+0x54>
 800b37e:	4620      	mov	r0, r4
 800b380:	f000 f83e 	bl	800b400 <_free_r>
 800b384:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b386:	b111      	cbz	r1, 800b38e <_reclaim_reent+0x5e>
 800b388:	4620      	mov	r0, r4
 800b38a:	f000 f839 	bl	800b400 <_free_r>
 800b38e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b390:	b111      	cbz	r1, 800b398 <_reclaim_reent+0x68>
 800b392:	4620      	mov	r0, r4
 800b394:	f000 f834 	bl	800b400 <_free_r>
 800b398:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b39a:	b111      	cbz	r1, 800b3a2 <_reclaim_reent+0x72>
 800b39c:	4620      	mov	r0, r4
 800b39e:	f000 f82f 	bl	800b400 <_free_r>
 800b3a2:	69a3      	ldr	r3, [r4, #24]
 800b3a4:	b1e3      	cbz	r3, 800b3e0 <_reclaim_reent+0xb0>
 800b3a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	4798      	blx	r3
 800b3ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b3ae:	b1b9      	cbz	r1, 800b3e0 <_reclaim_reent+0xb0>
 800b3b0:	4620      	mov	r0, r4
 800b3b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b3b6:	f7ff bfad 	b.w	800b314 <cleanup_glue>
 800b3ba:	5949      	ldr	r1, [r1, r5]
 800b3bc:	b941      	cbnz	r1, 800b3d0 <_reclaim_reent+0xa0>
 800b3be:	3504      	adds	r5, #4
 800b3c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b3c2:	2d80      	cmp	r5, #128	; 0x80
 800b3c4:	68d9      	ldr	r1, [r3, #12]
 800b3c6:	d1f8      	bne.n	800b3ba <_reclaim_reent+0x8a>
 800b3c8:	4620      	mov	r0, r4
 800b3ca:	f000 f819 	bl	800b400 <_free_r>
 800b3ce:	e7ba      	b.n	800b346 <_reclaim_reent+0x16>
 800b3d0:	680e      	ldr	r6, [r1, #0]
 800b3d2:	4620      	mov	r0, r4
 800b3d4:	f000 f814 	bl	800b400 <_free_r>
 800b3d8:	4631      	mov	r1, r6
 800b3da:	e7ef      	b.n	800b3bc <_reclaim_reent+0x8c>
 800b3dc:	2500      	movs	r5, #0
 800b3de:	e7ef      	b.n	800b3c0 <_reclaim_reent+0x90>
 800b3e0:	bd70      	pop	{r4, r5, r6, pc}
 800b3e2:	bf00      	nop
 800b3e4:	20000014 	.word	0x20000014

0800b3e8 <__malloc_lock>:
 800b3e8:	4801      	ldr	r0, [pc, #4]	; (800b3f0 <__malloc_lock+0x8>)
 800b3ea:	f7ff bf7b 	b.w	800b2e4 <__retarget_lock_acquire_recursive>
 800b3ee:	bf00      	nop
 800b3f0:	20005f38 	.word	0x20005f38

0800b3f4 <__malloc_unlock>:
 800b3f4:	4801      	ldr	r0, [pc, #4]	; (800b3fc <__malloc_unlock+0x8>)
 800b3f6:	f7ff bf76 	b.w	800b2e6 <__retarget_lock_release_recursive>
 800b3fa:	bf00      	nop
 800b3fc:	20005f38 	.word	0x20005f38

0800b400 <_free_r>:
 800b400:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b402:	2900      	cmp	r1, #0
 800b404:	d044      	beq.n	800b490 <_free_r+0x90>
 800b406:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b40a:	9001      	str	r0, [sp, #4]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	f1a1 0404 	sub.w	r4, r1, #4
 800b412:	bfb8      	it	lt
 800b414:	18e4      	addlt	r4, r4, r3
 800b416:	f7ff ffe7 	bl	800b3e8 <__malloc_lock>
 800b41a:	4a1e      	ldr	r2, [pc, #120]	; (800b494 <_free_r+0x94>)
 800b41c:	9801      	ldr	r0, [sp, #4]
 800b41e:	6813      	ldr	r3, [r2, #0]
 800b420:	b933      	cbnz	r3, 800b430 <_free_r+0x30>
 800b422:	6063      	str	r3, [r4, #4]
 800b424:	6014      	str	r4, [r2, #0]
 800b426:	b003      	add	sp, #12
 800b428:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b42c:	f7ff bfe2 	b.w	800b3f4 <__malloc_unlock>
 800b430:	42a3      	cmp	r3, r4
 800b432:	d908      	bls.n	800b446 <_free_r+0x46>
 800b434:	6825      	ldr	r5, [r4, #0]
 800b436:	1961      	adds	r1, r4, r5
 800b438:	428b      	cmp	r3, r1
 800b43a:	bf01      	itttt	eq
 800b43c:	6819      	ldreq	r1, [r3, #0]
 800b43e:	685b      	ldreq	r3, [r3, #4]
 800b440:	1949      	addeq	r1, r1, r5
 800b442:	6021      	streq	r1, [r4, #0]
 800b444:	e7ed      	b.n	800b422 <_free_r+0x22>
 800b446:	461a      	mov	r2, r3
 800b448:	685b      	ldr	r3, [r3, #4]
 800b44a:	b10b      	cbz	r3, 800b450 <_free_r+0x50>
 800b44c:	42a3      	cmp	r3, r4
 800b44e:	d9fa      	bls.n	800b446 <_free_r+0x46>
 800b450:	6811      	ldr	r1, [r2, #0]
 800b452:	1855      	adds	r5, r2, r1
 800b454:	42a5      	cmp	r5, r4
 800b456:	d10b      	bne.n	800b470 <_free_r+0x70>
 800b458:	6824      	ldr	r4, [r4, #0]
 800b45a:	4421      	add	r1, r4
 800b45c:	1854      	adds	r4, r2, r1
 800b45e:	42a3      	cmp	r3, r4
 800b460:	6011      	str	r1, [r2, #0]
 800b462:	d1e0      	bne.n	800b426 <_free_r+0x26>
 800b464:	681c      	ldr	r4, [r3, #0]
 800b466:	685b      	ldr	r3, [r3, #4]
 800b468:	6053      	str	r3, [r2, #4]
 800b46a:	4421      	add	r1, r4
 800b46c:	6011      	str	r1, [r2, #0]
 800b46e:	e7da      	b.n	800b426 <_free_r+0x26>
 800b470:	d902      	bls.n	800b478 <_free_r+0x78>
 800b472:	230c      	movs	r3, #12
 800b474:	6003      	str	r3, [r0, #0]
 800b476:	e7d6      	b.n	800b426 <_free_r+0x26>
 800b478:	6825      	ldr	r5, [r4, #0]
 800b47a:	1961      	adds	r1, r4, r5
 800b47c:	428b      	cmp	r3, r1
 800b47e:	bf04      	itt	eq
 800b480:	6819      	ldreq	r1, [r3, #0]
 800b482:	685b      	ldreq	r3, [r3, #4]
 800b484:	6063      	str	r3, [r4, #4]
 800b486:	bf04      	itt	eq
 800b488:	1949      	addeq	r1, r1, r5
 800b48a:	6021      	streq	r1, [r4, #0]
 800b48c:	6054      	str	r4, [r2, #4]
 800b48e:	e7ca      	b.n	800b426 <_free_r+0x26>
 800b490:	b003      	add	sp, #12
 800b492:	bd30      	pop	{r4, r5, pc}
 800b494:	20005f3c 	.word	0x20005f3c

0800b498 <_init>:
 800b498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b49a:	bf00      	nop
 800b49c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b49e:	bc08      	pop	{r3}
 800b4a0:	469e      	mov	lr, r3
 800b4a2:	4770      	bx	lr

0800b4a4 <_fini>:
 800b4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4a6:	bf00      	nop
 800b4a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4aa:	bc08      	pop	{r3}
 800b4ac:	469e      	mov	lr, r3
 800b4ae:	4770      	bx	lr
