
uart_isr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091d8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  080093d8  080093d8  000193d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009594  08009594  000201a0  2**0
                  CONTENTS
  4 .ARM          00000008  08009594  08009594  00019594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800959c  0800959c  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800959c  0800959c  0001959c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095a0  080095a0  000195a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080095a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000060  08009604  00020060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000100  080096a4  00020100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005da8  200001a0  08009744  000201a0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20005f48  08009744  00025f48  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000201ce  2**0
                  CONTENTS, READONLY
 15 .debug_info   0002804f  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00004974  00000000  00000000  00048260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001ef8  00000000  00000000  0004cbd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000181a  00000000  00000000  0004ead0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0000797e  00000000  00000000  000502ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00023005  00000000  00000000  00057c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00114c80  00000000  00000000  0007ac6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00008708  00000000  00000000  0018f8f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000075  00000000  00000000  00197ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001a0 	.word	0x200001a0
 800021c:	00000000 	.word	0x00000000
 8000220:	080093c0 	.word	0x080093c0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001a4 	.word	0x200001a4
 800023c:	080093c0 	.word	0x080093c0

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002d0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d332      	bcc.n	80002c2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d314      	bcc.n	8000290 <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000284:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000288:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800028a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028e:	4770      	bx	lr

08000290 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000290:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000292:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000294:	d319      	bcc.n	80002ca <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000296:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000298:	1b12      	subs	r2, r2, r4

0800029a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800029a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80002a2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a4:	d1f9      	bne.n	800029a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a8:	d005      	beq.n	80002b6 <_No2ChunkNeeded>

080002aa <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002aa:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002ae:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002b2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b4:	d1f9      	bne.n	80002aa <_LoopCopyAfterWrapAround>

080002b6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80002b6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002ba:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002bc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002be:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002c0:	4770      	bx	lr

080002c2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002c2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002c4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002c6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c8:	d2cd      	bcs.n	8000266 <_Case4>

080002ca <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002ca:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ce:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002d0:	200001bc 	.word	0x200001bc

080002d4 <__aeabi_uldivmod>:
 80002d4:	b953      	cbnz	r3, 80002ec <__aeabi_uldivmod+0x18>
 80002d6:	b94a      	cbnz	r2, 80002ec <__aeabi_uldivmod+0x18>
 80002d8:	2900      	cmp	r1, #0
 80002da:	bf08      	it	eq
 80002dc:	2800      	cmpeq	r0, #0
 80002de:	bf1c      	itt	ne
 80002e0:	f04f 31ff 	movne.w	r1, #4294967295
 80002e4:	f04f 30ff 	movne.w	r0, #4294967295
 80002e8:	f000 b970 	b.w	80005cc <__aeabi_idiv0>
 80002ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f4:	f000 f806 	bl	8000304 <__udivmoddi4>
 80002f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000300:	b004      	add	sp, #16
 8000302:	4770      	bx	lr

08000304 <__udivmoddi4>:
 8000304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000308:	9e08      	ldr	r6, [sp, #32]
 800030a:	460d      	mov	r5, r1
 800030c:	4604      	mov	r4, r0
 800030e:	460f      	mov	r7, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14a      	bne.n	80003aa <__udivmoddi4+0xa6>
 8000314:	428a      	cmp	r2, r1
 8000316:	4694      	mov	ip, r2
 8000318:	d965      	bls.n	80003e6 <__udivmoddi4+0xe2>
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	b143      	cbz	r3, 8000332 <__udivmoddi4+0x2e>
 8000320:	fa02 fc03 	lsl.w	ip, r2, r3
 8000324:	f1c3 0220 	rsb	r2, r3, #32
 8000328:	409f      	lsls	r7, r3
 800032a:	fa20 f202 	lsr.w	r2, r0, r2
 800032e:	4317      	orrs	r7, r2
 8000330:	409c      	lsls	r4, r3
 8000332:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000336:	fa1f f58c 	uxth.w	r5, ip
 800033a:	fbb7 f1fe 	udiv	r1, r7, lr
 800033e:	0c22      	lsrs	r2, r4, #16
 8000340:	fb0e 7711 	mls	r7, lr, r1, r7
 8000344:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000348:	fb01 f005 	mul.w	r0, r1, r5
 800034c:	4290      	cmp	r0, r2
 800034e:	d90a      	bls.n	8000366 <__udivmoddi4+0x62>
 8000350:	eb1c 0202 	adds.w	r2, ip, r2
 8000354:	f101 37ff 	add.w	r7, r1, #4294967295
 8000358:	f080 811c 	bcs.w	8000594 <__udivmoddi4+0x290>
 800035c:	4290      	cmp	r0, r2
 800035e:	f240 8119 	bls.w	8000594 <__udivmoddi4+0x290>
 8000362:	3902      	subs	r1, #2
 8000364:	4462      	add	r2, ip
 8000366:	1a12      	subs	r2, r2, r0
 8000368:	b2a4      	uxth	r4, r4
 800036a:	fbb2 f0fe 	udiv	r0, r2, lr
 800036e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000372:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000376:	fb00 f505 	mul.w	r5, r0, r5
 800037a:	42a5      	cmp	r5, r4
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x90>
 800037e:	eb1c 0404 	adds.w	r4, ip, r4
 8000382:	f100 32ff 	add.w	r2, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x294>
 800038a:	42a5      	cmp	r5, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x294>
 8000390:	4464      	add	r4, ip
 8000392:	3802      	subs	r0, #2
 8000394:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000398:	1b64      	subs	r4, r4, r5
 800039a:	2100      	movs	r1, #0
 800039c:	b11e      	cbz	r6, 80003a6 <__udivmoddi4+0xa2>
 800039e:	40dc      	lsrs	r4, r3
 80003a0:	2300      	movs	r3, #0
 80003a2:	e9c6 4300 	strd	r4, r3, [r6]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0xbc>
 80003ae:	2e00      	cmp	r6, #0
 80003b0:	f000 80ed 	beq.w	800058e <__udivmoddi4+0x28a>
 80003b4:	2100      	movs	r1, #0
 80003b6:	e9c6 0500 	strd	r0, r5, [r6]
 80003ba:	4608      	mov	r0, r1
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	fab3 f183 	clz	r1, r3
 80003c4:	2900      	cmp	r1, #0
 80003c6:	d149      	bne.n	800045c <__udivmoddi4+0x158>
 80003c8:	42ab      	cmp	r3, r5
 80003ca:	d302      	bcc.n	80003d2 <__udivmoddi4+0xce>
 80003cc:	4282      	cmp	r2, r0
 80003ce:	f200 80f8 	bhi.w	80005c2 <__udivmoddi4+0x2be>
 80003d2:	1a84      	subs	r4, r0, r2
 80003d4:	eb65 0203 	sbc.w	r2, r5, r3
 80003d8:	2001      	movs	r0, #1
 80003da:	4617      	mov	r7, r2
 80003dc:	2e00      	cmp	r6, #0
 80003de:	d0e2      	beq.n	80003a6 <__udivmoddi4+0xa2>
 80003e0:	e9c6 4700 	strd	r4, r7, [r6]
 80003e4:	e7df      	b.n	80003a6 <__udivmoddi4+0xa2>
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xe6>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f382 	clz	r3, r2
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x210>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fa:	fa1f fe8c 	uxth.w	lr, ip
 80003fe:	2101      	movs	r1, #1
 8000400:	fbb2 f5f7 	udiv	r5, r2, r7
 8000404:	fb07 2015 	mls	r0, r7, r5, r2
 8000408:	0c22      	lsrs	r2, r4, #16
 800040a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800040e:	fb0e f005 	mul.w	r0, lr, r5
 8000412:	4290      	cmp	r0, r2
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x124>
 8000416:	eb1c 0202 	adds.w	r2, ip, r2
 800041a:	f105 38ff 	add.w	r8, r5, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x122>
 8000420:	4290      	cmp	r0, r2
 8000422:	f200 80cb 	bhi.w	80005bc <__udivmoddi4+0x2b8>
 8000426:	4645      	mov	r5, r8
 8000428:	1a12      	subs	r2, r2, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000430:	fb07 2210 	mls	r2, r7, r0, r2
 8000434:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000438:	fb0e fe00 	mul.w	lr, lr, r0
 800043c:	45a6      	cmp	lr, r4
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x14e>
 8000440:	eb1c 0404 	adds.w	r4, ip, r4
 8000444:	f100 32ff 	add.w	r2, r0, #4294967295
 8000448:	d202      	bcs.n	8000450 <__udivmoddi4+0x14c>
 800044a:	45a6      	cmp	lr, r4
 800044c:	f200 80bb 	bhi.w	80005c6 <__udivmoddi4+0x2c2>
 8000450:	4610      	mov	r0, r2
 8000452:	eba4 040e 	sub.w	r4, r4, lr
 8000456:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045a:	e79f      	b.n	800039c <__udivmoddi4+0x98>
 800045c:	f1c1 0720 	rsb	r7, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 fc07 	lsr.w	ip, r2, r7
 8000466:	ea4c 0c03 	orr.w	ip, ip, r3
 800046a:	fa05 f401 	lsl.w	r4, r5, r1
 800046e:	fa20 f307 	lsr.w	r3, r0, r7
 8000472:	40fd      	lsrs	r5, r7
 8000474:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fbb5 f8f9 	udiv	r8, r5, r9
 800047e:	fa1f fe8c 	uxth.w	lr, ip
 8000482:	fb09 5518 	mls	r5, r9, r8, r5
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800048c:	fb08 f50e 	mul.w	r5, r8, lr
 8000490:	42a5      	cmp	r5, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	fa00 f001 	lsl.w	r0, r0, r1
 800049a:	d90b      	bls.n	80004b4 <__udivmoddi4+0x1b0>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a4:	f080 8088 	bcs.w	80005b8 <__udivmoddi4+0x2b4>
 80004a8:	42a5      	cmp	r5, r4
 80004aa:	f240 8085 	bls.w	80005b8 <__udivmoddi4+0x2b4>
 80004ae:	f1a8 0802 	sub.w	r8, r8, #2
 80004b2:	4464      	add	r4, ip
 80004b4:	1b64      	subs	r4, r4, r5
 80004b6:	b29d      	uxth	r5, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80004c8:	45a6      	cmp	lr, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1da>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d4:	d26c      	bcs.n	80005b0 <__udivmoddi4+0x2ac>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	d96a      	bls.n	80005b0 <__udivmoddi4+0x2ac>
 80004da:	3b02      	subs	r3, #2
 80004dc:	4464      	add	r4, ip
 80004de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e2:	fba3 9502 	umull	r9, r5, r3, r2
 80004e6:	eba4 040e 	sub.w	r4, r4, lr
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	46c8      	mov	r8, r9
 80004ee:	46ae      	mov	lr, r5
 80004f0:	d356      	bcc.n	80005a0 <__udivmoddi4+0x29c>
 80004f2:	d053      	beq.n	800059c <__udivmoddi4+0x298>
 80004f4:	b156      	cbz	r6, 800050c <__udivmoddi4+0x208>
 80004f6:	ebb0 0208 	subs.w	r2, r0, r8
 80004fa:	eb64 040e 	sbc.w	r4, r4, lr
 80004fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000502:	40ca      	lsrs	r2, r1
 8000504:	40cc      	lsrs	r4, r1
 8000506:	4317      	orrs	r7, r2
 8000508:	e9c6 7400 	strd	r7, r4, [r6]
 800050c:	4618      	mov	r0, r3
 800050e:	2100      	movs	r1, #0
 8000510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000514:	f1c3 0120 	rsb	r1, r3, #32
 8000518:	fa02 fc03 	lsl.w	ip, r2, r3
 800051c:	fa20 f201 	lsr.w	r2, r0, r1
 8000520:	fa25 f101 	lsr.w	r1, r5, r1
 8000524:	409d      	lsls	r5, r3
 8000526:	432a      	orrs	r2, r5
 8000528:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800052c:	fa1f fe8c 	uxth.w	lr, ip
 8000530:	fbb1 f0f7 	udiv	r0, r1, r7
 8000534:	fb07 1510 	mls	r5, r7, r0, r1
 8000538:	0c11      	lsrs	r1, r2, #16
 800053a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800053e:	fb00 f50e 	mul.w	r5, r0, lr
 8000542:	428d      	cmp	r5, r1
 8000544:	fa04 f403 	lsl.w	r4, r4, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x258>
 800054a:	eb1c 0101 	adds.w	r1, ip, r1
 800054e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000552:	d22f      	bcs.n	80005b4 <__udivmoddi4+0x2b0>
 8000554:	428d      	cmp	r5, r1
 8000556:	d92d      	bls.n	80005b4 <__udivmoddi4+0x2b0>
 8000558:	3802      	subs	r0, #2
 800055a:	4461      	add	r1, ip
 800055c:	1b49      	subs	r1, r1, r5
 800055e:	b292      	uxth	r2, r2
 8000560:	fbb1 f5f7 	udiv	r5, r1, r7
 8000564:	fb07 1115 	mls	r1, r7, r5, r1
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	fb05 f10e 	mul.w	r1, r5, lr
 8000570:	4291      	cmp	r1, r2
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x282>
 8000574:	eb1c 0202 	adds.w	r2, ip, r2
 8000578:	f105 38ff 	add.w	r8, r5, #4294967295
 800057c:	d216      	bcs.n	80005ac <__udivmoddi4+0x2a8>
 800057e:	4291      	cmp	r1, r2
 8000580:	d914      	bls.n	80005ac <__udivmoddi4+0x2a8>
 8000582:	3d02      	subs	r5, #2
 8000584:	4462      	add	r2, ip
 8000586:	1a52      	subs	r2, r2, r1
 8000588:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800058c:	e738      	b.n	8000400 <__udivmoddi4+0xfc>
 800058e:	4631      	mov	r1, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xa2>
 8000594:	4639      	mov	r1, r7
 8000596:	e6e6      	b.n	8000366 <__udivmoddi4+0x62>
 8000598:	4610      	mov	r0, r2
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x90>
 800059c:	4548      	cmp	r0, r9
 800059e:	d2a9      	bcs.n	80004f4 <__udivmoddi4+0x1f0>
 80005a0:	ebb9 0802 	subs.w	r8, r9, r2
 80005a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005a8:	3b01      	subs	r3, #1
 80005aa:	e7a3      	b.n	80004f4 <__udivmoddi4+0x1f0>
 80005ac:	4645      	mov	r5, r8
 80005ae:	e7ea      	b.n	8000586 <__udivmoddi4+0x282>
 80005b0:	462b      	mov	r3, r5
 80005b2:	e794      	b.n	80004de <__udivmoddi4+0x1da>
 80005b4:	4640      	mov	r0, r8
 80005b6:	e7d1      	b.n	800055c <__udivmoddi4+0x258>
 80005b8:	46d0      	mov	r8, sl
 80005ba:	e77b      	b.n	80004b4 <__udivmoddi4+0x1b0>
 80005bc:	3d02      	subs	r5, #2
 80005be:	4462      	add	r2, ip
 80005c0:	e732      	b.n	8000428 <__udivmoddi4+0x124>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e70a      	b.n	80003dc <__udivmoddi4+0xd8>
 80005c6:	4464      	add	r4, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e742      	b.n	8000452 <__udivmoddi4+0x14e>

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80005d6:	4b26      	ldr	r3, [pc, #152]	; (8000670 <_DoInit+0xa0>)
 80005d8:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80005da:	22a8      	movs	r2, #168	; 0xa8
 80005dc:	2100      	movs	r1, #0
 80005de:	6838      	ldr	r0, [r7, #0]
 80005e0:	f008 fe04 	bl	80091ec <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	2203      	movs	r2, #3
 80005e8:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	2203      	movs	r2, #3
 80005ee:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	4a20      	ldr	r2, [pc, #128]	; (8000674 <_DoInit+0xa4>)
 80005f4:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	4a1f      	ldr	r2, [pc, #124]	; (8000678 <_DoInit+0xa8>)
 80005fa:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000602:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	2200      	movs	r2, #0
 8000608:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	2200      	movs	r2, #0
 800060e:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	2200      	movs	r2, #0
 8000614:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	4a16      	ldr	r2, [pc, #88]	; (8000674 <_DoInit+0xa4>)
 800061a:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	4a17      	ldr	r2, [pc, #92]	; (800067c <_DoInit+0xac>)
 8000620:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	2210      	movs	r2, #16
 8000626:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	2200      	movs	r2, #0
 800062c:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	2200      	movs	r2, #0
 8000632:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	2200      	movs	r2, #0
 8000638:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800063a:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800063e:	2300      	movs	r3, #0
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	e00c      	b.n	800065e <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f1c3 030f 	rsb	r3, r3, #15
 800064a:	4a0d      	ldr	r2, [pc, #52]	; (8000680 <_DoInit+0xb0>)
 800064c:	5cd1      	ldrb	r1, [r2, r3]
 800064e:	683a      	ldr	r2, [r7, #0]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4413      	add	r3, r2
 8000654:	460a      	mov	r2, r1
 8000656:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	3301      	adds	r3, #1
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2b0f      	cmp	r3, #15
 8000662:	d9ef      	bls.n	8000644 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000664:	f3bf 8f5f 	dmb	sy
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	200001bc 	.word	0x200001bc
 8000674:	080093d8 	.word	0x080093d8
 8000678:	20000264 	.word	0x20000264
 800067c:	20000664 	.word	0x20000664
 8000680:	080094e0 	.word	0x080094e0

08000684 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b08c      	sub	sp, #48	; 0x30
 8000688:	af00      	add	r7, sp, #0
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	60b9      	str	r1, [r7, #8]
 800068e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8000690:	4b3e      	ldr	r3, [pc, #248]	; (800078c <SEGGER_RTT_ReadNoLock+0x108>)
 8000692:	623b      	str	r3, [r7, #32]
 8000694:	6a3b      	ldr	r3, [r7, #32]
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	b2db      	uxtb	r3, r3
 800069a:	2b00      	cmp	r3, #0
 800069c:	d101      	bne.n	80006a2 <SEGGER_RTT_ReadNoLock+0x1e>
 800069e:	f7ff ff97 	bl	80005d0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80006a2:	68fa      	ldr	r2, [r7, #12]
 80006a4:	4613      	mov	r3, r2
 80006a6:	005b      	lsls	r3, r3, #1
 80006a8:	4413      	add	r3, r2
 80006aa:	00db      	lsls	r3, r3, #3
 80006ac:	3360      	adds	r3, #96	; 0x60
 80006ae:	4a37      	ldr	r2, [pc, #220]	; (800078c <SEGGER_RTT_ReadNoLock+0x108>)
 80006b0:	4413      	add	r3, r2
 80006b2:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80006b8:	69fb      	ldr	r3, [r7, #28]
 80006ba:	691b      	ldr	r3, [r3, #16]
 80006bc:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	68db      	ldr	r3, [r3, #12]
 80006c2:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80006c4:	2300      	movs	r3, #0
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80006c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006ca:	69bb      	ldr	r3, [r7, #24]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d92b      	bls.n	8000728 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80006d0:	69fb      	ldr	r3, [r7, #28]
 80006d2:	689a      	ldr	r2, [r3, #8]
 80006d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006d6:	1ad3      	subs	r3, r2, r3
 80006d8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80006da:	697a      	ldr	r2, [r7, #20]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4293      	cmp	r3, r2
 80006e0:	bf28      	it	cs
 80006e2:	4613      	movcs	r3, r2
 80006e4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	685a      	ldr	r2, [r3, #4]
 80006ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006ec:	4413      	add	r3, r2
 80006ee:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80006f0:	697a      	ldr	r2, [r7, #20]
 80006f2:	6939      	ldr	r1, [r7, #16]
 80006f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006f6:	f008 fdfd 	bl	80092f4 <memcpy>
    NumBytesRead += NumBytesRem;
 80006fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	4413      	add	r3, r2
 8000700:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8000702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	4413      	add	r3, r2
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	1ad3      	subs	r3, r2, r3
 8000710:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8000712:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	4413      	add	r3, r2
 8000718:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	689b      	ldr	r3, [r3, #8]
 800071e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000720:	429a      	cmp	r2, r3
 8000722:	d101      	bne.n	8000728 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8000724:	2300      	movs	r3, #0
 8000726:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8000728:	69ba      	ldr	r2, [r7, #24]
 800072a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800072c:	1ad3      	subs	r3, r2, r3
 800072e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8000730:	697a      	ldr	r2, [r7, #20]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4293      	cmp	r3, r2
 8000736:	bf28      	it	cs
 8000738:	4613      	movcs	r3, r2
 800073a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d019      	beq.n	8000776 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	685a      	ldr	r2, [r3, #4]
 8000746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000748:	4413      	add	r3, r2
 800074a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800074c:	697a      	ldr	r2, [r7, #20]
 800074e:	6939      	ldr	r1, [r7, #16]
 8000750:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000752:	f008 fdcf 	bl	80092f4 <memcpy>
    NumBytesRead += NumBytesRem;
 8000756:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	4413      	add	r3, r2
 800075c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800075e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	4413      	add	r3, r2
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	1ad3      	subs	r3, r2, r3
 800076c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800076e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	4413      	add	r3, r2
 8000774:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8000776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000778:	2b00      	cmp	r3, #0
 800077a:	d002      	beq.n	8000782 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000780:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8000782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000784:	4618      	mov	r0, r3
 8000786:	3730      	adds	r7, #48	; 0x30
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	200001bc 	.word	0x200001bc

08000790 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
 800079c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800079e:	4b3d      	ldr	r3, [pc, #244]	; (8000894 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80007a0:	61bb      	str	r3, [r7, #24]
 80007a2:	69bb      	ldr	r3, [r7, #24]
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d101      	bne.n	80007b0 <SEGGER_RTT_AllocUpBuffer+0x20>
 80007ac:	f7ff ff10 	bl	80005d0 <_DoInit>
  SEGGER_RTT_LOCK();
 80007b0:	f3ef 8311 	mrs	r3, BASEPRI
 80007b4:	f04f 0120 	mov.w	r1, #32
 80007b8:	f381 8811 	msr	BASEPRI, r1
 80007bc:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80007be:	4b35      	ldr	r3, [pc, #212]	; (8000894 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80007c0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80007c6:	6939      	ldr	r1, [r7, #16]
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	1c5a      	adds	r2, r3, #1
 80007cc:	4613      	mov	r3, r2
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	4413      	add	r3, r2
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	440b      	add	r3, r1
 80007d6:	3304      	adds	r3, #4
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d008      	beq.n	80007f0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	3301      	adds	r3, #1
 80007e2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80007e4:	693b      	ldr	r3, [r7, #16]
 80007e6:	691b      	ldr	r3, [r3, #16]
 80007e8:	69fa      	ldr	r2, [r7, #28]
 80007ea:	429a      	cmp	r2, r3
 80007ec:	dbeb      	blt.n	80007c6 <SEGGER_RTT_AllocUpBuffer+0x36>
 80007ee:	e000      	b.n	80007f2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80007f0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80007f2:	693b      	ldr	r3, [r7, #16]
 80007f4:	691b      	ldr	r3, [r3, #16]
 80007f6:	69fa      	ldr	r2, [r7, #28]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	da3f      	bge.n	800087c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80007fc:	6939      	ldr	r1, [r7, #16]
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	1c5a      	adds	r2, r3, #1
 8000802:	4613      	mov	r3, r2
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	4413      	add	r3, r2
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	440b      	add	r3, r1
 800080c:	68fa      	ldr	r2, [r7, #12]
 800080e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8000810:	6939      	ldr	r1, [r7, #16]
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	1c5a      	adds	r2, r3, #1
 8000816:	4613      	mov	r3, r2
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	4413      	add	r3, r2
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	440b      	add	r3, r1
 8000820:	3304      	adds	r3, #4
 8000822:	68ba      	ldr	r2, [r7, #8]
 8000824:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8000826:	6939      	ldr	r1, [r7, #16]
 8000828:	69fa      	ldr	r2, [r7, #28]
 800082a:	4613      	mov	r3, r2
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	4413      	add	r3, r2
 8000830:	00db      	lsls	r3, r3, #3
 8000832:	440b      	add	r3, r1
 8000834:	3320      	adds	r3, #32
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800083a:	6939      	ldr	r1, [r7, #16]
 800083c:	69fa      	ldr	r2, [r7, #28]
 800083e:	4613      	mov	r3, r2
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	4413      	add	r3, r2
 8000844:	00db      	lsls	r3, r3, #3
 8000846:	440b      	add	r3, r1
 8000848:	3328      	adds	r3, #40	; 0x28
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800084e:	6939      	ldr	r1, [r7, #16]
 8000850:	69fa      	ldr	r2, [r7, #28]
 8000852:	4613      	mov	r3, r2
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	4413      	add	r3, r2
 8000858:	00db      	lsls	r3, r3, #3
 800085a:	440b      	add	r3, r1
 800085c:	3324      	adds	r3, #36	; 0x24
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8000862:	6939      	ldr	r1, [r7, #16]
 8000864:	69fa      	ldr	r2, [r7, #28]
 8000866:	4613      	mov	r3, r2
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	4413      	add	r3, r2
 800086c:	00db      	lsls	r3, r3, #3
 800086e:	440b      	add	r3, r1
 8000870:	332c      	adds	r3, #44	; 0x2c
 8000872:	683a      	ldr	r2, [r7, #0]
 8000874:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000876:	f3bf 8f5f 	dmb	sy
 800087a:	e002      	b.n	8000882 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800087c:	f04f 33ff 	mov.w	r3, #4294967295
 8000880:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8000888:	69fb      	ldr	r3, [r7, #28]
}
 800088a:	4618      	mov	r0, r3
 800088c:	3720      	adds	r7, #32
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200001bc 	.word	0x200001bc

08000898 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	; 0x28
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
 80008a4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80008a6:	4b21      	ldr	r3, [pc, #132]	; (800092c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80008a8:	623b      	str	r3, [r7, #32]
 80008aa:	6a3b      	ldr	r3, [r7, #32]
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d101      	bne.n	80008b8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80008b4:	f7ff fe8c 	bl	80005d0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80008b8:	4b1c      	ldr	r3, [pc, #112]	; (800092c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80008ba:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	2b02      	cmp	r3, #2
 80008c0:	d82c      	bhi.n	800091c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80008c2:	f3ef 8311 	mrs	r3, BASEPRI
 80008c6:	f04f 0120 	mov.w	r1, #32
 80008ca:	f381 8811 	msr	BASEPRI, r1
 80008ce:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80008d0:	68fa      	ldr	r2, [r7, #12]
 80008d2:	4613      	mov	r3, r2
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	4413      	add	r3, r2
 80008d8:	00db      	lsls	r3, r3, #3
 80008da:	3360      	adds	r3, #96	; 0x60
 80008dc:	69fa      	ldr	r2, [r7, #28]
 80008de:	4413      	add	r3, r2
 80008e0:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d00e      	beq.n	8000906 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	68ba      	ldr	r2, [r7, #8]
 80008ec:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	683a      	ldr	r2, [r7, #0]
 80008f8:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800090a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800090c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8000910:	69bb      	ldr	r3, [r7, #24]
 8000912:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
 800091a:	e002      	b.n	8000922 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800091c:	f04f 33ff 	mov.w	r3, #4294967295
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8000922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000924:	4618      	mov	r0, r3
 8000926:	3728      	adds	r7, #40	; 0x28
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	200001bc 	.word	0x200001bc

08000930 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8000930:	b480      	push	{r7}
 8000932:	b087      	sub	sp, #28
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	1c5a      	adds	r2, r3, #1
 8000944:	60fa      	str	r2, [r7, #12]
 8000946:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2b80      	cmp	r3, #128	; 0x80
 800094c:	d90a      	bls.n	8000964 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800094e:	2380      	movs	r3, #128	; 0x80
 8000950:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8000952:	e007      	b.n	8000964 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8000954:	68ba      	ldr	r2, [r7, #8]
 8000956:	1c53      	adds	r3, r2, #1
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	1c59      	adds	r1, r3, #1
 800095e:	60f9      	str	r1, [r7, #12]
 8000960:	7812      	ldrb	r2, [r2, #0]
 8000962:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	1e5a      	subs	r2, r3, #1
 8000968:	607a      	str	r2, [r7, #4]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d003      	beq.n	8000976 <_EncodeStr+0x46>
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d1ee      	bne.n	8000954 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	1ad3      	subs	r3, r2, r3
 800097c:	b2da      	uxtb	r2, r3
 800097e:	693b      	ldr	r3, [r7, #16]
 8000980:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8000982:	68fb      	ldr	r3, [r7, #12]
}
 8000984:	4618      	mov	r0, r3
 8000986:	371c      	adds	r7, #28
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3307      	adds	r3, #7
}
 800099c:	4618      	mov	r0, r3
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80009ae:	4b34      	ldr	r3, [pc, #208]	; (8000a80 <_HandleIncomingPacket+0xd8>)
 80009b0:	7e1b      	ldrb	r3, [r3, #24]
 80009b2:	4618      	mov	r0, r3
 80009b4:	1cfb      	adds	r3, r7, #3
 80009b6:	2201      	movs	r2, #1
 80009b8:	4619      	mov	r1, r3
 80009ba:	f7ff fe63 	bl	8000684 <SEGGER_RTT_ReadNoLock>
 80009be:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d057      	beq.n	8000a76 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80009c6:	78fb      	ldrb	r3, [r7, #3]
 80009c8:	2b80      	cmp	r3, #128	; 0x80
 80009ca:	d031      	beq.n	8000a30 <_HandleIncomingPacket+0x88>
 80009cc:	2b80      	cmp	r3, #128	; 0x80
 80009ce:	dc40      	bgt.n	8000a52 <_HandleIncomingPacket+0xaa>
 80009d0:	2b07      	cmp	r3, #7
 80009d2:	dc15      	bgt.n	8000a00 <_HandleIncomingPacket+0x58>
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	dd3c      	ble.n	8000a52 <_HandleIncomingPacket+0xaa>
 80009d8:	3b01      	subs	r3, #1
 80009da:	2b06      	cmp	r3, #6
 80009dc:	d839      	bhi.n	8000a52 <_HandleIncomingPacket+0xaa>
 80009de:	a201      	add	r2, pc, #4	; (adr r2, 80009e4 <_HandleIncomingPacket+0x3c>)
 80009e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e4:	08000a07 	.word	0x08000a07
 80009e8:	08000a0d 	.word	0x08000a0d
 80009ec:	08000a13 	.word	0x08000a13
 80009f0:	08000a19 	.word	0x08000a19
 80009f4:	08000a1f 	.word	0x08000a1f
 80009f8:	08000a25 	.word	0x08000a25
 80009fc:	08000a2b 	.word	0x08000a2b
 8000a00:	2b7f      	cmp	r3, #127	; 0x7f
 8000a02:	d033      	beq.n	8000a6c <_HandleIncomingPacket+0xc4>
 8000a04:	e025      	b.n	8000a52 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8000a06:	f000 fbe3 	bl	80011d0 <SEGGER_SYSVIEW_Start>
      break;
 8000a0a:	e034      	b.n	8000a76 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8000a0c:	f000 fc9a 	bl	8001344 <SEGGER_SYSVIEW_Stop>
      break;
 8000a10:	e031      	b.n	8000a76 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8000a12:	f000 fe73 	bl	80016fc <SEGGER_SYSVIEW_RecordSystime>
      break;
 8000a16:	e02e      	b.n	8000a76 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8000a18:	f000 fe38 	bl	800168c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8000a1c:	e02b      	b.n	8000a76 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8000a1e:	f000 fcb7 	bl	8001390 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8000a22:	e028      	b.n	8000a76 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8000a24:	f000 ffa2 	bl	800196c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8000a28:	e025      	b.n	8000a76 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8000a2a:	f000 ff81 	bl	8001930 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8000a2e:	e022      	b.n	8000a76 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000a30:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <_HandleIncomingPacket+0xd8>)
 8000a32:	7e1b      	ldrb	r3, [r3, #24]
 8000a34:	4618      	mov	r0, r3
 8000a36:	1cfb      	adds	r3, r7, #3
 8000a38:	2201      	movs	r2, #1
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	f7ff fe22 	bl	8000684 <SEGGER_RTT_ReadNoLock>
 8000a40:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d013      	beq.n	8000a70 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8000a48:	78fb      	ldrb	r3, [r7, #3]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 fee6 	bl	800181c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8000a50:	e00e      	b.n	8000a70 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8000a52:	78fb      	ldrb	r3, [r7, #3]
 8000a54:	b25b      	sxtb	r3, r3
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	da0c      	bge.n	8000a74 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <_HandleIncomingPacket+0xd8>)
 8000a5c:	7e1b      	ldrb	r3, [r3, #24]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	1cfb      	adds	r3, r7, #3
 8000a62:	2201      	movs	r2, #1
 8000a64:	4619      	mov	r1, r3
 8000a66:	f7ff fe0d 	bl	8000684 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8000a6a:	e003      	b.n	8000a74 <_HandleIncomingPacket+0xcc>
      break;
 8000a6c:	bf00      	nop
 8000a6e:	e002      	b.n	8000a76 <_HandleIncomingPacket+0xce>
      break;
 8000a70:	bf00      	nop
 8000a72:	e000      	b.n	8000a76 <_HandleIncomingPacket+0xce>
      break;
 8000a74:	bf00      	nop
    }
  }
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000a7c 	.word	0x20000a7c

08000a84 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08c      	sub	sp, #48	; 0x30
 8000a88:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	3301      	adds	r3, #1
 8000a92:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a98:	4b31      	ldr	r3, [pc, #196]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000a9a:	695b      	ldr	r3, [r3, #20]
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a9e:	e00b      	b.n	8000ab8 <_TrySendOverflowPacket+0x34>
 8000aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aa6:	1c59      	adds	r1, r3, #1
 8000aa8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8000aaa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000aae:	b2d2      	uxtb	r2, r2
 8000ab0:	701a      	strb	r2, [r3, #0]
 8000ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ab4:	09db      	lsrs	r3, r3, #7
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aba:	2b7f      	cmp	r3, #127	; 0x7f
 8000abc:	d8f0      	bhi.n	8000aa0 <_TrySendOverflowPacket+0x1c>
 8000abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ac0:	1c5a      	adds	r2, r3, #1
 8000ac2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000ac4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ac6:	b2d2      	uxtb	r2, r2
 8000ac8:	701a      	strb	r2, [r3, #0]
 8000aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000acc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000ace:	4b25      	ldr	r3, [pc, #148]	; (8000b64 <_TrySendOverflowPacket+0xe0>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000ad4:	4b22      	ldr	r3, [pc, #136]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	69ba      	ldr	r2, [r7, #24]
 8000ada:	1ad3      	subs	r3, r2, r3
 8000adc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	623b      	str	r3, [r7, #32]
 8000ae6:	e00b      	b.n	8000b00 <_TrySendOverflowPacket+0x7c>
 8000ae8:	6a3b      	ldr	r3, [r7, #32]
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aee:	1c59      	adds	r1, r3, #1
 8000af0:	6279      	str	r1, [r7, #36]	; 0x24
 8000af2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000af6:	b2d2      	uxtb	r2, r2
 8000af8:	701a      	strb	r2, [r3, #0]
 8000afa:	6a3b      	ldr	r3, [r7, #32]
 8000afc:	09db      	lsrs	r3, r3, #7
 8000afe:	623b      	str	r3, [r7, #32]
 8000b00:	6a3b      	ldr	r3, [r7, #32]
 8000b02:	2b7f      	cmp	r3, #127	; 0x7f
 8000b04:	d8f0      	bhi.n	8000ae8 <_TrySendOverflowPacket+0x64>
 8000b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b08:	1c5a      	adds	r2, r3, #1
 8000b0a:	627a      	str	r2, [r7, #36]	; 0x24
 8000b0c:	6a3a      	ldr	r2, [r7, #32]
 8000b0e:	b2d2      	uxtb	r2, r2
 8000b10:	701a      	strb	r2, [r3, #0]
 8000b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b14:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8000b16:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000b18:	785b      	ldrb	r3, [r3, #1]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	69fa      	ldr	r2, [r7, #28]
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	461a      	mov	r2, r3
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	4619      	mov	r1, r3
 8000b28:	f7ff fb8a 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d009      	beq.n	8000b4a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000b36:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	3b01      	subs	r3, #1
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000b46:	701a      	strb	r2, [r3, #0]
 8000b48:	e004      	b.n	8000b54 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	4a03      	ldr	r2, [pc, #12]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000b52:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8000b54:	693b      	ldr	r3, [r7, #16]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3730      	adds	r7, #48	; 0x30
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000a7c 	.word	0x20000a7c
 8000b64:	e0001004 	.word	0xe0001004

08000b68 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	; 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8000b74:	4b98      	ldr	r3, [pc, #608]	; (8000dd8 <_SendPacket+0x270>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d010      	beq.n	8000b9e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8000b7c:	4b96      	ldr	r3, [pc, #600]	; (8000dd8 <_SendPacket+0x270>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	f000 812d 	beq.w	8000de0 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8000b86:	4b94      	ldr	r3, [pc, #592]	; (8000dd8 <_SendPacket+0x270>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b02      	cmp	r3, #2
 8000b8c:	d109      	bne.n	8000ba2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8000b8e:	f7ff ff79 	bl	8000a84 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8000b92:	4b91      	ldr	r3, [pc, #580]	; (8000dd8 <_SendPacket+0x270>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	f040 8124 	bne.w	8000de4 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8000b9c:	e001      	b.n	8000ba2 <_SendPacket+0x3a>
    goto Send;
 8000b9e:	bf00      	nop
 8000ba0:	e000      	b.n	8000ba4 <_SendPacket+0x3c>
Send:
 8000ba2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b1f      	cmp	r3, #31
 8000ba8:	d809      	bhi.n	8000bbe <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8000baa:	4b8b      	ldr	r3, [pc, #556]	; (8000dd8 <_SendPacket+0x270>)
 8000bac:	69da      	ldr	r2, [r3, #28]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	f040 8115 	bne.w	8000de8 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b17      	cmp	r3, #23
 8000bc2:	d807      	bhi.n	8000bd4 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	701a      	strb	r2, [r3, #0]
 8000bd2:	e0c4      	b.n	8000d5e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8000bd4:	68ba      	ldr	r2, [r7, #8]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	2b7f      	cmp	r3, #127	; 0x7f
 8000be0:	d912      	bls.n	8000c08 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	09da      	lsrs	r2, r3, #7
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	3b01      	subs	r3, #1
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	b2d2      	uxtb	r2, r2
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	3a01      	subs	r2, #1
 8000bfa:	60fa      	str	r2, [r7, #12]
 8000bfc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	701a      	strb	r2, [r3, #0]
 8000c06:	e006      	b.n	8000c16 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b7e      	cmp	r3, #126	; 0x7e
 8000c1a:	d807      	bhi.n	8000c2c <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	701a      	strb	r2, [r3, #0]
 8000c2a:	e098      	b.n	8000d5e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c32:	d212      	bcs.n	8000c5a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	09da      	lsrs	r2, r3, #7
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	b2d2      	uxtb	r2, r2
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	3a01      	subs	r2, #1
 8000c4c:	60fa      	str	r2, [r7, #12]
 8000c4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	701a      	strb	r2, [r3, #0]
 8000c58:	e081      	b.n	8000d5e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000c60:	d21d      	bcs.n	8000c9e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	0b9a      	lsrs	r2, r3, #14
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	3b01      	subs	r3, #1
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	09db      	lsrs	r3, r3, #7
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	68fa      	ldr	r2, [r7, #12]
 8000c7a:	3a01      	subs	r2, #1
 8000c7c:	60fa      	str	r2, [r7, #12]
 8000c7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	68fa      	ldr	r2, [r7, #12]
 8000c8e:	3a01      	subs	r2, #1
 8000c90:	60fa      	str	r2, [r7, #12]
 8000c92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	701a      	strb	r2, [r3, #0]
 8000c9c:	e05f      	b.n	8000d5e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000ca4:	d228      	bcs.n	8000cf8 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	0d5a      	lsrs	r2, r3, #21
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	3b01      	subs	r3, #1
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	b2d2      	uxtb	r2, r2
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	0b9b      	lsrs	r3, r3, #14
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	68fa      	ldr	r2, [r7, #12]
 8000cbe:	3a01      	subs	r2, #1
 8000cc0:	60fa      	str	r2, [r7, #12]
 8000cc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	09db      	lsrs	r3, r3, #7
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	3a01      	subs	r2, #1
 8000cd6:	60fa      	str	r2, [r7, #12]
 8000cd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	3a01      	subs	r2, #1
 8000cea:	60fa      	str	r2, [r7, #12]
 8000cec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	701a      	strb	r2, [r3, #0]
 8000cf6:	e032      	b.n	8000d5e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	0f1a      	lsrs	r2, r3, #28
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	0d5b      	lsrs	r3, r3, #21
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	68fa      	ldr	r2, [r7, #12]
 8000d10:	3a01      	subs	r2, #1
 8000d12:	60fa      	str	r2, [r7, #12]
 8000d14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	0b9b      	lsrs	r3, r3, #14
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	68fa      	ldr	r2, [r7, #12]
 8000d26:	3a01      	subs	r2, #1
 8000d28:	60fa      	str	r2, [r7, #12]
 8000d2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	09db      	lsrs	r3, r3, #7
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	3a01      	subs	r2, #1
 8000d3e:	60fa      	str	r2, [r7, #12]
 8000d40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	3a01      	subs	r2, #1
 8000d52:	60fa      	str	r2, [r7, #12]
 8000d54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000d5e:	4b1f      	ldr	r3, [pc, #124]	; (8000ddc <_SendPacket+0x274>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000d64:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <_SendPacket+0x270>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	623b      	str	r3, [r7, #32]
 8000d76:	e00b      	b.n	8000d90 <_SendPacket+0x228>
 8000d78:	6a3b      	ldr	r3, [r7, #32]
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7e:	1c59      	adds	r1, r3, #1
 8000d80:	6279      	str	r1, [r7, #36]	; 0x24
 8000d82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000d86:	b2d2      	uxtb	r2, r2
 8000d88:	701a      	strb	r2, [r3, #0]
 8000d8a:	6a3b      	ldr	r3, [r7, #32]
 8000d8c:	09db      	lsrs	r3, r3, #7
 8000d8e:	623b      	str	r3, [r7, #32]
 8000d90:	6a3b      	ldr	r3, [r7, #32]
 8000d92:	2b7f      	cmp	r3, #127	; 0x7f
 8000d94:	d8f0      	bhi.n	8000d78 <_SendPacket+0x210>
 8000d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d98:	1c5a      	adds	r2, r3, #1
 8000d9a:	627a      	str	r2, [r7, #36]	; 0x24
 8000d9c:	6a3a      	ldr	r2, [r7, #32]
 8000d9e:	b2d2      	uxtb	r2, r2
 8000da0:	701a      	strb	r2, [r3, #0]
 8000da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da4:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8000da6:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <_SendPacket+0x270>)
 8000da8:	785b      	ldrb	r3, [r3, #1]
 8000daa:	4618      	mov	r0, r3
 8000dac:	68ba      	ldr	r2, [r7, #8]
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	461a      	mov	r2, r3
 8000db4:	68f9      	ldr	r1, [r7, #12]
 8000db6:	f7ff fa43 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000dba:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d003      	beq.n	8000dca <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000dc2:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <_SendPacket+0x270>)
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	60d3      	str	r3, [r2, #12]
 8000dc8:	e00f      	b.n	8000dea <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8000dca:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <_SendPacket+0x270>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4b01      	ldr	r3, [pc, #4]	; (8000dd8 <_SendPacket+0x270>)
 8000dd4:	701a      	strb	r2, [r3, #0]
 8000dd6:	e008      	b.n	8000dea <_SendPacket+0x282>
 8000dd8:	20000a7c 	.word	0x20000a7c
 8000ddc:	e0001004 	.word	0xe0001004
    goto SendDone;
 8000de0:	bf00      	nop
 8000de2:	e002      	b.n	8000dea <_SendPacket+0x282>
      goto SendDone;
 8000de4:	bf00      	nop
 8000de6:	e000      	b.n	8000dea <_SendPacket+0x282>
      goto SendDone;
 8000de8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8000dea:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <_SendPacket+0x2d4>)
 8000dec:	7e1b      	ldrb	r3, [r3, #24]
 8000dee:	4619      	mov	r1, r3
 8000df0:	4a13      	ldr	r2, [pc, #76]	; (8000e40 <_SendPacket+0x2d8>)
 8000df2:	460b      	mov	r3, r1
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	440b      	add	r3, r1
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	4413      	add	r3, r2
 8000dfc:	336c      	adds	r3, #108	; 0x6c
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <_SendPacket+0x2d4>)
 8000e02:	7e1b      	ldrb	r3, [r3, #24]
 8000e04:	4618      	mov	r0, r3
 8000e06:	490e      	ldr	r1, [pc, #56]	; (8000e40 <_SendPacket+0x2d8>)
 8000e08:	4603      	mov	r3, r0
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	4403      	add	r3, r0
 8000e0e:	00db      	lsls	r3, r3, #3
 8000e10:	440b      	add	r3, r1
 8000e12:	3370      	adds	r3, #112	; 0x70
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d00b      	beq.n	8000e32 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8000e1a:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <_SendPacket+0x2d4>)
 8000e1c:	789b      	ldrb	r3, [r3, #2]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d107      	bne.n	8000e32 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <_SendPacket+0x2d4>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8000e28:	f7ff fdbe 	bl	80009a8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8000e2c:	4b03      	ldr	r3, [pc, #12]	; (8000e3c <_SendPacket+0x2d4>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8000e32:	bf00      	nop
 8000e34:	3728      	adds	r7, #40	; 0x28
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000a7c 	.word	0x20000a7c
 8000e40:	200001bc 	.word	0x200001bc

08000e44 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b0a2      	sub	sp, #136	; 0x88
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
#endif
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 8000e5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e5c:	1c5a      	adds	r2, r3, #1
 8000e5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 8000e66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d01d      	beq.n	8000eaa <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 8000e6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000e72:	2b25      	cmp	r3, #37	; 0x25
 8000e74:	d1f1      	bne.n	8000e5a <_VPrintHost+0x16>
      c = *p;
 8000e76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = (U32)(va_arg(*pParamList, int));
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	1d19      	adds	r1, r3, #4
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	6011      	str	r1, [r2, #0]
 8000e88:	6819      	ldr	r1, [r3, #0]
 8000e8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000e8e:	1c5a      	adds	r2, r3, #1
 8000e90:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8000e94:	460a      	mov	r2, r1
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	3388      	adds	r3, #136	; 0x88
 8000e9a:	443b      	add	r3, r7
 8000e9c:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 8000ea0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000ea4:	2b10      	cmp	r3, #16
 8000ea6:	d002      	beq.n	8000eae <_VPrintHost+0x6a>
    c = *p++;
 8000ea8:	e7d7      	b.n	8000e5a <_VPrintHost+0x16>
      break;
 8000eaa:	bf00      	nop
 8000eac:	e000      	b.n	8000eb0 <_VPrintHost+0x6c>
        break;
 8000eae:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 8000eb0:	f3ef 8311 	mrs	r3, BASEPRI
 8000eb4:	f04f 0120 	mov.w	r1, #32
 8000eb8:	f381 8811 	msr	BASEPRI, r1
 8000ebc:	65bb      	str	r3, [r7, #88]	; 0x58
 8000ebe:	483f      	ldr	r0, [pc, #252]	; (8000fbc <_VPrintHost+0x178>)
 8000ec0:	f7ff fd66 	bl	8000990 <_PreparePacket>
 8000ec4:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8000ec6:	2280      	movs	r2, #128	; 0x80
 8000ec8:	68f9      	ldr	r1, [r7, #12]
 8000eca:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000ecc:	f7ff fd30 	bl	8000930 <_EncodeStr>
 8000ed0:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 8000ed2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ed4:	677b      	str	r3, [r7, #116]	; 0x74
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	673b      	str	r3, [r7, #112]	; 0x70
 8000eda:	e00b      	b.n	8000ef4 <_VPrintHost+0xb0>
 8000edc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ee2:	1c59      	adds	r1, r3, #1
 8000ee4:	6779      	str	r1, [r7, #116]	; 0x74
 8000ee6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	701a      	strb	r2, [r3, #0]
 8000eee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ef0:	09db      	lsrs	r3, r3, #7
 8000ef2:	673b      	str	r3, [r7, #112]	; 0x70
 8000ef4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ef6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ef8:	d8f0      	bhi.n	8000edc <_VPrintHost+0x98>
 8000efa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000efc:	1c5a      	adds	r2, r3, #1
 8000efe:	677a      	str	r2, [r7, #116]	; 0x74
 8000f00:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000f02:	b2d2      	uxtb	r2, r2
 8000f04:	701a      	strb	r2, [r3, #0]
 8000f06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f08:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 8000f0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000f0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000f12:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f14:	e00b      	b.n	8000f2e <_VPrintHost+0xea>
 8000f16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f1c:	1c59      	adds	r1, r3, #1
 8000f1e:	66f9      	str	r1, [r7, #108]	; 0x6c
 8000f20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	701a      	strb	r2, [r3, #0]
 8000f28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f2a:	09db      	lsrs	r3, r3, #7
 8000f2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f30:	2b7f      	cmp	r3, #127	; 0x7f
 8000f32:	d8f0      	bhi.n	8000f16 <_VPrintHost+0xd2>
 8000f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f36:	1c5a      	adds	r2, r3, #1
 8000f38:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000f3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000f3c:	b2d2      	uxtb	r2, r2
 8000f3e:	701a      	strb	r2, [r3, #0]
 8000f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f42:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8000f4c:	e022      	b.n	8000f94 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 8000f4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f50:	667b      	str	r3, [r7, #100]	; 0x64
 8000f52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	663b      	str	r3, [r7, #96]	; 0x60
 8000f5a:	e00b      	b.n	8000f74 <_VPrintHost+0x130>
 8000f5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f62:	1c59      	adds	r1, r3, #1
 8000f64:	6679      	str	r1, [r7, #100]	; 0x64
 8000f66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	701a      	strb	r2, [r3, #0]
 8000f6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f70:	09db      	lsrs	r3, r3, #7
 8000f72:	663b      	str	r3, [r7, #96]	; 0x60
 8000f74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f76:	2b7f      	cmp	r3, #127	; 0x7f
 8000f78:	d8f0      	bhi.n	8000f5c <_VPrintHost+0x118>
 8000f7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f7c:	1c5a      	adds	r2, r3, #1
 8000f7e:	667a      	str	r2, [r7, #100]	; 0x64
 8000f80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	701a      	strb	r2, [r3, #0]
 8000f86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f88:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 8000f8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f8e:	3304      	adds	r3, #4
 8000f90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8000f94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000f98:	1e5a      	subs	r2, r3, #1
 8000f9a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1d5      	bne.n	8000f4e <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8000fa2:	221a      	movs	r2, #26
 8000fa4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000fa6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000fa8:	f7ff fdde 	bl	8000b68 <_SendPacket>
    RECORD_END();
 8000fac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000fae:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3788      	adds	r7, #136	; 0x88
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000aac 	.word	0x20000aac

08000fc0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af02      	add	r7, sp, #8
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
 8000fcc:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fd4:	4917      	ldr	r1, [pc, #92]	; (8001034 <SEGGER_SYSVIEW_Init+0x74>)
 8000fd6:	4818      	ldr	r0, [pc, #96]	; (8001038 <SEGGER_SYSVIEW_Init+0x78>)
 8000fd8:	f7ff fbda 	bl	8000790 <SEGGER_RTT_AllocUpBuffer>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	4b16      	ldr	r3, [pc, #88]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8000fe2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8000fe4:	4b15      	ldr	r3, [pc, #84]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8000fe6:	785a      	ldrb	r2, [r3, #1]
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8000fea:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8000fec:	4b13      	ldr	r3, [pc, #76]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8000fee:	7e1b      	ldrb	r3, [r3, #24]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	2308      	movs	r3, #8
 8000ff8:	4a11      	ldr	r2, [pc, #68]	; (8001040 <SEGGER_SYSVIEW_Init+0x80>)
 8000ffa:	490f      	ldr	r1, [pc, #60]	; (8001038 <SEGGER_SYSVIEW_Init+0x78>)
 8000ffc:	f7ff fc4c 	bl	8000898 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8001000:	4b0e      	ldr	r3, [pc, #56]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8001002:	2200      	movs	r2, #0
 8001004:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001006:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <SEGGER_SYSVIEW_Init+0x84>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a0c      	ldr	r2, [pc, #48]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 800100c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800100e:	4a0b      	ldr	r2, [pc, #44]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8001014:	4a09      	ldr	r2, [pc, #36]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800101a:	4a08      	ldr	r2, [pc, #32]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8001020:	4a06      	ldr	r2, [pc, #24]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8001026:	4b05      	ldr	r3, [pc, #20]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8001028:	2200      	movs	r2, #0
 800102a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800102c:	bf00      	nop
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000674 	.word	0x20000674
 8001038:	080093ec 	.word	0x080093ec
 800103c:	20000a7c 	.word	0x20000a7c
 8001040:	20000a74 	.word	0x20000a74
 8001044:	e0001004 	.word	0xe0001004

08001048 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8001050:	4a04      	ldr	r2, [pc, #16]	; (8001064 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6113      	str	r3, [r2, #16]
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000a7c 	.word	0x20000a7c

08001068 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8001070:	f3ef 8311 	mrs	r3, BASEPRI
 8001074:	f04f 0120 	mov.w	r1, #32
 8001078:	f381 8811 	msr	BASEPRI, r1
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	4808      	ldr	r0, [pc, #32]	; (80010a0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8001080:	f7ff fc86 	bl	8000990 <_PreparePacket>
 8001084:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	68b9      	ldr	r1, [r7, #8]
 800108a:	68b8      	ldr	r0, [r7, #8]
 800108c:	f7ff fd6c 	bl	8000b68 <_SendPacket>
  RECORD_END();
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f383 8811 	msr	BASEPRI, r3
}
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000aac 	.word	0x20000aac

080010a4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80010ae:	f3ef 8311 	mrs	r3, BASEPRI
 80010b2:	f04f 0120 	mov.w	r1, #32
 80010b6:	f381 8811 	msr	BASEPRI, r1
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	4816      	ldr	r0, [pc, #88]	; (8001118 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80010be:	f7ff fc67 	bl	8000990 <_PreparePacket>
 80010c2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	61fb      	str	r3, [r7, #28]
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	61bb      	str	r3, [r7, #24]
 80010d0:	e00b      	b.n	80010ea <SEGGER_SYSVIEW_RecordU32+0x46>
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	1c59      	adds	r1, r3, #1
 80010da:	61f9      	str	r1, [r7, #28]
 80010dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80010e0:	b2d2      	uxtb	r2, r2
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	09db      	lsrs	r3, r3, #7
 80010e8:	61bb      	str	r3, [r7, #24]
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	2b7f      	cmp	r3, #127	; 0x7f
 80010ee:	d8f0      	bhi.n	80010d2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	1c5a      	adds	r2, r3, #1
 80010f4:	61fa      	str	r2, [r7, #28]
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	b2d2      	uxtb	r2, r2
 80010fa:	701a      	strb	r2, [r3, #0]
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	68f9      	ldr	r1, [r7, #12]
 8001104:	6938      	ldr	r0, [r7, #16]
 8001106:	f7ff fd2f 	bl	8000b68 <_SendPacket>
  RECORD_END();
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	f383 8811 	msr	BASEPRI, r3
}
 8001110:	bf00      	nop
 8001112:	3720      	adds	r7, #32
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000aac 	.word	0x20000aac

0800111c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b08c      	sub	sp, #48	; 0x30
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8001128:	f3ef 8311 	mrs	r3, BASEPRI
 800112c:	f04f 0120 	mov.w	r1, #32
 8001130:	f381 8811 	msr	BASEPRI, r1
 8001134:	61fb      	str	r3, [r7, #28]
 8001136:	4825      	ldr	r0, [pc, #148]	; (80011cc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8001138:	f7ff fc2a 	bl	8000990 <_PreparePacket>
 800113c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
 800114a:	e00b      	b.n	8001164 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800114c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114e:	b2da      	uxtb	r2, r3
 8001150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001152:	1c59      	adds	r1, r3, #1
 8001154:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001156:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	701a      	strb	r2, [r3, #0]
 800115e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001160:	09db      	lsrs	r3, r3, #7
 8001162:	62bb      	str	r3, [r7, #40]	; 0x28
 8001164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001166:	2b7f      	cmp	r3, #127	; 0x7f
 8001168:	d8f0      	bhi.n	800114c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800116a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800116c:	1c5a      	adds	r2, r3, #1
 800116e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001170:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001172:	b2d2      	uxtb	r2, r2
 8001174:	701a      	strb	r2, [r3, #0]
 8001176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001178:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	623b      	str	r3, [r7, #32]
 8001182:	e00b      	b.n	800119c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8001184:	6a3b      	ldr	r3, [r7, #32]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118a:	1c59      	adds	r1, r3, #1
 800118c:	6279      	str	r1, [r7, #36]	; 0x24
 800118e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	701a      	strb	r2, [r3, #0]
 8001196:	6a3b      	ldr	r3, [r7, #32]
 8001198:	09db      	lsrs	r3, r3, #7
 800119a:	623b      	str	r3, [r7, #32]
 800119c:	6a3b      	ldr	r3, [r7, #32]
 800119e:	2b7f      	cmp	r3, #127	; 0x7f
 80011a0:	d8f0      	bhi.n	8001184 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80011a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a4:	1c5a      	adds	r2, r3, #1
 80011a6:	627a      	str	r2, [r7, #36]	; 0x24
 80011a8:	6a3a      	ldr	r2, [r7, #32]
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	701a      	strb	r2, [r3, #0]
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	6979      	ldr	r1, [r7, #20]
 80011b6:	69b8      	ldr	r0, [r7, #24]
 80011b8:	f7ff fcd6 	bl	8000b68 <_SendPacket>
  RECORD_END();
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f383 8811 	msr	BASEPRI, r3
}
 80011c2:	bf00      	nop
 80011c4:	3730      	adds	r7, #48	; 0x30
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000aac 	.word	0x20000aac

080011d0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08c      	sub	sp, #48	; 0x30
 80011d4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80011d6:	4b58      	ldr	r3, [pc, #352]	; (8001338 <SEGGER_SYSVIEW_Start+0x168>)
 80011d8:	2201      	movs	r2, #1
 80011da:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80011dc:	f3ef 8311 	mrs	r3, BASEPRI
 80011e0:	f04f 0120 	mov.w	r1, #32
 80011e4:	f381 8811 	msr	BASEPRI, r1
 80011e8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80011ea:	4b53      	ldr	r3, [pc, #332]	; (8001338 <SEGGER_SYSVIEW_Start+0x168>)
 80011ec:	785b      	ldrb	r3, [r3, #1]
 80011ee:	220a      	movs	r2, #10
 80011f0:	4952      	ldr	r1, [pc, #328]	; (800133c <SEGGER_SYSVIEW_Start+0x16c>)
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff f824 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80011fe:	200a      	movs	r0, #10
 8001200:	f7ff ff32 	bl	8001068 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001204:	f3ef 8311 	mrs	r3, BASEPRI
 8001208:	f04f 0120 	mov.w	r1, #32
 800120c:	f381 8811 	msr	BASEPRI, r1
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	484b      	ldr	r0, [pc, #300]	; (8001340 <SEGGER_SYSVIEW_Start+0x170>)
 8001214:	f7ff fbbc 	bl	8000990 <_PreparePacket>
 8001218:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001222:	4b45      	ldr	r3, [pc, #276]	; (8001338 <SEGGER_SYSVIEW_Start+0x168>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	62bb      	str	r3, [r7, #40]	; 0x28
 8001228:	e00b      	b.n	8001242 <SEGGER_SYSVIEW_Start+0x72>
 800122a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800122c:	b2da      	uxtb	r2, r3
 800122e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001230:	1c59      	adds	r1, r3, #1
 8001232:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001234:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	701a      	strb	r2, [r3, #0]
 800123c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800123e:	09db      	lsrs	r3, r3, #7
 8001240:	62bb      	str	r3, [r7, #40]	; 0x28
 8001242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001244:	2b7f      	cmp	r3, #127	; 0x7f
 8001246:	d8f0      	bhi.n	800122a <SEGGER_SYSVIEW_Start+0x5a>
 8001248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800124a:	1c5a      	adds	r2, r3, #1
 800124c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800124e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	701a      	strb	r2, [r3, #0]
 8001254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001256:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
 800125c:	4b36      	ldr	r3, [pc, #216]	; (8001338 <SEGGER_SYSVIEW_Start+0x168>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	623b      	str	r3, [r7, #32]
 8001262:	e00b      	b.n	800127c <SEGGER_SYSVIEW_Start+0xac>
 8001264:	6a3b      	ldr	r3, [r7, #32]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126a:	1c59      	adds	r1, r3, #1
 800126c:	6279      	str	r1, [r7, #36]	; 0x24
 800126e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	701a      	strb	r2, [r3, #0]
 8001276:	6a3b      	ldr	r3, [r7, #32]
 8001278:	09db      	lsrs	r3, r3, #7
 800127a:	623b      	str	r3, [r7, #32]
 800127c:	6a3b      	ldr	r3, [r7, #32]
 800127e:	2b7f      	cmp	r3, #127	; 0x7f
 8001280:	d8f0      	bhi.n	8001264 <SEGGER_SYSVIEW_Start+0x94>
 8001282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001284:	1c5a      	adds	r2, r3, #1
 8001286:	627a      	str	r2, [r7, #36]	; 0x24
 8001288:	6a3a      	ldr	r2, [r7, #32]
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	701a      	strb	r2, [r3, #0]
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	61fb      	str	r3, [r7, #28]
 8001296:	4b28      	ldr	r3, [pc, #160]	; (8001338 <SEGGER_SYSVIEW_Start+0x168>)
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	61bb      	str	r3, [r7, #24]
 800129c:	e00b      	b.n	80012b6 <SEGGER_SYSVIEW_Start+0xe6>
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	1c59      	adds	r1, r3, #1
 80012a6:	61f9      	str	r1, [r7, #28]
 80012a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	701a      	strb	r2, [r3, #0]
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	09db      	lsrs	r3, r3, #7
 80012b4:	61bb      	str	r3, [r7, #24]
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	2b7f      	cmp	r3, #127	; 0x7f
 80012ba:	d8f0      	bhi.n	800129e <SEGGER_SYSVIEW_Start+0xce>
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	1c5a      	adds	r2, r3, #1
 80012c0:	61fa      	str	r2, [r7, #28]
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	b2d2      	uxtb	r2, r2
 80012c6:	701a      	strb	r2, [r3, #0]
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	2300      	movs	r3, #0
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	e00b      	b.n	80012ee <SEGGER_SYSVIEW_Start+0x11e>
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	1c59      	adds	r1, r3, #1
 80012de:	6179      	str	r1, [r7, #20]
 80012e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	701a      	strb	r2, [r3, #0]
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	09db      	lsrs	r3, r3, #7
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	2b7f      	cmp	r3, #127	; 0x7f
 80012f2:	d8f0      	bhi.n	80012d6 <SEGGER_SYSVIEW_Start+0x106>
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	617a      	str	r2, [r7, #20]
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	701a      	strb	r2, [r3, #0]
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8001304:	2218      	movs	r2, #24
 8001306:	6839      	ldr	r1, [r7, #0]
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff fc2d 	bl	8000b68 <_SendPacket>
      RECORD_END();
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <SEGGER_SYSVIEW_Start+0x168>)
 8001316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <SEGGER_SYSVIEW_Start+0x168>)
 800131e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001320:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8001322:	f000 f9eb 	bl	80016fc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8001326:	f000 f9b1 	bl	800168c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800132a:	f000 fb1f 	bl	800196c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800132e:	bf00      	nop
 8001330:	3730      	adds	r7, #48	; 0x30
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000a7c 	.word	0x20000a7c
 800133c:	080094f4 	.word	0x080094f4
 8001340:	20000aac 	.word	0x20000aac

08001344 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800134a:	f3ef 8311 	mrs	r3, BASEPRI
 800134e:	f04f 0120 	mov.w	r1, #32
 8001352:	f381 8811 	msr	BASEPRI, r1
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	480b      	ldr	r0, [pc, #44]	; (8001388 <SEGGER_SYSVIEW_Stop+0x44>)
 800135a:	f7ff fb19 	bl	8000990 <_PreparePacket>
 800135e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8001360:	4b0a      	ldr	r3, [pc, #40]	; (800138c <SEGGER_SYSVIEW_Stop+0x48>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d007      	beq.n	8001378 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8001368:	220b      	movs	r2, #11
 800136a:	6839      	ldr	r1, [r7, #0]
 800136c:	6838      	ldr	r0, [r7, #0]
 800136e:	f7ff fbfb 	bl	8000b68 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <SEGGER_SYSVIEW_Stop+0x48>)
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f383 8811 	msr	BASEPRI, r3
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000aac 	.word	0x20000aac
 800138c:	20000a7c 	.word	0x20000a7c

08001390 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b08c      	sub	sp, #48	; 0x30
 8001394:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001396:	f3ef 8311 	mrs	r3, BASEPRI
 800139a:	f04f 0120 	mov.w	r1, #32
 800139e:	f381 8811 	msr	BASEPRI, r1
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	4845      	ldr	r0, [pc, #276]	; (80014bc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80013a6:	f7ff faf3 	bl	8000990 <_PreparePacket>
 80013aa:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013b4:	4b42      	ldr	r3, [pc, #264]	; (80014c0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80013ba:	e00b      	b.n	80013d4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80013bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c2:	1c59      	adds	r1, r3, #1
 80013c4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80013c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	701a      	strb	r2, [r3, #0]
 80013ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d0:	09db      	lsrs	r3, r3, #7
 80013d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80013d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d6:	2b7f      	cmp	r3, #127	; 0x7f
 80013d8:	d8f0      	bhi.n	80013bc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80013da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013dc:	1c5a      	adds	r2, r3, #1
 80013de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80013e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	701a      	strb	r2, [r3, #0]
 80013e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
 80013ee:	4b34      	ldr	r3, [pc, #208]	; (80014c0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	623b      	str	r3, [r7, #32]
 80013f4:	e00b      	b.n	800140e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80013f6:	6a3b      	ldr	r3, [r7, #32]
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fc:	1c59      	adds	r1, r3, #1
 80013fe:	6279      	str	r1, [r7, #36]	; 0x24
 8001400:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	701a      	strb	r2, [r3, #0]
 8001408:	6a3b      	ldr	r3, [r7, #32]
 800140a:	09db      	lsrs	r3, r3, #7
 800140c:	623b      	str	r3, [r7, #32]
 800140e:	6a3b      	ldr	r3, [r7, #32]
 8001410:	2b7f      	cmp	r3, #127	; 0x7f
 8001412:	d8f0      	bhi.n	80013f6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	1c5a      	adds	r2, r3, #1
 8001418:	627a      	str	r2, [r7, #36]	; 0x24
 800141a:	6a3a      	ldr	r2, [r7, #32]
 800141c:	b2d2      	uxtb	r2, r2
 800141e:	701a      	strb	r2, [r3, #0]
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	61fb      	str	r3, [r7, #28]
 8001428:	4b25      	ldr	r3, [pc, #148]	; (80014c0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	61bb      	str	r3, [r7, #24]
 800142e:	e00b      	b.n	8001448 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	b2da      	uxtb	r2, r3
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	1c59      	adds	r1, r3, #1
 8001438:	61f9      	str	r1, [r7, #28]
 800143a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	701a      	strb	r2, [r3, #0]
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	09db      	lsrs	r3, r3, #7
 8001446:	61bb      	str	r3, [r7, #24]
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	2b7f      	cmp	r3, #127	; 0x7f
 800144c:	d8f0      	bhi.n	8001430 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	1c5a      	adds	r2, r3, #1
 8001452:	61fa      	str	r2, [r7, #28]
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	701a      	strb	r2, [r3, #0]
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	617b      	str	r3, [r7, #20]
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	e00b      	b.n	8001480 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	b2da      	uxtb	r2, r3
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	1c59      	adds	r1, r3, #1
 8001470:	6179      	str	r1, [r7, #20]
 8001472:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	701a      	strb	r2, [r3, #0]
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	09db      	lsrs	r3, r3, #7
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	2b7f      	cmp	r3, #127	; 0x7f
 8001484:	d8f0      	bhi.n	8001468 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	1c5a      	adds	r2, r3, #1
 800148a:	617a      	str	r2, [r7, #20]
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	b2d2      	uxtb	r2, r2
 8001490:	701a      	strb	r2, [r3, #0]
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8001496:	2218      	movs	r2, #24
 8001498:	6879      	ldr	r1, [r7, #4]
 800149a:	68b8      	ldr	r0, [r7, #8]
 800149c:	f7ff fb64 	bl	8000b68 <_SendPacket>
  RECORD_END();
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80014a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d002      	beq.n	80014b4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80014ae:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80014b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b2:	4798      	blx	r3
  }
}
 80014b4:	bf00      	nop
 80014b6:	3730      	adds	r7, #48	; 0x30
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000aac 	.word	0x20000aac
 80014c0:	20000a7c 	.word	0x20000a7c

080014c4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b092      	sub	sp, #72	; 0x48
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80014cc:	f3ef 8311 	mrs	r3, BASEPRI
 80014d0:	f04f 0120 	mov.w	r1, #32
 80014d4:	f381 8811 	msr	BASEPRI, r1
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	486a      	ldr	r0, [pc, #424]	; (8001684 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80014dc:	f7ff fa58 	bl	8000990 <_PreparePacket>
 80014e0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	647b      	str	r3, [r7, #68]	; 0x44
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	4b66      	ldr	r3, [pc, #408]	; (8001688 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	643b      	str	r3, [r7, #64]	; 0x40
 80014f6:	e00b      	b.n	8001510 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80014f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014fe:	1c59      	adds	r1, r3, #1
 8001500:	6479      	str	r1, [r7, #68]	; 0x44
 8001502:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	701a      	strb	r2, [r3, #0]
 800150a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800150c:	09db      	lsrs	r3, r3, #7
 800150e:	643b      	str	r3, [r7, #64]	; 0x40
 8001510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001512:	2b7f      	cmp	r3, #127	; 0x7f
 8001514:	d8f0      	bhi.n	80014f8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8001516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001518:	1c5a      	adds	r2, r3, #1
 800151a:	647a      	str	r2, [r7, #68]	; 0x44
 800151c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	701a      	strb	r2, [r3, #0]
 8001522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001524:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	63fb      	str	r3, [r7, #60]	; 0x3c
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001530:	e00b      	b.n	800154a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8001532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001534:	b2da      	uxtb	r2, r3
 8001536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001538:	1c59      	adds	r1, r3, #1
 800153a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800153c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	701a      	strb	r2, [r3, #0]
 8001544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001546:	09db      	lsrs	r3, r3, #7
 8001548:	63bb      	str	r3, [r7, #56]	; 0x38
 800154a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800154c:	2b7f      	cmp	r3, #127	; 0x7f
 800154e:	d8f0      	bhi.n	8001532 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8001550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001552:	1c5a      	adds	r2, r3, #1
 8001554:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001556:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	701a      	strb	r2, [r3, #0]
 800155c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800155e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2220      	movs	r2, #32
 8001566:	4619      	mov	r1, r3
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f7ff f9e1 	bl	8000930 <_EncodeStr>
 800156e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8001570:	2209      	movs	r2, #9
 8001572:	68f9      	ldr	r1, [r7, #12]
 8001574:	6938      	ldr	r0, [r7, #16]
 8001576:	f7ff faf7 	bl	8000b68 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	637b      	str	r3, [r7, #52]	; 0x34
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	4b40      	ldr	r3, [pc, #256]	; (8001688 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	633b      	str	r3, [r7, #48]	; 0x30
 800158e:	e00b      	b.n	80015a8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8001590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001592:	b2da      	uxtb	r2, r3
 8001594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001596:	1c59      	adds	r1, r3, #1
 8001598:	6379      	str	r1, [r7, #52]	; 0x34
 800159a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	701a      	strb	r2, [r3, #0]
 80015a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a4:	09db      	lsrs	r3, r3, #7
 80015a6:	633b      	str	r3, [r7, #48]	; 0x30
 80015a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015aa:	2b7f      	cmp	r3, #127	; 0x7f
 80015ac:	d8f0      	bhi.n	8001590 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80015ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015b0:	1c5a      	adds	r2, r3, #1
 80015b2:	637a      	str	r2, [r7, #52]	; 0x34
 80015b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	701a      	strb	r2, [r3, #0]
 80015ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80015c8:	e00b      	b.n	80015e2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80015ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d0:	1c59      	adds	r1, r3, #1
 80015d2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80015d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80015d8:	b2d2      	uxtb	r2, r2
 80015da:	701a      	strb	r2, [r3, #0]
 80015dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015de:	09db      	lsrs	r3, r3, #7
 80015e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80015e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e4:	2b7f      	cmp	r3, #127	; 0x7f
 80015e6:	d8f0      	bhi.n	80015ca <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80015e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ea:	1c5a      	adds	r2, r3, #1
 80015ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80015ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015f0:	b2d2      	uxtb	r2, r2
 80015f2:	701a      	strb	r2, [r3, #0]
 80015f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	623b      	str	r3, [r7, #32]
 8001602:	e00b      	b.n	800161c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8001604:	6a3b      	ldr	r3, [r7, #32]
 8001606:	b2da      	uxtb	r2, r3
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	1c59      	adds	r1, r3, #1
 800160c:	6279      	str	r1, [r7, #36]	; 0x24
 800160e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	701a      	strb	r2, [r3, #0]
 8001616:	6a3b      	ldr	r3, [r7, #32]
 8001618:	09db      	lsrs	r3, r3, #7
 800161a:	623b      	str	r3, [r7, #32]
 800161c:	6a3b      	ldr	r3, [r7, #32]
 800161e:	2b7f      	cmp	r3, #127	; 0x7f
 8001620:	d8f0      	bhi.n	8001604 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	1c5a      	adds	r2, r3, #1
 8001626:	627a      	str	r2, [r7, #36]	; 0x24
 8001628:	6a3a      	ldr	r2, [r7, #32]
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	701a      	strb	r2, [r3, #0]
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	61fb      	str	r3, [r7, #28]
 8001636:	2300      	movs	r3, #0
 8001638:	61bb      	str	r3, [r7, #24]
 800163a:	e00b      	b.n	8001654 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	b2da      	uxtb	r2, r3
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	1c59      	adds	r1, r3, #1
 8001644:	61f9      	str	r1, [r7, #28]
 8001646:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	701a      	strb	r2, [r3, #0]
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	09db      	lsrs	r3, r3, #7
 8001652:	61bb      	str	r3, [r7, #24]
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	2b7f      	cmp	r3, #127	; 0x7f
 8001658:	d8f0      	bhi.n	800163c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	1c5a      	adds	r2, r3, #1
 800165e:	61fa      	str	r2, [r7, #28]
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	701a      	strb	r2, [r3, #0]
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800166a:	2215      	movs	r2, #21
 800166c:	68f9      	ldr	r1, [r7, #12]
 800166e:	6938      	ldr	r0, [r7, #16]
 8001670:	f7ff fa7a 	bl	8000b68 <_SendPacket>
  RECORD_END();
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	f383 8811 	msr	BASEPRI, r3
}
 800167a:	bf00      	nop
 800167c:	3748      	adds	r7, #72	; 0x48
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000aac 	.word	0x20000aac
 8001688:	20000a7c 	.word	0x20000a7c

0800168c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8001690:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d008      	beq.n	80016aa <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80016a2:	4b03      	ldr	r3, [pc, #12]	; (80016b0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	4798      	blx	r3
  }
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000a7c 	.word	0x20000a7c

080016b4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80016bc:	f3ef 8311 	mrs	r3, BASEPRI
 80016c0:	f04f 0120 	mov.w	r1, #32
 80016c4:	f381 8811 	msr	BASEPRI, r1
 80016c8:	617b      	str	r3, [r7, #20]
 80016ca:	480b      	ldr	r0, [pc, #44]	; (80016f8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80016cc:	f7ff f960 	bl	8000990 <_PreparePacket>
 80016d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80016d2:	2280      	movs	r2, #128	; 0x80
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	6938      	ldr	r0, [r7, #16]
 80016d8:	f7ff f92a 	bl	8000930 <_EncodeStr>
 80016dc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80016de:	220e      	movs	r2, #14
 80016e0:	68f9      	ldr	r1, [r7, #12]
 80016e2:	6938      	ldr	r0, [r7, #16]
 80016e4:	f7ff fa40 	bl	8000b68 <_SendPacket>
  RECORD_END();
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	f383 8811 	msr	BASEPRI, r3
}
 80016ee:	bf00      	nop
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000aac 	.word	0x20000aac

080016fc <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80016fc:	b590      	push	{r4, r7, lr}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8001702:	4b15      	ldr	r3, [pc, #84]	; (8001758 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001704:	6a1b      	ldr	r3, [r3, #32]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d01a      	beq.n	8001740 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800170a:	4b13      	ldr	r3, [pc, #76]	; (8001758 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800170c:	6a1b      	ldr	r3, [r3, #32]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d015      	beq.n	8001740 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8001714:	4b10      	ldr	r3, [pc, #64]	; (8001758 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4798      	blx	r3
 800171c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8001720:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8001722:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	f04f 0300 	mov.w	r3, #0
 800172e:	000a      	movs	r2, r1
 8001730:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8001732:	4613      	mov	r3, r2
 8001734:	461a      	mov	r2, r3
 8001736:	4621      	mov	r1, r4
 8001738:	200d      	movs	r0, #13
 800173a:	f7ff fcef 	bl	800111c <SEGGER_SYSVIEW_RecordU32x2>
 800173e:	e006      	b.n	800174e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4619      	mov	r1, r3
 8001746:	200c      	movs	r0, #12
 8001748:	f7ff fcac 	bl	80010a4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800174c:	bf00      	nop
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	bd90      	pop	{r4, r7, pc}
 8001756:	bf00      	nop
 8001758:	20000a7c 	.word	0x20000a7c
 800175c:	e0001004 	.word	0xe0001004

08001760 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8001766:	f3ef 8311 	mrs	r3, BASEPRI
 800176a:	f04f 0120 	mov.w	r1, #32
 800176e:	f381 8811 	msr	BASEPRI, r1
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	4819      	ldr	r0, [pc, #100]	; (80017dc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8001776:	f7ff f90b 	bl	8000990 <_PreparePacket>
 800177a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8001780:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001788:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	617b      	str	r3, [r7, #20]
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	e00b      	b.n	80017ac <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	b2da      	uxtb	r2, r3
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	1c59      	adds	r1, r3, #1
 800179c:	6179      	str	r1, [r7, #20]
 800179e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	701a      	strb	r2, [r3, #0]
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	09db      	lsrs	r3, r3, #7
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	2b7f      	cmp	r3, #127	; 0x7f
 80017b0:	d8f0      	bhi.n	8001794 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	1c5a      	adds	r2, r3, #1
 80017b6:	617a      	str	r2, [r7, #20]
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	701a      	strb	r2, [r3, #0]
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80017c2:	2202      	movs	r2, #2
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	68b8      	ldr	r0, [r7, #8]
 80017c8:	f7ff f9ce 	bl	8000b68 <_SendPacket>
  RECORD_END();
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f383 8811 	msr	BASEPRI, r3
}
 80017d2:	bf00      	nop
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000aac 	.word	0x20000aac
 80017e0:	e000ed04 	.word	0xe000ed04

080017e4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80017ea:	f3ef 8311 	mrs	r3, BASEPRI
 80017ee:	f04f 0120 	mov.w	r1, #32
 80017f2:	f381 8811 	msr	BASEPRI, r1
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	4807      	ldr	r0, [pc, #28]	; (8001818 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80017fa:	f7ff f8c9 	bl	8000990 <_PreparePacket>
 80017fe:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8001800:	2203      	movs	r2, #3
 8001802:	6839      	ldr	r1, [r7, #0]
 8001804:	6838      	ldr	r0, [r7, #0]
 8001806:	f7ff f9af 	bl	8000b68 <_SendPacket>
  RECORD_END();
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f383 8811 	msr	BASEPRI, r3
}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000aac 	.word	0x20000aac

0800181c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b08c      	sub	sp, #48	; 0x30
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8001826:	4b40      	ldr	r3, [pc, #256]	; (8001928 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d077      	beq.n	800191e <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800182e:	4b3e      	ldr	r3, [pc, #248]	; (8001928 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8001834:	2300      	movs	r3, #0
 8001836:	62bb      	str	r3, [r7, #40]	; 0x28
 8001838:	e008      	b.n	800184c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800183a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8001840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001842:	2b00      	cmp	r3, #0
 8001844:	d007      	beq.n	8001856 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8001846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001848:	3301      	adds	r3, #1
 800184a:	62bb      	str	r3, [r7, #40]	; 0x28
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001850:	429a      	cmp	r2, r3
 8001852:	d3f2      	bcc.n	800183a <SEGGER_SYSVIEW_SendModule+0x1e>
 8001854:	e000      	b.n	8001858 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8001856:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8001858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185a:	2b00      	cmp	r3, #0
 800185c:	d055      	beq.n	800190a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800185e:	f3ef 8311 	mrs	r3, BASEPRI
 8001862:	f04f 0120 	mov.w	r1, #32
 8001866:	f381 8811 	msr	BASEPRI, r1
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	482f      	ldr	r0, [pc, #188]	; (800192c <SEGGER_SYSVIEW_SendModule+0x110>)
 800186e:	f7ff f88f 	bl	8000990 <_PreparePacket>
 8001872:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	623b      	str	r3, [r7, #32]
 8001880:	e00b      	b.n	800189a <SEGGER_SYSVIEW_SendModule+0x7e>
 8001882:	6a3b      	ldr	r3, [r7, #32]
 8001884:	b2da      	uxtb	r2, r3
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	1c59      	adds	r1, r3, #1
 800188a:	6279      	str	r1, [r7, #36]	; 0x24
 800188c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001890:	b2d2      	uxtb	r2, r2
 8001892:	701a      	strb	r2, [r3, #0]
 8001894:	6a3b      	ldr	r3, [r7, #32]
 8001896:	09db      	lsrs	r3, r3, #7
 8001898:	623b      	str	r3, [r7, #32]
 800189a:	6a3b      	ldr	r3, [r7, #32]
 800189c:	2b7f      	cmp	r3, #127	; 0x7f
 800189e:	d8f0      	bhi.n	8001882 <SEGGER_SYSVIEW_SendModule+0x66>
 80018a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a2:	1c5a      	adds	r2, r3, #1
 80018a4:	627a      	str	r2, [r7, #36]	; 0x24
 80018a6:	6a3a      	ldr	r2, [r7, #32]
 80018a8:	b2d2      	uxtb	r2, r2
 80018aa:	701a      	strb	r2, [r3, #0]
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	61fb      	str	r3, [r7, #28]
 80018b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	61bb      	str	r3, [r7, #24]
 80018ba:	e00b      	b.n	80018d4 <SEGGER_SYSVIEW_SendModule+0xb8>
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	1c59      	adds	r1, r3, #1
 80018c4:	61f9      	str	r1, [r7, #28]
 80018c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	701a      	strb	r2, [r3, #0]
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	09db      	lsrs	r3, r3, #7
 80018d2:	61bb      	str	r3, [r7, #24]
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	2b7f      	cmp	r3, #127	; 0x7f
 80018d8:	d8f0      	bhi.n	80018bc <SEGGER_SYSVIEW_SendModule+0xa0>
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	1c5a      	adds	r2, r3, #1
 80018de:	61fa      	str	r2, [r7, #28]
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	701a      	strb	r2, [r3, #0]
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80018ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2280      	movs	r2, #128	; 0x80
 80018f0:	4619      	mov	r1, r3
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f7ff f81c 	bl	8000930 <_EncodeStr>
 80018f8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80018fa:	2216      	movs	r2, #22
 80018fc:	68f9      	ldr	r1, [r7, #12]
 80018fe:	6938      	ldr	r0, [r7, #16]
 8001900:	f7ff f932 	bl	8000b68 <_SendPacket>
      RECORD_END();
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800190a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800190c:	2b00      	cmp	r3, #0
 800190e:	d006      	beq.n	800191e <SEGGER_SYSVIEW_SendModule+0x102>
 8001910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d002      	beq.n	800191e <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8001918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	4798      	blx	r3
    }
  }
}
 800191e:	bf00      	nop
 8001920:	3730      	adds	r7, #48	; 0x30
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000aa4 	.word	0x20000aa4
 800192c:	20000aac 	.word	0x20000aac

08001930 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8001936:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00f      	beq.n	800195e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800193e:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d002      	beq.n	8001952 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f2      	bne.n	8001944 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000aa4 	.word	0x20000aa4

0800196c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8001972:	f3ef 8311 	mrs	r3, BASEPRI
 8001976:	f04f 0120 	mov.w	r1, #32
 800197a:	f381 8811 	msr	BASEPRI, r1
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	4817      	ldr	r0, [pc, #92]	; (80019e0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8001982:	f7ff f805 	bl	8000990 <_PreparePacket>
 8001986:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	4b14      	ldr	r3, [pc, #80]	; (80019e4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	613b      	str	r3, [r7, #16]
 8001996:	e00b      	b.n	80019b0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	b2da      	uxtb	r2, r3
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	1c59      	adds	r1, r3, #1
 80019a0:	6179      	str	r1, [r7, #20]
 80019a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	701a      	strb	r2, [r3, #0]
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	09db      	lsrs	r3, r3, #7
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	2b7f      	cmp	r3, #127	; 0x7f
 80019b4:	d8f0      	bhi.n	8001998 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	1c5a      	adds	r2, r3, #1
 80019ba:	617a      	str	r2, [r7, #20]
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	701a      	strb	r2, [r3, #0]
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80019c6:	221b      	movs	r2, #27
 80019c8:	6879      	ldr	r1, [r7, #4]
 80019ca:	68b8      	ldr	r0, [r7, #8]
 80019cc:	f7ff f8cc 	bl	8000b68 <_SendPacket>
  RECORD_END();
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f383 8811 	msr	BASEPRI, r3
}
 80019d6:	bf00      	nop
 80019d8:	3718      	adds	r7, #24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20000aac 	.word	0x20000aac
 80019e4:	20000aa8 	.word	0x20000aa8

080019e8 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 80019e8:	b40f      	push	{r0, r1, r2, r3}
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80019f6:	1d3b      	adds	r3, r7, #4
 80019f8:	461a      	mov	r2, r3
 80019fa:	2100      	movs	r1, #0
 80019fc:	6938      	ldr	r0, [r7, #16]
 80019fe:	f7ff fa21 	bl	8000e44 <_VPrintHost>
  va_end(ParamList);
#endif
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a0c:	b004      	add	sp, #16
 8001a0e:	4770      	bx	lr

08001a10 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001a14:	4803      	ldr	r0, [pc, #12]	; (8001a24 <_cbSendSystemDesc+0x14>)
 8001a16:	f7ff fe4d 	bl	80016b4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001a1a:	4803      	ldr	r0, [pc, #12]	; (8001a28 <_cbSendSystemDesc+0x18>)
 8001a1c:	f7ff fe4a 	bl	80016b4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	080093f4 	.word	0x080093f4
 8001a28:	08009428 	.word	0x08009428

08001a2c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <SEGGER_SYSVIEW_Conf+0x20>)
 8001a32:	6818      	ldr	r0, [r3, #0]
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <SEGGER_SYSVIEW_Conf+0x20>)
 8001a36:	6819      	ldr	r1, [r3, #0]
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <SEGGER_SYSVIEW_Conf+0x24>)
 8001a3a:	4a06      	ldr	r2, [pc, #24]	; (8001a54 <SEGGER_SYSVIEW_Conf+0x28>)
 8001a3c:	f7ff fac0 	bl	8000fc0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001a40:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001a44:	f7ff fb00 	bl	8001048 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001a48:	bf00      	nop
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	08001a11 	.word	0x08001a11
 8001a54:	08009500 	.word	0x08009500

08001a58 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001a5e:	2300      	movs	r3, #0
 8001a60:	607b      	str	r3, [r7, #4]
 8001a62:	e048      	b.n	8001af6 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8001a64:	4929      	ldr	r1, [pc, #164]	; (8001b0c <_cbSendTaskList+0xb4>)
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f006 fa25 	bl	8007ec4 <uxTaskGetStackHighWaterMark>
 8001a7a:	4601      	mov	r1, r0
 8001a7c:	4823      	ldr	r0, [pc, #140]	; (8001b0c <_cbSendTaskList+0xb4>)
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	4613      	mov	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4403      	add	r3, r0
 8001a8a:	3310      	adds	r3, #16
 8001a8c:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8001a8e:	491f      	ldr	r1, [pc, #124]	; (8001b0c <_cbSendTaskList+0xb4>)
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	440b      	add	r3, r1
 8001a9c:	6818      	ldr	r0, [r3, #0]
 8001a9e:	491b      	ldr	r1, [pc, #108]	; (8001b0c <_cbSendTaskList+0xb4>)
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	440b      	add	r3, r1
 8001aac:	3304      	adds	r3, #4
 8001aae:	6819      	ldr	r1, [r3, #0]
 8001ab0:	4c16      	ldr	r4, [pc, #88]	; (8001b0c <_cbSendTaskList+0xb4>)
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4423      	add	r3, r4
 8001abe:	3308      	adds	r3, #8
 8001ac0:	681c      	ldr	r4, [r3, #0]
 8001ac2:	4d12      	ldr	r5, [pc, #72]	; (8001b0c <_cbSendTaskList+0xb4>)
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	442b      	add	r3, r5
 8001ad0:	330c      	adds	r3, #12
 8001ad2:	681d      	ldr	r5, [r3, #0]
 8001ad4:	4e0d      	ldr	r6, [pc, #52]	; (8001b0c <_cbSendTaskList+0xb4>)
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4433      	add	r3, r6
 8001ae2:	3310      	adds	r3, #16
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	462b      	mov	r3, r5
 8001aea:	4622      	mov	r2, r4
 8001aec:	f000 f855 	bl	8001b9a <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3301      	adds	r3, #1
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <_cbSendTaskList+0xb8>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d3b1      	bcc.n	8001a64 <_cbSendTaskList+0xc>
  }
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000b90 	.word	0x20000b90
 8001b10:	20000c30 	.word	0x20000c30

08001b14 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001b1c:	f005 feba 	bl	8007894 <xTaskGetTickCountFromISR>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2200      	movs	r2, #0
 8001b24:	469a      	mov	sl, r3
 8001b26:	4693      	mov	fp, r2
 8001b28:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001b2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	f04f 0a00 	mov.w	sl, #0
 8001b38:	f04f 0b00 	mov.w	fp, #0
 8001b3c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8001b40:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8001b44:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8001b48:	4652      	mov	r2, sl
 8001b4a:	465b      	mov	r3, fp
 8001b4c:	1a14      	subs	r4, r2, r0
 8001b4e:	eb63 0501 	sbc.w	r5, r3, r1
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	f04f 0300 	mov.w	r3, #0
 8001b5a:	00ab      	lsls	r3, r5, #2
 8001b5c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8001b60:	00a2      	lsls	r2, r4, #2
 8001b62:	4614      	mov	r4, r2
 8001b64:	461d      	mov	r5, r3
 8001b66:	eb14 0800 	adds.w	r8, r4, r0
 8001b6a:	eb45 0901 	adc.w	r9, r5, r1
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	f04f 0300 	mov.w	r3, #0
 8001b76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b82:	4690      	mov	r8, r2
 8001b84:	4699      	mov	r9, r3
 8001b86:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8001b8a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001b8e:	4610      	mov	r0, r2
 8001b90:	4619      	mov	r1, r3
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001b9a <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b08a      	sub	sp, #40	; 0x28
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	60f8      	str	r0, [r7, #12]
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	607a      	str	r2, [r7, #4]
 8001ba6:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	2214      	movs	r2, #20
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f007 fb1b 	bl	80091ec <memset>
  TaskInfo.TaskID     = TaskID;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff fc78 	bl	80014c4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001bd4:	bf00      	nop
 8001bd6:	3728      	adds	r7, #40	; 0x28
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	db0b      	blt.n	8001c06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bee:	79fb      	ldrb	r3, [r7, #7]
 8001bf0:	f003 021f 	and.w	r2, r3, #31
 8001bf4:	4907      	ldr	r1, [pc, #28]	; (8001c14 <__NVIC_EnableIRQ+0x38>)
 8001bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfa:	095b      	lsrs	r3, r3, #5
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8001c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	e000e100 	.word	0xe000e100

08001c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	6039      	str	r1, [r7, #0]
 8001c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	db0a      	blt.n	8001c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	490c      	ldr	r1, [pc, #48]	; (8001c64 <__NVIC_SetPriority+0x4c>)
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	0112      	lsls	r2, r2, #4
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c40:	e00a      	b.n	8001c58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	4908      	ldr	r1, [pc, #32]	; (8001c68 <__NVIC_SetPriority+0x50>)
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	3b04      	subs	r3, #4
 8001c50:	0112      	lsls	r2, r2, #4
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	440b      	add	r3, r1
 8001c56:	761a      	strb	r2, [r3, #24]
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	e000e100 	.word	0xe000e100
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c70:	f000 fe59 	bl	8002926 <HAL_Init>

  /* USER CODE BEGIN Init */
  SEGGER_SYSVIEW_Conf();
 8001c74:	f7ff feda 	bl	8001a2c <SEGGER_SYSVIEW_Conf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c78:	f000 f850 	bl	8001d1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c7c:	f000 f9cc 	bl	8002018 <MX_GPIO_Init>
  MX_ETH_Init();
 8001c80:	f000 f8be 	bl	8001e00 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001c84:	f000 f96a 	bl	8001f5c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001c88:	f000 f998 	bl	8001fbc <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 8001c8c:	f000 f906 	bl	8001e9c <MX_UART4_Init>
  MX_USART2_UART_Init();
 8001c90:	f000 f934 	bl	8001efc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001c94:	f004 fa04 	bl	80060a0 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of sendTimer */
  sendTimerHandle = osTimerNew(sendTimerEntry, osTimerPeriodic, NULL, &sendTimer_attributes);
 8001c98:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <main+0x84>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	4815      	ldr	r0, [pc, #84]	; (8001cf4 <main+0x88>)
 8001ca0:	f004 fb52 	bl	8006348 <osTimerNew>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	4a14      	ldr	r2, [pc, #80]	; (8001cf8 <main+0x8c>)
 8001ca8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  osTimerStart(sendTimerHandle, 1000 / portTICK_PERIOD_MS);
 8001caa:	4b13      	ldr	r3, [pc, #76]	; (8001cf8 <main+0x8c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f004 fbcc 	bl	8006450 <osTimerStart>
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of uart2_BytesReceived */
  uart2_BytesReceivedHandle = osMessageQueueNew (16, sizeof(uint16_t), &uart2_BytesReceived_attributes);
 8001cb8:	4a10      	ldr	r2, [pc, #64]	; (8001cfc <main+0x90>)
 8001cba:	2102      	movs	r1, #2
 8001cbc:	2010      	movs	r0, #16
 8001cbe:	f004 fc07 	bl	80064d0 <osMessageQueueNew>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	4a0e      	ldr	r2, [pc, #56]	; (8001d00 <main+0x94>)
 8001cc6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001cc8:	4a0e      	ldr	r2, [pc, #56]	; (8001d04 <main+0x98>)
 8001cca:	2100      	movs	r1, #0
 8001ccc:	480e      	ldr	r0, [pc, #56]	; (8001d08 <main+0x9c>)
 8001cce:	f004 fa51 	bl	8006174 <osThreadNew>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	4a0d      	ldr	r2, [pc, #52]	; (8001d0c <main+0xa0>)
 8001cd6:	6013      	str	r3, [r2, #0]

  /* creation of uartPrintOutTas */
  uartPrintOutTasHandle = osThreadNew(uartPrintOutTask, NULL, &uartPrintOutTas_attributes);
 8001cd8:	4a0d      	ldr	r2, [pc, #52]	; (8001d10 <main+0xa4>)
 8001cda:	2100      	movs	r1, #0
 8001cdc:	480d      	ldr	r0, [pc, #52]	; (8001d14 <main+0xa8>)
 8001cde:	f004 fa49 	bl	8006174 <osThreadNew>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	4a0c      	ldr	r2, [pc, #48]	; (8001d18 <main+0xac>)
 8001ce6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001ce8:	f004 fa0e 	bl	8006108 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001cec:	e7fe      	b.n	8001cec <main+0x80>
 8001cee:	bf00      	nop
 8001cf0:	08009568 	.word	0x08009568
 8001cf4:	08002285 	.word	0x08002285
 8001cf8:	200013c8 	.word	0x200013c8
 8001cfc:	08009550 	.word	0x08009550
 8001d00:	200013c4 	.word	0x200013c4
 8001d04:	08009508 	.word	0x08009508
 8001d08:	08002229 	.word	0x08002229
 8001d0c:	200013bc 	.word	0x200013bc
 8001d10:	0800952c 	.word	0x0800952c
 8001d14:	08002239 	.word	0x08002239
 8001d18:	200013c0 	.word	0x200013c0

08001d1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b094      	sub	sp, #80	; 0x50
 8001d20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d22:	f107 031c 	add.w	r3, r7, #28
 8001d26:	2234      	movs	r2, #52	; 0x34
 8001d28:	2100      	movs	r1, #0
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f007 fa5e 	bl	80091ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d30:	f107 0308 	add.w	r3, r7, #8
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001d40:	f001 fd58 	bl	80037f4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d44:	4b2c      	ldr	r3, [pc, #176]	; (8001df8 <SystemClock_Config+0xdc>)
 8001d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d48:	4a2b      	ldr	r2, [pc, #172]	; (8001df8 <SystemClock_Config+0xdc>)
 8001d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d50:	4b29      	ldr	r3, [pc, #164]	; (8001df8 <SystemClock_Config+0xdc>)
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001d5c:	4b27      	ldr	r3, [pc, #156]	; (8001dfc <SystemClock_Config+0xe0>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d64:	4a25      	ldr	r2, [pc, #148]	; (8001dfc <SystemClock_Config+0xe0>)
 8001d66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d6a:	6013      	str	r3, [r2, #0]
 8001d6c:	4b23      	ldr	r3, [pc, #140]	; (8001dfc <SystemClock_Config+0xe0>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d74:	603b      	str	r3, [r7, #0]
 8001d76:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001d7c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001d80:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d82:	2302      	movs	r3, #2
 8001d84:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d8a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d8c:	2304      	movs	r3, #4
 8001d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001d90:	2360      	movs	r3, #96	; 0x60
 8001d92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d94:	2302      	movs	r3, #2
 8001d96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d98:	2304      	movs	r3, #4
 8001d9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001da0:	f107 031c 	add.w	r3, r7, #28
 8001da4:	4618      	mov	r0, r3
 8001da6:	f001 fd85 	bl	80038b4 <HAL_RCC_OscConfig>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001db0:	f000 fa92 	bl	80022d8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001db4:	f001 fd2e 	bl	8003814 <HAL_PWREx_EnableOverDrive>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001dbe:	f000 fa8b 	bl	80022d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dc2:	230f      	movs	r3, #15
 8001dc4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001dd8:	f107 0308 	add.w	r3, r7, #8
 8001ddc:	2103      	movs	r1, #3
 8001dde:	4618      	mov	r0, r3
 8001de0:	f002 f816 	bl	8003e10 <HAL_RCC_ClockConfig>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001dea:	f000 fa75 	bl	80022d8 <Error_Handler>
  }
}
 8001dee:	bf00      	nop
 8001df0:	3750      	adds	r7, #80	; 0x50
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40007000 	.word	0x40007000

08001e00 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001e04:	4b1f      	ldr	r3, [pc, #124]	; (8001e84 <MX_ETH_Init+0x84>)
 8001e06:	4a20      	ldr	r2, [pc, #128]	; (8001e88 <MX_ETH_Init+0x88>)
 8001e08:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001e0a:	4b20      	ldr	r3, [pc, #128]	; (8001e8c <MX_ETH_Init+0x8c>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001e10:	4b1e      	ldr	r3, [pc, #120]	; (8001e8c <MX_ETH_Init+0x8c>)
 8001e12:	2280      	movs	r2, #128	; 0x80
 8001e14:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001e16:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <MX_ETH_Init+0x8c>)
 8001e18:	22e1      	movs	r2, #225	; 0xe1
 8001e1a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001e1c:	4b1b      	ldr	r3, [pc, #108]	; (8001e8c <MX_ETH_Init+0x8c>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001e22:	4b1a      	ldr	r3, [pc, #104]	; (8001e8c <MX_ETH_Init+0x8c>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001e28:	4b18      	ldr	r3, [pc, #96]	; (8001e8c <MX_ETH_Init+0x8c>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001e2e:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <MX_ETH_Init+0x84>)
 8001e30:	4a16      	ldr	r2, [pc, #88]	; (8001e8c <MX_ETH_Init+0x8c>)
 8001e32:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001e34:	4b13      	ldr	r3, [pc, #76]	; (8001e84 <MX_ETH_Init+0x84>)
 8001e36:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001e3a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001e3c:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <MX_ETH_Init+0x84>)
 8001e3e:	4a14      	ldr	r2, [pc, #80]	; (8001e90 <MX_ETH_Init+0x90>)
 8001e40:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001e42:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <MX_ETH_Init+0x84>)
 8001e44:	4a13      	ldr	r2, [pc, #76]	; (8001e94 <MX_ETH_Init+0x94>)
 8001e46:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001e48:	4b0e      	ldr	r3, [pc, #56]	; (8001e84 <MX_ETH_Init+0x84>)
 8001e4a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001e4e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001e50:	480c      	ldr	r0, [pc, #48]	; (8001e84 <MX_ETH_Init+0x84>)
 8001e52:	f000 fe9b 	bl	8002b8c <HAL_ETH_Init>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001e5c:	f000 fa3c 	bl	80022d8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001e60:	2238      	movs	r2, #56	; 0x38
 8001e62:	2100      	movs	r1, #0
 8001e64:	480c      	ldr	r0, [pc, #48]	; (8001e98 <MX_ETH_Init+0x98>)
 8001e66:	f007 f9c1 	bl	80091ec <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001e6a:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <MX_ETH_Init+0x98>)
 8001e6c:	2221      	movs	r2, #33	; 0x21
 8001e6e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001e70:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <MX_ETH_Init+0x98>)
 8001e72:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001e76:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001e78:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <MX_ETH_Init+0x98>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000c6c 	.word	0x20000c6c
 8001e88:	40028000 	.word	0x40028000
 8001e8c:	200013d0 	.word	0x200013d0
 8001e90:	20000100 	.word	0x20000100
 8001e94:	20000060 	.word	0x20000060
 8001e98:	20000c34 	.word	0x20000c34

08001e9c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001ea0:	4b14      	ldr	r3, [pc, #80]	; (8001ef4 <MX_UART4_Init+0x58>)
 8001ea2:	4a15      	ldr	r2, [pc, #84]	; (8001ef8 <MX_UART4_Init+0x5c>)
 8001ea4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001ea6:	4b13      	ldr	r3, [pc, #76]	; (8001ef4 <MX_UART4_Init+0x58>)
 8001ea8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001eac:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001eae:	4b11      	ldr	r3, [pc, #68]	; (8001ef4 <MX_UART4_Init+0x58>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001eb4:	4b0f      	ldr	r3, [pc, #60]	; (8001ef4 <MX_UART4_Init+0x58>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001eba:	4b0e      	ldr	r3, [pc, #56]	; (8001ef4 <MX_UART4_Init+0x58>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001ec0:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <MX_UART4_Init+0x58>)
 8001ec2:	220c      	movs	r2, #12
 8001ec4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ec6:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <MX_UART4_Init+0x58>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ecc:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <MX_UART4_Init+0x58>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ed2:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <MX_UART4_Init+0x58>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ed8:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <MX_UART4_Init+0x58>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001ede:	4805      	ldr	r0, [pc, #20]	; (8001ef4 <MX_UART4_Init+0x58>)
 8001ee0:	f003 f8f6 	bl	80050d0 <HAL_UART_Init>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001eea:	f000 f9f5 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000d1c 	.word	0x20000d1c
 8001ef8:	40004c00 	.word	0x40004c00

08001efc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f00:	4b14      	ldr	r3, [pc, #80]	; (8001f54 <MX_USART2_UART_Init+0x58>)
 8001f02:	4a15      	ldr	r2, [pc, #84]	; (8001f58 <MX_USART2_UART_Init+0x5c>)
 8001f04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f06:	4b13      	ldr	r3, [pc, #76]	; (8001f54 <MX_USART2_UART_Init+0x58>)
 8001f08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f0e:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <MX_USART2_UART_Init+0x58>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f14:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <MX_USART2_UART_Init+0x58>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f1a:	4b0e      	ldr	r3, [pc, #56]	; (8001f54 <MX_USART2_UART_Init+0x58>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <MX_USART2_UART_Init+0x58>)
 8001f22:	220c      	movs	r2, #12
 8001f24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f26:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <MX_USART2_UART_Init+0x58>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f2c:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <MX_USART2_UART_Init+0x58>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f32:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <MX_USART2_UART_Init+0x58>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f38:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <MX_USART2_UART_Init+0x58>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f3e:	4805      	ldr	r0, [pc, #20]	; (8001f54 <MX_USART2_UART_Init+0x58>)
 8001f40:	f003 f8c6 	bl	80050d0 <HAL_UART_Init>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001f4a:	f000 f9c5 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000da4 	.word	0x20000da4
 8001f58:	40004400 	.word	0x40004400

08001f5c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f60:	4b14      	ldr	r3, [pc, #80]	; (8001fb4 <MX_USART3_UART_Init+0x58>)
 8001f62:	4a15      	ldr	r2, [pc, #84]	; (8001fb8 <MX_USART3_UART_Init+0x5c>)
 8001f64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f66:	4b13      	ldr	r3, [pc, #76]	; (8001fb4 <MX_USART3_UART_Init+0x58>)
 8001f68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f6e:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <MX_USART3_UART_Init+0x58>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f74:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <MX_USART3_UART_Init+0x58>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f7a:	4b0e      	ldr	r3, [pc, #56]	; (8001fb4 <MX_USART3_UART_Init+0x58>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f80:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <MX_USART3_UART_Init+0x58>)
 8001f82:	220c      	movs	r2, #12
 8001f84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f86:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <MX_USART3_UART_Init+0x58>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f8c:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <MX_USART3_UART_Init+0x58>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f92:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <MX_USART3_UART_Init+0x58>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f98:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <MX_USART3_UART_Init+0x58>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f9e:	4805      	ldr	r0, [pc, #20]	; (8001fb4 <MX_USART3_UART_Init+0x58>)
 8001fa0:	f003 f896 	bl	80050d0 <HAL_UART_Init>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001faa:	f000 f995 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000e2c 	.word	0x20000e2c
 8001fb8:	40004800 	.word	0x40004800

08001fbc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001fc0:	4b14      	ldr	r3, [pc, #80]	; (8002014 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fc2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001fc6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001fc8:	4b12      	ldr	r3, [pc, #72]	; (8002014 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fca:	2206      	movs	r2, #6
 8001fcc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001fce:	4b11      	ldr	r3, [pc, #68]	; (8002014 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001fda:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fdc:	2202      	movs	r2, #2
 8001fde:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001fe6:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001fec:	4b09      	ldr	r3, [pc, #36]	; (8002014 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001ff2:	4b08      	ldr	r3, [pc, #32]	; (8002014 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001ffe:	4805      	ldr	r0, [pc, #20]	; (8002014 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002000:	f001 faaf 	bl	8003562 <HAL_PCD_Init>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800200a:	f000 f965 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000eb4 	.word	0x20000eb4

08002018 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08c      	sub	sp, #48	; 0x30
 800201c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201e:	f107 031c 	add.w	r3, r7, #28
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	605a      	str	r2, [r3, #4]
 8002028:	609a      	str	r2, [r3, #8]
 800202a:	60da      	str	r2, [r3, #12]
 800202c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800202e:	4b47      	ldr	r3, [pc, #284]	; (800214c <MX_GPIO_Init+0x134>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	4a46      	ldr	r2, [pc, #280]	; (800214c <MX_GPIO_Init+0x134>)
 8002034:	f043 0304 	orr.w	r3, r3, #4
 8002038:	6313      	str	r3, [r2, #48]	; 0x30
 800203a:	4b44      	ldr	r3, [pc, #272]	; (800214c <MX_GPIO_Init+0x134>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f003 0304 	and.w	r3, r3, #4
 8002042:	61bb      	str	r3, [r7, #24]
 8002044:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002046:	4b41      	ldr	r3, [pc, #260]	; (800214c <MX_GPIO_Init+0x134>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	4a40      	ldr	r2, [pc, #256]	; (800214c <MX_GPIO_Init+0x134>)
 800204c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002050:	6313      	str	r3, [r2, #48]	; 0x30
 8002052:	4b3e      	ldr	r3, [pc, #248]	; (800214c <MX_GPIO_Init+0x134>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800205a:	617b      	str	r3, [r7, #20]
 800205c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800205e:	4b3b      	ldr	r3, [pc, #236]	; (800214c <MX_GPIO_Init+0x134>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	4a3a      	ldr	r2, [pc, #232]	; (800214c <MX_GPIO_Init+0x134>)
 8002064:	f043 0301 	orr.w	r3, r3, #1
 8002068:	6313      	str	r3, [r2, #48]	; 0x30
 800206a:	4b38      	ldr	r3, [pc, #224]	; (800214c <MX_GPIO_Init+0x134>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002076:	4b35      	ldr	r3, [pc, #212]	; (800214c <MX_GPIO_Init+0x134>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	4a34      	ldr	r2, [pc, #208]	; (800214c <MX_GPIO_Init+0x134>)
 800207c:	f043 0302 	orr.w	r3, r3, #2
 8002080:	6313      	str	r3, [r2, #48]	; 0x30
 8002082:	4b32      	ldr	r3, [pc, #200]	; (800214c <MX_GPIO_Init+0x134>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800208e:	4b2f      	ldr	r3, [pc, #188]	; (800214c <MX_GPIO_Init+0x134>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	4a2e      	ldr	r2, [pc, #184]	; (800214c <MX_GPIO_Init+0x134>)
 8002094:	f043 0308 	orr.w	r3, r3, #8
 8002098:	6313      	str	r3, [r2, #48]	; 0x30
 800209a:	4b2c      	ldr	r3, [pc, #176]	; (800214c <MX_GPIO_Init+0x134>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	60bb      	str	r3, [r7, #8]
 80020a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80020a6:	4b29      	ldr	r3, [pc, #164]	; (800214c <MX_GPIO_Init+0x134>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	4a28      	ldr	r2, [pc, #160]	; (800214c <MX_GPIO_Init+0x134>)
 80020ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020b0:	6313      	str	r3, [r2, #48]	; 0x30
 80020b2:	4b26      	ldr	r3, [pc, #152]	; (800214c <MX_GPIO_Init+0x134>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ba:	607b      	str	r3, [r7, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80020be:	2200      	movs	r2, #0
 80020c0:	f244 0181 	movw	r1, #16513	; 0x4081
 80020c4:	4822      	ldr	r0, [pc, #136]	; (8002150 <MX_GPIO_Init+0x138>)
 80020c6:	f001 fa33 	bl	8003530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80020ca:	2200      	movs	r2, #0
 80020cc:	2140      	movs	r1, #64	; 0x40
 80020ce:	4821      	ldr	r0, [pc, #132]	; (8002154 <MX_GPIO_Init+0x13c>)
 80020d0:	f001 fa2e 	bl	8003530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80020d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80020de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80020e4:	f107 031c 	add.w	r3, r7, #28
 80020e8:	4619      	mov	r1, r3
 80020ea:	481b      	ldr	r0, [pc, #108]	; (8002158 <MX_GPIO_Init+0x140>)
 80020ec:	f001 f874 	bl	80031d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80020f0:	f244 0381 	movw	r3, #16513	; 0x4081
 80020f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f6:	2301      	movs	r3, #1
 80020f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fa:	2300      	movs	r3, #0
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fe:	2300      	movs	r3, #0
 8002100:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002102:	f107 031c 	add.w	r3, r7, #28
 8002106:	4619      	mov	r1, r3
 8002108:	4811      	ldr	r0, [pc, #68]	; (8002150 <MX_GPIO_Init+0x138>)
 800210a:	f001 f865 	bl	80031d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800210e:	2340      	movs	r3, #64	; 0x40
 8002110:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002112:	2301      	movs	r3, #1
 8002114:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002116:	2300      	movs	r3, #0
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211a:	2300      	movs	r3, #0
 800211c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800211e:	f107 031c 	add.w	r3, r7, #28
 8002122:	4619      	mov	r1, r3
 8002124:	480b      	ldr	r0, [pc, #44]	; (8002154 <MX_GPIO_Init+0x13c>)
 8002126:	f001 f857 	bl	80031d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800212a:	2380      	movs	r3, #128	; 0x80
 800212c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800212e:	2300      	movs	r3, #0
 8002130:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002136:	f107 031c 	add.w	r3, r7, #28
 800213a:	4619      	mov	r1, r3
 800213c:	4805      	ldr	r0, [pc, #20]	; (8002154 <MX_GPIO_Init+0x13c>)
 800213e:	f001 f84b 	bl	80031d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002142:	bf00      	nop
 8002144:	3730      	adds	r7, #48	; 0x30
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40023800 	.word	0x40023800
 8002150:	40020400 	.word	0x40020400
 8002154:	40021800 	.word	0x40021800
 8002158:	40020800 	.word	0x40020800

0800215c <startReceiveInt>:

/* USER CODE BEGIN 4 */
void startReceiveInt( void )
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0

	rxInProgress = true;
 8002160:	4b0d      	ldr	r3, [pc, #52]	; (8002198 <startReceiveInt+0x3c>)
 8002162:	2201      	movs	r2, #1
 8002164:	701a      	strb	r2, [r3, #0]
	USART2->CR3 |= USART_CR3_EIE;	//enable error interrupts
 8002166:	4b0d      	ldr	r3, [pc, #52]	; (800219c <startReceiveInt+0x40>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	4a0c      	ldr	r2, [pc, #48]	; (800219c <startReceiveInt+0x40>)
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	6093      	str	r3, [r2, #8]
	USART2->CR1 |= (USART_CR1_UE | USART_CR1_RXNEIE);
 8002172:	4b0a      	ldr	r3, [pc, #40]	; (800219c <startReceiveInt+0x40>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a09      	ldr	r2, [pc, #36]	; (800219c <startReceiveInt+0x40>)
 8002178:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800217c:	6013      	str	r3, [r2, #0]
	//all 4 bits are for preemption priority -
	NVIC_SetPriority(USART2_IRQn, 6);
 800217e:	2106      	movs	r1, #6
 8002180:	2026      	movs	r0, #38	; 0x26
 8002182:	f7ff fd49 	bl	8001c18 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn);
 8002186:	2026      	movs	r0, #38	; 0x26
 8002188:	f7ff fd28 	bl	8001bdc <__NVIC_EnableIRQ>
	SEGGER_SYSVIEW_PrintfHost("recv");
 800218c:	4804      	ldr	r0, [pc, #16]	; (80021a0 <startReceiveInt+0x44>)
 800218e:	f7ff fc2b 	bl	80019e8 <SEGGER_SYSVIEW_PrintfHost>
}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	200013cc 	.word	0x200013cc
 800219c:	40004400 	.word	0x40004400
 80021a0:	08009474 	.word	0x08009474

080021a4 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  //SEGGER_SYSVIEW_PrintfHost("isr");
  /* USER CODE END USART2_IRQn 0 */

  /* USER CODE BEGIN USART2_IRQn 1 */
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 80021aa:	2300      	movs	r3, #0
 80021ac:	607b      	str	r3, [r7, #4]
	SEGGER_SYSVIEW_RecordEnterISR();
 80021ae:	f7ff fad7 	bl	8001760 <SEGGER_SYSVIEW_RecordEnterISR>

	//first check for errors
	if(	USART2->ISR & (	USART_ISR_ORE_Msk |
 80021b2:	4b19      	ldr	r3, [pc, #100]	; (8002218 <USART2_IRQHandler+0x74>)
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d005      	beq.n	80021ca <USART2_IRQHandler+0x26>
						USART_ISR_NE_Msk |
						USART_ISR_FE_Msk |
						USART_ISR_PE_Msk ))
	{
		//clear error flags
		USART2->ICR |= (USART_ICR_FECF |
 80021be:	4b16      	ldr	r3, [pc, #88]	; (8002218 <USART2_IRQHandler+0x74>)
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	4a15      	ldr	r2, [pc, #84]	; (8002218 <USART2_IRQHandler+0x74>)
 80021c4:	f043 030f 	orr.w	r3, r3, #15
 80021c8:	6213      	str	r3, [r2, #32]
						USART_ICR_PECF |
						USART_ICR_NCF |
						USART_ICR_ORECF);
	}

	if(	USART2->ISR & USART_ISR_RXNE_Msk)
 80021ca:	4b13      	ldr	r3, [pc, #76]	; (8002218 <USART2_IRQHandler+0x74>)
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	f003 0320 	and.w	r3, r3, #32
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00e      	beq.n	80021f4 <USART2_IRQHandler+0x50>
	{
		//read the data register unconditionally to clear
		//the receive not empty interrupt if no reception is
		//in progress
		uint8_t tempVal = (uint8_t) USART2->RDR;
 80021d6:	4b10      	ldr	r3, [pc, #64]	; (8002218 <USART2_IRQHandler+0x74>)
 80021d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	70fb      	strb	r3, [r7, #3]

		if(rxInProgress)
 80021de:	4b0f      	ldr	r3, [pc, #60]	; (800221c <USART2_IRQHandler+0x78>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d006      	beq.n	80021f4 <USART2_IRQHandler+0x50>
		{
			xQueueSendFromISR(uart2_BytesReceivedHandle, &tempVal, &xHigherPriorityTaskWoken);
 80021e6:	4b0e      	ldr	r3, [pc, #56]	; (8002220 <USART2_IRQHandler+0x7c>)
 80021e8:	6818      	ldr	r0, [r3, #0]
 80021ea:	1d3a      	adds	r2, r7, #4
 80021ec:	1cf9      	adds	r1, r7, #3
 80021ee:	2300      	movs	r3, #0
 80021f0:	f004 fd34 	bl	8006c5c <xQueueGenericSendFromISR>
			//SEGGER_SYSVIEW_PrintfHost(&tempVal);
		}
	}
	SEGGER_SYSVIEW_RecordExitISR();
 80021f4:	f7ff faf6 	bl	80017e4 <SEGGER_SYSVIEW_RecordExitISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d007      	beq.n	800220e <USART2_IRQHandler+0x6a>
 80021fe:	4b09      	ldr	r3, [pc, #36]	; (8002224 <USART2_IRQHandler+0x80>)
 8002200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	f3bf 8f4f 	dsb	sy
 800220a:	f3bf 8f6f 	isb	sy
  /* USER CODE END USART2_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40004400 	.word	0x40004400
 800221c:	200013cc 	.word	0x200013cc
 8002220:	200013c4 	.word	0x200013c4
 8002224:	e000ed04 	.word	0xe000ed04

08002228 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	//SEGGER_SYSVIEW_PrintfHost("default");
    osDelay(1);
 8002230:	2001      	movs	r0, #1
 8002232:	f004 f845 	bl	80062c0 <osDelay>
 8002236:	e7fb      	b.n	8002230 <StartDefaultTask+0x8>

08002238 <uartPrintOutTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uartPrintOutTask */
void uartPrintOutTask(void *argument)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uartPrintOutTask */
  /* Infinite loop */
  SEGGER_SYSVIEW_PrintfHost("printouttask init");
 8002240:	480c      	ldr	r0, [pc, #48]	; (8002274 <uartPrintOutTask+0x3c>)
 8002242:	f7ff fbd1 	bl	80019e8 <SEGGER_SYSVIEW_PrintfHost>
  char nextByte;
  //assert_param(nextBytes != NULL);
  //MX_USART2_UART_Init();
  //SEGGER_SYSVIEW_PrintfHost("call startreceiveint");
  startReceiveInt();
 8002246:	f7ff ff89 	bl	800215c <startReceiveInt>
  SEGGER_SYSVIEW_PrintfHost("return startreceiveint");
 800224a:	480b      	ldr	r0, [pc, #44]	; (8002278 <uartPrintOutTask+0x40>)
 800224c:	f7ff fbcc 	bl	80019e8 <SEGGER_SYSVIEW_PrintfHost>
  for(;;)
  {
	SEGGER_SYSVIEW_PrintfHost("printouttask");
 8002250:	480a      	ldr	r0, [pc, #40]	; (800227c <uartPrintOutTask+0x44>)
 8002252:	f7ff fbc9 	bl	80019e8 <SEGGER_SYSVIEW_PrintfHost>
    xQueueReceive(uart2_BytesReceivedHandle, &nextByte, portMAX_DELAY);
 8002256:	4b0a      	ldr	r3, [pc, #40]	; (8002280 <uartPrintOutTask+0x48>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f107 010f 	add.w	r1, r7, #15
 800225e:	f04f 32ff 	mov.w	r2, #4294967295
 8002262:	4618      	mov	r0, r3
 8002264:	f004 fd9a 	bl	8006d9c <xQueueReceive>
    SEGGER_SYSVIEW_PrintfHost(&nextByte);
 8002268:	f107 030f 	add.w	r3, r7, #15
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff fbbb 	bl	80019e8 <SEGGER_SYSVIEW_PrintfHost>
	SEGGER_SYSVIEW_PrintfHost("printouttask");
 8002272:	e7ed      	b.n	8002250 <uartPrintOutTask+0x18>
 8002274:	0800947c 	.word	0x0800947c
 8002278:	08009490 	.word	0x08009490
 800227c:	080094a8 	.word	0x080094a8
 8002280:	200013c4 	.word	0x200013c4

08002284 <sendTimerEntry>:
  /* USER CODE END uartPrintOutTask */
}

/* sendTimerEntry function */
void sendTimerEntry(void *argument)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sendTimerEntry */
	//SEGGER_SYSVIEW_PrintfHost("timer");
	  SEGGER_SYSVIEW_PrintfHost("timer sender");
 800228c:	4806      	ldr	r0, [pc, #24]	; (80022a8 <sendTimerEntry+0x24>)
 800228e:	f7ff fbab 	bl	80019e8 <SEGGER_SYSVIEW_PrintfHost>
	  HAL_UART_Transmit(&huart4, uart4Msg, sizeof(uart4Msg), 100);
 8002292:	2364      	movs	r3, #100	; 0x64
 8002294:	2201      	movs	r2, #1
 8002296:	4905      	ldr	r1, [pc, #20]	; (80022ac <sendTimerEntry+0x28>)
 8002298:	4805      	ldr	r0, [pc, #20]	; (80022b0 <sendTimerEntry+0x2c>)
 800229a:	f002 ff67 	bl	800516c <HAL_UART_Transmit>
  /* USER CODE END sendTimerEntry */
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	080094b8 	.word	0x080094b8
 80022ac:	08009578 	.word	0x08009578
 80022b0:	20000d1c 	.word	0x20000d1c

080022b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a04      	ldr	r2, [pc, #16]	; (80022d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d101      	bne.n	80022ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80022c6:	f000 fb3b 	bl	8002940 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40001000 	.word	0x40001000

080022d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022dc:	b672      	cpsid	i
}
 80022de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022e0:	e7fe      	b.n	80022e0 <Error_Handler+0x8>
	...

080022e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80022ea:	4b11      	ldr	r3, [pc, #68]	; (8002330 <HAL_MspInit+0x4c>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	4a10      	ldr	r2, [pc, #64]	; (8002330 <HAL_MspInit+0x4c>)
 80022f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f4:	6413      	str	r3, [r2, #64]	; 0x40
 80022f6:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <HAL_MspInit+0x4c>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fe:	607b      	str	r3, [r7, #4]
 8002300:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002302:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <HAL_MspInit+0x4c>)
 8002304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002306:	4a0a      	ldr	r2, [pc, #40]	; (8002330 <HAL_MspInit+0x4c>)
 8002308:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800230c:	6453      	str	r3, [r2, #68]	; 0x44
 800230e:	4b08      	ldr	r3, [pc, #32]	; (8002330 <HAL_MspInit+0x4c>)
 8002310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002316:	603b      	str	r3, [r7, #0]
 8002318:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800231a:	2200      	movs	r2, #0
 800231c:	210f      	movs	r1, #15
 800231e:	f06f 0001 	mvn.w	r0, #1
 8002322:	f000 fc09 	bl	8002b38 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40023800 	.word	0x40023800

08002334 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08e      	sub	sp, #56	; 0x38
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a4e      	ldr	r2, [pc, #312]	; (800248c <HAL_ETH_MspInit+0x158>)
 8002352:	4293      	cmp	r3, r2
 8002354:	f040 8096 	bne.w	8002484 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002358:	4b4d      	ldr	r3, [pc, #308]	; (8002490 <HAL_ETH_MspInit+0x15c>)
 800235a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235c:	4a4c      	ldr	r2, [pc, #304]	; (8002490 <HAL_ETH_MspInit+0x15c>)
 800235e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002362:	6313      	str	r3, [r2, #48]	; 0x30
 8002364:	4b4a      	ldr	r3, [pc, #296]	; (8002490 <HAL_ETH_MspInit+0x15c>)
 8002366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236c:	623b      	str	r3, [r7, #32]
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	4b47      	ldr	r3, [pc, #284]	; (8002490 <HAL_ETH_MspInit+0x15c>)
 8002372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002374:	4a46      	ldr	r2, [pc, #280]	; (8002490 <HAL_ETH_MspInit+0x15c>)
 8002376:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800237a:	6313      	str	r3, [r2, #48]	; 0x30
 800237c:	4b44      	ldr	r3, [pc, #272]	; (8002490 <HAL_ETH_MspInit+0x15c>)
 800237e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002380:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002384:	61fb      	str	r3, [r7, #28]
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	4b41      	ldr	r3, [pc, #260]	; (8002490 <HAL_ETH_MspInit+0x15c>)
 800238a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238c:	4a40      	ldr	r2, [pc, #256]	; (8002490 <HAL_ETH_MspInit+0x15c>)
 800238e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002392:	6313      	str	r3, [r2, #48]	; 0x30
 8002394:	4b3e      	ldr	r3, [pc, #248]	; (8002490 <HAL_ETH_MspInit+0x15c>)
 8002396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002398:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800239c:	61bb      	str	r3, [r7, #24]
 800239e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023a0:	4b3b      	ldr	r3, [pc, #236]	; (8002490 <HAL_ETH_MspInit+0x15c>)
 80023a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a4:	4a3a      	ldr	r2, [pc, #232]	; (8002490 <HAL_ETH_MspInit+0x15c>)
 80023a6:	f043 0304 	orr.w	r3, r3, #4
 80023aa:	6313      	str	r3, [r2, #48]	; 0x30
 80023ac:	4b38      	ldr	r3, [pc, #224]	; (8002490 <HAL_ETH_MspInit+0x15c>)
 80023ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	617b      	str	r3, [r7, #20]
 80023b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b8:	4b35      	ldr	r3, [pc, #212]	; (8002490 <HAL_ETH_MspInit+0x15c>)
 80023ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023bc:	4a34      	ldr	r2, [pc, #208]	; (8002490 <HAL_ETH_MspInit+0x15c>)
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	6313      	str	r3, [r2, #48]	; 0x30
 80023c4:	4b32      	ldr	r3, [pc, #200]	; (8002490 <HAL_ETH_MspInit+0x15c>)
 80023c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	613b      	str	r3, [r7, #16]
 80023ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023d0:	4b2f      	ldr	r3, [pc, #188]	; (8002490 <HAL_ETH_MspInit+0x15c>)
 80023d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d4:	4a2e      	ldr	r2, [pc, #184]	; (8002490 <HAL_ETH_MspInit+0x15c>)
 80023d6:	f043 0302 	orr.w	r3, r3, #2
 80023da:	6313      	str	r3, [r2, #48]	; 0x30
 80023dc:	4b2c      	ldr	r3, [pc, #176]	; (8002490 <HAL_ETH_MspInit+0x15c>)
 80023de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80023e8:	4b29      	ldr	r3, [pc, #164]	; (8002490 <HAL_ETH_MspInit+0x15c>)
 80023ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ec:	4a28      	ldr	r2, [pc, #160]	; (8002490 <HAL_ETH_MspInit+0x15c>)
 80023ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023f2:	6313      	str	r3, [r2, #48]	; 0x30
 80023f4:	4b26      	ldr	r3, [pc, #152]	; (8002490 <HAL_ETH_MspInit+0x15c>)
 80023f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002400:	2332      	movs	r3, #50	; 0x32
 8002402:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002404:	2302      	movs	r3, #2
 8002406:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002408:	2300      	movs	r3, #0
 800240a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800240c:	2303      	movs	r3, #3
 800240e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002410:	230b      	movs	r3, #11
 8002412:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002418:	4619      	mov	r1, r3
 800241a:	481e      	ldr	r0, [pc, #120]	; (8002494 <HAL_ETH_MspInit+0x160>)
 800241c:	f000 fedc 	bl	80031d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002420:	2386      	movs	r3, #134	; 0x86
 8002422:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002424:	2302      	movs	r3, #2
 8002426:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002428:	2300      	movs	r3, #0
 800242a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800242c:	2303      	movs	r3, #3
 800242e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002430:	230b      	movs	r3, #11
 8002432:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002438:	4619      	mov	r1, r3
 800243a:	4817      	ldr	r0, [pc, #92]	; (8002498 <HAL_ETH_MspInit+0x164>)
 800243c:	f000 fecc 	bl	80031d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002440:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002446:	2302      	movs	r3, #2
 8002448:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244a:	2300      	movs	r3, #0
 800244c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800244e:	2303      	movs	r3, #3
 8002450:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002452:	230b      	movs	r3, #11
 8002454:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800245a:	4619      	mov	r1, r3
 800245c:	480f      	ldr	r0, [pc, #60]	; (800249c <HAL_ETH_MspInit+0x168>)
 800245e:	f000 febb 	bl	80031d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002462:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002466:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002468:	2302      	movs	r3, #2
 800246a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246c:	2300      	movs	r3, #0
 800246e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002470:	2303      	movs	r3, #3
 8002472:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002474:	230b      	movs	r3, #11
 8002476:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800247c:	4619      	mov	r1, r3
 800247e:	4808      	ldr	r0, [pc, #32]	; (80024a0 <HAL_ETH_MspInit+0x16c>)
 8002480:	f000 feaa 	bl	80031d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002484:	bf00      	nop
 8002486:	3738      	adds	r7, #56	; 0x38
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40028000 	.word	0x40028000
 8002490:	40023800 	.word	0x40023800
 8002494:	40020800 	.word	0x40020800
 8002498:	40020000 	.word	0x40020000
 800249c:	40020400 	.word	0x40020400
 80024a0:	40021800 	.word	0x40021800

080024a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b0b2      	sub	sp, #200	; 0xc8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]
 80024ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024c0:	2290      	movs	r2, #144	; 0x90
 80024c2:	2100      	movs	r1, #0
 80024c4:	4618      	mov	r0, r3
 80024c6:	f006 fe91 	bl	80091ec <memset>
  if(huart->Instance==UART4)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a68      	ldr	r2, [pc, #416]	; (8002670 <HAL_UART_MspInit+0x1cc>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d13d      	bne.n	8002550 <HAL_UART_MspInit+0xac>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80024d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80024da:	2300      	movs	r3, #0
 80024dc:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024e2:	4618      	mov	r0, r3
 80024e4:	f001 feec 	bl	80042c0 <HAL_RCCEx_PeriphCLKConfig>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80024ee:	f7ff fef3 	bl	80022d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80024f2:	4b60      	ldr	r3, [pc, #384]	; (8002674 <HAL_UART_MspInit+0x1d0>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	4a5f      	ldr	r2, [pc, #380]	; (8002674 <HAL_UART_MspInit+0x1d0>)
 80024f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80024fc:	6413      	str	r3, [r2, #64]	; 0x40
 80024fe:	4b5d      	ldr	r3, [pc, #372]	; (8002674 <HAL_UART_MspInit+0x1d0>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002506:	623b      	str	r3, [r7, #32]
 8002508:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800250a:	4b5a      	ldr	r3, [pc, #360]	; (8002674 <HAL_UART_MspInit+0x1d0>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	4a59      	ldr	r2, [pc, #356]	; (8002674 <HAL_UART_MspInit+0x1d0>)
 8002510:	f043 0304 	orr.w	r3, r3, #4
 8002514:	6313      	str	r3, [r2, #48]	; 0x30
 8002516:	4b57      	ldr	r3, [pc, #348]	; (8002674 <HAL_UART_MspInit+0x1d0>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	f003 0304 	and.w	r3, r3, #4
 800251e:	61fb      	str	r3, [r7, #28]
 8002520:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002522:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002526:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252a:	2302      	movs	r3, #2
 800252c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002536:	2303      	movs	r3, #3
 8002538:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800253c:	2308      	movs	r3, #8
 800253e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002542:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002546:	4619      	mov	r1, r3
 8002548:	484b      	ldr	r0, [pc, #300]	; (8002678 <HAL_UART_MspInit+0x1d4>)
 800254a:	f000 fe45 	bl	80031d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800254e:	e08a      	b.n	8002666 <HAL_UART_MspInit+0x1c2>
  else if(huart->Instance==USART2)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a49      	ldr	r2, [pc, #292]	; (800267c <HAL_UART_MspInit+0x1d8>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d143      	bne.n	80025e2 <HAL_UART_MspInit+0x13e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800255a:	2380      	movs	r3, #128	; 0x80
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800255e:	2300      	movs	r3, #0
 8002560:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002566:	4618      	mov	r0, r3
 8002568:	f001 feaa 	bl	80042c0 <HAL_RCCEx_PeriphCLKConfig>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8002572:	f7ff feb1 	bl	80022d8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002576:	4b3f      	ldr	r3, [pc, #252]	; (8002674 <HAL_UART_MspInit+0x1d0>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	4a3e      	ldr	r2, [pc, #248]	; (8002674 <HAL_UART_MspInit+0x1d0>)
 800257c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002580:	6413      	str	r3, [r2, #64]	; 0x40
 8002582:	4b3c      	ldr	r3, [pc, #240]	; (8002674 <HAL_UART_MspInit+0x1d0>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258a:	61bb      	str	r3, [r7, #24]
 800258c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800258e:	4b39      	ldr	r3, [pc, #228]	; (8002674 <HAL_UART_MspInit+0x1d0>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	4a38      	ldr	r2, [pc, #224]	; (8002674 <HAL_UART_MspInit+0x1d0>)
 8002594:	f043 0308 	orr.w	r3, r3, #8
 8002598:	6313      	str	r3, [r2, #48]	; 0x30
 800259a:	4b36      	ldr	r3, [pc, #216]	; (8002674 <HAL_UART_MspInit+0x1d0>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	f003 0308 	and.w	r3, r3, #8
 80025a2:	617b      	str	r3, [r7, #20]
 80025a4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80025a6:	2360      	movs	r3, #96	; 0x60
 80025a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ac:	2302      	movs	r3, #2
 80025ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b2:	2300      	movs	r3, #0
 80025b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b8:	2303      	movs	r3, #3
 80025ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025be:	2307      	movs	r3, #7
 80025c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025c4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80025c8:	4619      	mov	r1, r3
 80025ca:	482d      	ldr	r0, [pc, #180]	; (8002680 <HAL_UART_MspInit+0x1dc>)
 80025cc:	f000 fe04 	bl	80031d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 8, 0);
 80025d0:	2200      	movs	r2, #0
 80025d2:	2108      	movs	r1, #8
 80025d4:	2026      	movs	r0, #38	; 0x26
 80025d6:	f000 faaf 	bl	8002b38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80025da:	2026      	movs	r0, #38	; 0x26
 80025dc:	f000 fac8 	bl	8002b70 <HAL_NVIC_EnableIRQ>
}
 80025e0:	e041      	b.n	8002666 <HAL_UART_MspInit+0x1c2>
  else if(huart->Instance==USART3)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a27      	ldr	r2, [pc, #156]	; (8002684 <HAL_UART_MspInit+0x1e0>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d13c      	bne.n	8002666 <HAL_UART_MspInit+0x1c2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80025ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025f0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80025f2:	2300      	movs	r3, #0
 80025f4:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025fa:	4618      	mov	r0, r3
 80025fc:	f001 fe60 	bl	80042c0 <HAL_RCCEx_PeriphCLKConfig>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_UART_MspInit+0x166>
      Error_Handler();
 8002606:	f7ff fe67 	bl	80022d8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800260a:	4b1a      	ldr	r3, [pc, #104]	; (8002674 <HAL_UART_MspInit+0x1d0>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	4a19      	ldr	r2, [pc, #100]	; (8002674 <HAL_UART_MspInit+0x1d0>)
 8002610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002614:	6413      	str	r3, [r2, #64]	; 0x40
 8002616:	4b17      	ldr	r3, [pc, #92]	; (8002674 <HAL_UART_MspInit+0x1d0>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800261e:	613b      	str	r3, [r7, #16]
 8002620:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002622:	4b14      	ldr	r3, [pc, #80]	; (8002674 <HAL_UART_MspInit+0x1d0>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	4a13      	ldr	r2, [pc, #76]	; (8002674 <HAL_UART_MspInit+0x1d0>)
 8002628:	f043 0308 	orr.w	r3, r3, #8
 800262c:	6313      	str	r3, [r2, #48]	; 0x30
 800262e:	4b11      	ldr	r3, [pc, #68]	; (8002674 <HAL_UART_MspInit+0x1d0>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800263a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800263e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002642:	2302      	movs	r3, #2
 8002644:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002648:	2300      	movs	r3, #0
 800264a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800264e:	2303      	movs	r3, #3
 8002650:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002654:	2307      	movs	r3, #7
 8002656:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800265a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800265e:	4619      	mov	r1, r3
 8002660:	4807      	ldr	r0, [pc, #28]	; (8002680 <HAL_UART_MspInit+0x1dc>)
 8002662:	f000 fdb9 	bl	80031d8 <HAL_GPIO_Init>
}
 8002666:	bf00      	nop
 8002668:	37c8      	adds	r7, #200	; 0xc8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40004c00 	.word	0x40004c00
 8002674:	40023800 	.word	0x40023800
 8002678:	40020800 	.word	0x40020800
 800267c:	40004400 	.word	0x40004400
 8002680:	40020c00 	.word	0x40020c00
 8002684:	40004800 	.word	0x40004800

08002688 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b0ae      	sub	sp, #184	; 0xb8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002690:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	605a      	str	r2, [r3, #4]
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	60da      	str	r2, [r3, #12]
 800269e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026a0:	f107 0314 	add.w	r3, r7, #20
 80026a4:	2290      	movs	r2, #144	; 0x90
 80026a6:	2100      	movs	r1, #0
 80026a8:	4618      	mov	r0, r3
 80026aa:	f006 fd9f 	bl	80091ec <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026b6:	d159      	bne.n	800276c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80026b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80026bc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80026be:	2300      	movs	r3, #0
 80026c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026c4:	f107 0314 	add.w	r3, r7, #20
 80026c8:	4618      	mov	r0, r3
 80026ca:	f001 fdf9 	bl	80042c0 <HAL_RCCEx_PeriphCLKConfig>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80026d4:	f7ff fe00 	bl	80022d8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d8:	4b26      	ldr	r3, [pc, #152]	; (8002774 <HAL_PCD_MspInit+0xec>)
 80026da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026dc:	4a25      	ldr	r2, [pc, #148]	; (8002774 <HAL_PCD_MspInit+0xec>)
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	6313      	str	r3, [r2, #48]	; 0x30
 80026e4:	4b23      	ldr	r3, [pc, #140]	; (8002774 <HAL_PCD_MspInit+0xec>)
 80026e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	613b      	str	r3, [r7, #16]
 80026ee:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80026f0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80026f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f8:	2302      	movs	r3, #2
 80026fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fe:	2300      	movs	r3, #0
 8002700:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002704:	2303      	movs	r3, #3
 8002706:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800270a:	230a      	movs	r3, #10
 800270c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002710:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002714:	4619      	mov	r1, r3
 8002716:	4818      	ldr	r0, [pc, #96]	; (8002778 <HAL_PCD_MspInit+0xf0>)
 8002718:	f000 fd5e 	bl	80031d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800271c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002720:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002724:	2300      	movs	r3, #0
 8002726:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272a:	2300      	movs	r3, #0
 800272c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002730:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002734:	4619      	mov	r1, r3
 8002736:	4810      	ldr	r0, [pc, #64]	; (8002778 <HAL_PCD_MspInit+0xf0>)
 8002738:	f000 fd4e 	bl	80031d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800273c:	4b0d      	ldr	r3, [pc, #52]	; (8002774 <HAL_PCD_MspInit+0xec>)
 800273e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002740:	4a0c      	ldr	r2, [pc, #48]	; (8002774 <HAL_PCD_MspInit+0xec>)
 8002742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002746:	6353      	str	r3, [r2, #52]	; 0x34
 8002748:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <HAL_PCD_MspInit+0xec>)
 800274a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800274c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	4b07      	ldr	r3, [pc, #28]	; (8002774 <HAL_PCD_MspInit+0xec>)
 8002756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002758:	4a06      	ldr	r2, [pc, #24]	; (8002774 <HAL_PCD_MspInit+0xec>)
 800275a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800275e:	6453      	str	r3, [r2, #68]	; 0x44
 8002760:	4b04      	ldr	r3, [pc, #16]	; (8002774 <HAL_PCD_MspInit+0xec>)
 8002762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002768:	60bb      	str	r3, [r7, #8]
 800276a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800276c:	bf00      	nop
 800276e:	37b8      	adds	r7, #184	; 0xb8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40023800 	.word	0x40023800
 8002778:	40020000 	.word	0x40020000

0800277c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08e      	sub	sp, #56	; 0x38
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002784:	2300      	movs	r3, #0
 8002786:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800278c:	4b33      	ldr	r3, [pc, #204]	; (800285c <HAL_InitTick+0xe0>)
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	4a32      	ldr	r2, [pc, #200]	; (800285c <HAL_InitTick+0xe0>)
 8002792:	f043 0310 	orr.w	r3, r3, #16
 8002796:	6413      	str	r3, [r2, #64]	; 0x40
 8002798:	4b30      	ldr	r3, [pc, #192]	; (800285c <HAL_InitTick+0xe0>)
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	f003 0310 	and.w	r3, r3, #16
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80027a4:	f107 0210 	add.w	r2, r7, #16
 80027a8:	f107 0314 	add.w	r3, r7, #20
 80027ac:	4611      	mov	r1, r2
 80027ae:	4618      	mov	r0, r3
 80027b0:	f001 fd54 	bl	800425c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80027b4:	6a3b      	ldr	r3, [r7, #32]
 80027b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80027b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d103      	bne.n	80027c6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80027be:	f001 fd25 	bl	800420c <HAL_RCC_GetPCLK1Freq>
 80027c2:	6378      	str	r0, [r7, #52]	; 0x34
 80027c4:	e004      	b.n	80027d0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80027c6:	f001 fd21 	bl	800420c <HAL_RCC_GetPCLK1Freq>
 80027ca:	4603      	mov	r3, r0
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80027d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d2:	4a23      	ldr	r2, [pc, #140]	; (8002860 <HAL_InitTick+0xe4>)
 80027d4:	fba2 2303 	umull	r2, r3, r2, r3
 80027d8:	0c9b      	lsrs	r3, r3, #18
 80027da:	3b01      	subs	r3, #1
 80027dc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80027de:	4b21      	ldr	r3, [pc, #132]	; (8002864 <HAL_InitTick+0xe8>)
 80027e0:	4a21      	ldr	r2, [pc, #132]	; (8002868 <HAL_InitTick+0xec>)
 80027e2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80027e4:	4b1f      	ldr	r3, [pc, #124]	; (8002864 <HAL_InitTick+0xe8>)
 80027e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80027ea:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80027ec:	4a1d      	ldr	r2, [pc, #116]	; (8002864 <HAL_InitTick+0xe8>)
 80027ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80027f2:	4b1c      	ldr	r3, [pc, #112]	; (8002864 <HAL_InitTick+0xe8>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027f8:	4b1a      	ldr	r3, [pc, #104]	; (8002864 <HAL_InitTick+0xe8>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027fe:	4b19      	ldr	r3, [pc, #100]	; (8002864 <HAL_InitTick+0xe8>)
 8002800:	2200      	movs	r2, #0
 8002802:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002804:	4817      	ldr	r0, [pc, #92]	; (8002864 <HAL_InitTick+0xe8>)
 8002806:	f002 f983 	bl	8004b10 <HAL_TIM_Base_Init>
 800280a:	4603      	mov	r3, r0
 800280c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002810:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002814:	2b00      	cmp	r3, #0
 8002816:	d11b      	bne.n	8002850 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002818:	4812      	ldr	r0, [pc, #72]	; (8002864 <HAL_InitTick+0xe8>)
 800281a:	f002 f9db 	bl	8004bd4 <HAL_TIM_Base_Start_IT>
 800281e:	4603      	mov	r3, r0
 8002820:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002824:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002828:	2b00      	cmp	r3, #0
 800282a:	d111      	bne.n	8002850 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800282c:	2036      	movs	r0, #54	; 0x36
 800282e:	f000 f99f 	bl	8002b70 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b0f      	cmp	r3, #15
 8002836:	d808      	bhi.n	800284a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002838:	2200      	movs	r2, #0
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	2036      	movs	r0, #54	; 0x36
 800283e:	f000 f97b 	bl	8002b38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002842:	4a0a      	ldr	r2, [pc, #40]	; (800286c <HAL_InitTick+0xf0>)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6013      	str	r3, [r2, #0]
 8002848:	e002      	b.n	8002850 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002850:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002854:	4618      	mov	r0, r3
 8002856:	3738      	adds	r7, #56	; 0x38
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40023800 	.word	0x40023800
 8002860:	431bde83 	.word	0x431bde83
 8002864:	200013d8 	.word	0x200013d8
 8002868:	40001000 	.word	0x40001000
 800286c:	20000004 	.word	0x20000004

08002870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002874:	e7fe      	b.n	8002874 <NMI_Handler+0x4>

08002876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002876:	b480      	push	{r7}
 8002878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800287a:	e7fe      	b.n	800287a <HardFault_Handler+0x4>

0800287c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002880:	e7fe      	b.n	8002880 <MemManage_Handler+0x4>

08002882 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002882:	b480      	push	{r7}
 8002884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002886:	e7fe      	b.n	8002886 <BusFault_Handler+0x4>

08002888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800288c:	e7fe      	b.n	800288c <UsageFault_Handler+0x4>

0800288e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800288e:	b480      	push	{r7}
 8002890:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80028a0:	4802      	ldr	r0, [pc, #8]	; (80028ac <TIM6_DAC_IRQHandler+0x10>)
 80028a2:	f002 fa0f 	bl	8004cc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80028a6:	bf00      	nop
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	200013d8 	.word	0x200013d8

080028b0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028b4:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <SystemInit+0x20>)
 80028b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ba:	4a05      	ldr	r2, [pc, #20]	; (80028d0 <SystemInit+0x20>)
 80028bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028c4:	bf00      	nop
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80028d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800290c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028d8:	480d      	ldr	r0, [pc, #52]	; (8002910 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80028da:	490e      	ldr	r1, [pc, #56]	; (8002914 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80028dc:	4a0e      	ldr	r2, [pc, #56]	; (8002918 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028e0:	e002      	b.n	80028e8 <LoopCopyDataInit>

080028e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028e6:	3304      	adds	r3, #4

080028e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028ec:	d3f9      	bcc.n	80028e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ee:	4a0b      	ldr	r2, [pc, #44]	; (800291c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80028f0:	4c0b      	ldr	r4, [pc, #44]	; (8002920 <LoopFillZerobss+0x26>)
  movs r3, #0
 80028f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028f4:	e001      	b.n	80028fa <LoopFillZerobss>

080028f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028f8:	3204      	adds	r2, #4

080028fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028fc:	d3fb      	bcc.n	80028f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80028fe:	f7ff ffd7 	bl	80028b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002902:	f006 fcd1 	bl	80092a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002906:	f7ff f9b1 	bl	8001c6c <main>
  bx  lr    
 800290a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800290c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002914:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002918:	080095a4 	.word	0x080095a4
  ldr r2, =_sbss
 800291c:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8002920:	20005f48 	.word	0x20005f48

08002924 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002924:	e7fe      	b.n	8002924 <ADC_IRQHandler>

08002926 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800292a:	2003      	movs	r0, #3
 800292c:	f000 f8f9 	bl	8002b22 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002930:	200f      	movs	r0, #15
 8002932:	f7ff ff23 	bl	800277c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002936:	f7ff fcd5 	bl	80022e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	bd80      	pop	{r7, pc}

08002940 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002944:	4b06      	ldr	r3, [pc, #24]	; (8002960 <HAL_IncTick+0x20>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	461a      	mov	r2, r3
 800294a:	4b06      	ldr	r3, [pc, #24]	; (8002964 <HAL_IncTick+0x24>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4413      	add	r3, r2
 8002950:	4a04      	ldr	r2, [pc, #16]	; (8002964 <HAL_IncTick+0x24>)
 8002952:	6013      	str	r3, [r2, #0]
}
 8002954:	bf00      	nop
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	20000008 	.word	0x20000008
 8002964:	20001424 	.word	0x20001424

08002968 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  return uwTick;
 800296c:	4b03      	ldr	r3, [pc, #12]	; (800297c <HAL_GetTick+0x14>)
 800296e:	681b      	ldr	r3, [r3, #0]
}
 8002970:	4618      	mov	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	20001424 	.word	0x20001424

08002980 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002988:	f7ff ffee 	bl	8002968 <HAL_GetTick>
 800298c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002998:	d005      	beq.n	80029a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800299a:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <HAL_Delay+0x44>)
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	461a      	mov	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	4413      	add	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029a6:	bf00      	nop
 80029a8:	f7ff ffde 	bl	8002968 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d8f7      	bhi.n	80029a8 <HAL_Delay+0x28>
  {
  }
}
 80029b8:	bf00      	nop
 80029ba:	bf00      	nop
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	20000008 	.word	0x20000008

080029c8 <__NVIC_SetPriorityGrouping>:
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029d8:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <__NVIC_SetPriorityGrouping+0x40>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029e4:	4013      	ands	r3, r2
 80029e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80029f0:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <__NVIC_SetPriorityGrouping+0x44>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029f6:	4a04      	ldr	r2, [pc, #16]	; (8002a08 <__NVIC_SetPriorityGrouping+0x40>)
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	60d3      	str	r3, [r2, #12]
}
 80029fc:	bf00      	nop
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	e000ed00 	.word	0xe000ed00
 8002a0c:	05fa0000 	.word	0x05fa0000

08002a10 <__NVIC_GetPriorityGrouping>:
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a14:	4b04      	ldr	r3, [pc, #16]	; (8002a28 <__NVIC_GetPriorityGrouping+0x18>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	0a1b      	lsrs	r3, r3, #8
 8002a1a:	f003 0307 	and.w	r3, r3, #7
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	e000ed00 	.word	0xe000ed00

08002a2c <__NVIC_EnableIRQ>:
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	db0b      	blt.n	8002a56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a3e:	79fb      	ldrb	r3, [r7, #7]
 8002a40:	f003 021f 	and.w	r2, r3, #31
 8002a44:	4907      	ldr	r1, [pc, #28]	; (8002a64 <__NVIC_EnableIRQ+0x38>)
 8002a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4a:	095b      	lsrs	r3, r3, #5
 8002a4c:	2001      	movs	r0, #1
 8002a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	e000e100 	.word	0xe000e100

08002a68 <__NVIC_SetPriority>:
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	6039      	str	r1, [r7, #0]
 8002a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	db0a      	blt.n	8002a92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	490c      	ldr	r1, [pc, #48]	; (8002ab4 <__NVIC_SetPriority+0x4c>)
 8002a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a86:	0112      	lsls	r2, r2, #4
 8002a88:	b2d2      	uxtb	r2, r2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002a90:	e00a      	b.n	8002aa8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	4908      	ldr	r1, [pc, #32]	; (8002ab8 <__NVIC_SetPriority+0x50>)
 8002a98:	79fb      	ldrb	r3, [r7, #7]
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	3b04      	subs	r3, #4
 8002aa0:	0112      	lsls	r2, r2, #4
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	761a      	strb	r2, [r3, #24]
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	e000e100 	.word	0xe000e100
 8002ab8:	e000ed00 	.word	0xe000ed00

08002abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b089      	sub	sp, #36	; 0x24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f1c3 0307 	rsb	r3, r3, #7
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	bf28      	it	cs
 8002ada:	2304      	movcs	r3, #4
 8002adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	3304      	adds	r3, #4
 8002ae2:	2b06      	cmp	r3, #6
 8002ae4:	d902      	bls.n	8002aec <NVIC_EncodePriority+0x30>
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	3b03      	subs	r3, #3
 8002aea:	e000      	b.n	8002aee <NVIC_EncodePriority+0x32>
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af0:	f04f 32ff 	mov.w	r2, #4294967295
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	43da      	mvns	r2, r3
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	401a      	ands	r2, r3
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b04:	f04f 31ff 	mov.w	r1, #4294967295
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0e:	43d9      	mvns	r1, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b14:	4313      	orrs	r3, r2
         );
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3724      	adds	r7, #36	; 0x24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b082      	sub	sp, #8
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7ff ff4c 	bl	80029c8 <__NVIC_SetPriorityGrouping>
}
 8002b30:	bf00      	nop
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
 8002b44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b46:	2300      	movs	r3, #0
 8002b48:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b4a:	f7ff ff61 	bl	8002a10 <__NVIC_GetPriorityGrouping>
 8002b4e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	68b9      	ldr	r1, [r7, #8]
 8002b54:	6978      	ldr	r0, [r7, #20]
 8002b56:	f7ff ffb1 	bl	8002abc <NVIC_EncodePriority>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b60:	4611      	mov	r1, r2
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff ff80 	bl	8002a68 <__NVIC_SetPriority>
}
 8002b68:	bf00      	nop
 8002b6a:	3718      	adds	r7, #24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff ff54 	bl	8002a2c <__NVIC_EnableIRQ>
}
 8002b84:	bf00      	nop
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e06a      	b.n	8002c74 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d106      	bne.n	8002bb6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2223      	movs	r2, #35	; 0x23
 8002bac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f7ff fbbf 	bl	8002334 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bb6:	4b31      	ldr	r3, [pc, #196]	; (8002c7c <HAL_ETH_Init+0xf0>)
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bba:	4a30      	ldr	r2, [pc, #192]	; (8002c7c <HAL_ETH_Init+0xf0>)
 8002bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8002bc2:	4b2e      	ldr	r3, [pc, #184]	; (8002c7c <HAL_ETH_Init+0xf0>)
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bca:	60bb      	str	r3, [r7, #8]
 8002bcc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002bce:	4b2c      	ldr	r3, [pc, #176]	; (8002c80 <HAL_ETH_Init+0xf4>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	4a2b      	ldr	r2, [pc, #172]	; (8002c80 <HAL_ETH_Init+0xf4>)
 8002bd4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002bd8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002bda:	4b29      	ldr	r3, [pc, #164]	; (8002c80 <HAL_ETH_Init+0xf4>)
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	4927      	ldr	r1, [pc, #156]	; (8002c80 <HAL_ETH_Init+0xf4>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002be8:	4b25      	ldr	r3, [pc, #148]	; (8002c80 <HAL_ETH_Init+0xf4>)
 8002bea:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6812      	ldr	r2, [r2, #0]
 8002bfa:	f043 0301 	orr.w	r3, r3, #1
 8002bfe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002c02:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c04:	f7ff feb0 	bl	8002968 <HAL_GetTick>
 8002c08:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002c0a:	e011      	b.n	8002c30 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002c0c:	f7ff feac 	bl	8002968 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c1a:	d909      	bls.n	8002c30 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2204      	movs	r2, #4
 8002c20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	22e0      	movs	r2, #224	; 0xe0
 8002c28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e021      	b.n	8002c74 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1e4      	bne.n	8002c0c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f958 	bl	8002ef8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 f9ff 	bl	800304c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 fa55 	bl	80030fe <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	461a      	mov	r2, r3
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 f9bd 	bl	8002fdc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2210      	movs	r2, #16
 8002c6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	40013800 	.word	0x40013800

08002c84 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	4b51      	ldr	r3, [pc, #324]	; (8002de0 <ETH_SetMACConfig+0x15c>)
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	7c1b      	ldrb	r3, [r3, #16]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d102      	bne.n	8002cac <ETH_SetMACConfig+0x28>
 8002ca6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002caa:	e000      	b.n	8002cae <ETH_SetMACConfig+0x2a>
 8002cac:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	7c5b      	ldrb	r3, [r3, #17]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d102      	bne.n	8002cbc <ETH_SetMACConfig+0x38>
 8002cb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002cba:	e000      	b.n	8002cbe <ETH_SetMACConfig+0x3a>
 8002cbc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002cbe:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002cc4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	7fdb      	ldrb	r3, [r3, #31]
 8002cca:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002ccc:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002cd2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	7f92      	ldrb	r2, [r2, #30]
 8002cd8:	2a00      	cmp	r2, #0
 8002cda:	d102      	bne.n	8002ce2 <ETH_SetMACConfig+0x5e>
 8002cdc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ce0:	e000      	b.n	8002ce4 <ETH_SetMACConfig+0x60>
 8002ce2:	2200      	movs	r2, #0
                        macconf->Speed |
 8002ce4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	7f1b      	ldrb	r3, [r3, #28]
 8002cea:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002cec:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002cf2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	791b      	ldrb	r3, [r3, #4]
 8002cf8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002cfa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002d02:	2a00      	cmp	r2, #0
 8002d04:	d102      	bne.n	8002d0c <ETH_SetMACConfig+0x88>
 8002d06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d0a:	e000      	b.n	8002d0e <ETH_SetMACConfig+0x8a>
 8002d0c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002d0e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	7bdb      	ldrb	r3, [r3, #15]
 8002d14:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002d16:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002d1c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d24:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002d26:	4313      	orrs	r3, r2
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d3e:	2001      	movs	r0, #1
 8002d40:	f7ff fe1e 	bl	8002980 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d62:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002d6a:	2a00      	cmp	r2, #0
 8002d6c:	d101      	bne.n	8002d72 <ETH_SetMACConfig+0xee>
 8002d6e:	2280      	movs	r2, #128	; 0x80
 8002d70:	e000      	b.n	8002d74 <ETH_SetMACConfig+0xf0>
 8002d72:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002d74:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002d7a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002d82:	2a01      	cmp	r2, #1
 8002d84:	d101      	bne.n	8002d8a <ETH_SetMACConfig+0x106>
 8002d86:	2208      	movs	r2, #8
 8002d88:	e000      	b.n	8002d8c <ETH_SetMACConfig+0x108>
 8002d8a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002d8c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002d94:	2a01      	cmp	r2, #1
 8002d96:	d101      	bne.n	8002d9c <ETH_SetMACConfig+0x118>
 8002d98:	2204      	movs	r2, #4
 8002d9a:	e000      	b.n	8002d9e <ETH_SetMACConfig+0x11a>
 8002d9c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002d9e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002da6:	2a01      	cmp	r2, #1
 8002da8:	d101      	bne.n	8002dae <ETH_SetMACConfig+0x12a>
 8002daa:	2202      	movs	r2, #2
 8002dac:	e000      	b.n	8002db0 <ETH_SetMACConfig+0x12c>
 8002dae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002db0:	4313      	orrs	r3, r2
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002dc8:	2001      	movs	r0, #1
 8002dca:	f7ff fdd9 	bl	8002980 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	619a      	str	r2, [r3, #24]
}
 8002dd6:	bf00      	nop
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	ff20810f 	.word	0xff20810f

08002de4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	4b3d      	ldr	r3, [pc, #244]	; (8002ef4 <ETH_SetDMAConfig+0x110>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	7b1b      	ldrb	r3, [r3, #12]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d102      	bne.n	8002e10 <ETH_SetDMAConfig+0x2c>
 8002e0a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002e0e:	e000      	b.n	8002e12 <ETH_SetDMAConfig+0x2e>
 8002e10:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	7b5b      	ldrb	r3, [r3, #13]
 8002e16:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002e18:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	7f52      	ldrb	r2, [r2, #29]
 8002e1e:	2a00      	cmp	r2, #0
 8002e20:	d102      	bne.n	8002e28 <ETH_SetDMAConfig+0x44>
 8002e22:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e26:	e000      	b.n	8002e2a <ETH_SetDMAConfig+0x46>
 8002e28:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002e2a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	7b9b      	ldrb	r3, [r3, #14]
 8002e30:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002e32:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002e38:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	7f1b      	ldrb	r3, [r3, #28]
 8002e3e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002e40:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	7f9b      	ldrb	r3, [r3, #30]
 8002e46:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002e48:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002e4e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e56:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e68:	461a      	mov	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e7a:	2001      	movs	r0, #1
 8002e7c:	f7ff fd80 	bl	8002980 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e88:	461a      	mov	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	791b      	ldrb	r3, [r3, #4]
 8002e92:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002e98:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002e9e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002ea4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002eac:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002eae:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002eb6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002ebc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6812      	ldr	r2, [r2, #0]
 8002ec2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ec6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002eca:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ed8:	2001      	movs	r0, #1
 8002eda:	f7ff fd51 	bl	8002980 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6013      	str	r3, [r2, #0]
}
 8002eec:	bf00      	nop
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	f8de3f23 	.word	0xf8de3f23

08002ef8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b0a6      	sub	sp, #152	; 0x98
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002f00:	2301      	movs	r3, #1
 8002f02:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002f06:	2301      	movs	r3, #1
 8002f08:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002f10:	2300      	movs	r3, #0
 8002f12:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002f16:	2301      	movs	r3, #1
 8002f18:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002f22:	2301      	movs	r3, #1
 8002f24:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002f34:	2300      	movs	r3, #0
 8002f36:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002f42:	2300      	movs	r3, #0
 8002f44:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002f54:	2300      	movs	r3, #0
 8002f56:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002f5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f5e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002f60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f64:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002f66:	2300      	movs	r3, #0
 8002f68:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002f6c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f70:	4619      	mov	r1, r3
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7ff fe86 	bl	8002c84 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002f80:	2301      	movs	r3, #1
 8002f82:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002f86:	2301      	movs	r3, #1
 8002f88:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002f94:	2300      	movs	r3, #0
 8002f96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002fa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fac:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002fae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002fb2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002fb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fb8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002fc8:	f107 0308 	add.w	r3, r7, #8
 8002fcc:	4619      	mov	r1, r3
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7ff ff08 	bl	8002de4 <ETH_SetDMAConfig>
}
 8002fd4:	bf00      	nop
 8002fd6:	3798      	adds	r7, #152	; 0x98
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b087      	sub	sp, #28
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3305      	adds	r3, #5
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	021b      	lsls	r3, r3, #8
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	3204      	adds	r2, #4
 8002ff4:	7812      	ldrb	r2, [r2, #0]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	4b11      	ldr	r3, [pc, #68]	; (8003044 <ETH_MACAddressConfig+0x68>)
 8002ffe:	4413      	add	r3, r2
 8003000:	461a      	mov	r2, r3
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	3303      	adds	r3, #3
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	061a      	lsls	r2, r3, #24
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	3302      	adds	r3, #2
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	041b      	lsls	r3, r3, #16
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3301      	adds	r3, #1
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	021b      	lsls	r3, r3, #8
 8003020:	4313      	orrs	r3, r2
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	7812      	ldrb	r2, [r2, #0]
 8003026:	4313      	orrs	r3, r2
 8003028:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	4b06      	ldr	r3, [pc, #24]	; (8003048 <ETH_MACAddressConfig+0x6c>)
 800302e:	4413      	add	r3, r2
 8003030:	461a      	mov	r2, r3
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	6013      	str	r3, [r2, #0]
}
 8003036:	bf00      	nop
 8003038:	371c      	adds	r7, #28
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	40028040 	.word	0x40028040
 8003048:	40028044 	.word	0x40028044

0800304c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003054:	2300      	movs	r3, #0
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	e03e      	b.n	80030d8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68d9      	ldr	r1, [r3, #12]
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	4613      	mov	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	440b      	add	r3, r1
 800306a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2200      	movs	r2, #0
 8003076:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	2200      	movs	r2, #0
 800307c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	2200      	movs	r2, #0
 8003082:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003084:	68b9      	ldr	r1, [r7, #8]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	3206      	adds	r2, #6
 800308c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d80c      	bhi.n	80030bc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68d9      	ldr	r1, [r3, #12]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	1c5a      	adds	r2, r3, #1
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	440b      	add	r3, r1
 80030b4:	461a      	mov	r2, r3
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	60da      	str	r2, [r3, #12]
 80030ba:	e004      	b.n	80030c6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	461a      	mov	r2, r3
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	3301      	adds	r3, #1
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2b03      	cmp	r3, #3
 80030dc:	d9bd      	bls.n	800305a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68da      	ldr	r2, [r3, #12]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030f0:	611a      	str	r2, [r3, #16]
}
 80030f2:	bf00      	nop
 80030f4:	3714      	adds	r7, #20
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80030fe:	b480      	push	{r7}
 8003100:	b085      	sub	sp, #20
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003106:	2300      	movs	r3, #0
 8003108:	60fb      	str	r3, [r7, #12]
 800310a:	e046      	b.n	800319a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6919      	ldr	r1, [r3, #16]
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	440b      	add	r3, r1
 800311c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2200      	movs	r2, #0
 8003128:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2200      	movs	r2, #0
 800312e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	2200      	movs	r2, #0
 8003134:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	2200      	movs	r2, #0
 800313a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	2200      	movs	r2, #0
 8003140:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003148:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003150:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800315e:	68b9      	ldr	r1, [r7, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	3212      	adds	r2, #18
 8003166:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2b02      	cmp	r3, #2
 800316e:	d80c      	bhi.n	800318a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6919      	ldr	r1, [r3, #16]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	1c5a      	adds	r2, r3, #1
 8003178:	4613      	mov	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	440b      	add	r3, r1
 8003182:	461a      	mov	r2, r3
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	60da      	str	r2, [r3, #12]
 8003188:	e004      	b.n	8003194 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	461a      	mov	r2, r3
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	3301      	adds	r3, #1
 8003198:	60fb      	str	r3, [r7, #12]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2b03      	cmp	r3, #3
 800319e:	d9b5      	bls.n	800310c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691a      	ldr	r2, [r3, #16]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031ca:	60da      	str	r2, [r3, #12]
}
 80031cc:	bf00      	nop
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031d8:	b480      	push	{r7}
 80031da:	b089      	sub	sp, #36	; 0x24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80031e2:	2300      	movs	r3, #0
 80031e4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80031e6:	2300      	movs	r3, #0
 80031e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80031ea:	2300      	movs	r3, #0
 80031ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80031ee:	2300      	movs	r3, #0
 80031f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80031f2:	2300      	movs	r3, #0
 80031f4:	61fb      	str	r3, [r7, #28]
 80031f6:	e175      	b.n	80034e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80031f8:	2201      	movs	r2, #1
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	4013      	ands	r3, r2
 800320a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	429a      	cmp	r2, r3
 8003212:	f040 8164 	bne.w	80034de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f003 0303 	and.w	r3, r3, #3
 800321e:	2b01      	cmp	r3, #1
 8003220:	d005      	beq.n	800322e <HAL_GPIO_Init+0x56>
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f003 0303 	and.w	r3, r3, #3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d130      	bne.n	8003290 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	2203      	movs	r2, #3
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	43db      	mvns	r3, r3
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	4013      	ands	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	68da      	ldr	r2, [r3, #12]
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4313      	orrs	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003264:	2201      	movs	r2, #1
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	43db      	mvns	r3, r3
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4013      	ands	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	091b      	lsrs	r3, r3, #4
 800327a:	f003 0201 	and.w	r2, r3, #1
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	4313      	orrs	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 0303 	and.w	r3, r3, #3
 8003298:	2b03      	cmp	r3, #3
 800329a:	d017      	beq.n	80032cc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	2203      	movs	r2, #3
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	43db      	mvns	r3, r3
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	4013      	ands	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 0303 	and.w	r3, r3, #3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d123      	bne.n	8003320 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	08da      	lsrs	r2, r3, #3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3208      	adds	r2, #8
 80032e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	220f      	movs	r2, #15
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	43db      	mvns	r3, r3
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4013      	ands	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	691a      	ldr	r2, [r3, #16]
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	f003 0307 	and.w	r3, r3, #7
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	4313      	orrs	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	08da      	lsrs	r2, r3, #3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	3208      	adds	r2, #8
 800331a:	69b9      	ldr	r1, [r7, #24]
 800331c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	2203      	movs	r2, #3
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	43db      	mvns	r3, r3
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4013      	ands	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f003 0203 	and.w	r2, r3, #3
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4313      	orrs	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 80be 	beq.w	80034de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003362:	4b66      	ldr	r3, [pc, #408]	; (80034fc <HAL_GPIO_Init+0x324>)
 8003364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003366:	4a65      	ldr	r2, [pc, #404]	; (80034fc <HAL_GPIO_Init+0x324>)
 8003368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800336c:	6453      	str	r3, [r2, #68]	; 0x44
 800336e:	4b63      	ldr	r3, [pc, #396]	; (80034fc <HAL_GPIO_Init+0x324>)
 8003370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800337a:	4a61      	ldr	r2, [pc, #388]	; (8003500 <HAL_GPIO_Init+0x328>)
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	089b      	lsrs	r3, r3, #2
 8003380:	3302      	adds	r3, #2
 8003382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003386:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	220f      	movs	r2, #15
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	43db      	mvns	r3, r3
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	4013      	ands	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a58      	ldr	r2, [pc, #352]	; (8003504 <HAL_GPIO_Init+0x32c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d037      	beq.n	8003416 <HAL_GPIO_Init+0x23e>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a57      	ldr	r2, [pc, #348]	; (8003508 <HAL_GPIO_Init+0x330>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d031      	beq.n	8003412 <HAL_GPIO_Init+0x23a>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a56      	ldr	r2, [pc, #344]	; (800350c <HAL_GPIO_Init+0x334>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d02b      	beq.n	800340e <HAL_GPIO_Init+0x236>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a55      	ldr	r2, [pc, #340]	; (8003510 <HAL_GPIO_Init+0x338>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d025      	beq.n	800340a <HAL_GPIO_Init+0x232>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a54      	ldr	r2, [pc, #336]	; (8003514 <HAL_GPIO_Init+0x33c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d01f      	beq.n	8003406 <HAL_GPIO_Init+0x22e>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a53      	ldr	r2, [pc, #332]	; (8003518 <HAL_GPIO_Init+0x340>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d019      	beq.n	8003402 <HAL_GPIO_Init+0x22a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a52      	ldr	r2, [pc, #328]	; (800351c <HAL_GPIO_Init+0x344>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d013      	beq.n	80033fe <HAL_GPIO_Init+0x226>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a51      	ldr	r2, [pc, #324]	; (8003520 <HAL_GPIO_Init+0x348>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d00d      	beq.n	80033fa <HAL_GPIO_Init+0x222>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a50      	ldr	r2, [pc, #320]	; (8003524 <HAL_GPIO_Init+0x34c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d007      	beq.n	80033f6 <HAL_GPIO_Init+0x21e>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a4f      	ldr	r2, [pc, #316]	; (8003528 <HAL_GPIO_Init+0x350>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d101      	bne.n	80033f2 <HAL_GPIO_Init+0x21a>
 80033ee:	2309      	movs	r3, #9
 80033f0:	e012      	b.n	8003418 <HAL_GPIO_Init+0x240>
 80033f2:	230a      	movs	r3, #10
 80033f4:	e010      	b.n	8003418 <HAL_GPIO_Init+0x240>
 80033f6:	2308      	movs	r3, #8
 80033f8:	e00e      	b.n	8003418 <HAL_GPIO_Init+0x240>
 80033fa:	2307      	movs	r3, #7
 80033fc:	e00c      	b.n	8003418 <HAL_GPIO_Init+0x240>
 80033fe:	2306      	movs	r3, #6
 8003400:	e00a      	b.n	8003418 <HAL_GPIO_Init+0x240>
 8003402:	2305      	movs	r3, #5
 8003404:	e008      	b.n	8003418 <HAL_GPIO_Init+0x240>
 8003406:	2304      	movs	r3, #4
 8003408:	e006      	b.n	8003418 <HAL_GPIO_Init+0x240>
 800340a:	2303      	movs	r3, #3
 800340c:	e004      	b.n	8003418 <HAL_GPIO_Init+0x240>
 800340e:	2302      	movs	r3, #2
 8003410:	e002      	b.n	8003418 <HAL_GPIO_Init+0x240>
 8003412:	2301      	movs	r3, #1
 8003414:	e000      	b.n	8003418 <HAL_GPIO_Init+0x240>
 8003416:	2300      	movs	r3, #0
 8003418:	69fa      	ldr	r2, [r7, #28]
 800341a:	f002 0203 	and.w	r2, r2, #3
 800341e:	0092      	lsls	r2, r2, #2
 8003420:	4093      	lsls	r3, r2
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4313      	orrs	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003428:	4935      	ldr	r1, [pc, #212]	; (8003500 <HAL_GPIO_Init+0x328>)
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	089b      	lsrs	r3, r3, #2
 800342e:	3302      	adds	r3, #2
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003436:	4b3d      	ldr	r3, [pc, #244]	; (800352c <HAL_GPIO_Init+0x354>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	43db      	mvns	r3, r3
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	4013      	ands	r3, r2
 8003444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	4313      	orrs	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800345a:	4a34      	ldr	r2, [pc, #208]	; (800352c <HAL_GPIO_Init+0x354>)
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003460:	4b32      	ldr	r3, [pc, #200]	; (800352c <HAL_GPIO_Init+0x354>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	43db      	mvns	r3, r3
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	4013      	ands	r3, r2
 800346e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	4313      	orrs	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003484:	4a29      	ldr	r2, [pc, #164]	; (800352c <HAL_GPIO_Init+0x354>)
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800348a:	4b28      	ldr	r3, [pc, #160]	; (800352c <HAL_GPIO_Init+0x354>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	43db      	mvns	r3, r3
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	4013      	ands	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034ae:	4a1f      	ldr	r2, [pc, #124]	; (800352c <HAL_GPIO_Init+0x354>)
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034b4:	4b1d      	ldr	r3, [pc, #116]	; (800352c <HAL_GPIO_Init+0x354>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	43db      	mvns	r3, r3
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	4013      	ands	r3, r2
 80034c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d003      	beq.n	80034d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034d8:	4a14      	ldr	r2, [pc, #80]	; (800352c <HAL_GPIO_Init+0x354>)
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	3301      	adds	r3, #1
 80034e2:	61fb      	str	r3, [r7, #28]
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	2b0f      	cmp	r3, #15
 80034e8:	f67f ae86 	bls.w	80031f8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80034ec:	bf00      	nop
 80034ee:	bf00      	nop
 80034f0:	3724      	adds	r7, #36	; 0x24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	40023800 	.word	0x40023800
 8003500:	40013800 	.word	0x40013800
 8003504:	40020000 	.word	0x40020000
 8003508:	40020400 	.word	0x40020400
 800350c:	40020800 	.word	0x40020800
 8003510:	40020c00 	.word	0x40020c00
 8003514:	40021000 	.word	0x40021000
 8003518:	40021400 	.word	0x40021400
 800351c:	40021800 	.word	0x40021800
 8003520:	40021c00 	.word	0x40021c00
 8003524:	40022000 	.word	0x40022000
 8003528:	40022400 	.word	0x40022400
 800352c:	40013c00 	.word	0x40013c00

08003530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	460b      	mov	r3, r1
 800353a:	807b      	strh	r3, [r7, #2]
 800353c:	4613      	mov	r3, r2
 800353e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003540:	787b      	ldrb	r3, [r7, #1]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003546:	887a      	ldrh	r2, [r7, #2]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800354c:	e003      	b.n	8003556 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800354e:	887b      	ldrh	r3, [r7, #2]
 8003550:	041a      	lsls	r2, r3, #16
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	619a      	str	r2, [r3, #24]
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003562:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003564:	b08f      	sub	sp, #60	; 0x3c
 8003566:	af0a      	add	r7, sp, #40	; 0x28
 8003568:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d101      	bne.n	8003574 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e116      	b.n	80037a2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d106      	bne.n	8003594 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7ff f87a 	bl	8002688 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2203      	movs	r2, #3
 8003598:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d102      	bne.n	80035ae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f002 fad0 	bl	8005b58 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	603b      	str	r3, [r7, #0]
 80035be:	687e      	ldr	r6, [r7, #4]
 80035c0:	466d      	mov	r5, sp
 80035c2:	f106 0410 	add.w	r4, r6, #16
 80035c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80035d6:	1d33      	adds	r3, r6, #4
 80035d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035da:	6838      	ldr	r0, [r7, #0]
 80035dc:	f002 fa64 	bl	8005aa8 <USB_CoreInit>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d005      	beq.n	80035f2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2202      	movs	r2, #2
 80035ea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e0d7      	b.n	80037a2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2100      	movs	r1, #0
 80035f8:	4618      	mov	r0, r3
 80035fa:	f002 fabe 	bl	8005b7a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035fe:	2300      	movs	r3, #0
 8003600:	73fb      	strb	r3, [r7, #15]
 8003602:	e04a      	b.n	800369a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003604:	7bfa      	ldrb	r2, [r7, #15]
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	4613      	mov	r3, r2
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	4413      	add	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	333d      	adds	r3, #61	; 0x3d
 8003614:	2201      	movs	r2, #1
 8003616:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003618:	7bfa      	ldrb	r2, [r7, #15]
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	4613      	mov	r3, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	4413      	add	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	333c      	adds	r3, #60	; 0x3c
 8003628:	7bfa      	ldrb	r2, [r7, #15]
 800362a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800362c:	7bfa      	ldrb	r2, [r7, #15]
 800362e:	7bfb      	ldrb	r3, [r7, #15]
 8003630:	b298      	uxth	r0, r3
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	4613      	mov	r3, r2
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	3344      	adds	r3, #68	; 0x44
 8003640:	4602      	mov	r2, r0
 8003642:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003644:	7bfa      	ldrb	r2, [r7, #15]
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	4613      	mov	r3, r2
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	4413      	add	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	3340      	adds	r3, #64	; 0x40
 8003654:	2200      	movs	r2, #0
 8003656:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003658:	7bfa      	ldrb	r2, [r7, #15]
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	4613      	mov	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	4413      	add	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	3348      	adds	r3, #72	; 0x48
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800366c:	7bfa      	ldrb	r2, [r7, #15]
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	4613      	mov	r3, r2
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	4413      	add	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	334c      	adds	r3, #76	; 0x4c
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003680:	7bfa      	ldrb	r2, [r7, #15]
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	4613      	mov	r3, r2
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	4413      	add	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	3354      	adds	r3, #84	; 0x54
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003694:	7bfb      	ldrb	r3, [r7, #15]
 8003696:	3301      	adds	r3, #1
 8003698:	73fb      	strb	r3, [r7, #15]
 800369a:	7bfa      	ldrb	r2, [r7, #15]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d3af      	bcc.n	8003604 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036a4:	2300      	movs	r3, #0
 80036a6:	73fb      	strb	r3, [r7, #15]
 80036a8:	e044      	b.n	8003734 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80036aa:	7bfa      	ldrb	r2, [r7, #15]
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	4613      	mov	r3, r2
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	4413      	add	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	440b      	add	r3, r1
 80036b8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80036bc:	2200      	movs	r2, #0
 80036be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80036c0:	7bfa      	ldrb	r2, [r7, #15]
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	4613      	mov	r3, r2
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	4413      	add	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80036d2:	7bfa      	ldrb	r2, [r7, #15]
 80036d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036d6:	7bfa      	ldrb	r2, [r7, #15]
 80036d8:	6879      	ldr	r1, [r7, #4]
 80036da:	4613      	mov	r3, r2
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	4413      	add	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	440b      	add	r3, r1
 80036e4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80036e8:	2200      	movs	r2, #0
 80036ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036ec:	7bfa      	ldrb	r2, [r7, #15]
 80036ee:	6879      	ldr	r1, [r7, #4]
 80036f0:	4613      	mov	r3, r2
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	4413      	add	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	440b      	add	r3, r1
 80036fa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003702:	7bfa      	ldrb	r2, [r7, #15]
 8003704:	6879      	ldr	r1, [r7, #4]
 8003706:	4613      	mov	r3, r2
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	4413      	add	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	440b      	add	r3, r1
 8003710:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003718:	7bfa      	ldrb	r2, [r7, #15]
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	4613      	mov	r3, r2
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	4413      	add	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	440b      	add	r3, r1
 8003726:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800372a:	2200      	movs	r2, #0
 800372c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800372e:	7bfb      	ldrb	r3, [r7, #15]
 8003730:	3301      	adds	r3, #1
 8003732:	73fb      	strb	r3, [r7, #15]
 8003734:	7bfa      	ldrb	r2, [r7, #15]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	429a      	cmp	r2, r3
 800373c:	d3b5      	bcc.n	80036aa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	603b      	str	r3, [r7, #0]
 8003744:	687e      	ldr	r6, [r7, #4]
 8003746:	466d      	mov	r5, sp
 8003748:	f106 0410 	add.w	r4, r6, #16
 800374c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800374e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003750:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003752:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003754:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003758:	e885 0003 	stmia.w	r5, {r0, r1}
 800375c:	1d33      	adds	r3, r6, #4
 800375e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003760:	6838      	ldr	r0, [r7, #0]
 8003762:	f002 fa57 	bl	8005c14 <USB_DevInit>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d005      	beq.n	8003778 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2202      	movs	r2, #2
 8003770:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e014      	b.n	80037a2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	2b01      	cmp	r3, #1
 800378e:	d102      	bne.n	8003796 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f80b 	bl	80037ac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f002 fc15 	bl	8005fca <USB_DevDisconnect>

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080037ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037da:	4b05      	ldr	r3, [pc, #20]	; (80037f0 <HAL_PCDEx_ActivateLPM+0x44>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	10000003 	.word	0x10000003

080037f4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037f8:	4b05      	ldr	r3, [pc, #20]	; (8003810 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a04      	ldr	r2, [pc, #16]	; (8003810 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80037fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003802:	6013      	str	r3, [r2, #0]
}
 8003804:	bf00      	nop
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	40007000 	.word	0x40007000

08003814 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800381a:	2300      	movs	r3, #0
 800381c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800381e:	4b23      	ldr	r3, [pc, #140]	; (80038ac <HAL_PWREx_EnableOverDrive+0x98>)
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	4a22      	ldr	r2, [pc, #136]	; (80038ac <HAL_PWREx_EnableOverDrive+0x98>)
 8003824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003828:	6413      	str	r3, [r2, #64]	; 0x40
 800382a:	4b20      	ldr	r3, [pc, #128]	; (80038ac <HAL_PWREx_EnableOverDrive+0x98>)
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003832:	603b      	str	r3, [r7, #0]
 8003834:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003836:	4b1e      	ldr	r3, [pc, #120]	; (80038b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a1d      	ldr	r2, [pc, #116]	; (80038b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800383c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003840:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003842:	f7ff f891 	bl	8002968 <HAL_GetTick>
 8003846:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003848:	e009      	b.n	800385e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800384a:	f7ff f88d 	bl	8002968 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003858:	d901      	bls.n	800385e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e022      	b.n	80038a4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800385e:	4b14      	ldr	r3, [pc, #80]	; (80038b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800386a:	d1ee      	bne.n	800384a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800386c:	4b10      	ldr	r3, [pc, #64]	; (80038b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a0f      	ldr	r2, [pc, #60]	; (80038b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003876:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003878:	f7ff f876 	bl	8002968 <HAL_GetTick>
 800387c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800387e:	e009      	b.n	8003894 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003880:	f7ff f872 	bl	8002968 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800388e:	d901      	bls.n	8003894 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e007      	b.n	80038a4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003894:	4b06      	ldr	r3, [pc, #24]	; (80038b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038a0:	d1ee      	bne.n	8003880 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40023800 	.word	0x40023800
 80038b0:	40007000 	.word	0x40007000

080038b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80038bc:	2300      	movs	r3, #0
 80038be:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e29b      	b.n	8003e02 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 8087 	beq.w	80039e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038d8:	4b96      	ldr	r3, [pc, #600]	; (8003b34 <HAL_RCC_OscConfig+0x280>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f003 030c 	and.w	r3, r3, #12
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	d00c      	beq.n	80038fe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038e4:	4b93      	ldr	r3, [pc, #588]	; (8003b34 <HAL_RCC_OscConfig+0x280>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f003 030c 	and.w	r3, r3, #12
 80038ec:	2b08      	cmp	r3, #8
 80038ee:	d112      	bne.n	8003916 <HAL_RCC_OscConfig+0x62>
 80038f0:	4b90      	ldr	r3, [pc, #576]	; (8003b34 <HAL_RCC_OscConfig+0x280>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038fc:	d10b      	bne.n	8003916 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038fe:	4b8d      	ldr	r3, [pc, #564]	; (8003b34 <HAL_RCC_OscConfig+0x280>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d06c      	beq.n	80039e4 <HAL_RCC_OscConfig+0x130>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d168      	bne.n	80039e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e275      	b.n	8003e02 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800391e:	d106      	bne.n	800392e <HAL_RCC_OscConfig+0x7a>
 8003920:	4b84      	ldr	r3, [pc, #528]	; (8003b34 <HAL_RCC_OscConfig+0x280>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a83      	ldr	r2, [pc, #524]	; (8003b34 <HAL_RCC_OscConfig+0x280>)
 8003926:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800392a:	6013      	str	r3, [r2, #0]
 800392c:	e02e      	b.n	800398c <HAL_RCC_OscConfig+0xd8>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10c      	bne.n	8003950 <HAL_RCC_OscConfig+0x9c>
 8003936:	4b7f      	ldr	r3, [pc, #508]	; (8003b34 <HAL_RCC_OscConfig+0x280>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a7e      	ldr	r2, [pc, #504]	; (8003b34 <HAL_RCC_OscConfig+0x280>)
 800393c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	4b7c      	ldr	r3, [pc, #496]	; (8003b34 <HAL_RCC_OscConfig+0x280>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a7b      	ldr	r2, [pc, #492]	; (8003b34 <HAL_RCC_OscConfig+0x280>)
 8003948:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800394c:	6013      	str	r3, [r2, #0]
 800394e:	e01d      	b.n	800398c <HAL_RCC_OscConfig+0xd8>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003958:	d10c      	bne.n	8003974 <HAL_RCC_OscConfig+0xc0>
 800395a:	4b76      	ldr	r3, [pc, #472]	; (8003b34 <HAL_RCC_OscConfig+0x280>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a75      	ldr	r2, [pc, #468]	; (8003b34 <HAL_RCC_OscConfig+0x280>)
 8003960:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	4b73      	ldr	r3, [pc, #460]	; (8003b34 <HAL_RCC_OscConfig+0x280>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a72      	ldr	r2, [pc, #456]	; (8003b34 <HAL_RCC_OscConfig+0x280>)
 800396c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003970:	6013      	str	r3, [r2, #0]
 8003972:	e00b      	b.n	800398c <HAL_RCC_OscConfig+0xd8>
 8003974:	4b6f      	ldr	r3, [pc, #444]	; (8003b34 <HAL_RCC_OscConfig+0x280>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a6e      	ldr	r2, [pc, #440]	; (8003b34 <HAL_RCC_OscConfig+0x280>)
 800397a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800397e:	6013      	str	r3, [r2, #0]
 8003980:	4b6c      	ldr	r3, [pc, #432]	; (8003b34 <HAL_RCC_OscConfig+0x280>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a6b      	ldr	r2, [pc, #428]	; (8003b34 <HAL_RCC_OscConfig+0x280>)
 8003986:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800398a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d013      	beq.n	80039bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003994:	f7fe ffe8 	bl	8002968 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800399c:	f7fe ffe4 	bl	8002968 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b64      	cmp	r3, #100	; 0x64
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e229      	b.n	8003e02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ae:	4b61      	ldr	r3, [pc, #388]	; (8003b34 <HAL_RCC_OscConfig+0x280>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d0f0      	beq.n	800399c <HAL_RCC_OscConfig+0xe8>
 80039ba:	e014      	b.n	80039e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039bc:	f7fe ffd4 	bl	8002968 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039c4:	f7fe ffd0 	bl	8002968 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b64      	cmp	r3, #100	; 0x64
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e215      	b.n	8003e02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039d6:	4b57      	ldr	r3, [pc, #348]	; (8003b34 <HAL_RCC_OscConfig+0x280>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f0      	bne.n	80039c4 <HAL_RCC_OscConfig+0x110>
 80039e2:	e000      	b.n	80039e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d069      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039f2:	4b50      	ldr	r3, [pc, #320]	; (8003b34 <HAL_RCC_OscConfig+0x280>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 030c 	and.w	r3, r3, #12
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00b      	beq.n	8003a16 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039fe:	4b4d      	ldr	r3, [pc, #308]	; (8003b34 <HAL_RCC_OscConfig+0x280>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f003 030c 	and.w	r3, r3, #12
 8003a06:	2b08      	cmp	r3, #8
 8003a08:	d11c      	bne.n	8003a44 <HAL_RCC_OscConfig+0x190>
 8003a0a:	4b4a      	ldr	r3, [pc, #296]	; (8003b34 <HAL_RCC_OscConfig+0x280>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d116      	bne.n	8003a44 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a16:	4b47      	ldr	r3, [pc, #284]	; (8003b34 <HAL_RCC_OscConfig+0x280>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d005      	beq.n	8003a2e <HAL_RCC_OscConfig+0x17a>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d001      	beq.n	8003a2e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e1e9      	b.n	8003e02 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a2e:	4b41      	ldr	r3, [pc, #260]	; (8003b34 <HAL_RCC_OscConfig+0x280>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	493d      	ldr	r1, [pc, #244]	; (8003b34 <HAL_RCC_OscConfig+0x280>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a42:	e040      	b.n	8003ac6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d023      	beq.n	8003a94 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a4c:	4b39      	ldr	r3, [pc, #228]	; (8003b34 <HAL_RCC_OscConfig+0x280>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a38      	ldr	r2, [pc, #224]	; (8003b34 <HAL_RCC_OscConfig+0x280>)
 8003a52:	f043 0301 	orr.w	r3, r3, #1
 8003a56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a58:	f7fe ff86 	bl	8002968 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a60:	f7fe ff82 	bl	8002968 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e1c7      	b.n	8003e02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a72:	4b30      	ldr	r3, [pc, #192]	; (8003b34 <HAL_RCC_OscConfig+0x280>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0f0      	beq.n	8003a60 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a7e:	4b2d      	ldr	r3, [pc, #180]	; (8003b34 <HAL_RCC_OscConfig+0x280>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	4929      	ldr	r1, [pc, #164]	; (8003b34 <HAL_RCC_OscConfig+0x280>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	600b      	str	r3, [r1, #0]
 8003a92:	e018      	b.n	8003ac6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a94:	4b27      	ldr	r3, [pc, #156]	; (8003b34 <HAL_RCC_OscConfig+0x280>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a26      	ldr	r2, [pc, #152]	; (8003b34 <HAL_RCC_OscConfig+0x280>)
 8003a9a:	f023 0301 	bic.w	r3, r3, #1
 8003a9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa0:	f7fe ff62 	bl	8002968 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aa8:	f7fe ff5e 	bl	8002968 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e1a3      	b.n	8003e02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aba:	4b1e      	ldr	r3, [pc, #120]	; (8003b34 <HAL_RCC_OscConfig+0x280>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1f0      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0308 	and.w	r3, r3, #8
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d038      	beq.n	8003b44 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d019      	beq.n	8003b0e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ada:	4b16      	ldr	r3, [pc, #88]	; (8003b34 <HAL_RCC_OscConfig+0x280>)
 8003adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ade:	4a15      	ldr	r2, [pc, #84]	; (8003b34 <HAL_RCC_OscConfig+0x280>)
 8003ae0:	f043 0301 	orr.w	r3, r3, #1
 8003ae4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae6:	f7fe ff3f 	bl	8002968 <HAL_GetTick>
 8003aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aec:	e008      	b.n	8003b00 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aee:	f7fe ff3b 	bl	8002968 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d901      	bls.n	8003b00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e180      	b.n	8003e02 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b00:	4b0c      	ldr	r3, [pc, #48]	; (8003b34 <HAL_RCC_OscConfig+0x280>)
 8003b02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0f0      	beq.n	8003aee <HAL_RCC_OscConfig+0x23a>
 8003b0c:	e01a      	b.n	8003b44 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b0e:	4b09      	ldr	r3, [pc, #36]	; (8003b34 <HAL_RCC_OscConfig+0x280>)
 8003b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b12:	4a08      	ldr	r2, [pc, #32]	; (8003b34 <HAL_RCC_OscConfig+0x280>)
 8003b14:	f023 0301 	bic.w	r3, r3, #1
 8003b18:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b1a:	f7fe ff25 	bl	8002968 <HAL_GetTick>
 8003b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b20:	e00a      	b.n	8003b38 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b22:	f7fe ff21 	bl	8002968 <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d903      	bls.n	8003b38 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e166      	b.n	8003e02 <HAL_RCC_OscConfig+0x54e>
 8003b34:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b38:	4b92      	ldr	r3, [pc, #584]	; (8003d84 <HAL_RCC_OscConfig+0x4d0>)
 8003b3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1ee      	bne.n	8003b22 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 80a4 	beq.w	8003c9a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b52:	4b8c      	ldr	r3, [pc, #560]	; (8003d84 <HAL_RCC_OscConfig+0x4d0>)
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10d      	bne.n	8003b7a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b5e:	4b89      	ldr	r3, [pc, #548]	; (8003d84 <HAL_RCC_OscConfig+0x4d0>)
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	4a88      	ldr	r2, [pc, #544]	; (8003d84 <HAL_RCC_OscConfig+0x4d0>)
 8003b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b68:	6413      	str	r3, [r2, #64]	; 0x40
 8003b6a:	4b86      	ldr	r3, [pc, #536]	; (8003d84 <HAL_RCC_OscConfig+0x4d0>)
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b72:	60bb      	str	r3, [r7, #8]
 8003b74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b76:	2301      	movs	r3, #1
 8003b78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b7a:	4b83      	ldr	r3, [pc, #524]	; (8003d88 <HAL_RCC_OscConfig+0x4d4>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d118      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003b86:	4b80      	ldr	r3, [pc, #512]	; (8003d88 <HAL_RCC_OscConfig+0x4d4>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a7f      	ldr	r2, [pc, #508]	; (8003d88 <HAL_RCC_OscConfig+0x4d4>)
 8003b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b92:	f7fe fee9 	bl	8002968 <HAL_GetTick>
 8003b96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b98:	e008      	b.n	8003bac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b9a:	f7fe fee5 	bl	8002968 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b64      	cmp	r3, #100	; 0x64
 8003ba6:	d901      	bls.n	8003bac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e12a      	b.n	8003e02 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bac:	4b76      	ldr	r3, [pc, #472]	; (8003d88 <HAL_RCC_OscConfig+0x4d4>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d0f0      	beq.n	8003b9a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d106      	bne.n	8003bce <HAL_RCC_OscConfig+0x31a>
 8003bc0:	4b70      	ldr	r3, [pc, #448]	; (8003d84 <HAL_RCC_OscConfig+0x4d0>)
 8003bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc4:	4a6f      	ldr	r2, [pc, #444]	; (8003d84 <HAL_RCC_OscConfig+0x4d0>)
 8003bc6:	f043 0301 	orr.w	r3, r3, #1
 8003bca:	6713      	str	r3, [r2, #112]	; 0x70
 8003bcc:	e02d      	b.n	8003c2a <HAL_RCC_OscConfig+0x376>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10c      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x33c>
 8003bd6:	4b6b      	ldr	r3, [pc, #428]	; (8003d84 <HAL_RCC_OscConfig+0x4d0>)
 8003bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bda:	4a6a      	ldr	r2, [pc, #424]	; (8003d84 <HAL_RCC_OscConfig+0x4d0>)
 8003bdc:	f023 0301 	bic.w	r3, r3, #1
 8003be0:	6713      	str	r3, [r2, #112]	; 0x70
 8003be2:	4b68      	ldr	r3, [pc, #416]	; (8003d84 <HAL_RCC_OscConfig+0x4d0>)
 8003be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be6:	4a67      	ldr	r2, [pc, #412]	; (8003d84 <HAL_RCC_OscConfig+0x4d0>)
 8003be8:	f023 0304 	bic.w	r3, r3, #4
 8003bec:	6713      	str	r3, [r2, #112]	; 0x70
 8003bee:	e01c      	b.n	8003c2a <HAL_RCC_OscConfig+0x376>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	2b05      	cmp	r3, #5
 8003bf6:	d10c      	bne.n	8003c12 <HAL_RCC_OscConfig+0x35e>
 8003bf8:	4b62      	ldr	r3, [pc, #392]	; (8003d84 <HAL_RCC_OscConfig+0x4d0>)
 8003bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfc:	4a61      	ldr	r2, [pc, #388]	; (8003d84 <HAL_RCC_OscConfig+0x4d0>)
 8003bfe:	f043 0304 	orr.w	r3, r3, #4
 8003c02:	6713      	str	r3, [r2, #112]	; 0x70
 8003c04:	4b5f      	ldr	r3, [pc, #380]	; (8003d84 <HAL_RCC_OscConfig+0x4d0>)
 8003c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c08:	4a5e      	ldr	r2, [pc, #376]	; (8003d84 <HAL_RCC_OscConfig+0x4d0>)
 8003c0a:	f043 0301 	orr.w	r3, r3, #1
 8003c0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c10:	e00b      	b.n	8003c2a <HAL_RCC_OscConfig+0x376>
 8003c12:	4b5c      	ldr	r3, [pc, #368]	; (8003d84 <HAL_RCC_OscConfig+0x4d0>)
 8003c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c16:	4a5b      	ldr	r2, [pc, #364]	; (8003d84 <HAL_RCC_OscConfig+0x4d0>)
 8003c18:	f023 0301 	bic.w	r3, r3, #1
 8003c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c1e:	4b59      	ldr	r3, [pc, #356]	; (8003d84 <HAL_RCC_OscConfig+0x4d0>)
 8003c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c22:	4a58      	ldr	r2, [pc, #352]	; (8003d84 <HAL_RCC_OscConfig+0x4d0>)
 8003c24:	f023 0304 	bic.w	r3, r3, #4
 8003c28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d015      	beq.n	8003c5e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c32:	f7fe fe99 	bl	8002968 <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c38:	e00a      	b.n	8003c50 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c3a:	f7fe fe95 	bl	8002968 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e0d8      	b.n	8003e02 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c50:	4b4c      	ldr	r3, [pc, #304]	; (8003d84 <HAL_RCC_OscConfig+0x4d0>)
 8003c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d0ee      	beq.n	8003c3a <HAL_RCC_OscConfig+0x386>
 8003c5c:	e014      	b.n	8003c88 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c5e:	f7fe fe83 	bl	8002968 <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c64:	e00a      	b.n	8003c7c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c66:	f7fe fe7f 	bl	8002968 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e0c2      	b.n	8003e02 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c7c:	4b41      	ldr	r3, [pc, #260]	; (8003d84 <HAL_RCC_OscConfig+0x4d0>)
 8003c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1ee      	bne.n	8003c66 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c88:	7dfb      	ldrb	r3, [r7, #23]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d105      	bne.n	8003c9a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c8e:	4b3d      	ldr	r3, [pc, #244]	; (8003d84 <HAL_RCC_OscConfig+0x4d0>)
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	4a3c      	ldr	r2, [pc, #240]	; (8003d84 <HAL_RCC_OscConfig+0x4d0>)
 8003c94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c98:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 80ae 	beq.w	8003e00 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ca4:	4b37      	ldr	r3, [pc, #220]	; (8003d84 <HAL_RCC_OscConfig+0x4d0>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f003 030c 	and.w	r3, r3, #12
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	d06d      	beq.n	8003d8c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d14b      	bne.n	8003d50 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb8:	4b32      	ldr	r3, [pc, #200]	; (8003d84 <HAL_RCC_OscConfig+0x4d0>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a31      	ldr	r2, [pc, #196]	; (8003d84 <HAL_RCC_OscConfig+0x4d0>)
 8003cbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc4:	f7fe fe50 	bl	8002968 <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ccc:	f7fe fe4c 	bl	8002968 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e091      	b.n	8003e02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cde:	4b29      	ldr	r3, [pc, #164]	; (8003d84 <HAL_RCC_OscConfig+0x4d0>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1f0      	bne.n	8003ccc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	69da      	ldr	r2, [r3, #28]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	019b      	lsls	r3, r3, #6
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d00:	085b      	lsrs	r3, r3, #1
 8003d02:	3b01      	subs	r3, #1
 8003d04:	041b      	lsls	r3, r3, #16
 8003d06:	431a      	orrs	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0c:	061b      	lsls	r3, r3, #24
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d14:	071b      	lsls	r3, r3, #28
 8003d16:	491b      	ldr	r1, [pc, #108]	; (8003d84 <HAL_RCC_OscConfig+0x4d0>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d1c:	4b19      	ldr	r3, [pc, #100]	; (8003d84 <HAL_RCC_OscConfig+0x4d0>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a18      	ldr	r2, [pc, #96]	; (8003d84 <HAL_RCC_OscConfig+0x4d0>)
 8003d22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d28:	f7fe fe1e 	bl	8002968 <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d30:	f7fe fe1a 	bl	8002968 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e05f      	b.n	8003e02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d42:	4b10      	ldr	r3, [pc, #64]	; (8003d84 <HAL_RCC_OscConfig+0x4d0>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0f0      	beq.n	8003d30 <HAL_RCC_OscConfig+0x47c>
 8003d4e:	e057      	b.n	8003e00 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d50:	4b0c      	ldr	r3, [pc, #48]	; (8003d84 <HAL_RCC_OscConfig+0x4d0>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a0b      	ldr	r2, [pc, #44]	; (8003d84 <HAL_RCC_OscConfig+0x4d0>)
 8003d56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5c:	f7fe fe04 	bl	8002968 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d64:	f7fe fe00 	bl	8002968 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e045      	b.n	8003e02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d76:	4b03      	ldr	r3, [pc, #12]	; (8003d84 <HAL_RCC_OscConfig+0x4d0>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1f0      	bne.n	8003d64 <HAL_RCC_OscConfig+0x4b0>
 8003d82:	e03d      	b.n	8003e00 <HAL_RCC_OscConfig+0x54c>
 8003d84:	40023800 	.word	0x40023800
 8003d88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003d8c:	4b1f      	ldr	r3, [pc, #124]	; (8003e0c <HAL_RCC_OscConfig+0x558>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d030      	beq.n	8003dfc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d129      	bne.n	8003dfc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d122      	bne.n	8003dfc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dc2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d119      	bne.n	8003dfc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd2:	085b      	lsrs	r3, r3, #1
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d10f      	bne.n	8003dfc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d107      	bne.n	8003dfc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d001      	beq.n	8003e00 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e000      	b.n	8003e02 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	40023800 	.word	0x40023800

08003e10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e0d0      	b.n	8003fca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e28:	4b6a      	ldr	r3, [pc, #424]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 030f 	and.w	r3, r3, #15
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d910      	bls.n	8003e58 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e36:	4b67      	ldr	r3, [pc, #412]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f023 020f 	bic.w	r2, r3, #15
 8003e3e:	4965      	ldr	r1, [pc, #404]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e46:	4b63      	ldr	r3, [pc, #396]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 030f 	and.w	r3, r3, #15
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d001      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e0b8      	b.n	8003fca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d020      	beq.n	8003ea6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0304 	and.w	r3, r3, #4
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d005      	beq.n	8003e7c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e70:	4b59      	ldr	r3, [pc, #356]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	4a58      	ldr	r2, [pc, #352]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0308 	and.w	r3, r3, #8
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d005      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e88:	4b53      	ldr	r3, [pc, #332]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	4a52      	ldr	r2, [pc, #328]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e92:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e94:	4b50      	ldr	r3, [pc, #320]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	494d      	ldr	r1, [pc, #308]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d040      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d107      	bne.n	8003eca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eba:	4b47      	ldr	r3, [pc, #284]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d115      	bne.n	8003ef2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e07f      	b.n	8003fca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d107      	bne.n	8003ee2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ed2:	4b41      	ldr	r3, [pc, #260]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d109      	bne.n	8003ef2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e073      	b.n	8003fca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee2:	4b3d      	ldr	r3, [pc, #244]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e06b      	b.n	8003fca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ef2:	4b39      	ldr	r3, [pc, #228]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f023 0203 	bic.w	r2, r3, #3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	4936      	ldr	r1, [pc, #216]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f04:	f7fe fd30 	bl	8002968 <HAL_GetTick>
 8003f08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f0a:	e00a      	b.n	8003f22 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f0c:	f7fe fd2c 	bl	8002968 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e053      	b.n	8003fca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f22:	4b2d      	ldr	r3, [pc, #180]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 020c 	and.w	r2, r3, #12
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d1eb      	bne.n	8003f0c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f34:	4b27      	ldr	r3, [pc, #156]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 030f 	and.w	r3, r3, #15
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d210      	bcs.n	8003f64 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f42:	4b24      	ldr	r3, [pc, #144]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f023 020f 	bic.w	r2, r3, #15
 8003f4a:	4922      	ldr	r1, [pc, #136]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f52:	4b20      	ldr	r3, [pc, #128]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 030f 	and.w	r3, r3, #15
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d001      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e032      	b.n	8003fca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d008      	beq.n	8003f82 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f70:	4b19      	ldr	r3, [pc, #100]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	4916      	ldr	r1, [pc, #88]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0308 	and.w	r3, r3, #8
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d009      	beq.n	8003fa2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f8e:	4b12      	ldr	r3, [pc, #72]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	490e      	ldr	r1, [pc, #56]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fa2:	f000 f821 	bl	8003fe8 <HAL_RCC_GetSysClockFreq>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	4b0b      	ldr	r3, [pc, #44]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	091b      	lsrs	r3, r3, #4
 8003fae:	f003 030f 	and.w	r3, r3, #15
 8003fb2:	490a      	ldr	r1, [pc, #40]	; (8003fdc <HAL_RCC_ClockConfig+0x1cc>)
 8003fb4:	5ccb      	ldrb	r3, [r1, r3]
 8003fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003fba:	4a09      	ldr	r2, [pc, #36]	; (8003fe0 <HAL_RCC_ClockConfig+0x1d0>)
 8003fbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003fbe:	4b09      	ldr	r3, [pc, #36]	; (8003fe4 <HAL_RCC_ClockConfig+0x1d4>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fe fbda 	bl	800277c <HAL_InitTick>

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	40023c00 	.word	0x40023c00
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	0800957c 	.word	0x0800957c
 8003fe0:	20000000 	.word	0x20000000
 8003fe4:	20000004 	.word	0x20000004

08003fe8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fe8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fec:	b094      	sub	sp, #80	; 0x50
 8003fee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004000:	4b79      	ldr	r3, [pc, #484]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f003 030c 	and.w	r3, r3, #12
 8004008:	2b08      	cmp	r3, #8
 800400a:	d00d      	beq.n	8004028 <HAL_RCC_GetSysClockFreq+0x40>
 800400c:	2b08      	cmp	r3, #8
 800400e:	f200 80e1 	bhi.w	80041d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004012:	2b00      	cmp	r3, #0
 8004014:	d002      	beq.n	800401c <HAL_RCC_GetSysClockFreq+0x34>
 8004016:	2b04      	cmp	r3, #4
 8004018:	d003      	beq.n	8004022 <HAL_RCC_GetSysClockFreq+0x3a>
 800401a:	e0db      	b.n	80041d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800401c:	4b73      	ldr	r3, [pc, #460]	; (80041ec <HAL_RCC_GetSysClockFreq+0x204>)
 800401e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004020:	e0db      	b.n	80041da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004022:	4b73      	ldr	r3, [pc, #460]	; (80041f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004024:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004026:	e0d8      	b.n	80041da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004028:	4b6f      	ldr	r3, [pc, #444]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004030:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004032:	4b6d      	ldr	r3, [pc, #436]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d063      	beq.n	8004106 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800403e:	4b6a      	ldr	r3, [pc, #424]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	099b      	lsrs	r3, r3, #6
 8004044:	2200      	movs	r2, #0
 8004046:	63bb      	str	r3, [r7, #56]	; 0x38
 8004048:	63fa      	str	r2, [r7, #60]	; 0x3c
 800404a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800404c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004050:	633b      	str	r3, [r7, #48]	; 0x30
 8004052:	2300      	movs	r3, #0
 8004054:	637b      	str	r3, [r7, #52]	; 0x34
 8004056:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800405a:	4622      	mov	r2, r4
 800405c:	462b      	mov	r3, r5
 800405e:	f04f 0000 	mov.w	r0, #0
 8004062:	f04f 0100 	mov.w	r1, #0
 8004066:	0159      	lsls	r1, r3, #5
 8004068:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800406c:	0150      	lsls	r0, r2, #5
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	4621      	mov	r1, r4
 8004074:	1a51      	subs	r1, r2, r1
 8004076:	6139      	str	r1, [r7, #16]
 8004078:	4629      	mov	r1, r5
 800407a:	eb63 0301 	sbc.w	r3, r3, r1
 800407e:	617b      	str	r3, [r7, #20]
 8004080:	f04f 0200 	mov.w	r2, #0
 8004084:	f04f 0300 	mov.w	r3, #0
 8004088:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800408c:	4659      	mov	r1, fp
 800408e:	018b      	lsls	r3, r1, #6
 8004090:	4651      	mov	r1, sl
 8004092:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004096:	4651      	mov	r1, sl
 8004098:	018a      	lsls	r2, r1, #6
 800409a:	4651      	mov	r1, sl
 800409c:	ebb2 0801 	subs.w	r8, r2, r1
 80040a0:	4659      	mov	r1, fp
 80040a2:	eb63 0901 	sbc.w	r9, r3, r1
 80040a6:	f04f 0200 	mov.w	r2, #0
 80040aa:	f04f 0300 	mov.w	r3, #0
 80040ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040ba:	4690      	mov	r8, r2
 80040bc:	4699      	mov	r9, r3
 80040be:	4623      	mov	r3, r4
 80040c0:	eb18 0303 	adds.w	r3, r8, r3
 80040c4:	60bb      	str	r3, [r7, #8]
 80040c6:	462b      	mov	r3, r5
 80040c8:	eb49 0303 	adc.w	r3, r9, r3
 80040cc:	60fb      	str	r3, [r7, #12]
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	f04f 0300 	mov.w	r3, #0
 80040d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040da:	4629      	mov	r1, r5
 80040dc:	024b      	lsls	r3, r1, #9
 80040de:	4621      	mov	r1, r4
 80040e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040e4:	4621      	mov	r1, r4
 80040e6:	024a      	lsls	r2, r1, #9
 80040e8:	4610      	mov	r0, r2
 80040ea:	4619      	mov	r1, r3
 80040ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040ee:	2200      	movs	r2, #0
 80040f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80040f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040f8:	f7fc f8ec 	bl	80002d4 <__aeabi_uldivmod>
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	4613      	mov	r3, r2
 8004102:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004104:	e058      	b.n	80041b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004106:	4b38      	ldr	r3, [pc, #224]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	099b      	lsrs	r3, r3, #6
 800410c:	2200      	movs	r2, #0
 800410e:	4618      	mov	r0, r3
 8004110:	4611      	mov	r1, r2
 8004112:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004116:	623b      	str	r3, [r7, #32]
 8004118:	2300      	movs	r3, #0
 800411a:	627b      	str	r3, [r7, #36]	; 0x24
 800411c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004120:	4642      	mov	r2, r8
 8004122:	464b      	mov	r3, r9
 8004124:	f04f 0000 	mov.w	r0, #0
 8004128:	f04f 0100 	mov.w	r1, #0
 800412c:	0159      	lsls	r1, r3, #5
 800412e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004132:	0150      	lsls	r0, r2, #5
 8004134:	4602      	mov	r2, r0
 8004136:	460b      	mov	r3, r1
 8004138:	4641      	mov	r1, r8
 800413a:	ebb2 0a01 	subs.w	sl, r2, r1
 800413e:	4649      	mov	r1, r9
 8004140:	eb63 0b01 	sbc.w	fp, r3, r1
 8004144:	f04f 0200 	mov.w	r2, #0
 8004148:	f04f 0300 	mov.w	r3, #0
 800414c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004150:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004154:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004158:	ebb2 040a 	subs.w	r4, r2, sl
 800415c:	eb63 050b 	sbc.w	r5, r3, fp
 8004160:	f04f 0200 	mov.w	r2, #0
 8004164:	f04f 0300 	mov.w	r3, #0
 8004168:	00eb      	lsls	r3, r5, #3
 800416a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800416e:	00e2      	lsls	r2, r4, #3
 8004170:	4614      	mov	r4, r2
 8004172:	461d      	mov	r5, r3
 8004174:	4643      	mov	r3, r8
 8004176:	18e3      	adds	r3, r4, r3
 8004178:	603b      	str	r3, [r7, #0]
 800417a:	464b      	mov	r3, r9
 800417c:	eb45 0303 	adc.w	r3, r5, r3
 8004180:	607b      	str	r3, [r7, #4]
 8004182:	f04f 0200 	mov.w	r2, #0
 8004186:	f04f 0300 	mov.w	r3, #0
 800418a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800418e:	4629      	mov	r1, r5
 8004190:	028b      	lsls	r3, r1, #10
 8004192:	4621      	mov	r1, r4
 8004194:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004198:	4621      	mov	r1, r4
 800419a:	028a      	lsls	r2, r1, #10
 800419c:	4610      	mov	r0, r2
 800419e:	4619      	mov	r1, r3
 80041a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041a2:	2200      	movs	r2, #0
 80041a4:	61bb      	str	r3, [r7, #24]
 80041a6:	61fa      	str	r2, [r7, #28]
 80041a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041ac:	f7fc f892 	bl	80002d4 <__aeabi_uldivmod>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	4613      	mov	r3, r2
 80041b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80041b8:	4b0b      	ldr	r3, [pc, #44]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	0c1b      	lsrs	r3, r3, #16
 80041be:	f003 0303 	and.w	r3, r3, #3
 80041c2:	3301      	adds	r3, #1
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80041c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041d2:	e002      	b.n	80041da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041d4:	4b05      	ldr	r3, [pc, #20]	; (80041ec <HAL_RCC_GetSysClockFreq+0x204>)
 80041d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3750      	adds	r7, #80	; 0x50
 80041e0:	46bd      	mov	sp, r7
 80041e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041e6:	bf00      	nop
 80041e8:	40023800 	.word	0x40023800
 80041ec:	00f42400 	.word	0x00f42400
 80041f0:	007a1200 	.word	0x007a1200

080041f4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041f8:	4b03      	ldr	r3, [pc, #12]	; (8004208 <HAL_RCC_GetHCLKFreq+0x14>)
 80041fa:	681b      	ldr	r3, [r3, #0]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	20000000 	.word	0x20000000

0800420c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004210:	f7ff fff0 	bl	80041f4 <HAL_RCC_GetHCLKFreq>
 8004214:	4602      	mov	r2, r0
 8004216:	4b05      	ldr	r3, [pc, #20]	; (800422c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	0a9b      	lsrs	r3, r3, #10
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	4903      	ldr	r1, [pc, #12]	; (8004230 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004222:	5ccb      	ldrb	r3, [r1, r3]
 8004224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004228:	4618      	mov	r0, r3
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40023800 	.word	0x40023800
 8004230:	0800958c 	.word	0x0800958c

08004234 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004238:	f7ff ffdc 	bl	80041f4 <HAL_RCC_GetHCLKFreq>
 800423c:	4602      	mov	r2, r0
 800423e:	4b05      	ldr	r3, [pc, #20]	; (8004254 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	0b5b      	lsrs	r3, r3, #13
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	4903      	ldr	r1, [pc, #12]	; (8004258 <HAL_RCC_GetPCLK2Freq+0x24>)
 800424a:	5ccb      	ldrb	r3, [r1, r3]
 800424c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004250:	4618      	mov	r0, r3
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40023800 	.word	0x40023800
 8004258:	0800958c 	.word	0x0800958c

0800425c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	220f      	movs	r2, #15
 800426a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800426c:	4b12      	ldr	r3, [pc, #72]	; (80042b8 <HAL_RCC_GetClockConfig+0x5c>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f003 0203 	and.w	r2, r3, #3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004278:	4b0f      	ldr	r3, [pc, #60]	; (80042b8 <HAL_RCC_GetClockConfig+0x5c>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004284:	4b0c      	ldr	r3, [pc, #48]	; (80042b8 <HAL_RCC_GetClockConfig+0x5c>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004290:	4b09      	ldr	r3, [pc, #36]	; (80042b8 <HAL_RCC_GetClockConfig+0x5c>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	08db      	lsrs	r3, r3, #3
 8004296:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800429e:	4b07      	ldr	r3, [pc, #28]	; (80042bc <HAL_RCC_GetClockConfig+0x60>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 020f 	and.w	r2, r3, #15
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	601a      	str	r2, [r3, #0]
}
 80042aa:	bf00      	nop
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	40023800 	.word	0x40023800
 80042bc:	40023c00 	.word	0x40023c00

080042c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b088      	sub	sp, #32
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80042c8:	2300      	movs	r3, #0
 80042ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80042cc:	2300      	movs	r3, #0
 80042ce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80042d0:	2300      	movs	r3, #0
 80042d2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80042d4:	2300      	movs	r3, #0
 80042d6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80042d8:	2300      	movs	r3, #0
 80042da:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d012      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80042e8:	4b69      	ldr	r3, [pc, #420]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	4a68      	ldr	r2, [pc, #416]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80042f2:	6093      	str	r3, [r2, #8]
 80042f4:	4b66      	ldr	r3, [pc, #408]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042fc:	4964      	ldr	r1, [pc, #400]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800430a:	2301      	movs	r3, #1
 800430c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d017      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800431a:	4b5d      	ldr	r3, [pc, #372]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800431c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004320:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004328:	4959      	ldr	r1, [pc, #356]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800432a:	4313      	orrs	r3, r2
 800432c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004334:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004338:	d101      	bne.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800433a:	2301      	movs	r3, #1
 800433c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004346:	2301      	movs	r3, #1
 8004348:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d017      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004356:	4b4e      	ldr	r3, [pc, #312]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004358:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800435c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004364:	494a      	ldr	r1, [pc, #296]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004366:	4313      	orrs	r3, r2
 8004368:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004370:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004374:	d101      	bne.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004376:	2301      	movs	r3, #1
 8004378:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004382:	2301      	movs	r3, #1
 8004384:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004392:	2301      	movs	r3, #1
 8004394:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0320 	and.w	r3, r3, #32
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f000 808b 	beq.w	80044ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043a4:	4b3a      	ldr	r3, [pc, #232]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a8:	4a39      	ldr	r2, [pc, #228]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ae:	6413      	str	r3, [r2, #64]	; 0x40
 80043b0:	4b37      	ldr	r3, [pc, #220]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b8:	60bb      	str	r3, [r7, #8]
 80043ba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80043bc:	4b35      	ldr	r3, [pc, #212]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a34      	ldr	r2, [pc, #208]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043c8:	f7fe face 	bl	8002968 <HAL_GetTick>
 80043cc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80043ce:	e008      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043d0:	f7fe faca 	bl	8002968 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b64      	cmp	r3, #100	; 0x64
 80043dc:	d901      	bls.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e38f      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80043e2:	4b2c      	ldr	r3, [pc, #176]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d0f0      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043ee:	4b28      	ldr	r3, [pc, #160]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043f6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d035      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	429a      	cmp	r2, r3
 800440a:	d02e      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800440c:	4b20      	ldr	r3, [pc, #128]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800440e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004414:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004416:	4b1e      	ldr	r3, [pc, #120]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441a:	4a1d      	ldr	r2, [pc, #116]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800441c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004420:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004422:	4b1b      	ldr	r3, [pc, #108]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004426:	4a1a      	ldr	r2, [pc, #104]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004428:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800442c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800442e:	4a18      	ldr	r2, [pc, #96]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004434:	4b16      	ldr	r3, [pc, #88]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b01      	cmp	r3, #1
 800443e:	d114      	bne.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004440:	f7fe fa92 	bl	8002968 <HAL_GetTick>
 8004444:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004446:	e00a      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004448:	f7fe fa8e 	bl	8002968 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	f241 3288 	movw	r2, #5000	; 0x1388
 8004456:	4293      	cmp	r3, r2
 8004458:	d901      	bls.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e351      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800445e:	4b0c      	ldr	r3, [pc, #48]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d0ee      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004472:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004476:	d111      	bne.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004478:	4b05      	ldr	r3, [pc, #20]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004484:	4b04      	ldr	r3, [pc, #16]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004486:	400b      	ands	r3, r1
 8004488:	4901      	ldr	r1, [pc, #4]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800448a:	4313      	orrs	r3, r2
 800448c:	608b      	str	r3, [r1, #8]
 800448e:	e00b      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004490:	40023800 	.word	0x40023800
 8004494:	40007000 	.word	0x40007000
 8004498:	0ffffcff 	.word	0x0ffffcff
 800449c:	4bac      	ldr	r3, [pc, #688]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	4aab      	ldr	r2, [pc, #684]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044a2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80044a6:	6093      	str	r3, [r2, #8]
 80044a8:	4ba9      	ldr	r3, [pc, #676]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044b4:	49a6      	ldr	r1, [pc, #664]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0310 	and.w	r3, r3, #16
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d010      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044c6:	4ba2      	ldr	r3, [pc, #648]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044cc:	4aa0      	ldr	r2, [pc, #640]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80044d6:	4b9e      	ldr	r3, [pc, #632]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044d8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e0:	499b      	ldr	r1, [pc, #620]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00a      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044f4:	4b96      	ldr	r3, [pc, #600]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004502:	4993      	ldr	r1, [pc, #588]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004504:	4313      	orrs	r3, r2
 8004506:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00a      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004516:	4b8e      	ldr	r3, [pc, #568]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004524:	498a      	ldr	r1, [pc, #552]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004526:	4313      	orrs	r3, r2
 8004528:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00a      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004538:	4b85      	ldr	r3, [pc, #532]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800453a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800453e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004546:	4982      	ldr	r1, [pc, #520]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004548:	4313      	orrs	r3, r2
 800454a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00a      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800455a:	4b7d      	ldr	r3, [pc, #500]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800455c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004560:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004568:	4979      	ldr	r1, [pc, #484]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800456a:	4313      	orrs	r3, r2
 800456c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00a      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800457c:	4b74      	ldr	r3, [pc, #464]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800457e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004582:	f023 0203 	bic.w	r2, r3, #3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458a:	4971      	ldr	r1, [pc, #452]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800458c:	4313      	orrs	r3, r2
 800458e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00a      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800459e:	4b6c      	ldr	r3, [pc, #432]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a4:	f023 020c 	bic.w	r2, r3, #12
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045ac:	4968      	ldr	r1, [pc, #416]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00a      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045c0:	4b63      	ldr	r3, [pc, #396]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ce:	4960      	ldr	r1, [pc, #384]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00a      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045e2:	4b5b      	ldr	r3, [pc, #364]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f0:	4957      	ldr	r1, [pc, #348]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00a      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004604:	4b52      	ldr	r3, [pc, #328]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004612:	494f      	ldr	r1, [pc, #316]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004614:	4313      	orrs	r3, r2
 8004616:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004626:	4b4a      	ldr	r3, [pc, #296]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004634:	4946      	ldr	r1, [pc, #280]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004636:	4313      	orrs	r3, r2
 8004638:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00a      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004648:	4b41      	ldr	r3, [pc, #260]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800464a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800464e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004656:	493e      	ldr	r1, [pc, #248]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004658:	4313      	orrs	r3, r2
 800465a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00a      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800466a:	4b39      	ldr	r3, [pc, #228]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800466c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004670:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004678:	4935      	ldr	r1, [pc, #212]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800467a:	4313      	orrs	r3, r2
 800467c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00a      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800468c:	4b30      	ldr	r3, [pc, #192]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800468e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004692:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800469a:	492d      	ldr	r1, [pc, #180]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800469c:	4313      	orrs	r3, r2
 800469e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d011      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80046ae:	4b28      	ldr	r3, [pc, #160]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046bc:	4924      	ldr	r1, [pc, #144]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046cc:	d101      	bne.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80046ce:	2301      	movs	r3, #1
 80046d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0308 	and.w	r3, r3, #8
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80046de:	2301      	movs	r3, #1
 80046e0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00a      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046ee:	4b18      	ldr	r3, [pc, #96]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046fc:	4914      	ldr	r1, [pc, #80]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00b      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004710:	4b0f      	ldr	r3, [pc, #60]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004716:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004720:	490b      	ldr	r1, [pc, #44]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004722:	4313      	orrs	r3, r2
 8004724:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00f      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004734:	4b06      	ldr	r3, [pc, #24]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800473a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004744:	4902      	ldr	r1, [pc, #8]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004746:	4313      	orrs	r3, r2
 8004748:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800474c:	e002      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800474e:	bf00      	nop
 8004750:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00b      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004760:	4b8a      	ldr	r3, [pc, #552]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004762:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004766:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004770:	4986      	ldr	r1, [pc, #536]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004772:	4313      	orrs	r3, r2
 8004774:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00b      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004784:	4b81      	ldr	r3, [pc, #516]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004786:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800478a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004794:	497d      	ldr	r1, [pc, #500]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004796:	4313      	orrs	r3, r2
 8004798:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d006      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 80d6 	beq.w	800495c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80047b0:	4b76      	ldr	r3, [pc, #472]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a75      	ldr	r2, [pc, #468]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047bc:	f7fe f8d4 	bl	8002968 <HAL_GetTick>
 80047c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047c2:	e008      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80047c4:	f7fe f8d0 	bl	8002968 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b64      	cmp	r3, #100	; 0x64
 80047d0:	d901      	bls.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e195      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047d6:	4b6d      	ldr	r3, [pc, #436]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1f0      	bne.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d021      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d11d      	bne.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80047f6:	4b65      	ldr	r3, [pc, #404]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047fc:	0c1b      	lsrs	r3, r3, #16
 80047fe:	f003 0303 	and.w	r3, r3, #3
 8004802:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004804:	4b61      	ldr	r3, [pc, #388]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004806:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800480a:	0e1b      	lsrs	r3, r3, #24
 800480c:	f003 030f 	and.w	r3, r3, #15
 8004810:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	019a      	lsls	r2, r3, #6
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	041b      	lsls	r3, r3, #16
 800481c:	431a      	orrs	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	061b      	lsls	r3, r3, #24
 8004822:	431a      	orrs	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	071b      	lsls	r3, r3, #28
 800482a:	4958      	ldr	r1, [pc, #352]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800482c:	4313      	orrs	r3, r2
 800482e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d004      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004842:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004846:	d00a      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004850:	2b00      	cmp	r3, #0
 8004852:	d02e      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004858:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800485c:	d129      	bne.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800485e:	4b4b      	ldr	r3, [pc, #300]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004864:	0c1b      	lsrs	r3, r3, #16
 8004866:	f003 0303 	and.w	r3, r3, #3
 800486a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800486c:	4b47      	ldr	r3, [pc, #284]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800486e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004872:	0f1b      	lsrs	r3, r3, #28
 8004874:	f003 0307 	and.w	r3, r3, #7
 8004878:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	019a      	lsls	r2, r3, #6
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	041b      	lsls	r3, r3, #16
 8004884:	431a      	orrs	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	061b      	lsls	r3, r3, #24
 800488c:	431a      	orrs	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	071b      	lsls	r3, r3, #28
 8004892:	493e      	ldr	r1, [pc, #248]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004894:	4313      	orrs	r3, r2
 8004896:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800489a:	4b3c      	ldr	r3, [pc, #240]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800489c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048a0:	f023 021f 	bic.w	r2, r3, #31
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a8:	3b01      	subs	r3, #1
 80048aa:	4938      	ldr	r1, [pc, #224]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d01d      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048be:	4b33      	ldr	r3, [pc, #204]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048c4:	0e1b      	lsrs	r3, r3, #24
 80048c6:	f003 030f 	and.w	r3, r3, #15
 80048ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80048cc:	4b2f      	ldr	r3, [pc, #188]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048d2:	0f1b      	lsrs	r3, r3, #28
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	019a      	lsls	r2, r3, #6
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	041b      	lsls	r3, r3, #16
 80048e6:	431a      	orrs	r2, r3
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	061b      	lsls	r3, r3, #24
 80048ec:	431a      	orrs	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	071b      	lsls	r3, r3, #28
 80048f2:	4926      	ldr	r1, [pc, #152]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d011      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	019a      	lsls	r2, r3, #6
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	041b      	lsls	r3, r3, #16
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	061b      	lsls	r3, r3, #24
 800491a:	431a      	orrs	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	071b      	lsls	r3, r3, #28
 8004922:	491a      	ldr	r1, [pc, #104]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004924:	4313      	orrs	r3, r2
 8004926:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800492a:	4b18      	ldr	r3, [pc, #96]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a17      	ldr	r2, [pc, #92]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004930:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004934:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004936:	f7fe f817 	bl	8002968 <HAL_GetTick>
 800493a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800493c:	e008      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800493e:	f7fe f813 	bl	8002968 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b64      	cmp	r3, #100	; 0x64
 800494a:	d901      	bls.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e0d8      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004950:	4b0e      	ldr	r3, [pc, #56]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d0f0      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	2b01      	cmp	r3, #1
 8004960:	f040 80ce 	bne.w	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004964:	4b09      	ldr	r3, [pc, #36]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a08      	ldr	r2, [pc, #32]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800496a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800496e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004970:	f7fd fffa 	bl	8002968 <HAL_GetTick>
 8004974:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004976:	e00b      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004978:	f7fd fff6 	bl	8002968 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b64      	cmp	r3, #100	; 0x64
 8004984:	d904      	bls.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e0bb      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800498a:	bf00      	nop
 800498c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004990:	4b5e      	ldr	r3, [pc, #376]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004998:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800499c:	d0ec      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d009      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d02e      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d12a      	bne.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80049c6:	4b51      	ldr	r3, [pc, #324]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049cc:	0c1b      	lsrs	r3, r3, #16
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80049d4:	4b4d      	ldr	r3, [pc, #308]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049da:	0f1b      	lsrs	r3, r3, #28
 80049dc:	f003 0307 	and.w	r3, r3, #7
 80049e0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	019a      	lsls	r2, r3, #6
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	041b      	lsls	r3, r3, #16
 80049ec:	431a      	orrs	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	061b      	lsls	r3, r3, #24
 80049f4:	431a      	orrs	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	071b      	lsls	r3, r3, #28
 80049fa:	4944      	ldr	r1, [pc, #272]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004a02:	4b42      	ldr	r3, [pc, #264]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a08:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a10:	3b01      	subs	r3, #1
 8004a12:	021b      	lsls	r3, r3, #8
 8004a14:	493d      	ldr	r1, [pc, #244]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d022      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a30:	d11d      	bne.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a32:	4b36      	ldr	r3, [pc, #216]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a38:	0e1b      	lsrs	r3, r3, #24
 8004a3a:	f003 030f 	and.w	r3, r3, #15
 8004a3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a40:	4b32      	ldr	r3, [pc, #200]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a46:	0f1b      	lsrs	r3, r3, #28
 8004a48:	f003 0307 	and.w	r3, r3, #7
 8004a4c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	019a      	lsls	r2, r3, #6
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a1b      	ldr	r3, [r3, #32]
 8004a58:	041b      	lsls	r3, r3, #16
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	061b      	lsls	r3, r3, #24
 8004a60:	431a      	orrs	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	071b      	lsls	r3, r3, #28
 8004a66:	4929      	ldr	r1, [pc, #164]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0308 	and.w	r3, r3, #8
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d028      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a7a:	4b24      	ldr	r3, [pc, #144]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a80:	0e1b      	lsrs	r3, r3, #24
 8004a82:	f003 030f 	and.w	r3, r3, #15
 8004a86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a88:	4b20      	ldr	r3, [pc, #128]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8e:	0c1b      	lsrs	r3, r3, #16
 8004a90:	f003 0303 	and.w	r3, r3, #3
 8004a94:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	019a      	lsls	r2, r3, #6
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	041b      	lsls	r3, r3, #16
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	061b      	lsls	r3, r3, #24
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	69db      	ldr	r3, [r3, #28]
 8004aac:	071b      	lsls	r3, r3, #28
 8004aae:	4917      	ldr	r1, [pc, #92]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004ab6:	4b15      	ldr	r3, [pc, #84]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004abc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac4:	4911      	ldr	r1, [pc, #68]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004acc:	4b0f      	ldr	r3, [pc, #60]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a0e      	ldr	r2, [pc, #56]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ad8:	f7fd ff46 	bl	8002968 <HAL_GetTick>
 8004adc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ade:	e008      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ae0:	f7fd ff42 	bl	8002968 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b64      	cmp	r3, #100	; 0x64
 8004aec:	d901      	bls.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e007      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004af2:	4b06      	ldr	r3, [pc, #24]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004afa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004afe:	d1ef      	bne.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3720      	adds	r7, #32
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	40023800 	.word	0x40023800

08004b10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e049      	b.n	8004bb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d106      	bne.n	8004b3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f841 	bl	8004bbe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	3304      	adds	r3, #4
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	4610      	mov	r0, r2
 8004b50:	f000 fa00 	bl	8004f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b083      	sub	sp, #12
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004bc6:	bf00      	nop
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
	...

08004bd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d001      	beq.n	8004bec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e054      	b.n	8004c96 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2202      	movs	r2, #2
 8004bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68da      	ldr	r2, [r3, #12]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0201 	orr.w	r2, r2, #1
 8004c02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a26      	ldr	r2, [pc, #152]	; (8004ca4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d022      	beq.n	8004c54 <HAL_TIM_Base_Start_IT+0x80>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c16:	d01d      	beq.n	8004c54 <HAL_TIM_Base_Start_IT+0x80>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a22      	ldr	r2, [pc, #136]	; (8004ca8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d018      	beq.n	8004c54 <HAL_TIM_Base_Start_IT+0x80>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a21      	ldr	r2, [pc, #132]	; (8004cac <HAL_TIM_Base_Start_IT+0xd8>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d013      	beq.n	8004c54 <HAL_TIM_Base_Start_IT+0x80>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a1f      	ldr	r2, [pc, #124]	; (8004cb0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d00e      	beq.n	8004c54 <HAL_TIM_Base_Start_IT+0x80>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a1e      	ldr	r2, [pc, #120]	; (8004cb4 <HAL_TIM_Base_Start_IT+0xe0>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d009      	beq.n	8004c54 <HAL_TIM_Base_Start_IT+0x80>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a1c      	ldr	r2, [pc, #112]	; (8004cb8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d004      	beq.n	8004c54 <HAL_TIM_Base_Start_IT+0x80>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a1b      	ldr	r2, [pc, #108]	; (8004cbc <HAL_TIM_Base_Start_IT+0xe8>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d115      	bne.n	8004c80 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689a      	ldr	r2, [r3, #8]
 8004c5a:	4b19      	ldr	r3, [pc, #100]	; (8004cc0 <HAL_TIM_Base_Start_IT+0xec>)
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2b06      	cmp	r3, #6
 8004c64:	d015      	beq.n	8004c92 <HAL_TIM_Base_Start_IT+0xbe>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c6c:	d011      	beq.n	8004c92 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f042 0201 	orr.w	r2, r2, #1
 8004c7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c7e:	e008      	b.n	8004c92 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0201 	orr.w	r2, r2, #1
 8004c8e:	601a      	str	r2, [r3, #0]
 8004c90:	e000      	b.n	8004c94 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3714      	adds	r7, #20
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	40010000 	.word	0x40010000
 8004ca8:	40000400 	.word	0x40000400
 8004cac:	40000800 	.word	0x40000800
 8004cb0:	40000c00 	.word	0x40000c00
 8004cb4:	40010400 	.word	0x40010400
 8004cb8:	40014000 	.word	0x40014000
 8004cbc:	40001800 	.word	0x40001800
 8004cc0:	00010007 	.word	0x00010007

08004cc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d122      	bne.n	8004d20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f003 0302 	and.w	r3, r3, #2
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d11b      	bne.n	8004d20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f06f 0202 	mvn.w	r2, #2
 8004cf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	f003 0303 	and.w	r3, r3, #3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f905 	bl	8004f16 <HAL_TIM_IC_CaptureCallback>
 8004d0c:	e005      	b.n	8004d1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f8f7 	bl	8004f02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 f908 	bl	8004f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	f003 0304 	and.w	r3, r3, #4
 8004d2a:	2b04      	cmp	r3, #4
 8004d2c:	d122      	bne.n	8004d74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	2b04      	cmp	r3, #4
 8004d3a:	d11b      	bne.n	8004d74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f06f 0204 	mvn.w	r2, #4
 8004d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2202      	movs	r2, #2
 8004d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d003      	beq.n	8004d62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f8db 	bl	8004f16 <HAL_TIM_IC_CaptureCallback>
 8004d60:	e005      	b.n	8004d6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f8cd 	bl	8004f02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 f8de 	bl	8004f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	f003 0308 	and.w	r3, r3, #8
 8004d7e:	2b08      	cmp	r3, #8
 8004d80:	d122      	bne.n	8004dc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f003 0308 	and.w	r3, r3, #8
 8004d8c:	2b08      	cmp	r3, #8
 8004d8e:	d11b      	bne.n	8004dc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f06f 0208 	mvn.w	r2, #8
 8004d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2204      	movs	r2, #4
 8004d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	f003 0303 	and.w	r3, r3, #3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d003      	beq.n	8004db6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f8b1 	bl	8004f16 <HAL_TIM_IC_CaptureCallback>
 8004db4:	e005      	b.n	8004dc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f8a3 	bl	8004f02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 f8b4 	bl	8004f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	f003 0310 	and.w	r3, r3, #16
 8004dd2:	2b10      	cmp	r3, #16
 8004dd4:	d122      	bne.n	8004e1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	f003 0310 	and.w	r3, r3, #16
 8004de0:	2b10      	cmp	r3, #16
 8004de2:	d11b      	bne.n	8004e1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f06f 0210 	mvn.w	r2, #16
 8004dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2208      	movs	r2, #8
 8004df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	69db      	ldr	r3, [r3, #28]
 8004dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d003      	beq.n	8004e0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f887 	bl	8004f16 <HAL_TIM_IC_CaptureCallback>
 8004e08:	e005      	b.n	8004e16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f879 	bl	8004f02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 f88a 	bl	8004f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d10e      	bne.n	8004e48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d107      	bne.n	8004e48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f06f 0201 	mvn.w	r2, #1
 8004e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7fd fa36 	bl	80022b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e52:	2b80      	cmp	r3, #128	; 0x80
 8004e54:	d10e      	bne.n	8004e74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e60:	2b80      	cmp	r3, #128	; 0x80
 8004e62:	d107      	bne.n	8004e74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 f91a 	bl	80050a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e82:	d10e      	bne.n	8004ea2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e8e:	2b80      	cmp	r3, #128	; 0x80
 8004e90:	d107      	bne.n	8004ea2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 f90d 	bl	80050bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eac:	2b40      	cmp	r3, #64	; 0x40
 8004eae:	d10e      	bne.n	8004ece <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eba:	2b40      	cmp	r3, #64	; 0x40
 8004ebc:	d107      	bne.n	8004ece <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 f838 	bl	8004f3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	f003 0320 	and.w	r3, r3, #32
 8004ed8:	2b20      	cmp	r3, #32
 8004eda:	d10e      	bne.n	8004efa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	f003 0320 	and.w	r3, r3, #32
 8004ee6:	2b20      	cmp	r3, #32
 8004ee8:	d107      	bne.n	8004efa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f06f 0220 	mvn.w	r2, #32
 8004ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 f8cd 	bl	8005094 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004efa:	bf00      	nop
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b083      	sub	sp, #12
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f0a:	bf00      	nop
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr

08004f16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f16:	b480      	push	{r7}
 8004f18:	b083      	sub	sp, #12
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f1e:	bf00      	nop
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr

08004f2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f2a:	b480      	push	{r7}
 8004f2c:	b083      	sub	sp, #12
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f32:	bf00      	nop
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b083      	sub	sp, #12
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f46:	bf00      	nop
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
	...

08004f54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a40      	ldr	r2, [pc, #256]	; (8005068 <TIM_Base_SetConfig+0x114>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d013      	beq.n	8004f94 <TIM_Base_SetConfig+0x40>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f72:	d00f      	beq.n	8004f94 <TIM_Base_SetConfig+0x40>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a3d      	ldr	r2, [pc, #244]	; (800506c <TIM_Base_SetConfig+0x118>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d00b      	beq.n	8004f94 <TIM_Base_SetConfig+0x40>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a3c      	ldr	r2, [pc, #240]	; (8005070 <TIM_Base_SetConfig+0x11c>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d007      	beq.n	8004f94 <TIM_Base_SetConfig+0x40>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a3b      	ldr	r2, [pc, #236]	; (8005074 <TIM_Base_SetConfig+0x120>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d003      	beq.n	8004f94 <TIM_Base_SetConfig+0x40>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a3a      	ldr	r2, [pc, #232]	; (8005078 <TIM_Base_SetConfig+0x124>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d108      	bne.n	8004fa6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a2f      	ldr	r2, [pc, #188]	; (8005068 <TIM_Base_SetConfig+0x114>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d02b      	beq.n	8005006 <TIM_Base_SetConfig+0xb2>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb4:	d027      	beq.n	8005006 <TIM_Base_SetConfig+0xb2>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a2c      	ldr	r2, [pc, #176]	; (800506c <TIM_Base_SetConfig+0x118>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d023      	beq.n	8005006 <TIM_Base_SetConfig+0xb2>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a2b      	ldr	r2, [pc, #172]	; (8005070 <TIM_Base_SetConfig+0x11c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d01f      	beq.n	8005006 <TIM_Base_SetConfig+0xb2>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a2a      	ldr	r2, [pc, #168]	; (8005074 <TIM_Base_SetConfig+0x120>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d01b      	beq.n	8005006 <TIM_Base_SetConfig+0xb2>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a29      	ldr	r2, [pc, #164]	; (8005078 <TIM_Base_SetConfig+0x124>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d017      	beq.n	8005006 <TIM_Base_SetConfig+0xb2>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a28      	ldr	r2, [pc, #160]	; (800507c <TIM_Base_SetConfig+0x128>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d013      	beq.n	8005006 <TIM_Base_SetConfig+0xb2>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a27      	ldr	r2, [pc, #156]	; (8005080 <TIM_Base_SetConfig+0x12c>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d00f      	beq.n	8005006 <TIM_Base_SetConfig+0xb2>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a26      	ldr	r2, [pc, #152]	; (8005084 <TIM_Base_SetConfig+0x130>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d00b      	beq.n	8005006 <TIM_Base_SetConfig+0xb2>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a25      	ldr	r2, [pc, #148]	; (8005088 <TIM_Base_SetConfig+0x134>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d007      	beq.n	8005006 <TIM_Base_SetConfig+0xb2>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a24      	ldr	r2, [pc, #144]	; (800508c <TIM_Base_SetConfig+0x138>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d003      	beq.n	8005006 <TIM_Base_SetConfig+0xb2>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a23      	ldr	r2, [pc, #140]	; (8005090 <TIM_Base_SetConfig+0x13c>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d108      	bne.n	8005018 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800500c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	4313      	orrs	r3, r2
 8005016:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	4313      	orrs	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	689a      	ldr	r2, [r3, #8]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a0a      	ldr	r2, [pc, #40]	; (8005068 <TIM_Base_SetConfig+0x114>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d003      	beq.n	800504c <TIM_Base_SetConfig+0xf8>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a0c      	ldr	r2, [pc, #48]	; (8005078 <TIM_Base_SetConfig+0x124>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d103      	bne.n	8005054 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	691a      	ldr	r2, [r3, #16]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	615a      	str	r2, [r3, #20]
}
 800505a:	bf00      	nop
 800505c:	3714      	adds	r7, #20
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	40010000 	.word	0x40010000
 800506c:	40000400 	.word	0x40000400
 8005070:	40000800 	.word	0x40000800
 8005074:	40000c00 	.word	0x40000c00
 8005078:	40010400 	.word	0x40010400
 800507c:	40014000 	.word	0x40014000
 8005080:	40014400 	.word	0x40014400
 8005084:	40014800 	.word	0x40014800
 8005088:	40001800 	.word	0x40001800
 800508c:	40001c00 	.word	0x40001c00
 8005090:	40002000 	.word	0x40002000

08005094 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e040      	b.n	8005164 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d106      	bne.n	80050f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7fd f9d6 	bl	80024a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2224      	movs	r2, #36	; 0x24
 80050fc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 0201 	bic.w	r2, r2, #1
 800510c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f8b0 	bl	8005274 <UART_SetConfig>
 8005114:	4603      	mov	r3, r0
 8005116:	2b01      	cmp	r3, #1
 8005118:	d101      	bne.n	800511e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e022      	b.n	8005164 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	2b00      	cmp	r3, #0
 8005124:	d002      	beq.n	800512c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 fb08 	bl	800573c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800513a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689a      	ldr	r2, [r3, #8]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800514a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f042 0201 	orr.w	r2, r2, #1
 800515a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 fb8f 	bl	8005880 <UART_CheckIdleState>
 8005162:	4603      	mov	r3, r0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b08a      	sub	sp, #40	; 0x28
 8005170:	af02      	add	r7, sp, #8
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	603b      	str	r3, [r7, #0]
 8005178:	4613      	mov	r3, r2
 800517a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005180:	2b20      	cmp	r3, #32
 8005182:	d171      	bne.n	8005268 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d002      	beq.n	8005190 <HAL_UART_Transmit+0x24>
 800518a:	88fb      	ldrh	r3, [r7, #6]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e06a      	b.n	800526a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2221      	movs	r2, #33	; 0x21
 80051a0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051a2:	f7fd fbe1 	bl	8002968 <HAL_GetTick>
 80051a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	88fa      	ldrh	r2, [r7, #6]
 80051ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	88fa      	ldrh	r2, [r7, #6]
 80051b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c0:	d108      	bne.n	80051d4 <HAL_UART_Transmit+0x68>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d104      	bne.n	80051d4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80051ca:	2300      	movs	r3, #0
 80051cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	61bb      	str	r3, [r7, #24]
 80051d2:	e003      	b.n	80051dc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051d8:	2300      	movs	r3, #0
 80051da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80051dc:	e02c      	b.n	8005238 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	9300      	str	r3, [sp, #0]
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	2200      	movs	r2, #0
 80051e6:	2180      	movs	r1, #128	; 0x80
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f000 fb96 	bl	800591a <UART_WaitOnFlagUntilTimeout>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d001      	beq.n	80051f8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e038      	b.n	800526a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10b      	bne.n	8005216 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	881b      	ldrh	r3, [r3, #0]
 8005202:	461a      	mov	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800520c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	3302      	adds	r3, #2
 8005212:	61bb      	str	r3, [r7, #24]
 8005214:	e007      	b.n	8005226 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	781a      	ldrb	r2, [r3, #0]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	3301      	adds	r3, #1
 8005224:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800522c:	b29b      	uxth	r3, r3
 800522e:	3b01      	subs	r3, #1
 8005230:	b29a      	uxth	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800523e:	b29b      	uxth	r3, r3
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1cc      	bne.n	80051de <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	2200      	movs	r2, #0
 800524c:	2140      	movs	r1, #64	; 0x40
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 fb63 	bl	800591a <UART_WaitOnFlagUntilTimeout>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e005      	b.n	800526a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2220      	movs	r2, #32
 8005262:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005264:	2300      	movs	r3, #0
 8005266:	e000      	b.n	800526a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005268:	2302      	movs	r3, #2
  }
}
 800526a:	4618      	mov	r0, r3
 800526c:	3720      	adds	r7, #32
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
	...

08005274 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b088      	sub	sp, #32
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800527c:	2300      	movs	r3, #0
 800527e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	431a      	orrs	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	431a      	orrs	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	69db      	ldr	r3, [r3, #28]
 8005294:	4313      	orrs	r3, r2
 8005296:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	4ba6      	ldr	r3, [pc, #664]	; (8005538 <UART_SetConfig+0x2c4>)
 80052a0:	4013      	ands	r3, r2
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	6812      	ldr	r2, [r2, #0]
 80052a6:	6979      	ldr	r1, [r7, #20]
 80052a8:	430b      	orrs	r3, r1
 80052aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68da      	ldr	r2, [r3, #12]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	430a      	orrs	r2, r1
 80052c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	430a      	orrs	r2, r1
 80052e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a94      	ldr	r2, [pc, #592]	; (800553c <UART_SetConfig+0x2c8>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d120      	bne.n	8005332 <UART_SetConfig+0xbe>
 80052f0:	4b93      	ldr	r3, [pc, #588]	; (8005540 <UART_SetConfig+0x2cc>)
 80052f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f6:	f003 0303 	and.w	r3, r3, #3
 80052fa:	2b03      	cmp	r3, #3
 80052fc:	d816      	bhi.n	800532c <UART_SetConfig+0xb8>
 80052fe:	a201      	add	r2, pc, #4	; (adr r2, 8005304 <UART_SetConfig+0x90>)
 8005300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005304:	08005315 	.word	0x08005315
 8005308:	08005321 	.word	0x08005321
 800530c:	0800531b 	.word	0x0800531b
 8005310:	08005327 	.word	0x08005327
 8005314:	2301      	movs	r3, #1
 8005316:	77fb      	strb	r3, [r7, #31]
 8005318:	e150      	b.n	80055bc <UART_SetConfig+0x348>
 800531a:	2302      	movs	r3, #2
 800531c:	77fb      	strb	r3, [r7, #31]
 800531e:	e14d      	b.n	80055bc <UART_SetConfig+0x348>
 8005320:	2304      	movs	r3, #4
 8005322:	77fb      	strb	r3, [r7, #31]
 8005324:	e14a      	b.n	80055bc <UART_SetConfig+0x348>
 8005326:	2308      	movs	r3, #8
 8005328:	77fb      	strb	r3, [r7, #31]
 800532a:	e147      	b.n	80055bc <UART_SetConfig+0x348>
 800532c:	2310      	movs	r3, #16
 800532e:	77fb      	strb	r3, [r7, #31]
 8005330:	e144      	b.n	80055bc <UART_SetConfig+0x348>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a83      	ldr	r2, [pc, #524]	; (8005544 <UART_SetConfig+0x2d0>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d132      	bne.n	80053a2 <UART_SetConfig+0x12e>
 800533c:	4b80      	ldr	r3, [pc, #512]	; (8005540 <UART_SetConfig+0x2cc>)
 800533e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005342:	f003 030c 	and.w	r3, r3, #12
 8005346:	2b0c      	cmp	r3, #12
 8005348:	d828      	bhi.n	800539c <UART_SetConfig+0x128>
 800534a:	a201      	add	r2, pc, #4	; (adr r2, 8005350 <UART_SetConfig+0xdc>)
 800534c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005350:	08005385 	.word	0x08005385
 8005354:	0800539d 	.word	0x0800539d
 8005358:	0800539d 	.word	0x0800539d
 800535c:	0800539d 	.word	0x0800539d
 8005360:	08005391 	.word	0x08005391
 8005364:	0800539d 	.word	0x0800539d
 8005368:	0800539d 	.word	0x0800539d
 800536c:	0800539d 	.word	0x0800539d
 8005370:	0800538b 	.word	0x0800538b
 8005374:	0800539d 	.word	0x0800539d
 8005378:	0800539d 	.word	0x0800539d
 800537c:	0800539d 	.word	0x0800539d
 8005380:	08005397 	.word	0x08005397
 8005384:	2300      	movs	r3, #0
 8005386:	77fb      	strb	r3, [r7, #31]
 8005388:	e118      	b.n	80055bc <UART_SetConfig+0x348>
 800538a:	2302      	movs	r3, #2
 800538c:	77fb      	strb	r3, [r7, #31]
 800538e:	e115      	b.n	80055bc <UART_SetConfig+0x348>
 8005390:	2304      	movs	r3, #4
 8005392:	77fb      	strb	r3, [r7, #31]
 8005394:	e112      	b.n	80055bc <UART_SetConfig+0x348>
 8005396:	2308      	movs	r3, #8
 8005398:	77fb      	strb	r3, [r7, #31]
 800539a:	e10f      	b.n	80055bc <UART_SetConfig+0x348>
 800539c:	2310      	movs	r3, #16
 800539e:	77fb      	strb	r3, [r7, #31]
 80053a0:	e10c      	b.n	80055bc <UART_SetConfig+0x348>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a68      	ldr	r2, [pc, #416]	; (8005548 <UART_SetConfig+0x2d4>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d120      	bne.n	80053ee <UART_SetConfig+0x17a>
 80053ac:	4b64      	ldr	r3, [pc, #400]	; (8005540 <UART_SetConfig+0x2cc>)
 80053ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80053b6:	2b30      	cmp	r3, #48	; 0x30
 80053b8:	d013      	beq.n	80053e2 <UART_SetConfig+0x16e>
 80053ba:	2b30      	cmp	r3, #48	; 0x30
 80053bc:	d814      	bhi.n	80053e8 <UART_SetConfig+0x174>
 80053be:	2b20      	cmp	r3, #32
 80053c0:	d009      	beq.n	80053d6 <UART_SetConfig+0x162>
 80053c2:	2b20      	cmp	r3, #32
 80053c4:	d810      	bhi.n	80053e8 <UART_SetConfig+0x174>
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d002      	beq.n	80053d0 <UART_SetConfig+0x15c>
 80053ca:	2b10      	cmp	r3, #16
 80053cc:	d006      	beq.n	80053dc <UART_SetConfig+0x168>
 80053ce:	e00b      	b.n	80053e8 <UART_SetConfig+0x174>
 80053d0:	2300      	movs	r3, #0
 80053d2:	77fb      	strb	r3, [r7, #31]
 80053d4:	e0f2      	b.n	80055bc <UART_SetConfig+0x348>
 80053d6:	2302      	movs	r3, #2
 80053d8:	77fb      	strb	r3, [r7, #31]
 80053da:	e0ef      	b.n	80055bc <UART_SetConfig+0x348>
 80053dc:	2304      	movs	r3, #4
 80053de:	77fb      	strb	r3, [r7, #31]
 80053e0:	e0ec      	b.n	80055bc <UART_SetConfig+0x348>
 80053e2:	2308      	movs	r3, #8
 80053e4:	77fb      	strb	r3, [r7, #31]
 80053e6:	e0e9      	b.n	80055bc <UART_SetConfig+0x348>
 80053e8:	2310      	movs	r3, #16
 80053ea:	77fb      	strb	r3, [r7, #31]
 80053ec:	e0e6      	b.n	80055bc <UART_SetConfig+0x348>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a56      	ldr	r2, [pc, #344]	; (800554c <UART_SetConfig+0x2d8>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d120      	bne.n	800543a <UART_SetConfig+0x1c6>
 80053f8:	4b51      	ldr	r3, [pc, #324]	; (8005540 <UART_SetConfig+0x2cc>)
 80053fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005402:	2bc0      	cmp	r3, #192	; 0xc0
 8005404:	d013      	beq.n	800542e <UART_SetConfig+0x1ba>
 8005406:	2bc0      	cmp	r3, #192	; 0xc0
 8005408:	d814      	bhi.n	8005434 <UART_SetConfig+0x1c0>
 800540a:	2b80      	cmp	r3, #128	; 0x80
 800540c:	d009      	beq.n	8005422 <UART_SetConfig+0x1ae>
 800540e:	2b80      	cmp	r3, #128	; 0x80
 8005410:	d810      	bhi.n	8005434 <UART_SetConfig+0x1c0>
 8005412:	2b00      	cmp	r3, #0
 8005414:	d002      	beq.n	800541c <UART_SetConfig+0x1a8>
 8005416:	2b40      	cmp	r3, #64	; 0x40
 8005418:	d006      	beq.n	8005428 <UART_SetConfig+0x1b4>
 800541a:	e00b      	b.n	8005434 <UART_SetConfig+0x1c0>
 800541c:	2300      	movs	r3, #0
 800541e:	77fb      	strb	r3, [r7, #31]
 8005420:	e0cc      	b.n	80055bc <UART_SetConfig+0x348>
 8005422:	2302      	movs	r3, #2
 8005424:	77fb      	strb	r3, [r7, #31]
 8005426:	e0c9      	b.n	80055bc <UART_SetConfig+0x348>
 8005428:	2304      	movs	r3, #4
 800542a:	77fb      	strb	r3, [r7, #31]
 800542c:	e0c6      	b.n	80055bc <UART_SetConfig+0x348>
 800542e:	2308      	movs	r3, #8
 8005430:	77fb      	strb	r3, [r7, #31]
 8005432:	e0c3      	b.n	80055bc <UART_SetConfig+0x348>
 8005434:	2310      	movs	r3, #16
 8005436:	77fb      	strb	r3, [r7, #31]
 8005438:	e0c0      	b.n	80055bc <UART_SetConfig+0x348>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a44      	ldr	r2, [pc, #272]	; (8005550 <UART_SetConfig+0x2dc>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d125      	bne.n	8005490 <UART_SetConfig+0x21c>
 8005444:	4b3e      	ldr	r3, [pc, #248]	; (8005540 <UART_SetConfig+0x2cc>)
 8005446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800544a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800544e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005452:	d017      	beq.n	8005484 <UART_SetConfig+0x210>
 8005454:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005458:	d817      	bhi.n	800548a <UART_SetConfig+0x216>
 800545a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800545e:	d00b      	beq.n	8005478 <UART_SetConfig+0x204>
 8005460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005464:	d811      	bhi.n	800548a <UART_SetConfig+0x216>
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <UART_SetConfig+0x1fe>
 800546a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800546e:	d006      	beq.n	800547e <UART_SetConfig+0x20a>
 8005470:	e00b      	b.n	800548a <UART_SetConfig+0x216>
 8005472:	2300      	movs	r3, #0
 8005474:	77fb      	strb	r3, [r7, #31]
 8005476:	e0a1      	b.n	80055bc <UART_SetConfig+0x348>
 8005478:	2302      	movs	r3, #2
 800547a:	77fb      	strb	r3, [r7, #31]
 800547c:	e09e      	b.n	80055bc <UART_SetConfig+0x348>
 800547e:	2304      	movs	r3, #4
 8005480:	77fb      	strb	r3, [r7, #31]
 8005482:	e09b      	b.n	80055bc <UART_SetConfig+0x348>
 8005484:	2308      	movs	r3, #8
 8005486:	77fb      	strb	r3, [r7, #31]
 8005488:	e098      	b.n	80055bc <UART_SetConfig+0x348>
 800548a:	2310      	movs	r3, #16
 800548c:	77fb      	strb	r3, [r7, #31]
 800548e:	e095      	b.n	80055bc <UART_SetConfig+0x348>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a2f      	ldr	r2, [pc, #188]	; (8005554 <UART_SetConfig+0x2e0>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d125      	bne.n	80054e6 <UART_SetConfig+0x272>
 800549a:	4b29      	ldr	r3, [pc, #164]	; (8005540 <UART_SetConfig+0x2cc>)
 800549c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80054a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054a8:	d017      	beq.n	80054da <UART_SetConfig+0x266>
 80054aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054ae:	d817      	bhi.n	80054e0 <UART_SetConfig+0x26c>
 80054b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054b4:	d00b      	beq.n	80054ce <UART_SetConfig+0x25a>
 80054b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054ba:	d811      	bhi.n	80054e0 <UART_SetConfig+0x26c>
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d003      	beq.n	80054c8 <UART_SetConfig+0x254>
 80054c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054c4:	d006      	beq.n	80054d4 <UART_SetConfig+0x260>
 80054c6:	e00b      	b.n	80054e0 <UART_SetConfig+0x26c>
 80054c8:	2301      	movs	r3, #1
 80054ca:	77fb      	strb	r3, [r7, #31]
 80054cc:	e076      	b.n	80055bc <UART_SetConfig+0x348>
 80054ce:	2302      	movs	r3, #2
 80054d0:	77fb      	strb	r3, [r7, #31]
 80054d2:	e073      	b.n	80055bc <UART_SetConfig+0x348>
 80054d4:	2304      	movs	r3, #4
 80054d6:	77fb      	strb	r3, [r7, #31]
 80054d8:	e070      	b.n	80055bc <UART_SetConfig+0x348>
 80054da:	2308      	movs	r3, #8
 80054dc:	77fb      	strb	r3, [r7, #31]
 80054de:	e06d      	b.n	80055bc <UART_SetConfig+0x348>
 80054e0:	2310      	movs	r3, #16
 80054e2:	77fb      	strb	r3, [r7, #31]
 80054e4:	e06a      	b.n	80055bc <UART_SetConfig+0x348>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a1b      	ldr	r2, [pc, #108]	; (8005558 <UART_SetConfig+0x2e4>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d138      	bne.n	8005562 <UART_SetConfig+0x2ee>
 80054f0:	4b13      	ldr	r3, [pc, #76]	; (8005540 <UART_SetConfig+0x2cc>)
 80054f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80054fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054fe:	d017      	beq.n	8005530 <UART_SetConfig+0x2bc>
 8005500:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005504:	d82a      	bhi.n	800555c <UART_SetConfig+0x2e8>
 8005506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800550a:	d00b      	beq.n	8005524 <UART_SetConfig+0x2b0>
 800550c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005510:	d824      	bhi.n	800555c <UART_SetConfig+0x2e8>
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <UART_SetConfig+0x2aa>
 8005516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800551a:	d006      	beq.n	800552a <UART_SetConfig+0x2b6>
 800551c:	e01e      	b.n	800555c <UART_SetConfig+0x2e8>
 800551e:	2300      	movs	r3, #0
 8005520:	77fb      	strb	r3, [r7, #31]
 8005522:	e04b      	b.n	80055bc <UART_SetConfig+0x348>
 8005524:	2302      	movs	r3, #2
 8005526:	77fb      	strb	r3, [r7, #31]
 8005528:	e048      	b.n	80055bc <UART_SetConfig+0x348>
 800552a:	2304      	movs	r3, #4
 800552c:	77fb      	strb	r3, [r7, #31]
 800552e:	e045      	b.n	80055bc <UART_SetConfig+0x348>
 8005530:	2308      	movs	r3, #8
 8005532:	77fb      	strb	r3, [r7, #31]
 8005534:	e042      	b.n	80055bc <UART_SetConfig+0x348>
 8005536:	bf00      	nop
 8005538:	efff69f3 	.word	0xefff69f3
 800553c:	40011000 	.word	0x40011000
 8005540:	40023800 	.word	0x40023800
 8005544:	40004400 	.word	0x40004400
 8005548:	40004800 	.word	0x40004800
 800554c:	40004c00 	.word	0x40004c00
 8005550:	40005000 	.word	0x40005000
 8005554:	40011400 	.word	0x40011400
 8005558:	40007800 	.word	0x40007800
 800555c:	2310      	movs	r3, #16
 800555e:	77fb      	strb	r3, [r7, #31]
 8005560:	e02c      	b.n	80055bc <UART_SetConfig+0x348>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a72      	ldr	r2, [pc, #456]	; (8005730 <UART_SetConfig+0x4bc>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d125      	bne.n	80055b8 <UART_SetConfig+0x344>
 800556c:	4b71      	ldr	r3, [pc, #452]	; (8005734 <UART_SetConfig+0x4c0>)
 800556e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005572:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005576:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800557a:	d017      	beq.n	80055ac <UART_SetConfig+0x338>
 800557c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005580:	d817      	bhi.n	80055b2 <UART_SetConfig+0x33e>
 8005582:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005586:	d00b      	beq.n	80055a0 <UART_SetConfig+0x32c>
 8005588:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800558c:	d811      	bhi.n	80055b2 <UART_SetConfig+0x33e>
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <UART_SetConfig+0x326>
 8005592:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005596:	d006      	beq.n	80055a6 <UART_SetConfig+0x332>
 8005598:	e00b      	b.n	80055b2 <UART_SetConfig+0x33e>
 800559a:	2300      	movs	r3, #0
 800559c:	77fb      	strb	r3, [r7, #31]
 800559e:	e00d      	b.n	80055bc <UART_SetConfig+0x348>
 80055a0:	2302      	movs	r3, #2
 80055a2:	77fb      	strb	r3, [r7, #31]
 80055a4:	e00a      	b.n	80055bc <UART_SetConfig+0x348>
 80055a6:	2304      	movs	r3, #4
 80055a8:	77fb      	strb	r3, [r7, #31]
 80055aa:	e007      	b.n	80055bc <UART_SetConfig+0x348>
 80055ac:	2308      	movs	r3, #8
 80055ae:	77fb      	strb	r3, [r7, #31]
 80055b0:	e004      	b.n	80055bc <UART_SetConfig+0x348>
 80055b2:	2310      	movs	r3, #16
 80055b4:	77fb      	strb	r3, [r7, #31]
 80055b6:	e001      	b.n	80055bc <UART_SetConfig+0x348>
 80055b8:	2310      	movs	r3, #16
 80055ba:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	69db      	ldr	r3, [r3, #28]
 80055c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055c4:	d15b      	bne.n	800567e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80055c6:	7ffb      	ldrb	r3, [r7, #31]
 80055c8:	2b08      	cmp	r3, #8
 80055ca:	d828      	bhi.n	800561e <UART_SetConfig+0x3aa>
 80055cc:	a201      	add	r2, pc, #4	; (adr r2, 80055d4 <UART_SetConfig+0x360>)
 80055ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d2:	bf00      	nop
 80055d4:	080055f9 	.word	0x080055f9
 80055d8:	08005601 	.word	0x08005601
 80055dc:	08005609 	.word	0x08005609
 80055e0:	0800561f 	.word	0x0800561f
 80055e4:	0800560f 	.word	0x0800560f
 80055e8:	0800561f 	.word	0x0800561f
 80055ec:	0800561f 	.word	0x0800561f
 80055f0:	0800561f 	.word	0x0800561f
 80055f4:	08005617 	.word	0x08005617
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055f8:	f7fe fe08 	bl	800420c <HAL_RCC_GetPCLK1Freq>
 80055fc:	61b8      	str	r0, [r7, #24]
        break;
 80055fe:	e013      	b.n	8005628 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005600:	f7fe fe18 	bl	8004234 <HAL_RCC_GetPCLK2Freq>
 8005604:	61b8      	str	r0, [r7, #24]
        break;
 8005606:	e00f      	b.n	8005628 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005608:	4b4b      	ldr	r3, [pc, #300]	; (8005738 <UART_SetConfig+0x4c4>)
 800560a:	61bb      	str	r3, [r7, #24]
        break;
 800560c:	e00c      	b.n	8005628 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800560e:	f7fe fceb 	bl	8003fe8 <HAL_RCC_GetSysClockFreq>
 8005612:	61b8      	str	r0, [r7, #24]
        break;
 8005614:	e008      	b.n	8005628 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800561a:	61bb      	str	r3, [r7, #24]
        break;
 800561c:	e004      	b.n	8005628 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800561e:	2300      	movs	r3, #0
 8005620:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	77bb      	strb	r3, [r7, #30]
        break;
 8005626:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d074      	beq.n	8005718 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	005a      	lsls	r2, r3, #1
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	085b      	lsrs	r3, r3, #1
 8005638:	441a      	add	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005642:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	2b0f      	cmp	r3, #15
 8005648:	d916      	bls.n	8005678 <UART_SetConfig+0x404>
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005650:	d212      	bcs.n	8005678 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	b29b      	uxth	r3, r3
 8005656:	f023 030f 	bic.w	r3, r3, #15
 800565a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	085b      	lsrs	r3, r3, #1
 8005660:	b29b      	uxth	r3, r3
 8005662:	f003 0307 	and.w	r3, r3, #7
 8005666:	b29a      	uxth	r2, r3
 8005668:	89fb      	ldrh	r3, [r7, #14]
 800566a:	4313      	orrs	r3, r2
 800566c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	89fa      	ldrh	r2, [r7, #14]
 8005674:	60da      	str	r2, [r3, #12]
 8005676:	e04f      	b.n	8005718 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	77bb      	strb	r3, [r7, #30]
 800567c:	e04c      	b.n	8005718 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800567e:	7ffb      	ldrb	r3, [r7, #31]
 8005680:	2b08      	cmp	r3, #8
 8005682:	d828      	bhi.n	80056d6 <UART_SetConfig+0x462>
 8005684:	a201      	add	r2, pc, #4	; (adr r2, 800568c <UART_SetConfig+0x418>)
 8005686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568a:	bf00      	nop
 800568c:	080056b1 	.word	0x080056b1
 8005690:	080056b9 	.word	0x080056b9
 8005694:	080056c1 	.word	0x080056c1
 8005698:	080056d7 	.word	0x080056d7
 800569c:	080056c7 	.word	0x080056c7
 80056a0:	080056d7 	.word	0x080056d7
 80056a4:	080056d7 	.word	0x080056d7
 80056a8:	080056d7 	.word	0x080056d7
 80056ac:	080056cf 	.word	0x080056cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056b0:	f7fe fdac 	bl	800420c <HAL_RCC_GetPCLK1Freq>
 80056b4:	61b8      	str	r0, [r7, #24]
        break;
 80056b6:	e013      	b.n	80056e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056b8:	f7fe fdbc 	bl	8004234 <HAL_RCC_GetPCLK2Freq>
 80056bc:	61b8      	str	r0, [r7, #24]
        break;
 80056be:	e00f      	b.n	80056e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056c0:	4b1d      	ldr	r3, [pc, #116]	; (8005738 <UART_SetConfig+0x4c4>)
 80056c2:	61bb      	str	r3, [r7, #24]
        break;
 80056c4:	e00c      	b.n	80056e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056c6:	f7fe fc8f 	bl	8003fe8 <HAL_RCC_GetSysClockFreq>
 80056ca:	61b8      	str	r0, [r7, #24]
        break;
 80056cc:	e008      	b.n	80056e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056d2:	61bb      	str	r3, [r7, #24]
        break;
 80056d4:	e004      	b.n	80056e0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80056d6:	2300      	movs	r3, #0
 80056d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	77bb      	strb	r3, [r7, #30]
        break;
 80056de:	bf00      	nop
    }

    if (pclk != 0U)
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d018      	beq.n	8005718 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	085a      	lsrs	r2, r3, #1
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	441a      	add	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	2b0f      	cmp	r3, #15
 80056fe:	d909      	bls.n	8005714 <UART_SetConfig+0x4a0>
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005706:	d205      	bcs.n	8005714 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	b29a      	uxth	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	60da      	str	r2, [r3, #12]
 8005712:	e001      	b.n	8005718 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005724:	7fbb      	ldrb	r3, [r7, #30]
}
 8005726:	4618      	mov	r0, r3
 8005728:	3720      	adds	r7, #32
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	40007c00 	.word	0x40007c00
 8005734:	40023800 	.word	0x40023800
 8005738:	00f42400 	.word	0x00f42400

0800573c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00a      	beq.n	8005766 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	430a      	orrs	r2, r1
 8005764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00a      	beq.n	8005788 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	430a      	orrs	r2, r1
 8005786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578c:	f003 0304 	and.w	r3, r3, #4
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00a      	beq.n	80057aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	430a      	orrs	r2, r1
 80057a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ae:	f003 0308 	and.w	r3, r3, #8
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00a      	beq.n	80057cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	430a      	orrs	r2, r1
 80057ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d0:	f003 0310 	and.w	r3, r3, #16
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00a      	beq.n	80057ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f2:	f003 0320 	and.w	r3, r3, #32
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00a      	beq.n	8005810 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	430a      	orrs	r2, r1
 800580e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005818:	2b00      	cmp	r3, #0
 800581a:	d01a      	beq.n	8005852 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800583a:	d10a      	bne.n	8005852 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	430a      	orrs	r2, r1
 8005850:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00a      	beq.n	8005874 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	430a      	orrs	r2, r1
 8005872:	605a      	str	r2, [r3, #4]
  }
}
 8005874:	bf00      	nop
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af02      	add	r7, sp, #8
 8005886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005890:	f7fd f86a 	bl	8002968 <HAL_GetTick>
 8005894:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0308 	and.w	r3, r3, #8
 80058a0:	2b08      	cmp	r3, #8
 80058a2:	d10e      	bne.n	80058c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058a8:	9300      	str	r3, [sp, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 f831 	bl	800591a <UART_WaitOnFlagUntilTimeout>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d001      	beq.n	80058c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e027      	b.n	8005912 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0304 	and.w	r3, r3, #4
 80058cc:	2b04      	cmp	r3, #4
 80058ce:	d10e      	bne.n	80058ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f81b 	bl	800591a <UART_WaitOnFlagUntilTimeout>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e011      	b.n	8005912 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2220      	movs	r2, #32
 80058f2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2220      	movs	r2, #32
 80058f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800591a:	b580      	push	{r7, lr}
 800591c:	b09c      	sub	sp, #112	; 0x70
 800591e:	af00      	add	r7, sp, #0
 8005920:	60f8      	str	r0, [r7, #12]
 8005922:	60b9      	str	r1, [r7, #8]
 8005924:	603b      	str	r3, [r7, #0]
 8005926:	4613      	mov	r3, r2
 8005928:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800592a:	e0a7      	b.n	8005a7c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800592c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800592e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005932:	f000 80a3 	beq.w	8005a7c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005936:	f7fd f817 	bl	8002968 <HAL_GetTick>
 800593a:	4602      	mov	r2, r0
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005942:	429a      	cmp	r2, r3
 8005944:	d302      	bcc.n	800594c <UART_WaitOnFlagUntilTimeout+0x32>
 8005946:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005948:	2b00      	cmp	r3, #0
 800594a:	d13f      	bne.n	80059cc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005954:	e853 3f00 	ldrex	r3, [r3]
 8005958:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800595a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800595c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005960:	667b      	str	r3, [r7, #100]	; 0x64
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	461a      	mov	r2, r3
 8005968:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800596a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800596c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005970:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005972:	e841 2300 	strex	r3, r2, [r1]
 8005976:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1e6      	bne.n	800594c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	3308      	adds	r3, #8
 8005984:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005988:	e853 3f00 	ldrex	r3, [r3]
 800598c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800598e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005990:	f023 0301 	bic.w	r3, r3, #1
 8005994:	663b      	str	r3, [r7, #96]	; 0x60
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	3308      	adds	r3, #8
 800599c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800599e:	64ba      	str	r2, [r7, #72]	; 0x48
 80059a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80059a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059a6:	e841 2300 	strex	r3, r2, [r1]
 80059aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80059ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1e5      	bne.n	800597e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2220      	movs	r2, #32
 80059b6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2220      	movs	r2, #32
 80059bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80059c8:	2303      	movs	r3, #3
 80059ca:	e068      	b.n	8005a9e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0304 	and.w	r3, r3, #4
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d050      	beq.n	8005a7c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	69db      	ldr	r3, [r3, #28]
 80059e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059e8:	d148      	bne.n	8005a7c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059f2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fc:	e853 3f00 	ldrex	r3, [r3]
 8005a00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a08:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a12:	637b      	str	r3, [r7, #52]	; 0x34
 8005a14:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a1a:	e841 2300 	strex	r3, r2, [r1]
 8005a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1e6      	bne.n	80059f4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3308      	adds	r3, #8
 8005a2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	e853 3f00 	ldrex	r3, [r3]
 8005a34:	613b      	str	r3, [r7, #16]
   return(result);
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	f023 0301 	bic.w	r3, r3, #1
 8005a3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	3308      	adds	r3, #8
 8005a44:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005a46:	623a      	str	r2, [r7, #32]
 8005a48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4a:	69f9      	ldr	r1, [r7, #28]
 8005a4c:	6a3a      	ldr	r2, [r7, #32]
 8005a4e:	e841 2300 	strex	r3, r2, [r1]
 8005a52:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1e5      	bne.n	8005a26 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2220      	movs	r2, #32
 8005a5e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e010      	b.n	8005a9e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	69da      	ldr	r2, [r3, #28]
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	4013      	ands	r3, r2
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	bf0c      	ite	eq
 8005a8c:	2301      	moveq	r3, #1
 8005a8e:	2300      	movne	r3, #0
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	461a      	mov	r2, r3
 8005a94:	79fb      	ldrb	r3, [r7, #7]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	f43f af48 	beq.w	800592c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3770      	adds	r7, #112	; 0x70
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
	...

08005aa8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005aa8:	b084      	sub	sp, #16
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b084      	sub	sp, #16
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
 8005ab2:	f107 001c 	add.w	r0, r7, #28
 8005ab6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d120      	bne.n	8005b02 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68da      	ldr	r2, [r3, #12]
 8005ad0:	4b20      	ldr	r3, [pc, #128]	; (8005b54 <USB_CoreInit+0xac>)
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d105      	bne.n	8005af6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 fa96 	bl	8006028 <USB_CoreReset>
 8005afc:	4603      	mov	r3, r0
 8005afe:	73fb      	strb	r3, [r7, #15]
 8005b00:	e010      	b.n	8005b24 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 fa8a 	bl	8006028 <USB_CoreReset>
 8005b14:	4603      	mov	r3, r0
 8005b16:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d10b      	bne.n	8005b42 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f043 0206 	orr.w	r2, r3, #6
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f043 0220 	orr.w	r2, r3, #32
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b4e:	b004      	add	sp, #16
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	ffbdffbf 	.word	0xffbdffbf

08005b58 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f023 0201 	bic.w	r2, r3, #1
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	370c      	adds	r7, #12
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b084      	sub	sp, #16
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
 8005b82:	460b      	mov	r3, r1
 8005b84:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005b86:	2300      	movs	r3, #0
 8005b88:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b96:	78fb      	ldrb	r3, [r7, #3]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d115      	bne.n	8005bc8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ba8:	2001      	movs	r0, #1
 8005baa:	f7fc fee9 	bl	8002980 <HAL_Delay>
      ms++;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 fa29 	bl	800600c <USB_GetMode>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d01e      	beq.n	8005bfe <USB_SetCurrentMode+0x84>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2b31      	cmp	r3, #49	; 0x31
 8005bc4:	d9f0      	bls.n	8005ba8 <USB_SetCurrentMode+0x2e>
 8005bc6:	e01a      	b.n	8005bfe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005bc8:	78fb      	ldrb	r3, [r7, #3]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d115      	bne.n	8005bfa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005bda:	2001      	movs	r0, #1
 8005bdc:	f7fc fed0 	bl	8002980 <HAL_Delay>
      ms++;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	3301      	adds	r3, #1
 8005be4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 fa10 	bl	800600c <USB_GetMode>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d005      	beq.n	8005bfe <USB_SetCurrentMode+0x84>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2b31      	cmp	r3, #49	; 0x31
 8005bf6:	d9f0      	bls.n	8005bda <USB_SetCurrentMode+0x60>
 8005bf8:	e001      	b.n	8005bfe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e005      	b.n	8005c0a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2b32      	cmp	r3, #50	; 0x32
 8005c02:	d101      	bne.n	8005c08 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e000      	b.n	8005c0a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
	...

08005c14 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c14:	b084      	sub	sp, #16
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b086      	sub	sp, #24
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
 8005c1e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c26:	2300      	movs	r3, #0
 8005c28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005c2e:	2300      	movs	r3, #0
 8005c30:	613b      	str	r3, [r7, #16]
 8005c32:	e009      	b.n	8005c48 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	3340      	adds	r3, #64	; 0x40
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	4413      	add	r3, r2
 8005c3e:	2200      	movs	r2, #0
 8005c40:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	3301      	adds	r3, #1
 8005c46:	613b      	str	r3, [r7, #16]
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	2b0e      	cmp	r3, #14
 8005c4c:	d9f2      	bls.n	8005c34 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d11c      	bne.n	8005c8e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c62:	f043 0302 	orr.w	r3, r3, #2
 8005c66:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	601a      	str	r2, [r3, #0]
 8005c8c:	e005      	b.n	8005c9a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c92:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cac:	4619      	mov	r1, r3
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	680b      	ldr	r3, [r1, #0]
 8005cb8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d10c      	bne.n	8005cda <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d104      	bne.n	8005cd0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 f965 	bl	8005f98 <USB_SetDevSpeed>
 8005cce:	e008      	b.n	8005ce2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005cd0:	2101      	movs	r1, #1
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 f960 	bl	8005f98 <USB_SetDevSpeed>
 8005cd8:	e003      	b.n	8005ce2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005cda:	2103      	movs	r1, #3
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 f95b 	bl	8005f98 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005ce2:	2110      	movs	r1, #16
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f8f3 	bl	8005ed0 <USB_FlushTxFifo>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d001      	beq.n	8005cf4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 f91f 	bl	8005f38 <USB_FlushRxFifo>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d001      	beq.n	8005d04 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d16:	461a      	mov	r2, r3
 8005d18:	2300      	movs	r3, #0
 8005d1a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d22:	461a      	mov	r2, r3
 8005d24:	2300      	movs	r3, #0
 8005d26:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d28:	2300      	movs	r3, #0
 8005d2a:	613b      	str	r3, [r7, #16]
 8005d2c:	e043      	b.n	8005db6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	015a      	lsls	r2, r3, #5
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d44:	d118      	bne.n	8005d78 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d10a      	bne.n	8005d62 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d58:	461a      	mov	r2, r3
 8005d5a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d5e:	6013      	str	r3, [r2, #0]
 8005d60:	e013      	b.n	8005d8a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d6e:	461a      	mov	r2, r3
 8005d70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d74:	6013      	str	r3, [r2, #0]
 8005d76:	e008      	b.n	8005d8a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d84:	461a      	mov	r2, r3
 8005d86:	2300      	movs	r3, #0
 8005d88:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	015a      	lsls	r2, r3, #5
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	4413      	add	r3, r2
 8005d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d96:	461a      	mov	r2, r3
 8005d98:	2300      	movs	r3, #0
 8005d9a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da8:	461a      	mov	r2, r3
 8005daa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005dae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	3301      	adds	r3, #1
 8005db4:	613b      	str	r3, [r7, #16]
 8005db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db8:	693a      	ldr	r2, [r7, #16]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d3b7      	bcc.n	8005d2e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	613b      	str	r3, [r7, #16]
 8005dc2:	e043      	b.n	8005e4c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dda:	d118      	bne.n	8005e0e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d10a      	bne.n	8005df8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	015a      	lsls	r2, r3, #5
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dee:	461a      	mov	r2, r3
 8005df0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005df4:	6013      	str	r3, [r2, #0]
 8005df6:	e013      	b.n	8005e20 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	015a      	lsls	r2, r3, #5
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e04:	461a      	mov	r2, r3
 8005e06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e0a:	6013      	str	r3, [r2, #0]
 8005e0c:	e008      	b.n	8005e20 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	2300      	movs	r3, #0
 8005e30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	015a      	lsls	r2, r3, #5
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	4413      	add	r3, r2
 8005e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e3e:	461a      	mov	r2, r3
 8005e40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	613b      	str	r3, [r7, #16]
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d3b7      	bcc.n	8005dc4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e66:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005e74:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d105      	bne.n	8005e88 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	f043 0210 	orr.w	r2, r3, #16
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	699a      	ldr	r2, [r3, #24]
 8005e8c:	4b0e      	ldr	r3, [pc, #56]	; (8005ec8 <USB_DevInit+0x2b4>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d005      	beq.n	8005ea6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	f043 0208 	orr.w	r2, r3, #8
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d105      	bne.n	8005eb8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	699a      	ldr	r2, [r3, #24]
 8005eb0:	4b06      	ldr	r3, [pc, #24]	; (8005ecc <USB_DevInit+0x2b8>)
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3718      	adds	r7, #24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ec4:	b004      	add	sp, #16
 8005ec6:	4770      	bx	lr
 8005ec8:	803c3800 	.word	0x803c3800
 8005ecc:	40000004 	.word	0x40000004

08005ed0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005eda:	2300      	movs	r3, #0
 8005edc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	4a13      	ldr	r2, [pc, #76]	; (8005f34 <USB_FlushTxFifo+0x64>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d901      	bls.n	8005ef0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e01b      	b.n	8005f28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	daf2      	bge.n	8005ede <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	019b      	lsls	r3, r3, #6
 8005f00:	f043 0220 	orr.w	r2, r3, #32
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	4a08      	ldr	r2, [pc, #32]	; (8005f34 <USB_FlushTxFifo+0x64>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d901      	bls.n	8005f1a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e006      	b.n	8005f28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	f003 0320 	and.w	r3, r3, #32
 8005f22:	2b20      	cmp	r3, #32
 8005f24:	d0f0      	beq.n	8005f08 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3714      	adds	r7, #20
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr
 8005f34:	00030d40 	.word	0x00030d40

08005f38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f40:	2300      	movs	r3, #0
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	3301      	adds	r3, #1
 8005f48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	4a11      	ldr	r2, [pc, #68]	; (8005f94 <USB_FlushRxFifo+0x5c>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d901      	bls.n	8005f56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e018      	b.n	8005f88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	daf2      	bge.n	8005f44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2210      	movs	r2, #16
 8005f66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	4a08      	ldr	r2, [pc, #32]	; (8005f94 <USB_FlushRxFifo+0x5c>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d901      	bls.n	8005f7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e006      	b.n	8005f88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	f003 0310 	and.w	r3, r3, #16
 8005f82:	2b10      	cmp	r3, #16
 8005f84:	d0f0      	beq.n	8005f68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3714      	adds	r7, #20
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr
 8005f94:	00030d40 	.word	0x00030d40

08005f98 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	78fb      	ldrb	r3, [r7, #3]
 8005fb2:	68f9      	ldr	r1, [r7, #12]
 8005fb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3714      	adds	r7, #20
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr

08005fca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005fca:	b480      	push	{r7}
 8005fcc:	b085      	sub	sp, #20
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005fe4:	f023 0303 	bic.w	r3, r3, #3
 8005fe8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ff8:	f043 0302 	orr.w	r3, r3, #2
 8005ffc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3714      	adds	r7, #20
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	695b      	ldr	r3, [r3, #20]
 8006018:	f003 0301 	and.w	r3, r3, #1
}
 800601c:	4618      	mov	r0, r3
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006030:	2300      	movs	r3, #0
 8006032:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	3301      	adds	r3, #1
 8006038:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	4a13      	ldr	r2, [pc, #76]	; (800608c <USB_CoreReset+0x64>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d901      	bls.n	8006046 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e01b      	b.n	800607e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	2b00      	cmp	r3, #0
 800604c:	daf2      	bge.n	8006034 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800604e:	2300      	movs	r3, #0
 8006050:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	f043 0201 	orr.w	r2, r3, #1
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	3301      	adds	r3, #1
 8006062:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	4a09      	ldr	r2, [pc, #36]	; (800608c <USB_CoreReset+0x64>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d901      	bls.n	8006070 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e006      	b.n	800607e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	2b01      	cmp	r3, #1
 800607a:	d0f0      	beq.n	800605e <USB_CoreReset+0x36>

  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3714      	adds	r7, #20
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	00030d40 	.word	0x00030d40

08006090 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006090:	b480      	push	{r7}
 8006092:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006094:	bf00      	nop
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
	...

080060a0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060a6:	f3ef 8305 	mrs	r3, IPSR
 80060aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80060ac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10f      	bne.n	80060d2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060b2:	f3ef 8310 	mrs	r3, PRIMASK
 80060b6:	607b      	str	r3, [r7, #4]
  return(result);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d105      	bne.n	80060ca <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80060be:	f3ef 8311 	mrs	r3, BASEPRI
 80060c2:	603b      	str	r3, [r7, #0]
  return(result);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d007      	beq.n	80060da <osKernelInitialize+0x3a>
 80060ca:	4b0e      	ldr	r3, [pc, #56]	; (8006104 <osKernelInitialize+0x64>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d103      	bne.n	80060da <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80060d2:	f06f 0305 	mvn.w	r3, #5
 80060d6:	60fb      	str	r3, [r7, #12]
 80060d8:	e00c      	b.n	80060f4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80060da:	4b0a      	ldr	r3, [pc, #40]	; (8006104 <osKernelInitialize+0x64>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d105      	bne.n	80060ee <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80060e2:	4b08      	ldr	r3, [pc, #32]	; (8006104 <osKernelInitialize+0x64>)
 80060e4:	2201      	movs	r2, #1
 80060e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80060e8:	2300      	movs	r3, #0
 80060ea:	60fb      	str	r3, [r7, #12]
 80060ec:	e002      	b.n	80060f4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80060ee:	f04f 33ff 	mov.w	r3, #4294967295
 80060f2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80060f4:	68fb      	ldr	r3, [r7, #12]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	20001428 	.word	0x20001428

08006108 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800610e:	f3ef 8305 	mrs	r3, IPSR
 8006112:	60bb      	str	r3, [r7, #8]
  return(result);
 8006114:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10f      	bne.n	800613a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800611a:	f3ef 8310 	mrs	r3, PRIMASK
 800611e:	607b      	str	r3, [r7, #4]
  return(result);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d105      	bne.n	8006132 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006126:	f3ef 8311 	mrs	r3, BASEPRI
 800612a:	603b      	str	r3, [r7, #0]
  return(result);
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d007      	beq.n	8006142 <osKernelStart+0x3a>
 8006132:	4b0f      	ldr	r3, [pc, #60]	; (8006170 <osKernelStart+0x68>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2b02      	cmp	r3, #2
 8006138:	d103      	bne.n	8006142 <osKernelStart+0x3a>
    stat = osErrorISR;
 800613a:	f06f 0305 	mvn.w	r3, #5
 800613e:	60fb      	str	r3, [r7, #12]
 8006140:	e010      	b.n	8006164 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006142:	4b0b      	ldr	r3, [pc, #44]	; (8006170 <osKernelStart+0x68>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d109      	bne.n	800615e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800614a:	f7ff ffa1 	bl	8006090 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800614e:	4b08      	ldr	r3, [pc, #32]	; (8006170 <osKernelStart+0x68>)
 8006150:	2202      	movs	r2, #2
 8006152:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006154:	f001 fa6c 	bl	8007630 <vTaskStartScheduler>
      stat = osOK;
 8006158:	2300      	movs	r3, #0
 800615a:	60fb      	str	r3, [r7, #12]
 800615c:	e002      	b.n	8006164 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800615e:	f04f 33ff 	mov.w	r3, #4294967295
 8006162:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006164:	68fb      	ldr	r3, [r7, #12]
}
 8006166:	4618      	mov	r0, r3
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	20001428 	.word	0x20001428

08006174 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006174:	b580      	push	{r7, lr}
 8006176:	b090      	sub	sp, #64	; 0x40
 8006178:	af04      	add	r7, sp, #16
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006180:	2300      	movs	r3, #0
 8006182:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006184:	f3ef 8305 	mrs	r3, IPSR
 8006188:	61fb      	str	r3, [r7, #28]
  return(result);
 800618a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800618c:	2b00      	cmp	r3, #0
 800618e:	f040 808f 	bne.w	80062b0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006192:	f3ef 8310 	mrs	r3, PRIMASK
 8006196:	61bb      	str	r3, [r7, #24]
  return(result);
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d105      	bne.n	80061aa <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800619e:	f3ef 8311 	mrs	r3, BASEPRI
 80061a2:	617b      	str	r3, [r7, #20]
  return(result);
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d003      	beq.n	80061b2 <osThreadNew+0x3e>
 80061aa:	4b44      	ldr	r3, [pc, #272]	; (80062bc <osThreadNew+0x148>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d07e      	beq.n	80062b0 <osThreadNew+0x13c>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d07b      	beq.n	80062b0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80061b8:	2380      	movs	r3, #128	; 0x80
 80061ba:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80061bc:	2318      	movs	r3, #24
 80061be:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80061c0:	2300      	movs	r3, #0
 80061c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80061c4:	f04f 33ff 	mov.w	r3, #4294967295
 80061c8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d045      	beq.n	800625c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d002      	beq.n	80061de <osThreadNew+0x6a>
        name = attr->name;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d002      	beq.n	80061ec <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80061ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d008      	beq.n	8006204 <osThreadNew+0x90>
 80061f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f4:	2b38      	cmp	r3, #56	; 0x38
 80061f6:	d805      	bhi.n	8006204 <osThreadNew+0x90>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f003 0301 	and.w	r3, r3, #1
 8006200:	2b00      	cmp	r3, #0
 8006202:	d001      	beq.n	8006208 <osThreadNew+0x94>
        return (NULL);
 8006204:	2300      	movs	r3, #0
 8006206:	e054      	b.n	80062b2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	695b      	ldr	r3, [r3, #20]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d003      	beq.n	8006218 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	695b      	ldr	r3, [r3, #20]
 8006214:	089b      	lsrs	r3, r3, #2
 8006216:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00e      	beq.n	800623e <osThreadNew+0xca>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	2ba7      	cmp	r3, #167	; 0xa7
 8006226:	d90a      	bls.n	800623e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800622c:	2b00      	cmp	r3, #0
 800622e:	d006      	beq.n	800623e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	695b      	ldr	r3, [r3, #20]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d002      	beq.n	800623e <osThreadNew+0xca>
        mem = 1;
 8006238:	2301      	movs	r3, #1
 800623a:	623b      	str	r3, [r7, #32]
 800623c:	e010      	b.n	8006260 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d10c      	bne.n	8006260 <osThreadNew+0xec>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d108      	bne.n	8006260 <osThreadNew+0xec>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d104      	bne.n	8006260 <osThreadNew+0xec>
          mem = 0;
 8006256:	2300      	movs	r3, #0
 8006258:	623b      	str	r3, [r7, #32]
 800625a:	e001      	b.n	8006260 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800625c:	2300      	movs	r3, #0
 800625e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006260:	6a3b      	ldr	r3, [r7, #32]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d110      	bne.n	8006288 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800626e:	9202      	str	r2, [sp, #8]
 8006270:	9301      	str	r3, [sp, #4]
 8006272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800627a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f000 ffe1 	bl	8007244 <xTaskCreateStatic>
 8006282:	4603      	mov	r3, r0
 8006284:	613b      	str	r3, [r7, #16]
 8006286:	e013      	b.n	80062b0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006288:	6a3b      	ldr	r3, [r7, #32]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d110      	bne.n	80062b0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800628e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006290:	b29a      	uxth	r2, r3
 8006292:	f107 0310 	add.w	r3, r7, #16
 8006296:	9301      	str	r3, [sp, #4]
 8006298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629a:	9300      	str	r3, [sp, #0]
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f001 f832 	bl	800730a <xTaskCreate>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d001      	beq.n	80062b0 <osThreadNew+0x13c>
          hTask = NULL;
 80062ac:	2300      	movs	r3, #0
 80062ae:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80062b0:	693b      	ldr	r3, [r7, #16]
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3730      	adds	r7, #48	; 0x30
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	20001428 	.word	0x20001428

080062c0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062c8:	f3ef 8305 	mrs	r3, IPSR
 80062cc:	613b      	str	r3, [r7, #16]
  return(result);
 80062ce:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d10f      	bne.n	80062f4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062d4:	f3ef 8310 	mrs	r3, PRIMASK
 80062d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d105      	bne.n	80062ec <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80062e0:	f3ef 8311 	mrs	r3, BASEPRI
 80062e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d007      	beq.n	80062fc <osDelay+0x3c>
 80062ec:	4b0a      	ldr	r3, [pc, #40]	; (8006318 <osDelay+0x58>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d103      	bne.n	80062fc <osDelay+0x3c>
    stat = osErrorISR;
 80062f4:	f06f 0305 	mvn.w	r3, #5
 80062f8:	617b      	str	r3, [r7, #20]
 80062fa:	e007      	b.n	800630c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80062fc:	2300      	movs	r3, #0
 80062fe:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d002      	beq.n	800630c <osDelay+0x4c>
      vTaskDelay(ticks);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f001 f95c 	bl	80075c4 <vTaskDelay>
    }
  }

  return (stat);
 800630c:	697b      	ldr	r3, [r7, #20]
}
 800630e:	4618      	mov	r0, r3
 8006310:	3718      	adds	r7, #24
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	20001428 	.word	0x20001428

0800631c <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f002 fb1f 	bl	8008968 <pvTimerGetTimerID>
 800632a:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d005      	beq.n	800633e <TimerCallback+0x22>
    callb->func (callb->arg);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	6852      	ldr	r2, [r2, #4]
 800633a:	4610      	mov	r0, r2
 800633c:	4798      	blx	r3
  }
}
 800633e:	bf00      	nop
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
	...

08006348 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8006348:	b580      	push	{r7, lr}
 800634a:	b08e      	sub	sp, #56	; 0x38
 800634c:	af02      	add	r7, sp, #8
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	607a      	str	r2, [r7, #4]
 8006352:	603b      	str	r3, [r7, #0]
 8006354:	460b      	mov	r3, r1
 8006356:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8006358:	2300      	movs	r3, #0
 800635a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800635c:	f3ef 8305 	mrs	r3, IPSR
 8006360:	61bb      	str	r3, [r7, #24]
  return(result);
 8006362:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8006364:	2b00      	cmp	r3, #0
 8006366:	d16a      	bne.n	800643e <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006368:	f3ef 8310 	mrs	r3, PRIMASK
 800636c:	617b      	str	r3, [r7, #20]
  return(result);
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d105      	bne.n	8006380 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006374:	f3ef 8311 	mrs	r3, BASEPRI
 8006378:	613b      	str	r3, [r7, #16]
  return(result);
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d003      	beq.n	8006388 <osTimerNew+0x40>
 8006380:	4b31      	ldr	r3, [pc, #196]	; (8006448 <osTimerNew+0x100>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b02      	cmp	r3, #2
 8006386:	d05a      	beq.n	800643e <osTimerNew+0xf6>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d057      	beq.n	800643e <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800638e:	2008      	movs	r0, #8
 8006390:	f002 fd48 	bl	8008e24 <pvPortMalloc>
 8006394:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d050      	beq.n	800643e <osTimerNew+0xf6>
      callb->func = func;
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80063a8:	7afb      	ldrb	r3, [r7, #11]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d102      	bne.n	80063b4 <osTimerNew+0x6c>
        reload = pdFALSE;
 80063ae:	2300      	movs	r3, #0
 80063b0:	627b      	str	r3, [r7, #36]	; 0x24
 80063b2:	e001      	b.n	80063b8 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 80063b4:	2301      	movs	r3, #1
 80063b6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 80063b8:	f04f 33ff 	mov.w	r3, #4294967295
 80063bc:	623b      	str	r3, [r7, #32]
      name = NULL;
 80063be:	2300      	movs	r3, #0
 80063c0:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d01c      	beq.n	8006402 <osTimerNew+0xba>
        if (attr->name != NULL) {
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d002      	beq.n	80063d6 <osTimerNew+0x8e>
          name = attr->name;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d006      	beq.n	80063ec <osTimerNew+0xa4>
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	2b2b      	cmp	r3, #43	; 0x2b
 80063e4:	d902      	bls.n	80063ec <osTimerNew+0xa4>
          mem = 1;
 80063e6:	2301      	movs	r3, #1
 80063e8:	623b      	str	r3, [r7, #32]
 80063ea:	e00c      	b.n	8006406 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d108      	bne.n	8006406 <osTimerNew+0xbe>
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d104      	bne.n	8006406 <osTimerNew+0xbe>
            mem = 0;
 80063fc:	2300      	movs	r3, #0
 80063fe:	623b      	str	r3, [r7, #32]
 8006400:	e001      	b.n	8006406 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8006402:	2300      	movs	r3, #0
 8006404:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8006406:	6a3b      	ldr	r3, [r7, #32]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d10c      	bne.n	8006426 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	9301      	str	r3, [sp, #4]
 8006412:	4b0e      	ldr	r3, [pc, #56]	; (800644c <osTimerNew+0x104>)
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800641a:	2101      	movs	r1, #1
 800641c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800641e:	f001 ff12 	bl	8008246 <xTimerCreateStatic>
 8006422:	62b8      	str	r0, [r7, #40]	; 0x28
 8006424:	e00b      	b.n	800643e <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8006426:	6a3b      	ldr	r3, [r7, #32]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d108      	bne.n	800643e <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800642c:	4b07      	ldr	r3, [pc, #28]	; (800644c <osTimerNew+0x104>)
 800642e:	9300      	str	r3, [sp, #0]
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006434:	2101      	movs	r1, #1
 8006436:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006438:	f001 fee4 	bl	8008204 <xTimerCreate>
 800643c:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800643e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006440:	4618      	mov	r0, r3
 8006442:	3730      	adds	r7, #48	; 0x30
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	20001428 	.word	0x20001428
 800644c:	0800631d 	.word	0x0800631d

08006450 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8006450:	b580      	push	{r7, lr}
 8006452:	b08a      	sub	sp, #40	; 0x28
 8006454:	af02      	add	r7, sp, #8
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800645e:	f3ef 8305 	mrs	r3, IPSR
 8006462:	617b      	str	r3, [r7, #20]
  return(result);
 8006464:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006466:	2b00      	cmp	r3, #0
 8006468:	d10f      	bne.n	800648a <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800646a:	f3ef 8310 	mrs	r3, PRIMASK
 800646e:	613b      	str	r3, [r7, #16]
  return(result);
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d105      	bne.n	8006482 <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006476:	f3ef 8311 	mrs	r3, BASEPRI
 800647a:	60fb      	str	r3, [r7, #12]
  return(result);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d007      	beq.n	8006492 <osTimerStart+0x42>
 8006482:	4b12      	ldr	r3, [pc, #72]	; (80064cc <osTimerStart+0x7c>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2b02      	cmp	r3, #2
 8006488:	d103      	bne.n	8006492 <osTimerStart+0x42>
    stat = osErrorISR;
 800648a:	f06f 0305 	mvn.w	r3, #5
 800648e:	61fb      	str	r3, [r7, #28]
 8006490:	e017      	b.n	80064c2 <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d103      	bne.n	80064a0 <osTimerStart+0x50>
    stat = osErrorParameter;
 8006498:	f06f 0303 	mvn.w	r3, #3
 800649c:	61fb      	str	r3, [r7, #28]
 800649e:	e010      	b.n	80064c2 <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80064a0:	2300      	movs	r3, #0
 80064a2:	9300      	str	r3, [sp, #0]
 80064a4:	2300      	movs	r3, #0
 80064a6:	683a      	ldr	r2, [r7, #0]
 80064a8:	2104      	movs	r1, #4
 80064aa:	69b8      	ldr	r0, [r7, #24]
 80064ac:	f001 ff4a 	bl	8008344 <xTimerGenericCommand>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d102      	bne.n	80064bc <osTimerStart+0x6c>
      stat = osOK;
 80064b6:	2300      	movs	r3, #0
 80064b8:	61fb      	str	r3, [r7, #28]
 80064ba:	e002      	b.n	80064c2 <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 80064bc:	f06f 0302 	mvn.w	r3, #2
 80064c0:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 80064c2:	69fb      	ldr	r3, [r7, #28]
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3720      	adds	r7, #32
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	20001428 	.word	0x20001428

080064d0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b08c      	sub	sp, #48	; 0x30
 80064d4:	af02      	add	r7, sp, #8
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80064dc:	2300      	movs	r3, #0
 80064de:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064e0:	f3ef 8305 	mrs	r3, IPSR
 80064e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80064e6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d16f      	bne.n	80065cc <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064ec:	f3ef 8310 	mrs	r3, PRIMASK
 80064f0:	617b      	str	r3, [r7, #20]
  return(result);
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d105      	bne.n	8006504 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064f8:	f3ef 8311 	mrs	r3, BASEPRI
 80064fc:	613b      	str	r3, [r7, #16]
  return(result);
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d003      	beq.n	800650c <osMessageQueueNew+0x3c>
 8006504:	4b34      	ldr	r3, [pc, #208]	; (80065d8 <osMessageQueueNew+0x108>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b02      	cmp	r3, #2
 800650a:	d05f      	beq.n	80065cc <osMessageQueueNew+0xfc>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d05c      	beq.n	80065cc <osMessageQueueNew+0xfc>
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d059      	beq.n	80065cc <osMessageQueueNew+0xfc>
    mem = -1;
 8006518:	f04f 33ff 	mov.w	r3, #4294967295
 800651c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d029      	beq.n	8006578 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d012      	beq.n	8006552 <osMessageQueueNew+0x82>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	2b4f      	cmp	r3, #79	; 0x4f
 8006532:	d90e      	bls.n	8006552 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00a      	beq.n	8006552 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	695a      	ldr	r2, [r3, #20]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	68b9      	ldr	r1, [r7, #8]
 8006544:	fb01 f303 	mul.w	r3, r1, r3
 8006548:	429a      	cmp	r2, r3
 800654a:	d302      	bcc.n	8006552 <osMessageQueueNew+0x82>
        mem = 1;
 800654c:	2301      	movs	r3, #1
 800654e:	623b      	str	r3, [r7, #32]
 8006550:	e014      	b.n	800657c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d110      	bne.n	800657c <osMessageQueueNew+0xac>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10c      	bne.n	800657c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006566:	2b00      	cmp	r3, #0
 8006568:	d108      	bne.n	800657c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d104      	bne.n	800657c <osMessageQueueNew+0xac>
          mem = 0;
 8006572:	2300      	movs	r3, #0
 8006574:	623b      	str	r3, [r7, #32]
 8006576:	e001      	b.n	800657c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8006578:	2300      	movs	r3, #0
 800657a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800657c:	6a3b      	ldr	r3, [r7, #32]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d10b      	bne.n	800659a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	691a      	ldr	r2, [r3, #16]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	2100      	movs	r1, #0
 800658c:	9100      	str	r1, [sp, #0]
 800658e:	68b9      	ldr	r1, [r7, #8]
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f000 f975 	bl	8006880 <xQueueGenericCreateStatic>
 8006596:	6278      	str	r0, [r7, #36]	; 0x24
 8006598:	e008      	b.n	80065ac <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800659a:	6a3b      	ldr	r3, [r7, #32]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d105      	bne.n	80065ac <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80065a0:	2200      	movs	r2, #0
 80065a2:	68b9      	ldr	r1, [r7, #8]
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f000 f9ed 	bl	8006984 <xQueueGenericCreate>
 80065aa:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80065ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00c      	beq.n	80065cc <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d003      	beq.n	80065c0 <osMessageQueueNew+0xf0>
        name = attr->name;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	61fb      	str	r3, [r7, #28]
 80065be:	e001      	b.n	80065c4 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80065c0:	2300      	movs	r3, #0
 80065c2:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80065c4:	69f9      	ldr	r1, [r7, #28]
 80065c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065c8:	f000 fdde 	bl	8007188 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80065cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3728      	adds	r7, #40	; 0x28
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	20001428 	.word	0x20001428

080065dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	4a07      	ldr	r2, [pc, #28]	; (8006608 <vApplicationGetIdleTaskMemory+0x2c>)
 80065ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	4a06      	ldr	r2, [pc, #24]	; (800660c <vApplicationGetIdleTaskMemory+0x30>)
 80065f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2280      	movs	r2, #128	; 0x80
 80065f8:	601a      	str	r2, [r3, #0]
}
 80065fa:	bf00      	nop
 80065fc:	3714      	adds	r7, #20
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	2000142c 	.word	0x2000142c
 800660c:	200014d4 	.word	0x200014d4

08006610 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	4a07      	ldr	r2, [pc, #28]	; (800663c <vApplicationGetTimerTaskMemory+0x2c>)
 8006620:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	4a06      	ldr	r2, [pc, #24]	; (8006640 <vApplicationGetTimerTaskMemory+0x30>)
 8006626:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800662e:	601a      	str	r2, [r3, #0]
}
 8006630:	bf00      	nop
 8006632:	3714      	adds	r7, #20
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr
 800663c:	200016d4 	.word	0x200016d4
 8006640:	2000177c 	.word	0x2000177c

08006644 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f103 0208 	add.w	r2, r3, #8
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f04f 32ff 	mov.w	r2, #4294967295
 800665c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f103 0208 	add.w	r2, r3, #8
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f103 0208 	add.w	r2, r3, #8
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006678:	bf00      	nop
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006692:	bf00      	nop
 8006694:	370c      	adds	r7, #12
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr

0800669e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800669e:	b480      	push	{r7}
 80066a0:	b085      	sub	sp, #20
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
 80066a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	689a      	ldr	r2, [r3, #8]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	683a      	ldr	r2, [r7, #0]
 80066c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	683a      	ldr	r2, [r7, #0]
 80066c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	1c5a      	adds	r2, r3, #1
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	601a      	str	r2, [r3, #0]
}
 80066da:	bf00      	nop
 80066dc:	3714      	adds	r7, #20
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066e6:	b480      	push	{r7}
 80066e8:	b085      	sub	sp, #20
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
 80066ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066fc:	d103      	bne.n	8006706 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	60fb      	str	r3, [r7, #12]
 8006704:	e00c      	b.n	8006720 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	3308      	adds	r3, #8
 800670a:	60fb      	str	r3, [r7, #12]
 800670c:	e002      	b.n	8006714 <vListInsert+0x2e>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	60fb      	str	r3, [r7, #12]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68ba      	ldr	r2, [r7, #8]
 800671c:	429a      	cmp	r2, r3
 800671e:	d2f6      	bcs.n	800670e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	685a      	ldr	r2, [r3, #4]
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	683a      	ldr	r2, [r7, #0]
 800672e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	683a      	ldr	r2, [r7, #0]
 800673a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	1c5a      	adds	r2, r3, #1
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	601a      	str	r2, [r3, #0]
}
 800674c:	bf00      	nop
 800674e:	3714      	adds	r7, #20
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	6892      	ldr	r2, [r2, #8]
 800676e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	6852      	ldr	r2, [r2, #4]
 8006778:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	429a      	cmp	r2, r3
 8006782:	d103      	bne.n	800678c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	689a      	ldr	r2, [r3, #8]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	1e5a      	subs	r2, r3, #1
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3714      	adds	r7, #20
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d10c      	bne.n	80067da <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80067c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c4:	b672      	cpsid	i
 80067c6:	f383 8811 	msr	BASEPRI, r3
 80067ca:	f3bf 8f6f 	isb	sy
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	b662      	cpsie	i
 80067d4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80067d6:	bf00      	nop
 80067d8:	e7fe      	b.n	80067d8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80067da:	f002 f9f7 	bl	8008bcc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067e6:	68f9      	ldr	r1, [r7, #12]
 80067e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80067ea:	fb01 f303 	mul.w	r3, r1, r3
 80067ee:	441a      	add	r2, r3
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800680a:	3b01      	subs	r3, #1
 800680c:	68f9      	ldr	r1, [r7, #12]
 800680e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006810:	fb01 f303 	mul.w	r3, r1, r3
 8006814:	441a      	add	r2, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	22ff      	movs	r2, #255	; 0xff
 800681e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	22ff      	movs	r2, #255	; 0xff
 8006826:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d114      	bne.n	800685a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d01a      	beq.n	800686e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	3310      	adds	r3, #16
 800683c:	4618      	mov	r0, r3
 800683e:	f001 f9b1 	bl	8007ba4 <xTaskRemoveFromEventList>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d012      	beq.n	800686e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006848:	4b0c      	ldr	r3, [pc, #48]	; (800687c <xQueueGenericReset+0xd0>)
 800684a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800684e:	601a      	str	r2, [r3, #0]
 8006850:	f3bf 8f4f 	dsb	sy
 8006854:	f3bf 8f6f 	isb	sy
 8006858:	e009      	b.n	800686e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	3310      	adds	r3, #16
 800685e:	4618      	mov	r0, r3
 8006860:	f7ff fef0 	bl	8006644 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	3324      	adds	r3, #36	; 0x24
 8006868:	4618      	mov	r0, r3
 800686a:	f7ff feeb 	bl	8006644 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800686e:	f002 f9e1 	bl	8008c34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006872:	2301      	movs	r3, #1
}
 8006874:	4618      	mov	r0, r3
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	e000ed04 	.word	0xe000ed04

08006880 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006880:	b580      	push	{r7, lr}
 8006882:	b08e      	sub	sp, #56	; 0x38
 8006884:	af02      	add	r7, sp, #8
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	607a      	str	r2, [r7, #4]
 800688c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d10c      	bne.n	80068ae <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006898:	b672      	cpsid	i
 800689a:	f383 8811 	msr	BASEPRI, r3
 800689e:	f3bf 8f6f 	isb	sy
 80068a2:	f3bf 8f4f 	dsb	sy
 80068a6:	b662      	cpsie	i
 80068a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80068aa:	bf00      	nop
 80068ac:	e7fe      	b.n	80068ac <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d10c      	bne.n	80068ce <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80068b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b8:	b672      	cpsid	i
 80068ba:	f383 8811 	msr	BASEPRI, r3
 80068be:	f3bf 8f6f 	isb	sy
 80068c2:	f3bf 8f4f 	dsb	sy
 80068c6:	b662      	cpsie	i
 80068c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80068ca:	bf00      	nop
 80068cc:	e7fe      	b.n	80068cc <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d002      	beq.n	80068da <xQueueGenericCreateStatic+0x5a>
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d001      	beq.n	80068de <xQueueGenericCreateStatic+0x5e>
 80068da:	2301      	movs	r3, #1
 80068dc:	e000      	b.n	80068e0 <xQueueGenericCreateStatic+0x60>
 80068de:	2300      	movs	r3, #0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d10c      	bne.n	80068fe <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80068e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e8:	b672      	cpsid	i
 80068ea:	f383 8811 	msr	BASEPRI, r3
 80068ee:	f3bf 8f6f 	isb	sy
 80068f2:	f3bf 8f4f 	dsb	sy
 80068f6:	b662      	cpsie	i
 80068f8:	623b      	str	r3, [r7, #32]
}
 80068fa:	bf00      	nop
 80068fc:	e7fe      	b.n	80068fc <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d102      	bne.n	800690a <xQueueGenericCreateStatic+0x8a>
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d101      	bne.n	800690e <xQueueGenericCreateStatic+0x8e>
 800690a:	2301      	movs	r3, #1
 800690c:	e000      	b.n	8006910 <xQueueGenericCreateStatic+0x90>
 800690e:	2300      	movs	r3, #0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d10c      	bne.n	800692e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8006914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006918:	b672      	cpsid	i
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	b662      	cpsie	i
 8006928:	61fb      	str	r3, [r7, #28]
}
 800692a:	bf00      	nop
 800692c:	e7fe      	b.n	800692c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800692e:	2350      	movs	r3, #80	; 0x50
 8006930:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	2b50      	cmp	r3, #80	; 0x50
 8006936:	d00c      	beq.n	8006952 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8006938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693c:	b672      	cpsid	i
 800693e:	f383 8811 	msr	BASEPRI, r3
 8006942:	f3bf 8f6f 	isb	sy
 8006946:	f3bf 8f4f 	dsb	sy
 800694a:	b662      	cpsie	i
 800694c:	61bb      	str	r3, [r7, #24]
}
 800694e:	bf00      	nop
 8006950:	e7fe      	b.n	8006950 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006952:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00d      	beq.n	800697a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800695e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006960:	2201      	movs	r2, #1
 8006962:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006966:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800696a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	4613      	mov	r3, r2
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	68b9      	ldr	r1, [r7, #8]
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f000 f847 	bl	8006a08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800697a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800697c:	4618      	mov	r0, r3
 800697e:	3730      	adds	r7, #48	; 0x30
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006984:	b580      	push	{r7, lr}
 8006986:	b08a      	sub	sp, #40	; 0x28
 8006988:	af02      	add	r7, sp, #8
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	4613      	mov	r3, r2
 8006990:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d10c      	bne.n	80069b2 <xQueueGenericCreate+0x2e>
	__asm volatile
 8006998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699c:	b672      	cpsid	i
 800699e:	f383 8811 	msr	BASEPRI, r3
 80069a2:	f3bf 8f6f 	isb	sy
 80069a6:	f3bf 8f4f 	dsb	sy
 80069aa:	b662      	cpsie	i
 80069ac:	613b      	str	r3, [r7, #16]
}
 80069ae:	bf00      	nop
 80069b0:	e7fe      	b.n	80069b0 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d102      	bne.n	80069be <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80069b8:	2300      	movs	r3, #0
 80069ba:	61fb      	str	r3, [r7, #28]
 80069bc:	e004      	b.n	80069c8 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	fb02 f303 	mul.w	r3, r2, r3
 80069c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	3350      	adds	r3, #80	; 0x50
 80069cc:	4618      	mov	r0, r3
 80069ce:	f002 fa29 	bl	8008e24 <pvPortMalloc>
 80069d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d011      	beq.n	80069fe <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	3350      	adds	r3, #80	; 0x50
 80069e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80069ec:	79fa      	ldrb	r2, [r7, #7]
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	9300      	str	r3, [sp, #0]
 80069f2:	4613      	mov	r3, r2
 80069f4:	697a      	ldr	r2, [r7, #20]
 80069f6:	68b9      	ldr	r1, [r7, #8]
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f000 f805 	bl	8006a08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80069fe:	69bb      	ldr	r3, [r7, #24]
	}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3720      	adds	r7, #32
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
 8006a14:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d103      	bne.n	8006a24 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	69ba      	ldr	r2, [r7, #24]
 8006a20:	601a      	str	r2, [r3, #0]
 8006a22:	e002      	b.n	8006a2a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	68ba      	ldr	r2, [r7, #8]
 8006a34:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006a36:	2101      	movs	r1, #1
 8006a38:	69b8      	ldr	r0, [r7, #24]
 8006a3a:	f7ff feb7 	bl	80067ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	78fa      	ldrb	r2, [r7, #3]
 8006a42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006a46:	bf00      	nop
 8006a48:	3710      	adds	r7, #16
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
	...

08006a50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b08e      	sub	sp, #56	; 0x38
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	607a      	str	r2, [r7, #4]
 8006a5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d10c      	bne.n	8006a86 <xQueueGenericSend+0x36>
	__asm volatile
 8006a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a70:	b672      	cpsid	i
 8006a72:	f383 8811 	msr	BASEPRI, r3
 8006a76:	f3bf 8f6f 	isb	sy
 8006a7a:	f3bf 8f4f 	dsb	sy
 8006a7e:	b662      	cpsie	i
 8006a80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006a82:	bf00      	nop
 8006a84:	e7fe      	b.n	8006a84 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d103      	bne.n	8006a94 <xQueueGenericSend+0x44>
 8006a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d101      	bne.n	8006a98 <xQueueGenericSend+0x48>
 8006a94:	2301      	movs	r3, #1
 8006a96:	e000      	b.n	8006a9a <xQueueGenericSend+0x4a>
 8006a98:	2300      	movs	r3, #0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10c      	bne.n	8006ab8 <xQueueGenericSend+0x68>
	__asm volatile
 8006a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa2:	b672      	cpsid	i
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	b662      	cpsie	i
 8006ab2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ab4:	bf00      	nop
 8006ab6:	e7fe      	b.n	8006ab6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d103      	bne.n	8006ac6 <xQueueGenericSend+0x76>
 8006abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d101      	bne.n	8006aca <xQueueGenericSend+0x7a>
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e000      	b.n	8006acc <xQueueGenericSend+0x7c>
 8006aca:	2300      	movs	r3, #0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10c      	bne.n	8006aea <xQueueGenericSend+0x9a>
	__asm volatile
 8006ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad4:	b672      	cpsid	i
 8006ad6:	f383 8811 	msr	BASEPRI, r3
 8006ada:	f3bf 8f6f 	isb	sy
 8006ade:	f3bf 8f4f 	dsb	sy
 8006ae2:	b662      	cpsie	i
 8006ae4:	623b      	str	r3, [r7, #32]
}
 8006ae6:	bf00      	nop
 8006ae8:	e7fe      	b.n	8006ae8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006aea:	f001 fa5d 	bl	8007fa8 <xTaskGetSchedulerState>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d102      	bne.n	8006afa <xQueueGenericSend+0xaa>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d101      	bne.n	8006afe <xQueueGenericSend+0xae>
 8006afa:	2301      	movs	r3, #1
 8006afc:	e000      	b.n	8006b00 <xQueueGenericSend+0xb0>
 8006afe:	2300      	movs	r3, #0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d10c      	bne.n	8006b1e <xQueueGenericSend+0xce>
	__asm volatile
 8006b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b08:	b672      	cpsid	i
 8006b0a:	f383 8811 	msr	BASEPRI, r3
 8006b0e:	f3bf 8f6f 	isb	sy
 8006b12:	f3bf 8f4f 	dsb	sy
 8006b16:	b662      	cpsie	i
 8006b18:	61fb      	str	r3, [r7, #28]
}
 8006b1a:	bf00      	nop
 8006b1c:	e7fe      	b.n	8006b1c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b1e:	f002 f855 	bl	8008bcc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d302      	bcc.n	8006b34 <xQueueGenericSend+0xe4>
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d129      	bne.n	8006b88 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b34:	683a      	ldr	r2, [r7, #0]
 8006b36:	68b9      	ldr	r1, [r7, #8]
 8006b38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b3a:	f000 fa15 	bl	8006f68 <prvCopyDataToQueue>
 8006b3e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d010      	beq.n	8006b6a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4a:	3324      	adds	r3, #36	; 0x24
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f001 f829 	bl	8007ba4 <xTaskRemoveFromEventList>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d013      	beq.n	8006b80 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006b58:	4b3f      	ldr	r3, [pc, #252]	; (8006c58 <xQueueGenericSend+0x208>)
 8006b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b5e:	601a      	str	r2, [r3, #0]
 8006b60:	f3bf 8f4f 	dsb	sy
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	e00a      	b.n	8006b80 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d007      	beq.n	8006b80 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006b70:	4b39      	ldr	r3, [pc, #228]	; (8006c58 <xQueueGenericSend+0x208>)
 8006b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b76:	601a      	str	r2, [r3, #0]
 8006b78:	f3bf 8f4f 	dsb	sy
 8006b7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006b80:	f002 f858 	bl	8008c34 <vPortExitCritical>
				return pdPASS;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e063      	b.n	8006c50 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d103      	bne.n	8006b96 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b8e:	f002 f851 	bl	8008c34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006b92:	2300      	movs	r3, #0
 8006b94:	e05c      	b.n	8006c50 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d106      	bne.n	8006baa <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b9c:	f107 0314 	add.w	r3, r7, #20
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f001 f865 	bl	8007c70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006baa:	f002 f843 	bl	8008c34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006bae:	f000 fdb3 	bl	8007718 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006bb2:	f002 f80b 	bl	8008bcc <vPortEnterCritical>
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006bbc:	b25b      	sxtb	r3, r3
 8006bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc2:	d103      	bne.n	8006bcc <xQueueGenericSend+0x17c>
 8006bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bd2:	b25b      	sxtb	r3, r3
 8006bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd8:	d103      	bne.n	8006be2 <xQueueGenericSend+0x192>
 8006bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006be2:	f002 f827 	bl	8008c34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006be6:	1d3a      	adds	r2, r7, #4
 8006be8:	f107 0314 	add.w	r3, r7, #20
 8006bec:	4611      	mov	r1, r2
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f001 f854 	bl	8007c9c <xTaskCheckForTimeOut>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d124      	bne.n	8006c44 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006bfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bfc:	f000 faac 	bl	8007158 <prvIsQueueFull>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d018      	beq.n	8006c38 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c08:	3310      	adds	r3, #16
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	4611      	mov	r1, r2
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f000 ff74 	bl	8007afc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006c14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c16:	f000 fa37 	bl	8007088 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006c1a:	f000 fd8b 	bl	8007734 <xTaskResumeAll>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f47f af7c 	bne.w	8006b1e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8006c26:	4b0c      	ldr	r3, [pc, #48]	; (8006c58 <xQueueGenericSend+0x208>)
 8006c28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c2c:	601a      	str	r2, [r3, #0]
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	f3bf 8f6f 	isb	sy
 8006c36:	e772      	b.n	8006b1e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006c38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c3a:	f000 fa25 	bl	8007088 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c3e:	f000 fd79 	bl	8007734 <xTaskResumeAll>
 8006c42:	e76c      	b.n	8006b1e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006c44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c46:	f000 fa1f 	bl	8007088 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c4a:	f000 fd73 	bl	8007734 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006c4e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3738      	adds	r7, #56	; 0x38
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	e000ed04 	.word	0xe000ed04

08006c5c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b08e      	sub	sp, #56	; 0x38
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	607a      	str	r2, [r7, #4]
 8006c68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d10c      	bne.n	8006c8e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8006c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c78:	b672      	cpsid	i
 8006c7a:	f383 8811 	msr	BASEPRI, r3
 8006c7e:	f3bf 8f6f 	isb	sy
 8006c82:	f3bf 8f4f 	dsb	sy
 8006c86:	b662      	cpsie	i
 8006c88:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c8a:	bf00      	nop
 8006c8c:	e7fe      	b.n	8006c8c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d103      	bne.n	8006c9c <xQueueGenericSendFromISR+0x40>
 8006c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d101      	bne.n	8006ca0 <xQueueGenericSendFromISR+0x44>
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e000      	b.n	8006ca2 <xQueueGenericSendFromISR+0x46>
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d10c      	bne.n	8006cc0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8006ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006caa:	b672      	cpsid	i
 8006cac:	f383 8811 	msr	BASEPRI, r3
 8006cb0:	f3bf 8f6f 	isb	sy
 8006cb4:	f3bf 8f4f 	dsb	sy
 8006cb8:	b662      	cpsie	i
 8006cba:	623b      	str	r3, [r7, #32]
}
 8006cbc:	bf00      	nop
 8006cbe:	e7fe      	b.n	8006cbe <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d103      	bne.n	8006cce <xQueueGenericSendFromISR+0x72>
 8006cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d101      	bne.n	8006cd2 <xQueueGenericSendFromISR+0x76>
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e000      	b.n	8006cd4 <xQueueGenericSendFromISR+0x78>
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d10c      	bne.n	8006cf2 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8006cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cdc:	b672      	cpsid	i
 8006cde:	f383 8811 	msr	BASEPRI, r3
 8006ce2:	f3bf 8f6f 	isb	sy
 8006ce6:	f3bf 8f4f 	dsb	sy
 8006cea:	b662      	cpsie	i
 8006cec:	61fb      	str	r3, [r7, #28]
}
 8006cee:	bf00      	nop
 8006cf0:	e7fe      	b.n	8006cf0 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006cf2:	f002 f853 	bl	8008d9c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006cf6:	f3ef 8211 	mrs	r2, BASEPRI
 8006cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfe:	b672      	cpsid	i
 8006d00:	f383 8811 	msr	BASEPRI, r3
 8006d04:	f3bf 8f6f 	isb	sy
 8006d08:	f3bf 8f4f 	dsb	sy
 8006d0c:	b662      	cpsie	i
 8006d0e:	61ba      	str	r2, [r7, #24]
 8006d10:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006d12:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d14:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d302      	bcc.n	8006d28 <xQueueGenericSendFromISR+0xcc>
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d12c      	bne.n	8006d82 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d32:	683a      	ldr	r2, [r7, #0]
 8006d34:	68b9      	ldr	r1, [r7, #8]
 8006d36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d38:	f000 f916 	bl	8006f68 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006d3c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d44:	d112      	bne.n	8006d6c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d016      	beq.n	8006d7c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d50:	3324      	adds	r3, #36	; 0x24
 8006d52:	4618      	mov	r0, r3
 8006d54:	f000 ff26 	bl	8007ba4 <xTaskRemoveFromEventList>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00e      	beq.n	8006d7c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d00b      	beq.n	8006d7c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	601a      	str	r2, [r3, #0]
 8006d6a:	e007      	b.n	8006d7c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006d6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006d70:	3301      	adds	r3, #1
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	b25a      	sxtb	r2, r3
 8006d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006d80:	e001      	b.n	8006d86 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006d82:	2300      	movs	r3, #0
 8006d84:	637b      	str	r3, [r7, #52]	; 0x34
 8006d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d88:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006d90:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3738      	adds	r7, #56	; 0x38
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b08c      	sub	sp, #48	; 0x30
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006da8:	2300      	movs	r3, #0
 8006daa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d10c      	bne.n	8006dd0 <xQueueReceive+0x34>
	__asm volatile
 8006db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dba:	b672      	cpsid	i
 8006dbc:	f383 8811 	msr	BASEPRI, r3
 8006dc0:	f3bf 8f6f 	isb	sy
 8006dc4:	f3bf 8f4f 	dsb	sy
 8006dc8:	b662      	cpsie	i
 8006dca:	623b      	str	r3, [r7, #32]
}
 8006dcc:	bf00      	nop
 8006dce:	e7fe      	b.n	8006dce <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d103      	bne.n	8006dde <xQueueReceive+0x42>
 8006dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d101      	bne.n	8006de2 <xQueueReceive+0x46>
 8006dde:	2301      	movs	r3, #1
 8006de0:	e000      	b.n	8006de4 <xQueueReceive+0x48>
 8006de2:	2300      	movs	r3, #0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d10c      	bne.n	8006e02 <xQueueReceive+0x66>
	__asm volatile
 8006de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dec:	b672      	cpsid	i
 8006dee:	f383 8811 	msr	BASEPRI, r3
 8006df2:	f3bf 8f6f 	isb	sy
 8006df6:	f3bf 8f4f 	dsb	sy
 8006dfa:	b662      	cpsie	i
 8006dfc:	61fb      	str	r3, [r7, #28]
}
 8006dfe:	bf00      	nop
 8006e00:	e7fe      	b.n	8006e00 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e02:	f001 f8d1 	bl	8007fa8 <xTaskGetSchedulerState>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d102      	bne.n	8006e12 <xQueueReceive+0x76>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d101      	bne.n	8006e16 <xQueueReceive+0x7a>
 8006e12:	2301      	movs	r3, #1
 8006e14:	e000      	b.n	8006e18 <xQueueReceive+0x7c>
 8006e16:	2300      	movs	r3, #0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d10c      	bne.n	8006e36 <xQueueReceive+0x9a>
	__asm volatile
 8006e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e20:	b672      	cpsid	i
 8006e22:	f383 8811 	msr	BASEPRI, r3
 8006e26:	f3bf 8f6f 	isb	sy
 8006e2a:	f3bf 8f4f 	dsb	sy
 8006e2e:	b662      	cpsie	i
 8006e30:	61bb      	str	r3, [r7, #24]
}
 8006e32:	bf00      	nop
 8006e34:	e7fe      	b.n	8006e34 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e36:	f001 fec9 	bl	8008bcc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d01f      	beq.n	8006e86 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e46:	68b9      	ldr	r1, [r7, #8]
 8006e48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e4a:	f000 f8f7 	bl	800703c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e50:	1e5a      	subs	r2, r3, #1
 8006e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e54:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00f      	beq.n	8006e7e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e60:	3310      	adds	r3, #16
 8006e62:	4618      	mov	r0, r3
 8006e64:	f000 fe9e 	bl	8007ba4 <xTaskRemoveFromEventList>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d007      	beq.n	8006e7e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e6e:	4b3d      	ldr	r3, [pc, #244]	; (8006f64 <xQueueReceive+0x1c8>)
 8006e70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e74:	601a      	str	r2, [r3, #0]
 8006e76:	f3bf 8f4f 	dsb	sy
 8006e7a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e7e:	f001 fed9 	bl	8008c34 <vPortExitCritical>
				return pdPASS;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e069      	b.n	8006f5a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d103      	bne.n	8006e94 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e8c:	f001 fed2 	bl	8008c34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e90:	2300      	movs	r3, #0
 8006e92:	e062      	b.n	8006f5a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d106      	bne.n	8006ea8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e9a:	f107 0310 	add.w	r3, r7, #16
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f000 fee6 	bl	8007c70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ea8:	f001 fec4 	bl	8008c34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006eac:	f000 fc34 	bl	8007718 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006eb0:	f001 fe8c 	bl	8008bcc <vPortEnterCritical>
 8006eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006eba:	b25b      	sxtb	r3, r3
 8006ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec0:	d103      	bne.n	8006eca <xQueueReceive+0x12e>
 8006ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ecc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ed0:	b25b      	sxtb	r3, r3
 8006ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed6:	d103      	bne.n	8006ee0 <xQueueReceive+0x144>
 8006ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eda:	2200      	movs	r2, #0
 8006edc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ee0:	f001 fea8 	bl	8008c34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ee4:	1d3a      	adds	r2, r7, #4
 8006ee6:	f107 0310 	add.w	r3, r7, #16
 8006eea:	4611      	mov	r1, r2
 8006eec:	4618      	mov	r0, r3
 8006eee:	f000 fed5 	bl	8007c9c <xTaskCheckForTimeOut>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d123      	bne.n	8006f40 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ef8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006efa:	f000 f917 	bl	800712c <prvIsQueueEmpty>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d017      	beq.n	8006f34 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f06:	3324      	adds	r3, #36	; 0x24
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	4611      	mov	r1, r2
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f000 fdf5 	bl	8007afc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f14:	f000 f8b8 	bl	8007088 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f18:	f000 fc0c 	bl	8007734 <xTaskResumeAll>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d189      	bne.n	8006e36 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8006f22:	4b10      	ldr	r3, [pc, #64]	; (8006f64 <xQueueReceive+0x1c8>)
 8006f24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f28:	601a      	str	r2, [r3, #0]
 8006f2a:	f3bf 8f4f 	dsb	sy
 8006f2e:	f3bf 8f6f 	isb	sy
 8006f32:	e780      	b.n	8006e36 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006f34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f36:	f000 f8a7 	bl	8007088 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f3a:	f000 fbfb 	bl	8007734 <xTaskResumeAll>
 8006f3e:	e77a      	b.n	8006e36 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006f40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f42:	f000 f8a1 	bl	8007088 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f46:	f000 fbf5 	bl	8007734 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f4c:	f000 f8ee 	bl	800712c <prvIsQueueEmpty>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f43f af6f 	beq.w	8006e36 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3730      	adds	r7, #48	; 0x30
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	e000ed04 	.word	0xe000ed04

08006f68 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b086      	sub	sp, #24
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006f74:	2300      	movs	r3, #0
 8006f76:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d10d      	bne.n	8006fa2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d14d      	bne.n	800702a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	4618      	mov	r0, r3
 8006f94:	f001 f826 	bl	8007fe4 <xTaskPriorityDisinherit>
 8006f98:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	609a      	str	r2, [r3, #8]
 8006fa0:	e043      	b.n	800702a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d119      	bne.n	8006fdc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6858      	ldr	r0, [r3, #4]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	68b9      	ldr	r1, [r7, #8]
 8006fb4:	f002 f99e 	bl	80092f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	685a      	ldr	r2, [r3, #4]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc0:	441a      	add	r2, r3
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	685a      	ldr	r2, [r3, #4]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d32b      	bcc.n	800702a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	605a      	str	r2, [r3, #4]
 8006fda:	e026      	b.n	800702a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	68d8      	ldr	r0, [r3, #12]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	68b9      	ldr	r1, [r7, #8]
 8006fe8:	f002 f984 	bl	80092f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	68da      	ldr	r2, [r3, #12]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff4:	425b      	negs	r3, r3
 8006ff6:	441a      	add	r2, r3
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	68da      	ldr	r2, [r3, #12]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	429a      	cmp	r2, r3
 8007006:	d207      	bcs.n	8007018 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	689a      	ldr	r2, [r3, #8]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007010:	425b      	negs	r3, r3
 8007012:	441a      	add	r2, r3
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2b02      	cmp	r3, #2
 800701c:	d105      	bne.n	800702a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d002      	beq.n	800702a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	3b01      	subs	r3, #1
 8007028:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	1c5a      	adds	r2, r3, #1
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007032:	697b      	ldr	r3, [r7, #20]
}
 8007034:	4618      	mov	r0, r3
 8007036:	3718      	adds	r7, #24
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704a:	2b00      	cmp	r3, #0
 800704c:	d018      	beq.n	8007080 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	68da      	ldr	r2, [r3, #12]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007056:	441a      	add	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	68da      	ldr	r2, [r3, #12]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	429a      	cmp	r2, r3
 8007066:	d303      	bcc.n	8007070 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	68d9      	ldr	r1, [r3, #12]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007078:	461a      	mov	r2, r3
 800707a:	6838      	ldr	r0, [r7, #0]
 800707c:	f002 f93a 	bl	80092f4 <memcpy>
	}
}
 8007080:	bf00      	nop
 8007082:	3708      	adds	r7, #8
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007090:	f001 fd9c 	bl	8008bcc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800709a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800709c:	e011      	b.n	80070c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d012      	beq.n	80070cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	3324      	adds	r3, #36	; 0x24
 80070aa:	4618      	mov	r0, r3
 80070ac:	f000 fd7a 	bl	8007ba4 <xTaskRemoveFromEventList>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d001      	beq.n	80070ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80070b6:	f000 fe57 	bl	8007d68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80070ba:	7bfb      	ldrb	r3, [r7, #15]
 80070bc:	3b01      	subs	r3, #1
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80070c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	dce9      	bgt.n	800709e <prvUnlockQueue+0x16>
 80070ca:	e000      	b.n	80070ce <prvUnlockQueue+0x46>
					break;
 80070cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	22ff      	movs	r2, #255	; 0xff
 80070d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80070d6:	f001 fdad 	bl	8008c34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80070da:	f001 fd77 	bl	8008bcc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80070e6:	e011      	b.n	800710c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	691b      	ldr	r3, [r3, #16]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d012      	beq.n	8007116 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	3310      	adds	r3, #16
 80070f4:	4618      	mov	r0, r3
 80070f6:	f000 fd55 	bl	8007ba4 <xTaskRemoveFromEventList>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d001      	beq.n	8007104 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007100:	f000 fe32 	bl	8007d68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007104:	7bbb      	ldrb	r3, [r7, #14]
 8007106:	3b01      	subs	r3, #1
 8007108:	b2db      	uxtb	r3, r3
 800710a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800710c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007110:	2b00      	cmp	r3, #0
 8007112:	dce9      	bgt.n	80070e8 <prvUnlockQueue+0x60>
 8007114:	e000      	b.n	8007118 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007116:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	22ff      	movs	r2, #255	; 0xff
 800711c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007120:	f001 fd88 	bl	8008c34 <vPortExitCritical>
}
 8007124:	bf00      	nop
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007134:	f001 fd4a 	bl	8008bcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713c:	2b00      	cmp	r3, #0
 800713e:	d102      	bne.n	8007146 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007140:	2301      	movs	r3, #1
 8007142:	60fb      	str	r3, [r7, #12]
 8007144:	e001      	b.n	800714a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007146:	2300      	movs	r3, #0
 8007148:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800714a:	f001 fd73 	bl	8008c34 <vPortExitCritical>

	return xReturn;
 800714e:	68fb      	ldr	r3, [r7, #12]
}
 8007150:	4618      	mov	r0, r3
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007160:	f001 fd34 	bl	8008bcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800716c:	429a      	cmp	r2, r3
 800716e:	d102      	bne.n	8007176 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007170:	2301      	movs	r3, #1
 8007172:	60fb      	str	r3, [r7, #12]
 8007174:	e001      	b.n	800717a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007176:	2300      	movs	r3, #0
 8007178:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800717a:	f001 fd5b 	bl	8008c34 <vPortExitCritical>

	return xReturn;
 800717e:	68fb      	ldr	r3, [r7, #12]
}
 8007180:	4618      	mov	r0, r3
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007188:	b480      	push	{r7}
 800718a:	b085      	sub	sp, #20
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007192:	2300      	movs	r3, #0
 8007194:	60fb      	str	r3, [r7, #12]
 8007196:	e014      	b.n	80071c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007198:	4a0f      	ldr	r2, [pc, #60]	; (80071d8 <vQueueAddToRegistry+0x50>)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d10b      	bne.n	80071bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80071a4:	490c      	ldr	r1, [pc, #48]	; (80071d8 <vQueueAddToRegistry+0x50>)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	683a      	ldr	r2, [r7, #0]
 80071aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80071ae:	4a0a      	ldr	r2, [pc, #40]	; (80071d8 <vQueueAddToRegistry+0x50>)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	00db      	lsls	r3, r3, #3
 80071b4:	4413      	add	r3, r2
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80071ba:	e006      	b.n	80071ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	3301      	adds	r3, #1
 80071c0:	60fb      	str	r3, [r7, #12]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2b07      	cmp	r3, #7
 80071c6:	d9e7      	bls.n	8007198 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80071c8:	bf00      	nop
 80071ca:	bf00      	nop
 80071cc:	3714      	adds	r7, #20
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	20001b7c 	.word	0x20001b7c

080071dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b086      	sub	sp, #24
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80071ec:	f001 fcee 	bl	8008bcc <vPortEnterCritical>
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071f6:	b25b      	sxtb	r3, r3
 80071f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071fc:	d103      	bne.n	8007206 <vQueueWaitForMessageRestricted+0x2a>
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	2200      	movs	r2, #0
 8007202:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800720c:	b25b      	sxtb	r3, r3
 800720e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007212:	d103      	bne.n	800721c <vQueueWaitForMessageRestricted+0x40>
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	2200      	movs	r2, #0
 8007218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800721c:	f001 fd0a 	bl	8008c34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007224:	2b00      	cmp	r3, #0
 8007226:	d106      	bne.n	8007236 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	3324      	adds	r3, #36	; 0x24
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	68b9      	ldr	r1, [r7, #8]
 8007230:	4618      	mov	r0, r3
 8007232:	f000 fc89 	bl	8007b48 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007236:	6978      	ldr	r0, [r7, #20]
 8007238:	f7ff ff26 	bl	8007088 <prvUnlockQueue>
	}
 800723c:	bf00      	nop
 800723e:	3718      	adds	r7, #24
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007244:	b580      	push	{r7, lr}
 8007246:	b08e      	sub	sp, #56	; 0x38
 8007248:	af04      	add	r7, sp, #16
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]
 8007250:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007254:	2b00      	cmp	r3, #0
 8007256:	d10c      	bne.n	8007272 <xTaskCreateStatic+0x2e>
	__asm volatile
 8007258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725c:	b672      	cpsid	i
 800725e:	f383 8811 	msr	BASEPRI, r3
 8007262:	f3bf 8f6f 	isb	sy
 8007266:	f3bf 8f4f 	dsb	sy
 800726a:	b662      	cpsie	i
 800726c:	623b      	str	r3, [r7, #32]
}
 800726e:	bf00      	nop
 8007270:	e7fe      	b.n	8007270 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007274:	2b00      	cmp	r3, #0
 8007276:	d10c      	bne.n	8007292 <xTaskCreateStatic+0x4e>
	__asm volatile
 8007278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727c:	b672      	cpsid	i
 800727e:	f383 8811 	msr	BASEPRI, r3
 8007282:	f3bf 8f6f 	isb	sy
 8007286:	f3bf 8f4f 	dsb	sy
 800728a:	b662      	cpsie	i
 800728c:	61fb      	str	r3, [r7, #28]
}
 800728e:	bf00      	nop
 8007290:	e7fe      	b.n	8007290 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007292:	23a8      	movs	r3, #168	; 0xa8
 8007294:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	2ba8      	cmp	r3, #168	; 0xa8
 800729a:	d00c      	beq.n	80072b6 <xTaskCreateStatic+0x72>
	__asm volatile
 800729c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a0:	b672      	cpsid	i
 80072a2:	f383 8811 	msr	BASEPRI, r3
 80072a6:	f3bf 8f6f 	isb	sy
 80072aa:	f3bf 8f4f 	dsb	sy
 80072ae:	b662      	cpsie	i
 80072b0:	61bb      	str	r3, [r7, #24]
}
 80072b2:	bf00      	nop
 80072b4:	e7fe      	b.n	80072b4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80072b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80072b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d01e      	beq.n	80072fc <xTaskCreateStatic+0xb8>
 80072be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d01b      	beq.n	80072fc <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80072c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80072c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80072ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d0:	2202      	movs	r2, #2
 80072d2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80072d6:	2300      	movs	r3, #0
 80072d8:	9303      	str	r3, [sp, #12]
 80072da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072dc:	9302      	str	r3, [sp, #8]
 80072de:	f107 0314 	add.w	r3, r7, #20
 80072e2:	9301      	str	r3, [sp, #4]
 80072e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	68b9      	ldr	r1, [r7, #8]
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f000 f850 	bl	8007394 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072f6:	f000 f8f5 	bl	80074e4 <prvAddNewTaskToReadyList>
 80072fa:	e001      	b.n	8007300 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80072fc:	2300      	movs	r3, #0
 80072fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007300:	697b      	ldr	r3, [r7, #20]
	}
 8007302:	4618      	mov	r0, r3
 8007304:	3728      	adds	r7, #40	; 0x28
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800730a:	b580      	push	{r7, lr}
 800730c:	b08c      	sub	sp, #48	; 0x30
 800730e:	af04      	add	r7, sp, #16
 8007310:	60f8      	str	r0, [r7, #12]
 8007312:	60b9      	str	r1, [r7, #8]
 8007314:	603b      	str	r3, [r7, #0]
 8007316:	4613      	mov	r3, r2
 8007318:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800731a:	88fb      	ldrh	r3, [r7, #6]
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	4618      	mov	r0, r3
 8007320:	f001 fd80 	bl	8008e24 <pvPortMalloc>
 8007324:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00e      	beq.n	800734a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800732c:	20a8      	movs	r0, #168	; 0xa8
 800732e:	f001 fd79 	bl	8008e24 <pvPortMalloc>
 8007332:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d003      	beq.n	8007342 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	697a      	ldr	r2, [r7, #20]
 800733e:	631a      	str	r2, [r3, #48]	; 0x30
 8007340:	e005      	b.n	800734e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007342:	6978      	ldr	r0, [r7, #20]
 8007344:	f001 fe38 	bl	8008fb8 <vPortFree>
 8007348:	e001      	b.n	800734e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800734a:	2300      	movs	r3, #0
 800734c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d017      	beq.n	8007384 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	2200      	movs	r2, #0
 8007358:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800735c:	88fa      	ldrh	r2, [r7, #6]
 800735e:	2300      	movs	r3, #0
 8007360:	9303      	str	r3, [sp, #12]
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	9302      	str	r3, [sp, #8]
 8007366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007368:	9301      	str	r3, [sp, #4]
 800736a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736c:	9300      	str	r3, [sp, #0]
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	68b9      	ldr	r1, [r7, #8]
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f000 f80e 	bl	8007394 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007378:	69f8      	ldr	r0, [r7, #28]
 800737a:	f000 f8b3 	bl	80074e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800737e:	2301      	movs	r3, #1
 8007380:	61bb      	str	r3, [r7, #24]
 8007382:	e002      	b.n	800738a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007384:	f04f 33ff 	mov.w	r3, #4294967295
 8007388:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800738a:	69bb      	ldr	r3, [r7, #24]
	}
 800738c:	4618      	mov	r0, r3
 800738e:	3720      	adds	r7, #32
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b088      	sub	sp, #32
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]
 80073a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80073a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	461a      	mov	r2, r3
 80073ac:	21a5      	movs	r1, #165	; 0xa5
 80073ae:	f001 ff1d 	bl	80091ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80073b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073b6:	6879      	ldr	r1, [r7, #4]
 80073b8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80073bc:	440b      	add	r3, r1
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	4413      	add	r3, r2
 80073c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	f023 0307 	bic.w	r3, r3, #7
 80073ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	f003 0307 	and.w	r3, r3, #7
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00c      	beq.n	80073f0 <prvInitialiseNewTask+0x5c>
	__asm volatile
 80073d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073da:	b672      	cpsid	i
 80073dc:	f383 8811 	msr	BASEPRI, r3
 80073e0:	f3bf 8f6f 	isb	sy
 80073e4:	f3bf 8f4f 	dsb	sy
 80073e8:	b662      	cpsie	i
 80073ea:	617b      	str	r3, [r7, #20]
}
 80073ec:	bf00      	nop
 80073ee:	e7fe      	b.n	80073ee <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d01f      	beq.n	8007436 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073f6:	2300      	movs	r3, #0
 80073f8:	61fb      	str	r3, [r7, #28]
 80073fa:	e012      	b.n	8007422 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80073fc:	68ba      	ldr	r2, [r7, #8]
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	4413      	add	r3, r2
 8007402:	7819      	ldrb	r1, [r3, #0]
 8007404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	4413      	add	r3, r2
 800740a:	3334      	adds	r3, #52	; 0x34
 800740c:	460a      	mov	r2, r1
 800740e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007410:	68ba      	ldr	r2, [r7, #8]
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	4413      	add	r3, r2
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d006      	beq.n	800742a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	3301      	adds	r3, #1
 8007420:	61fb      	str	r3, [r7, #28]
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	2b0f      	cmp	r3, #15
 8007426:	d9e9      	bls.n	80073fc <prvInitialiseNewTask+0x68>
 8007428:	e000      	b.n	800742c <prvInitialiseNewTask+0x98>
			{
				break;
 800742a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800742c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742e:	2200      	movs	r2, #0
 8007430:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007434:	e003      	b.n	800743e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007438:	2200      	movs	r2, #0
 800743a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800743e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007440:	2b37      	cmp	r3, #55	; 0x37
 8007442:	d901      	bls.n	8007448 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007444:	2337      	movs	r3, #55	; 0x37
 8007446:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800744c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800744e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007450:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007452:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007456:	2200      	movs	r2, #0
 8007458:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800745a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745c:	3304      	adds	r3, #4
 800745e:	4618      	mov	r0, r3
 8007460:	f7ff f910 	bl	8006684 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007466:	3318      	adds	r3, #24
 8007468:	4618      	mov	r0, r3
 800746a:	f7ff f90b 	bl	8006684 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800746e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007472:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007476:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800747a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800747e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007482:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007486:	2200      	movs	r2, #0
 8007488:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800748c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748e:	2200      	movs	r2, #0
 8007490:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007496:	3354      	adds	r3, #84	; 0x54
 8007498:	224c      	movs	r2, #76	; 0x4c
 800749a:	2100      	movs	r1, #0
 800749c:	4618      	mov	r0, r3
 800749e:	f001 fea5 	bl	80091ec <memset>
 80074a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a4:	4a0c      	ldr	r2, [pc, #48]	; (80074d8 <prvInitialiseNewTask+0x144>)
 80074a6:	659a      	str	r2, [r3, #88]	; 0x58
 80074a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074aa:	4a0c      	ldr	r2, [pc, #48]	; (80074dc <prvInitialiseNewTask+0x148>)
 80074ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80074ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b0:	4a0b      	ldr	r2, [pc, #44]	; (80074e0 <prvInitialiseNewTask+0x14c>)
 80074b2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80074b4:	683a      	ldr	r2, [r7, #0]
 80074b6:	68f9      	ldr	r1, [r7, #12]
 80074b8:	69b8      	ldr	r0, [r7, #24]
 80074ba:	f001 fa77 	bl	80089ac <pxPortInitialiseStack>
 80074be:	4602      	mov	r2, r0
 80074c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80074c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d002      	beq.n	80074d0 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80074ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074ce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074d0:	bf00      	nop
 80074d2:	3720      	adds	r7, #32
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	20005e08 	.word	0x20005e08
 80074dc:	20005e70 	.word	0x20005e70
 80074e0:	20005ed8 	.word	0x20005ed8

080074e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80074ec:	f001 fb6e 	bl	8008bcc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80074f0:	4b2d      	ldr	r3, [pc, #180]	; (80075a8 <prvAddNewTaskToReadyList+0xc4>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	3301      	adds	r3, #1
 80074f6:	4a2c      	ldr	r2, [pc, #176]	; (80075a8 <prvAddNewTaskToReadyList+0xc4>)
 80074f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80074fa:	4b2c      	ldr	r3, [pc, #176]	; (80075ac <prvAddNewTaskToReadyList+0xc8>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d109      	bne.n	8007516 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007502:	4a2a      	ldr	r2, [pc, #168]	; (80075ac <prvAddNewTaskToReadyList+0xc8>)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007508:	4b27      	ldr	r3, [pc, #156]	; (80075a8 <prvAddNewTaskToReadyList+0xc4>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d110      	bne.n	8007532 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007510:	f000 fc4e 	bl	8007db0 <prvInitialiseTaskLists>
 8007514:	e00d      	b.n	8007532 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007516:	4b26      	ldr	r3, [pc, #152]	; (80075b0 <prvAddNewTaskToReadyList+0xcc>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d109      	bne.n	8007532 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800751e:	4b23      	ldr	r3, [pc, #140]	; (80075ac <prvAddNewTaskToReadyList+0xc8>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007528:	429a      	cmp	r2, r3
 800752a:	d802      	bhi.n	8007532 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800752c:	4a1f      	ldr	r2, [pc, #124]	; (80075ac <prvAddNewTaskToReadyList+0xc8>)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007532:	4b20      	ldr	r3, [pc, #128]	; (80075b4 <prvAddNewTaskToReadyList+0xd0>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	3301      	adds	r3, #1
 8007538:	4a1e      	ldr	r2, [pc, #120]	; (80075b4 <prvAddNewTaskToReadyList+0xd0>)
 800753a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800753c:	4b1d      	ldr	r3, [pc, #116]	; (80075b4 <prvAddNewTaskToReadyList+0xd0>)
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007548:	4b1b      	ldr	r3, [pc, #108]	; (80075b8 <prvAddNewTaskToReadyList+0xd4>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	429a      	cmp	r2, r3
 800754e:	d903      	bls.n	8007558 <prvAddNewTaskToReadyList+0x74>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007554:	4a18      	ldr	r2, [pc, #96]	; (80075b8 <prvAddNewTaskToReadyList+0xd4>)
 8007556:	6013      	str	r3, [r2, #0]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800755c:	4613      	mov	r3, r2
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	4413      	add	r3, r2
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	4a15      	ldr	r2, [pc, #84]	; (80075bc <prvAddNewTaskToReadyList+0xd8>)
 8007566:	441a      	add	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	3304      	adds	r3, #4
 800756c:	4619      	mov	r1, r3
 800756e:	4610      	mov	r0, r2
 8007570:	f7ff f895 	bl	800669e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007574:	f001 fb5e 	bl	8008c34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007578:	4b0d      	ldr	r3, [pc, #52]	; (80075b0 <prvAddNewTaskToReadyList+0xcc>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00e      	beq.n	800759e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007580:	4b0a      	ldr	r3, [pc, #40]	; (80075ac <prvAddNewTaskToReadyList+0xc8>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758a:	429a      	cmp	r2, r3
 800758c:	d207      	bcs.n	800759e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800758e:	4b0c      	ldr	r3, [pc, #48]	; (80075c0 <prvAddNewTaskToReadyList+0xdc>)
 8007590:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007594:	601a      	str	r2, [r3, #0]
 8007596:	f3bf 8f4f 	dsb	sy
 800759a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800759e:	bf00      	nop
 80075a0:	3708      	adds	r7, #8
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	20002090 	.word	0x20002090
 80075ac:	20001bbc 	.word	0x20001bbc
 80075b0:	2000209c 	.word	0x2000209c
 80075b4:	200020ac 	.word	0x200020ac
 80075b8:	20002098 	.word	0x20002098
 80075bc:	20001bc0 	.word	0x20001bc0
 80075c0:	e000ed04 	.word	0xe000ed04

080075c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80075cc:	2300      	movs	r3, #0
 80075ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d019      	beq.n	800760a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80075d6:	4b14      	ldr	r3, [pc, #80]	; (8007628 <vTaskDelay+0x64>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00c      	beq.n	80075f8 <vTaskDelay+0x34>
	__asm volatile
 80075de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e2:	b672      	cpsid	i
 80075e4:	f383 8811 	msr	BASEPRI, r3
 80075e8:	f3bf 8f6f 	isb	sy
 80075ec:	f3bf 8f4f 	dsb	sy
 80075f0:	b662      	cpsie	i
 80075f2:	60bb      	str	r3, [r7, #8]
}
 80075f4:	bf00      	nop
 80075f6:	e7fe      	b.n	80075f6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80075f8:	f000 f88e 	bl	8007718 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80075fc:	2100      	movs	r1, #0
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 fd62 	bl	80080c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007604:	f000 f896 	bl	8007734 <xTaskResumeAll>
 8007608:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d107      	bne.n	8007620 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8007610:	4b06      	ldr	r3, [pc, #24]	; (800762c <vTaskDelay+0x68>)
 8007612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007616:	601a      	str	r2, [r3, #0]
 8007618:	f3bf 8f4f 	dsb	sy
 800761c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007620:	bf00      	nop
 8007622:	3710      	adds	r7, #16
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	200020b8 	.word	0x200020b8
 800762c:	e000ed04 	.word	0xe000ed04

08007630 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b08a      	sub	sp, #40	; 0x28
 8007634:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007636:	2300      	movs	r3, #0
 8007638:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800763a:	2300      	movs	r3, #0
 800763c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800763e:	463a      	mov	r2, r7
 8007640:	1d39      	adds	r1, r7, #4
 8007642:	f107 0308 	add.w	r3, r7, #8
 8007646:	4618      	mov	r0, r3
 8007648:	f7fe ffc8 	bl	80065dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800764c:	6839      	ldr	r1, [r7, #0]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	68ba      	ldr	r2, [r7, #8]
 8007652:	9202      	str	r2, [sp, #8]
 8007654:	9301      	str	r3, [sp, #4]
 8007656:	2300      	movs	r3, #0
 8007658:	9300      	str	r3, [sp, #0]
 800765a:	2300      	movs	r3, #0
 800765c:	460a      	mov	r2, r1
 800765e:	4926      	ldr	r1, [pc, #152]	; (80076f8 <vTaskStartScheduler+0xc8>)
 8007660:	4826      	ldr	r0, [pc, #152]	; (80076fc <vTaskStartScheduler+0xcc>)
 8007662:	f7ff fdef 	bl	8007244 <xTaskCreateStatic>
 8007666:	4603      	mov	r3, r0
 8007668:	4a25      	ldr	r2, [pc, #148]	; (8007700 <vTaskStartScheduler+0xd0>)
 800766a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800766c:	4b24      	ldr	r3, [pc, #144]	; (8007700 <vTaskStartScheduler+0xd0>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d002      	beq.n	800767a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007674:	2301      	movs	r3, #1
 8007676:	617b      	str	r3, [r7, #20]
 8007678:	e001      	b.n	800767e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800767a:	2300      	movs	r3, #0
 800767c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	2b01      	cmp	r3, #1
 8007682:	d102      	bne.n	800768a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007684:	f000 fd74 	bl	8008170 <xTimerCreateTimerTask>
 8007688:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d11d      	bne.n	80076cc <vTaskStartScheduler+0x9c>
	__asm volatile
 8007690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007694:	b672      	cpsid	i
 8007696:	f383 8811 	msr	BASEPRI, r3
 800769a:	f3bf 8f6f 	isb	sy
 800769e:	f3bf 8f4f 	dsb	sy
 80076a2:	b662      	cpsie	i
 80076a4:	613b      	str	r3, [r7, #16]
}
 80076a6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80076a8:	4b16      	ldr	r3, [pc, #88]	; (8007704 <vTaskStartScheduler+0xd4>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	3354      	adds	r3, #84	; 0x54
 80076ae:	4a16      	ldr	r2, [pc, #88]	; (8007708 <vTaskStartScheduler+0xd8>)
 80076b0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80076b2:	4b16      	ldr	r3, [pc, #88]	; (800770c <vTaskStartScheduler+0xdc>)
 80076b4:	f04f 32ff 	mov.w	r2, #4294967295
 80076b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80076ba:	4b15      	ldr	r3, [pc, #84]	; (8007710 <vTaskStartScheduler+0xe0>)
 80076bc:	2201      	movs	r2, #1
 80076be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80076c0:	4b14      	ldr	r3, [pc, #80]	; (8007714 <vTaskStartScheduler+0xe4>)
 80076c2:	2200      	movs	r2, #0
 80076c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80076c6:	f001 fa03 	bl	8008ad0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80076ca:	e010      	b.n	80076ee <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d2:	d10c      	bne.n	80076ee <vTaskStartScheduler+0xbe>
	__asm volatile
 80076d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d8:	b672      	cpsid	i
 80076da:	f383 8811 	msr	BASEPRI, r3
 80076de:	f3bf 8f6f 	isb	sy
 80076e2:	f3bf 8f4f 	dsb	sy
 80076e6:	b662      	cpsie	i
 80076e8:	60fb      	str	r3, [r7, #12]
}
 80076ea:	bf00      	nop
 80076ec:	e7fe      	b.n	80076ec <vTaskStartScheduler+0xbc>
}
 80076ee:	bf00      	nop
 80076f0:	3718      	adds	r7, #24
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	080094c8 	.word	0x080094c8
 80076fc:	08007d81 	.word	0x08007d81
 8007700:	200020b4 	.word	0x200020b4
 8007704:	20001bbc 	.word	0x20001bbc
 8007708:	2000005c 	.word	0x2000005c
 800770c:	200020b0 	.word	0x200020b0
 8007710:	2000209c 	.word	0x2000209c
 8007714:	20002094 	.word	0x20002094

08007718 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007718:	b480      	push	{r7}
 800771a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800771c:	4b04      	ldr	r3, [pc, #16]	; (8007730 <vTaskSuspendAll+0x18>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	3301      	adds	r3, #1
 8007722:	4a03      	ldr	r2, [pc, #12]	; (8007730 <vTaskSuspendAll+0x18>)
 8007724:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007726:	bf00      	nop
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr
 8007730:	200020b8 	.word	0x200020b8

08007734 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800773a:	2300      	movs	r3, #0
 800773c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800773e:	2300      	movs	r3, #0
 8007740:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007742:	4b43      	ldr	r3, [pc, #268]	; (8007850 <xTaskResumeAll+0x11c>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d10c      	bne.n	8007764 <xTaskResumeAll+0x30>
	__asm volatile
 800774a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774e:	b672      	cpsid	i
 8007750:	f383 8811 	msr	BASEPRI, r3
 8007754:	f3bf 8f6f 	isb	sy
 8007758:	f3bf 8f4f 	dsb	sy
 800775c:	b662      	cpsie	i
 800775e:	603b      	str	r3, [r7, #0]
}
 8007760:	bf00      	nop
 8007762:	e7fe      	b.n	8007762 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007764:	f001 fa32 	bl	8008bcc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007768:	4b39      	ldr	r3, [pc, #228]	; (8007850 <xTaskResumeAll+0x11c>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	3b01      	subs	r3, #1
 800776e:	4a38      	ldr	r2, [pc, #224]	; (8007850 <xTaskResumeAll+0x11c>)
 8007770:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007772:	4b37      	ldr	r3, [pc, #220]	; (8007850 <xTaskResumeAll+0x11c>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d162      	bne.n	8007840 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800777a:	4b36      	ldr	r3, [pc, #216]	; (8007854 <xTaskResumeAll+0x120>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d05e      	beq.n	8007840 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007782:	e02f      	b.n	80077e4 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007784:	4b34      	ldr	r3, [pc, #208]	; (8007858 <xTaskResumeAll+0x124>)
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	3318      	adds	r3, #24
 8007790:	4618      	mov	r0, r3
 8007792:	f7fe ffe1 	bl	8006758 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	3304      	adds	r3, #4
 800779a:	4618      	mov	r0, r3
 800779c:	f7fe ffdc 	bl	8006758 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077a4:	4b2d      	ldr	r3, [pc, #180]	; (800785c <xTaskResumeAll+0x128>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d903      	bls.n	80077b4 <xTaskResumeAll+0x80>
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b0:	4a2a      	ldr	r2, [pc, #168]	; (800785c <xTaskResumeAll+0x128>)
 80077b2:	6013      	str	r3, [r2, #0]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b8:	4613      	mov	r3, r2
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	4413      	add	r3, r2
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	4a27      	ldr	r2, [pc, #156]	; (8007860 <xTaskResumeAll+0x12c>)
 80077c2:	441a      	add	r2, r3
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	3304      	adds	r3, #4
 80077c8:	4619      	mov	r1, r3
 80077ca:	4610      	mov	r0, r2
 80077cc:	f7fe ff67 	bl	800669e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d4:	4b23      	ldr	r3, [pc, #140]	; (8007864 <xTaskResumeAll+0x130>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077da:	429a      	cmp	r2, r3
 80077dc:	d302      	bcc.n	80077e4 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80077de:	4b22      	ldr	r3, [pc, #136]	; (8007868 <xTaskResumeAll+0x134>)
 80077e0:	2201      	movs	r2, #1
 80077e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077e4:	4b1c      	ldr	r3, [pc, #112]	; (8007858 <xTaskResumeAll+0x124>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d1cb      	bne.n	8007784 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d001      	beq.n	80077f6 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80077f2:	f000 fbb9 	bl	8007f68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80077f6:	4b1d      	ldr	r3, [pc, #116]	; (800786c <xTaskResumeAll+0x138>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d010      	beq.n	8007824 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007802:	f000 f859 	bl	80078b8 <xTaskIncrementTick>
 8007806:	4603      	mov	r3, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d002      	beq.n	8007812 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800780c:	4b16      	ldr	r3, [pc, #88]	; (8007868 <xTaskResumeAll+0x134>)
 800780e:	2201      	movs	r2, #1
 8007810:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	3b01      	subs	r3, #1
 8007816:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1f1      	bne.n	8007802 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800781e:	4b13      	ldr	r3, [pc, #76]	; (800786c <xTaskResumeAll+0x138>)
 8007820:	2200      	movs	r2, #0
 8007822:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007824:	4b10      	ldr	r3, [pc, #64]	; (8007868 <xTaskResumeAll+0x134>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d009      	beq.n	8007840 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800782c:	2301      	movs	r3, #1
 800782e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007830:	4b0f      	ldr	r3, [pc, #60]	; (8007870 <xTaskResumeAll+0x13c>)
 8007832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007836:	601a      	str	r2, [r3, #0]
 8007838:	f3bf 8f4f 	dsb	sy
 800783c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007840:	f001 f9f8 	bl	8008c34 <vPortExitCritical>

	return xAlreadyYielded;
 8007844:	68bb      	ldr	r3, [r7, #8]
}
 8007846:	4618      	mov	r0, r3
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	200020b8 	.word	0x200020b8
 8007854:	20002090 	.word	0x20002090
 8007858:	20002050 	.word	0x20002050
 800785c:	20002098 	.word	0x20002098
 8007860:	20001bc0 	.word	0x20001bc0
 8007864:	20001bbc 	.word	0x20001bbc
 8007868:	200020a4 	.word	0x200020a4
 800786c:	200020a0 	.word	0x200020a0
 8007870:	e000ed04 	.word	0xe000ed04

08007874 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800787a:	4b05      	ldr	r3, [pc, #20]	; (8007890 <xTaskGetTickCount+0x1c>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007880:	687b      	ldr	r3, [r7, #4]
}
 8007882:	4618      	mov	r0, r3
 8007884:	370c      	adds	r7, #12
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	20002094 	.word	0x20002094

08007894 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800789a:	f001 fa7f 	bl	8008d9c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800789e:	2300      	movs	r3, #0
 80078a0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80078a2:	4b04      	ldr	r3, [pc, #16]	; (80078b4 <xTaskGetTickCountFromISR+0x20>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80078a8:	683b      	ldr	r3, [r7, #0]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3708      	adds	r7, #8
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	20002094 	.word	0x20002094

080078b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b086      	sub	sp, #24
 80078bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80078be:	2300      	movs	r3, #0
 80078c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078c2:	4b50      	ldr	r3, [pc, #320]	; (8007a04 <xTaskIncrementTick+0x14c>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	f040 808b 	bne.w	80079e2 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80078cc:	4b4e      	ldr	r3, [pc, #312]	; (8007a08 <xTaskIncrementTick+0x150>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	3301      	adds	r3, #1
 80078d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80078d4:	4a4c      	ldr	r2, [pc, #304]	; (8007a08 <xTaskIncrementTick+0x150>)
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d122      	bne.n	8007926 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80078e0:	4b4a      	ldr	r3, [pc, #296]	; (8007a0c <xTaskIncrementTick+0x154>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00c      	beq.n	8007904 <xTaskIncrementTick+0x4c>
	__asm volatile
 80078ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ee:	b672      	cpsid	i
 80078f0:	f383 8811 	msr	BASEPRI, r3
 80078f4:	f3bf 8f6f 	isb	sy
 80078f8:	f3bf 8f4f 	dsb	sy
 80078fc:	b662      	cpsie	i
 80078fe:	603b      	str	r3, [r7, #0]
}
 8007900:	bf00      	nop
 8007902:	e7fe      	b.n	8007902 <xTaskIncrementTick+0x4a>
 8007904:	4b41      	ldr	r3, [pc, #260]	; (8007a0c <xTaskIncrementTick+0x154>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	60fb      	str	r3, [r7, #12]
 800790a:	4b41      	ldr	r3, [pc, #260]	; (8007a10 <xTaskIncrementTick+0x158>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a3f      	ldr	r2, [pc, #252]	; (8007a0c <xTaskIncrementTick+0x154>)
 8007910:	6013      	str	r3, [r2, #0]
 8007912:	4a3f      	ldr	r2, [pc, #252]	; (8007a10 <xTaskIncrementTick+0x158>)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6013      	str	r3, [r2, #0]
 8007918:	4b3e      	ldr	r3, [pc, #248]	; (8007a14 <xTaskIncrementTick+0x15c>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	3301      	adds	r3, #1
 800791e:	4a3d      	ldr	r2, [pc, #244]	; (8007a14 <xTaskIncrementTick+0x15c>)
 8007920:	6013      	str	r3, [r2, #0]
 8007922:	f000 fb21 	bl	8007f68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007926:	4b3c      	ldr	r3, [pc, #240]	; (8007a18 <xTaskIncrementTick+0x160>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	693a      	ldr	r2, [r7, #16]
 800792c:	429a      	cmp	r2, r3
 800792e:	d349      	bcc.n	80079c4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007930:	4b36      	ldr	r3, [pc, #216]	; (8007a0c <xTaskIncrementTick+0x154>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d104      	bne.n	8007944 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800793a:	4b37      	ldr	r3, [pc, #220]	; (8007a18 <xTaskIncrementTick+0x160>)
 800793c:	f04f 32ff 	mov.w	r2, #4294967295
 8007940:	601a      	str	r2, [r3, #0]
					break;
 8007942:	e03f      	b.n	80079c4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007944:	4b31      	ldr	r3, [pc, #196]	; (8007a0c <xTaskIncrementTick+0x154>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007954:	693a      	ldr	r2, [r7, #16]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	429a      	cmp	r2, r3
 800795a:	d203      	bcs.n	8007964 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800795c:	4a2e      	ldr	r2, [pc, #184]	; (8007a18 <xTaskIncrementTick+0x160>)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007962:	e02f      	b.n	80079c4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	3304      	adds	r3, #4
 8007968:	4618      	mov	r0, r3
 800796a:	f7fe fef5 	bl	8006758 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007972:	2b00      	cmp	r3, #0
 8007974:	d004      	beq.n	8007980 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	3318      	adds	r3, #24
 800797a:	4618      	mov	r0, r3
 800797c:	f7fe feec 	bl	8006758 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007984:	4b25      	ldr	r3, [pc, #148]	; (8007a1c <xTaskIncrementTick+0x164>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	429a      	cmp	r2, r3
 800798a:	d903      	bls.n	8007994 <xTaskIncrementTick+0xdc>
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007990:	4a22      	ldr	r2, [pc, #136]	; (8007a1c <xTaskIncrementTick+0x164>)
 8007992:	6013      	str	r3, [r2, #0]
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007998:	4613      	mov	r3, r2
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	4413      	add	r3, r2
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	4a1f      	ldr	r2, [pc, #124]	; (8007a20 <xTaskIncrementTick+0x168>)
 80079a2:	441a      	add	r2, r3
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	3304      	adds	r3, #4
 80079a8:	4619      	mov	r1, r3
 80079aa:	4610      	mov	r0, r2
 80079ac:	f7fe fe77 	bl	800669e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079b4:	4b1b      	ldr	r3, [pc, #108]	; (8007a24 <xTaskIncrementTick+0x16c>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d3b8      	bcc.n	8007930 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80079be:	2301      	movs	r3, #1
 80079c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079c2:	e7b5      	b.n	8007930 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80079c4:	4b17      	ldr	r3, [pc, #92]	; (8007a24 <xTaskIncrementTick+0x16c>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ca:	4915      	ldr	r1, [pc, #84]	; (8007a20 <xTaskIncrementTick+0x168>)
 80079cc:	4613      	mov	r3, r2
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	4413      	add	r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	440b      	add	r3, r1
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d907      	bls.n	80079ec <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80079dc:	2301      	movs	r3, #1
 80079de:	617b      	str	r3, [r7, #20]
 80079e0:	e004      	b.n	80079ec <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80079e2:	4b11      	ldr	r3, [pc, #68]	; (8007a28 <xTaskIncrementTick+0x170>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	3301      	adds	r3, #1
 80079e8:	4a0f      	ldr	r2, [pc, #60]	; (8007a28 <xTaskIncrementTick+0x170>)
 80079ea:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80079ec:	4b0f      	ldr	r3, [pc, #60]	; (8007a2c <xTaskIncrementTick+0x174>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d001      	beq.n	80079f8 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80079f4:	2301      	movs	r3, #1
 80079f6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80079f8:	697b      	ldr	r3, [r7, #20]
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3718      	adds	r7, #24
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	200020b8 	.word	0x200020b8
 8007a08:	20002094 	.word	0x20002094
 8007a0c:	20002048 	.word	0x20002048
 8007a10:	2000204c 	.word	0x2000204c
 8007a14:	200020a8 	.word	0x200020a8
 8007a18:	200020b0 	.word	0x200020b0
 8007a1c:	20002098 	.word	0x20002098
 8007a20:	20001bc0 	.word	0x20001bc0
 8007a24:	20001bbc 	.word	0x20001bbc
 8007a28:	200020a0 	.word	0x200020a0
 8007a2c:	200020a4 	.word	0x200020a4

08007a30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a30:	b480      	push	{r7}
 8007a32:	b085      	sub	sp, #20
 8007a34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a36:	4b2b      	ldr	r3, [pc, #172]	; (8007ae4 <vTaskSwitchContext+0xb4>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d003      	beq.n	8007a46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a3e:	4b2a      	ldr	r3, [pc, #168]	; (8007ae8 <vTaskSwitchContext+0xb8>)
 8007a40:	2201      	movs	r2, #1
 8007a42:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a44:	e048      	b.n	8007ad8 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8007a46:	4b28      	ldr	r3, [pc, #160]	; (8007ae8 <vTaskSwitchContext+0xb8>)
 8007a48:	2200      	movs	r2, #0
 8007a4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a4c:	4b27      	ldr	r3, [pc, #156]	; (8007aec <vTaskSwitchContext+0xbc>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	60fb      	str	r3, [r7, #12]
 8007a52:	e012      	b.n	8007a7a <vTaskSwitchContext+0x4a>
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d10c      	bne.n	8007a74 <vTaskSwitchContext+0x44>
	__asm volatile
 8007a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5e:	b672      	cpsid	i
 8007a60:	f383 8811 	msr	BASEPRI, r3
 8007a64:	f3bf 8f6f 	isb	sy
 8007a68:	f3bf 8f4f 	dsb	sy
 8007a6c:	b662      	cpsie	i
 8007a6e:	607b      	str	r3, [r7, #4]
}
 8007a70:	bf00      	nop
 8007a72:	e7fe      	b.n	8007a72 <vTaskSwitchContext+0x42>
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	3b01      	subs	r3, #1
 8007a78:	60fb      	str	r3, [r7, #12]
 8007a7a:	491d      	ldr	r1, [pc, #116]	; (8007af0 <vTaskSwitchContext+0xc0>)
 8007a7c:	68fa      	ldr	r2, [r7, #12]
 8007a7e:	4613      	mov	r3, r2
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	4413      	add	r3, r2
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	440b      	add	r3, r1
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d0e2      	beq.n	8007a54 <vTaskSwitchContext+0x24>
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	4613      	mov	r3, r2
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	4413      	add	r3, r2
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	4a15      	ldr	r2, [pc, #84]	; (8007af0 <vTaskSwitchContext+0xc0>)
 8007a9a:	4413      	add	r3, r2
 8007a9c:	60bb      	str	r3, [r7, #8]
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	685a      	ldr	r2, [r3, #4]
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	605a      	str	r2, [r3, #4]
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	685a      	ldr	r2, [r3, #4]
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	3308      	adds	r3, #8
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d104      	bne.n	8007abe <vTaskSwitchContext+0x8e>
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	685a      	ldr	r2, [r3, #4]
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	605a      	str	r2, [r3, #4]
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	4a0b      	ldr	r2, [pc, #44]	; (8007af4 <vTaskSwitchContext+0xc4>)
 8007ac6:	6013      	str	r3, [r2, #0]
 8007ac8:	4a08      	ldr	r2, [pc, #32]	; (8007aec <vTaskSwitchContext+0xbc>)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007ace:	4b09      	ldr	r3, [pc, #36]	; (8007af4 <vTaskSwitchContext+0xc4>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	3354      	adds	r3, #84	; 0x54
 8007ad4:	4a08      	ldr	r2, [pc, #32]	; (8007af8 <vTaskSwitchContext+0xc8>)
 8007ad6:	6013      	str	r3, [r2, #0]
}
 8007ad8:	bf00      	nop
 8007ada:	3714      	adds	r7, #20
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr
 8007ae4:	200020b8 	.word	0x200020b8
 8007ae8:	200020a4 	.word	0x200020a4
 8007aec:	20002098 	.word	0x20002098
 8007af0:	20001bc0 	.word	0x20001bc0
 8007af4:	20001bbc 	.word	0x20001bbc
 8007af8:	2000005c 	.word	0x2000005c

08007afc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d10c      	bne.n	8007b26 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8007b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b10:	b672      	cpsid	i
 8007b12:	f383 8811 	msr	BASEPRI, r3
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	b662      	cpsie	i
 8007b20:	60fb      	str	r3, [r7, #12]
}
 8007b22:	bf00      	nop
 8007b24:	e7fe      	b.n	8007b24 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b26:	4b07      	ldr	r3, [pc, #28]	; (8007b44 <vTaskPlaceOnEventList+0x48>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	3318      	adds	r3, #24
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f7fe fdd9 	bl	80066e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b34:	2101      	movs	r1, #1
 8007b36:	6838      	ldr	r0, [r7, #0]
 8007b38:	f000 fac6 	bl	80080c8 <prvAddCurrentTaskToDelayedList>
}
 8007b3c:	bf00      	nop
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	20001bbc 	.word	0x20001bbc

08007b48 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b086      	sub	sp, #24
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d10c      	bne.n	8007b74 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8007b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5e:	b672      	cpsid	i
 8007b60:	f383 8811 	msr	BASEPRI, r3
 8007b64:	f3bf 8f6f 	isb	sy
 8007b68:	f3bf 8f4f 	dsb	sy
 8007b6c:	b662      	cpsie	i
 8007b6e:	617b      	str	r3, [r7, #20]
}
 8007b70:	bf00      	nop
 8007b72:	e7fe      	b.n	8007b72 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b74:	4b0a      	ldr	r3, [pc, #40]	; (8007ba0 <vTaskPlaceOnEventListRestricted+0x58>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	3318      	adds	r3, #24
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	f7fe fd8e 	bl	800669e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d002      	beq.n	8007b8e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8007b88:	f04f 33ff 	mov.w	r3, #4294967295
 8007b8c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007b8e:	6879      	ldr	r1, [r7, #4]
 8007b90:	68b8      	ldr	r0, [r7, #8]
 8007b92:	f000 fa99 	bl	80080c8 <prvAddCurrentTaskToDelayedList>
	}
 8007b96:	bf00      	nop
 8007b98:	3718      	adds	r7, #24
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	20001bbc 	.word	0x20001bbc

08007ba4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b086      	sub	sp, #24
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d10c      	bne.n	8007bd4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8007bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bbe:	b672      	cpsid	i
 8007bc0:	f383 8811 	msr	BASEPRI, r3
 8007bc4:	f3bf 8f6f 	isb	sy
 8007bc8:	f3bf 8f4f 	dsb	sy
 8007bcc:	b662      	cpsie	i
 8007bce:	60fb      	str	r3, [r7, #12]
}
 8007bd0:	bf00      	nop
 8007bd2:	e7fe      	b.n	8007bd2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	3318      	adds	r3, #24
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f7fe fdbd 	bl	8006758 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bde:	4b1e      	ldr	r3, [pc, #120]	; (8007c58 <xTaskRemoveFromEventList+0xb4>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d11d      	bne.n	8007c22 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	3304      	adds	r3, #4
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fe fdb4 	bl	8006758 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bf4:	4b19      	ldr	r3, [pc, #100]	; (8007c5c <xTaskRemoveFromEventList+0xb8>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d903      	bls.n	8007c04 <xTaskRemoveFromEventList+0x60>
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c00:	4a16      	ldr	r2, [pc, #88]	; (8007c5c <xTaskRemoveFromEventList+0xb8>)
 8007c02:	6013      	str	r3, [r2, #0]
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c08:	4613      	mov	r3, r2
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	4413      	add	r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	4a13      	ldr	r2, [pc, #76]	; (8007c60 <xTaskRemoveFromEventList+0xbc>)
 8007c12:	441a      	add	r2, r3
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	3304      	adds	r3, #4
 8007c18:	4619      	mov	r1, r3
 8007c1a:	4610      	mov	r0, r2
 8007c1c:	f7fe fd3f 	bl	800669e <vListInsertEnd>
 8007c20:	e005      	b.n	8007c2e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	3318      	adds	r3, #24
 8007c26:	4619      	mov	r1, r3
 8007c28:	480e      	ldr	r0, [pc, #56]	; (8007c64 <xTaskRemoveFromEventList+0xc0>)
 8007c2a:	f7fe fd38 	bl	800669e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c32:	4b0d      	ldr	r3, [pc, #52]	; (8007c68 <xTaskRemoveFromEventList+0xc4>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d905      	bls.n	8007c48 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007c40:	4b0a      	ldr	r3, [pc, #40]	; (8007c6c <xTaskRemoveFromEventList+0xc8>)
 8007c42:	2201      	movs	r2, #1
 8007c44:	601a      	str	r2, [r3, #0]
 8007c46:	e001      	b.n	8007c4c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007c4c:	697b      	ldr	r3, [r7, #20]
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3718      	adds	r7, #24
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	200020b8 	.word	0x200020b8
 8007c5c:	20002098 	.word	0x20002098
 8007c60:	20001bc0 	.word	0x20001bc0
 8007c64:	20002050 	.word	0x20002050
 8007c68:	20001bbc 	.word	0x20001bbc
 8007c6c:	200020a4 	.word	0x200020a4

08007c70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c78:	4b06      	ldr	r3, [pc, #24]	; (8007c94 <vTaskInternalSetTimeOutState+0x24>)
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007c80:	4b05      	ldr	r3, [pc, #20]	; (8007c98 <vTaskInternalSetTimeOutState+0x28>)
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	605a      	str	r2, [r3, #4]
}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr
 8007c94:	200020a8 	.word	0x200020a8
 8007c98:	20002094 	.word	0x20002094

08007c9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b088      	sub	sp, #32
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d10c      	bne.n	8007cc6 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8007cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb0:	b672      	cpsid	i
 8007cb2:	f383 8811 	msr	BASEPRI, r3
 8007cb6:	f3bf 8f6f 	isb	sy
 8007cba:	f3bf 8f4f 	dsb	sy
 8007cbe:	b662      	cpsie	i
 8007cc0:	613b      	str	r3, [r7, #16]
}
 8007cc2:	bf00      	nop
 8007cc4:	e7fe      	b.n	8007cc4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d10c      	bne.n	8007ce6 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8007ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd0:	b672      	cpsid	i
 8007cd2:	f383 8811 	msr	BASEPRI, r3
 8007cd6:	f3bf 8f6f 	isb	sy
 8007cda:	f3bf 8f4f 	dsb	sy
 8007cde:	b662      	cpsie	i
 8007ce0:	60fb      	str	r3, [r7, #12]
}
 8007ce2:	bf00      	nop
 8007ce4:	e7fe      	b.n	8007ce4 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8007ce6:	f000 ff71 	bl	8008bcc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007cea:	4b1d      	ldr	r3, [pc, #116]	; (8007d60 <xTaskCheckForTimeOut+0xc4>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	69ba      	ldr	r2, [r7, #24]
 8007cf6:	1ad3      	subs	r3, r2, r3
 8007cf8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d02:	d102      	bne.n	8007d0a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007d04:	2300      	movs	r3, #0
 8007d06:	61fb      	str	r3, [r7, #28]
 8007d08:	e023      	b.n	8007d52 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	4b15      	ldr	r3, [pc, #84]	; (8007d64 <xTaskCheckForTimeOut+0xc8>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d007      	beq.n	8007d26 <xTaskCheckForTimeOut+0x8a>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	69ba      	ldr	r2, [r7, #24]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d302      	bcc.n	8007d26 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007d20:	2301      	movs	r3, #1
 8007d22:	61fb      	str	r3, [r7, #28]
 8007d24:	e015      	b.n	8007d52 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	697a      	ldr	r2, [r7, #20]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d20b      	bcs.n	8007d48 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	1ad2      	subs	r2, r2, r3
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f7ff ff97 	bl	8007c70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007d42:	2300      	movs	r3, #0
 8007d44:	61fb      	str	r3, [r7, #28]
 8007d46:	e004      	b.n	8007d52 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007d52:	f000 ff6f 	bl	8008c34 <vPortExitCritical>

	return xReturn;
 8007d56:	69fb      	ldr	r3, [r7, #28]
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3720      	adds	r7, #32
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	20002094 	.word	0x20002094
 8007d64:	200020a8 	.word	0x200020a8

08007d68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d68:	b480      	push	{r7}
 8007d6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007d6c:	4b03      	ldr	r3, [pc, #12]	; (8007d7c <vTaskMissedYield+0x14>)
 8007d6e:	2201      	movs	r2, #1
 8007d70:	601a      	str	r2, [r3, #0]
}
 8007d72:	bf00      	nop
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr
 8007d7c:	200020a4 	.word	0x200020a4

08007d80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d88:	f000 f852 	bl	8007e30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d8c:	4b06      	ldr	r3, [pc, #24]	; (8007da8 <prvIdleTask+0x28>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d9f9      	bls.n	8007d88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d94:	4b05      	ldr	r3, [pc, #20]	; (8007dac <prvIdleTask+0x2c>)
 8007d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d9a:	601a      	str	r2, [r3, #0]
 8007d9c:	f3bf 8f4f 	dsb	sy
 8007da0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007da4:	e7f0      	b.n	8007d88 <prvIdleTask+0x8>
 8007da6:	bf00      	nop
 8007da8:	20001bc0 	.word	0x20001bc0
 8007dac:	e000ed04 	.word	0xe000ed04

08007db0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007db6:	2300      	movs	r3, #0
 8007db8:	607b      	str	r3, [r7, #4]
 8007dba:	e00c      	b.n	8007dd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	4613      	mov	r3, r2
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	4413      	add	r3, r2
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	4a12      	ldr	r2, [pc, #72]	; (8007e10 <prvInitialiseTaskLists+0x60>)
 8007dc8:	4413      	add	r3, r2
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7fe fc3a 	bl	8006644 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	607b      	str	r3, [r7, #4]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2b37      	cmp	r3, #55	; 0x37
 8007dda:	d9ef      	bls.n	8007dbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ddc:	480d      	ldr	r0, [pc, #52]	; (8007e14 <prvInitialiseTaskLists+0x64>)
 8007dde:	f7fe fc31 	bl	8006644 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007de2:	480d      	ldr	r0, [pc, #52]	; (8007e18 <prvInitialiseTaskLists+0x68>)
 8007de4:	f7fe fc2e 	bl	8006644 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007de8:	480c      	ldr	r0, [pc, #48]	; (8007e1c <prvInitialiseTaskLists+0x6c>)
 8007dea:	f7fe fc2b 	bl	8006644 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007dee:	480c      	ldr	r0, [pc, #48]	; (8007e20 <prvInitialiseTaskLists+0x70>)
 8007df0:	f7fe fc28 	bl	8006644 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007df4:	480b      	ldr	r0, [pc, #44]	; (8007e24 <prvInitialiseTaskLists+0x74>)
 8007df6:	f7fe fc25 	bl	8006644 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007dfa:	4b0b      	ldr	r3, [pc, #44]	; (8007e28 <prvInitialiseTaskLists+0x78>)
 8007dfc:	4a05      	ldr	r2, [pc, #20]	; (8007e14 <prvInitialiseTaskLists+0x64>)
 8007dfe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e00:	4b0a      	ldr	r3, [pc, #40]	; (8007e2c <prvInitialiseTaskLists+0x7c>)
 8007e02:	4a05      	ldr	r2, [pc, #20]	; (8007e18 <prvInitialiseTaskLists+0x68>)
 8007e04:	601a      	str	r2, [r3, #0]
}
 8007e06:	bf00      	nop
 8007e08:	3708      	adds	r7, #8
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	20001bc0 	.word	0x20001bc0
 8007e14:	20002020 	.word	0x20002020
 8007e18:	20002034 	.word	0x20002034
 8007e1c:	20002050 	.word	0x20002050
 8007e20:	20002064 	.word	0x20002064
 8007e24:	2000207c 	.word	0x2000207c
 8007e28:	20002048 	.word	0x20002048
 8007e2c:	2000204c 	.word	0x2000204c

08007e30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e36:	e019      	b.n	8007e6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007e38:	f000 fec8 	bl	8008bcc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e3c:	4b10      	ldr	r3, [pc, #64]	; (8007e80 <prvCheckTasksWaitingTermination+0x50>)
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	3304      	adds	r3, #4
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7fe fc85 	bl	8006758 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e4e:	4b0d      	ldr	r3, [pc, #52]	; (8007e84 <prvCheckTasksWaitingTermination+0x54>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	3b01      	subs	r3, #1
 8007e54:	4a0b      	ldr	r2, [pc, #44]	; (8007e84 <prvCheckTasksWaitingTermination+0x54>)
 8007e56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e58:	4b0b      	ldr	r3, [pc, #44]	; (8007e88 <prvCheckTasksWaitingTermination+0x58>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	4a0a      	ldr	r2, [pc, #40]	; (8007e88 <prvCheckTasksWaitingTermination+0x58>)
 8007e60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e62:	f000 fee7 	bl	8008c34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 f848 	bl	8007efc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e6c:	4b06      	ldr	r3, [pc, #24]	; (8007e88 <prvCheckTasksWaitingTermination+0x58>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d1e1      	bne.n	8007e38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e74:	bf00      	nop
 8007e76:	bf00      	nop
 8007e78:	3708      	adds	r7, #8
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	20002064 	.word	0x20002064
 8007e84:	20002090 	.word	0x20002090
 8007e88:	20002078 	.word	0x20002078

08007e8c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b085      	sub	sp, #20
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8007e94:	2300      	movs	r3, #0
 8007e96:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8007e98:	e005      	b.n	8007ea6 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	607b      	str	r3, [r7, #4]
			ulCount++;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	2ba5      	cmp	r3, #165	; 0xa5
 8007eac:	d0f5      	beq.n	8007e9a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	089b      	lsrs	r3, r3, #2
 8007eb2:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	b29b      	uxth	r3, r3
	}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3714      	adds	r7, #20
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b086      	sub	sp, #24
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d102      	bne.n	8007ed8 <uxTaskGetStackHighWaterMark+0x14>
 8007ed2:	4b09      	ldr	r3, [pc, #36]	; (8007ef8 <uxTaskGetStackHighWaterMark+0x34>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	e000      	b.n	8007eda <uxTaskGetStackHighWaterMark+0x16>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ee0:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8007ee2:	6938      	ldr	r0, [r7, #16]
 8007ee4:	f7ff ffd2 	bl	8007e8c <prvTaskCheckFreeStackSpace>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8007eec:	68fb      	ldr	r3, [r7, #12]
	}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3718      	adds	r7, #24
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	20001bbc 	.word	0x20001bbc

08007efc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	3354      	adds	r3, #84	; 0x54
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f001 f977 	bl	80091fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d108      	bne.n	8007f2a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f001 f84b 	bl	8008fb8 <vPortFree>
				vPortFree( pxTCB );
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f001 f848 	bl	8008fb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f28:	e01a      	b.n	8007f60 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d103      	bne.n	8007f3c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f001 f83f 	bl	8008fb8 <vPortFree>
	}
 8007f3a:	e011      	b.n	8007f60 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007f42:	2b02      	cmp	r3, #2
 8007f44:	d00c      	beq.n	8007f60 <prvDeleteTCB+0x64>
	__asm volatile
 8007f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f4a:	b672      	cpsid	i
 8007f4c:	f383 8811 	msr	BASEPRI, r3
 8007f50:	f3bf 8f6f 	isb	sy
 8007f54:	f3bf 8f4f 	dsb	sy
 8007f58:	b662      	cpsie	i
 8007f5a:	60fb      	str	r3, [r7, #12]
}
 8007f5c:	bf00      	nop
 8007f5e:	e7fe      	b.n	8007f5e <prvDeleteTCB+0x62>
	}
 8007f60:	bf00      	nop
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f6e:	4b0c      	ldr	r3, [pc, #48]	; (8007fa0 <prvResetNextTaskUnblockTime+0x38>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d104      	bne.n	8007f82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f78:	4b0a      	ldr	r3, [pc, #40]	; (8007fa4 <prvResetNextTaskUnblockTime+0x3c>)
 8007f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8007f7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007f80:	e008      	b.n	8007f94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f82:	4b07      	ldr	r3, [pc, #28]	; (8007fa0 <prvResetNextTaskUnblockTime+0x38>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	4a04      	ldr	r2, [pc, #16]	; (8007fa4 <prvResetNextTaskUnblockTime+0x3c>)
 8007f92:	6013      	str	r3, [r2, #0]
}
 8007f94:	bf00      	nop
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr
 8007fa0:	20002048 	.word	0x20002048
 8007fa4:	200020b0 	.word	0x200020b0

08007fa8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007fae:	4b0b      	ldr	r3, [pc, #44]	; (8007fdc <xTaskGetSchedulerState+0x34>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d102      	bne.n	8007fbc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	607b      	str	r3, [r7, #4]
 8007fba:	e008      	b.n	8007fce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fbc:	4b08      	ldr	r3, [pc, #32]	; (8007fe0 <xTaskGetSchedulerState+0x38>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d102      	bne.n	8007fca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007fc4:	2302      	movs	r3, #2
 8007fc6:	607b      	str	r3, [r7, #4]
 8007fc8:	e001      	b.n	8007fce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007fce:	687b      	ldr	r3, [r7, #4]
	}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr
 8007fdc:	2000209c 	.word	0x2000209c
 8007fe0:	200020b8 	.word	0x200020b8

08007fe4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b086      	sub	sp, #24
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d05a      	beq.n	80080b0 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007ffa:	4b30      	ldr	r3, [pc, #192]	; (80080bc <xTaskPriorityDisinherit+0xd8>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	693a      	ldr	r2, [r7, #16]
 8008000:	429a      	cmp	r2, r3
 8008002:	d00c      	beq.n	800801e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008008:	b672      	cpsid	i
 800800a:	f383 8811 	msr	BASEPRI, r3
 800800e:	f3bf 8f6f 	isb	sy
 8008012:	f3bf 8f4f 	dsb	sy
 8008016:	b662      	cpsie	i
 8008018:	60fb      	str	r3, [r7, #12]
}
 800801a:	bf00      	nop
 800801c:	e7fe      	b.n	800801c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008022:	2b00      	cmp	r3, #0
 8008024:	d10c      	bne.n	8008040 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8008026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802a:	b672      	cpsid	i
 800802c:	f383 8811 	msr	BASEPRI, r3
 8008030:	f3bf 8f6f 	isb	sy
 8008034:	f3bf 8f4f 	dsb	sy
 8008038:	b662      	cpsie	i
 800803a:	60bb      	str	r3, [r7, #8]
}
 800803c:	bf00      	nop
 800803e:	e7fe      	b.n	800803e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008044:	1e5a      	subs	r2, r3, #1
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008052:	429a      	cmp	r2, r3
 8008054:	d02c      	beq.n	80080b0 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800805a:	2b00      	cmp	r3, #0
 800805c:	d128      	bne.n	80080b0 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	3304      	adds	r3, #4
 8008062:	4618      	mov	r0, r3
 8008064:	f7fe fb78 	bl	8006758 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008074:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008080:	4b0f      	ldr	r3, [pc, #60]	; (80080c0 <xTaskPriorityDisinherit+0xdc>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	429a      	cmp	r2, r3
 8008086:	d903      	bls.n	8008090 <xTaskPriorityDisinherit+0xac>
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800808c:	4a0c      	ldr	r2, [pc, #48]	; (80080c0 <xTaskPriorityDisinherit+0xdc>)
 800808e:	6013      	str	r3, [r2, #0]
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008094:	4613      	mov	r3, r2
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	4413      	add	r3, r2
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	4a09      	ldr	r2, [pc, #36]	; (80080c4 <xTaskPriorityDisinherit+0xe0>)
 800809e:	441a      	add	r2, r3
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	3304      	adds	r3, #4
 80080a4:	4619      	mov	r1, r3
 80080a6:	4610      	mov	r0, r2
 80080a8:	f7fe faf9 	bl	800669e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80080ac:	2301      	movs	r3, #1
 80080ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80080b0:	697b      	ldr	r3, [r7, #20]
	}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3718      	adds	r7, #24
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	20001bbc 	.word	0x20001bbc
 80080c0:	20002098 	.word	0x20002098
 80080c4:	20001bc0 	.word	0x20001bc0

080080c8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80080d2:	4b21      	ldr	r3, [pc, #132]	; (8008158 <prvAddCurrentTaskToDelayedList+0x90>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080d8:	4b20      	ldr	r3, [pc, #128]	; (800815c <prvAddCurrentTaskToDelayedList+0x94>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	3304      	adds	r3, #4
 80080de:	4618      	mov	r0, r3
 80080e0:	f7fe fb3a 	bl	8006758 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ea:	d10a      	bne.n	8008102 <prvAddCurrentTaskToDelayedList+0x3a>
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d007      	beq.n	8008102 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080f2:	4b1a      	ldr	r3, [pc, #104]	; (800815c <prvAddCurrentTaskToDelayedList+0x94>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	3304      	adds	r3, #4
 80080f8:	4619      	mov	r1, r3
 80080fa:	4819      	ldr	r0, [pc, #100]	; (8008160 <prvAddCurrentTaskToDelayedList+0x98>)
 80080fc:	f7fe facf 	bl	800669e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008100:	e026      	b.n	8008150 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	4413      	add	r3, r2
 8008108:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800810a:	4b14      	ldr	r3, [pc, #80]	; (800815c <prvAddCurrentTaskToDelayedList+0x94>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008112:	68ba      	ldr	r2, [r7, #8]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	429a      	cmp	r2, r3
 8008118:	d209      	bcs.n	800812e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800811a:	4b12      	ldr	r3, [pc, #72]	; (8008164 <prvAddCurrentTaskToDelayedList+0x9c>)
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	4b0f      	ldr	r3, [pc, #60]	; (800815c <prvAddCurrentTaskToDelayedList+0x94>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	3304      	adds	r3, #4
 8008124:	4619      	mov	r1, r3
 8008126:	4610      	mov	r0, r2
 8008128:	f7fe fadd 	bl	80066e6 <vListInsert>
}
 800812c:	e010      	b.n	8008150 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800812e:	4b0e      	ldr	r3, [pc, #56]	; (8008168 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	4b0a      	ldr	r3, [pc, #40]	; (800815c <prvAddCurrentTaskToDelayedList+0x94>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	3304      	adds	r3, #4
 8008138:	4619      	mov	r1, r3
 800813a:	4610      	mov	r0, r2
 800813c:	f7fe fad3 	bl	80066e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008140:	4b0a      	ldr	r3, [pc, #40]	; (800816c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	429a      	cmp	r2, r3
 8008148:	d202      	bcs.n	8008150 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800814a:	4a08      	ldr	r2, [pc, #32]	; (800816c <prvAddCurrentTaskToDelayedList+0xa4>)
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	6013      	str	r3, [r2, #0]
}
 8008150:	bf00      	nop
 8008152:	3710      	adds	r7, #16
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	20002094 	.word	0x20002094
 800815c:	20001bbc 	.word	0x20001bbc
 8008160:	2000207c 	.word	0x2000207c
 8008164:	2000204c 	.word	0x2000204c
 8008168:	20002048 	.word	0x20002048
 800816c:	200020b0 	.word	0x200020b0

08008170 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b08a      	sub	sp, #40	; 0x28
 8008174:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008176:	2300      	movs	r3, #0
 8008178:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800817a:	f000 fbb5 	bl	80088e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800817e:	4b1d      	ldr	r3, [pc, #116]	; (80081f4 <xTimerCreateTimerTask+0x84>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d021      	beq.n	80081ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008186:	2300      	movs	r3, #0
 8008188:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800818a:	2300      	movs	r3, #0
 800818c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800818e:	1d3a      	adds	r2, r7, #4
 8008190:	f107 0108 	add.w	r1, r7, #8
 8008194:	f107 030c 	add.w	r3, r7, #12
 8008198:	4618      	mov	r0, r3
 800819a:	f7fe fa39 	bl	8006610 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800819e:	6879      	ldr	r1, [r7, #4]
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	9202      	str	r2, [sp, #8]
 80081a6:	9301      	str	r3, [sp, #4]
 80081a8:	2308      	movs	r3, #8
 80081aa:	9300      	str	r3, [sp, #0]
 80081ac:	2300      	movs	r3, #0
 80081ae:	460a      	mov	r2, r1
 80081b0:	4911      	ldr	r1, [pc, #68]	; (80081f8 <xTimerCreateTimerTask+0x88>)
 80081b2:	4812      	ldr	r0, [pc, #72]	; (80081fc <xTimerCreateTimerTask+0x8c>)
 80081b4:	f7ff f846 	bl	8007244 <xTaskCreateStatic>
 80081b8:	4603      	mov	r3, r0
 80081ba:	4a11      	ldr	r2, [pc, #68]	; (8008200 <xTimerCreateTimerTask+0x90>)
 80081bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80081be:	4b10      	ldr	r3, [pc, #64]	; (8008200 <xTimerCreateTimerTask+0x90>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d001      	beq.n	80081ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80081c6:	2301      	movs	r3, #1
 80081c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d10c      	bne.n	80081ea <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80081d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d4:	b672      	cpsid	i
 80081d6:	f383 8811 	msr	BASEPRI, r3
 80081da:	f3bf 8f6f 	isb	sy
 80081de:	f3bf 8f4f 	dsb	sy
 80081e2:	b662      	cpsie	i
 80081e4:	613b      	str	r3, [r7, #16]
}
 80081e6:	bf00      	nop
 80081e8:	e7fe      	b.n	80081e8 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80081ea:	697b      	ldr	r3, [r7, #20]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3718      	adds	r7, #24
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	200020ec 	.word	0x200020ec
 80081f8:	080094d0 	.word	0x080094d0
 80081fc:	08008481 	.word	0x08008481
 8008200:	200020f0 	.word	0x200020f0

08008204 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8008204:	b580      	push	{r7, lr}
 8008206:	b088      	sub	sp, #32
 8008208:	af02      	add	r7, sp, #8
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	607a      	str	r2, [r7, #4]
 8008210:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8008212:	202c      	movs	r0, #44	; 0x2c
 8008214:	f000 fe06 	bl	8008e24 <pvPortMalloc>
 8008218:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d00d      	beq.n	800823c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	2200      	movs	r2, #0
 8008224:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	9301      	str	r3, [sp, #4]
 800822c:	6a3b      	ldr	r3, [r7, #32]
 800822e:	9300      	str	r3, [sp, #0]
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	68b9      	ldr	r1, [r7, #8]
 8008236:	68f8      	ldr	r0, [r7, #12]
 8008238:	f000 f847 	bl	80082ca <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800823c:	697b      	ldr	r3, [r7, #20]
	}
 800823e:	4618      	mov	r0, r3
 8008240:	3718      	adds	r7, #24
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8008246:	b580      	push	{r7, lr}
 8008248:	b08a      	sub	sp, #40	; 0x28
 800824a:	af02      	add	r7, sp, #8
 800824c:	60f8      	str	r0, [r7, #12]
 800824e:	60b9      	str	r1, [r7, #8]
 8008250:	607a      	str	r2, [r7, #4]
 8008252:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8008254:	232c      	movs	r3, #44	; 0x2c
 8008256:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	2b2c      	cmp	r3, #44	; 0x2c
 800825c:	d00c      	beq.n	8008278 <xTimerCreateStatic+0x32>
	__asm volatile
 800825e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008262:	b672      	cpsid	i
 8008264:	f383 8811 	msr	BASEPRI, r3
 8008268:	f3bf 8f6f 	isb	sy
 800826c:	f3bf 8f4f 	dsb	sy
 8008270:	b662      	cpsie	i
 8008272:	61bb      	str	r3, [r7, #24]
}
 8008274:	bf00      	nop
 8008276:	e7fe      	b.n	8008276 <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008278:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800827a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800827c:	2b00      	cmp	r3, #0
 800827e:	d10c      	bne.n	800829a <xTimerCreateStatic+0x54>
	__asm volatile
 8008280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008284:	b672      	cpsid	i
 8008286:	f383 8811 	msr	BASEPRI, r3
 800828a:	f3bf 8f6f 	isb	sy
 800828e:	f3bf 8f4f 	dsb	sy
 8008292:	b662      	cpsie	i
 8008294:	617b      	str	r3, [r7, #20]
}
 8008296:	bf00      	nop
 8008298:	e7fe      	b.n	8008298 <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800829a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800829c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d00d      	beq.n	80082c0 <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	2202      	movs	r2, #2
 80082a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80082ac:	69fb      	ldr	r3, [r7, #28]
 80082ae:	9301      	str	r3, [sp, #4]
 80082b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b2:	9300      	str	r3, [sp, #0]
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	68b9      	ldr	r1, [r7, #8]
 80082ba:	68f8      	ldr	r0, [r7, #12]
 80082bc:	f000 f805 	bl	80082ca <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80082c0:	69fb      	ldr	r3, [r7, #28]
	}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3720      	adds	r7, #32
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}

080082ca <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b086      	sub	sp, #24
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	60f8      	str	r0, [r7, #12]
 80082d2:	60b9      	str	r1, [r7, #8]
 80082d4:	607a      	str	r2, [r7, #4]
 80082d6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d10c      	bne.n	80082f8 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 80082de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e2:	b672      	cpsid	i
 80082e4:	f383 8811 	msr	BASEPRI, r3
 80082e8:	f3bf 8f6f 	isb	sy
 80082ec:	f3bf 8f4f 	dsb	sy
 80082f0:	b662      	cpsie	i
 80082f2:	617b      	str	r3, [r7, #20]
}
 80082f4:	bf00      	nop
 80082f6:	e7fe      	b.n	80082f6 <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 80082f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d01e      	beq.n	800833c <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80082fe:	f000 faf3 	bl	80088e8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8008302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008304:	68fa      	ldr	r2, [r7, #12]
 8008306:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830a:	68ba      	ldr	r2, [r7, #8]
 800830c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800830e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008310:	683a      	ldr	r2, [r7, #0]
 8008312:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008316:	6a3a      	ldr	r2, [r7, #32]
 8008318:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800831a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831c:	3304      	adds	r3, #4
 800831e:	4618      	mov	r0, r3
 8008320:	f7fe f9b0 	bl	8006684 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d008      	beq.n	800833c <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800832a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008330:	f043 0304 	orr.w	r3, r3, #4
 8008334:	b2da      	uxtb	r2, r3
 8008336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008338:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800833c:	bf00      	nop
 800833e:	3718      	adds	r7, #24
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b08a      	sub	sp, #40	; 0x28
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	607a      	str	r2, [r7, #4]
 8008350:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008352:	2300      	movs	r3, #0
 8008354:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d10c      	bne.n	8008376 <xTimerGenericCommand+0x32>
	__asm volatile
 800835c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008360:	b672      	cpsid	i
 8008362:	f383 8811 	msr	BASEPRI, r3
 8008366:	f3bf 8f6f 	isb	sy
 800836a:	f3bf 8f4f 	dsb	sy
 800836e:	b662      	cpsie	i
 8008370:	623b      	str	r3, [r7, #32]
}
 8008372:	bf00      	nop
 8008374:	e7fe      	b.n	8008374 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008376:	4b1a      	ldr	r3, [pc, #104]	; (80083e0 <xTimerGenericCommand+0x9c>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d02a      	beq.n	80083d4 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	2b05      	cmp	r3, #5
 800838e:	dc18      	bgt.n	80083c2 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008390:	f7ff fe0a 	bl	8007fa8 <xTaskGetSchedulerState>
 8008394:	4603      	mov	r3, r0
 8008396:	2b02      	cmp	r3, #2
 8008398:	d109      	bne.n	80083ae <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800839a:	4b11      	ldr	r3, [pc, #68]	; (80083e0 <xTimerGenericCommand+0x9c>)
 800839c:	6818      	ldr	r0, [r3, #0]
 800839e:	f107 0110 	add.w	r1, r7, #16
 80083a2:	2300      	movs	r3, #0
 80083a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083a6:	f7fe fb53 	bl	8006a50 <xQueueGenericSend>
 80083aa:	6278      	str	r0, [r7, #36]	; 0x24
 80083ac:	e012      	b.n	80083d4 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80083ae:	4b0c      	ldr	r3, [pc, #48]	; (80083e0 <xTimerGenericCommand+0x9c>)
 80083b0:	6818      	ldr	r0, [r3, #0]
 80083b2:	f107 0110 	add.w	r1, r7, #16
 80083b6:	2300      	movs	r3, #0
 80083b8:	2200      	movs	r2, #0
 80083ba:	f7fe fb49 	bl	8006a50 <xQueueGenericSend>
 80083be:	6278      	str	r0, [r7, #36]	; 0x24
 80083c0:	e008      	b.n	80083d4 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80083c2:	4b07      	ldr	r3, [pc, #28]	; (80083e0 <xTimerGenericCommand+0x9c>)
 80083c4:	6818      	ldr	r0, [r3, #0]
 80083c6:	f107 0110 	add.w	r1, r7, #16
 80083ca:	2300      	movs	r3, #0
 80083cc:	683a      	ldr	r2, [r7, #0]
 80083ce:	f7fe fc45 	bl	8006c5c <xQueueGenericSendFromISR>
 80083d2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80083d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3728      	adds	r7, #40	; 0x28
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	200020ec 	.word	0x200020ec

080083e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b088      	sub	sp, #32
 80083e8:	af02      	add	r7, sp, #8
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083ee:	4b23      	ldr	r3, [pc, #140]	; (800847c <prvProcessExpiredTimer+0x98>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	68db      	ldr	r3, [r3, #12]
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	3304      	adds	r3, #4
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7fe f9ab 	bl	8006758 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008408:	f003 0304 	and.w	r3, r3, #4
 800840c:	2b00      	cmp	r3, #0
 800840e:	d024      	beq.n	800845a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	699a      	ldr	r2, [r3, #24]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	18d1      	adds	r1, r2, r3
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	683a      	ldr	r2, [r7, #0]
 800841c:	6978      	ldr	r0, [r7, #20]
 800841e:	f000 f8d3 	bl	80085c8 <prvInsertTimerInActiveList>
 8008422:	4603      	mov	r3, r0
 8008424:	2b00      	cmp	r3, #0
 8008426:	d021      	beq.n	800846c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008428:	2300      	movs	r3, #0
 800842a:	9300      	str	r3, [sp, #0]
 800842c:	2300      	movs	r3, #0
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	2100      	movs	r1, #0
 8008432:	6978      	ldr	r0, [r7, #20]
 8008434:	f7ff ff86 	bl	8008344 <xTimerGenericCommand>
 8008438:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d115      	bne.n	800846c <prvProcessExpiredTimer+0x88>
	__asm volatile
 8008440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008444:	b672      	cpsid	i
 8008446:	f383 8811 	msr	BASEPRI, r3
 800844a:	f3bf 8f6f 	isb	sy
 800844e:	f3bf 8f4f 	dsb	sy
 8008452:	b662      	cpsie	i
 8008454:	60fb      	str	r3, [r7, #12]
}
 8008456:	bf00      	nop
 8008458:	e7fe      	b.n	8008458 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008460:	f023 0301 	bic.w	r3, r3, #1
 8008464:	b2da      	uxtb	r2, r3
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	6a1b      	ldr	r3, [r3, #32]
 8008470:	6978      	ldr	r0, [r7, #20]
 8008472:	4798      	blx	r3
}
 8008474:	bf00      	nop
 8008476:	3718      	adds	r7, #24
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}
 800847c:	200020e4 	.word	0x200020e4

08008480 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008488:	f107 0308 	add.w	r3, r7, #8
 800848c:	4618      	mov	r0, r3
 800848e:	f000 f857 	bl	8008540 <prvGetNextExpireTime>
 8008492:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	4619      	mov	r1, r3
 8008498:	68f8      	ldr	r0, [r7, #12]
 800849a:	f000 f803 	bl	80084a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800849e:	f000 f8d5 	bl	800864c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084a2:	e7f1      	b.n	8008488 <prvTimerTask+0x8>

080084a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80084ae:	f7ff f933 	bl	8007718 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084b2:	f107 0308 	add.w	r3, r7, #8
 80084b6:	4618      	mov	r0, r3
 80084b8:	f000 f866 	bl	8008588 <prvSampleTimeNow>
 80084bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d130      	bne.n	8008526 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d10a      	bne.n	80084e0 <prvProcessTimerOrBlockTask+0x3c>
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d806      	bhi.n	80084e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80084d2:	f7ff f92f 	bl	8007734 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80084d6:	68f9      	ldr	r1, [r7, #12]
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f7ff ff83 	bl	80083e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80084de:	e024      	b.n	800852a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d008      	beq.n	80084f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80084e6:	4b13      	ldr	r3, [pc, #76]	; (8008534 <prvProcessTimerOrBlockTask+0x90>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d101      	bne.n	80084f4 <prvProcessTimerOrBlockTask+0x50>
 80084f0:	2301      	movs	r3, #1
 80084f2:	e000      	b.n	80084f6 <prvProcessTimerOrBlockTask+0x52>
 80084f4:	2300      	movs	r3, #0
 80084f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80084f8:	4b0f      	ldr	r3, [pc, #60]	; (8008538 <prvProcessTimerOrBlockTask+0x94>)
 80084fa:	6818      	ldr	r0, [r3, #0]
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	1ad3      	subs	r3, r2, r3
 8008502:	683a      	ldr	r2, [r7, #0]
 8008504:	4619      	mov	r1, r3
 8008506:	f7fe fe69 	bl	80071dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800850a:	f7ff f913 	bl	8007734 <xTaskResumeAll>
 800850e:	4603      	mov	r3, r0
 8008510:	2b00      	cmp	r3, #0
 8008512:	d10a      	bne.n	800852a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008514:	4b09      	ldr	r3, [pc, #36]	; (800853c <prvProcessTimerOrBlockTask+0x98>)
 8008516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800851a:	601a      	str	r2, [r3, #0]
 800851c:	f3bf 8f4f 	dsb	sy
 8008520:	f3bf 8f6f 	isb	sy
}
 8008524:	e001      	b.n	800852a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008526:	f7ff f905 	bl	8007734 <xTaskResumeAll>
}
 800852a:	bf00      	nop
 800852c:	3710      	adds	r7, #16
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	200020e8 	.word	0x200020e8
 8008538:	200020ec 	.word	0x200020ec
 800853c:	e000ed04 	.word	0xe000ed04

08008540 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008540:	b480      	push	{r7}
 8008542:	b085      	sub	sp, #20
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008548:	4b0e      	ldr	r3, [pc, #56]	; (8008584 <prvGetNextExpireTime+0x44>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d101      	bne.n	8008556 <prvGetNextExpireTime+0x16>
 8008552:	2201      	movs	r2, #1
 8008554:	e000      	b.n	8008558 <prvGetNextExpireTime+0x18>
 8008556:	2200      	movs	r2, #0
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d105      	bne.n	8008570 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008564:	4b07      	ldr	r3, [pc, #28]	; (8008584 <prvGetNextExpireTime+0x44>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	68db      	ldr	r3, [r3, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	60fb      	str	r3, [r7, #12]
 800856e:	e001      	b.n	8008574 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008570:	2300      	movs	r3, #0
 8008572:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008574:	68fb      	ldr	r3, [r7, #12]
}
 8008576:	4618      	mov	r0, r3
 8008578:	3714      	adds	r7, #20
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	200020e4 	.word	0x200020e4

08008588 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008590:	f7ff f970 	bl	8007874 <xTaskGetTickCount>
 8008594:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008596:	4b0b      	ldr	r3, [pc, #44]	; (80085c4 <prvSampleTimeNow+0x3c>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	68fa      	ldr	r2, [r7, #12]
 800859c:	429a      	cmp	r2, r3
 800859e:	d205      	bcs.n	80085ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80085a0:	f000 f93c 	bl	800881c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	601a      	str	r2, [r3, #0]
 80085aa:	e002      	b.n	80085b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80085b2:	4a04      	ldr	r2, [pc, #16]	; (80085c4 <prvSampleTimeNow+0x3c>)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80085b8:	68fb      	ldr	r3, [r7, #12]
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3710      	adds	r7, #16
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	200020f4 	.word	0x200020f4

080085c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b086      	sub	sp, #24
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	607a      	str	r2, [r7, #4]
 80085d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80085d6:	2300      	movs	r3, #0
 80085d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	68ba      	ldr	r2, [r7, #8]
 80085de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80085e6:	68ba      	ldr	r2, [r7, #8]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d812      	bhi.n	8008614 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	1ad2      	subs	r2, r2, r3
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	699b      	ldr	r3, [r3, #24]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d302      	bcc.n	8008602 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80085fc:	2301      	movs	r3, #1
 80085fe:	617b      	str	r3, [r7, #20]
 8008600:	e01b      	b.n	800863a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008602:	4b10      	ldr	r3, [pc, #64]	; (8008644 <prvInsertTimerInActiveList+0x7c>)
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	3304      	adds	r3, #4
 800860a:	4619      	mov	r1, r3
 800860c:	4610      	mov	r0, r2
 800860e:	f7fe f86a 	bl	80066e6 <vListInsert>
 8008612:	e012      	b.n	800863a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	429a      	cmp	r2, r3
 800861a:	d206      	bcs.n	800862a <prvInsertTimerInActiveList+0x62>
 800861c:	68ba      	ldr	r2, [r7, #8]
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	429a      	cmp	r2, r3
 8008622:	d302      	bcc.n	800862a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008624:	2301      	movs	r3, #1
 8008626:	617b      	str	r3, [r7, #20]
 8008628:	e007      	b.n	800863a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800862a:	4b07      	ldr	r3, [pc, #28]	; (8008648 <prvInsertTimerInActiveList+0x80>)
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	3304      	adds	r3, #4
 8008632:	4619      	mov	r1, r3
 8008634:	4610      	mov	r0, r2
 8008636:	f7fe f856 	bl	80066e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800863a:	697b      	ldr	r3, [r7, #20]
}
 800863c:	4618      	mov	r0, r3
 800863e:	3718      	adds	r7, #24
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}
 8008644:	200020e8 	.word	0x200020e8
 8008648:	200020e4 	.word	0x200020e4

0800864c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b08e      	sub	sp, #56	; 0x38
 8008650:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008652:	e0d0      	b.n	80087f6 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2b00      	cmp	r3, #0
 8008658:	da1a      	bge.n	8008690 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800865a:	1d3b      	adds	r3, r7, #4
 800865c:	3304      	adds	r3, #4
 800865e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008662:	2b00      	cmp	r3, #0
 8008664:	d10c      	bne.n	8008680 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8008666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866a:	b672      	cpsid	i
 800866c:	f383 8811 	msr	BASEPRI, r3
 8008670:	f3bf 8f6f 	isb	sy
 8008674:	f3bf 8f4f 	dsb	sy
 8008678:	b662      	cpsie	i
 800867a:	61fb      	str	r3, [r7, #28]
}
 800867c:	bf00      	nop
 800867e:	e7fe      	b.n	800867e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008686:	6850      	ldr	r0, [r2, #4]
 8008688:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800868a:	6892      	ldr	r2, [r2, #8]
 800868c:	4611      	mov	r1, r2
 800868e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2b00      	cmp	r3, #0
 8008694:	f2c0 80af 	blt.w	80087f6 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800869c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800869e:	695b      	ldr	r3, [r3, #20]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d004      	beq.n	80086ae <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a6:	3304      	adds	r3, #4
 80086a8:	4618      	mov	r0, r3
 80086aa:	f7fe f855 	bl	8006758 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80086ae:	463b      	mov	r3, r7
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7ff ff69 	bl	8008588 <prvSampleTimeNow>
 80086b6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2b09      	cmp	r3, #9
 80086bc:	f200 809a 	bhi.w	80087f4 <prvProcessReceivedCommands+0x1a8>
 80086c0:	a201      	add	r2, pc, #4	; (adr r2, 80086c8 <prvProcessReceivedCommands+0x7c>)
 80086c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c6:	bf00      	nop
 80086c8:	080086f1 	.word	0x080086f1
 80086cc:	080086f1 	.word	0x080086f1
 80086d0:	080086f1 	.word	0x080086f1
 80086d4:	08008769 	.word	0x08008769
 80086d8:	0800877d 	.word	0x0800877d
 80086dc:	080087cb 	.word	0x080087cb
 80086e0:	080086f1 	.word	0x080086f1
 80086e4:	080086f1 	.word	0x080086f1
 80086e8:	08008769 	.word	0x08008769
 80086ec:	0800877d 	.word	0x0800877d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80086f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086f6:	f043 0301 	orr.w	r3, r3, #1
 80086fa:	b2da      	uxtb	r2, r3
 80086fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008702:	68ba      	ldr	r2, [r7, #8]
 8008704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008706:	699b      	ldr	r3, [r3, #24]
 8008708:	18d1      	adds	r1, r2, r3
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800870e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008710:	f7ff ff5a 	bl	80085c8 <prvInsertTimerInActiveList>
 8008714:	4603      	mov	r3, r0
 8008716:	2b00      	cmp	r3, #0
 8008718:	d06d      	beq.n	80087f6 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800871a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871c:	6a1b      	ldr	r3, [r3, #32]
 800871e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008720:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008724:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008728:	f003 0304 	and.w	r3, r3, #4
 800872c:	2b00      	cmp	r3, #0
 800872e:	d062      	beq.n	80087f6 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008730:	68ba      	ldr	r2, [r7, #8]
 8008732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008734:	699b      	ldr	r3, [r3, #24]
 8008736:	441a      	add	r2, r3
 8008738:	2300      	movs	r3, #0
 800873a:	9300      	str	r3, [sp, #0]
 800873c:	2300      	movs	r3, #0
 800873e:	2100      	movs	r1, #0
 8008740:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008742:	f7ff fdff 	bl	8008344 <xTimerGenericCommand>
 8008746:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008748:	6a3b      	ldr	r3, [r7, #32]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d153      	bne.n	80087f6 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800874e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008752:	b672      	cpsid	i
 8008754:	f383 8811 	msr	BASEPRI, r3
 8008758:	f3bf 8f6f 	isb	sy
 800875c:	f3bf 8f4f 	dsb	sy
 8008760:	b662      	cpsie	i
 8008762:	61bb      	str	r3, [r7, #24]
}
 8008764:	bf00      	nop
 8008766:	e7fe      	b.n	8008766 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800876e:	f023 0301 	bic.w	r3, r3, #1
 8008772:	b2da      	uxtb	r2, r3
 8008774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008776:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800877a:	e03c      	b.n	80087f6 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800877c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008782:	f043 0301 	orr.w	r3, r3, #1
 8008786:	b2da      	uxtb	r2, r3
 8008788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800878e:	68ba      	ldr	r2, [r7, #8]
 8008790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008792:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008796:	699b      	ldr	r3, [r3, #24]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d10c      	bne.n	80087b6 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800879c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a0:	b672      	cpsid	i
 80087a2:	f383 8811 	msr	BASEPRI, r3
 80087a6:	f3bf 8f6f 	isb	sy
 80087aa:	f3bf 8f4f 	dsb	sy
 80087ae:	b662      	cpsie	i
 80087b0:	617b      	str	r3, [r7, #20]
}
 80087b2:	bf00      	nop
 80087b4:	e7fe      	b.n	80087b4 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80087b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b8:	699a      	ldr	r2, [r3, #24]
 80087ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087bc:	18d1      	adds	r1, r2, r3
 80087be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087c4:	f7ff ff00 	bl	80085c8 <prvInsertTimerInActiveList>
					break;
 80087c8:	e015      	b.n	80087f6 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80087ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087d0:	f003 0302 	and.w	r3, r3, #2
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d103      	bne.n	80087e0 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80087d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087da:	f000 fbed 	bl	8008fb8 <vPortFree>
 80087de:	e00a      	b.n	80087f6 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80087e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087e6:	f023 0301 	bic.w	r3, r3, #1
 80087ea:	b2da      	uxtb	r2, r3
 80087ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80087f2:	e000      	b.n	80087f6 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 80087f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80087f6:	4b08      	ldr	r3, [pc, #32]	; (8008818 <prvProcessReceivedCommands+0x1cc>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	1d39      	adds	r1, r7, #4
 80087fc:	2200      	movs	r2, #0
 80087fe:	4618      	mov	r0, r3
 8008800:	f7fe facc 	bl	8006d9c <xQueueReceive>
 8008804:	4603      	mov	r3, r0
 8008806:	2b00      	cmp	r3, #0
 8008808:	f47f af24 	bne.w	8008654 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800880c:	bf00      	nop
 800880e:	bf00      	nop
 8008810:	3730      	adds	r7, #48	; 0x30
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
 8008816:	bf00      	nop
 8008818:	200020ec 	.word	0x200020ec

0800881c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b088      	sub	sp, #32
 8008820:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008822:	e04a      	b.n	80088ba <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008824:	4b2e      	ldr	r3, [pc, #184]	; (80088e0 <prvSwitchTimerLists+0xc4>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800882e:	4b2c      	ldr	r3, [pc, #176]	; (80088e0 <prvSwitchTimerLists+0xc4>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	3304      	adds	r3, #4
 800883c:	4618      	mov	r0, r3
 800883e:	f7fd ff8b 	bl	8006758 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	6a1b      	ldr	r3, [r3, #32]
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008850:	f003 0304 	and.w	r3, r3, #4
 8008854:	2b00      	cmp	r3, #0
 8008856:	d030      	beq.n	80088ba <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	699b      	ldr	r3, [r3, #24]
 800885c:	693a      	ldr	r2, [r7, #16]
 800885e:	4413      	add	r3, r2
 8008860:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008862:	68ba      	ldr	r2, [r7, #8]
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	429a      	cmp	r2, r3
 8008868:	d90e      	bls.n	8008888 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	68ba      	ldr	r2, [r7, #8]
 800886e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008876:	4b1a      	ldr	r3, [pc, #104]	; (80088e0 <prvSwitchTimerLists+0xc4>)
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	3304      	adds	r3, #4
 800887e:	4619      	mov	r1, r3
 8008880:	4610      	mov	r0, r2
 8008882:	f7fd ff30 	bl	80066e6 <vListInsert>
 8008886:	e018      	b.n	80088ba <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008888:	2300      	movs	r3, #0
 800888a:	9300      	str	r3, [sp, #0]
 800888c:	2300      	movs	r3, #0
 800888e:	693a      	ldr	r2, [r7, #16]
 8008890:	2100      	movs	r1, #0
 8008892:	68f8      	ldr	r0, [r7, #12]
 8008894:	f7ff fd56 	bl	8008344 <xTimerGenericCommand>
 8008898:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d10c      	bne.n	80088ba <prvSwitchTimerLists+0x9e>
	__asm volatile
 80088a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a4:	b672      	cpsid	i
 80088a6:	f383 8811 	msr	BASEPRI, r3
 80088aa:	f3bf 8f6f 	isb	sy
 80088ae:	f3bf 8f4f 	dsb	sy
 80088b2:	b662      	cpsie	i
 80088b4:	603b      	str	r3, [r7, #0]
}
 80088b6:	bf00      	nop
 80088b8:	e7fe      	b.n	80088b8 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80088ba:	4b09      	ldr	r3, [pc, #36]	; (80088e0 <prvSwitchTimerLists+0xc4>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d1af      	bne.n	8008824 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80088c4:	4b06      	ldr	r3, [pc, #24]	; (80088e0 <prvSwitchTimerLists+0xc4>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80088ca:	4b06      	ldr	r3, [pc, #24]	; (80088e4 <prvSwitchTimerLists+0xc8>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a04      	ldr	r2, [pc, #16]	; (80088e0 <prvSwitchTimerLists+0xc4>)
 80088d0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80088d2:	4a04      	ldr	r2, [pc, #16]	; (80088e4 <prvSwitchTimerLists+0xc8>)
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	6013      	str	r3, [r2, #0]
}
 80088d8:	bf00      	nop
 80088da:	3718      	adds	r7, #24
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	200020e4 	.word	0x200020e4
 80088e4:	200020e8 	.word	0x200020e8

080088e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80088ee:	f000 f96d 	bl	8008bcc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80088f2:	4b15      	ldr	r3, [pc, #84]	; (8008948 <prvCheckForValidListAndQueue+0x60>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d120      	bne.n	800893c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80088fa:	4814      	ldr	r0, [pc, #80]	; (800894c <prvCheckForValidListAndQueue+0x64>)
 80088fc:	f7fd fea2 	bl	8006644 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008900:	4813      	ldr	r0, [pc, #76]	; (8008950 <prvCheckForValidListAndQueue+0x68>)
 8008902:	f7fd fe9f 	bl	8006644 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008906:	4b13      	ldr	r3, [pc, #76]	; (8008954 <prvCheckForValidListAndQueue+0x6c>)
 8008908:	4a10      	ldr	r2, [pc, #64]	; (800894c <prvCheckForValidListAndQueue+0x64>)
 800890a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800890c:	4b12      	ldr	r3, [pc, #72]	; (8008958 <prvCheckForValidListAndQueue+0x70>)
 800890e:	4a10      	ldr	r2, [pc, #64]	; (8008950 <prvCheckForValidListAndQueue+0x68>)
 8008910:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008912:	2300      	movs	r3, #0
 8008914:	9300      	str	r3, [sp, #0]
 8008916:	4b11      	ldr	r3, [pc, #68]	; (800895c <prvCheckForValidListAndQueue+0x74>)
 8008918:	4a11      	ldr	r2, [pc, #68]	; (8008960 <prvCheckForValidListAndQueue+0x78>)
 800891a:	2110      	movs	r1, #16
 800891c:	200a      	movs	r0, #10
 800891e:	f7fd ffaf 	bl	8006880 <xQueueGenericCreateStatic>
 8008922:	4603      	mov	r3, r0
 8008924:	4a08      	ldr	r2, [pc, #32]	; (8008948 <prvCheckForValidListAndQueue+0x60>)
 8008926:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008928:	4b07      	ldr	r3, [pc, #28]	; (8008948 <prvCheckForValidListAndQueue+0x60>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d005      	beq.n	800893c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008930:	4b05      	ldr	r3, [pc, #20]	; (8008948 <prvCheckForValidListAndQueue+0x60>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	490b      	ldr	r1, [pc, #44]	; (8008964 <prvCheckForValidListAndQueue+0x7c>)
 8008936:	4618      	mov	r0, r3
 8008938:	f7fe fc26 	bl	8007188 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800893c:	f000 f97a 	bl	8008c34 <vPortExitCritical>
}
 8008940:	bf00      	nop
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop
 8008948:	200020ec 	.word	0x200020ec
 800894c:	200020bc 	.word	0x200020bc
 8008950:	200020d0 	.word	0x200020d0
 8008954:	200020e4 	.word	0x200020e4
 8008958:	200020e8 	.word	0x200020e8
 800895c:	20002198 	.word	0x20002198
 8008960:	200020f8 	.word	0x200020f8
 8008964:	080094d8 	.word	0x080094d8

08008968 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b086      	sub	sp, #24
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d10c      	bne.n	8008994 <pvTimerGetTimerID+0x2c>
	__asm volatile
 800897a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800897e:	b672      	cpsid	i
 8008980:	f383 8811 	msr	BASEPRI, r3
 8008984:	f3bf 8f6f 	isb	sy
 8008988:	f3bf 8f4f 	dsb	sy
 800898c:	b662      	cpsie	i
 800898e:	60fb      	str	r3, [r7, #12]
}
 8008990:	bf00      	nop
 8008992:	e7fe      	b.n	8008992 <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 8008994:	f000 f91a 	bl	8008bcc <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	69db      	ldr	r3, [r3, #28]
 800899c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800899e:	f000 f949 	bl	8008c34 <vPortExitCritical>

	return pvReturn;
 80089a2:	693b      	ldr	r3, [r7, #16]
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3718      	adds	r7, #24
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80089ac:	b480      	push	{r7}
 80089ae:	b085      	sub	sp, #20
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	3b04      	subs	r3, #4
 80089bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80089c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	3b04      	subs	r3, #4
 80089ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	f023 0201 	bic.w	r2, r3, #1
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	3b04      	subs	r3, #4
 80089da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80089dc:	4a0c      	ldr	r2, [pc, #48]	; (8008a10 <pxPortInitialiseStack+0x64>)
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	3b14      	subs	r3, #20
 80089e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	3b04      	subs	r3, #4
 80089f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f06f 0202 	mvn.w	r2, #2
 80089fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	3b20      	subs	r3, #32
 8008a00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008a02:	68fb      	ldr	r3, [r7, #12]
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3714      	adds	r7, #20
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr
 8008a10:	08008a15 	.word	0x08008a15

08008a14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008a14:	b480      	push	{r7}
 8008a16:	b085      	sub	sp, #20
 8008a18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008a1e:	4b14      	ldr	r3, [pc, #80]	; (8008a70 <prvTaskExitError+0x5c>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a26:	d00c      	beq.n	8008a42 <prvTaskExitError+0x2e>
	__asm volatile
 8008a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2c:	b672      	cpsid	i
 8008a2e:	f383 8811 	msr	BASEPRI, r3
 8008a32:	f3bf 8f6f 	isb	sy
 8008a36:	f3bf 8f4f 	dsb	sy
 8008a3a:	b662      	cpsie	i
 8008a3c:	60fb      	str	r3, [r7, #12]
}
 8008a3e:	bf00      	nop
 8008a40:	e7fe      	b.n	8008a40 <prvTaskExitError+0x2c>
	__asm volatile
 8008a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a46:	b672      	cpsid	i
 8008a48:	f383 8811 	msr	BASEPRI, r3
 8008a4c:	f3bf 8f6f 	isb	sy
 8008a50:	f3bf 8f4f 	dsb	sy
 8008a54:	b662      	cpsie	i
 8008a56:	60bb      	str	r3, [r7, #8]
}
 8008a58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008a5a:	bf00      	nop
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d0fc      	beq.n	8008a5c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008a62:	bf00      	nop
 8008a64:	bf00      	nop
 8008a66:	3714      	adds	r7, #20
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr
 8008a70:	2000000c 	.word	0x2000000c
	...

08008a80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a80:	4b07      	ldr	r3, [pc, #28]	; (8008aa0 <pxCurrentTCBConst2>)
 8008a82:	6819      	ldr	r1, [r3, #0]
 8008a84:	6808      	ldr	r0, [r1, #0]
 8008a86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a8a:	f380 8809 	msr	PSP, r0
 8008a8e:	f3bf 8f6f 	isb	sy
 8008a92:	f04f 0000 	mov.w	r0, #0
 8008a96:	f380 8811 	msr	BASEPRI, r0
 8008a9a:	4770      	bx	lr
 8008a9c:	f3af 8000 	nop.w

08008aa0 <pxCurrentTCBConst2>:
 8008aa0:	20001bbc 	.word	0x20001bbc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008aa4:	bf00      	nop
 8008aa6:	bf00      	nop

08008aa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008aa8:	4808      	ldr	r0, [pc, #32]	; (8008acc <prvPortStartFirstTask+0x24>)
 8008aaa:	6800      	ldr	r0, [r0, #0]
 8008aac:	6800      	ldr	r0, [r0, #0]
 8008aae:	f380 8808 	msr	MSP, r0
 8008ab2:	f04f 0000 	mov.w	r0, #0
 8008ab6:	f380 8814 	msr	CONTROL, r0
 8008aba:	b662      	cpsie	i
 8008abc:	b661      	cpsie	f
 8008abe:	f3bf 8f4f 	dsb	sy
 8008ac2:	f3bf 8f6f 	isb	sy
 8008ac6:	df00      	svc	0
 8008ac8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008aca:	bf00      	nop
 8008acc:	e000ed08 	.word	0xe000ed08

08008ad0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008ad6:	4b37      	ldr	r3, [pc, #220]	; (8008bb4 <xPortStartScheduler+0xe4>)
 8008ad8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	22ff      	movs	r2, #255	; 0xff
 8008ae6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008af0:	78fb      	ldrb	r3, [r7, #3]
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008af8:	b2da      	uxtb	r2, r3
 8008afa:	4b2f      	ldr	r3, [pc, #188]	; (8008bb8 <xPortStartScheduler+0xe8>)
 8008afc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008afe:	4b2f      	ldr	r3, [pc, #188]	; (8008bbc <xPortStartScheduler+0xec>)
 8008b00:	2207      	movs	r2, #7
 8008b02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b04:	e009      	b.n	8008b1a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008b06:	4b2d      	ldr	r3, [pc, #180]	; (8008bbc <xPortStartScheduler+0xec>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	4a2b      	ldr	r2, [pc, #172]	; (8008bbc <xPortStartScheduler+0xec>)
 8008b0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008b10:	78fb      	ldrb	r3, [r7, #3]
 8008b12:	b2db      	uxtb	r3, r3
 8008b14:	005b      	lsls	r3, r3, #1
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b1a:	78fb      	ldrb	r3, [r7, #3]
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b22:	2b80      	cmp	r3, #128	; 0x80
 8008b24:	d0ef      	beq.n	8008b06 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008b26:	4b25      	ldr	r3, [pc, #148]	; (8008bbc <xPortStartScheduler+0xec>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f1c3 0307 	rsb	r3, r3, #7
 8008b2e:	2b04      	cmp	r3, #4
 8008b30:	d00c      	beq.n	8008b4c <xPortStartScheduler+0x7c>
	__asm volatile
 8008b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b36:	b672      	cpsid	i
 8008b38:	f383 8811 	msr	BASEPRI, r3
 8008b3c:	f3bf 8f6f 	isb	sy
 8008b40:	f3bf 8f4f 	dsb	sy
 8008b44:	b662      	cpsie	i
 8008b46:	60bb      	str	r3, [r7, #8]
}
 8008b48:	bf00      	nop
 8008b4a:	e7fe      	b.n	8008b4a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b4c:	4b1b      	ldr	r3, [pc, #108]	; (8008bbc <xPortStartScheduler+0xec>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	021b      	lsls	r3, r3, #8
 8008b52:	4a1a      	ldr	r2, [pc, #104]	; (8008bbc <xPortStartScheduler+0xec>)
 8008b54:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b56:	4b19      	ldr	r3, [pc, #100]	; (8008bbc <xPortStartScheduler+0xec>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b5e:	4a17      	ldr	r2, [pc, #92]	; (8008bbc <xPortStartScheduler+0xec>)
 8008b60:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	b2da      	uxtb	r2, r3
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b6a:	4b15      	ldr	r3, [pc, #84]	; (8008bc0 <xPortStartScheduler+0xf0>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a14      	ldr	r2, [pc, #80]	; (8008bc0 <xPortStartScheduler+0xf0>)
 8008b70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b74:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b76:	4b12      	ldr	r3, [pc, #72]	; (8008bc0 <xPortStartScheduler+0xf0>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a11      	ldr	r2, [pc, #68]	; (8008bc0 <xPortStartScheduler+0xf0>)
 8008b7c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008b80:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b82:	f000 f8dd 	bl	8008d40 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b86:	4b0f      	ldr	r3, [pc, #60]	; (8008bc4 <xPortStartScheduler+0xf4>)
 8008b88:	2200      	movs	r2, #0
 8008b8a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008b8c:	f000 f8fc 	bl	8008d88 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b90:	4b0d      	ldr	r3, [pc, #52]	; (8008bc8 <xPortStartScheduler+0xf8>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a0c      	ldr	r2, [pc, #48]	; (8008bc8 <xPortStartScheduler+0xf8>)
 8008b96:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008b9a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b9c:	f7ff ff84 	bl	8008aa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008ba0:	f7fe ff46 	bl	8007a30 <vTaskSwitchContext>
	prvTaskExitError();
 8008ba4:	f7ff ff36 	bl	8008a14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3710      	adds	r7, #16
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	e000e400 	.word	0xe000e400
 8008bb8:	200021e8 	.word	0x200021e8
 8008bbc:	200021ec 	.word	0x200021ec
 8008bc0:	e000ed20 	.word	0xe000ed20
 8008bc4:	2000000c 	.word	0x2000000c
 8008bc8:	e000ef34 	.word	0xe000ef34

08008bcc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
	__asm volatile
 8008bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd6:	b672      	cpsid	i
 8008bd8:	f383 8811 	msr	BASEPRI, r3
 8008bdc:	f3bf 8f6f 	isb	sy
 8008be0:	f3bf 8f4f 	dsb	sy
 8008be4:	b662      	cpsie	i
 8008be6:	607b      	str	r3, [r7, #4]
}
 8008be8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008bea:	4b10      	ldr	r3, [pc, #64]	; (8008c2c <vPortEnterCritical+0x60>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	3301      	adds	r3, #1
 8008bf0:	4a0e      	ldr	r2, [pc, #56]	; (8008c2c <vPortEnterCritical+0x60>)
 8008bf2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008bf4:	4b0d      	ldr	r3, [pc, #52]	; (8008c2c <vPortEnterCritical+0x60>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d111      	bne.n	8008c20 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008bfc:	4b0c      	ldr	r3, [pc, #48]	; (8008c30 <vPortEnterCritical+0x64>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d00c      	beq.n	8008c20 <vPortEnterCritical+0x54>
	__asm volatile
 8008c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c0a:	b672      	cpsid	i
 8008c0c:	f383 8811 	msr	BASEPRI, r3
 8008c10:	f3bf 8f6f 	isb	sy
 8008c14:	f3bf 8f4f 	dsb	sy
 8008c18:	b662      	cpsie	i
 8008c1a:	603b      	str	r3, [r7, #0]
}
 8008c1c:	bf00      	nop
 8008c1e:	e7fe      	b.n	8008c1e <vPortEnterCritical+0x52>
	}
}
 8008c20:	bf00      	nop
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr
 8008c2c:	2000000c 	.word	0x2000000c
 8008c30:	e000ed04 	.word	0xe000ed04

08008c34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c34:	b480      	push	{r7}
 8008c36:	b083      	sub	sp, #12
 8008c38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c3a:	4b13      	ldr	r3, [pc, #76]	; (8008c88 <vPortExitCritical+0x54>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d10c      	bne.n	8008c5c <vPortExitCritical+0x28>
	__asm volatile
 8008c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c46:	b672      	cpsid	i
 8008c48:	f383 8811 	msr	BASEPRI, r3
 8008c4c:	f3bf 8f6f 	isb	sy
 8008c50:	f3bf 8f4f 	dsb	sy
 8008c54:	b662      	cpsie	i
 8008c56:	607b      	str	r3, [r7, #4]
}
 8008c58:	bf00      	nop
 8008c5a:	e7fe      	b.n	8008c5a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8008c5c:	4b0a      	ldr	r3, [pc, #40]	; (8008c88 <vPortExitCritical+0x54>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	3b01      	subs	r3, #1
 8008c62:	4a09      	ldr	r2, [pc, #36]	; (8008c88 <vPortExitCritical+0x54>)
 8008c64:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c66:	4b08      	ldr	r3, [pc, #32]	; (8008c88 <vPortExitCritical+0x54>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d105      	bne.n	8008c7a <vPortExitCritical+0x46>
 8008c6e:	2300      	movs	r3, #0
 8008c70:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	f383 8811 	msr	BASEPRI, r3
}
 8008c78:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c7a:	bf00      	nop
 8008c7c:	370c      	adds	r7, #12
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr
 8008c86:	bf00      	nop
 8008c88:	2000000c 	.word	0x2000000c
 8008c8c:	00000000 	.word	0x00000000

08008c90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c90:	f3ef 8009 	mrs	r0, PSP
 8008c94:	f3bf 8f6f 	isb	sy
 8008c98:	4b15      	ldr	r3, [pc, #84]	; (8008cf0 <pxCurrentTCBConst>)
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	f01e 0f10 	tst.w	lr, #16
 8008ca0:	bf08      	it	eq
 8008ca2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ca6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008caa:	6010      	str	r0, [r2, #0]
 8008cac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008cb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008cb4:	b672      	cpsid	i
 8008cb6:	f380 8811 	msr	BASEPRI, r0
 8008cba:	f3bf 8f4f 	dsb	sy
 8008cbe:	f3bf 8f6f 	isb	sy
 8008cc2:	b662      	cpsie	i
 8008cc4:	f7fe feb4 	bl	8007a30 <vTaskSwitchContext>
 8008cc8:	f04f 0000 	mov.w	r0, #0
 8008ccc:	f380 8811 	msr	BASEPRI, r0
 8008cd0:	bc09      	pop	{r0, r3}
 8008cd2:	6819      	ldr	r1, [r3, #0]
 8008cd4:	6808      	ldr	r0, [r1, #0]
 8008cd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cda:	f01e 0f10 	tst.w	lr, #16
 8008cde:	bf08      	it	eq
 8008ce0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008ce4:	f380 8809 	msr	PSP, r0
 8008ce8:	f3bf 8f6f 	isb	sy
 8008cec:	4770      	bx	lr
 8008cee:	bf00      	nop

08008cf0 <pxCurrentTCBConst>:
 8008cf0:	20001bbc 	.word	0x20001bbc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008cf4:	bf00      	nop
 8008cf6:	bf00      	nop

08008cf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b082      	sub	sp, #8
 8008cfc:	af00      	add	r7, sp, #0
	__asm volatile
 8008cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d02:	b672      	cpsid	i
 8008d04:	f383 8811 	msr	BASEPRI, r3
 8008d08:	f3bf 8f6f 	isb	sy
 8008d0c:	f3bf 8f4f 	dsb	sy
 8008d10:	b662      	cpsie	i
 8008d12:	607b      	str	r3, [r7, #4]
}
 8008d14:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008d16:	f7fe fdcf 	bl	80078b8 <xTaskIncrementTick>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d003      	beq.n	8008d28 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008d20:	4b06      	ldr	r3, [pc, #24]	; (8008d3c <SysTick_Handler+0x44>)
 8008d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d26:	601a      	str	r2, [r3, #0]
 8008d28:	2300      	movs	r3, #0
 8008d2a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	f383 8811 	msr	BASEPRI, r3
}
 8008d32:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008d34:	bf00      	nop
 8008d36:	3708      	adds	r7, #8
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}
 8008d3c:	e000ed04 	.word	0xe000ed04

08008d40 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008d40:	b480      	push	{r7}
 8008d42:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d44:	4b0b      	ldr	r3, [pc, #44]	; (8008d74 <vPortSetupTimerInterrupt+0x34>)
 8008d46:	2200      	movs	r2, #0
 8008d48:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d4a:	4b0b      	ldr	r3, [pc, #44]	; (8008d78 <vPortSetupTimerInterrupt+0x38>)
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d50:	4b0a      	ldr	r3, [pc, #40]	; (8008d7c <vPortSetupTimerInterrupt+0x3c>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a0a      	ldr	r2, [pc, #40]	; (8008d80 <vPortSetupTimerInterrupt+0x40>)
 8008d56:	fba2 2303 	umull	r2, r3, r2, r3
 8008d5a:	099b      	lsrs	r3, r3, #6
 8008d5c:	4a09      	ldr	r2, [pc, #36]	; (8008d84 <vPortSetupTimerInterrupt+0x44>)
 8008d5e:	3b01      	subs	r3, #1
 8008d60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d62:	4b04      	ldr	r3, [pc, #16]	; (8008d74 <vPortSetupTimerInterrupt+0x34>)
 8008d64:	2207      	movs	r2, #7
 8008d66:	601a      	str	r2, [r3, #0]
}
 8008d68:	bf00      	nop
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr
 8008d72:	bf00      	nop
 8008d74:	e000e010 	.word	0xe000e010
 8008d78:	e000e018 	.word	0xe000e018
 8008d7c:	20000000 	.word	0x20000000
 8008d80:	10624dd3 	.word	0x10624dd3
 8008d84:	e000e014 	.word	0xe000e014

08008d88 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008d88:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008d98 <vPortEnableVFP+0x10>
 8008d8c:	6801      	ldr	r1, [r0, #0]
 8008d8e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008d92:	6001      	str	r1, [r0, #0]
 8008d94:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008d96:	bf00      	nop
 8008d98:	e000ed88 	.word	0xe000ed88

08008d9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b085      	sub	sp, #20
 8008da0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008da2:	f3ef 8305 	mrs	r3, IPSR
 8008da6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2b0f      	cmp	r3, #15
 8008dac:	d916      	bls.n	8008ddc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008dae:	4a19      	ldr	r2, [pc, #100]	; (8008e14 <vPortValidateInterruptPriority+0x78>)
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	4413      	add	r3, r2
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008db8:	4b17      	ldr	r3, [pc, #92]	; (8008e18 <vPortValidateInterruptPriority+0x7c>)
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	7afa      	ldrb	r2, [r7, #11]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d20c      	bcs.n	8008ddc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8008dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc6:	b672      	cpsid	i
 8008dc8:	f383 8811 	msr	BASEPRI, r3
 8008dcc:	f3bf 8f6f 	isb	sy
 8008dd0:	f3bf 8f4f 	dsb	sy
 8008dd4:	b662      	cpsie	i
 8008dd6:	607b      	str	r3, [r7, #4]
}
 8008dd8:	bf00      	nop
 8008dda:	e7fe      	b.n	8008dda <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008ddc:	4b0f      	ldr	r3, [pc, #60]	; (8008e1c <vPortValidateInterruptPriority+0x80>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008de4:	4b0e      	ldr	r3, [pc, #56]	; (8008e20 <vPortValidateInterruptPriority+0x84>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d90c      	bls.n	8008e06 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8008dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df0:	b672      	cpsid	i
 8008df2:	f383 8811 	msr	BASEPRI, r3
 8008df6:	f3bf 8f6f 	isb	sy
 8008dfa:	f3bf 8f4f 	dsb	sy
 8008dfe:	b662      	cpsie	i
 8008e00:	603b      	str	r3, [r7, #0]
}
 8008e02:	bf00      	nop
 8008e04:	e7fe      	b.n	8008e04 <vPortValidateInterruptPriority+0x68>
	}
 8008e06:	bf00      	nop
 8008e08:	3714      	adds	r7, #20
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr
 8008e12:	bf00      	nop
 8008e14:	e000e3f0 	.word	0xe000e3f0
 8008e18:	200021e8 	.word	0x200021e8
 8008e1c:	e000ed0c 	.word	0xe000ed0c
 8008e20:	200021ec 	.word	0x200021ec

08008e24 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b08a      	sub	sp, #40	; 0x28
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008e30:	f7fe fc72 	bl	8007718 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008e34:	4b5b      	ldr	r3, [pc, #364]	; (8008fa4 <pvPortMalloc+0x180>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d101      	bne.n	8008e40 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008e3c:	f000 f91a 	bl	8009074 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e40:	4b59      	ldr	r3, [pc, #356]	; (8008fa8 <pvPortMalloc+0x184>)
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	4013      	ands	r3, r2
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	f040 8092 	bne.w	8008f72 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d01f      	beq.n	8008e94 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8008e54:	2208      	movs	r2, #8
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	4413      	add	r3, r2
 8008e5a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f003 0307 	and.w	r3, r3, #7
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d016      	beq.n	8008e94 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f023 0307 	bic.w	r3, r3, #7
 8008e6c:	3308      	adds	r3, #8
 8008e6e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f003 0307 	and.w	r3, r3, #7
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d00c      	beq.n	8008e94 <pvPortMalloc+0x70>
	__asm volatile
 8008e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e7e:	b672      	cpsid	i
 8008e80:	f383 8811 	msr	BASEPRI, r3
 8008e84:	f3bf 8f6f 	isb	sy
 8008e88:	f3bf 8f4f 	dsb	sy
 8008e8c:	b662      	cpsie	i
 8008e8e:	617b      	str	r3, [r7, #20]
}
 8008e90:	bf00      	nop
 8008e92:	e7fe      	b.n	8008e92 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d06b      	beq.n	8008f72 <pvPortMalloc+0x14e>
 8008e9a:	4b44      	ldr	r3, [pc, #272]	; (8008fac <pvPortMalloc+0x188>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d866      	bhi.n	8008f72 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008ea4:	4b42      	ldr	r3, [pc, #264]	; (8008fb0 <pvPortMalloc+0x18c>)
 8008ea6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ea8:	4b41      	ldr	r3, [pc, #260]	; (8008fb0 <pvPortMalloc+0x18c>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008eae:	e004      	b.n	8008eba <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8008eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d903      	bls.n	8008ecc <pvPortMalloc+0xa8>
 8008ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d1f1      	bne.n	8008eb0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008ecc:	4b35      	ldr	r3, [pc, #212]	; (8008fa4 <pvPortMalloc+0x180>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d04d      	beq.n	8008f72 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ed6:	6a3b      	ldr	r3, [r7, #32]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2208      	movs	r2, #8
 8008edc:	4413      	add	r3, r2
 8008ede:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	6a3b      	ldr	r3, [r7, #32]
 8008ee6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eea:	685a      	ldr	r2, [r3, #4]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	1ad2      	subs	r2, r2, r3
 8008ef0:	2308      	movs	r3, #8
 8008ef2:	005b      	lsls	r3, r3, #1
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d921      	bls.n	8008f3c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	4413      	add	r3, r2
 8008efe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	f003 0307 	and.w	r3, r3, #7
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00c      	beq.n	8008f24 <pvPortMalloc+0x100>
	__asm volatile
 8008f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f0e:	b672      	cpsid	i
 8008f10:	f383 8811 	msr	BASEPRI, r3
 8008f14:	f3bf 8f6f 	isb	sy
 8008f18:	f3bf 8f4f 	dsb	sy
 8008f1c:	b662      	cpsie	i
 8008f1e:	613b      	str	r3, [r7, #16]
}
 8008f20:	bf00      	nop
 8008f22:	e7fe      	b.n	8008f22 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f26:	685a      	ldr	r2, [r3, #4]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	1ad2      	subs	r2, r2, r3
 8008f2c:	69bb      	ldr	r3, [r7, #24]
 8008f2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f36:	69b8      	ldr	r0, [r7, #24]
 8008f38:	f000 f8fe 	bl	8009138 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f3c:	4b1b      	ldr	r3, [pc, #108]	; (8008fac <pvPortMalloc+0x188>)
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	1ad3      	subs	r3, r2, r3
 8008f46:	4a19      	ldr	r2, [pc, #100]	; (8008fac <pvPortMalloc+0x188>)
 8008f48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f4a:	4b18      	ldr	r3, [pc, #96]	; (8008fac <pvPortMalloc+0x188>)
 8008f4c:	681a      	ldr	r2, [r3, #0]
 8008f4e:	4b19      	ldr	r3, [pc, #100]	; (8008fb4 <pvPortMalloc+0x190>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d203      	bcs.n	8008f5e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f56:	4b15      	ldr	r3, [pc, #84]	; (8008fac <pvPortMalloc+0x188>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a16      	ldr	r2, [pc, #88]	; (8008fb4 <pvPortMalloc+0x190>)
 8008f5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f60:	685a      	ldr	r2, [r3, #4]
 8008f62:	4b11      	ldr	r3, [pc, #68]	; (8008fa8 <pvPortMalloc+0x184>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	431a      	orrs	r2, r3
 8008f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6e:	2200      	movs	r2, #0
 8008f70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f72:	f7fe fbdf 	bl	8007734 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	f003 0307 	and.w	r3, r3, #7
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d00c      	beq.n	8008f9a <pvPortMalloc+0x176>
	__asm volatile
 8008f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f84:	b672      	cpsid	i
 8008f86:	f383 8811 	msr	BASEPRI, r3
 8008f8a:	f3bf 8f6f 	isb	sy
 8008f8e:	f3bf 8f4f 	dsb	sy
 8008f92:	b662      	cpsie	i
 8008f94:	60fb      	str	r3, [r7, #12]
}
 8008f96:	bf00      	nop
 8008f98:	e7fe      	b.n	8008f98 <pvPortMalloc+0x174>
	return pvReturn;
 8008f9a:	69fb      	ldr	r3, [r7, #28]
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3728      	adds	r7, #40	; 0x28
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	20005df8 	.word	0x20005df8
 8008fa8:	20005e04 	.word	0x20005e04
 8008fac:	20005dfc 	.word	0x20005dfc
 8008fb0:	20005df0 	.word	0x20005df0
 8008fb4:	20005e00 	.word	0x20005e00

08008fb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b086      	sub	sp, #24
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d04c      	beq.n	8009064 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008fca:	2308      	movs	r3, #8
 8008fcc:	425b      	negs	r3, r3
 8008fce:	697a      	ldr	r2, [r7, #20]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	685a      	ldr	r2, [r3, #4]
 8008fdc:	4b23      	ldr	r3, [pc, #140]	; (800906c <vPortFree+0xb4>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4013      	ands	r3, r2
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d10c      	bne.n	8009000 <vPortFree+0x48>
	__asm volatile
 8008fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fea:	b672      	cpsid	i
 8008fec:	f383 8811 	msr	BASEPRI, r3
 8008ff0:	f3bf 8f6f 	isb	sy
 8008ff4:	f3bf 8f4f 	dsb	sy
 8008ff8:	b662      	cpsie	i
 8008ffa:	60fb      	str	r3, [r7, #12]
}
 8008ffc:	bf00      	nop
 8008ffe:	e7fe      	b.n	8008ffe <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d00c      	beq.n	8009022 <vPortFree+0x6a>
	__asm volatile
 8009008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900c:	b672      	cpsid	i
 800900e:	f383 8811 	msr	BASEPRI, r3
 8009012:	f3bf 8f6f 	isb	sy
 8009016:	f3bf 8f4f 	dsb	sy
 800901a:	b662      	cpsie	i
 800901c:	60bb      	str	r3, [r7, #8]
}
 800901e:	bf00      	nop
 8009020:	e7fe      	b.n	8009020 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	685a      	ldr	r2, [r3, #4]
 8009026:	4b11      	ldr	r3, [pc, #68]	; (800906c <vPortFree+0xb4>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4013      	ands	r3, r2
 800902c:	2b00      	cmp	r3, #0
 800902e:	d019      	beq.n	8009064 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d115      	bne.n	8009064 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	685a      	ldr	r2, [r3, #4]
 800903c:	4b0b      	ldr	r3, [pc, #44]	; (800906c <vPortFree+0xb4>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	43db      	mvns	r3, r3
 8009042:	401a      	ands	r2, r3
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009048:	f7fe fb66 	bl	8007718 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	685a      	ldr	r2, [r3, #4]
 8009050:	4b07      	ldr	r3, [pc, #28]	; (8009070 <vPortFree+0xb8>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4413      	add	r3, r2
 8009056:	4a06      	ldr	r2, [pc, #24]	; (8009070 <vPortFree+0xb8>)
 8009058:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800905a:	6938      	ldr	r0, [r7, #16]
 800905c:	f000 f86c 	bl	8009138 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009060:	f7fe fb68 	bl	8007734 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009064:	bf00      	nop
 8009066:	3718      	adds	r7, #24
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}
 800906c:	20005e04 	.word	0x20005e04
 8009070:	20005dfc 	.word	0x20005dfc

08009074 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009074:	b480      	push	{r7}
 8009076:	b085      	sub	sp, #20
 8009078:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800907a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800907e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009080:	4b27      	ldr	r3, [pc, #156]	; (8009120 <prvHeapInit+0xac>)
 8009082:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f003 0307 	and.w	r3, r3, #7
 800908a:	2b00      	cmp	r3, #0
 800908c:	d00c      	beq.n	80090a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	3307      	adds	r3, #7
 8009092:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f023 0307 	bic.w	r3, r3, #7
 800909a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800909c:	68ba      	ldr	r2, [r7, #8]
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	1ad3      	subs	r3, r2, r3
 80090a2:	4a1f      	ldr	r2, [pc, #124]	; (8009120 <prvHeapInit+0xac>)
 80090a4:	4413      	add	r3, r2
 80090a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80090ac:	4a1d      	ldr	r2, [pc, #116]	; (8009124 <prvHeapInit+0xb0>)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80090b2:	4b1c      	ldr	r3, [pc, #112]	; (8009124 <prvHeapInit+0xb0>)
 80090b4:	2200      	movs	r2, #0
 80090b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	68ba      	ldr	r2, [r7, #8]
 80090bc:	4413      	add	r3, r2
 80090be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80090c0:	2208      	movs	r2, #8
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	1a9b      	subs	r3, r3, r2
 80090c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f023 0307 	bic.w	r3, r3, #7
 80090ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	4a15      	ldr	r2, [pc, #84]	; (8009128 <prvHeapInit+0xb4>)
 80090d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80090d6:	4b14      	ldr	r3, [pc, #80]	; (8009128 <prvHeapInit+0xb4>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	2200      	movs	r2, #0
 80090dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80090de:	4b12      	ldr	r3, [pc, #72]	; (8009128 <prvHeapInit+0xb4>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2200      	movs	r2, #0
 80090e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	1ad2      	subs	r2, r2, r3
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80090f4:	4b0c      	ldr	r3, [pc, #48]	; (8009128 <prvHeapInit+0xb4>)
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	4a0a      	ldr	r2, [pc, #40]	; (800912c <prvHeapInit+0xb8>)
 8009102:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	4a09      	ldr	r2, [pc, #36]	; (8009130 <prvHeapInit+0xbc>)
 800910a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800910c:	4b09      	ldr	r3, [pc, #36]	; (8009134 <prvHeapInit+0xc0>)
 800910e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009112:	601a      	str	r2, [r3, #0]
}
 8009114:	bf00      	nop
 8009116:	3714      	adds	r7, #20
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr
 8009120:	200021f0 	.word	0x200021f0
 8009124:	20005df0 	.word	0x20005df0
 8009128:	20005df8 	.word	0x20005df8
 800912c:	20005e00 	.word	0x20005e00
 8009130:	20005dfc 	.word	0x20005dfc
 8009134:	20005e04 	.word	0x20005e04

08009138 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009138:	b480      	push	{r7}
 800913a:	b085      	sub	sp, #20
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009140:	4b28      	ldr	r3, [pc, #160]	; (80091e4 <prvInsertBlockIntoFreeList+0xac>)
 8009142:	60fb      	str	r3, [r7, #12]
 8009144:	e002      	b.n	800914c <prvInsertBlockIntoFreeList+0x14>
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	60fb      	str	r3, [r7, #12]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	429a      	cmp	r2, r3
 8009154:	d8f7      	bhi.n	8009146 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	68ba      	ldr	r2, [r7, #8]
 8009160:	4413      	add	r3, r2
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	429a      	cmp	r2, r3
 8009166:	d108      	bne.n	800917a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	685a      	ldr	r2, [r3, #4]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	441a      	add	r2, r3
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	68ba      	ldr	r2, [r7, #8]
 8009184:	441a      	add	r2, r3
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	429a      	cmp	r2, r3
 800918c:	d118      	bne.n	80091c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	4b15      	ldr	r3, [pc, #84]	; (80091e8 <prvInsertBlockIntoFreeList+0xb0>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	429a      	cmp	r2, r3
 8009198:	d00d      	beq.n	80091b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	685a      	ldr	r2, [r3, #4]
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	441a      	add	r2, r3
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	601a      	str	r2, [r3, #0]
 80091b4:	e008      	b.n	80091c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80091b6:	4b0c      	ldr	r3, [pc, #48]	; (80091e8 <prvInsertBlockIntoFreeList+0xb0>)
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	601a      	str	r2, [r3, #0]
 80091be:	e003      	b.n	80091c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80091c8:	68fa      	ldr	r2, [r7, #12]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d002      	beq.n	80091d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	687a      	ldr	r2, [r7, #4]
 80091d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091d6:	bf00      	nop
 80091d8:	3714      	adds	r7, #20
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr
 80091e2:	bf00      	nop
 80091e4:	20005df0 	.word	0x20005df0
 80091e8:	20005df8 	.word	0x20005df8

080091ec <memset>:
 80091ec:	4402      	add	r2, r0
 80091ee:	4603      	mov	r3, r0
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d100      	bne.n	80091f6 <memset+0xa>
 80091f4:	4770      	bx	lr
 80091f6:	f803 1b01 	strb.w	r1, [r3], #1
 80091fa:	e7f9      	b.n	80091f0 <memset+0x4>

080091fc <_reclaim_reent>:
 80091fc:	4b29      	ldr	r3, [pc, #164]	; (80092a4 <_reclaim_reent+0xa8>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4283      	cmp	r3, r0
 8009202:	b570      	push	{r4, r5, r6, lr}
 8009204:	4604      	mov	r4, r0
 8009206:	d04b      	beq.n	80092a0 <_reclaim_reent+0xa4>
 8009208:	69c3      	ldr	r3, [r0, #28]
 800920a:	b143      	cbz	r3, 800921e <_reclaim_reent+0x22>
 800920c:	68db      	ldr	r3, [r3, #12]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d144      	bne.n	800929c <_reclaim_reent+0xa0>
 8009212:	69e3      	ldr	r3, [r4, #28]
 8009214:	6819      	ldr	r1, [r3, #0]
 8009216:	b111      	cbz	r1, 800921e <_reclaim_reent+0x22>
 8009218:	4620      	mov	r0, r4
 800921a:	f000 f879 	bl	8009310 <_free_r>
 800921e:	6961      	ldr	r1, [r4, #20]
 8009220:	b111      	cbz	r1, 8009228 <_reclaim_reent+0x2c>
 8009222:	4620      	mov	r0, r4
 8009224:	f000 f874 	bl	8009310 <_free_r>
 8009228:	69e1      	ldr	r1, [r4, #28]
 800922a:	b111      	cbz	r1, 8009232 <_reclaim_reent+0x36>
 800922c:	4620      	mov	r0, r4
 800922e:	f000 f86f 	bl	8009310 <_free_r>
 8009232:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009234:	b111      	cbz	r1, 800923c <_reclaim_reent+0x40>
 8009236:	4620      	mov	r0, r4
 8009238:	f000 f86a 	bl	8009310 <_free_r>
 800923c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800923e:	b111      	cbz	r1, 8009246 <_reclaim_reent+0x4a>
 8009240:	4620      	mov	r0, r4
 8009242:	f000 f865 	bl	8009310 <_free_r>
 8009246:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009248:	b111      	cbz	r1, 8009250 <_reclaim_reent+0x54>
 800924a:	4620      	mov	r0, r4
 800924c:	f000 f860 	bl	8009310 <_free_r>
 8009250:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009252:	b111      	cbz	r1, 800925a <_reclaim_reent+0x5e>
 8009254:	4620      	mov	r0, r4
 8009256:	f000 f85b 	bl	8009310 <_free_r>
 800925a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800925c:	b111      	cbz	r1, 8009264 <_reclaim_reent+0x68>
 800925e:	4620      	mov	r0, r4
 8009260:	f000 f856 	bl	8009310 <_free_r>
 8009264:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009266:	b111      	cbz	r1, 800926e <_reclaim_reent+0x72>
 8009268:	4620      	mov	r0, r4
 800926a:	f000 f851 	bl	8009310 <_free_r>
 800926e:	6a23      	ldr	r3, [r4, #32]
 8009270:	b1b3      	cbz	r3, 80092a0 <_reclaim_reent+0xa4>
 8009272:	4620      	mov	r0, r4
 8009274:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009278:	4718      	bx	r3
 800927a:	5949      	ldr	r1, [r1, r5]
 800927c:	b941      	cbnz	r1, 8009290 <_reclaim_reent+0x94>
 800927e:	3504      	adds	r5, #4
 8009280:	69e3      	ldr	r3, [r4, #28]
 8009282:	2d80      	cmp	r5, #128	; 0x80
 8009284:	68d9      	ldr	r1, [r3, #12]
 8009286:	d1f8      	bne.n	800927a <_reclaim_reent+0x7e>
 8009288:	4620      	mov	r0, r4
 800928a:	f000 f841 	bl	8009310 <_free_r>
 800928e:	e7c0      	b.n	8009212 <_reclaim_reent+0x16>
 8009290:	680e      	ldr	r6, [r1, #0]
 8009292:	4620      	mov	r0, r4
 8009294:	f000 f83c 	bl	8009310 <_free_r>
 8009298:	4631      	mov	r1, r6
 800929a:	e7ef      	b.n	800927c <_reclaim_reent+0x80>
 800929c:	2500      	movs	r5, #0
 800929e:	e7ef      	b.n	8009280 <_reclaim_reent+0x84>
 80092a0:	bd70      	pop	{r4, r5, r6, pc}
 80092a2:	bf00      	nop
 80092a4:	2000005c 	.word	0x2000005c

080092a8 <__libc_init_array>:
 80092a8:	b570      	push	{r4, r5, r6, lr}
 80092aa:	4d0d      	ldr	r5, [pc, #52]	; (80092e0 <__libc_init_array+0x38>)
 80092ac:	4c0d      	ldr	r4, [pc, #52]	; (80092e4 <__libc_init_array+0x3c>)
 80092ae:	1b64      	subs	r4, r4, r5
 80092b0:	10a4      	asrs	r4, r4, #2
 80092b2:	2600      	movs	r6, #0
 80092b4:	42a6      	cmp	r6, r4
 80092b6:	d109      	bne.n	80092cc <__libc_init_array+0x24>
 80092b8:	4d0b      	ldr	r5, [pc, #44]	; (80092e8 <__libc_init_array+0x40>)
 80092ba:	4c0c      	ldr	r4, [pc, #48]	; (80092ec <__libc_init_array+0x44>)
 80092bc:	f000 f880 	bl	80093c0 <_init>
 80092c0:	1b64      	subs	r4, r4, r5
 80092c2:	10a4      	asrs	r4, r4, #2
 80092c4:	2600      	movs	r6, #0
 80092c6:	42a6      	cmp	r6, r4
 80092c8:	d105      	bne.n	80092d6 <__libc_init_array+0x2e>
 80092ca:	bd70      	pop	{r4, r5, r6, pc}
 80092cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80092d0:	4798      	blx	r3
 80092d2:	3601      	adds	r6, #1
 80092d4:	e7ee      	b.n	80092b4 <__libc_init_array+0xc>
 80092d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80092da:	4798      	blx	r3
 80092dc:	3601      	adds	r6, #1
 80092de:	e7f2      	b.n	80092c6 <__libc_init_array+0x1e>
 80092e0:	0800959c 	.word	0x0800959c
 80092e4:	0800959c 	.word	0x0800959c
 80092e8:	0800959c 	.word	0x0800959c
 80092ec:	080095a0 	.word	0x080095a0

080092f0 <__retarget_lock_acquire_recursive>:
 80092f0:	4770      	bx	lr

080092f2 <__retarget_lock_release_recursive>:
 80092f2:	4770      	bx	lr

080092f4 <memcpy>:
 80092f4:	440a      	add	r2, r1
 80092f6:	4291      	cmp	r1, r2
 80092f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80092fc:	d100      	bne.n	8009300 <memcpy+0xc>
 80092fe:	4770      	bx	lr
 8009300:	b510      	push	{r4, lr}
 8009302:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009306:	f803 4f01 	strb.w	r4, [r3, #1]!
 800930a:	4291      	cmp	r1, r2
 800930c:	d1f9      	bne.n	8009302 <memcpy+0xe>
 800930e:	bd10      	pop	{r4, pc}

08009310 <_free_r>:
 8009310:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009312:	2900      	cmp	r1, #0
 8009314:	d044      	beq.n	80093a0 <_free_r+0x90>
 8009316:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800931a:	9001      	str	r0, [sp, #4]
 800931c:	2b00      	cmp	r3, #0
 800931e:	f1a1 0404 	sub.w	r4, r1, #4
 8009322:	bfb8      	it	lt
 8009324:	18e4      	addlt	r4, r4, r3
 8009326:	f000 f83f 	bl	80093a8 <__malloc_lock>
 800932a:	4a1e      	ldr	r2, [pc, #120]	; (80093a4 <_free_r+0x94>)
 800932c:	9801      	ldr	r0, [sp, #4]
 800932e:	6813      	ldr	r3, [r2, #0]
 8009330:	b933      	cbnz	r3, 8009340 <_free_r+0x30>
 8009332:	6063      	str	r3, [r4, #4]
 8009334:	6014      	str	r4, [r2, #0]
 8009336:	b003      	add	sp, #12
 8009338:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800933c:	f000 b83a 	b.w	80093b4 <__malloc_unlock>
 8009340:	42a3      	cmp	r3, r4
 8009342:	d908      	bls.n	8009356 <_free_r+0x46>
 8009344:	6825      	ldr	r5, [r4, #0]
 8009346:	1961      	adds	r1, r4, r5
 8009348:	428b      	cmp	r3, r1
 800934a:	bf01      	itttt	eq
 800934c:	6819      	ldreq	r1, [r3, #0]
 800934e:	685b      	ldreq	r3, [r3, #4]
 8009350:	1949      	addeq	r1, r1, r5
 8009352:	6021      	streq	r1, [r4, #0]
 8009354:	e7ed      	b.n	8009332 <_free_r+0x22>
 8009356:	461a      	mov	r2, r3
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	b10b      	cbz	r3, 8009360 <_free_r+0x50>
 800935c:	42a3      	cmp	r3, r4
 800935e:	d9fa      	bls.n	8009356 <_free_r+0x46>
 8009360:	6811      	ldr	r1, [r2, #0]
 8009362:	1855      	adds	r5, r2, r1
 8009364:	42a5      	cmp	r5, r4
 8009366:	d10b      	bne.n	8009380 <_free_r+0x70>
 8009368:	6824      	ldr	r4, [r4, #0]
 800936a:	4421      	add	r1, r4
 800936c:	1854      	adds	r4, r2, r1
 800936e:	42a3      	cmp	r3, r4
 8009370:	6011      	str	r1, [r2, #0]
 8009372:	d1e0      	bne.n	8009336 <_free_r+0x26>
 8009374:	681c      	ldr	r4, [r3, #0]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	6053      	str	r3, [r2, #4]
 800937a:	440c      	add	r4, r1
 800937c:	6014      	str	r4, [r2, #0]
 800937e:	e7da      	b.n	8009336 <_free_r+0x26>
 8009380:	d902      	bls.n	8009388 <_free_r+0x78>
 8009382:	230c      	movs	r3, #12
 8009384:	6003      	str	r3, [r0, #0]
 8009386:	e7d6      	b.n	8009336 <_free_r+0x26>
 8009388:	6825      	ldr	r5, [r4, #0]
 800938a:	1961      	adds	r1, r4, r5
 800938c:	428b      	cmp	r3, r1
 800938e:	bf04      	itt	eq
 8009390:	6819      	ldreq	r1, [r3, #0]
 8009392:	685b      	ldreq	r3, [r3, #4]
 8009394:	6063      	str	r3, [r4, #4]
 8009396:	bf04      	itt	eq
 8009398:	1949      	addeq	r1, r1, r5
 800939a:	6021      	streq	r1, [r4, #0]
 800939c:	6054      	str	r4, [r2, #4]
 800939e:	e7ca      	b.n	8009336 <_free_r+0x26>
 80093a0:	b003      	add	sp, #12
 80093a2:	bd30      	pop	{r4, r5, pc}
 80093a4:	20005f44 	.word	0x20005f44

080093a8 <__malloc_lock>:
 80093a8:	4801      	ldr	r0, [pc, #4]	; (80093b0 <__malloc_lock+0x8>)
 80093aa:	f7ff bfa1 	b.w	80092f0 <__retarget_lock_acquire_recursive>
 80093ae:	bf00      	nop
 80093b0:	20005f40 	.word	0x20005f40

080093b4 <__malloc_unlock>:
 80093b4:	4801      	ldr	r0, [pc, #4]	; (80093bc <__malloc_unlock+0x8>)
 80093b6:	f7ff bf9c 	b.w	80092f2 <__retarget_lock_release_recursive>
 80093ba:	bf00      	nop
 80093bc:	20005f40 	.word	0x20005f40

080093c0 <_init>:
 80093c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093c2:	bf00      	nop
 80093c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093c6:	bc08      	pop	{r3}
 80093c8:	469e      	mov	lr, r3
 80093ca:	4770      	bx	lr

080093cc <_fini>:
 80093cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ce:	bf00      	nop
 80093d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093d2:	bc08      	pop	{r3}
 80093d4:	469e      	mov	lr, r3
 80093d6:	4770      	bx	lr
