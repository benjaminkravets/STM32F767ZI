
uart_isr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009330  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08009530  08009530  00019530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009700  08009700  000201b4  2**0
                  CONTENTS
  4 .ARM          00000008  08009700  08009700  00019700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009708  08009708  000201b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009708  08009708  00019708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800970c  0800970c  0001970c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009710  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000074  08009784  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000114  08009824  00020114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005c14  200001b4  080098c4  000201b4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20005dc8  080098c4  00025dc8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00026597  00000000  00000000  000201e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000044e8  00000000  00000000  00046779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b80  00000000  00000000  0004ac68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000019b8  00000000  00000000  0004c7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000077a1  00000000  00000000  0004e1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001eb3d  00000000  00000000  00055941  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010d01e  00000000  00000000  0007447e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0018149c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000772c  00000000  00000000  001814ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001b4 	.word	0x200001b4
 800021c:	00000000 	.word	0x00000000
 8000220:	08009518 	.word	0x08009518

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001b8 	.word	0x200001b8
 800023c:	08009518 	.word	0x08009518

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002d0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d332      	bcc.n	80002c2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d314      	bcc.n	8000290 <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000284:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000288:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800028a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028e:	4770      	bx	lr

08000290 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000290:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000292:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000294:	d319      	bcc.n	80002ca <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000296:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000298:	1b12      	subs	r2, r2, r4

0800029a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800029a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80002a2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a4:	d1f9      	bne.n	800029a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a8:	d005      	beq.n	80002b6 <_No2ChunkNeeded>

080002aa <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002aa:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002ae:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002b2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b4:	d1f9      	bne.n	80002aa <_LoopCopyAfterWrapAround>

080002b6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80002b6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002ba:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002bc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002be:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002c0:	4770      	bx	lr

080002c2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002c2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002c4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002c6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c8:	d2cd      	bcs.n	8000266 <_Case4>

080002ca <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002ca:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ce:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002d0:	200001d0 	.word	0x200001d0

080002d4 <__aeabi_uldivmod>:
 80002d4:	b953      	cbnz	r3, 80002ec <__aeabi_uldivmod+0x18>
 80002d6:	b94a      	cbnz	r2, 80002ec <__aeabi_uldivmod+0x18>
 80002d8:	2900      	cmp	r1, #0
 80002da:	bf08      	it	eq
 80002dc:	2800      	cmpeq	r0, #0
 80002de:	bf1c      	itt	ne
 80002e0:	f04f 31ff 	movne.w	r1, #4294967295
 80002e4:	f04f 30ff 	movne.w	r0, #4294967295
 80002e8:	f000 b974 	b.w	80005d4 <__aeabi_idiv0>
 80002ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f4:	f000 f806 	bl	8000304 <__udivmoddi4>
 80002f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000300:	b004      	add	sp, #16
 8000302:	4770      	bx	lr

08000304 <__udivmoddi4>:
 8000304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000308:	9d08      	ldr	r5, [sp, #32]
 800030a:	4604      	mov	r4, r0
 800030c:	468e      	mov	lr, r1
 800030e:	2b00      	cmp	r3, #0
 8000310:	d14d      	bne.n	80003ae <__udivmoddi4+0xaa>
 8000312:	428a      	cmp	r2, r1
 8000314:	4694      	mov	ip, r2
 8000316:	d969      	bls.n	80003ec <__udivmoddi4+0xe8>
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	b152      	cbz	r2, 8000334 <__udivmoddi4+0x30>
 800031e:	fa01 f302 	lsl.w	r3, r1, r2
 8000322:	f1c2 0120 	rsb	r1, r2, #32
 8000326:	fa20 f101 	lsr.w	r1, r0, r1
 800032a:	fa0c fc02 	lsl.w	ip, ip, r2
 800032e:	ea41 0e03 	orr.w	lr, r1, r3
 8000332:	4094      	lsls	r4, r2
 8000334:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000338:	0c21      	lsrs	r1, r4, #16
 800033a:	fbbe f6f8 	udiv	r6, lr, r8
 800033e:	fa1f f78c 	uxth.w	r7, ip
 8000342:	fb08 e316 	mls	r3, r8, r6, lr
 8000346:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034a:	fb06 f107 	mul.w	r1, r6, r7
 800034e:	4299      	cmp	r1, r3
 8000350:	d90a      	bls.n	8000368 <__udivmoddi4+0x64>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 811f 	bcs.w	800059c <__udivmoddi4+0x298>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 811c 	bls.w	800059c <__udivmoddi4+0x298>
 8000364:	3e02      	subs	r6, #2
 8000366:	4463      	add	r3, ip
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 f707 	mul.w	r7, r0, r7
 800037c:	42a7      	cmp	r7, r4
 800037e:	d90a      	bls.n	8000396 <__udivmoddi4+0x92>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f100 33ff 	add.w	r3, r0, #4294967295
 8000388:	f080 810a 	bcs.w	80005a0 <__udivmoddi4+0x29c>
 800038c:	42a7      	cmp	r7, r4
 800038e:	f240 8107 	bls.w	80005a0 <__udivmoddi4+0x29c>
 8000392:	4464      	add	r4, ip
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039a:	1be4      	subs	r4, r4, r7
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa4>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xc2>
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	f000 80ef 	beq.w	8000596 <__udivmoddi4+0x292>
 80003b8:	2600      	movs	r6, #0
 80003ba:	e9c5 0100 	strd	r0, r1, [r5]
 80003be:	4630      	mov	r0, r6
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f683 	clz	r6, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d14a      	bne.n	8000464 <__udivmoddi4+0x160>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd4>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80f9 	bhi.w	80005ca <__udivmoddi4+0x2c6>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	469e      	mov	lr, r3
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa4>
 80003e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa4>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xec>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 8092 	bne.w	800051e <__udivmoddi4+0x21a>
 80003fa:	eba1 010c 	sub.w	r1, r1, ip
 80003fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000402:	fa1f fe8c 	uxth.w	lr, ip
 8000406:	2601      	movs	r6, #1
 8000408:	0c20      	lsrs	r0, r4, #16
 800040a:	fbb1 f3f7 	udiv	r3, r1, r7
 800040e:	fb07 1113 	mls	r1, r7, r3, r1
 8000412:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000416:	fb0e f003 	mul.w	r0, lr, r3
 800041a:	4288      	cmp	r0, r1
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x12c>
 800041e:	eb1c 0101 	adds.w	r1, ip, r1
 8000422:	f103 38ff 	add.w	r8, r3, #4294967295
 8000426:	d202      	bcs.n	800042e <__udivmoddi4+0x12a>
 8000428:	4288      	cmp	r0, r1
 800042a:	f200 80cb 	bhi.w	80005c4 <__udivmoddi4+0x2c0>
 800042e:	4643      	mov	r3, r8
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1110 	mls	r1, r7, r0, r1
 800043c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000440:	fb0e fe00 	mul.w	lr, lr, r0
 8000444:	45a6      	cmp	lr, r4
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x156>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d202      	bcs.n	8000458 <__udivmoddi4+0x154>
 8000452:	45a6      	cmp	lr, r4
 8000454:	f200 80bb 	bhi.w	80005ce <__udivmoddi4+0x2ca>
 8000458:	4608      	mov	r0, r1
 800045a:	eba4 040e 	sub.w	r4, r4, lr
 800045e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000462:	e79c      	b.n	800039e <__udivmoddi4+0x9a>
 8000464:	f1c6 0720 	rsb	r7, r6, #32
 8000468:	40b3      	lsls	r3, r6
 800046a:	fa22 fc07 	lsr.w	ip, r2, r7
 800046e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000472:	fa20 f407 	lsr.w	r4, r0, r7
 8000476:	fa01 f306 	lsl.w	r3, r1, r6
 800047a:	431c      	orrs	r4, r3
 800047c:	40f9      	lsrs	r1, r7
 800047e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000482:	fa00 f306 	lsl.w	r3, r0, r6
 8000486:	fbb1 f8f9 	udiv	r8, r1, r9
 800048a:	0c20      	lsrs	r0, r4, #16
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	fb09 1118 	mls	r1, r9, r8, r1
 8000494:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000498:	fb08 f00e 	mul.w	r0, r8, lr
 800049c:	4288      	cmp	r0, r1
 800049e:	fa02 f206 	lsl.w	r2, r2, r6
 80004a2:	d90b      	bls.n	80004bc <__udivmoddi4+0x1b8>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004ac:	f080 8088 	bcs.w	80005c0 <__udivmoddi4+0x2bc>
 80004b0:	4288      	cmp	r0, r1
 80004b2:	f240 8085 	bls.w	80005c0 <__udivmoddi4+0x2bc>
 80004b6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	1a09      	subs	r1, r1, r0
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c4:	fb09 1110 	mls	r1, r9, r0, r1
 80004c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d0:	458e      	cmp	lr, r1
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x1e2>
 80004d4:	eb1c 0101 	adds.w	r1, ip, r1
 80004d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80004dc:	d26c      	bcs.n	80005b8 <__udivmoddi4+0x2b4>
 80004de:	458e      	cmp	lr, r1
 80004e0:	d96a      	bls.n	80005b8 <__udivmoddi4+0x2b4>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4461      	add	r1, ip
 80004e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ea:	fba0 9402 	umull	r9, r4, r0, r2
 80004ee:	eba1 010e 	sub.w	r1, r1, lr
 80004f2:	42a1      	cmp	r1, r4
 80004f4:	46c8      	mov	r8, r9
 80004f6:	46a6      	mov	lr, r4
 80004f8:	d356      	bcc.n	80005a8 <__udivmoddi4+0x2a4>
 80004fa:	d053      	beq.n	80005a4 <__udivmoddi4+0x2a0>
 80004fc:	b15d      	cbz	r5, 8000516 <__udivmoddi4+0x212>
 80004fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000502:	eb61 010e 	sbc.w	r1, r1, lr
 8000506:	fa01 f707 	lsl.w	r7, r1, r7
 800050a:	fa22 f306 	lsr.w	r3, r2, r6
 800050e:	40f1      	lsrs	r1, r6
 8000510:	431f      	orrs	r7, r3
 8000512:	e9c5 7100 	strd	r7, r1, [r5]
 8000516:	2600      	movs	r6, #0
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	f1c2 0320 	rsb	r3, r2, #32
 8000522:	40d8      	lsrs	r0, r3
 8000524:	fa0c fc02 	lsl.w	ip, ip, r2
 8000528:	fa21 f303 	lsr.w	r3, r1, r3
 800052c:	4091      	lsls	r1, r2
 800052e:	4301      	orrs	r1, r0
 8000530:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000534:	fa1f fe8c 	uxth.w	lr, ip
 8000538:	fbb3 f0f7 	udiv	r0, r3, r7
 800053c:	fb07 3610 	mls	r6, r7, r0, r3
 8000540:	0c0b      	lsrs	r3, r1, #16
 8000542:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000546:	fb00 f60e 	mul.w	r6, r0, lr
 800054a:	429e      	cmp	r6, r3
 800054c:	fa04 f402 	lsl.w	r4, r4, r2
 8000550:	d908      	bls.n	8000564 <__udivmoddi4+0x260>
 8000552:	eb1c 0303 	adds.w	r3, ip, r3
 8000556:	f100 38ff 	add.w	r8, r0, #4294967295
 800055a:	d22f      	bcs.n	80005bc <__udivmoddi4+0x2b8>
 800055c:	429e      	cmp	r6, r3
 800055e:	d92d      	bls.n	80005bc <__udivmoddi4+0x2b8>
 8000560:	3802      	subs	r0, #2
 8000562:	4463      	add	r3, ip
 8000564:	1b9b      	subs	r3, r3, r6
 8000566:	b289      	uxth	r1, r1
 8000568:	fbb3 f6f7 	udiv	r6, r3, r7
 800056c:	fb07 3316 	mls	r3, r7, r6, r3
 8000570:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000574:	fb06 f30e 	mul.w	r3, r6, lr
 8000578:	428b      	cmp	r3, r1
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x28a>
 800057c:	eb1c 0101 	adds.w	r1, ip, r1
 8000580:	f106 38ff 	add.w	r8, r6, #4294967295
 8000584:	d216      	bcs.n	80005b4 <__udivmoddi4+0x2b0>
 8000586:	428b      	cmp	r3, r1
 8000588:	d914      	bls.n	80005b4 <__udivmoddi4+0x2b0>
 800058a:	3e02      	subs	r6, #2
 800058c:	4461      	add	r1, ip
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000594:	e738      	b.n	8000408 <__udivmoddi4+0x104>
 8000596:	462e      	mov	r6, r5
 8000598:	4628      	mov	r0, r5
 800059a:	e705      	b.n	80003a8 <__udivmoddi4+0xa4>
 800059c:	4606      	mov	r6, r0
 800059e:	e6e3      	b.n	8000368 <__udivmoddi4+0x64>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6f8      	b.n	8000396 <__udivmoddi4+0x92>
 80005a4:	454b      	cmp	r3, r9
 80005a6:	d2a9      	bcs.n	80004fc <__udivmoddi4+0x1f8>
 80005a8:	ebb9 0802 	subs.w	r8, r9, r2
 80005ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b0:	3801      	subs	r0, #1
 80005b2:	e7a3      	b.n	80004fc <__udivmoddi4+0x1f8>
 80005b4:	4646      	mov	r6, r8
 80005b6:	e7ea      	b.n	800058e <__udivmoddi4+0x28a>
 80005b8:	4620      	mov	r0, r4
 80005ba:	e794      	b.n	80004e6 <__udivmoddi4+0x1e2>
 80005bc:	4640      	mov	r0, r8
 80005be:	e7d1      	b.n	8000564 <__udivmoddi4+0x260>
 80005c0:	46d0      	mov	r8, sl
 80005c2:	e77b      	b.n	80004bc <__udivmoddi4+0x1b8>
 80005c4:	3b02      	subs	r3, #2
 80005c6:	4461      	add	r1, ip
 80005c8:	e732      	b.n	8000430 <__udivmoddi4+0x12c>
 80005ca:	4630      	mov	r0, r6
 80005cc:	e709      	b.n	80003e2 <__udivmoddi4+0xde>
 80005ce:	4464      	add	r4, ip
 80005d0:	3802      	subs	r0, #2
 80005d2:	e742      	b.n	800045a <__udivmoddi4+0x156>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80005de:	4b26      	ldr	r3, [pc, #152]	; (8000678 <_DoInit+0xa0>)
 80005e0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80005e2:	22a8      	movs	r2, #168	; 0xa8
 80005e4:	2100      	movs	r1, #0
 80005e6:	6838      	ldr	r0, [r7, #0]
 80005e8:	f008 fecc 	bl	8009384 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	2203      	movs	r2, #3
 80005f0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	2203      	movs	r2, #3
 80005f6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	4a20      	ldr	r2, [pc, #128]	; (800067c <_DoInit+0xa4>)
 80005fc:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	4a1f      	ldr	r2, [pc, #124]	; (8000680 <_DoInit+0xa8>)
 8000602:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800060a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	2200      	movs	r2, #0
 8000610:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	2200      	movs	r2, #0
 8000616:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	2200      	movs	r2, #0
 800061c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	4a16      	ldr	r2, [pc, #88]	; (800067c <_DoInit+0xa4>)
 8000622:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	4a17      	ldr	r2, [pc, #92]	; (8000684 <_DoInit+0xac>)
 8000628:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	2210      	movs	r2, #16
 800062e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	2200      	movs	r2, #0
 8000634:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	2200      	movs	r2, #0
 800063a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	2200      	movs	r2, #0
 8000640:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000642:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	e00c      	b.n	8000666 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f1c3 030f 	rsb	r3, r3, #15
 8000652:	4a0d      	ldr	r2, [pc, #52]	; (8000688 <_DoInit+0xb0>)
 8000654:	5cd1      	ldrb	r1, [r2, r3]
 8000656:	683a      	ldr	r2, [r7, #0]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4413      	add	r3, r2
 800065c:	460a      	mov	r2, r1
 800065e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	3301      	adds	r3, #1
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2b0f      	cmp	r3, #15
 800066a:	d9ef      	bls.n	800064c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800066c:	f3bf 8f5f 	dmb	sy
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	200001d0 	.word	0x200001d0
 800067c:	08009530 	.word	0x08009530
 8000680:	20000278 	.word	0x20000278
 8000684:	20000678 	.word	0x20000678
 8000688:	080095f0 	.word	0x080095f0

0800068c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b08c      	sub	sp, #48	; 0x30
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8000698:	4b3e      	ldr	r3, [pc, #248]	; (8000794 <SEGGER_RTT_ReadNoLock+0x108>)
 800069a:	623b      	str	r3, [r7, #32]
 800069c:	6a3b      	ldr	r3, [r7, #32]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d101      	bne.n	80006aa <SEGGER_RTT_ReadNoLock+0x1e>
 80006a6:	f7ff ff97 	bl	80005d8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80006aa:	68fa      	ldr	r2, [r7, #12]
 80006ac:	4613      	mov	r3, r2
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	4413      	add	r3, r2
 80006b2:	00db      	lsls	r3, r3, #3
 80006b4:	3360      	adds	r3, #96	; 0x60
 80006b6:	4a37      	ldr	r2, [pc, #220]	; (8000794 <SEGGER_RTT_ReadNoLock+0x108>)
 80006b8:	4413      	add	r3, r2
 80006ba:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	691b      	ldr	r3, [r3, #16]
 80006c4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80006c6:	69fb      	ldr	r3, [r7, #28]
 80006c8:	68db      	ldr	r3, [r3, #12]
 80006ca:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80006cc:	2300      	movs	r3, #0
 80006ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80006d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006d2:	69bb      	ldr	r3, [r7, #24]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d92b      	bls.n	8000730 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80006d8:	69fb      	ldr	r3, [r7, #28]
 80006da:	689a      	ldr	r2, [r3, #8]
 80006dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006de:	1ad3      	subs	r3, r2, r3
 80006e0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80006e2:	697a      	ldr	r2, [r7, #20]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4293      	cmp	r3, r2
 80006e8:	bf28      	it	cs
 80006ea:	4613      	movcs	r3, r2
 80006ec:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	685a      	ldr	r2, [r3, #4]
 80006f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006f4:	4413      	add	r3, r2
 80006f6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80006f8:	697a      	ldr	r2, [r7, #20]
 80006fa:	6939      	ldr	r1, [r7, #16]
 80006fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006fe:	f008 fe33 	bl	8009368 <memcpy>
    NumBytesRead += NumBytesRem;
 8000702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	4413      	add	r3, r2
 8000708:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800070a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	4413      	add	r3, r2
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	1ad3      	subs	r3, r2, r3
 8000718:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800071a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	4413      	add	r3, r2
 8000720:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	689b      	ldr	r3, [r3, #8]
 8000726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000728:	429a      	cmp	r2, r3
 800072a:	d101      	bne.n	8000730 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800072c:	2300      	movs	r3, #0
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8000730:	69ba      	ldr	r2, [r7, #24]
 8000732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000734:	1ad3      	subs	r3, r2, r3
 8000736:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8000738:	697a      	ldr	r2, [r7, #20]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4293      	cmp	r3, r2
 800073e:	bf28      	it	cs
 8000740:	4613      	movcs	r3, r2
 8000742:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d019      	beq.n	800077e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	685a      	ldr	r2, [r3, #4]
 800074e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000750:	4413      	add	r3, r2
 8000752:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8000754:	697a      	ldr	r2, [r7, #20]
 8000756:	6939      	ldr	r1, [r7, #16]
 8000758:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800075a:	f008 fe05 	bl	8009368 <memcpy>
    NumBytesRead += NumBytesRem;
 800075e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	4413      	add	r3, r2
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8000766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	4413      	add	r3, r2
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	1ad3      	subs	r3, r2, r3
 8000774:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8000776:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	4413      	add	r3, r2
 800077c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800077e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000780:	2b00      	cmp	r3, #0
 8000782:	d002      	beq.n	800078a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000788:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800078a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800078c:	4618      	mov	r0, r3
 800078e:	3730      	adds	r7, #48	; 0x30
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200001d0 	.word	0x200001d0

08000798 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
 80007a4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80007a6:	4b3d      	ldr	r3, [pc, #244]	; (800089c <SEGGER_RTT_AllocUpBuffer+0x104>)
 80007a8:	61bb      	str	r3, [r7, #24]
 80007aa:	69bb      	ldr	r3, [r7, #24]
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d101      	bne.n	80007b8 <SEGGER_RTT_AllocUpBuffer+0x20>
 80007b4:	f7ff ff10 	bl	80005d8 <_DoInit>
  SEGGER_RTT_LOCK();
 80007b8:	f3ef 8311 	mrs	r3, BASEPRI
 80007bc:	f04f 0120 	mov.w	r1, #32
 80007c0:	f381 8811 	msr	BASEPRI, r1
 80007c4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80007c6:	4b35      	ldr	r3, [pc, #212]	; (800089c <SEGGER_RTT_AllocUpBuffer+0x104>)
 80007c8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80007ce:	6939      	ldr	r1, [r7, #16]
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	1c5a      	adds	r2, r3, #1
 80007d4:	4613      	mov	r3, r2
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	4413      	add	r3, r2
 80007da:	00db      	lsls	r3, r3, #3
 80007dc:	440b      	add	r3, r1
 80007de:	3304      	adds	r3, #4
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d008      	beq.n	80007f8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	3301      	adds	r3, #1
 80007ea:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80007ec:	693b      	ldr	r3, [r7, #16]
 80007ee:	691b      	ldr	r3, [r3, #16]
 80007f0:	69fa      	ldr	r2, [r7, #28]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	dbeb      	blt.n	80007ce <SEGGER_RTT_AllocUpBuffer+0x36>
 80007f6:	e000      	b.n	80007fa <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80007f8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	691b      	ldr	r3, [r3, #16]
 80007fe:	69fa      	ldr	r2, [r7, #28]
 8000800:	429a      	cmp	r2, r3
 8000802:	da3f      	bge.n	8000884 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8000804:	6939      	ldr	r1, [r7, #16]
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	1c5a      	adds	r2, r3, #1
 800080a:	4613      	mov	r3, r2
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	4413      	add	r3, r2
 8000810:	00db      	lsls	r3, r3, #3
 8000812:	440b      	add	r3, r1
 8000814:	68fa      	ldr	r2, [r7, #12]
 8000816:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8000818:	6939      	ldr	r1, [r7, #16]
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	1c5a      	adds	r2, r3, #1
 800081e:	4613      	mov	r3, r2
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	4413      	add	r3, r2
 8000824:	00db      	lsls	r3, r3, #3
 8000826:	440b      	add	r3, r1
 8000828:	3304      	adds	r3, #4
 800082a:	68ba      	ldr	r2, [r7, #8]
 800082c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800082e:	6939      	ldr	r1, [r7, #16]
 8000830:	69fa      	ldr	r2, [r7, #28]
 8000832:	4613      	mov	r3, r2
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	4413      	add	r3, r2
 8000838:	00db      	lsls	r3, r3, #3
 800083a:	440b      	add	r3, r1
 800083c:	3320      	adds	r3, #32
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8000842:	6939      	ldr	r1, [r7, #16]
 8000844:	69fa      	ldr	r2, [r7, #28]
 8000846:	4613      	mov	r3, r2
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	4413      	add	r3, r2
 800084c:	00db      	lsls	r3, r3, #3
 800084e:	440b      	add	r3, r1
 8000850:	3328      	adds	r3, #40	; 0x28
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8000856:	6939      	ldr	r1, [r7, #16]
 8000858:	69fa      	ldr	r2, [r7, #28]
 800085a:	4613      	mov	r3, r2
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	4413      	add	r3, r2
 8000860:	00db      	lsls	r3, r3, #3
 8000862:	440b      	add	r3, r1
 8000864:	3324      	adds	r3, #36	; 0x24
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800086a:	6939      	ldr	r1, [r7, #16]
 800086c:	69fa      	ldr	r2, [r7, #28]
 800086e:	4613      	mov	r3, r2
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	4413      	add	r3, r2
 8000874:	00db      	lsls	r3, r3, #3
 8000876:	440b      	add	r3, r1
 8000878:	332c      	adds	r3, #44	; 0x2c
 800087a:	683a      	ldr	r2, [r7, #0]
 800087c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800087e:	f3bf 8f5f 	dmb	sy
 8000882:	e002      	b.n	800088a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8000884:	f04f 33ff 	mov.w	r3, #4294967295
 8000888:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8000890:	69fb      	ldr	r3, [r7, #28]
}
 8000892:	4618      	mov	r0, r3
 8000894:	3720      	adds	r7, #32
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200001d0 	.word	0x200001d0

080008a0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	; 0x28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
 80008ac:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80008ae:	4b21      	ldr	r3, [pc, #132]	; (8000934 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80008b0:	623b      	str	r3, [r7, #32]
 80008b2:	6a3b      	ldr	r3, [r7, #32]
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d101      	bne.n	80008c0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80008bc:	f7ff fe8c 	bl	80005d8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80008c0:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80008c2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	2b02      	cmp	r3, #2
 80008c8:	d82c      	bhi.n	8000924 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80008ca:	f3ef 8311 	mrs	r3, BASEPRI
 80008ce:	f04f 0120 	mov.w	r1, #32
 80008d2:	f381 8811 	msr	BASEPRI, r1
 80008d6:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80008d8:	68fa      	ldr	r2, [r7, #12]
 80008da:	4613      	mov	r3, r2
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	4413      	add	r3, r2
 80008e0:	00db      	lsls	r3, r3, #3
 80008e2:	3360      	adds	r3, #96	; 0x60
 80008e4:	69fa      	ldr	r2, [r7, #28]
 80008e6:	4413      	add	r3, r2
 80008e8:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d00e      	beq.n	800090e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	68ba      	ldr	r2, [r7, #8]
 80008f4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	683a      	ldr	r2, [r7, #0]
 8000900:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000912:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000914:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8000918:	69bb      	ldr	r3, [r7, #24]
 800091a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
 8000922:	e002      	b.n	800092a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8000924:	f04f 33ff 	mov.w	r3, #4294967295
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800092c:	4618      	mov	r0, r3
 800092e:	3728      	adds	r7, #40	; 0x28
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200001d0 	.word	0x200001d0

08000938 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8000938:	b480      	push	{r7}
 800093a:	b087      	sub	sp, #28
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	1c5a      	adds	r2, r3, #1
 800094c:	60fa      	str	r2, [r7, #12]
 800094e:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2b80      	cmp	r3, #128	; 0x80
 8000954:	d90a      	bls.n	800096c <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8000956:	2380      	movs	r3, #128	; 0x80
 8000958:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 800095a:	e007      	b.n	800096c <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 800095c:	68ba      	ldr	r2, [r7, #8]
 800095e:	1c53      	adds	r3, r2, #1
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	1c59      	adds	r1, r3, #1
 8000966:	60f9      	str	r1, [r7, #12]
 8000968:	7812      	ldrb	r2, [r2, #0]
 800096a:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	1e5a      	subs	r2, r3, #1
 8000970:	607a      	str	r2, [r7, #4]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d003      	beq.n	800097e <_EncodeStr+0x46>
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d1ee      	bne.n	800095c <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800097e:	68ba      	ldr	r2, [r7, #8]
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	b2da      	uxtb	r2, r3
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 800098a:	68fb      	ldr	r3, [r7, #12]
}
 800098c:	4618      	mov	r0, r3
 800098e:	371c      	adds	r7, #28
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3307      	adds	r3, #7
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80009b6:	4b35      	ldr	r3, [pc, #212]	; (8000a8c <_HandleIncomingPacket+0xdc>)
 80009b8:	7e1b      	ldrb	r3, [r3, #24]
 80009ba:	4618      	mov	r0, r3
 80009bc:	1cfb      	adds	r3, r7, #3
 80009be:	2201      	movs	r2, #1
 80009c0:	4619      	mov	r1, r3
 80009c2:	f7ff fe63 	bl	800068c <SEGGER_RTT_ReadNoLock>
 80009c6:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d052      	beq.n	8000a74 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 80009ce:	78fb      	ldrb	r3, [r7, #3]
 80009d0:	2b80      	cmp	r3, #128	; 0x80
 80009d2:	d031      	beq.n	8000a38 <_HandleIncomingPacket+0x88>
 80009d4:	2b80      	cmp	r3, #128	; 0x80
 80009d6:	dc40      	bgt.n	8000a5a <_HandleIncomingPacket+0xaa>
 80009d8:	2b07      	cmp	r3, #7
 80009da:	dc15      	bgt.n	8000a08 <_HandleIncomingPacket+0x58>
 80009dc:	2b00      	cmp	r3, #0
 80009de:	dd3c      	ble.n	8000a5a <_HandleIncomingPacket+0xaa>
 80009e0:	3b01      	subs	r3, #1
 80009e2:	2b06      	cmp	r3, #6
 80009e4:	d839      	bhi.n	8000a5a <_HandleIncomingPacket+0xaa>
 80009e6:	a201      	add	r2, pc, #4	; (adr r2, 80009ec <_HandleIncomingPacket+0x3c>)
 80009e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ec:	08000a0f 	.word	0x08000a0f
 80009f0:	08000a15 	.word	0x08000a15
 80009f4:	08000a1b 	.word	0x08000a1b
 80009f8:	08000a21 	.word	0x08000a21
 80009fc:	08000a27 	.word	0x08000a27
 8000a00:	08000a2d 	.word	0x08000a2d
 8000a04:	08000a33 	.word	0x08000a33
 8000a08:	2b7f      	cmp	r3, #127	; 0x7f
 8000a0a:	d035      	beq.n	8000a78 <_HandleIncomingPacket+0xc8>
 8000a0c:	e025      	b.n	8000a5a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8000a0e:	f000 fbe5 	bl	80011dc <SEGGER_SYSVIEW_Start>
      break;
 8000a12:	e036      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8000a14:	f000 fc9c 	bl	8001350 <SEGGER_SYSVIEW_Stop>
      break;
 8000a18:	e033      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8000a1a:	f000 fe75 	bl	8001708 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8000a1e:	e030      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8000a20:	f000 fe3a 	bl	8001698 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8000a24:	e02d      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8000a26:	f000 fcb9 	bl	800139c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8000a2a:	e02a      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8000a2c:	f000 ffa4 	bl	8001978 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8000a30:	e027      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8000a32:	f000 ff83 	bl	800193c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8000a36:	e024      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <_HandleIncomingPacket+0xdc>)
 8000a3a:	7e1b      	ldrb	r3, [r3, #24]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	1cfb      	adds	r3, r7, #3
 8000a40:	2201      	movs	r2, #1
 8000a42:	4619      	mov	r1, r3
 8000a44:	f7ff fe22 	bl	800068c <SEGGER_RTT_ReadNoLock>
 8000a48:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d015      	beq.n	8000a7c <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8000a50:	78fb      	ldrb	r3, [r7, #3]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 fee8 	bl	8001828 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8000a58:	e010      	b.n	8000a7c <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8000a5a:	78fb      	ldrb	r3, [r7, #3]
 8000a5c:	b25b      	sxtb	r3, r3
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	da0e      	bge.n	8000a80 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000a62:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <_HandleIncomingPacket+0xdc>)
 8000a64:	7e1b      	ldrb	r3, [r3, #24]
 8000a66:	4618      	mov	r0, r3
 8000a68:	1cfb      	adds	r3, r7, #3
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f7ff fe0d 	bl	800068c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8000a72:	e005      	b.n	8000a80 <_HandleIncomingPacket+0xd0>
    }
  }
 8000a74:	bf00      	nop
 8000a76:	e004      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
      break;
 8000a78:	bf00      	nop
 8000a7a:	e002      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
      break;
 8000a7c:	bf00      	nop
 8000a7e:	e000      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
      break;
 8000a80:	bf00      	nop
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000a90 	.word	0x20000a90

08000a90 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08c      	sub	sp, #48	; 0x30
 8000a94:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8000a96:	2301      	movs	r3, #1
 8000a98:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000aa4:	4b31      	ldr	r3, [pc, #196]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000aa6:	695b      	ldr	r3, [r3, #20]
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000aaa:	e00b      	b.n	8000ac4 <_TrySendOverflowPacket+0x34>
 8000aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ab2:	1c59      	adds	r1, r3, #1
 8000ab4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8000ab6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000aba:	b2d2      	uxtb	r2, r2
 8000abc:	701a      	strb	r2, [r3, #0]
 8000abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac0:	09db      	lsrs	r3, r3, #7
 8000ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ac8:	d8f0      	bhi.n	8000aac <_TrySendOverflowPacket+0x1c>
 8000aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000acc:	1c5a      	adds	r2, r3, #1
 8000ace:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000ad0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ad2:	b2d2      	uxtb	r2, r2
 8000ad4:	701a      	strb	r2, [r3, #0]
 8000ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ad8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000ada:	4b25      	ldr	r3, [pc, #148]	; (8000b70 <_TrySendOverflowPacket+0xe0>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000ae0:	4b22      	ldr	r3, [pc, #136]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	1ad3      	subs	r3, r2, r3
 8000ae8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	623b      	str	r3, [r7, #32]
 8000af2:	e00b      	b.n	8000b0c <_TrySendOverflowPacket+0x7c>
 8000af4:	6a3b      	ldr	r3, [r7, #32]
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afa:	1c59      	adds	r1, r3, #1
 8000afc:	6279      	str	r1, [r7, #36]	; 0x24
 8000afe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000b02:	b2d2      	uxtb	r2, r2
 8000b04:	701a      	strb	r2, [r3, #0]
 8000b06:	6a3b      	ldr	r3, [r7, #32]
 8000b08:	09db      	lsrs	r3, r3, #7
 8000b0a:	623b      	str	r3, [r7, #32]
 8000b0c:	6a3b      	ldr	r3, [r7, #32]
 8000b0e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b10:	d8f0      	bhi.n	8000af4 <_TrySendOverflowPacket+0x64>
 8000b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b14:	1c5a      	adds	r2, r3, #1
 8000b16:	627a      	str	r2, [r7, #36]	; 0x24
 8000b18:	6a3a      	ldr	r2, [r7, #32]
 8000b1a:	b2d2      	uxtb	r2, r2
 8000b1c:	701a      	strb	r2, [r3, #0]
 8000b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b20:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8000b22:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b24:	785b      	ldrb	r3, [r3, #1]
 8000b26:	4618      	mov	r0, r3
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	69fa      	ldr	r2, [r7, #28]
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	461a      	mov	r2, r3
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	4619      	mov	r1, r3
 8000b34:	f7ff fb84 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d009      	beq.n	8000b56 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000b42:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	3b01      	subs	r3, #1
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b52:	701a      	strb	r2, [r3, #0]
 8000b54:	e004      	b.n	8000b60 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8000b56:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	4a03      	ldr	r2, [pc, #12]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b5e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8000b60:	693b      	ldr	r3, [r7, #16]
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3730      	adds	r7, #48	; 0x30
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000a90 	.word	0x20000a90
 8000b70:	e0001004 	.word	0xe0001004

08000b74 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8000b80:	4b98      	ldr	r3, [pc, #608]	; (8000de4 <_SendPacket+0x270>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d010      	beq.n	8000baa <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8000b88:	4b96      	ldr	r3, [pc, #600]	; (8000de4 <_SendPacket+0x270>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	f000 812d 	beq.w	8000dec <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8000b92:	4b94      	ldr	r3, [pc, #592]	; (8000de4 <_SendPacket+0x270>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d109      	bne.n	8000bae <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8000b9a:	f7ff ff79 	bl	8000a90 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8000b9e:	4b91      	ldr	r3, [pc, #580]	; (8000de4 <_SendPacket+0x270>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	f040 8124 	bne.w	8000df0 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8000ba8:	e001      	b.n	8000bae <_SendPacket+0x3a>
    goto Send;
 8000baa:	bf00      	nop
 8000bac:	e000      	b.n	8000bb0 <_SendPacket+0x3c>
Send:
 8000bae:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b1f      	cmp	r3, #31
 8000bb4:	d809      	bhi.n	8000bca <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8000bb6:	4b8b      	ldr	r3, [pc, #556]	; (8000de4 <_SendPacket+0x270>)
 8000bb8:	69da      	ldr	r2, [r3, #28]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8000bc0:	f003 0301 	and.w	r3, r3, #1
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	f040 8115 	bne.w	8000df4 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2b17      	cmp	r3, #23
 8000bce:	d807      	bhi.n	8000be0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	701a      	strb	r2, [r3, #0]
 8000bde:	e0c4      	b.n	8000d6a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8000be0:	68ba      	ldr	r2, [r7, #8]
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	2b7f      	cmp	r3, #127	; 0x7f
 8000bec:	d912      	bls.n	8000c14 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	09da      	lsrs	r2, r3, #7
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	3a01      	subs	r2, #1
 8000c06:	60fa      	str	r2, [r7, #12]
 8000c08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	701a      	strb	r2, [r3, #0]
 8000c12:	e006      	b.n	8000c22 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2b7e      	cmp	r3, #126	; 0x7e
 8000c26:	d807      	bhi.n	8000c38 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	701a      	strb	r2, [r3, #0]
 8000c36:	e098      	b.n	8000d6a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c3e:	d212      	bcs.n	8000c66 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	09da      	lsrs	r2, r3, #7
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	b2d2      	uxtb	r2, r2
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	3a01      	subs	r2, #1
 8000c58:	60fa      	str	r2, [r7, #12]
 8000c5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	701a      	strb	r2, [r3, #0]
 8000c64:	e081      	b.n	8000d6a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000c6c:	d21d      	bcs.n	8000caa <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	0b9a      	lsrs	r2, r3, #14
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	3b01      	subs	r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	09db      	lsrs	r3, r3, #7
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	68fa      	ldr	r2, [r7, #12]
 8000c86:	3a01      	subs	r2, #1
 8000c88:	60fa      	str	r2, [r7, #12]
 8000c8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	68fa      	ldr	r2, [r7, #12]
 8000c9a:	3a01      	subs	r2, #1
 8000c9c:	60fa      	str	r2, [r7, #12]
 8000c9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	701a      	strb	r2, [r3, #0]
 8000ca8:	e05f      	b.n	8000d6a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000cb0:	d228      	bcs.n	8000d04 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	0d5a      	lsrs	r2, r3, #21
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	b2d2      	uxtb	r2, r2
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	0b9b      	lsrs	r3, r3, #14
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	68fa      	ldr	r2, [r7, #12]
 8000cca:	3a01      	subs	r2, #1
 8000ccc:	60fa      	str	r2, [r7, #12]
 8000cce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	09db      	lsrs	r3, r3, #7
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	3a01      	subs	r2, #1
 8000ce2:	60fa      	str	r2, [r7, #12]
 8000ce4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	3a01      	subs	r2, #1
 8000cf6:	60fa      	str	r2, [r7, #12]
 8000cf8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	701a      	strb	r2, [r3, #0]
 8000d02:	e032      	b.n	8000d6a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	0f1a      	lsrs	r2, r3, #28
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	0d5b      	lsrs	r3, r3, #21
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	3a01      	subs	r2, #1
 8000d1e:	60fa      	str	r2, [r7, #12]
 8000d20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	0b9b      	lsrs	r3, r3, #14
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	68fa      	ldr	r2, [r7, #12]
 8000d32:	3a01      	subs	r2, #1
 8000d34:	60fa      	str	r2, [r7, #12]
 8000d36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	09db      	lsrs	r3, r3, #7
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	60fa      	str	r2, [r7, #12]
 8000d4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	3a01      	subs	r2, #1
 8000d5e:	60fa      	str	r2, [r7, #12]
 8000d60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000d6a:	4b1f      	ldr	r3, [pc, #124]	; (8000de8 <_SendPacket+0x274>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000d70:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <_SendPacket+0x270>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	623b      	str	r3, [r7, #32]
 8000d82:	e00b      	b.n	8000d9c <_SendPacket+0x228>
 8000d84:	6a3b      	ldr	r3, [r7, #32]
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8a:	1c59      	adds	r1, r3, #1
 8000d8c:	6279      	str	r1, [r7, #36]	; 0x24
 8000d8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	701a      	strb	r2, [r3, #0]
 8000d96:	6a3b      	ldr	r3, [r7, #32]
 8000d98:	09db      	lsrs	r3, r3, #7
 8000d9a:	623b      	str	r3, [r7, #32]
 8000d9c:	6a3b      	ldr	r3, [r7, #32]
 8000d9e:	2b7f      	cmp	r3, #127	; 0x7f
 8000da0:	d8f0      	bhi.n	8000d84 <_SendPacket+0x210>
 8000da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da4:	1c5a      	adds	r2, r3, #1
 8000da6:	627a      	str	r2, [r7, #36]	; 0x24
 8000da8:	6a3a      	ldr	r2, [r7, #32]
 8000daa:	b2d2      	uxtb	r2, r2
 8000dac:	701a      	strb	r2, [r3, #0]
 8000dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db0:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <_SendPacket+0x270>)
 8000db4:	785b      	ldrb	r3, [r3, #1]
 8000db6:	4618      	mov	r0, r3
 8000db8:	68ba      	ldr	r2, [r7, #8]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	68f9      	ldr	r1, [r7, #12]
 8000dc2:	f7ff fa3d 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000dc6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d003      	beq.n	8000dd6 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000dce:	4a05      	ldr	r2, [pc, #20]	; (8000de4 <_SendPacket+0x270>)
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	60d3      	str	r3, [r2, #12]
 8000dd4:	e00f      	b.n	8000df6 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8000dd6:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <_SendPacket+0x270>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4b01      	ldr	r3, [pc, #4]	; (8000de4 <_SendPacket+0x270>)
 8000de0:	701a      	strb	r2, [r3, #0]
 8000de2:	e008      	b.n	8000df6 <_SendPacket+0x282>
 8000de4:	20000a90 	.word	0x20000a90
 8000de8:	e0001004 	.word	0xe0001004
    goto SendDone;
 8000dec:	bf00      	nop
 8000dee:	e002      	b.n	8000df6 <_SendPacket+0x282>
      goto SendDone;
 8000df0:	bf00      	nop
 8000df2:	e000      	b.n	8000df6 <_SendPacket+0x282>
      goto SendDone;
 8000df4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <_SendPacket+0x2d4>)
 8000df8:	7e1b      	ldrb	r3, [r3, #24]
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4a13      	ldr	r2, [pc, #76]	; (8000e4c <_SendPacket+0x2d8>)
 8000dfe:	460b      	mov	r3, r1
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	440b      	add	r3, r1
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	4413      	add	r3, r2
 8000e08:	336c      	adds	r3, #108	; 0x6c
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <_SendPacket+0x2d4>)
 8000e0e:	7e1b      	ldrb	r3, [r3, #24]
 8000e10:	4618      	mov	r0, r3
 8000e12:	490e      	ldr	r1, [pc, #56]	; (8000e4c <_SendPacket+0x2d8>)
 8000e14:	4603      	mov	r3, r0
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	4403      	add	r3, r0
 8000e1a:	00db      	lsls	r3, r3, #3
 8000e1c:	440b      	add	r3, r1
 8000e1e:	3370      	adds	r3, #112	; 0x70
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d00b      	beq.n	8000e3e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8000e26:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <_SendPacket+0x2d4>)
 8000e28:	789b      	ldrb	r3, [r3, #2]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d107      	bne.n	8000e3e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <_SendPacket+0x2d4>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8000e34:	f7ff fdbc 	bl	80009b0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <_SendPacket+0x2d4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8000e3e:	bf00      	nop
 8000e40:	3728      	adds	r7, #40	; 0x28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000a90 	.word	0x20000a90
 8000e4c:	200001d0 	.word	0x200001d0

08000e50 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b0a2      	sub	sp, #136	; 0x88
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
#endif
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 8000e66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e68:	1c5a      	adds	r2, r3, #1
 8000e6a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 8000e72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d01d      	beq.n	8000eb6 <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 8000e7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000e7e:	2b25      	cmp	r3, #37	; 0x25
 8000e80:	d1f1      	bne.n	8000e66 <_VPrintHost+0x16>
      c = *p;
 8000e82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = (U32)(va_arg(*pParamList, int));
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	1d19      	adds	r1, r3, #4
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	6011      	str	r1, [r2, #0]
 8000e94:	6819      	ldr	r1, [r3, #0]
 8000e96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000e9a:	1c5a      	adds	r2, r3, #1
 8000e9c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8000ea0:	460a      	mov	r2, r1
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	3388      	adds	r3, #136	; 0x88
 8000ea6:	443b      	add	r3, r7
 8000ea8:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 8000eac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000eb0:	2b10      	cmp	r3, #16
 8000eb2:	d002      	beq.n	8000eba <_VPrintHost+0x6a>
    c = *p++;
 8000eb4:	e7d7      	b.n	8000e66 <_VPrintHost+0x16>
      break;
 8000eb6:	bf00      	nop
 8000eb8:	e000      	b.n	8000ebc <_VPrintHost+0x6c>
        break;
 8000eba:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 8000ebc:	f3ef 8311 	mrs	r3, BASEPRI
 8000ec0:	f04f 0120 	mov.w	r1, #32
 8000ec4:	f381 8811 	msr	BASEPRI, r1
 8000ec8:	65bb      	str	r3, [r7, #88]	; 0x58
 8000eca:	483f      	ldr	r0, [pc, #252]	; (8000fc8 <_VPrintHost+0x178>)
 8000ecc:	f7ff fd64 	bl	8000998 <_PreparePacket>
 8000ed0:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8000ed2:	2280      	movs	r2, #128	; 0x80
 8000ed4:	68f9      	ldr	r1, [r7, #12]
 8000ed6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000ed8:	f7ff fd2e 	bl	8000938 <_EncodeStr>
 8000edc:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 8000ede:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ee0:	677b      	str	r3, [r7, #116]	; 0x74
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	673b      	str	r3, [r7, #112]	; 0x70
 8000ee6:	e00b      	b.n	8000f00 <_VPrintHost+0xb0>
 8000ee8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000eee:	1c59      	adds	r1, r3, #1
 8000ef0:	6779      	str	r1, [r7, #116]	; 0x74
 8000ef2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	701a      	strb	r2, [r3, #0]
 8000efa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000efc:	09db      	lsrs	r3, r3, #7
 8000efe:	673b      	str	r3, [r7, #112]	; 0x70
 8000f00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f02:	2b7f      	cmp	r3, #127	; 0x7f
 8000f04:	d8f0      	bhi.n	8000ee8 <_VPrintHost+0x98>
 8000f06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f08:	1c5a      	adds	r2, r3, #1
 8000f0a:	677a      	str	r2, [r7, #116]	; 0x74
 8000f0c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	701a      	strb	r2, [r3, #0]
 8000f12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f14:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 8000f16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000f1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000f1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f20:	e00b      	b.n	8000f3a <_VPrintHost+0xea>
 8000f22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f28:	1c59      	adds	r1, r3, #1
 8000f2a:	66f9      	str	r1, [r7, #108]	; 0x6c
 8000f2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	701a      	strb	r2, [r3, #0]
 8000f34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f36:	09db      	lsrs	r3, r3, #7
 8000f38:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f3c:	2b7f      	cmp	r3, #127	; 0x7f
 8000f3e:	d8f0      	bhi.n	8000f22 <_VPrintHost+0xd2>
 8000f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f42:	1c5a      	adds	r2, r3, #1
 8000f44:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000f46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	701a      	strb	r2, [r3, #0]
 8000f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f4e:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8000f58:	e022      	b.n	8000fa0 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 8000f5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f5c:	667b      	str	r3, [r7, #100]	; 0x64
 8000f5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	663b      	str	r3, [r7, #96]	; 0x60
 8000f66:	e00b      	b.n	8000f80 <_VPrintHost+0x130>
 8000f68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f6e:	1c59      	adds	r1, r3, #1
 8000f70:	6679      	str	r1, [r7, #100]	; 0x64
 8000f72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	701a      	strb	r2, [r3, #0]
 8000f7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f7c:	09db      	lsrs	r3, r3, #7
 8000f7e:	663b      	str	r3, [r7, #96]	; 0x60
 8000f80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f82:	2b7f      	cmp	r3, #127	; 0x7f
 8000f84:	d8f0      	bhi.n	8000f68 <_VPrintHost+0x118>
 8000f86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f88:	1c5a      	adds	r2, r3, #1
 8000f8a:	667a      	str	r2, [r7, #100]	; 0x64
 8000f8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	701a      	strb	r2, [r3, #0]
 8000f92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f94:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 8000f96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f9a:	3304      	adds	r3, #4
 8000f9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8000fa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000fa4:	1e5a      	subs	r2, r3, #1
 8000fa6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d1d5      	bne.n	8000f5a <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8000fae:	221a      	movs	r2, #26
 8000fb0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000fb2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000fb4:	f7ff fdde 	bl	8000b74 <_SendPacket>
    RECORD_END();
 8000fb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000fba:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 8000fbe:	2300      	movs	r3, #0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3788      	adds	r7, #136	; 0x88
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000ac0 	.word	0x20000ac0

08000fcc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af02      	add	r7, sp, #8
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
 8000fd8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fe0:	4917      	ldr	r1, [pc, #92]	; (8001040 <SEGGER_SYSVIEW_Init+0x74>)
 8000fe2:	4818      	ldr	r0, [pc, #96]	; (8001044 <SEGGER_SYSVIEW_Init+0x78>)
 8000fe4:	f7ff fbd8 	bl	8000798 <SEGGER_RTT_AllocUpBuffer>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	4b16      	ldr	r3, [pc, #88]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8000fee:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8000ff2:	785a      	ldrb	r2, [r3, #1]
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8000ff6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8000ff8:	4b13      	ldr	r3, [pc, #76]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8000ffa:	7e1b      	ldrb	r3, [r3, #24]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	2300      	movs	r3, #0
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2308      	movs	r3, #8
 8001004:	4a11      	ldr	r2, [pc, #68]	; (800104c <SEGGER_SYSVIEW_Init+0x80>)
 8001006:	490f      	ldr	r1, [pc, #60]	; (8001044 <SEGGER_SYSVIEW_Init+0x78>)
 8001008:	f7ff fc4a 	bl	80008a0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <SEGGER_SYSVIEW_Init+0x84>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a0c      	ldr	r2, [pc, #48]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8001018:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800101a:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8001020:	4a09      	ldr	r2, [pc, #36]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8001026:	4a08      	ldr	r2, [pc, #32]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800102c:	4a06      	ldr	r2, [pc, #24]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8001032:	4b05      	ldr	r3, [pc, #20]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000688 	.word	0x20000688
 8001044:	08009544 	.word	0x08009544
 8001048:	20000a90 	.word	0x20000a90
 800104c:	20000a88 	.word	0x20000a88
 8001050:	e0001004 	.word	0xe0001004

08001054 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800105c:	4a04      	ldr	r2, [pc, #16]	; (8001070 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6113      	str	r3, [r2, #16]
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000a90 	.word	0x20000a90

08001074 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800107c:	f3ef 8311 	mrs	r3, BASEPRI
 8001080:	f04f 0120 	mov.w	r1, #32
 8001084:	f381 8811 	msr	BASEPRI, r1
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	4808      	ldr	r0, [pc, #32]	; (80010ac <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800108c:	f7ff fc84 	bl	8000998 <_PreparePacket>
 8001090:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	68b9      	ldr	r1, [r7, #8]
 8001096:	68b8      	ldr	r0, [r7, #8]
 8001098:	f7ff fd6c 	bl	8000b74 <_SendPacket>
  RECORD_END();
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f383 8811 	msr	BASEPRI, r3
}
 80010a2:	bf00      	nop
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000ac0 	.word	0x20000ac0

080010b0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80010ba:	f3ef 8311 	mrs	r3, BASEPRI
 80010be:	f04f 0120 	mov.w	r1, #32
 80010c2:	f381 8811 	msr	BASEPRI, r1
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	4816      	ldr	r0, [pc, #88]	; (8001124 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80010ca:	f7ff fc65 	bl	8000998 <_PreparePacket>
 80010ce:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	61fb      	str	r3, [r7, #28]
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	61bb      	str	r3, [r7, #24]
 80010dc:	e00b      	b.n	80010f6 <SEGGER_SYSVIEW_RecordU32+0x46>
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	1c59      	adds	r1, r3, #1
 80010e6:	61f9      	str	r1, [r7, #28]
 80010e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	701a      	strb	r2, [r3, #0]
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	09db      	lsrs	r3, r3, #7
 80010f4:	61bb      	str	r3, [r7, #24]
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	2b7f      	cmp	r3, #127	; 0x7f
 80010fa:	d8f0      	bhi.n	80010de <SEGGER_SYSVIEW_RecordU32+0x2e>
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	1c5a      	adds	r2, r3, #1
 8001100:	61fa      	str	r2, [r7, #28]
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	701a      	strb	r2, [r3, #0]
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	68f9      	ldr	r1, [r7, #12]
 8001110:	6938      	ldr	r0, [r7, #16]
 8001112:	f7ff fd2f 	bl	8000b74 <_SendPacket>
  RECORD_END();
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	f383 8811 	msr	BASEPRI, r3
}
 800111c:	bf00      	nop
 800111e:	3720      	adds	r7, #32
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000ac0 	.word	0x20000ac0

08001128 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b08c      	sub	sp, #48	; 0x30
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8001134:	f3ef 8311 	mrs	r3, BASEPRI
 8001138:	f04f 0120 	mov.w	r1, #32
 800113c:	f381 8811 	msr	BASEPRI, r1
 8001140:	61fb      	str	r3, [r7, #28]
 8001142:	4825      	ldr	r0, [pc, #148]	; (80011d8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8001144:	f7ff fc28 	bl	8000998 <_PreparePacket>
 8001148:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	62bb      	str	r3, [r7, #40]	; 0x28
 8001156:	e00b      	b.n	8001170 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8001158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115a:	b2da      	uxtb	r2, r3
 800115c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800115e:	1c59      	adds	r1, r3, #1
 8001160:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001162:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	701a      	strb	r2, [r3, #0]
 800116a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116c:	09db      	lsrs	r3, r3, #7
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001172:	2b7f      	cmp	r3, #127	; 0x7f
 8001174:	d8f0      	bhi.n	8001158 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8001176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001178:	1c5a      	adds	r2, r3, #1
 800117a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800117c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	701a      	strb	r2, [r3, #0]
 8001182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001184:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	623b      	str	r3, [r7, #32]
 800118e:	e00b      	b.n	80011a8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8001190:	6a3b      	ldr	r3, [r7, #32]
 8001192:	b2da      	uxtb	r2, r3
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	1c59      	adds	r1, r3, #1
 8001198:	6279      	str	r1, [r7, #36]	; 0x24
 800119a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	701a      	strb	r2, [r3, #0]
 80011a2:	6a3b      	ldr	r3, [r7, #32]
 80011a4:	09db      	lsrs	r3, r3, #7
 80011a6:	623b      	str	r3, [r7, #32]
 80011a8:	6a3b      	ldr	r3, [r7, #32]
 80011aa:	2b7f      	cmp	r3, #127	; 0x7f
 80011ac:	d8f0      	bhi.n	8001190 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	1c5a      	adds	r2, r3, #1
 80011b2:	627a      	str	r2, [r7, #36]	; 0x24
 80011b4:	6a3a      	ldr	r2, [r7, #32]
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	701a      	strb	r2, [r3, #0]
 80011ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011bc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	6979      	ldr	r1, [r7, #20]
 80011c2:	69b8      	ldr	r0, [r7, #24]
 80011c4:	f7ff fcd6 	bl	8000b74 <_SendPacket>
  RECORD_END();
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f383 8811 	msr	BASEPRI, r3
}
 80011ce:	bf00      	nop
 80011d0:	3730      	adds	r7, #48	; 0x30
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000ac0 	.word	0x20000ac0

080011dc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08c      	sub	sp, #48	; 0x30
 80011e0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80011e2:	4b58      	ldr	r3, [pc, #352]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80011e8:	f3ef 8311 	mrs	r3, BASEPRI
 80011ec:	f04f 0120 	mov.w	r1, #32
 80011f0:	f381 8811 	msr	BASEPRI, r1
 80011f4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80011f6:	4b53      	ldr	r3, [pc, #332]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 80011f8:	785b      	ldrb	r3, [r3, #1]
 80011fa:	220a      	movs	r2, #10
 80011fc:	4952      	ldr	r1, [pc, #328]	; (8001348 <SEGGER_SYSVIEW_Start+0x16c>)
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f81e 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800120a:	200a      	movs	r0, #10
 800120c:	f7ff ff32 	bl	8001074 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001210:	f3ef 8311 	mrs	r3, BASEPRI
 8001214:	f04f 0120 	mov.w	r1, #32
 8001218:	f381 8811 	msr	BASEPRI, r1
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	484b      	ldr	r0, [pc, #300]	; (800134c <SEGGER_SYSVIEW_Start+0x170>)
 8001220:	f7ff fbba 	bl	8000998 <_PreparePacket>
 8001224:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800122e:	4b45      	ldr	r3, [pc, #276]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28
 8001234:	e00b      	b.n	800124e <SEGGER_SYSVIEW_Start+0x72>
 8001236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001238:	b2da      	uxtb	r2, r3
 800123a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800123c:	1c59      	adds	r1, r3, #1
 800123e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001240:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	701a      	strb	r2, [r3, #0]
 8001248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800124a:	09db      	lsrs	r3, r3, #7
 800124c:	62bb      	str	r3, [r7, #40]	; 0x28
 800124e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001250:	2b7f      	cmp	r3, #127	; 0x7f
 8001252:	d8f0      	bhi.n	8001236 <SEGGER_SYSVIEW_Start+0x5a>
 8001254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001256:	1c5a      	adds	r2, r3, #1
 8001258:	62fa      	str	r2, [r7, #44]	; 0x2c
 800125a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	701a      	strb	r2, [r3, #0]
 8001260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001262:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
 8001268:	4b36      	ldr	r3, [pc, #216]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	623b      	str	r3, [r7, #32]
 800126e:	e00b      	b.n	8001288 <SEGGER_SYSVIEW_Start+0xac>
 8001270:	6a3b      	ldr	r3, [r7, #32]
 8001272:	b2da      	uxtb	r2, r3
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001276:	1c59      	adds	r1, r3, #1
 8001278:	6279      	str	r1, [r7, #36]	; 0x24
 800127a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800127e:	b2d2      	uxtb	r2, r2
 8001280:	701a      	strb	r2, [r3, #0]
 8001282:	6a3b      	ldr	r3, [r7, #32]
 8001284:	09db      	lsrs	r3, r3, #7
 8001286:	623b      	str	r3, [r7, #32]
 8001288:	6a3b      	ldr	r3, [r7, #32]
 800128a:	2b7f      	cmp	r3, #127	; 0x7f
 800128c:	d8f0      	bhi.n	8001270 <SEGGER_SYSVIEW_Start+0x94>
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	1c5a      	adds	r2, r3, #1
 8001292:	627a      	str	r2, [r7, #36]	; 0x24
 8001294:	6a3a      	ldr	r2, [r7, #32]
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	701a      	strb	r2, [r3, #0]
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	61fb      	str	r3, [r7, #28]
 80012a2:	4b28      	ldr	r3, [pc, #160]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 80012a4:	691b      	ldr	r3, [r3, #16]
 80012a6:	61bb      	str	r3, [r7, #24]
 80012a8:	e00b      	b.n	80012c2 <SEGGER_SYSVIEW_Start+0xe6>
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	1c59      	adds	r1, r3, #1
 80012b2:	61f9      	str	r1, [r7, #28]
 80012b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	701a      	strb	r2, [r3, #0]
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	09db      	lsrs	r3, r3, #7
 80012c0:	61bb      	str	r3, [r7, #24]
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	2b7f      	cmp	r3, #127	; 0x7f
 80012c6:	d8f0      	bhi.n	80012aa <SEGGER_SYSVIEW_Start+0xce>
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	1c5a      	adds	r2, r3, #1
 80012cc:	61fa      	str	r2, [r7, #28]
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	701a      	strb	r2, [r3, #0]
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	2300      	movs	r3, #0
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	e00b      	b.n	80012fa <SEGGER_SYSVIEW_Start+0x11e>
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	1c59      	adds	r1, r3, #1
 80012ea:	6179      	str	r1, [r7, #20]
 80012ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	701a      	strb	r2, [r3, #0]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	09db      	lsrs	r3, r3, #7
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	2b7f      	cmp	r3, #127	; 0x7f
 80012fe:	d8f0      	bhi.n	80012e2 <SEGGER_SYSVIEW_Start+0x106>
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	1c5a      	adds	r2, r3, #1
 8001304:	617a      	str	r2, [r7, #20]
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	701a      	strb	r2, [r3, #0]
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8001310:	2218      	movs	r2, #24
 8001312:	6839      	ldr	r1, [r7, #0]
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff fc2d 	bl	8000b74 <_SendPacket>
      RECORD_END();
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 8001322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001324:	2b00      	cmp	r3, #0
 8001326:	d002      	beq.n	800132e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 800132a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800132e:	f000 f9eb 	bl	8001708 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8001332:	f000 f9b1 	bl	8001698 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8001336:	f000 fb1f 	bl	8001978 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800133a:	bf00      	nop
 800133c:	3730      	adds	r7, #48	; 0x30
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000a90 	.word	0x20000a90
 8001348:	08009604 	.word	0x08009604
 800134c:	20000ac0 	.word	0x20000ac0

08001350 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8001356:	f3ef 8311 	mrs	r3, BASEPRI
 800135a:	f04f 0120 	mov.w	r1, #32
 800135e:	f381 8811 	msr	BASEPRI, r1
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	480b      	ldr	r0, [pc, #44]	; (8001394 <SEGGER_SYSVIEW_Stop+0x44>)
 8001366:	f7ff fb17 	bl	8000998 <_PreparePacket>
 800136a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800136c:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <SEGGER_SYSVIEW_Stop+0x48>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d007      	beq.n	8001384 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8001374:	220b      	movs	r2, #11
 8001376:	6839      	ldr	r1, [r7, #0]
 8001378:	6838      	ldr	r0, [r7, #0]
 800137a:	f7ff fbfb 	bl	8000b74 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <SEGGER_SYSVIEW_Stop+0x48>)
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f383 8811 	msr	BASEPRI, r3
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000ac0 	.word	0x20000ac0
 8001398:	20000a90 	.word	0x20000a90

0800139c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b08c      	sub	sp, #48	; 0x30
 80013a0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80013a2:	f3ef 8311 	mrs	r3, BASEPRI
 80013a6:	f04f 0120 	mov.w	r1, #32
 80013aa:	f381 8811 	msr	BASEPRI, r1
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	4845      	ldr	r0, [pc, #276]	; (80014c8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80013b2:	f7ff faf1 	bl	8000998 <_PreparePacket>
 80013b6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013c0:	4b42      	ldr	r3, [pc, #264]	; (80014cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80013c6:	e00b      	b.n	80013e0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80013c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ce:	1c59      	adds	r1, r3, #1
 80013d0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80013d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	701a      	strb	r2, [r3, #0]
 80013da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013dc:	09db      	lsrs	r3, r3, #7
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28
 80013e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e2:	2b7f      	cmp	r3, #127	; 0x7f
 80013e4:	d8f0      	bhi.n	80013c8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80013e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e8:	1c5a      	adds	r2, r3, #1
 80013ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80013ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	701a      	strb	r2, [r3, #0]
 80013f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
 80013fa:	4b34      	ldr	r3, [pc, #208]	; (80014cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	623b      	str	r3, [r7, #32]
 8001400:	e00b      	b.n	800141a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	b2da      	uxtb	r2, r3
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	1c59      	adds	r1, r3, #1
 800140a:	6279      	str	r1, [r7, #36]	; 0x24
 800140c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001410:	b2d2      	uxtb	r2, r2
 8001412:	701a      	strb	r2, [r3, #0]
 8001414:	6a3b      	ldr	r3, [r7, #32]
 8001416:	09db      	lsrs	r3, r3, #7
 8001418:	623b      	str	r3, [r7, #32]
 800141a:	6a3b      	ldr	r3, [r7, #32]
 800141c:	2b7f      	cmp	r3, #127	; 0x7f
 800141e:	d8f0      	bhi.n	8001402 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	1c5a      	adds	r2, r3, #1
 8001424:	627a      	str	r2, [r7, #36]	; 0x24
 8001426:	6a3a      	ldr	r2, [r7, #32]
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	701a      	strb	r2, [r3, #0]
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	61fb      	str	r3, [r7, #28]
 8001434:	4b25      	ldr	r3, [pc, #148]	; (80014cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	61bb      	str	r3, [r7, #24]
 800143a:	e00b      	b.n	8001454 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	b2da      	uxtb	r2, r3
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	1c59      	adds	r1, r3, #1
 8001444:	61f9      	str	r1, [r7, #28]
 8001446:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	701a      	strb	r2, [r3, #0]
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	09db      	lsrs	r3, r3, #7
 8001452:	61bb      	str	r3, [r7, #24]
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	2b7f      	cmp	r3, #127	; 0x7f
 8001458:	d8f0      	bhi.n	800143c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	1c5a      	adds	r2, r3, #1
 800145e:	61fa      	str	r2, [r7, #28]
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	701a      	strb	r2, [r3, #0]
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	617b      	str	r3, [r7, #20]
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	e00b      	b.n	800148c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	b2da      	uxtb	r2, r3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	1c59      	adds	r1, r3, #1
 800147c:	6179      	str	r1, [r7, #20]
 800147e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	701a      	strb	r2, [r3, #0]
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	09db      	lsrs	r3, r3, #7
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	2b7f      	cmp	r3, #127	; 0x7f
 8001490:	d8f0      	bhi.n	8001474 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	1c5a      	adds	r2, r3, #1
 8001496:	617a      	str	r2, [r7, #20]
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	701a      	strb	r2, [r3, #0]
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80014a2:	2218      	movs	r2, #24
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	68b8      	ldr	r0, [r7, #8]
 80014a8:	f7ff fb64 	bl	8000b74 <_SendPacket>
  RECORD_END();
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80014b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d002      	beq.n	80014c0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80014ba:	4b04      	ldr	r3, [pc, #16]	; (80014cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80014bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014be:	4798      	blx	r3
  }
}
 80014c0:	bf00      	nop
 80014c2:	3730      	adds	r7, #48	; 0x30
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000ac0 	.word	0x20000ac0
 80014cc:	20000a90 	.word	0x20000a90

080014d0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b092      	sub	sp, #72	; 0x48
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80014d8:	f3ef 8311 	mrs	r3, BASEPRI
 80014dc:	f04f 0120 	mov.w	r1, #32
 80014e0:	f381 8811 	msr	BASEPRI, r1
 80014e4:	617b      	str	r3, [r7, #20]
 80014e6:	486a      	ldr	r0, [pc, #424]	; (8001690 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80014e8:	f7ff fa56 	bl	8000998 <_PreparePacket>
 80014ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	647b      	str	r3, [r7, #68]	; 0x44
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	4b66      	ldr	r3, [pc, #408]	; (8001694 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	643b      	str	r3, [r7, #64]	; 0x40
 8001502:	e00b      	b.n	800151c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8001504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001506:	b2da      	uxtb	r2, r3
 8001508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800150a:	1c59      	adds	r1, r3, #1
 800150c:	6479      	str	r1, [r7, #68]	; 0x44
 800150e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	701a      	strb	r2, [r3, #0]
 8001516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001518:	09db      	lsrs	r3, r3, #7
 800151a:	643b      	str	r3, [r7, #64]	; 0x40
 800151c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800151e:	2b7f      	cmp	r3, #127	; 0x7f
 8001520:	d8f0      	bhi.n	8001504 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8001522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	647a      	str	r2, [r7, #68]	; 0x44
 8001528:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	701a      	strb	r2, [r3, #0]
 800152e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001530:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	63bb      	str	r3, [r7, #56]	; 0x38
 800153c:	e00b      	b.n	8001556 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800153e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001540:	b2da      	uxtb	r2, r3
 8001542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001544:	1c59      	adds	r1, r3, #1
 8001546:	63f9      	str	r1, [r7, #60]	; 0x3c
 8001548:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	701a      	strb	r2, [r3, #0]
 8001550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001552:	09db      	lsrs	r3, r3, #7
 8001554:	63bb      	str	r3, [r7, #56]	; 0x38
 8001556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001558:	2b7f      	cmp	r3, #127	; 0x7f
 800155a:	d8f0      	bhi.n	800153e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800155c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001562:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	701a      	strb	r2, [r3, #0]
 8001568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800156a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2220      	movs	r2, #32
 8001572:	4619      	mov	r1, r3
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	f7ff f9df 	bl	8000938 <_EncodeStr>
 800157a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800157c:	2209      	movs	r2, #9
 800157e:	68f9      	ldr	r1, [r7, #12]
 8001580:	6938      	ldr	r0, [r7, #16]
 8001582:	f7ff faf7 	bl	8000b74 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	637b      	str	r3, [r7, #52]	; 0x34
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	4b40      	ldr	r3, [pc, #256]	; (8001694 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	633b      	str	r3, [r7, #48]	; 0x30
 800159a:	e00b      	b.n	80015b4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800159c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015a2:	1c59      	adds	r1, r3, #1
 80015a4:	6379      	str	r1, [r7, #52]	; 0x34
 80015a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	701a      	strb	r2, [r3, #0]
 80015ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b0:	09db      	lsrs	r3, r3, #7
 80015b2:	633b      	str	r3, [r7, #48]	; 0x30
 80015b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b6:	2b7f      	cmp	r3, #127	; 0x7f
 80015b8:	d8f0      	bhi.n	800159c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80015ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015bc:	1c5a      	adds	r2, r3, #1
 80015be:	637a      	str	r2, [r7, #52]	; 0x34
 80015c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	701a      	strb	r2, [r3, #0]
 80015c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80015d4:	e00b      	b.n	80015ee <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80015d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015dc:	1c59      	adds	r1, r3, #1
 80015de:	62f9      	str	r1, [r7, #44]	; 0x2c
 80015e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	701a      	strb	r2, [r3, #0]
 80015e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ea:	09db      	lsrs	r3, r3, #7
 80015ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80015ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f0:	2b7f      	cmp	r3, #127	; 0x7f
 80015f2:	d8f0      	bhi.n	80015d6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80015f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f6:	1c5a      	adds	r2, r3, #1
 80015f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80015fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	701a      	strb	r2, [r3, #0]
 8001600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001602:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	623b      	str	r3, [r7, #32]
 800160e:	e00b      	b.n	8001628 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8001610:	6a3b      	ldr	r3, [r7, #32]
 8001612:	b2da      	uxtb	r2, r3
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	1c59      	adds	r1, r3, #1
 8001618:	6279      	str	r1, [r7, #36]	; 0x24
 800161a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	701a      	strb	r2, [r3, #0]
 8001622:	6a3b      	ldr	r3, [r7, #32]
 8001624:	09db      	lsrs	r3, r3, #7
 8001626:	623b      	str	r3, [r7, #32]
 8001628:	6a3b      	ldr	r3, [r7, #32]
 800162a:	2b7f      	cmp	r3, #127	; 0x7f
 800162c:	d8f0      	bhi.n	8001610 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	1c5a      	adds	r2, r3, #1
 8001632:	627a      	str	r2, [r7, #36]	; 0x24
 8001634:	6a3a      	ldr	r2, [r7, #32]
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	701a      	strb	r2, [r3, #0]
 800163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	61fb      	str	r3, [r7, #28]
 8001642:	2300      	movs	r3, #0
 8001644:	61bb      	str	r3, [r7, #24]
 8001646:	e00b      	b.n	8001660 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	b2da      	uxtb	r2, r3
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	1c59      	adds	r1, r3, #1
 8001650:	61f9      	str	r1, [r7, #28]
 8001652:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	701a      	strb	r2, [r3, #0]
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	09db      	lsrs	r3, r3, #7
 800165e:	61bb      	str	r3, [r7, #24]
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	2b7f      	cmp	r3, #127	; 0x7f
 8001664:	d8f0      	bhi.n	8001648 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	1c5a      	adds	r2, r3, #1
 800166a:	61fa      	str	r2, [r7, #28]
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	701a      	strb	r2, [r3, #0]
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8001676:	2215      	movs	r2, #21
 8001678:	68f9      	ldr	r1, [r7, #12]
 800167a:	6938      	ldr	r0, [r7, #16]
 800167c:	f7ff fa7a 	bl	8000b74 <_SendPacket>
  RECORD_END();
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	f383 8811 	msr	BASEPRI, r3
}
 8001686:	bf00      	nop
 8001688:	3748      	adds	r7, #72	; 0x48
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000ac0 	.word	0x20000ac0
 8001694:	20000a90 	.word	0x20000a90

08001698 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800169c:	4b07      	ldr	r3, [pc, #28]	; (80016bc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d008      	beq.n	80016b6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80016a4:	4b05      	ldr	r3, [pc, #20]	; (80016bc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80016ae:	4b03      	ldr	r3, [pc, #12]	; (80016bc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	4798      	blx	r3
  }
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000a90 	.word	0x20000a90

080016c0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80016c8:	f3ef 8311 	mrs	r3, BASEPRI
 80016cc:	f04f 0120 	mov.w	r1, #32
 80016d0:	f381 8811 	msr	BASEPRI, r1
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	480b      	ldr	r0, [pc, #44]	; (8001704 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80016d8:	f7ff f95e 	bl	8000998 <_PreparePacket>
 80016dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80016de:	2280      	movs	r2, #128	; 0x80
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	6938      	ldr	r0, [r7, #16]
 80016e4:	f7ff f928 	bl	8000938 <_EncodeStr>
 80016e8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80016ea:	220e      	movs	r2, #14
 80016ec:	68f9      	ldr	r1, [r7, #12]
 80016ee:	6938      	ldr	r0, [r7, #16]
 80016f0:	f7ff fa40 	bl	8000b74 <_SendPacket>
  RECORD_END();
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	f383 8811 	msr	BASEPRI, r3
}
 80016fa:	bf00      	nop
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000ac0 	.word	0x20000ac0

08001708 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d01a      	beq.n	800174c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8001716:	4b13      	ldr	r3, [pc, #76]	; (8001764 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d015      	beq.n	800174c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8001720:	4b10      	ldr	r3, [pc, #64]	; (8001764 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4798      	blx	r3
 8001728:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800172c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800172e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	000a      	movs	r2, r1
 800173c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800173e:	4613      	mov	r3, r2
 8001740:	461a      	mov	r2, r3
 8001742:	4621      	mov	r1, r4
 8001744:	200d      	movs	r0, #13
 8001746:	f7ff fcef 	bl	8001128 <SEGGER_SYSVIEW_RecordU32x2>
 800174a:	e006      	b.n	800175a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4619      	mov	r1, r3
 8001752:	200c      	movs	r0, #12
 8001754:	f7ff fcac 	bl	80010b0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8001758:	bf00      	nop
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	bd90      	pop	{r4, r7, pc}
 8001762:	bf00      	nop
 8001764:	20000a90 	.word	0x20000a90
 8001768:	e0001004 	.word	0xe0001004

0800176c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8001772:	f3ef 8311 	mrs	r3, BASEPRI
 8001776:	f04f 0120 	mov.w	r1, #32
 800177a:	f381 8811 	msr	BASEPRI, r1
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	4819      	ldr	r0, [pc, #100]	; (80017e8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8001782:	f7ff f909 	bl	8000998 <_PreparePacket>
 8001786:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800178c:	4b17      	ldr	r3, [pc, #92]	; (80017ec <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001794:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	617b      	str	r3, [r7, #20]
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	e00b      	b.n	80017b8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	1c59      	adds	r1, r3, #1
 80017a8:	6179      	str	r1, [r7, #20]
 80017aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	701a      	strb	r2, [r3, #0]
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	09db      	lsrs	r3, r3, #7
 80017b6:	613b      	str	r3, [r7, #16]
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	2b7f      	cmp	r3, #127	; 0x7f
 80017bc:	d8f0      	bhi.n	80017a0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	1c5a      	adds	r2, r3, #1
 80017c2:	617a      	str	r2, [r7, #20]
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	701a      	strb	r2, [r3, #0]
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80017ce:	2202      	movs	r2, #2
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	68b8      	ldr	r0, [r7, #8]
 80017d4:	f7ff f9ce 	bl	8000b74 <_SendPacket>
  RECORD_END();
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f383 8811 	msr	BASEPRI, r3
}
 80017de:	bf00      	nop
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000ac0 	.word	0x20000ac0
 80017ec:	e000ed04 	.word	0xe000ed04

080017f0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80017f6:	f3ef 8311 	mrs	r3, BASEPRI
 80017fa:	f04f 0120 	mov.w	r1, #32
 80017fe:	f381 8811 	msr	BASEPRI, r1
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	4807      	ldr	r0, [pc, #28]	; (8001824 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8001806:	f7ff f8c7 	bl	8000998 <_PreparePacket>
 800180a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800180c:	2203      	movs	r2, #3
 800180e:	6839      	ldr	r1, [r7, #0]
 8001810:	6838      	ldr	r0, [r7, #0]
 8001812:	f7ff f9af 	bl	8000b74 <_SendPacket>
  RECORD_END();
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f383 8811 	msr	BASEPRI, r3
}
 800181c:	bf00      	nop
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000ac0 	.word	0x20000ac0

08001828 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b08c      	sub	sp, #48	; 0x30
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8001832:	4b40      	ldr	r3, [pc, #256]	; (8001934 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d077      	beq.n	800192a <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800183a:	4b3e      	ldr	r3, [pc, #248]	; (8001934 <SEGGER_SYSVIEW_SendModule+0x10c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8001840:	2300      	movs	r3, #0
 8001842:	62bb      	str	r3, [r7, #40]	; 0x28
 8001844:	e008      	b.n	8001858 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8001846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184e:	2b00      	cmp	r3, #0
 8001850:	d007      	beq.n	8001862 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8001852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001854:	3301      	adds	r3, #1
 8001856:	62bb      	str	r3, [r7, #40]	; 0x28
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800185c:	429a      	cmp	r2, r3
 800185e:	d3f2      	bcc.n	8001846 <SEGGER_SYSVIEW_SendModule+0x1e>
 8001860:	e000      	b.n	8001864 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8001862:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8001864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001866:	2b00      	cmp	r3, #0
 8001868:	d055      	beq.n	8001916 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800186a:	f3ef 8311 	mrs	r3, BASEPRI
 800186e:	f04f 0120 	mov.w	r1, #32
 8001872:	f381 8811 	msr	BASEPRI, r1
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	482f      	ldr	r0, [pc, #188]	; (8001938 <SEGGER_SYSVIEW_SendModule+0x110>)
 800187a:	f7ff f88d 	bl	8000998 <_PreparePacket>
 800187e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	623b      	str	r3, [r7, #32]
 800188c:	e00b      	b.n	80018a6 <SEGGER_SYSVIEW_SendModule+0x7e>
 800188e:	6a3b      	ldr	r3, [r7, #32]
 8001890:	b2da      	uxtb	r2, r3
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	1c59      	adds	r1, r3, #1
 8001896:	6279      	str	r1, [r7, #36]	; 0x24
 8001898:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	701a      	strb	r2, [r3, #0]
 80018a0:	6a3b      	ldr	r3, [r7, #32]
 80018a2:	09db      	lsrs	r3, r3, #7
 80018a4:	623b      	str	r3, [r7, #32]
 80018a6:	6a3b      	ldr	r3, [r7, #32]
 80018a8:	2b7f      	cmp	r3, #127	; 0x7f
 80018aa:	d8f0      	bhi.n	800188e <SEGGER_SYSVIEW_SendModule+0x66>
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	1c5a      	adds	r2, r3, #1
 80018b0:	627a      	str	r2, [r7, #36]	; 0x24
 80018b2:	6a3a      	ldr	r2, [r7, #32]
 80018b4:	b2d2      	uxtb	r2, r2
 80018b6:	701a      	strb	r2, [r3, #0]
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	61fb      	str	r3, [r7, #28]
 80018c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	61bb      	str	r3, [r7, #24]
 80018c6:	e00b      	b.n	80018e0 <SEGGER_SYSVIEW_SendModule+0xb8>
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	1c59      	adds	r1, r3, #1
 80018d0:	61f9      	str	r1, [r7, #28]
 80018d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	701a      	strb	r2, [r3, #0]
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	09db      	lsrs	r3, r3, #7
 80018de:	61bb      	str	r3, [r7, #24]
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	2b7f      	cmp	r3, #127	; 0x7f
 80018e4:	d8f0      	bhi.n	80018c8 <SEGGER_SYSVIEW_SendModule+0xa0>
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	1c5a      	adds	r2, r3, #1
 80018ea:	61fa      	str	r2, [r7, #28]
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	701a      	strb	r2, [r3, #0]
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80018f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2280      	movs	r2, #128	; 0x80
 80018fc:	4619      	mov	r1, r3
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	f7ff f81a 	bl	8000938 <_EncodeStr>
 8001904:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8001906:	2216      	movs	r2, #22
 8001908:	68f9      	ldr	r1, [r7, #12]
 800190a:	6938      	ldr	r0, [r7, #16]
 800190c:	f7ff f932 	bl	8000b74 <_SendPacket>
      RECORD_END();
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8001916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001918:	2b00      	cmp	r3, #0
 800191a:	d006      	beq.n	800192a <SEGGER_SYSVIEW_SendModule+0x102>
 800191c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d002      	beq.n	800192a <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8001924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	4798      	blx	r3
    }
  }
}
 800192a:	bf00      	nop
 800192c:	3730      	adds	r7, #48	; 0x30
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000ab8 	.word	0x20000ab8
 8001938:	20000ac0 	.word	0x20000ac0

0800193c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8001942:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00f      	beq.n	800196a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800194a:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d002      	beq.n	800195e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f2      	bne.n	8001950 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20000ab8 	.word	0x20000ab8

08001978 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800197e:	f3ef 8311 	mrs	r3, BASEPRI
 8001982:	f04f 0120 	mov.w	r1, #32
 8001986:	f381 8811 	msr	BASEPRI, r1
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	4817      	ldr	r0, [pc, #92]	; (80019ec <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800198e:	f7ff f803 	bl	8000998 <_PreparePacket>
 8001992:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	e00b      	b.n	80019bc <SEGGER_SYSVIEW_SendNumModules+0x44>
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	1c59      	adds	r1, r3, #1
 80019ac:	6179      	str	r1, [r7, #20]
 80019ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	701a      	strb	r2, [r3, #0]
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	09db      	lsrs	r3, r3, #7
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	2b7f      	cmp	r3, #127	; 0x7f
 80019c0:	d8f0      	bhi.n	80019a4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	1c5a      	adds	r2, r3, #1
 80019c6:	617a      	str	r2, [r7, #20]
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	701a      	strb	r2, [r3, #0]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80019d2:	221b      	movs	r2, #27
 80019d4:	6879      	ldr	r1, [r7, #4]
 80019d6:	68b8      	ldr	r0, [r7, #8]
 80019d8:	f7ff f8cc 	bl	8000b74 <_SendPacket>
  RECORD_END();
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f383 8811 	msr	BASEPRI, r3
}
 80019e2:	bf00      	nop
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000ac0 	.word	0x20000ac0
 80019f0:	20000abc 	.word	0x20000abc

080019f4 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 80019f4:	b40f      	push	{r0, r1, r2, r3}
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	461a      	mov	r2, r3
 8001a06:	2100      	movs	r1, #0
 8001a08:	6938      	ldr	r0, [r7, #16]
 8001a0a:	f7ff fa21 	bl	8000e50 <_VPrintHost>
  va_end(ParamList);
#endif
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a18:	b004      	add	sp, #16
 8001a1a:	4770      	bx	lr

08001a1c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001a20:	4803      	ldr	r0, [pc, #12]	; (8001a30 <_cbSendSystemDesc+0x14>)
 8001a22:	f7ff fe4d 	bl	80016c0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001a26:	4803      	ldr	r0, [pc, #12]	; (8001a34 <_cbSendSystemDesc+0x18>)
 8001a28:	f7ff fe4a 	bl	80016c0 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	0800954c 	.word	0x0800954c
 8001a34:	08009580 	.word	0x08009580

08001a38 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <SEGGER_SYSVIEW_Conf+0x20>)
 8001a3e:	6818      	ldr	r0, [r3, #0]
 8001a40:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <SEGGER_SYSVIEW_Conf+0x20>)
 8001a42:	6819      	ldr	r1, [r3, #0]
 8001a44:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <SEGGER_SYSVIEW_Conf+0x24>)
 8001a46:	4a06      	ldr	r2, [pc, #24]	; (8001a60 <SEGGER_SYSVIEW_Conf+0x28>)
 8001a48:	f7ff fac0 	bl	8000fcc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001a4c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001a50:	f7ff fb00 	bl	8001054 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001a54:	bf00      	nop
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20000000 	.word	0x20000000
 8001a5c:	08001a1d 	.word	0x08001a1d
 8001a60:	08009610 	.word	0x08009610

08001a64 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	607b      	str	r3, [r7, #4]
 8001a6e:	e048      	b.n	8001b02 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8001a70:	4929      	ldr	r1, [pc, #164]	; (8001b18 <_cbSendTaskList+0xb4>)
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	4613      	mov	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f006 fabd 	bl	8008000 <uxTaskGetStackHighWaterMark>
 8001a86:	4601      	mov	r1, r0
 8001a88:	4823      	ldr	r0, [pc, #140]	; (8001b18 <_cbSendTaskList+0xb4>)
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4403      	add	r3, r0
 8001a96:	3310      	adds	r3, #16
 8001a98:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8001a9a:	491f      	ldr	r1, [pc, #124]	; (8001b18 <_cbSendTaskList+0xb4>)
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	440b      	add	r3, r1
 8001aa8:	6818      	ldr	r0, [r3, #0]
 8001aaa:	491b      	ldr	r1, [pc, #108]	; (8001b18 <_cbSendTaskList+0xb4>)
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	440b      	add	r3, r1
 8001ab8:	3304      	adds	r3, #4
 8001aba:	6819      	ldr	r1, [r3, #0]
 8001abc:	4c16      	ldr	r4, [pc, #88]	; (8001b18 <_cbSendTaskList+0xb4>)
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4423      	add	r3, r4
 8001aca:	3308      	adds	r3, #8
 8001acc:	681c      	ldr	r4, [r3, #0]
 8001ace:	4d12      	ldr	r5, [pc, #72]	; (8001b18 <_cbSendTaskList+0xb4>)
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	442b      	add	r3, r5
 8001adc:	330c      	adds	r3, #12
 8001ade:	681d      	ldr	r5, [r3, #0]
 8001ae0:	4e0d      	ldr	r6, [pc, #52]	; (8001b18 <_cbSendTaskList+0xb4>)
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4433      	add	r3, r6
 8001aee:	3310      	adds	r3, #16
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	462b      	mov	r3, r5
 8001af6:	4622      	mov	r2, r4
 8001af8:	f000 f855 	bl	8001ba6 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3301      	adds	r3, #1
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <_cbSendTaskList+0xb8>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d3b1      	bcc.n	8001a70 <_cbSendTaskList+0xc>
  }
}
 8001b0c:	bf00      	nop
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000ba4 	.word	0x20000ba4
 8001b1c:	20000c44 	.word	0x20000c44

08001b20 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001b28:	f005 ff52 	bl	80079d0 <xTaskGetTickCountFromISR>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2200      	movs	r2, #0
 8001b30:	469a      	mov	sl, r3
 8001b32:	4693      	mov	fp, r2
 8001b34:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001b38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	f04f 0a00 	mov.w	sl, #0
 8001b44:	f04f 0b00 	mov.w	fp, #0
 8001b48:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8001b4c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8001b50:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8001b54:	4652      	mov	r2, sl
 8001b56:	465b      	mov	r3, fp
 8001b58:	1a14      	subs	r4, r2, r0
 8001b5a:	eb63 0501 	sbc.w	r5, r3, r1
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	f04f 0300 	mov.w	r3, #0
 8001b66:	00ab      	lsls	r3, r5, #2
 8001b68:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8001b6c:	00a2      	lsls	r2, r4, #2
 8001b6e:	4614      	mov	r4, r2
 8001b70:	461d      	mov	r5, r3
 8001b72:	eb14 0800 	adds.w	r8, r4, r0
 8001b76:	eb45 0901 	adc.w	r9, r5, r1
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	f04f 0300 	mov.w	r3, #0
 8001b82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b8e:	4690      	mov	r8, r2
 8001b90:	4699      	mov	r9, r3
 8001b92:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8001b96:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001ba6 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b08a      	sub	sp, #40	; 0x28
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	60f8      	str	r0, [r7, #12]
 8001bae:	60b9      	str	r1, [r7, #8]
 8001bb0:	607a      	str	r2, [r7, #4]
 8001bb2:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	2214      	movs	r2, #20
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f007 fbe1 	bl	8009384 <memset>
  TaskInfo.TaskID     = TaskID;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001bd6:	f107 0314 	add.w	r3, r7, #20
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff fc78 	bl	80014d0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001be0:	bf00      	nop
 8001be2:	3728      	adds	r7, #40	; 0x28
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	db0b      	blt.n	8001c12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	f003 021f 	and.w	r2, r3, #31
 8001c00:	4907      	ldr	r1, [pc, #28]	; (8001c20 <__NVIC_EnableIRQ+0x38>)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	095b      	lsrs	r3, r3, #5
 8001c08:	2001      	movs	r0, #1
 8001c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	e000e100 	.word	0xe000e100

08001c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	6039      	str	r1, [r7, #0]
 8001c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	db0a      	blt.n	8001c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	490c      	ldr	r1, [pc, #48]	; (8001c70 <__NVIC_SetPriority+0x4c>)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	0112      	lsls	r2, r2, #4
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	440b      	add	r3, r1
 8001c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c4c:	e00a      	b.n	8001c64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	4908      	ldr	r1, [pc, #32]	; (8001c74 <__NVIC_SetPriority+0x50>)
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	3b04      	subs	r3, #4
 8001c5c:	0112      	lsls	r2, r2, #4
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	440b      	add	r3, r1
 8001c62:	761a      	strb	r2, [r3, #24]
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000e100 	.word	0xe000e100
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c7c:	f000 fdf1 	bl	8002862 <HAL_Init>

  /* USER CODE BEGIN Init */
  SEGGER_SYSVIEW_Conf();
 8001c80:	f7ff feda 	bl	8001a38 <SEGGER_SYSVIEW_Conf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c84:	f000 f850 	bl	8001d28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c88:	f000 f9c8 	bl	800201c <MX_GPIO_Init>
  MX_ETH_Init();
 8001c8c:	f000 f8be 	bl	8001e0c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001c90:	f000 f966 	bl	8001f60 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001c94:	f000 f994 	bl	8001fc0 <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 8001c98:	f000 f906 	bl	8001ea8 <MX_UART4_Init>
  MX_USART2_Init();
 8001c9c:	f000 f934 	bl	8001f08 <MX_USART2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001ca0:	f004 fa9c 	bl	80061dc <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of sendTimer */
  sendTimerHandle = osTimerNew(sendTimerEntry, osTimerPeriodic, NULL, &sendTimer_attributes);
 8001ca4:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <main+0x84>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2101      	movs	r1, #1
 8001caa:	4815      	ldr	r0, [pc, #84]	; (8001d00 <main+0x88>)
 8001cac:	f004 fbea 	bl	8006484 <osTimerNew>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	4a14      	ldr	r2, [pc, #80]	; (8001d04 <main+0x8c>)
 8001cb4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  osTimerStart(sendTimerHandle, 1000 / portTICK_PERIOD_MS);
 8001cb6:	4b13      	ldr	r3, [pc, #76]	; (8001d04 <main+0x8c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f004 fc64 	bl	800658c <osTimerStart>
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of uart2_BytesReceived */
  uart2_BytesReceivedHandle = osMessageQueueNew (16, sizeof(uint16_t), &uart2_BytesReceived_attributes);
 8001cc4:	4a10      	ldr	r2, [pc, #64]	; (8001d08 <main+0x90>)
 8001cc6:	2102      	movs	r1, #2
 8001cc8:	2010      	movs	r0, #16
 8001cca:	f004 fc9f 	bl	800660c <osMessageQueueNew>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	4a0e      	ldr	r2, [pc, #56]	; (8001d0c <main+0x94>)
 8001cd2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001cd4:	4a0e      	ldr	r2, [pc, #56]	; (8001d10 <main+0x98>)
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	480e      	ldr	r0, [pc, #56]	; (8001d14 <main+0x9c>)
 8001cda:	f004 fae9 	bl	80062b0 <osThreadNew>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	4a0d      	ldr	r2, [pc, #52]	; (8001d18 <main+0xa0>)
 8001ce2:	6013      	str	r3, [r2, #0]

  /* creation of uartPrintOutTas */
  uartPrintOutTasHandle = osThreadNew(uartPrintOutTask, NULL, &uartPrintOutTas_attributes);
 8001ce4:	4a0d      	ldr	r2, [pc, #52]	; (8001d1c <main+0xa4>)
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	480d      	ldr	r0, [pc, #52]	; (8001d20 <main+0xa8>)
 8001cea:	f004 fae1 	bl	80062b0 <osThreadNew>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	4a0c      	ldr	r2, [pc, #48]	; (8001d24 <main+0xac>)
 8001cf2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001cf4:	f004 faa6 	bl	8006244 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <main+0x80>
 8001cfa:	bf00      	nop
 8001cfc:	08009678 	.word	0x08009678
 8001d00:	0800226d 	.word	0x0800226d
 8001d04:	200013a4 	.word	0x200013a4
 8001d08:	08009660 	.word	0x08009660
 8001d0c:	200013a0 	.word	0x200013a0
 8001d10:	08009618 	.word	0x08009618
 8001d14:	08002229 	.word	0x08002229
 8001d18:	20001398 	.word	0x20001398
 8001d1c:	0800963c 	.word	0x0800963c
 8001d20:	08002239 	.word	0x08002239
 8001d24:	2000139c 	.word	0x2000139c

08001d28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b094      	sub	sp, #80	; 0x50
 8001d2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d2e:	f107 031c 	add.w	r3, r7, #28
 8001d32:	2234      	movs	r2, #52	; 0x34
 8001d34:	2100      	movs	r1, #0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f007 fb24 	bl	8009384 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d3c:	f107 0308 	add.w	r3, r7, #8
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001d4c:	f001 fd72 	bl	8003834 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d50:	4b2c      	ldr	r3, [pc, #176]	; (8001e04 <SystemClock_Config+0xdc>)
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	4a2b      	ldr	r2, [pc, #172]	; (8001e04 <SystemClock_Config+0xdc>)
 8001d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d5a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5c:	4b29      	ldr	r3, [pc, #164]	; (8001e04 <SystemClock_Config+0xdc>)
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d64:	607b      	str	r3, [r7, #4]
 8001d66:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001d68:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <SystemClock_Config+0xe0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d70:	4a25      	ldr	r2, [pc, #148]	; (8001e08 <SystemClock_Config+0xe0>)
 8001d72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d76:	6013      	str	r3, [r2, #0]
 8001d78:	4b23      	ldr	r3, [pc, #140]	; (8001e08 <SystemClock_Config+0xe0>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d80:	603b      	str	r3, [r7, #0]
 8001d82:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d84:	2301      	movs	r3, #1
 8001d86:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001d88:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001d8c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d96:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d98:	2304      	movs	r3, #4
 8001d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001d9c:	2360      	movs	r3, #96	; 0x60
 8001d9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001da0:	2302      	movs	r3, #2
 8001da2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001da4:	2304      	movs	r3, #4
 8001da6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001da8:	2302      	movs	r3, #2
 8001daa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dac:	f107 031c 	add.w	r3, r7, #28
 8001db0:	4618      	mov	r0, r3
 8001db2:	f001 fd9f 	bl	80038f4 <HAL_RCC_OscConfig>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001dbc:	f000 fa64 	bl	8002288 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001dc0:	f001 fd48 	bl	8003854 <HAL_PWREx_EnableOverDrive>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001dca:	f000 fa5d 	bl	8002288 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dce:	230f      	movs	r3, #15
 8001dd0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dde:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001de0:	2300      	movs	r3, #0
 8001de2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001de4:	f107 0308 	add.w	r3, r7, #8
 8001de8:	2103      	movs	r1, #3
 8001dea:	4618      	mov	r0, r3
 8001dec:	f002 f830 	bl	8003e50 <HAL_RCC_ClockConfig>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001df6:	f000 fa47 	bl	8002288 <Error_Handler>
  }
}
 8001dfa:	bf00      	nop
 8001dfc:	3750      	adds	r7, #80	; 0x50
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40007000 	.word	0x40007000

08001e0c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001e10:	4b1f      	ldr	r3, [pc, #124]	; (8001e90 <MX_ETH_Init+0x84>)
 8001e12:	4a20      	ldr	r2, [pc, #128]	; (8001e94 <MX_ETH_Init+0x88>)
 8001e14:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001e16:	4b20      	ldr	r3, [pc, #128]	; (8001e98 <MX_ETH_Init+0x8c>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001e1c:	4b1e      	ldr	r3, [pc, #120]	; (8001e98 <MX_ETH_Init+0x8c>)
 8001e1e:	2280      	movs	r2, #128	; 0x80
 8001e20:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001e22:	4b1d      	ldr	r3, [pc, #116]	; (8001e98 <MX_ETH_Init+0x8c>)
 8001e24:	22e1      	movs	r2, #225	; 0xe1
 8001e26:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001e28:	4b1b      	ldr	r3, [pc, #108]	; (8001e98 <MX_ETH_Init+0x8c>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001e2e:	4b1a      	ldr	r3, [pc, #104]	; (8001e98 <MX_ETH_Init+0x8c>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001e34:	4b18      	ldr	r3, [pc, #96]	; (8001e98 <MX_ETH_Init+0x8c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001e3a:	4b15      	ldr	r3, [pc, #84]	; (8001e90 <MX_ETH_Init+0x84>)
 8001e3c:	4a16      	ldr	r2, [pc, #88]	; (8001e98 <MX_ETH_Init+0x8c>)
 8001e3e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001e40:	4b13      	ldr	r3, [pc, #76]	; (8001e90 <MX_ETH_Init+0x84>)
 8001e42:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001e46:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001e48:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <MX_ETH_Init+0x84>)
 8001e4a:	4a14      	ldr	r2, [pc, #80]	; (8001e9c <MX_ETH_Init+0x90>)
 8001e4c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001e4e:	4b10      	ldr	r3, [pc, #64]	; (8001e90 <MX_ETH_Init+0x84>)
 8001e50:	4a13      	ldr	r2, [pc, #76]	; (8001ea0 <MX_ETH_Init+0x94>)
 8001e52:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001e54:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <MX_ETH_Init+0x84>)
 8001e56:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001e5a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001e5c:	480c      	ldr	r0, [pc, #48]	; (8001e90 <MX_ETH_Init+0x84>)
 8001e5e:	f000 feb5 	bl	8002bcc <HAL_ETH_Init>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001e68:	f000 fa0e 	bl	8002288 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001e6c:	2238      	movs	r2, #56	; 0x38
 8001e6e:	2100      	movs	r1, #0
 8001e70:	480c      	ldr	r0, [pc, #48]	; (8001ea4 <MX_ETH_Init+0x98>)
 8001e72:	f007 fa87 	bl	8009384 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001e76:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <MX_ETH_Init+0x98>)
 8001e78:	2221      	movs	r2, #33	; 0x21
 8001e7a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001e7c:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <MX_ETH_Init+0x98>)
 8001e7e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001e82:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001e84:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <MX_ETH_Init+0x98>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000c80 	.word	0x20000c80
 8001e94:	40028000 	.word	0x40028000
 8001e98:	200013ac 	.word	0x200013ac
 8001e9c:	20000114 	.word	0x20000114
 8001ea0:	20000074 	.word	0x20000074
 8001ea4:	20000c48 	.word	0x20000c48

08001ea8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001eac:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <MX_UART4_Init+0x58>)
 8001eae:	4a15      	ldr	r2, [pc, #84]	; (8001f04 <MX_UART4_Init+0x5c>)
 8001eb0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001eb2:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <MX_UART4_Init+0x58>)
 8001eb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001eb8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001eba:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <MX_UART4_Init+0x58>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001ec0:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <MX_UART4_Init+0x58>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <MX_UART4_Init+0x58>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <MX_UART4_Init+0x58>)
 8001ece:	220c      	movs	r2, #12
 8001ed0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <MX_UART4_Init+0x58>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed8:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <MX_UART4_Init+0x58>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ede:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <MX_UART4_Init+0x58>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <MX_UART4_Init+0x58>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001eea:	4805      	ldr	r0, [pc, #20]	; (8001f00 <MX_UART4_Init+0x58>)
 8001eec:	f002 fdfe 	bl	8004aec <HAL_UART_Init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001ef6:	f000 f9c7 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000d30 	.word	0x20000d30
 8001f04:	40004c00 	.word	0x40004c00

08001f08 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8001f0c:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <MX_USART2_Init+0x50>)
 8001f0e:	4a13      	ldr	r2, [pc, #76]	; (8001f5c <MX_USART2_Init+0x54>)
 8001f10:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 8001f12:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <MX_USART2_Init+0x50>)
 8001f14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f18:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8001f1a:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <MX_USART2_Init+0x50>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8001f20:	4b0d      	ldr	r3, [pc, #52]	; (8001f58 <MX_USART2_Init+0x50>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8001f26:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <MX_USART2_Init+0x50>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8001f2c:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <MX_USART2_Init+0x50>)
 8001f2e:	220c      	movs	r2, #12
 8001f30:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8001f32:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <MX_USART2_Init+0x50>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8001f38:	4b07      	ldr	r3, [pc, #28]	; (8001f58 <MX_USART2_Init+0x50>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001f3e:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <MX_USART2_Init+0x50>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8001f44:	4804      	ldr	r0, [pc, #16]	; (8001f58 <MX_USART2_Init+0x50>)
 8001f46:	f003 fa38 	bl	80053ba <HAL_USART_Init>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 8001f50:	f000 f99a 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20000db8 	.word	0x20000db8
 8001f5c:	40004400 	.word	0x40004400

08001f60 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f64:	4b14      	ldr	r3, [pc, #80]	; (8001fb8 <MX_USART3_UART_Init+0x58>)
 8001f66:	4a15      	ldr	r2, [pc, #84]	; (8001fbc <MX_USART3_UART_Init+0x5c>)
 8001f68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f6a:	4b13      	ldr	r3, [pc, #76]	; (8001fb8 <MX_USART3_UART_Init+0x58>)
 8001f6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f72:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <MX_USART3_UART_Init+0x58>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f78:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <MX_USART3_UART_Init+0x58>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f7e:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <MX_USART3_UART_Init+0x58>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f84:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <MX_USART3_UART_Init+0x58>)
 8001f86:	220c      	movs	r2, #12
 8001f88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f8a:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <MX_USART3_UART_Init+0x58>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f90:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <MX_USART3_UART_Init+0x58>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f96:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <MX_USART3_UART_Init+0x58>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <MX_USART3_UART_Init+0x58>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fa2:	4805      	ldr	r0, [pc, #20]	; (8001fb8 <MX_USART3_UART_Init+0x58>)
 8001fa4:	f002 fda2 	bl	8004aec <HAL_UART_Init>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001fae:	f000 f96b 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000e08 	.word	0x20000e08
 8001fbc:	40004800 	.word	0x40004800

08001fc0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001fc4:	4b14      	ldr	r3, [pc, #80]	; (8002018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fc6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001fca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001fcc:	4b12      	ldr	r3, [pc, #72]	; (8002018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fce:	2206      	movs	r2, #6
 8001fd0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001fd2:	4b11      	ldr	r3, [pc, #68]	; (8002018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001fd8:	4b0f      	ldr	r3, [pc, #60]	; (8002018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001fde:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001fe4:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001fea:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001ff0:	4b09      	ldr	r3, [pc, #36]	; (8002018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001ff6:	4b08      	ldr	r3, [pc, #32]	; (8002018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001ffc:	4b06      	ldr	r3, [pc, #24]	; (8002018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002002:	4805      	ldr	r0, [pc, #20]	; (8002018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002004:	f001 facd 	bl	80035a2 <HAL_PCD_Init>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800200e:	f000 f93b 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000e90 	.word	0x20000e90

0800201c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08c      	sub	sp, #48	; 0x30
 8002020:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002022:	f107 031c 	add.w	r3, r7, #28
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	609a      	str	r2, [r3, #8]
 800202e:	60da      	str	r2, [r3, #12]
 8002030:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002032:	4b47      	ldr	r3, [pc, #284]	; (8002150 <MX_GPIO_Init+0x134>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	4a46      	ldr	r2, [pc, #280]	; (8002150 <MX_GPIO_Init+0x134>)
 8002038:	f043 0304 	orr.w	r3, r3, #4
 800203c:	6313      	str	r3, [r2, #48]	; 0x30
 800203e:	4b44      	ldr	r3, [pc, #272]	; (8002150 <MX_GPIO_Init+0x134>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	f003 0304 	and.w	r3, r3, #4
 8002046:	61bb      	str	r3, [r7, #24]
 8002048:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800204a:	4b41      	ldr	r3, [pc, #260]	; (8002150 <MX_GPIO_Init+0x134>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4a40      	ldr	r2, [pc, #256]	; (8002150 <MX_GPIO_Init+0x134>)
 8002050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002054:	6313      	str	r3, [r2, #48]	; 0x30
 8002056:	4b3e      	ldr	r3, [pc, #248]	; (8002150 <MX_GPIO_Init+0x134>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800205e:	617b      	str	r3, [r7, #20]
 8002060:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002062:	4b3b      	ldr	r3, [pc, #236]	; (8002150 <MX_GPIO_Init+0x134>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	4a3a      	ldr	r2, [pc, #232]	; (8002150 <MX_GPIO_Init+0x134>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	6313      	str	r3, [r2, #48]	; 0x30
 800206e:	4b38      	ldr	r3, [pc, #224]	; (8002150 <MX_GPIO_Init+0x134>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	613b      	str	r3, [r7, #16]
 8002078:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800207a:	4b35      	ldr	r3, [pc, #212]	; (8002150 <MX_GPIO_Init+0x134>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	4a34      	ldr	r2, [pc, #208]	; (8002150 <MX_GPIO_Init+0x134>)
 8002080:	f043 0302 	orr.w	r3, r3, #2
 8002084:	6313      	str	r3, [r2, #48]	; 0x30
 8002086:	4b32      	ldr	r3, [pc, #200]	; (8002150 <MX_GPIO_Init+0x134>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002092:	4b2f      	ldr	r3, [pc, #188]	; (8002150 <MX_GPIO_Init+0x134>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	4a2e      	ldr	r2, [pc, #184]	; (8002150 <MX_GPIO_Init+0x134>)
 8002098:	f043 0308 	orr.w	r3, r3, #8
 800209c:	6313      	str	r3, [r2, #48]	; 0x30
 800209e:	4b2c      	ldr	r3, [pc, #176]	; (8002150 <MX_GPIO_Init+0x134>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	60bb      	str	r3, [r7, #8]
 80020a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80020aa:	4b29      	ldr	r3, [pc, #164]	; (8002150 <MX_GPIO_Init+0x134>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	4a28      	ldr	r2, [pc, #160]	; (8002150 <MX_GPIO_Init+0x134>)
 80020b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020b4:	6313      	str	r3, [r2, #48]	; 0x30
 80020b6:	4b26      	ldr	r3, [pc, #152]	; (8002150 <MX_GPIO_Init+0x134>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020be:	607b      	str	r3, [r7, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80020c2:	2200      	movs	r2, #0
 80020c4:	f244 0181 	movw	r1, #16513	; 0x4081
 80020c8:	4822      	ldr	r0, [pc, #136]	; (8002154 <MX_GPIO_Init+0x138>)
 80020ca:	f001 fa51 	bl	8003570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80020ce:	2200      	movs	r2, #0
 80020d0:	2140      	movs	r1, #64	; 0x40
 80020d2:	4821      	ldr	r0, [pc, #132]	; (8002158 <MX_GPIO_Init+0x13c>)
 80020d4:	f001 fa4c 	bl	8003570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80020d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80020e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80020e8:	f107 031c 	add.w	r3, r7, #28
 80020ec:	4619      	mov	r1, r3
 80020ee:	481b      	ldr	r0, [pc, #108]	; (800215c <MX_GPIO_Init+0x140>)
 80020f0:	f001 f892 	bl	8003218 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80020f4:	f244 0381 	movw	r3, #16513	; 0x4081
 80020f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020fa:	2301      	movs	r3, #1
 80020fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002102:	2300      	movs	r3, #0
 8002104:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002106:	f107 031c 	add.w	r3, r7, #28
 800210a:	4619      	mov	r1, r3
 800210c:	4811      	ldr	r0, [pc, #68]	; (8002154 <MX_GPIO_Init+0x138>)
 800210e:	f001 f883 	bl	8003218 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002112:	2340      	movs	r3, #64	; 0x40
 8002114:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002116:	2301      	movs	r3, #1
 8002118:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211e:	2300      	movs	r3, #0
 8002120:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002122:	f107 031c 	add.w	r3, r7, #28
 8002126:	4619      	mov	r1, r3
 8002128:	480b      	ldr	r0, [pc, #44]	; (8002158 <MX_GPIO_Init+0x13c>)
 800212a:	f001 f875 	bl	8003218 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800212e:	2380      	movs	r3, #128	; 0x80
 8002130:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002132:	2300      	movs	r3, #0
 8002134:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800213a:	f107 031c 	add.w	r3, r7, #28
 800213e:	4619      	mov	r1, r3
 8002140:	4805      	ldr	r0, [pc, #20]	; (8002158 <MX_GPIO_Init+0x13c>)
 8002142:	f001 f869 	bl	8003218 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002146:	bf00      	nop
 8002148:	3730      	adds	r7, #48	; 0x30
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40023800 	.word	0x40023800
 8002154:	40020400 	.word	0x40020400
 8002158:	40021800 	.word	0x40021800
 800215c:	40020800 	.word	0x40020800

08002160 <startReceiveInt>:

/* USER CODE BEGIN 4 */
void startReceiveInt( void )
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
	rxInProgress = true;
 8002164:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <startReceiveInt+0x34>)
 8002166:	2201      	movs	r2, #1
 8002168:	701a      	strb	r2, [r3, #0]
	USART2->CR3 |= USART_CR3_EIE;	//enable error interrupts
 800216a:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <startReceiveInt+0x38>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	4a0a      	ldr	r2, [pc, #40]	; (8002198 <startReceiveInt+0x38>)
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	6093      	str	r3, [r2, #8]
	USART2->CR1 |= (USART_CR1_UE | USART_CR1_RXNEIE);
 8002176:	4b08      	ldr	r3, [pc, #32]	; (8002198 <startReceiveInt+0x38>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a07      	ldr	r2, [pc, #28]	; (8002198 <startReceiveInt+0x38>)
 800217c:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8002180:	6013      	str	r3, [r2, #0]
	//all 4 bits are for preemption priority -
	NVIC_SetPriority(USART2_IRQn, 6);
 8002182:	2106      	movs	r1, #6
 8002184:	2026      	movs	r0, #38	; 0x26
 8002186:	f7ff fd4d 	bl	8001c24 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn);
 800218a:	2026      	movs	r0, #38	; 0x26
 800218c:	f7ff fd2c 	bl	8001be8 <__NVIC_EnableIRQ>
}
 8002190:	bf00      	nop
 8002192:	bd80      	pop	{r7, pc}
 8002194:	200013a8 	.word	0x200013a8
 8002198:	40004400 	.word	0x40004400

0800219c <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_USART_IRQHandler(&husart2);
 80021a2:	481c      	ldr	r0, [pc, #112]	; (8002214 <USART2_IRQHandler+0x78>)
 80021a4:	f003 f954 	bl	8005450 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 80021a8:	2300      	movs	r3, #0
 80021aa:	607b      	str	r3, [r7, #4]
	SEGGER_SYSVIEW_RecordEnterISR();
 80021ac:	f7ff fade 	bl	800176c <SEGGER_SYSVIEW_RecordEnterISR>

	//first check for errors
	if(	USART2->ISR & (	USART_ISR_ORE_Msk |
 80021b0:	4b19      	ldr	r3, [pc, #100]	; (8002218 <USART2_IRQHandler+0x7c>)
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	f003 030f 	and.w	r3, r3, #15
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d005      	beq.n	80021c8 <USART2_IRQHandler+0x2c>
						USART_ISR_NE_Msk |
						USART_ISR_FE_Msk |
						USART_ISR_PE_Msk ))
	{
		//clear error flags
		USART2->ICR |= (USART_ICR_FECF |
 80021bc:	4b16      	ldr	r3, [pc, #88]	; (8002218 <USART2_IRQHandler+0x7c>)
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	4a15      	ldr	r2, [pc, #84]	; (8002218 <USART2_IRQHandler+0x7c>)
 80021c2:	f043 030f 	orr.w	r3, r3, #15
 80021c6:	6213      	str	r3, [r2, #32]
						USART_ICR_PECF |
						USART_ICR_NCF |
						USART_ICR_ORECF);
	}

	if(	USART2->ISR & USART_ISR_RXNE_Msk)
 80021c8:	4b13      	ldr	r3, [pc, #76]	; (8002218 <USART2_IRQHandler+0x7c>)
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	f003 0320 	and.w	r3, r3, #32
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00e      	beq.n	80021f2 <USART2_IRQHandler+0x56>
	{
		//read the data register unconditionally to clear
		//the receive not empty interrupt if no reception is
		//in progress
		uint8_t tempVal = (uint8_t) USART2->RDR;
 80021d4:	4b10      	ldr	r3, [pc, #64]	; (8002218 <USART2_IRQHandler+0x7c>)
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	70fb      	strb	r3, [r7, #3]

		if(rxInProgress)
 80021dc:	4b0f      	ldr	r3, [pc, #60]	; (800221c <USART2_IRQHandler+0x80>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d006      	beq.n	80021f2 <USART2_IRQHandler+0x56>
		{
			xQueueSendFromISR(uart2_BytesReceivedHandle, &tempVal, &xHigherPriorityTaskWoken);
 80021e4:	4b0e      	ldr	r3, [pc, #56]	; (8002220 <USART2_IRQHandler+0x84>)
 80021e6:	6818      	ldr	r0, [r3, #0]
 80021e8:	1d3a      	adds	r2, r7, #4
 80021ea:	1cf9      	adds	r1, r7, #3
 80021ec:	2300      	movs	r3, #0
 80021ee:	f004 fdd3 	bl	8006d98 <xQueueGenericSendFromISR>
		}
	}
	SEGGER_SYSVIEW_RecordExitISR();
 80021f2:	f7ff fafd 	bl	80017f0 <SEGGER_SYSVIEW_RecordExitISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d007      	beq.n	800220c <USART2_IRQHandler+0x70>
 80021fc:	4b09      	ldr	r3, [pc, #36]	; (8002224 <USART2_IRQHandler+0x88>)
 80021fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	f3bf 8f4f 	dsb	sy
 8002208:	f3bf 8f6f 	isb	sy
  /* USER CODE END USART2_IRQn 1 */
}
 800220c:	bf00      	nop
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20000db8 	.word	0x20000db8
 8002218:	40004400 	.word	0x40004400
 800221c:	200013a8 	.word	0x200013a8
 8002220:	200013a0 	.word	0x200013a0
 8002224:	e000ed04 	.word	0xe000ed04

08002228 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002230:	2001      	movs	r0, #1
 8002232:	f004 f8e3 	bl	80063fc <osDelay>
 8002236:	e7fb      	b.n	8002230 <StartDefaultTask+0x8>

08002238 <uartPrintOutTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uartPrintOutTask */
void uartPrintOutTask(void *argument)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uartPrintOutTask */
  /* Infinite loop */
  char nextByte;
  startReceiveInt();
 8002240:	f7ff ff8e 	bl	8002160 <startReceiveInt>
  for(;;)
  {
    xQueueReceive(uart2_BytesReceivedHandle, &nextByte, portMAX_DELAY);
 8002244:	4b07      	ldr	r3, [pc, #28]	; (8002264 <uartPrintOutTask+0x2c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f107 010f 	add.w	r1, r7, #15
 800224c:	f04f 32ff 	mov.w	r2, #4294967295
 8002250:	4618      	mov	r0, r3
 8002252:	f004 fe41 	bl	8006ed8 <xQueueReceive>
    SEGGER_SYSVIEW_PrintfHost("%c", nextByte);
 8002256:	7bfb      	ldrb	r3, [r7, #15]
 8002258:	4619      	mov	r1, r3
 800225a:	4803      	ldr	r0, [pc, #12]	; (8002268 <uartPrintOutTask+0x30>)
 800225c:	f7ff fbca 	bl	80019f4 <SEGGER_SYSVIEW_PrintfHost>
    xQueueReceive(uart2_BytesReceivedHandle, &nextByte, portMAX_DELAY);
 8002260:	e7f0      	b.n	8002244 <uartPrintOutTask+0xc>
 8002262:	bf00      	nop
 8002264:	200013a0 	.word	0x200013a0
 8002268:	080095cc 	.word	0x080095cc

0800226c <sendTimerEntry>:
  /* USER CODE END uartPrintOutTask */
}

/* sendTimerEntry function */
void sendTimerEntry(void *argument)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sendTimerEntry */
	SEGGER_SYSVIEW_PrintfHost("timer");
 8002274:	4803      	ldr	r0, [pc, #12]	; (8002284 <sendTimerEntry+0x18>)
 8002276:	f7ff fbbd 	bl	80019f4 <SEGGER_SYSVIEW_PrintfHost>
  /* USER CODE END sendTimerEntry */
}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	080095d0 	.word	0x080095d0

08002288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800228c:	b672      	cpsid	i
}
 800228e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002290:	e7fe      	b.n	8002290 <Error_Handler+0x8>
	...

08002294 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800229a:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <HAL_MspInit+0x4c>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	4a10      	ldr	r2, [pc, #64]	; (80022e0 <HAL_MspInit+0x4c>)
 80022a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a4:	6413      	str	r3, [r2, #64]	; 0x40
 80022a6:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <HAL_MspInit+0x4c>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ae:	607b      	str	r3, [r7, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022b2:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <HAL_MspInit+0x4c>)
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b6:	4a0a      	ldr	r2, [pc, #40]	; (80022e0 <HAL_MspInit+0x4c>)
 80022b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022bc:	6453      	str	r3, [r2, #68]	; 0x44
 80022be:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <HAL_MspInit+0x4c>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022c6:	603b      	str	r3, [r7, #0]
 80022c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80022ca:	2200      	movs	r2, #0
 80022cc:	210f      	movs	r1, #15
 80022ce:	f06f 0001 	mvn.w	r0, #1
 80022d2:	f000 fc22 	bl	8002b1a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40023800 	.word	0x40023800

080022e4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b08e      	sub	sp, #56	; 0x38
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	605a      	str	r2, [r3, #4]
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	60da      	str	r2, [r3, #12]
 80022fa:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a4e      	ldr	r2, [pc, #312]	; (800243c <HAL_ETH_MspInit+0x158>)
 8002302:	4293      	cmp	r3, r2
 8002304:	f040 8096 	bne.w	8002434 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002308:	4b4d      	ldr	r3, [pc, #308]	; (8002440 <HAL_ETH_MspInit+0x15c>)
 800230a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230c:	4a4c      	ldr	r2, [pc, #304]	; (8002440 <HAL_ETH_MspInit+0x15c>)
 800230e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002312:	6313      	str	r3, [r2, #48]	; 0x30
 8002314:	4b4a      	ldr	r3, [pc, #296]	; (8002440 <HAL_ETH_MspInit+0x15c>)
 8002316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231c:	623b      	str	r3, [r7, #32]
 800231e:	6a3b      	ldr	r3, [r7, #32]
 8002320:	4b47      	ldr	r3, [pc, #284]	; (8002440 <HAL_ETH_MspInit+0x15c>)
 8002322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002324:	4a46      	ldr	r2, [pc, #280]	; (8002440 <HAL_ETH_MspInit+0x15c>)
 8002326:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800232a:	6313      	str	r3, [r2, #48]	; 0x30
 800232c:	4b44      	ldr	r3, [pc, #272]	; (8002440 <HAL_ETH_MspInit+0x15c>)
 800232e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002330:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002334:	61fb      	str	r3, [r7, #28]
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	4b41      	ldr	r3, [pc, #260]	; (8002440 <HAL_ETH_MspInit+0x15c>)
 800233a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233c:	4a40      	ldr	r2, [pc, #256]	; (8002440 <HAL_ETH_MspInit+0x15c>)
 800233e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002342:	6313      	str	r3, [r2, #48]	; 0x30
 8002344:	4b3e      	ldr	r3, [pc, #248]	; (8002440 <HAL_ETH_MspInit+0x15c>)
 8002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002348:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800234c:	61bb      	str	r3, [r7, #24]
 800234e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002350:	4b3b      	ldr	r3, [pc, #236]	; (8002440 <HAL_ETH_MspInit+0x15c>)
 8002352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002354:	4a3a      	ldr	r2, [pc, #232]	; (8002440 <HAL_ETH_MspInit+0x15c>)
 8002356:	f043 0304 	orr.w	r3, r3, #4
 800235a:	6313      	str	r3, [r2, #48]	; 0x30
 800235c:	4b38      	ldr	r3, [pc, #224]	; (8002440 <HAL_ETH_MspInit+0x15c>)
 800235e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	617b      	str	r3, [r7, #20]
 8002366:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002368:	4b35      	ldr	r3, [pc, #212]	; (8002440 <HAL_ETH_MspInit+0x15c>)
 800236a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236c:	4a34      	ldr	r2, [pc, #208]	; (8002440 <HAL_ETH_MspInit+0x15c>)
 800236e:	f043 0301 	orr.w	r3, r3, #1
 8002372:	6313      	str	r3, [r2, #48]	; 0x30
 8002374:	4b32      	ldr	r3, [pc, #200]	; (8002440 <HAL_ETH_MspInit+0x15c>)
 8002376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	613b      	str	r3, [r7, #16]
 800237e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002380:	4b2f      	ldr	r3, [pc, #188]	; (8002440 <HAL_ETH_MspInit+0x15c>)
 8002382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002384:	4a2e      	ldr	r2, [pc, #184]	; (8002440 <HAL_ETH_MspInit+0x15c>)
 8002386:	f043 0302 	orr.w	r3, r3, #2
 800238a:	6313      	str	r3, [r2, #48]	; 0x30
 800238c:	4b2c      	ldr	r3, [pc, #176]	; (8002440 <HAL_ETH_MspInit+0x15c>)
 800238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002398:	4b29      	ldr	r3, [pc, #164]	; (8002440 <HAL_ETH_MspInit+0x15c>)
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	4a28      	ldr	r2, [pc, #160]	; (8002440 <HAL_ETH_MspInit+0x15c>)
 800239e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023a2:	6313      	str	r3, [r2, #48]	; 0x30
 80023a4:	4b26      	ldr	r3, [pc, #152]	; (8002440 <HAL_ETH_MspInit+0x15c>)
 80023a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80023b0:	2332      	movs	r3, #50	; 0x32
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b4:	2302      	movs	r3, #2
 80023b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023bc:	2303      	movs	r3, #3
 80023be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023c0:	230b      	movs	r3, #11
 80023c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023c8:	4619      	mov	r1, r3
 80023ca:	481e      	ldr	r0, [pc, #120]	; (8002444 <HAL_ETH_MspInit+0x160>)
 80023cc:	f000 ff24 	bl	8003218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80023d0:	2386      	movs	r3, #134	; 0x86
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d4:	2302      	movs	r3, #2
 80023d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023dc:	2303      	movs	r3, #3
 80023de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023e0:	230b      	movs	r3, #11
 80023e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023e8:	4619      	mov	r1, r3
 80023ea:	4817      	ldr	r0, [pc, #92]	; (8002448 <HAL_ETH_MspInit+0x164>)
 80023ec:	f000 ff14 	bl	8003218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80023f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f6:	2302      	movs	r3, #2
 80023f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023fe:	2303      	movs	r3, #3
 8002400:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002402:	230b      	movs	r3, #11
 8002404:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800240a:	4619      	mov	r1, r3
 800240c:	480f      	ldr	r0, [pc, #60]	; (800244c <HAL_ETH_MspInit+0x168>)
 800240e:	f000 ff03 	bl	8003218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002412:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002418:	2302      	movs	r3, #2
 800241a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241c:	2300      	movs	r3, #0
 800241e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002420:	2303      	movs	r3, #3
 8002422:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002424:	230b      	movs	r3, #11
 8002426:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800242c:	4619      	mov	r1, r3
 800242e:	4808      	ldr	r0, [pc, #32]	; (8002450 <HAL_ETH_MspInit+0x16c>)
 8002430:	f000 fef2 	bl	8003218 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002434:	bf00      	nop
 8002436:	3738      	adds	r7, #56	; 0x38
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40028000 	.word	0x40028000
 8002440:	40023800 	.word	0x40023800
 8002444:	40020800 	.word	0x40020800
 8002448:	40020000 	.word	0x40020000
 800244c:	40020400 	.word	0x40020400
 8002450:	40021800 	.word	0x40021800

08002454 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b0b0      	sub	sp, #192	; 0xc0
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800245c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	60da      	str	r2, [r3, #12]
 800246a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800246c:	f107 031c 	add.w	r3, r7, #28
 8002470:	2290      	movs	r2, #144	; 0x90
 8002472:	2100      	movs	r1, #0
 8002474:	4618      	mov	r0, r3
 8002476:	f006 ff85 	bl	8009384 <memset>
  if(huart->Instance==UART4)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a43      	ldr	r2, [pc, #268]	; (800258c <HAL_UART_MspInit+0x138>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d13d      	bne.n	8002500 <HAL_UART_MspInit+0xac>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002484:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002488:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800248a:	2300      	movs	r3, #0
 800248c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800248e:	f107 031c 	add.w	r3, r7, #28
 8002492:	4618      	mov	r0, r3
 8002494:	f001 ff02 	bl	800429c <HAL_RCCEx_PeriphCLKConfig>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800249e:	f7ff fef3 	bl	8002288 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80024a2:	4b3b      	ldr	r3, [pc, #236]	; (8002590 <HAL_UART_MspInit+0x13c>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	4a3a      	ldr	r2, [pc, #232]	; (8002590 <HAL_UART_MspInit+0x13c>)
 80024a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80024ac:	6413      	str	r3, [r2, #64]	; 0x40
 80024ae:	4b38      	ldr	r3, [pc, #224]	; (8002590 <HAL_UART_MspInit+0x13c>)
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024b6:	61bb      	str	r3, [r7, #24]
 80024b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ba:	4b35      	ldr	r3, [pc, #212]	; (8002590 <HAL_UART_MspInit+0x13c>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	4a34      	ldr	r2, [pc, #208]	; (8002590 <HAL_UART_MspInit+0x13c>)
 80024c0:	f043 0304 	orr.w	r3, r3, #4
 80024c4:	6313      	str	r3, [r2, #48]	; 0x30
 80024c6:	4b32      	ldr	r3, [pc, #200]	; (8002590 <HAL_UART_MspInit+0x13c>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	f003 0304 	and.w	r3, r3, #4
 80024ce:	617b      	str	r3, [r7, #20]
 80024d0:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80024d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80024d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024da:	2302      	movs	r3, #2
 80024dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e6:	2303      	movs	r3, #3
 80024e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80024ec:	2308      	movs	r3, #8
 80024ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024f2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80024f6:	4619      	mov	r1, r3
 80024f8:	4826      	ldr	r0, [pc, #152]	; (8002594 <HAL_UART_MspInit+0x140>)
 80024fa:	f000 fe8d 	bl	8003218 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80024fe:	e041      	b.n	8002584 <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART3)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a24      	ldr	r2, [pc, #144]	; (8002598 <HAL_UART_MspInit+0x144>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d13c      	bne.n	8002584 <HAL_UART_MspInit+0x130>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800250a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800250e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002510:	2300      	movs	r3, #0
 8002512:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002514:	f107 031c 	add.w	r3, r7, #28
 8002518:	4618      	mov	r0, r3
 800251a:	f001 febf 	bl	800429c <HAL_RCCEx_PeriphCLKConfig>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8002524:	f7ff feb0 	bl	8002288 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002528:	4b19      	ldr	r3, [pc, #100]	; (8002590 <HAL_UART_MspInit+0x13c>)
 800252a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252c:	4a18      	ldr	r2, [pc, #96]	; (8002590 <HAL_UART_MspInit+0x13c>)
 800252e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002532:	6413      	str	r3, [r2, #64]	; 0x40
 8002534:	4b16      	ldr	r3, [pc, #88]	; (8002590 <HAL_UART_MspInit+0x13c>)
 8002536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002538:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800253c:	613b      	str	r3, [r7, #16]
 800253e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002540:	4b13      	ldr	r3, [pc, #76]	; (8002590 <HAL_UART_MspInit+0x13c>)
 8002542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002544:	4a12      	ldr	r2, [pc, #72]	; (8002590 <HAL_UART_MspInit+0x13c>)
 8002546:	f043 0308 	orr.w	r3, r3, #8
 800254a:	6313      	str	r3, [r2, #48]	; 0x30
 800254c:	4b10      	ldr	r3, [pc, #64]	; (8002590 <HAL_UART_MspInit+0x13c>)
 800254e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002550:	f003 0308 	and.w	r3, r3, #8
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002558:	f44f 7340 	mov.w	r3, #768	; 0x300
 800255c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002560:	2302      	movs	r3, #2
 8002562:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002566:	2300      	movs	r3, #0
 8002568:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800256c:	2303      	movs	r3, #3
 800256e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002572:	2307      	movs	r3, #7
 8002574:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002578:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800257c:	4619      	mov	r1, r3
 800257e:	4807      	ldr	r0, [pc, #28]	; (800259c <HAL_UART_MspInit+0x148>)
 8002580:	f000 fe4a 	bl	8003218 <HAL_GPIO_Init>
}
 8002584:	bf00      	nop
 8002586:	37c0      	adds	r7, #192	; 0xc0
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40004c00 	.word	0x40004c00
 8002590:	40023800 	.word	0x40023800
 8002594:	40020800 	.word	0x40020800
 8002598:	40004800 	.word	0x40004800
 800259c:	40020c00 	.word	0x40020c00

080025a0 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b0ae      	sub	sp, #184	; 0xb8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	605a      	str	r2, [r3, #4]
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	60da      	str	r2, [r3, #12]
 80025b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025b8:	f107 0314 	add.w	r3, r7, #20
 80025bc:	2290      	movs	r2, #144	; 0x90
 80025be:	2100      	movs	r1, #0
 80025c0:	4618      	mov	r0, r3
 80025c2:	f006 fedf 	bl	8009384 <memset>
  if(husart->Instance==USART2)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a35      	ldr	r2, [pc, #212]	; (80026a0 <HAL_USART_MspInit+0x100>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d163      	bne.n	8002698 <HAL_USART_MspInit+0xf8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80025d0:	2380      	movs	r3, #128	; 0x80
 80025d2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80025d4:	2300      	movs	r3, #0
 80025d6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025d8:	f107 0314 	add.w	r3, r7, #20
 80025dc:	4618      	mov	r0, r3
 80025de:	f001 fe5d 	bl	800429c <HAL_RCCEx_PeriphCLKConfig>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <HAL_USART_MspInit+0x4c>
    {
      Error_Handler();
 80025e8:	f7ff fe4e 	bl	8002288 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80025ec:	4b2d      	ldr	r3, [pc, #180]	; (80026a4 <HAL_USART_MspInit+0x104>)
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	4a2c      	ldr	r2, [pc, #176]	; (80026a4 <HAL_USART_MspInit+0x104>)
 80025f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025f6:	6413      	str	r3, [r2, #64]	; 0x40
 80025f8:	4b2a      	ldr	r3, [pc, #168]	; (80026a4 <HAL_USART_MspInit+0x104>)
 80025fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002604:	4b27      	ldr	r3, [pc, #156]	; (80026a4 <HAL_USART_MspInit+0x104>)
 8002606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002608:	4a26      	ldr	r2, [pc, #152]	; (80026a4 <HAL_USART_MspInit+0x104>)
 800260a:	f043 0301 	orr.w	r3, r3, #1
 800260e:	6313      	str	r3, [r2, #48]	; 0x30
 8002610:	4b24      	ldr	r3, [pc, #144]	; (80026a4 <HAL_USART_MspInit+0x104>)
 8002612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	60fb      	str	r3, [r7, #12]
 800261a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800261c:	4b21      	ldr	r3, [pc, #132]	; (80026a4 <HAL_USART_MspInit+0x104>)
 800261e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002620:	4a20      	ldr	r2, [pc, #128]	; (80026a4 <HAL_USART_MspInit+0x104>)
 8002622:	f043 0308 	orr.w	r3, r3, #8
 8002626:	6313      	str	r3, [r2, #48]	; 0x30
 8002628:	4b1e      	ldr	r3, [pc, #120]	; (80026a4 <HAL_USART_MspInit+0x104>)
 800262a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262c:	f003 0308 	and.w	r3, r3, #8
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA4     ------> USART2_CK
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002634:	2310      	movs	r3, #16
 8002636:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263a:	2302      	movs	r3, #2
 800263c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002646:	2303      	movs	r3, #3
 8002648:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800264c:	2307      	movs	r3, #7
 800264e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002652:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002656:	4619      	mov	r1, r3
 8002658:	4813      	ldr	r0, [pc, #76]	; (80026a8 <HAL_USART_MspInit+0x108>)
 800265a:	f000 fddd 	bl	8003218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800265e:	2360      	movs	r3, #96	; 0x60
 8002660:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002664:	2302      	movs	r3, #2
 8002666:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266a:	2300      	movs	r3, #0
 800266c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002670:	2303      	movs	r3, #3
 8002672:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002676:	2307      	movs	r3, #7
 8002678:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800267c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002680:	4619      	mov	r1, r3
 8002682:	480a      	ldr	r0, [pc, #40]	; (80026ac <HAL_USART_MspInit+0x10c>)
 8002684:	f000 fdc8 	bl	8003218 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002688:	2200      	movs	r2, #0
 800268a:	2105      	movs	r1, #5
 800268c:	2026      	movs	r0, #38	; 0x26
 800268e:	f000 fa44 	bl	8002b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002692:	2026      	movs	r0, #38	; 0x26
 8002694:	f000 fa5d 	bl	8002b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002698:	bf00      	nop
 800269a:	37b8      	adds	r7, #184	; 0xb8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40004400 	.word	0x40004400
 80026a4:	40023800 	.word	0x40023800
 80026a8:	40020000 	.word	0x40020000
 80026ac:	40020c00 	.word	0x40020c00

080026b0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b0ae      	sub	sp, #184	; 0xb8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	609a      	str	r2, [r3, #8]
 80026c4:	60da      	str	r2, [r3, #12]
 80026c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026c8:	f107 0314 	add.w	r3, r7, #20
 80026cc:	2290      	movs	r2, #144	; 0x90
 80026ce:	2100      	movs	r1, #0
 80026d0:	4618      	mov	r0, r3
 80026d2:	f006 fe57 	bl	8009384 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026de:	d159      	bne.n	8002794 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80026e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80026e4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026ec:	f107 0314 	add.w	r3, r7, #20
 80026f0:	4618      	mov	r0, r3
 80026f2:	f001 fdd3 	bl	800429c <HAL_RCCEx_PeriphCLKConfig>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80026fc:	f7ff fdc4 	bl	8002288 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002700:	4b26      	ldr	r3, [pc, #152]	; (800279c <HAL_PCD_MspInit+0xec>)
 8002702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002704:	4a25      	ldr	r2, [pc, #148]	; (800279c <HAL_PCD_MspInit+0xec>)
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	6313      	str	r3, [r2, #48]	; 0x30
 800270c:	4b23      	ldr	r3, [pc, #140]	; (800279c <HAL_PCD_MspInit+0xec>)
 800270e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	613b      	str	r3, [r7, #16]
 8002716:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002718:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800271c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002720:	2302      	movs	r3, #2
 8002722:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002726:	2300      	movs	r3, #0
 8002728:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800272c:	2303      	movs	r3, #3
 800272e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002732:	230a      	movs	r3, #10
 8002734:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002738:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800273c:	4619      	mov	r1, r3
 800273e:	4818      	ldr	r0, [pc, #96]	; (80027a0 <HAL_PCD_MspInit+0xf0>)
 8002740:	f000 fd6a 	bl	8003218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002744:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002748:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800274c:	2300      	movs	r3, #0
 800274e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002752:	2300      	movs	r3, #0
 8002754:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002758:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800275c:	4619      	mov	r1, r3
 800275e:	4810      	ldr	r0, [pc, #64]	; (80027a0 <HAL_PCD_MspInit+0xf0>)
 8002760:	f000 fd5a 	bl	8003218 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002764:	4b0d      	ldr	r3, [pc, #52]	; (800279c <HAL_PCD_MspInit+0xec>)
 8002766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002768:	4a0c      	ldr	r2, [pc, #48]	; (800279c <HAL_PCD_MspInit+0xec>)
 800276a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800276e:	6353      	str	r3, [r2, #52]	; 0x34
 8002770:	4b0a      	ldr	r3, [pc, #40]	; (800279c <HAL_PCD_MspInit+0xec>)
 8002772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	4b07      	ldr	r3, [pc, #28]	; (800279c <HAL_PCD_MspInit+0xec>)
 800277e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002780:	4a06      	ldr	r2, [pc, #24]	; (800279c <HAL_PCD_MspInit+0xec>)
 8002782:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002786:	6453      	str	r3, [r2, #68]	; 0x44
 8002788:	4b04      	ldr	r3, [pc, #16]	; (800279c <HAL_PCD_MspInit+0xec>)
 800278a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002790:	60bb      	str	r3, [r7, #8]
 8002792:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002794:	bf00      	nop
 8002796:	37b8      	adds	r7, #184	; 0xb8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40023800 	.word	0x40023800
 80027a0:	40020000 	.word	0x40020000

080027a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027a8:	e7fe      	b.n	80027a8 <NMI_Handler+0x4>

080027aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027aa:	b480      	push	{r7}
 80027ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027ae:	e7fe      	b.n	80027ae <HardFault_Handler+0x4>

080027b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027b4:	e7fe      	b.n	80027b4 <MemManage_Handler+0x4>

080027b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027b6:	b480      	push	{r7}
 80027b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027ba:	e7fe      	b.n	80027ba <BusFault_Handler+0x4>

080027bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027c0:	e7fe      	b.n	80027c0 <UsageFault_Handler+0x4>

080027c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027c2:	b480      	push	{r7}
 80027c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027c6:	bf00      	nop
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027d4:	f000 f882 	bl	80028dc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80027d8:	f005 fc84 	bl	80080e4 <xTaskGetSchedulerState>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d001      	beq.n	80027e6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80027e2:	f006 fb21 	bl	8008e28 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027f0:	4b06      	ldr	r3, [pc, #24]	; (800280c <SystemInit+0x20>)
 80027f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f6:	4a05      	ldr	r2, [pc, #20]	; (800280c <SystemInit+0x20>)
 80027f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002800:	bf00      	nop
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	e000ed00 	.word	0xe000ed00

08002810 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002810:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002848 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002814:	480d      	ldr	r0, [pc, #52]	; (800284c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002816:	490e      	ldr	r1, [pc, #56]	; (8002850 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002818:	4a0e      	ldr	r2, [pc, #56]	; (8002854 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800281a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800281c:	e002      	b.n	8002824 <LoopCopyDataInit>

0800281e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800281e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002822:	3304      	adds	r3, #4

08002824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002828:	d3f9      	bcc.n	800281e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800282a:	4a0b      	ldr	r2, [pc, #44]	; (8002858 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800282c:	4c0b      	ldr	r4, [pc, #44]	; (800285c <LoopFillZerobss+0x26>)
  movs r3, #0
 800282e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002830:	e001      	b.n	8002836 <LoopFillZerobss>

08002832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002834:	3204      	adds	r2, #4

08002836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002838:	d3fb      	bcc.n	8002832 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800283a:	f7ff ffd7 	bl	80027ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800283e:	f006 fd6d 	bl	800931c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002842:	f7ff fa19 	bl	8001c78 <main>
  bx  lr    
 8002846:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002848:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800284c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002850:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002854:	08009710 	.word	0x08009710
  ldr r2, =_sbss
 8002858:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 800285c:	20005dc8 	.word	0x20005dc8

08002860 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002860:	e7fe      	b.n	8002860 <ADC_IRQHandler>

08002862 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002866:	2003      	movs	r0, #3
 8002868:	f000 f94c 	bl	8002b04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800286c:	200f      	movs	r0, #15
 800286e:	f000 f805 	bl	800287c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002872:	f7ff fd0f 	bl	8002294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002884:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <HAL_InitTick+0x54>)
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <HAL_InitTick+0x58>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	4619      	mov	r1, r3
 800288e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002892:	fbb3 f3f1 	udiv	r3, r3, r1
 8002896:	fbb2 f3f3 	udiv	r3, r2, r3
 800289a:	4618      	mov	r0, r3
 800289c:	f000 f967 	bl	8002b6e <HAL_SYSTICK_Config>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e00e      	b.n	80028c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b0f      	cmp	r3, #15
 80028ae:	d80a      	bhi.n	80028c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028b0:	2200      	movs	r2, #0
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	f04f 30ff 	mov.w	r0, #4294967295
 80028b8:	f000 f92f 	bl	8002b1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028bc:	4a06      	ldr	r2, [pc, #24]	; (80028d8 <HAL_InitTick+0x5c>)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
 80028c4:	e000      	b.n	80028c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	20000000 	.word	0x20000000
 80028d4:	20000008 	.word	0x20000008
 80028d8:	20000004 	.word	0x20000004

080028dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028e0:	4b06      	ldr	r3, [pc, #24]	; (80028fc <HAL_IncTick+0x20>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	461a      	mov	r2, r3
 80028e6:	4b06      	ldr	r3, [pc, #24]	; (8002900 <HAL_IncTick+0x24>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4413      	add	r3, r2
 80028ec:	4a04      	ldr	r2, [pc, #16]	; (8002900 <HAL_IncTick+0x24>)
 80028ee:	6013      	str	r3, [r2, #0]
}
 80028f0:	bf00      	nop
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	20000008 	.word	0x20000008
 8002900:	200013b4 	.word	0x200013b4

08002904 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  return uwTick;
 8002908:	4b03      	ldr	r3, [pc, #12]	; (8002918 <HAL_GetTick+0x14>)
 800290a:	681b      	ldr	r3, [r3, #0]
}
 800290c:	4618      	mov	r0, r3
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	200013b4 	.word	0x200013b4

0800291c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002924:	f7ff ffee 	bl	8002904 <HAL_GetTick>
 8002928:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002934:	d005      	beq.n	8002942 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002936:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <HAL_Delay+0x44>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	461a      	mov	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4413      	add	r3, r2
 8002940:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002942:	bf00      	nop
 8002944:	f7ff ffde 	bl	8002904 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	429a      	cmp	r2, r3
 8002952:	d8f7      	bhi.n	8002944 <HAL_Delay+0x28>
  {
  }
}
 8002954:	bf00      	nop
 8002956:	bf00      	nop
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	20000008 	.word	0x20000008

08002964 <__NVIC_SetPriorityGrouping>:
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002974:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <__NVIC_SetPriorityGrouping+0x40>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002980:	4013      	ands	r3, r2
 8002982:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800298c:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <__NVIC_SetPriorityGrouping+0x44>)
 800298e:	4313      	orrs	r3, r2
 8002990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002992:	4a04      	ldr	r2, [pc, #16]	; (80029a4 <__NVIC_SetPriorityGrouping+0x40>)
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	60d3      	str	r3, [r2, #12]
}
 8002998:	bf00      	nop
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	e000ed00 	.word	0xe000ed00
 80029a8:	05fa0000 	.word	0x05fa0000

080029ac <__NVIC_GetPriorityGrouping>:
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029b0:	4b04      	ldr	r3, [pc, #16]	; (80029c4 <__NVIC_GetPriorityGrouping+0x18>)
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	0a1b      	lsrs	r3, r3, #8
 80029b6:	f003 0307 	and.w	r3, r3, #7
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	e000ed00 	.word	0xe000ed00

080029c8 <__NVIC_EnableIRQ>:
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	db0b      	blt.n	80029f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029da:	79fb      	ldrb	r3, [r7, #7]
 80029dc:	f003 021f 	and.w	r2, r3, #31
 80029e0:	4907      	ldr	r1, [pc, #28]	; (8002a00 <__NVIC_EnableIRQ+0x38>)
 80029e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e6:	095b      	lsrs	r3, r3, #5
 80029e8:	2001      	movs	r0, #1
 80029ea:	fa00 f202 	lsl.w	r2, r0, r2
 80029ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	e000e100 	.word	0xe000e100

08002a04 <__NVIC_SetPriority>:
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	6039      	str	r1, [r7, #0]
 8002a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	db0a      	blt.n	8002a2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	490c      	ldr	r1, [pc, #48]	; (8002a50 <__NVIC_SetPriority+0x4c>)
 8002a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a22:	0112      	lsls	r2, r2, #4
 8002a24:	b2d2      	uxtb	r2, r2
 8002a26:	440b      	add	r3, r1
 8002a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002a2c:	e00a      	b.n	8002a44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	4908      	ldr	r1, [pc, #32]	; (8002a54 <__NVIC_SetPriority+0x50>)
 8002a34:	79fb      	ldrb	r3, [r7, #7]
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	3b04      	subs	r3, #4
 8002a3c:	0112      	lsls	r2, r2, #4
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	440b      	add	r3, r1
 8002a42:	761a      	strb	r2, [r3, #24]
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	e000e100 	.word	0xe000e100
 8002a54:	e000ed00 	.word	0xe000ed00

08002a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b089      	sub	sp, #36	; 0x24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	f1c3 0307 	rsb	r3, r3, #7
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	bf28      	it	cs
 8002a76:	2304      	movcs	r3, #4
 8002a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	3304      	adds	r3, #4
 8002a7e:	2b06      	cmp	r3, #6
 8002a80:	d902      	bls.n	8002a88 <NVIC_EncodePriority+0x30>
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	3b03      	subs	r3, #3
 8002a86:	e000      	b.n	8002a8a <NVIC_EncodePriority+0x32>
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	43da      	mvns	r2, r3
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	401a      	ands	r2, r3
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aaa:	43d9      	mvns	r1, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab0:	4313      	orrs	r3, r2
         );
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3724      	adds	r7, #36	; 0x24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
	...

08002ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ad0:	d301      	bcc.n	8002ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e00f      	b.n	8002af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ad6:	4a0a      	ldr	r2, [pc, #40]	; (8002b00 <SysTick_Config+0x40>)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3b01      	subs	r3, #1
 8002adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ade:	210f      	movs	r1, #15
 8002ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae4:	f7ff ff8e 	bl	8002a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ae8:	4b05      	ldr	r3, [pc, #20]	; (8002b00 <SysTick_Config+0x40>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aee:	4b04      	ldr	r3, [pc, #16]	; (8002b00 <SysTick_Config+0x40>)
 8002af0:	2207      	movs	r2, #7
 8002af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	e000e010 	.word	0xe000e010

08002b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f7ff ff29 	bl	8002964 <__NVIC_SetPriorityGrouping>
}
 8002b12:	bf00      	nop
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b086      	sub	sp, #24
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	4603      	mov	r3, r0
 8002b22:	60b9      	str	r1, [r7, #8]
 8002b24:	607a      	str	r2, [r7, #4]
 8002b26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b2c:	f7ff ff3e 	bl	80029ac <__NVIC_GetPriorityGrouping>
 8002b30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	68b9      	ldr	r1, [r7, #8]
 8002b36:	6978      	ldr	r0, [r7, #20]
 8002b38:	f7ff ff8e 	bl	8002a58 <NVIC_EncodePriority>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b42:	4611      	mov	r1, r2
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff ff5d 	bl	8002a04 <__NVIC_SetPriority>
}
 8002b4a:	bf00      	nop
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b082      	sub	sp, #8
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	4603      	mov	r3, r0
 8002b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff ff31 	bl	80029c8 <__NVIC_EnableIRQ>
}
 8002b66:	bf00      	nop
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b082      	sub	sp, #8
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7ff ffa2 	bl	8002ac0 <SysTick_Config>
 8002b7c:	4603      	mov	r3, r0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d004      	beq.n	8002ba4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2280      	movs	r2, #128	; 0x80
 8002b9e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e00c      	b.n	8002bbe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2205      	movs	r2, #5
 8002ba8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 0201 	bic.w	r2, r2, #1
 8002bba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
	...

08002bcc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e06a      	b.n	8002cb4 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d106      	bne.n	8002bf6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2223      	movs	r2, #35	; 0x23
 8002bec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7ff fb77 	bl	80022e4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bf6:	4b31      	ldr	r3, [pc, #196]	; (8002cbc <HAL_ETH_Init+0xf0>)
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfa:	4a30      	ldr	r2, [pc, #192]	; (8002cbc <HAL_ETH_Init+0xf0>)
 8002bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c00:	6453      	str	r3, [r2, #68]	; 0x44
 8002c02:	4b2e      	ldr	r3, [pc, #184]	; (8002cbc <HAL_ETH_Init+0xf0>)
 8002c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c0a:	60bb      	str	r3, [r7, #8]
 8002c0c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002c0e:	4b2c      	ldr	r3, [pc, #176]	; (8002cc0 <HAL_ETH_Init+0xf4>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	4a2b      	ldr	r2, [pc, #172]	; (8002cc0 <HAL_ETH_Init+0xf4>)
 8002c14:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c18:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002c1a:	4b29      	ldr	r3, [pc, #164]	; (8002cc0 <HAL_ETH_Init+0xf4>)
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	4927      	ldr	r1, [pc, #156]	; (8002cc0 <HAL_ETH_Init+0xf4>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002c28:	4b25      	ldr	r3, [pc, #148]	; (8002cc0 <HAL_ETH_Init+0xf4>)
 8002c2a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6812      	ldr	r2, [r2, #0]
 8002c3a:	f043 0301 	orr.w	r3, r3, #1
 8002c3e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002c42:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c44:	f7ff fe5e 	bl	8002904 <HAL_GetTick>
 8002c48:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002c4a:	e011      	b.n	8002c70 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002c4c:	f7ff fe5a 	bl	8002904 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c5a:	d909      	bls.n	8002c70 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2204      	movs	r2, #4
 8002c60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	22e0      	movs	r2, #224	; 0xe0
 8002c68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e021      	b.n	8002cb4 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1e4      	bne.n	8002c4c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f958 	bl	8002f38 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 f9ff 	bl	800308c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 fa55 	bl	800313e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f9bd 	bl	800301c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2210      	movs	r2, #16
 8002cae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	40013800 	.word	0x40013800

08002cc4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	4b51      	ldr	r3, [pc, #324]	; (8002e20 <ETH_SetMACConfig+0x15c>)
 8002cda:	4013      	ands	r3, r2
 8002cdc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	7c1b      	ldrb	r3, [r3, #16]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d102      	bne.n	8002cec <ETH_SetMACConfig+0x28>
 8002ce6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002cea:	e000      	b.n	8002cee <ETH_SetMACConfig+0x2a>
 8002cec:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	7c5b      	ldrb	r3, [r3, #17]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d102      	bne.n	8002cfc <ETH_SetMACConfig+0x38>
 8002cf6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002cfa:	e000      	b.n	8002cfe <ETH_SetMACConfig+0x3a>
 8002cfc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002cfe:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002d04:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	7fdb      	ldrb	r3, [r3, #31]
 8002d0a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002d0c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002d12:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	7f92      	ldrb	r2, [r2, #30]
 8002d18:	2a00      	cmp	r2, #0
 8002d1a:	d102      	bne.n	8002d22 <ETH_SetMACConfig+0x5e>
 8002d1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d20:	e000      	b.n	8002d24 <ETH_SetMACConfig+0x60>
 8002d22:	2200      	movs	r2, #0
                        macconf->Speed |
 8002d24:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	7f1b      	ldrb	r3, [r3, #28]
 8002d2a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002d2c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002d32:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	791b      	ldrb	r3, [r3, #4]
 8002d38:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002d3a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002d42:	2a00      	cmp	r2, #0
 8002d44:	d102      	bne.n	8002d4c <ETH_SetMACConfig+0x88>
 8002d46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d4a:	e000      	b.n	8002d4e <ETH_SetMACConfig+0x8a>
 8002d4c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002d4e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	7bdb      	ldrb	r3, [r3, #15]
 8002d54:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002d56:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002d5c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d64:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002d66:	4313      	orrs	r3, r2
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d7e:	2001      	movs	r0, #1
 8002d80:	f7ff fdcc 	bl	800291c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002da2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002daa:	2a00      	cmp	r2, #0
 8002dac:	d101      	bne.n	8002db2 <ETH_SetMACConfig+0xee>
 8002dae:	2280      	movs	r2, #128	; 0x80
 8002db0:	e000      	b.n	8002db4 <ETH_SetMACConfig+0xf0>
 8002db2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002db4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002dba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002dc2:	2a01      	cmp	r2, #1
 8002dc4:	d101      	bne.n	8002dca <ETH_SetMACConfig+0x106>
 8002dc6:	2208      	movs	r2, #8
 8002dc8:	e000      	b.n	8002dcc <ETH_SetMACConfig+0x108>
 8002dca:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002dcc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002dd4:	2a01      	cmp	r2, #1
 8002dd6:	d101      	bne.n	8002ddc <ETH_SetMACConfig+0x118>
 8002dd8:	2204      	movs	r2, #4
 8002dda:	e000      	b.n	8002dde <ETH_SetMACConfig+0x11a>
 8002ddc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002dde:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002de6:	2a01      	cmp	r2, #1
 8002de8:	d101      	bne.n	8002dee <ETH_SetMACConfig+0x12a>
 8002dea:	2202      	movs	r2, #2
 8002dec:	e000      	b.n	8002df0 <ETH_SetMACConfig+0x12c>
 8002dee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002df0:	4313      	orrs	r3, r2
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e08:	2001      	movs	r0, #1
 8002e0a:	f7ff fd87 	bl	800291c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	619a      	str	r2, [r3, #24]
}
 8002e16:	bf00      	nop
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	ff20810f 	.word	0xff20810f

08002e24 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	4b3d      	ldr	r3, [pc, #244]	; (8002f34 <ETH_SetDMAConfig+0x110>)
 8002e3e:	4013      	ands	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	7b1b      	ldrb	r3, [r3, #12]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d102      	bne.n	8002e50 <ETH_SetDMAConfig+0x2c>
 8002e4a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002e4e:	e000      	b.n	8002e52 <ETH_SetDMAConfig+0x2e>
 8002e50:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	7b5b      	ldrb	r3, [r3, #13]
 8002e56:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002e58:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	7f52      	ldrb	r2, [r2, #29]
 8002e5e:	2a00      	cmp	r2, #0
 8002e60:	d102      	bne.n	8002e68 <ETH_SetDMAConfig+0x44>
 8002e62:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e66:	e000      	b.n	8002e6a <ETH_SetDMAConfig+0x46>
 8002e68:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002e6a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	7b9b      	ldrb	r3, [r3, #14]
 8002e70:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002e72:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002e78:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	7f1b      	ldrb	r3, [r3, #28]
 8002e7e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002e80:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	7f9b      	ldrb	r3, [r3, #30]
 8002e86:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002e88:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002e8e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e96:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002eba:	2001      	movs	r0, #1
 8002ebc:	f7ff fd2e 	bl	800291c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ec8:	461a      	mov	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	791b      	ldrb	r3, [r3, #4]
 8002ed2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ed8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002ede:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002ee4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002eec:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002eee:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002ef6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002efc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6812      	ldr	r2, [r2, #0]
 8002f02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f0a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f18:	2001      	movs	r0, #1
 8002f1a:	f7ff fcff 	bl	800291c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f26:	461a      	mov	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6013      	str	r3, [r2, #0]
}
 8002f2c:	bf00      	nop
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	f8de3f23 	.word	0xf8de3f23

08002f38 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b0a6      	sub	sp, #152	; 0x98
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002f40:	2301      	movs	r3, #1
 8002f42:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002f46:	2301      	movs	r3, #1
 8002f48:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002f50:	2300      	movs	r3, #0
 8002f52:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002f56:	2301      	movs	r3, #1
 8002f58:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002f62:	2301      	movs	r3, #1
 8002f64:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002f74:	2300      	movs	r3, #0
 8002f76:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002f82:	2300      	movs	r3, #0
 8002f84:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002f94:	2300      	movs	r3, #0
 8002f96:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002f9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f9e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002fa0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002fac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7ff fe86 	bl	8002cc4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002fe8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fec:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002fee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ff2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002ff4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ff8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003000:	2300      	movs	r3, #0
 8003002:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003004:	2300      	movs	r3, #0
 8003006:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003008:	f107 0308 	add.w	r3, r7, #8
 800300c:	4619      	mov	r1, r3
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7ff ff08 	bl	8002e24 <ETH_SetDMAConfig>
}
 8003014:	bf00      	nop
 8003016:	3798      	adds	r7, #152	; 0x98
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800301c:	b480      	push	{r7}
 800301e:	b087      	sub	sp, #28
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3305      	adds	r3, #5
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	021b      	lsls	r3, r3, #8
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	3204      	adds	r2, #4
 8003034:	7812      	ldrb	r2, [r2, #0]
 8003036:	4313      	orrs	r3, r2
 8003038:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	4b11      	ldr	r3, [pc, #68]	; (8003084 <ETH_MACAddressConfig+0x68>)
 800303e:	4413      	add	r3, r2
 8003040:	461a      	mov	r2, r3
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	3303      	adds	r3, #3
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	061a      	lsls	r2, r3, #24
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	3302      	adds	r3, #2
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	041b      	lsls	r3, r3, #16
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3301      	adds	r3, #1
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	021b      	lsls	r3, r3, #8
 8003060:	4313      	orrs	r3, r2
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	7812      	ldrb	r2, [r2, #0]
 8003066:	4313      	orrs	r3, r2
 8003068:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	4b06      	ldr	r3, [pc, #24]	; (8003088 <ETH_MACAddressConfig+0x6c>)
 800306e:	4413      	add	r3, r2
 8003070:	461a      	mov	r2, r3
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	6013      	str	r3, [r2, #0]
}
 8003076:	bf00      	nop
 8003078:	371c      	adds	r7, #28
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	40028040 	.word	0x40028040
 8003088:	40028044 	.word	0x40028044

0800308c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003094:	2300      	movs	r3, #0
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	e03e      	b.n	8003118 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68d9      	ldr	r1, [r3, #12]
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	4613      	mov	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	440b      	add	r3, r1
 80030aa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2200      	movs	r2, #0
 80030b6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	2200      	movs	r2, #0
 80030bc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2200      	movs	r2, #0
 80030c2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80030c4:	68b9      	ldr	r1, [r7, #8]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	3206      	adds	r2, #6
 80030cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d80c      	bhi.n	80030fc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68d9      	ldr	r1, [r3, #12]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	4613      	mov	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	440b      	add	r3, r1
 80030f4:	461a      	mov	r2, r3
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	60da      	str	r2, [r3, #12]
 80030fa:	e004      	b.n	8003106 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	461a      	mov	r2, r3
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	3301      	adds	r3, #1
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2b03      	cmp	r3, #3
 800311c:	d9bd      	bls.n	800309a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68da      	ldr	r2, [r3, #12]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003130:	611a      	str	r2, [r3, #16]
}
 8003132:	bf00      	nop
 8003134:	3714      	adds	r7, #20
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800313e:	b480      	push	{r7}
 8003140:	b085      	sub	sp, #20
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003146:	2300      	movs	r3, #0
 8003148:	60fb      	str	r3, [r7, #12]
 800314a:	e046      	b.n	80031da <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6919      	ldr	r1, [r3, #16]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	4613      	mov	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	440b      	add	r3, r1
 800315c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	2200      	movs	r2, #0
 8003168:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	2200      	movs	r2, #0
 800316e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	2200      	movs	r2, #0
 8003174:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	2200      	movs	r2, #0
 800317a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2200      	movs	r2, #0
 8003180:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003188:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003190:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800319e:	68b9      	ldr	r1, [r7, #8]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	3212      	adds	r2, #18
 80031a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d80c      	bhi.n	80031ca <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6919      	ldr	r1, [r3, #16]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	1c5a      	adds	r2, r3, #1
 80031b8:	4613      	mov	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	440b      	add	r3, r1
 80031c2:	461a      	mov	r2, r3
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	60da      	str	r2, [r3, #12]
 80031c8:	e004      	b.n	80031d4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	461a      	mov	r2, r3
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	3301      	adds	r3, #1
 80031d8:	60fb      	str	r3, [r7, #12]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2b03      	cmp	r3, #3
 80031de:	d9b5      	bls.n	800314c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691a      	ldr	r2, [r3, #16]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800320a:	60da      	str	r2, [r3, #12]
}
 800320c:	bf00      	nop
 800320e:	3714      	adds	r7, #20
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003218:	b480      	push	{r7}
 800321a:	b089      	sub	sp, #36	; 0x24
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003222:	2300      	movs	r3, #0
 8003224:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003226:	2300      	movs	r3, #0
 8003228:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800322a:	2300      	movs	r3, #0
 800322c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800322e:	2300      	movs	r3, #0
 8003230:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003232:	2300      	movs	r3, #0
 8003234:	61fb      	str	r3, [r7, #28]
 8003236:	e175      	b.n	8003524 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003238:	2201      	movs	r2, #1
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	4013      	ands	r3, r2
 800324a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	429a      	cmp	r2, r3
 8003252:	f040 8164 	bne.w	800351e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f003 0303 	and.w	r3, r3, #3
 800325e:	2b01      	cmp	r3, #1
 8003260:	d005      	beq.n	800326e <HAL_GPIO_Init+0x56>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d130      	bne.n	80032d0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	2203      	movs	r2, #3
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	43db      	mvns	r3, r3
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	4013      	ands	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	68da      	ldr	r2, [r3, #12]
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	4313      	orrs	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032a4:	2201      	movs	r2, #1
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	43db      	mvns	r3, r3
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	4013      	ands	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	091b      	lsrs	r3, r3, #4
 80032ba:	f003 0201 	and.w	r2, r3, #1
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f003 0303 	and.w	r3, r3, #3
 80032d8:	2b03      	cmp	r3, #3
 80032da:	d017      	beq.n	800330c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	2203      	movs	r2, #3
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	43db      	mvns	r3, r3
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	4013      	ands	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	4313      	orrs	r3, r2
 8003304:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f003 0303 	and.w	r3, r3, #3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d123      	bne.n	8003360 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	08da      	lsrs	r2, r3, #3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3208      	adds	r2, #8
 8003320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	220f      	movs	r2, #15
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	43db      	mvns	r3, r3
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	4013      	ands	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	691a      	ldr	r2, [r3, #16]
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4313      	orrs	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	08da      	lsrs	r2, r3, #3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3208      	adds	r2, #8
 800335a:	69b9      	ldr	r1, [r7, #24]
 800335c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	2203      	movs	r2, #3
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	43db      	mvns	r3, r3
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	4013      	ands	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f003 0203 	and.w	r2, r3, #3
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	4313      	orrs	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 80be 	beq.w	800351e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033a2:	4b66      	ldr	r3, [pc, #408]	; (800353c <HAL_GPIO_Init+0x324>)
 80033a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a6:	4a65      	ldr	r2, [pc, #404]	; (800353c <HAL_GPIO_Init+0x324>)
 80033a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033ac:	6453      	str	r3, [r2, #68]	; 0x44
 80033ae:	4b63      	ldr	r3, [pc, #396]	; (800353c <HAL_GPIO_Init+0x324>)
 80033b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80033ba:	4a61      	ldr	r2, [pc, #388]	; (8003540 <HAL_GPIO_Init+0x328>)
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	089b      	lsrs	r3, r3, #2
 80033c0:	3302      	adds	r3, #2
 80033c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	220f      	movs	r2, #15
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	43db      	mvns	r3, r3
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	4013      	ands	r3, r2
 80033dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a58      	ldr	r2, [pc, #352]	; (8003544 <HAL_GPIO_Init+0x32c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d037      	beq.n	8003456 <HAL_GPIO_Init+0x23e>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a57      	ldr	r2, [pc, #348]	; (8003548 <HAL_GPIO_Init+0x330>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d031      	beq.n	8003452 <HAL_GPIO_Init+0x23a>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a56      	ldr	r2, [pc, #344]	; (800354c <HAL_GPIO_Init+0x334>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d02b      	beq.n	800344e <HAL_GPIO_Init+0x236>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a55      	ldr	r2, [pc, #340]	; (8003550 <HAL_GPIO_Init+0x338>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d025      	beq.n	800344a <HAL_GPIO_Init+0x232>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a54      	ldr	r2, [pc, #336]	; (8003554 <HAL_GPIO_Init+0x33c>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d01f      	beq.n	8003446 <HAL_GPIO_Init+0x22e>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a53      	ldr	r2, [pc, #332]	; (8003558 <HAL_GPIO_Init+0x340>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d019      	beq.n	8003442 <HAL_GPIO_Init+0x22a>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a52      	ldr	r2, [pc, #328]	; (800355c <HAL_GPIO_Init+0x344>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d013      	beq.n	800343e <HAL_GPIO_Init+0x226>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a51      	ldr	r2, [pc, #324]	; (8003560 <HAL_GPIO_Init+0x348>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d00d      	beq.n	800343a <HAL_GPIO_Init+0x222>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a50      	ldr	r2, [pc, #320]	; (8003564 <HAL_GPIO_Init+0x34c>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d007      	beq.n	8003436 <HAL_GPIO_Init+0x21e>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a4f      	ldr	r2, [pc, #316]	; (8003568 <HAL_GPIO_Init+0x350>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d101      	bne.n	8003432 <HAL_GPIO_Init+0x21a>
 800342e:	2309      	movs	r3, #9
 8003430:	e012      	b.n	8003458 <HAL_GPIO_Init+0x240>
 8003432:	230a      	movs	r3, #10
 8003434:	e010      	b.n	8003458 <HAL_GPIO_Init+0x240>
 8003436:	2308      	movs	r3, #8
 8003438:	e00e      	b.n	8003458 <HAL_GPIO_Init+0x240>
 800343a:	2307      	movs	r3, #7
 800343c:	e00c      	b.n	8003458 <HAL_GPIO_Init+0x240>
 800343e:	2306      	movs	r3, #6
 8003440:	e00a      	b.n	8003458 <HAL_GPIO_Init+0x240>
 8003442:	2305      	movs	r3, #5
 8003444:	e008      	b.n	8003458 <HAL_GPIO_Init+0x240>
 8003446:	2304      	movs	r3, #4
 8003448:	e006      	b.n	8003458 <HAL_GPIO_Init+0x240>
 800344a:	2303      	movs	r3, #3
 800344c:	e004      	b.n	8003458 <HAL_GPIO_Init+0x240>
 800344e:	2302      	movs	r3, #2
 8003450:	e002      	b.n	8003458 <HAL_GPIO_Init+0x240>
 8003452:	2301      	movs	r3, #1
 8003454:	e000      	b.n	8003458 <HAL_GPIO_Init+0x240>
 8003456:	2300      	movs	r3, #0
 8003458:	69fa      	ldr	r2, [r7, #28]
 800345a:	f002 0203 	and.w	r2, r2, #3
 800345e:	0092      	lsls	r2, r2, #2
 8003460:	4093      	lsls	r3, r2
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	4313      	orrs	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003468:	4935      	ldr	r1, [pc, #212]	; (8003540 <HAL_GPIO_Init+0x328>)
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	089b      	lsrs	r3, r3, #2
 800346e:	3302      	adds	r3, #2
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003476:	4b3d      	ldr	r3, [pc, #244]	; (800356c <HAL_GPIO_Init+0x354>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	43db      	mvns	r3, r3
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	4013      	ands	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	4313      	orrs	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800349a:	4a34      	ldr	r2, [pc, #208]	; (800356c <HAL_GPIO_Init+0x354>)
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034a0:	4b32      	ldr	r3, [pc, #200]	; (800356c <HAL_GPIO_Init+0x354>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	43db      	mvns	r3, r3
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4013      	ands	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034c4:	4a29      	ldr	r2, [pc, #164]	; (800356c <HAL_GPIO_Init+0x354>)
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034ca:	4b28      	ldr	r3, [pc, #160]	; (800356c <HAL_GPIO_Init+0x354>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	43db      	mvns	r3, r3
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	4013      	ands	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034ee:	4a1f      	ldr	r2, [pc, #124]	; (800356c <HAL_GPIO_Init+0x354>)
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034f4:	4b1d      	ldr	r3, [pc, #116]	; (800356c <HAL_GPIO_Init+0x354>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	43db      	mvns	r3, r3
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	4013      	ands	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d003      	beq.n	8003518 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003518:	4a14      	ldr	r2, [pc, #80]	; (800356c <HAL_GPIO_Init+0x354>)
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	3301      	adds	r3, #1
 8003522:	61fb      	str	r3, [r7, #28]
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	2b0f      	cmp	r3, #15
 8003528:	f67f ae86 	bls.w	8003238 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800352c:	bf00      	nop
 800352e:	bf00      	nop
 8003530:	3724      	adds	r7, #36	; 0x24
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	40023800 	.word	0x40023800
 8003540:	40013800 	.word	0x40013800
 8003544:	40020000 	.word	0x40020000
 8003548:	40020400 	.word	0x40020400
 800354c:	40020800 	.word	0x40020800
 8003550:	40020c00 	.word	0x40020c00
 8003554:	40021000 	.word	0x40021000
 8003558:	40021400 	.word	0x40021400
 800355c:	40021800 	.word	0x40021800
 8003560:	40021c00 	.word	0x40021c00
 8003564:	40022000 	.word	0x40022000
 8003568:	40022400 	.word	0x40022400
 800356c:	40013c00 	.word	0x40013c00

08003570 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	460b      	mov	r3, r1
 800357a:	807b      	strh	r3, [r7, #2]
 800357c:	4613      	mov	r3, r2
 800357e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003580:	787b      	ldrb	r3, [r7, #1]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003586:	887a      	ldrh	r2, [r7, #2]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800358c:	e003      	b.n	8003596 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800358e:	887b      	ldrh	r3, [r7, #2]
 8003590:	041a      	lsls	r2, r3, #16
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	619a      	str	r2, [r3, #24]
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035a4:	b08f      	sub	sp, #60	; 0x3c
 80035a6:	af0a      	add	r7, sp, #40	; 0x28
 80035a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e116      	b.n	80037e2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d106      	bne.n	80035d4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7ff f86e 	bl	80026b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2203      	movs	r2, #3
 80035d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d102      	bne.n	80035ee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f002 fb4e 	bl	8005c94 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	603b      	str	r3, [r7, #0]
 80035fe:	687e      	ldr	r6, [r7, #4]
 8003600:	466d      	mov	r5, sp
 8003602:	f106 0410 	add.w	r4, r6, #16
 8003606:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003608:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800360a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800360c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800360e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003612:	e885 0003 	stmia.w	r5, {r0, r1}
 8003616:	1d33      	adds	r3, r6, #4
 8003618:	cb0e      	ldmia	r3, {r1, r2, r3}
 800361a:	6838      	ldr	r0, [r7, #0]
 800361c:	f002 fae2 	bl	8005be4 <USB_CoreInit>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d005      	beq.n	8003632 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2202      	movs	r2, #2
 800362a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e0d7      	b.n	80037e2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2100      	movs	r1, #0
 8003638:	4618      	mov	r0, r3
 800363a:	f002 fb3c 	bl	8005cb6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800363e:	2300      	movs	r3, #0
 8003640:	73fb      	strb	r3, [r7, #15]
 8003642:	e04a      	b.n	80036da <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003644:	7bfa      	ldrb	r2, [r7, #15]
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	4613      	mov	r3, r2
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	4413      	add	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	333d      	adds	r3, #61	; 0x3d
 8003654:	2201      	movs	r2, #1
 8003656:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003658:	7bfa      	ldrb	r2, [r7, #15]
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	4613      	mov	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	4413      	add	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	333c      	adds	r3, #60	; 0x3c
 8003668:	7bfa      	ldrb	r2, [r7, #15]
 800366a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800366c:	7bfa      	ldrb	r2, [r7, #15]
 800366e:	7bfb      	ldrb	r3, [r7, #15]
 8003670:	b298      	uxth	r0, r3
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	4613      	mov	r3, r2
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	4413      	add	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	3344      	adds	r3, #68	; 0x44
 8003680:	4602      	mov	r2, r0
 8003682:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003684:	7bfa      	ldrb	r2, [r7, #15]
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	4613      	mov	r3, r2
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	4413      	add	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	3340      	adds	r3, #64	; 0x40
 8003694:	2200      	movs	r2, #0
 8003696:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003698:	7bfa      	ldrb	r2, [r7, #15]
 800369a:	6879      	ldr	r1, [r7, #4]
 800369c:	4613      	mov	r3, r2
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	4413      	add	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	440b      	add	r3, r1
 80036a6:	3348      	adds	r3, #72	; 0x48
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80036ac:	7bfa      	ldrb	r2, [r7, #15]
 80036ae:	6879      	ldr	r1, [r7, #4]
 80036b0:	4613      	mov	r3, r2
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	4413      	add	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	334c      	adds	r3, #76	; 0x4c
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80036c0:	7bfa      	ldrb	r2, [r7, #15]
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	4613      	mov	r3, r2
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	4413      	add	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	3354      	adds	r3, #84	; 0x54
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036d4:	7bfb      	ldrb	r3, [r7, #15]
 80036d6:	3301      	adds	r3, #1
 80036d8:	73fb      	strb	r3, [r7, #15]
 80036da:	7bfa      	ldrb	r2, [r7, #15]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d3af      	bcc.n	8003644 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036e4:	2300      	movs	r3, #0
 80036e6:	73fb      	strb	r3, [r7, #15]
 80036e8:	e044      	b.n	8003774 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80036ea:	7bfa      	ldrb	r2, [r7, #15]
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	4613      	mov	r3, r2
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	4413      	add	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	440b      	add	r3, r1
 80036f8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80036fc:	2200      	movs	r2, #0
 80036fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003700:	7bfa      	ldrb	r2, [r7, #15]
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	4613      	mov	r3, r2
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	4413      	add	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	440b      	add	r3, r1
 800370e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003712:	7bfa      	ldrb	r2, [r7, #15]
 8003714:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003716:	7bfa      	ldrb	r2, [r7, #15]
 8003718:	6879      	ldr	r1, [r7, #4]
 800371a:	4613      	mov	r3, r2
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	4413      	add	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	440b      	add	r3, r1
 8003724:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003728:	2200      	movs	r2, #0
 800372a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800372c:	7bfa      	ldrb	r2, [r7, #15]
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	4613      	mov	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	4413      	add	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003742:	7bfa      	ldrb	r2, [r7, #15]
 8003744:	6879      	ldr	r1, [r7, #4]
 8003746:	4613      	mov	r3, r2
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	4413      	add	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	440b      	add	r3, r1
 8003750:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003758:	7bfa      	ldrb	r2, [r7, #15]
 800375a:	6879      	ldr	r1, [r7, #4]
 800375c:	4613      	mov	r3, r2
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	4413      	add	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	440b      	add	r3, r1
 8003766:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800376a:	2200      	movs	r2, #0
 800376c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800376e:	7bfb      	ldrb	r3, [r7, #15]
 8003770:	3301      	adds	r3, #1
 8003772:	73fb      	strb	r3, [r7, #15]
 8003774:	7bfa      	ldrb	r2, [r7, #15]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	429a      	cmp	r2, r3
 800377c:	d3b5      	bcc.n	80036ea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	603b      	str	r3, [r7, #0]
 8003784:	687e      	ldr	r6, [r7, #4]
 8003786:	466d      	mov	r5, sp
 8003788:	f106 0410 	add.w	r4, r6, #16
 800378c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800378e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003790:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003792:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003794:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003798:	e885 0003 	stmia.w	r5, {r0, r1}
 800379c:	1d33      	adds	r3, r6, #4
 800379e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037a0:	6838      	ldr	r0, [r7, #0]
 80037a2:	f002 fad5 	bl	8005d50 <USB_DevInit>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d005      	beq.n	80037b8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2202      	movs	r2, #2
 80037b0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e014      	b.n	80037e2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d102      	bne.n	80037d6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f80b 	bl	80037ec <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f002 fc93 	bl	8006106 <USB_DevDisconnect>

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3714      	adds	r7, #20
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080037ec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800381a:	4b05      	ldr	r3, [pc, #20]	; (8003830 <HAL_PCDEx_ActivateLPM+0x44>)
 800381c:	4313      	orrs	r3, r2
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	10000003 	.word	0x10000003

08003834 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003838:	4b05      	ldr	r3, [pc, #20]	; (8003850 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a04      	ldr	r2, [pc, #16]	; (8003850 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800383e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003842:	6013      	str	r3, [r2, #0]
}
 8003844:	bf00      	nop
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	40007000 	.word	0x40007000

08003854 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800385a:	2300      	movs	r3, #0
 800385c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800385e:	4b23      	ldr	r3, [pc, #140]	; (80038ec <HAL_PWREx_EnableOverDrive+0x98>)
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	4a22      	ldr	r2, [pc, #136]	; (80038ec <HAL_PWREx_EnableOverDrive+0x98>)
 8003864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003868:	6413      	str	r3, [r2, #64]	; 0x40
 800386a:	4b20      	ldr	r3, [pc, #128]	; (80038ec <HAL_PWREx_EnableOverDrive+0x98>)
 800386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003872:	603b      	str	r3, [r7, #0]
 8003874:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003876:	4b1e      	ldr	r3, [pc, #120]	; (80038f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a1d      	ldr	r2, [pc, #116]	; (80038f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800387c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003880:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003882:	f7ff f83f 	bl	8002904 <HAL_GetTick>
 8003886:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003888:	e009      	b.n	800389e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800388a:	f7ff f83b 	bl	8002904 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003898:	d901      	bls.n	800389e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e022      	b.n	80038e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800389e:	4b14      	ldr	r3, [pc, #80]	; (80038f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038aa:	d1ee      	bne.n	800388a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80038ac:	4b10      	ldr	r3, [pc, #64]	; (80038f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a0f      	ldr	r2, [pc, #60]	; (80038f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038b8:	f7ff f824 	bl	8002904 <HAL_GetTick>
 80038bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80038be:	e009      	b.n	80038d4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80038c0:	f7ff f820 	bl	8002904 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038ce:	d901      	bls.n	80038d4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e007      	b.n	80038e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80038d4:	4b06      	ldr	r3, [pc, #24]	; (80038f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038e0:	d1ee      	bne.n	80038c0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3708      	adds	r7, #8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	40023800 	.word	0x40023800
 80038f0:	40007000 	.word	0x40007000

080038f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80038fc:	2300      	movs	r3, #0
 80038fe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e29b      	b.n	8003e42 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 8087 	beq.w	8003a26 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003918:	4b96      	ldr	r3, [pc, #600]	; (8003b74 <HAL_RCC_OscConfig+0x280>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 030c 	and.w	r3, r3, #12
 8003920:	2b04      	cmp	r3, #4
 8003922:	d00c      	beq.n	800393e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003924:	4b93      	ldr	r3, [pc, #588]	; (8003b74 <HAL_RCC_OscConfig+0x280>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f003 030c 	and.w	r3, r3, #12
 800392c:	2b08      	cmp	r3, #8
 800392e:	d112      	bne.n	8003956 <HAL_RCC_OscConfig+0x62>
 8003930:	4b90      	ldr	r3, [pc, #576]	; (8003b74 <HAL_RCC_OscConfig+0x280>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003938:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800393c:	d10b      	bne.n	8003956 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800393e:	4b8d      	ldr	r3, [pc, #564]	; (8003b74 <HAL_RCC_OscConfig+0x280>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d06c      	beq.n	8003a24 <HAL_RCC_OscConfig+0x130>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d168      	bne.n	8003a24 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e275      	b.n	8003e42 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800395e:	d106      	bne.n	800396e <HAL_RCC_OscConfig+0x7a>
 8003960:	4b84      	ldr	r3, [pc, #528]	; (8003b74 <HAL_RCC_OscConfig+0x280>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a83      	ldr	r2, [pc, #524]	; (8003b74 <HAL_RCC_OscConfig+0x280>)
 8003966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800396a:	6013      	str	r3, [r2, #0]
 800396c:	e02e      	b.n	80039cc <HAL_RCC_OscConfig+0xd8>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10c      	bne.n	8003990 <HAL_RCC_OscConfig+0x9c>
 8003976:	4b7f      	ldr	r3, [pc, #508]	; (8003b74 <HAL_RCC_OscConfig+0x280>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a7e      	ldr	r2, [pc, #504]	; (8003b74 <HAL_RCC_OscConfig+0x280>)
 800397c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003980:	6013      	str	r3, [r2, #0]
 8003982:	4b7c      	ldr	r3, [pc, #496]	; (8003b74 <HAL_RCC_OscConfig+0x280>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a7b      	ldr	r2, [pc, #492]	; (8003b74 <HAL_RCC_OscConfig+0x280>)
 8003988:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800398c:	6013      	str	r3, [r2, #0]
 800398e:	e01d      	b.n	80039cc <HAL_RCC_OscConfig+0xd8>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003998:	d10c      	bne.n	80039b4 <HAL_RCC_OscConfig+0xc0>
 800399a:	4b76      	ldr	r3, [pc, #472]	; (8003b74 <HAL_RCC_OscConfig+0x280>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a75      	ldr	r2, [pc, #468]	; (8003b74 <HAL_RCC_OscConfig+0x280>)
 80039a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039a4:	6013      	str	r3, [r2, #0]
 80039a6:	4b73      	ldr	r3, [pc, #460]	; (8003b74 <HAL_RCC_OscConfig+0x280>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a72      	ldr	r2, [pc, #456]	; (8003b74 <HAL_RCC_OscConfig+0x280>)
 80039ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039b0:	6013      	str	r3, [r2, #0]
 80039b2:	e00b      	b.n	80039cc <HAL_RCC_OscConfig+0xd8>
 80039b4:	4b6f      	ldr	r3, [pc, #444]	; (8003b74 <HAL_RCC_OscConfig+0x280>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a6e      	ldr	r2, [pc, #440]	; (8003b74 <HAL_RCC_OscConfig+0x280>)
 80039ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039be:	6013      	str	r3, [r2, #0]
 80039c0:	4b6c      	ldr	r3, [pc, #432]	; (8003b74 <HAL_RCC_OscConfig+0x280>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a6b      	ldr	r2, [pc, #428]	; (8003b74 <HAL_RCC_OscConfig+0x280>)
 80039c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d013      	beq.n	80039fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d4:	f7fe ff96 	bl	8002904 <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039dc:	f7fe ff92 	bl	8002904 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b64      	cmp	r3, #100	; 0x64
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e229      	b.n	8003e42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ee:	4b61      	ldr	r3, [pc, #388]	; (8003b74 <HAL_RCC_OscConfig+0x280>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0f0      	beq.n	80039dc <HAL_RCC_OscConfig+0xe8>
 80039fa:	e014      	b.n	8003a26 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fc:	f7fe ff82 	bl	8002904 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a04:	f7fe ff7e 	bl	8002904 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b64      	cmp	r3, #100	; 0x64
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e215      	b.n	8003e42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a16:	4b57      	ldr	r3, [pc, #348]	; (8003b74 <HAL_RCC_OscConfig+0x280>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1f0      	bne.n	8003a04 <HAL_RCC_OscConfig+0x110>
 8003a22:	e000      	b.n	8003a26 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d069      	beq.n	8003b06 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a32:	4b50      	ldr	r3, [pc, #320]	; (8003b74 <HAL_RCC_OscConfig+0x280>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 030c 	and.w	r3, r3, #12
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00b      	beq.n	8003a56 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a3e:	4b4d      	ldr	r3, [pc, #308]	; (8003b74 <HAL_RCC_OscConfig+0x280>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 030c 	and.w	r3, r3, #12
 8003a46:	2b08      	cmp	r3, #8
 8003a48:	d11c      	bne.n	8003a84 <HAL_RCC_OscConfig+0x190>
 8003a4a:	4b4a      	ldr	r3, [pc, #296]	; (8003b74 <HAL_RCC_OscConfig+0x280>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d116      	bne.n	8003a84 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a56:	4b47      	ldr	r3, [pc, #284]	; (8003b74 <HAL_RCC_OscConfig+0x280>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d005      	beq.n	8003a6e <HAL_RCC_OscConfig+0x17a>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d001      	beq.n	8003a6e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e1e9      	b.n	8003e42 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a6e:	4b41      	ldr	r3, [pc, #260]	; (8003b74 <HAL_RCC_OscConfig+0x280>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	493d      	ldr	r1, [pc, #244]	; (8003b74 <HAL_RCC_OscConfig+0x280>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a82:	e040      	b.n	8003b06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d023      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a8c:	4b39      	ldr	r3, [pc, #228]	; (8003b74 <HAL_RCC_OscConfig+0x280>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a38      	ldr	r2, [pc, #224]	; (8003b74 <HAL_RCC_OscConfig+0x280>)
 8003a92:	f043 0301 	orr.w	r3, r3, #1
 8003a96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a98:	f7fe ff34 	bl	8002904 <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aa0:	f7fe ff30 	bl	8002904 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e1c7      	b.n	8003e42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab2:	4b30      	ldr	r3, [pc, #192]	; (8003b74 <HAL_RCC_OscConfig+0x280>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0f0      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003abe:	4b2d      	ldr	r3, [pc, #180]	; (8003b74 <HAL_RCC_OscConfig+0x280>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	4929      	ldr	r1, [pc, #164]	; (8003b74 <HAL_RCC_OscConfig+0x280>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	600b      	str	r3, [r1, #0]
 8003ad2:	e018      	b.n	8003b06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ad4:	4b27      	ldr	r3, [pc, #156]	; (8003b74 <HAL_RCC_OscConfig+0x280>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a26      	ldr	r2, [pc, #152]	; (8003b74 <HAL_RCC_OscConfig+0x280>)
 8003ada:	f023 0301 	bic.w	r3, r3, #1
 8003ade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae0:	f7fe ff10 	bl	8002904 <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ae8:	f7fe ff0c 	bl	8002904 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e1a3      	b.n	8003e42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003afa:	4b1e      	ldr	r3, [pc, #120]	; (8003b74 <HAL_RCC_OscConfig+0x280>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1f0      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0308 	and.w	r3, r3, #8
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d038      	beq.n	8003b84 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d019      	beq.n	8003b4e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b1a:	4b16      	ldr	r3, [pc, #88]	; (8003b74 <HAL_RCC_OscConfig+0x280>)
 8003b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b1e:	4a15      	ldr	r2, [pc, #84]	; (8003b74 <HAL_RCC_OscConfig+0x280>)
 8003b20:	f043 0301 	orr.w	r3, r3, #1
 8003b24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b26:	f7fe feed 	bl	8002904 <HAL_GetTick>
 8003b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b2c:	e008      	b.n	8003b40 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b2e:	f7fe fee9 	bl	8002904 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e180      	b.n	8003e42 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b40:	4b0c      	ldr	r3, [pc, #48]	; (8003b74 <HAL_RCC_OscConfig+0x280>)
 8003b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0f0      	beq.n	8003b2e <HAL_RCC_OscConfig+0x23a>
 8003b4c:	e01a      	b.n	8003b84 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b4e:	4b09      	ldr	r3, [pc, #36]	; (8003b74 <HAL_RCC_OscConfig+0x280>)
 8003b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b52:	4a08      	ldr	r2, [pc, #32]	; (8003b74 <HAL_RCC_OscConfig+0x280>)
 8003b54:	f023 0301 	bic.w	r3, r3, #1
 8003b58:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5a:	f7fe fed3 	bl	8002904 <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b60:	e00a      	b.n	8003b78 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b62:	f7fe fecf 	bl	8002904 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d903      	bls.n	8003b78 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e166      	b.n	8003e42 <HAL_RCC_OscConfig+0x54e>
 8003b74:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b78:	4b92      	ldr	r3, [pc, #584]	; (8003dc4 <HAL_RCC_OscConfig+0x4d0>)
 8003b7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1ee      	bne.n	8003b62 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 80a4 	beq.w	8003cda <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b92:	4b8c      	ldr	r3, [pc, #560]	; (8003dc4 <HAL_RCC_OscConfig+0x4d0>)
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10d      	bne.n	8003bba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b9e:	4b89      	ldr	r3, [pc, #548]	; (8003dc4 <HAL_RCC_OscConfig+0x4d0>)
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	4a88      	ldr	r2, [pc, #544]	; (8003dc4 <HAL_RCC_OscConfig+0x4d0>)
 8003ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8003baa:	4b86      	ldr	r3, [pc, #536]	; (8003dc4 <HAL_RCC_OscConfig+0x4d0>)
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb2:	60bb      	str	r3, [r7, #8]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bba:	4b83      	ldr	r3, [pc, #524]	; (8003dc8 <HAL_RCC_OscConfig+0x4d4>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d118      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003bc6:	4b80      	ldr	r3, [pc, #512]	; (8003dc8 <HAL_RCC_OscConfig+0x4d4>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a7f      	ldr	r2, [pc, #508]	; (8003dc8 <HAL_RCC_OscConfig+0x4d4>)
 8003bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bd2:	f7fe fe97 	bl	8002904 <HAL_GetTick>
 8003bd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bd8:	e008      	b.n	8003bec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bda:	f7fe fe93 	bl	8002904 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b64      	cmp	r3, #100	; 0x64
 8003be6:	d901      	bls.n	8003bec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e12a      	b.n	8003e42 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bec:	4b76      	ldr	r3, [pc, #472]	; (8003dc8 <HAL_RCC_OscConfig+0x4d4>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d0f0      	beq.n	8003bda <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d106      	bne.n	8003c0e <HAL_RCC_OscConfig+0x31a>
 8003c00:	4b70      	ldr	r3, [pc, #448]	; (8003dc4 <HAL_RCC_OscConfig+0x4d0>)
 8003c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c04:	4a6f      	ldr	r2, [pc, #444]	; (8003dc4 <HAL_RCC_OscConfig+0x4d0>)
 8003c06:	f043 0301 	orr.w	r3, r3, #1
 8003c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c0c:	e02d      	b.n	8003c6a <HAL_RCC_OscConfig+0x376>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10c      	bne.n	8003c30 <HAL_RCC_OscConfig+0x33c>
 8003c16:	4b6b      	ldr	r3, [pc, #428]	; (8003dc4 <HAL_RCC_OscConfig+0x4d0>)
 8003c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1a:	4a6a      	ldr	r2, [pc, #424]	; (8003dc4 <HAL_RCC_OscConfig+0x4d0>)
 8003c1c:	f023 0301 	bic.w	r3, r3, #1
 8003c20:	6713      	str	r3, [r2, #112]	; 0x70
 8003c22:	4b68      	ldr	r3, [pc, #416]	; (8003dc4 <HAL_RCC_OscConfig+0x4d0>)
 8003c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c26:	4a67      	ldr	r2, [pc, #412]	; (8003dc4 <HAL_RCC_OscConfig+0x4d0>)
 8003c28:	f023 0304 	bic.w	r3, r3, #4
 8003c2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c2e:	e01c      	b.n	8003c6a <HAL_RCC_OscConfig+0x376>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	2b05      	cmp	r3, #5
 8003c36:	d10c      	bne.n	8003c52 <HAL_RCC_OscConfig+0x35e>
 8003c38:	4b62      	ldr	r3, [pc, #392]	; (8003dc4 <HAL_RCC_OscConfig+0x4d0>)
 8003c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3c:	4a61      	ldr	r2, [pc, #388]	; (8003dc4 <HAL_RCC_OscConfig+0x4d0>)
 8003c3e:	f043 0304 	orr.w	r3, r3, #4
 8003c42:	6713      	str	r3, [r2, #112]	; 0x70
 8003c44:	4b5f      	ldr	r3, [pc, #380]	; (8003dc4 <HAL_RCC_OscConfig+0x4d0>)
 8003c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c48:	4a5e      	ldr	r2, [pc, #376]	; (8003dc4 <HAL_RCC_OscConfig+0x4d0>)
 8003c4a:	f043 0301 	orr.w	r3, r3, #1
 8003c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c50:	e00b      	b.n	8003c6a <HAL_RCC_OscConfig+0x376>
 8003c52:	4b5c      	ldr	r3, [pc, #368]	; (8003dc4 <HAL_RCC_OscConfig+0x4d0>)
 8003c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c56:	4a5b      	ldr	r2, [pc, #364]	; (8003dc4 <HAL_RCC_OscConfig+0x4d0>)
 8003c58:	f023 0301 	bic.w	r3, r3, #1
 8003c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c5e:	4b59      	ldr	r3, [pc, #356]	; (8003dc4 <HAL_RCC_OscConfig+0x4d0>)
 8003c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c62:	4a58      	ldr	r2, [pc, #352]	; (8003dc4 <HAL_RCC_OscConfig+0x4d0>)
 8003c64:	f023 0304 	bic.w	r3, r3, #4
 8003c68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d015      	beq.n	8003c9e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c72:	f7fe fe47 	bl	8002904 <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c78:	e00a      	b.n	8003c90 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c7a:	f7fe fe43 	bl	8002904 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e0d8      	b.n	8003e42 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c90:	4b4c      	ldr	r3, [pc, #304]	; (8003dc4 <HAL_RCC_OscConfig+0x4d0>)
 8003c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d0ee      	beq.n	8003c7a <HAL_RCC_OscConfig+0x386>
 8003c9c:	e014      	b.n	8003cc8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c9e:	f7fe fe31 	bl	8002904 <HAL_GetTick>
 8003ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ca4:	e00a      	b.n	8003cbc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ca6:	f7fe fe2d 	bl	8002904 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e0c2      	b.n	8003e42 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cbc:	4b41      	ldr	r3, [pc, #260]	; (8003dc4 <HAL_RCC_OscConfig+0x4d0>)
 8003cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1ee      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003cc8:	7dfb      	ldrb	r3, [r7, #23]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d105      	bne.n	8003cda <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cce:	4b3d      	ldr	r3, [pc, #244]	; (8003dc4 <HAL_RCC_OscConfig+0x4d0>)
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	4a3c      	ldr	r2, [pc, #240]	; (8003dc4 <HAL_RCC_OscConfig+0x4d0>)
 8003cd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cd8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 80ae 	beq.w	8003e40 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ce4:	4b37      	ldr	r3, [pc, #220]	; (8003dc4 <HAL_RCC_OscConfig+0x4d0>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f003 030c 	and.w	r3, r3, #12
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	d06d      	beq.n	8003dcc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d14b      	bne.n	8003d90 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cf8:	4b32      	ldr	r3, [pc, #200]	; (8003dc4 <HAL_RCC_OscConfig+0x4d0>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a31      	ldr	r2, [pc, #196]	; (8003dc4 <HAL_RCC_OscConfig+0x4d0>)
 8003cfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d04:	f7fe fdfe 	bl	8002904 <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d0c:	f7fe fdfa 	bl	8002904 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e091      	b.n	8003e42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d1e:	4b29      	ldr	r3, [pc, #164]	; (8003dc4 <HAL_RCC_OscConfig+0x4d0>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1f0      	bne.n	8003d0c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	69da      	ldr	r2, [r3, #28]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	431a      	orrs	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d38:	019b      	lsls	r3, r3, #6
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d40:	085b      	lsrs	r3, r3, #1
 8003d42:	3b01      	subs	r3, #1
 8003d44:	041b      	lsls	r3, r3, #16
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4c:	061b      	lsls	r3, r3, #24
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d54:	071b      	lsls	r3, r3, #28
 8003d56:	491b      	ldr	r1, [pc, #108]	; (8003dc4 <HAL_RCC_OscConfig+0x4d0>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d5c:	4b19      	ldr	r3, [pc, #100]	; (8003dc4 <HAL_RCC_OscConfig+0x4d0>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a18      	ldr	r2, [pc, #96]	; (8003dc4 <HAL_RCC_OscConfig+0x4d0>)
 8003d62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d68:	f7fe fdcc 	bl	8002904 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d70:	f7fe fdc8 	bl	8002904 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e05f      	b.n	8003e42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d82:	4b10      	ldr	r3, [pc, #64]	; (8003dc4 <HAL_RCC_OscConfig+0x4d0>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0f0      	beq.n	8003d70 <HAL_RCC_OscConfig+0x47c>
 8003d8e:	e057      	b.n	8003e40 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d90:	4b0c      	ldr	r3, [pc, #48]	; (8003dc4 <HAL_RCC_OscConfig+0x4d0>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a0b      	ldr	r2, [pc, #44]	; (8003dc4 <HAL_RCC_OscConfig+0x4d0>)
 8003d96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9c:	f7fe fdb2 	bl	8002904 <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003da4:	f7fe fdae 	bl	8002904 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e045      	b.n	8003e42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003db6:	4b03      	ldr	r3, [pc, #12]	; (8003dc4 <HAL_RCC_OscConfig+0x4d0>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1f0      	bne.n	8003da4 <HAL_RCC_OscConfig+0x4b0>
 8003dc2:	e03d      	b.n	8003e40 <HAL_RCC_OscConfig+0x54c>
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003dcc:	4b1f      	ldr	r3, [pc, #124]	; (8003e4c <HAL_RCC_OscConfig+0x558>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d030      	beq.n	8003e3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d129      	bne.n	8003e3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d122      	bne.n	8003e3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e02:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d119      	bne.n	8003e3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e12:	085b      	lsrs	r3, r3, #1
 8003e14:	3b01      	subs	r3, #1
 8003e16:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d10f      	bne.n	8003e3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e26:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d107      	bne.n	8003e3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e36:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d001      	beq.n	8003e40 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e000      	b.n	8003e42 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3718      	adds	r7, #24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40023800 	.word	0x40023800

08003e50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e0d0      	b.n	800400a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e68:	4b6a      	ldr	r3, [pc, #424]	; (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 030f 	and.w	r3, r3, #15
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d910      	bls.n	8003e98 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e76:	4b67      	ldr	r3, [pc, #412]	; (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f023 020f 	bic.w	r2, r3, #15
 8003e7e:	4965      	ldr	r1, [pc, #404]	; (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e86:	4b63      	ldr	r3, [pc, #396]	; (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 030f 	and.w	r3, r3, #15
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d001      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e0b8      	b.n	800400a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d020      	beq.n	8003ee6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d005      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003eb0:	4b59      	ldr	r3, [pc, #356]	; (8004018 <HAL_RCC_ClockConfig+0x1c8>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	4a58      	ldr	r2, [pc, #352]	; (8004018 <HAL_RCC_ClockConfig+0x1c8>)
 8003eb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003eba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0308 	and.w	r3, r3, #8
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d005      	beq.n	8003ed4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ec8:	4b53      	ldr	r3, [pc, #332]	; (8004018 <HAL_RCC_ClockConfig+0x1c8>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	4a52      	ldr	r2, [pc, #328]	; (8004018 <HAL_RCC_ClockConfig+0x1c8>)
 8003ece:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ed2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ed4:	4b50      	ldr	r3, [pc, #320]	; (8004018 <HAL_RCC_ClockConfig+0x1c8>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	494d      	ldr	r1, [pc, #308]	; (8004018 <HAL_RCC_ClockConfig+0x1c8>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d040      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d107      	bne.n	8003f0a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003efa:	4b47      	ldr	r3, [pc, #284]	; (8004018 <HAL_RCC_ClockConfig+0x1c8>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d115      	bne.n	8003f32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e07f      	b.n	800400a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d107      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f12:	4b41      	ldr	r3, [pc, #260]	; (8004018 <HAL_RCC_ClockConfig+0x1c8>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d109      	bne.n	8003f32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e073      	b.n	800400a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f22:	4b3d      	ldr	r3, [pc, #244]	; (8004018 <HAL_RCC_ClockConfig+0x1c8>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e06b      	b.n	800400a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f32:	4b39      	ldr	r3, [pc, #228]	; (8004018 <HAL_RCC_ClockConfig+0x1c8>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f023 0203 	bic.w	r2, r3, #3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	4936      	ldr	r1, [pc, #216]	; (8004018 <HAL_RCC_ClockConfig+0x1c8>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f44:	f7fe fcde 	bl	8002904 <HAL_GetTick>
 8003f48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f4a:	e00a      	b.n	8003f62 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f4c:	f7fe fcda 	bl	8002904 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e053      	b.n	800400a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f62:	4b2d      	ldr	r3, [pc, #180]	; (8004018 <HAL_RCC_ClockConfig+0x1c8>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 020c 	and.w	r2, r3, #12
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d1eb      	bne.n	8003f4c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f74:	4b27      	ldr	r3, [pc, #156]	; (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 030f 	and.w	r3, r3, #15
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d210      	bcs.n	8003fa4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f82:	4b24      	ldr	r3, [pc, #144]	; (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f023 020f 	bic.w	r2, r3, #15
 8003f8a:	4922      	ldr	r1, [pc, #136]	; (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f92:	4b20      	ldr	r3, [pc, #128]	; (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d001      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e032      	b.n	800400a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d008      	beq.n	8003fc2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fb0:	4b19      	ldr	r3, [pc, #100]	; (8004018 <HAL_RCC_ClockConfig+0x1c8>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	4916      	ldr	r1, [pc, #88]	; (8004018 <HAL_RCC_ClockConfig+0x1c8>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d009      	beq.n	8003fe2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003fce:	4b12      	ldr	r3, [pc, #72]	; (8004018 <HAL_RCC_ClockConfig+0x1c8>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	490e      	ldr	r1, [pc, #56]	; (8004018 <HAL_RCC_ClockConfig+0x1c8>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fe2:	f000 f821 	bl	8004028 <HAL_RCC_GetSysClockFreq>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	4b0b      	ldr	r3, [pc, #44]	; (8004018 <HAL_RCC_ClockConfig+0x1c8>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	091b      	lsrs	r3, r3, #4
 8003fee:	f003 030f 	and.w	r3, r3, #15
 8003ff2:	490a      	ldr	r1, [pc, #40]	; (800401c <HAL_RCC_ClockConfig+0x1cc>)
 8003ff4:	5ccb      	ldrb	r3, [r1, r3]
 8003ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8003ffa:	4a09      	ldr	r2, [pc, #36]	; (8004020 <HAL_RCC_ClockConfig+0x1d0>)
 8003ffc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ffe:	4b09      	ldr	r3, [pc, #36]	; (8004024 <HAL_RCC_ClockConfig+0x1d4>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4618      	mov	r0, r3
 8004004:	f7fe fc3a 	bl	800287c <HAL_InitTick>

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	40023c00 	.word	0x40023c00
 8004018:	40023800 	.word	0x40023800
 800401c:	08009688 	.word	0x08009688
 8004020:	20000000 	.word	0x20000000
 8004024:	20000004 	.word	0x20000004

08004028 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800402c:	b094      	sub	sp, #80	; 0x50
 800402e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004030:	2300      	movs	r3, #0
 8004032:	647b      	str	r3, [r7, #68]	; 0x44
 8004034:	2300      	movs	r3, #0
 8004036:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004038:	2300      	movs	r3, #0
 800403a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800403c:	2300      	movs	r3, #0
 800403e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004040:	4b79      	ldr	r3, [pc, #484]	; (8004228 <HAL_RCC_GetSysClockFreq+0x200>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f003 030c 	and.w	r3, r3, #12
 8004048:	2b08      	cmp	r3, #8
 800404a:	d00d      	beq.n	8004068 <HAL_RCC_GetSysClockFreq+0x40>
 800404c:	2b08      	cmp	r3, #8
 800404e:	f200 80e1 	bhi.w	8004214 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004052:	2b00      	cmp	r3, #0
 8004054:	d002      	beq.n	800405c <HAL_RCC_GetSysClockFreq+0x34>
 8004056:	2b04      	cmp	r3, #4
 8004058:	d003      	beq.n	8004062 <HAL_RCC_GetSysClockFreq+0x3a>
 800405a:	e0db      	b.n	8004214 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800405c:	4b73      	ldr	r3, [pc, #460]	; (800422c <HAL_RCC_GetSysClockFreq+0x204>)
 800405e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004060:	e0db      	b.n	800421a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004062:	4b73      	ldr	r3, [pc, #460]	; (8004230 <HAL_RCC_GetSysClockFreq+0x208>)
 8004064:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004066:	e0d8      	b.n	800421a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004068:	4b6f      	ldr	r3, [pc, #444]	; (8004228 <HAL_RCC_GetSysClockFreq+0x200>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004070:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004072:	4b6d      	ldr	r3, [pc, #436]	; (8004228 <HAL_RCC_GetSysClockFreq+0x200>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d063      	beq.n	8004146 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800407e:	4b6a      	ldr	r3, [pc, #424]	; (8004228 <HAL_RCC_GetSysClockFreq+0x200>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	099b      	lsrs	r3, r3, #6
 8004084:	2200      	movs	r2, #0
 8004086:	63bb      	str	r3, [r7, #56]	; 0x38
 8004088:	63fa      	str	r2, [r7, #60]	; 0x3c
 800408a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800408c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004090:	633b      	str	r3, [r7, #48]	; 0x30
 8004092:	2300      	movs	r3, #0
 8004094:	637b      	str	r3, [r7, #52]	; 0x34
 8004096:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800409a:	4622      	mov	r2, r4
 800409c:	462b      	mov	r3, r5
 800409e:	f04f 0000 	mov.w	r0, #0
 80040a2:	f04f 0100 	mov.w	r1, #0
 80040a6:	0159      	lsls	r1, r3, #5
 80040a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040ac:	0150      	lsls	r0, r2, #5
 80040ae:	4602      	mov	r2, r0
 80040b0:	460b      	mov	r3, r1
 80040b2:	4621      	mov	r1, r4
 80040b4:	1a51      	subs	r1, r2, r1
 80040b6:	6139      	str	r1, [r7, #16]
 80040b8:	4629      	mov	r1, r5
 80040ba:	eb63 0301 	sbc.w	r3, r3, r1
 80040be:	617b      	str	r3, [r7, #20]
 80040c0:	f04f 0200 	mov.w	r2, #0
 80040c4:	f04f 0300 	mov.w	r3, #0
 80040c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040cc:	4659      	mov	r1, fp
 80040ce:	018b      	lsls	r3, r1, #6
 80040d0:	4651      	mov	r1, sl
 80040d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040d6:	4651      	mov	r1, sl
 80040d8:	018a      	lsls	r2, r1, #6
 80040da:	4651      	mov	r1, sl
 80040dc:	ebb2 0801 	subs.w	r8, r2, r1
 80040e0:	4659      	mov	r1, fp
 80040e2:	eb63 0901 	sbc.w	r9, r3, r1
 80040e6:	f04f 0200 	mov.w	r2, #0
 80040ea:	f04f 0300 	mov.w	r3, #0
 80040ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040fa:	4690      	mov	r8, r2
 80040fc:	4699      	mov	r9, r3
 80040fe:	4623      	mov	r3, r4
 8004100:	eb18 0303 	adds.w	r3, r8, r3
 8004104:	60bb      	str	r3, [r7, #8]
 8004106:	462b      	mov	r3, r5
 8004108:	eb49 0303 	adc.w	r3, r9, r3
 800410c:	60fb      	str	r3, [r7, #12]
 800410e:	f04f 0200 	mov.w	r2, #0
 8004112:	f04f 0300 	mov.w	r3, #0
 8004116:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800411a:	4629      	mov	r1, r5
 800411c:	024b      	lsls	r3, r1, #9
 800411e:	4621      	mov	r1, r4
 8004120:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004124:	4621      	mov	r1, r4
 8004126:	024a      	lsls	r2, r1, #9
 8004128:	4610      	mov	r0, r2
 800412a:	4619      	mov	r1, r3
 800412c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800412e:	2200      	movs	r2, #0
 8004130:	62bb      	str	r3, [r7, #40]	; 0x28
 8004132:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004134:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004138:	f7fc f8cc 	bl	80002d4 <__aeabi_uldivmod>
 800413c:	4602      	mov	r2, r0
 800413e:	460b      	mov	r3, r1
 8004140:	4613      	mov	r3, r2
 8004142:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004144:	e058      	b.n	80041f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004146:	4b38      	ldr	r3, [pc, #224]	; (8004228 <HAL_RCC_GetSysClockFreq+0x200>)
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	099b      	lsrs	r3, r3, #6
 800414c:	2200      	movs	r2, #0
 800414e:	4618      	mov	r0, r3
 8004150:	4611      	mov	r1, r2
 8004152:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004156:	623b      	str	r3, [r7, #32]
 8004158:	2300      	movs	r3, #0
 800415a:	627b      	str	r3, [r7, #36]	; 0x24
 800415c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004160:	4642      	mov	r2, r8
 8004162:	464b      	mov	r3, r9
 8004164:	f04f 0000 	mov.w	r0, #0
 8004168:	f04f 0100 	mov.w	r1, #0
 800416c:	0159      	lsls	r1, r3, #5
 800416e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004172:	0150      	lsls	r0, r2, #5
 8004174:	4602      	mov	r2, r0
 8004176:	460b      	mov	r3, r1
 8004178:	4641      	mov	r1, r8
 800417a:	ebb2 0a01 	subs.w	sl, r2, r1
 800417e:	4649      	mov	r1, r9
 8004180:	eb63 0b01 	sbc.w	fp, r3, r1
 8004184:	f04f 0200 	mov.w	r2, #0
 8004188:	f04f 0300 	mov.w	r3, #0
 800418c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004190:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004194:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004198:	ebb2 040a 	subs.w	r4, r2, sl
 800419c:	eb63 050b 	sbc.w	r5, r3, fp
 80041a0:	f04f 0200 	mov.w	r2, #0
 80041a4:	f04f 0300 	mov.w	r3, #0
 80041a8:	00eb      	lsls	r3, r5, #3
 80041aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041ae:	00e2      	lsls	r2, r4, #3
 80041b0:	4614      	mov	r4, r2
 80041b2:	461d      	mov	r5, r3
 80041b4:	4643      	mov	r3, r8
 80041b6:	18e3      	adds	r3, r4, r3
 80041b8:	603b      	str	r3, [r7, #0]
 80041ba:	464b      	mov	r3, r9
 80041bc:	eb45 0303 	adc.w	r3, r5, r3
 80041c0:	607b      	str	r3, [r7, #4]
 80041c2:	f04f 0200 	mov.w	r2, #0
 80041c6:	f04f 0300 	mov.w	r3, #0
 80041ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041ce:	4629      	mov	r1, r5
 80041d0:	028b      	lsls	r3, r1, #10
 80041d2:	4621      	mov	r1, r4
 80041d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041d8:	4621      	mov	r1, r4
 80041da:	028a      	lsls	r2, r1, #10
 80041dc:	4610      	mov	r0, r2
 80041de:	4619      	mov	r1, r3
 80041e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041e2:	2200      	movs	r2, #0
 80041e4:	61bb      	str	r3, [r7, #24]
 80041e6:	61fa      	str	r2, [r7, #28]
 80041e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041ec:	f7fc f872 	bl	80002d4 <__aeabi_uldivmod>
 80041f0:	4602      	mov	r2, r0
 80041f2:	460b      	mov	r3, r1
 80041f4:	4613      	mov	r3, r2
 80041f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80041f8:	4b0b      	ldr	r3, [pc, #44]	; (8004228 <HAL_RCC_GetSysClockFreq+0x200>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	0c1b      	lsrs	r3, r3, #16
 80041fe:	f003 0303 	and.w	r3, r3, #3
 8004202:	3301      	adds	r3, #1
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004208:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800420a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800420c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004210:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004212:	e002      	b.n	800421a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004214:	4b05      	ldr	r3, [pc, #20]	; (800422c <HAL_RCC_GetSysClockFreq+0x204>)
 8004216:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004218:	bf00      	nop
    }
  }
  return sysclockfreq;
 800421a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800421c:	4618      	mov	r0, r3
 800421e:	3750      	adds	r7, #80	; 0x50
 8004220:	46bd      	mov	sp, r7
 8004222:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004226:	bf00      	nop
 8004228:	40023800 	.word	0x40023800
 800422c:	00f42400 	.word	0x00f42400
 8004230:	007a1200 	.word	0x007a1200

08004234 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004238:	4b03      	ldr	r3, [pc, #12]	; (8004248 <HAL_RCC_GetHCLKFreq+0x14>)
 800423a:	681b      	ldr	r3, [r3, #0]
}
 800423c:	4618      	mov	r0, r3
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	20000000 	.word	0x20000000

0800424c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004250:	f7ff fff0 	bl	8004234 <HAL_RCC_GetHCLKFreq>
 8004254:	4602      	mov	r2, r0
 8004256:	4b05      	ldr	r3, [pc, #20]	; (800426c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	0a9b      	lsrs	r3, r3, #10
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	4903      	ldr	r1, [pc, #12]	; (8004270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004262:	5ccb      	ldrb	r3, [r1, r3]
 8004264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004268:	4618      	mov	r0, r3
 800426a:	bd80      	pop	{r7, pc}
 800426c:	40023800 	.word	0x40023800
 8004270:	08009698 	.word	0x08009698

08004274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004278:	f7ff ffdc 	bl	8004234 <HAL_RCC_GetHCLKFreq>
 800427c:	4602      	mov	r2, r0
 800427e:	4b05      	ldr	r3, [pc, #20]	; (8004294 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	0b5b      	lsrs	r3, r3, #13
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	4903      	ldr	r1, [pc, #12]	; (8004298 <HAL_RCC_GetPCLK2Freq+0x24>)
 800428a:	5ccb      	ldrb	r3, [r1, r3]
 800428c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004290:	4618      	mov	r0, r3
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40023800 	.word	0x40023800
 8004298:	08009698 	.word	0x08009698

0800429c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b088      	sub	sp, #32
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80042a4:	2300      	movs	r3, #0
 80042a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80042a8:	2300      	movs	r3, #0
 80042aa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80042ac:	2300      	movs	r3, #0
 80042ae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80042b0:	2300      	movs	r3, #0
 80042b2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80042b4:	2300      	movs	r3, #0
 80042b6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d012      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80042c4:	4b69      	ldr	r3, [pc, #420]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	4a68      	ldr	r2, [pc, #416]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80042ce:	6093      	str	r3, [r2, #8]
 80042d0:	4b66      	ldr	r3, [pc, #408]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d8:	4964      	ldr	r1, [pc, #400]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80042e6:	2301      	movs	r3, #1
 80042e8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d017      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042f6:	4b5d      	ldr	r3, [pc, #372]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004304:	4959      	ldr	r1, [pc, #356]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004306:	4313      	orrs	r3, r2
 8004308:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004310:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004314:	d101      	bne.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004316:	2301      	movs	r3, #1
 8004318:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004322:	2301      	movs	r3, #1
 8004324:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d017      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004332:	4b4e      	ldr	r3, [pc, #312]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004334:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004338:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004340:	494a      	ldr	r1, [pc, #296]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004342:	4313      	orrs	r3, r2
 8004344:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004350:	d101      	bne.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004352:	2301      	movs	r3, #1
 8004354:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800435e:	2301      	movs	r3, #1
 8004360:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800436e:	2301      	movs	r3, #1
 8004370:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0320 	and.w	r3, r3, #32
 800437a:	2b00      	cmp	r3, #0
 800437c:	f000 808b 	beq.w	8004496 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004380:	4b3a      	ldr	r3, [pc, #232]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004384:	4a39      	ldr	r2, [pc, #228]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800438a:	6413      	str	r3, [r2, #64]	; 0x40
 800438c:	4b37      	ldr	r3, [pc, #220]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800438e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004394:	60bb      	str	r3, [r7, #8]
 8004396:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004398:	4b35      	ldr	r3, [pc, #212]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a34      	ldr	r2, [pc, #208]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800439e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043a4:	f7fe faae 	bl	8002904 <HAL_GetTick>
 80043a8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80043aa:	e008      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ac:	f7fe faaa 	bl	8002904 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b64      	cmp	r3, #100	; 0x64
 80043b8:	d901      	bls.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e38f      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80043be:	4b2c      	ldr	r3, [pc, #176]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d0f0      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043ca:	4b28      	ldr	r3, [pc, #160]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043d2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d035      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d02e      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043e8:	4b20      	ldr	r3, [pc, #128]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043f0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043f2:	4b1e      	ldr	r3, [pc, #120]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f6:	4a1d      	ldr	r2, [pc, #116]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043fc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043fe:	4b1b      	ldr	r3, [pc, #108]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004402:	4a1a      	ldr	r2, [pc, #104]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004404:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004408:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800440a:	4a18      	ldr	r2, [pc, #96]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004410:	4b16      	ldr	r3, [pc, #88]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	2b01      	cmp	r3, #1
 800441a:	d114      	bne.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800441c:	f7fe fa72 	bl	8002904 <HAL_GetTick>
 8004420:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004422:	e00a      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004424:	f7fe fa6e 	bl	8002904 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004432:	4293      	cmp	r3, r2
 8004434:	d901      	bls.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e351      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800443a:	4b0c      	ldr	r3, [pc, #48]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800443c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d0ee      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800444e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004452:	d111      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004454:	4b05      	ldr	r3, [pc, #20]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004460:	4b04      	ldr	r3, [pc, #16]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004462:	400b      	ands	r3, r1
 8004464:	4901      	ldr	r1, [pc, #4]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004466:	4313      	orrs	r3, r2
 8004468:	608b      	str	r3, [r1, #8]
 800446a:	e00b      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800446c:	40023800 	.word	0x40023800
 8004470:	40007000 	.word	0x40007000
 8004474:	0ffffcff 	.word	0x0ffffcff
 8004478:	4bac      	ldr	r3, [pc, #688]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	4aab      	ldr	r2, [pc, #684]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800447e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004482:	6093      	str	r3, [r2, #8]
 8004484:	4ba9      	ldr	r3, [pc, #676]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004486:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004490:	49a6      	ldr	r1, [pc, #664]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004492:	4313      	orrs	r3, r2
 8004494:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0310 	and.w	r3, r3, #16
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d010      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044a2:	4ba2      	ldr	r3, [pc, #648]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044a8:	4aa0      	ldr	r2, [pc, #640]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80044b2:	4b9e      	ldr	r3, [pc, #632]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044b4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044bc:	499b      	ldr	r1, [pc, #620]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00a      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044d0:	4b96      	ldr	r3, [pc, #600]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044de:	4993      	ldr	r1, [pc, #588]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00a      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044f2:	4b8e      	ldr	r3, [pc, #568]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004500:	498a      	ldr	r1, [pc, #552]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004502:	4313      	orrs	r3, r2
 8004504:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00a      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004514:	4b85      	ldr	r3, [pc, #532]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004522:	4982      	ldr	r1, [pc, #520]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004524:	4313      	orrs	r3, r2
 8004526:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00a      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004536:	4b7d      	ldr	r3, [pc, #500]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800453c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004544:	4979      	ldr	r1, [pc, #484]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004546:	4313      	orrs	r3, r2
 8004548:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00a      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004558:	4b74      	ldr	r3, [pc, #464]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800455a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455e:	f023 0203 	bic.w	r2, r3, #3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004566:	4971      	ldr	r1, [pc, #452]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004568:	4313      	orrs	r3, r2
 800456a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800457a:	4b6c      	ldr	r3, [pc, #432]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800457c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004580:	f023 020c 	bic.w	r2, r3, #12
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004588:	4968      	ldr	r1, [pc, #416]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800458a:	4313      	orrs	r3, r2
 800458c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00a      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800459c:	4b63      	ldr	r3, [pc, #396]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800459e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045aa:	4960      	ldr	r1, [pc, #384]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00a      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045be:	4b5b      	ldr	r3, [pc, #364]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045cc:	4957      	ldr	r1, [pc, #348]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00a      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045e0:	4b52      	ldr	r3, [pc, #328]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ee:	494f      	ldr	r1, [pc, #316]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004602:	4b4a      	ldr	r3, [pc, #296]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004608:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004610:	4946      	ldr	r1, [pc, #280]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004612:	4313      	orrs	r3, r2
 8004614:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00a      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004624:	4b41      	ldr	r3, [pc, #260]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004632:	493e      	ldr	r1, [pc, #248]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004634:	4313      	orrs	r3, r2
 8004636:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00a      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004646:	4b39      	ldr	r3, [pc, #228]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800464c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004654:	4935      	ldr	r1, [pc, #212]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004656:	4313      	orrs	r3, r2
 8004658:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00a      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004668:	4b30      	ldr	r3, [pc, #192]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800466a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800466e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004676:	492d      	ldr	r1, [pc, #180]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004678:	4313      	orrs	r3, r2
 800467a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d011      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800468a:	4b28      	ldr	r3, [pc, #160]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800468c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004690:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004698:	4924      	ldr	r1, [pc, #144]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800469a:	4313      	orrs	r3, r2
 800469c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046a8:	d101      	bne.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80046aa:	2301      	movs	r3, #1
 80046ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0308 	and.w	r3, r3, #8
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80046ba:	2301      	movs	r3, #1
 80046bc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00a      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046ca:	4b18      	ldr	r3, [pc, #96]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046d8:	4914      	ldr	r1, [pc, #80]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00b      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046ec:	4b0f      	ldr	r3, [pc, #60]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046fc:	490b      	ldr	r1, [pc, #44]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00f      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004710:	4b06      	ldr	r3, [pc, #24]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004716:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004720:	4902      	ldr	r1, [pc, #8]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004722:	4313      	orrs	r3, r2
 8004724:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004728:	e002      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800472a:	bf00      	nop
 800472c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00b      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800473c:	4b8a      	ldr	r3, [pc, #552]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800473e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004742:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474c:	4986      	ldr	r1, [pc, #536]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800474e:	4313      	orrs	r3, r2
 8004750:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00b      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004760:	4b81      	ldr	r3, [pc, #516]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004762:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004766:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004770:	497d      	ldr	r1, [pc, #500]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004772:	4313      	orrs	r3, r2
 8004774:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d006      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004786:	2b00      	cmp	r3, #0
 8004788:	f000 80d6 	beq.w	8004938 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800478c:	4b76      	ldr	r3, [pc, #472]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a75      	ldr	r2, [pc, #468]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004792:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004796:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004798:	f7fe f8b4 	bl	8002904 <HAL_GetTick>
 800479c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800479e:	e008      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80047a0:	f7fe f8b0 	bl	8002904 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b64      	cmp	r3, #100	; 0x64
 80047ac:	d901      	bls.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e195      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047b2:	4b6d      	ldr	r3, [pc, #436]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1f0      	bne.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d021      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d11d      	bne.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80047d2:	4b65      	ldr	r3, [pc, #404]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047d8:	0c1b      	lsrs	r3, r3, #16
 80047da:	f003 0303 	and.w	r3, r3, #3
 80047de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80047e0:	4b61      	ldr	r3, [pc, #388]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047e6:	0e1b      	lsrs	r3, r3, #24
 80047e8:	f003 030f 	and.w	r3, r3, #15
 80047ec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	019a      	lsls	r2, r3, #6
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	041b      	lsls	r3, r3, #16
 80047f8:	431a      	orrs	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	061b      	lsls	r3, r3, #24
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	071b      	lsls	r3, r3, #28
 8004806:	4958      	ldr	r1, [pc, #352]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004808:	4313      	orrs	r3, r2
 800480a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d004      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800481e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004822:	d00a      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800482c:	2b00      	cmp	r3, #0
 800482e:	d02e      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004834:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004838:	d129      	bne.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800483a:	4b4b      	ldr	r3, [pc, #300]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800483c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004840:	0c1b      	lsrs	r3, r3, #16
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004848:	4b47      	ldr	r3, [pc, #284]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800484a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800484e:	0f1b      	lsrs	r3, r3, #28
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	019a      	lsls	r2, r3, #6
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	041b      	lsls	r3, r3, #16
 8004860:	431a      	orrs	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	061b      	lsls	r3, r3, #24
 8004868:	431a      	orrs	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	071b      	lsls	r3, r3, #28
 800486e:	493e      	ldr	r1, [pc, #248]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004870:	4313      	orrs	r3, r2
 8004872:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004876:	4b3c      	ldr	r3, [pc, #240]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004878:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800487c:	f023 021f 	bic.w	r2, r3, #31
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	3b01      	subs	r3, #1
 8004886:	4938      	ldr	r1, [pc, #224]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004888:	4313      	orrs	r3, r2
 800488a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d01d      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800489a:	4b33      	ldr	r3, [pc, #204]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800489c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048a0:	0e1b      	lsrs	r3, r3, #24
 80048a2:	f003 030f 	and.w	r3, r3, #15
 80048a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80048a8:	4b2f      	ldr	r3, [pc, #188]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ae:	0f1b      	lsrs	r3, r3, #28
 80048b0:	f003 0307 	and.w	r3, r3, #7
 80048b4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	019a      	lsls	r2, r3, #6
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	041b      	lsls	r3, r3, #16
 80048c2:	431a      	orrs	r2, r3
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	061b      	lsls	r3, r3, #24
 80048c8:	431a      	orrs	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	071b      	lsls	r3, r3, #28
 80048ce:	4926      	ldr	r1, [pc, #152]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d011      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	019a      	lsls	r2, r3, #6
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	041b      	lsls	r3, r3, #16
 80048ee:	431a      	orrs	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	061b      	lsls	r3, r3, #24
 80048f6:	431a      	orrs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	071b      	lsls	r3, r3, #28
 80048fe:	491a      	ldr	r1, [pc, #104]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004900:	4313      	orrs	r3, r2
 8004902:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004906:	4b18      	ldr	r3, [pc, #96]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a17      	ldr	r2, [pc, #92]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800490c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004910:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004912:	f7fd fff7 	bl	8002904 <HAL_GetTick>
 8004916:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004918:	e008      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800491a:	f7fd fff3 	bl	8002904 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b64      	cmp	r3, #100	; 0x64
 8004926:	d901      	bls.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e0d8      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800492c:	4b0e      	ldr	r3, [pc, #56]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0f0      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	2b01      	cmp	r3, #1
 800493c:	f040 80ce 	bne.w	8004adc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004940:	4b09      	ldr	r3, [pc, #36]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a08      	ldr	r2, [pc, #32]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004946:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800494a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800494c:	f7fd ffda 	bl	8002904 <HAL_GetTick>
 8004950:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004952:	e00b      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004954:	f7fd ffd6 	bl	8002904 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b64      	cmp	r3, #100	; 0x64
 8004960:	d904      	bls.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e0bb      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004966:	bf00      	nop
 8004968:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800496c:	4b5e      	ldr	r3, [pc, #376]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004974:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004978:	d0ec      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800498a:	2b00      	cmp	r3, #0
 800498c:	d009      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004996:	2b00      	cmp	r3, #0
 8004998:	d02e      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d12a      	bne.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80049a2:	4b51      	ldr	r3, [pc, #324]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a8:	0c1b      	lsrs	r3, r3, #16
 80049aa:	f003 0303 	and.w	r3, r3, #3
 80049ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80049b0:	4b4d      	ldr	r3, [pc, #308]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b6:	0f1b      	lsrs	r3, r3, #28
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	019a      	lsls	r2, r3, #6
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	041b      	lsls	r3, r3, #16
 80049c8:	431a      	orrs	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	061b      	lsls	r3, r3, #24
 80049d0:	431a      	orrs	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	071b      	lsls	r3, r3, #28
 80049d6:	4944      	ldr	r1, [pc, #272]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80049de:	4b42      	ldr	r3, [pc, #264]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049e4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ec:	3b01      	subs	r3, #1
 80049ee:	021b      	lsls	r3, r3, #8
 80049f0:	493d      	ldr	r1, [pc, #244]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d022      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a0c:	d11d      	bne.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a0e:	4b36      	ldr	r3, [pc, #216]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a14:	0e1b      	lsrs	r3, r3, #24
 8004a16:	f003 030f 	and.w	r3, r3, #15
 8004a1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a1c:	4b32      	ldr	r3, [pc, #200]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a22:	0f1b      	lsrs	r3, r3, #28
 8004a24:	f003 0307 	and.w	r3, r3, #7
 8004a28:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	019a      	lsls	r2, r3, #6
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	041b      	lsls	r3, r3, #16
 8004a36:	431a      	orrs	r2, r3
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	061b      	lsls	r3, r3, #24
 8004a3c:	431a      	orrs	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	071b      	lsls	r3, r3, #28
 8004a42:	4929      	ldr	r1, [pc, #164]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0308 	and.w	r3, r3, #8
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d028      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a56:	4b24      	ldr	r3, [pc, #144]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a5c:	0e1b      	lsrs	r3, r3, #24
 8004a5e:	f003 030f 	and.w	r3, r3, #15
 8004a62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a64:	4b20      	ldr	r3, [pc, #128]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6a:	0c1b      	lsrs	r3, r3, #16
 8004a6c:	f003 0303 	and.w	r3, r3, #3
 8004a70:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	019a      	lsls	r2, r3, #6
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	041b      	lsls	r3, r3, #16
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	061b      	lsls	r3, r3, #24
 8004a82:	431a      	orrs	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	69db      	ldr	r3, [r3, #28]
 8004a88:	071b      	lsls	r3, r3, #28
 8004a8a:	4917      	ldr	r1, [pc, #92]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004a92:	4b15      	ldr	r3, [pc, #84]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa0:	4911      	ldr	r1, [pc, #68]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004aa8:	4b0f      	ldr	r3, [pc, #60]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a0e      	ldr	r2, [pc, #56]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ab2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ab4:	f7fd ff26 	bl	8002904 <HAL_GetTick>
 8004ab8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004aba:	e008      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004abc:	f7fd ff22 	bl	8002904 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b64      	cmp	r3, #100	; 0x64
 8004ac8:	d901      	bls.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e007      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ace:	4b06      	ldr	r3, [pc, #24]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ad6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ada:	d1ef      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3720      	adds	r7, #32
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	40023800 	.word	0x40023800

08004aec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e040      	b.n	8004b80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d106      	bne.n	8004b14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7fd fca0 	bl	8002454 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2224      	movs	r2, #36	; 0x24
 8004b18:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0201 	bic.w	r2, r2, #1
 8004b28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f82c 	bl	8004b88 <UART_SetConfig>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d101      	bne.n	8004b3a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e022      	b.n	8004b80 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 fa84 	bl	8005050 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689a      	ldr	r2, [r3, #8]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f042 0201 	orr.w	r2, r2, #1
 8004b76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 fb0b 	bl	8005194 <UART_CheckIdleState>
 8004b7e:	4603      	mov	r3, r0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3708      	adds	r7, #8
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b088      	sub	sp, #32
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b90:	2300      	movs	r3, #0
 8004b92:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	431a      	orrs	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	69db      	ldr	r3, [r3, #28]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	4ba6      	ldr	r3, [pc, #664]	; (8004e4c <UART_SetConfig+0x2c4>)
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	6812      	ldr	r2, [r2, #0]
 8004bba:	6979      	ldr	r1, [r7, #20]
 8004bbc:	430b      	orrs	r3, r1
 8004bbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68da      	ldr	r2, [r3, #12]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a94      	ldr	r2, [pc, #592]	; (8004e50 <UART_SetConfig+0x2c8>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d120      	bne.n	8004c46 <UART_SetConfig+0xbe>
 8004c04:	4b93      	ldr	r3, [pc, #588]	; (8004e54 <UART_SetConfig+0x2cc>)
 8004c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c0a:	f003 0303 	and.w	r3, r3, #3
 8004c0e:	2b03      	cmp	r3, #3
 8004c10:	d816      	bhi.n	8004c40 <UART_SetConfig+0xb8>
 8004c12:	a201      	add	r2, pc, #4	; (adr r2, 8004c18 <UART_SetConfig+0x90>)
 8004c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c18:	08004c29 	.word	0x08004c29
 8004c1c:	08004c35 	.word	0x08004c35
 8004c20:	08004c2f 	.word	0x08004c2f
 8004c24:	08004c3b 	.word	0x08004c3b
 8004c28:	2301      	movs	r3, #1
 8004c2a:	77fb      	strb	r3, [r7, #31]
 8004c2c:	e150      	b.n	8004ed0 <UART_SetConfig+0x348>
 8004c2e:	2302      	movs	r3, #2
 8004c30:	77fb      	strb	r3, [r7, #31]
 8004c32:	e14d      	b.n	8004ed0 <UART_SetConfig+0x348>
 8004c34:	2304      	movs	r3, #4
 8004c36:	77fb      	strb	r3, [r7, #31]
 8004c38:	e14a      	b.n	8004ed0 <UART_SetConfig+0x348>
 8004c3a:	2308      	movs	r3, #8
 8004c3c:	77fb      	strb	r3, [r7, #31]
 8004c3e:	e147      	b.n	8004ed0 <UART_SetConfig+0x348>
 8004c40:	2310      	movs	r3, #16
 8004c42:	77fb      	strb	r3, [r7, #31]
 8004c44:	e144      	b.n	8004ed0 <UART_SetConfig+0x348>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a83      	ldr	r2, [pc, #524]	; (8004e58 <UART_SetConfig+0x2d0>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d132      	bne.n	8004cb6 <UART_SetConfig+0x12e>
 8004c50:	4b80      	ldr	r3, [pc, #512]	; (8004e54 <UART_SetConfig+0x2cc>)
 8004c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c56:	f003 030c 	and.w	r3, r3, #12
 8004c5a:	2b0c      	cmp	r3, #12
 8004c5c:	d828      	bhi.n	8004cb0 <UART_SetConfig+0x128>
 8004c5e:	a201      	add	r2, pc, #4	; (adr r2, 8004c64 <UART_SetConfig+0xdc>)
 8004c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c64:	08004c99 	.word	0x08004c99
 8004c68:	08004cb1 	.word	0x08004cb1
 8004c6c:	08004cb1 	.word	0x08004cb1
 8004c70:	08004cb1 	.word	0x08004cb1
 8004c74:	08004ca5 	.word	0x08004ca5
 8004c78:	08004cb1 	.word	0x08004cb1
 8004c7c:	08004cb1 	.word	0x08004cb1
 8004c80:	08004cb1 	.word	0x08004cb1
 8004c84:	08004c9f 	.word	0x08004c9f
 8004c88:	08004cb1 	.word	0x08004cb1
 8004c8c:	08004cb1 	.word	0x08004cb1
 8004c90:	08004cb1 	.word	0x08004cb1
 8004c94:	08004cab 	.word	0x08004cab
 8004c98:	2300      	movs	r3, #0
 8004c9a:	77fb      	strb	r3, [r7, #31]
 8004c9c:	e118      	b.n	8004ed0 <UART_SetConfig+0x348>
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	77fb      	strb	r3, [r7, #31]
 8004ca2:	e115      	b.n	8004ed0 <UART_SetConfig+0x348>
 8004ca4:	2304      	movs	r3, #4
 8004ca6:	77fb      	strb	r3, [r7, #31]
 8004ca8:	e112      	b.n	8004ed0 <UART_SetConfig+0x348>
 8004caa:	2308      	movs	r3, #8
 8004cac:	77fb      	strb	r3, [r7, #31]
 8004cae:	e10f      	b.n	8004ed0 <UART_SetConfig+0x348>
 8004cb0:	2310      	movs	r3, #16
 8004cb2:	77fb      	strb	r3, [r7, #31]
 8004cb4:	e10c      	b.n	8004ed0 <UART_SetConfig+0x348>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a68      	ldr	r2, [pc, #416]	; (8004e5c <UART_SetConfig+0x2d4>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d120      	bne.n	8004d02 <UART_SetConfig+0x17a>
 8004cc0:	4b64      	ldr	r3, [pc, #400]	; (8004e54 <UART_SetConfig+0x2cc>)
 8004cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004cca:	2b30      	cmp	r3, #48	; 0x30
 8004ccc:	d013      	beq.n	8004cf6 <UART_SetConfig+0x16e>
 8004cce:	2b30      	cmp	r3, #48	; 0x30
 8004cd0:	d814      	bhi.n	8004cfc <UART_SetConfig+0x174>
 8004cd2:	2b20      	cmp	r3, #32
 8004cd4:	d009      	beq.n	8004cea <UART_SetConfig+0x162>
 8004cd6:	2b20      	cmp	r3, #32
 8004cd8:	d810      	bhi.n	8004cfc <UART_SetConfig+0x174>
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d002      	beq.n	8004ce4 <UART_SetConfig+0x15c>
 8004cde:	2b10      	cmp	r3, #16
 8004ce0:	d006      	beq.n	8004cf0 <UART_SetConfig+0x168>
 8004ce2:	e00b      	b.n	8004cfc <UART_SetConfig+0x174>
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	77fb      	strb	r3, [r7, #31]
 8004ce8:	e0f2      	b.n	8004ed0 <UART_SetConfig+0x348>
 8004cea:	2302      	movs	r3, #2
 8004cec:	77fb      	strb	r3, [r7, #31]
 8004cee:	e0ef      	b.n	8004ed0 <UART_SetConfig+0x348>
 8004cf0:	2304      	movs	r3, #4
 8004cf2:	77fb      	strb	r3, [r7, #31]
 8004cf4:	e0ec      	b.n	8004ed0 <UART_SetConfig+0x348>
 8004cf6:	2308      	movs	r3, #8
 8004cf8:	77fb      	strb	r3, [r7, #31]
 8004cfa:	e0e9      	b.n	8004ed0 <UART_SetConfig+0x348>
 8004cfc:	2310      	movs	r3, #16
 8004cfe:	77fb      	strb	r3, [r7, #31]
 8004d00:	e0e6      	b.n	8004ed0 <UART_SetConfig+0x348>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a56      	ldr	r2, [pc, #344]	; (8004e60 <UART_SetConfig+0x2d8>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d120      	bne.n	8004d4e <UART_SetConfig+0x1c6>
 8004d0c:	4b51      	ldr	r3, [pc, #324]	; (8004e54 <UART_SetConfig+0x2cc>)
 8004d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d16:	2bc0      	cmp	r3, #192	; 0xc0
 8004d18:	d013      	beq.n	8004d42 <UART_SetConfig+0x1ba>
 8004d1a:	2bc0      	cmp	r3, #192	; 0xc0
 8004d1c:	d814      	bhi.n	8004d48 <UART_SetConfig+0x1c0>
 8004d1e:	2b80      	cmp	r3, #128	; 0x80
 8004d20:	d009      	beq.n	8004d36 <UART_SetConfig+0x1ae>
 8004d22:	2b80      	cmp	r3, #128	; 0x80
 8004d24:	d810      	bhi.n	8004d48 <UART_SetConfig+0x1c0>
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d002      	beq.n	8004d30 <UART_SetConfig+0x1a8>
 8004d2a:	2b40      	cmp	r3, #64	; 0x40
 8004d2c:	d006      	beq.n	8004d3c <UART_SetConfig+0x1b4>
 8004d2e:	e00b      	b.n	8004d48 <UART_SetConfig+0x1c0>
 8004d30:	2300      	movs	r3, #0
 8004d32:	77fb      	strb	r3, [r7, #31]
 8004d34:	e0cc      	b.n	8004ed0 <UART_SetConfig+0x348>
 8004d36:	2302      	movs	r3, #2
 8004d38:	77fb      	strb	r3, [r7, #31]
 8004d3a:	e0c9      	b.n	8004ed0 <UART_SetConfig+0x348>
 8004d3c:	2304      	movs	r3, #4
 8004d3e:	77fb      	strb	r3, [r7, #31]
 8004d40:	e0c6      	b.n	8004ed0 <UART_SetConfig+0x348>
 8004d42:	2308      	movs	r3, #8
 8004d44:	77fb      	strb	r3, [r7, #31]
 8004d46:	e0c3      	b.n	8004ed0 <UART_SetConfig+0x348>
 8004d48:	2310      	movs	r3, #16
 8004d4a:	77fb      	strb	r3, [r7, #31]
 8004d4c:	e0c0      	b.n	8004ed0 <UART_SetConfig+0x348>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a44      	ldr	r2, [pc, #272]	; (8004e64 <UART_SetConfig+0x2dc>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d125      	bne.n	8004da4 <UART_SetConfig+0x21c>
 8004d58:	4b3e      	ldr	r3, [pc, #248]	; (8004e54 <UART_SetConfig+0x2cc>)
 8004d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d66:	d017      	beq.n	8004d98 <UART_SetConfig+0x210>
 8004d68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d6c:	d817      	bhi.n	8004d9e <UART_SetConfig+0x216>
 8004d6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d72:	d00b      	beq.n	8004d8c <UART_SetConfig+0x204>
 8004d74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d78:	d811      	bhi.n	8004d9e <UART_SetConfig+0x216>
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d003      	beq.n	8004d86 <UART_SetConfig+0x1fe>
 8004d7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d82:	d006      	beq.n	8004d92 <UART_SetConfig+0x20a>
 8004d84:	e00b      	b.n	8004d9e <UART_SetConfig+0x216>
 8004d86:	2300      	movs	r3, #0
 8004d88:	77fb      	strb	r3, [r7, #31]
 8004d8a:	e0a1      	b.n	8004ed0 <UART_SetConfig+0x348>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	77fb      	strb	r3, [r7, #31]
 8004d90:	e09e      	b.n	8004ed0 <UART_SetConfig+0x348>
 8004d92:	2304      	movs	r3, #4
 8004d94:	77fb      	strb	r3, [r7, #31]
 8004d96:	e09b      	b.n	8004ed0 <UART_SetConfig+0x348>
 8004d98:	2308      	movs	r3, #8
 8004d9a:	77fb      	strb	r3, [r7, #31]
 8004d9c:	e098      	b.n	8004ed0 <UART_SetConfig+0x348>
 8004d9e:	2310      	movs	r3, #16
 8004da0:	77fb      	strb	r3, [r7, #31]
 8004da2:	e095      	b.n	8004ed0 <UART_SetConfig+0x348>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a2f      	ldr	r2, [pc, #188]	; (8004e68 <UART_SetConfig+0x2e0>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d125      	bne.n	8004dfa <UART_SetConfig+0x272>
 8004dae:	4b29      	ldr	r3, [pc, #164]	; (8004e54 <UART_SetConfig+0x2cc>)
 8004db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004db8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004dbc:	d017      	beq.n	8004dee <UART_SetConfig+0x266>
 8004dbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004dc2:	d817      	bhi.n	8004df4 <UART_SetConfig+0x26c>
 8004dc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dc8:	d00b      	beq.n	8004de2 <UART_SetConfig+0x25a>
 8004dca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dce:	d811      	bhi.n	8004df4 <UART_SetConfig+0x26c>
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d003      	beq.n	8004ddc <UART_SetConfig+0x254>
 8004dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dd8:	d006      	beq.n	8004de8 <UART_SetConfig+0x260>
 8004dda:	e00b      	b.n	8004df4 <UART_SetConfig+0x26c>
 8004ddc:	2301      	movs	r3, #1
 8004dde:	77fb      	strb	r3, [r7, #31]
 8004de0:	e076      	b.n	8004ed0 <UART_SetConfig+0x348>
 8004de2:	2302      	movs	r3, #2
 8004de4:	77fb      	strb	r3, [r7, #31]
 8004de6:	e073      	b.n	8004ed0 <UART_SetConfig+0x348>
 8004de8:	2304      	movs	r3, #4
 8004dea:	77fb      	strb	r3, [r7, #31]
 8004dec:	e070      	b.n	8004ed0 <UART_SetConfig+0x348>
 8004dee:	2308      	movs	r3, #8
 8004df0:	77fb      	strb	r3, [r7, #31]
 8004df2:	e06d      	b.n	8004ed0 <UART_SetConfig+0x348>
 8004df4:	2310      	movs	r3, #16
 8004df6:	77fb      	strb	r3, [r7, #31]
 8004df8:	e06a      	b.n	8004ed0 <UART_SetConfig+0x348>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a1b      	ldr	r2, [pc, #108]	; (8004e6c <UART_SetConfig+0x2e4>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d138      	bne.n	8004e76 <UART_SetConfig+0x2ee>
 8004e04:	4b13      	ldr	r3, [pc, #76]	; (8004e54 <UART_SetConfig+0x2cc>)
 8004e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e0a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004e0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e12:	d017      	beq.n	8004e44 <UART_SetConfig+0x2bc>
 8004e14:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e18:	d82a      	bhi.n	8004e70 <UART_SetConfig+0x2e8>
 8004e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e1e:	d00b      	beq.n	8004e38 <UART_SetConfig+0x2b0>
 8004e20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e24:	d824      	bhi.n	8004e70 <UART_SetConfig+0x2e8>
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <UART_SetConfig+0x2aa>
 8004e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e2e:	d006      	beq.n	8004e3e <UART_SetConfig+0x2b6>
 8004e30:	e01e      	b.n	8004e70 <UART_SetConfig+0x2e8>
 8004e32:	2300      	movs	r3, #0
 8004e34:	77fb      	strb	r3, [r7, #31]
 8004e36:	e04b      	b.n	8004ed0 <UART_SetConfig+0x348>
 8004e38:	2302      	movs	r3, #2
 8004e3a:	77fb      	strb	r3, [r7, #31]
 8004e3c:	e048      	b.n	8004ed0 <UART_SetConfig+0x348>
 8004e3e:	2304      	movs	r3, #4
 8004e40:	77fb      	strb	r3, [r7, #31]
 8004e42:	e045      	b.n	8004ed0 <UART_SetConfig+0x348>
 8004e44:	2308      	movs	r3, #8
 8004e46:	77fb      	strb	r3, [r7, #31]
 8004e48:	e042      	b.n	8004ed0 <UART_SetConfig+0x348>
 8004e4a:	bf00      	nop
 8004e4c:	efff69f3 	.word	0xefff69f3
 8004e50:	40011000 	.word	0x40011000
 8004e54:	40023800 	.word	0x40023800
 8004e58:	40004400 	.word	0x40004400
 8004e5c:	40004800 	.word	0x40004800
 8004e60:	40004c00 	.word	0x40004c00
 8004e64:	40005000 	.word	0x40005000
 8004e68:	40011400 	.word	0x40011400
 8004e6c:	40007800 	.word	0x40007800
 8004e70:	2310      	movs	r3, #16
 8004e72:	77fb      	strb	r3, [r7, #31]
 8004e74:	e02c      	b.n	8004ed0 <UART_SetConfig+0x348>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a72      	ldr	r2, [pc, #456]	; (8005044 <UART_SetConfig+0x4bc>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d125      	bne.n	8004ecc <UART_SetConfig+0x344>
 8004e80:	4b71      	ldr	r3, [pc, #452]	; (8005048 <UART_SetConfig+0x4c0>)
 8004e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e86:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004e8a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e8e:	d017      	beq.n	8004ec0 <UART_SetConfig+0x338>
 8004e90:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e94:	d817      	bhi.n	8004ec6 <UART_SetConfig+0x33e>
 8004e96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e9a:	d00b      	beq.n	8004eb4 <UART_SetConfig+0x32c>
 8004e9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ea0:	d811      	bhi.n	8004ec6 <UART_SetConfig+0x33e>
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d003      	beq.n	8004eae <UART_SetConfig+0x326>
 8004ea6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004eaa:	d006      	beq.n	8004eba <UART_SetConfig+0x332>
 8004eac:	e00b      	b.n	8004ec6 <UART_SetConfig+0x33e>
 8004eae:	2300      	movs	r3, #0
 8004eb0:	77fb      	strb	r3, [r7, #31]
 8004eb2:	e00d      	b.n	8004ed0 <UART_SetConfig+0x348>
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	77fb      	strb	r3, [r7, #31]
 8004eb8:	e00a      	b.n	8004ed0 <UART_SetConfig+0x348>
 8004eba:	2304      	movs	r3, #4
 8004ebc:	77fb      	strb	r3, [r7, #31]
 8004ebe:	e007      	b.n	8004ed0 <UART_SetConfig+0x348>
 8004ec0:	2308      	movs	r3, #8
 8004ec2:	77fb      	strb	r3, [r7, #31]
 8004ec4:	e004      	b.n	8004ed0 <UART_SetConfig+0x348>
 8004ec6:	2310      	movs	r3, #16
 8004ec8:	77fb      	strb	r3, [r7, #31]
 8004eca:	e001      	b.n	8004ed0 <UART_SetConfig+0x348>
 8004ecc:	2310      	movs	r3, #16
 8004ece:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	69db      	ldr	r3, [r3, #28]
 8004ed4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ed8:	d15b      	bne.n	8004f92 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004eda:	7ffb      	ldrb	r3, [r7, #31]
 8004edc:	2b08      	cmp	r3, #8
 8004ede:	d828      	bhi.n	8004f32 <UART_SetConfig+0x3aa>
 8004ee0:	a201      	add	r2, pc, #4	; (adr r2, 8004ee8 <UART_SetConfig+0x360>)
 8004ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee6:	bf00      	nop
 8004ee8:	08004f0d 	.word	0x08004f0d
 8004eec:	08004f15 	.word	0x08004f15
 8004ef0:	08004f1d 	.word	0x08004f1d
 8004ef4:	08004f33 	.word	0x08004f33
 8004ef8:	08004f23 	.word	0x08004f23
 8004efc:	08004f33 	.word	0x08004f33
 8004f00:	08004f33 	.word	0x08004f33
 8004f04:	08004f33 	.word	0x08004f33
 8004f08:	08004f2b 	.word	0x08004f2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f0c:	f7ff f99e 	bl	800424c <HAL_RCC_GetPCLK1Freq>
 8004f10:	61b8      	str	r0, [r7, #24]
        break;
 8004f12:	e013      	b.n	8004f3c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f14:	f7ff f9ae 	bl	8004274 <HAL_RCC_GetPCLK2Freq>
 8004f18:	61b8      	str	r0, [r7, #24]
        break;
 8004f1a:	e00f      	b.n	8004f3c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f1c:	4b4b      	ldr	r3, [pc, #300]	; (800504c <UART_SetConfig+0x4c4>)
 8004f1e:	61bb      	str	r3, [r7, #24]
        break;
 8004f20:	e00c      	b.n	8004f3c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f22:	f7ff f881 	bl	8004028 <HAL_RCC_GetSysClockFreq>
 8004f26:	61b8      	str	r0, [r7, #24]
        break;
 8004f28:	e008      	b.n	8004f3c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f2e:	61bb      	str	r3, [r7, #24]
        break;
 8004f30:	e004      	b.n	8004f3c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004f32:	2300      	movs	r3, #0
 8004f34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	77bb      	strb	r3, [r7, #30]
        break;
 8004f3a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d074      	beq.n	800502c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	005a      	lsls	r2, r3, #1
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	085b      	lsrs	r3, r3, #1
 8004f4c:	441a      	add	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f56:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	2b0f      	cmp	r3, #15
 8004f5c:	d916      	bls.n	8004f8c <UART_SetConfig+0x404>
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f64:	d212      	bcs.n	8004f8c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	f023 030f 	bic.w	r3, r3, #15
 8004f6e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	085b      	lsrs	r3, r3, #1
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	f003 0307 	and.w	r3, r3, #7
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	89fb      	ldrh	r3, [r7, #14]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	89fa      	ldrh	r2, [r7, #14]
 8004f88:	60da      	str	r2, [r3, #12]
 8004f8a:	e04f      	b.n	800502c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	77bb      	strb	r3, [r7, #30]
 8004f90:	e04c      	b.n	800502c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f92:	7ffb      	ldrb	r3, [r7, #31]
 8004f94:	2b08      	cmp	r3, #8
 8004f96:	d828      	bhi.n	8004fea <UART_SetConfig+0x462>
 8004f98:	a201      	add	r2, pc, #4	; (adr r2, 8004fa0 <UART_SetConfig+0x418>)
 8004f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9e:	bf00      	nop
 8004fa0:	08004fc5 	.word	0x08004fc5
 8004fa4:	08004fcd 	.word	0x08004fcd
 8004fa8:	08004fd5 	.word	0x08004fd5
 8004fac:	08004feb 	.word	0x08004feb
 8004fb0:	08004fdb 	.word	0x08004fdb
 8004fb4:	08004feb 	.word	0x08004feb
 8004fb8:	08004feb 	.word	0x08004feb
 8004fbc:	08004feb 	.word	0x08004feb
 8004fc0:	08004fe3 	.word	0x08004fe3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fc4:	f7ff f942 	bl	800424c <HAL_RCC_GetPCLK1Freq>
 8004fc8:	61b8      	str	r0, [r7, #24]
        break;
 8004fca:	e013      	b.n	8004ff4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fcc:	f7ff f952 	bl	8004274 <HAL_RCC_GetPCLK2Freq>
 8004fd0:	61b8      	str	r0, [r7, #24]
        break;
 8004fd2:	e00f      	b.n	8004ff4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fd4:	4b1d      	ldr	r3, [pc, #116]	; (800504c <UART_SetConfig+0x4c4>)
 8004fd6:	61bb      	str	r3, [r7, #24]
        break;
 8004fd8:	e00c      	b.n	8004ff4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fda:	f7ff f825 	bl	8004028 <HAL_RCC_GetSysClockFreq>
 8004fde:	61b8      	str	r0, [r7, #24]
        break;
 8004fe0:	e008      	b.n	8004ff4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fe6:	61bb      	str	r3, [r7, #24]
        break;
 8004fe8:	e004      	b.n	8004ff4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004fea:	2300      	movs	r3, #0
 8004fec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	77bb      	strb	r3, [r7, #30]
        break;
 8004ff2:	bf00      	nop
    }

    if (pclk != 0U)
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d018      	beq.n	800502c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	085a      	lsrs	r2, r3, #1
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	441a      	add	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	fbb2 f3f3 	udiv	r3, r2, r3
 800500c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	2b0f      	cmp	r3, #15
 8005012:	d909      	bls.n	8005028 <UART_SetConfig+0x4a0>
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800501a:	d205      	bcs.n	8005028 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	b29a      	uxth	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	60da      	str	r2, [r3, #12]
 8005026:	e001      	b.n	800502c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005038:	7fbb      	ldrb	r3, [r7, #30]
}
 800503a:	4618      	mov	r0, r3
 800503c:	3720      	adds	r7, #32
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	40007c00 	.word	0x40007c00
 8005048:	40023800 	.word	0x40023800
 800504c:	00f42400 	.word	0x00f42400

08005050 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00a      	beq.n	800507a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	430a      	orrs	r2, r1
 8005078:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00a      	beq.n	800509c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	430a      	orrs	r2, r1
 800509a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a0:	f003 0304 	and.w	r3, r3, #4
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00a      	beq.n	80050be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c2:	f003 0308 	and.w	r3, r3, #8
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00a      	beq.n	80050e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	430a      	orrs	r2, r1
 80050de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e4:	f003 0310 	and.w	r3, r3, #16
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00a      	beq.n	8005102 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	430a      	orrs	r2, r1
 8005100:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005106:	f003 0320 	and.w	r3, r3, #32
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00a      	beq.n	8005124 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800512c:	2b00      	cmp	r3, #0
 800512e:	d01a      	beq.n	8005166 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800514e:	d10a      	bne.n	8005166 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00a      	beq.n	8005188 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	430a      	orrs	r2, r1
 8005186:	605a      	str	r2, [r3, #4]
  }
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af02      	add	r7, sp, #8
 800519a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051a4:	f7fd fbae 	bl	8002904 <HAL_GetTick>
 80051a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0308 	and.w	r3, r3, #8
 80051b4:	2b08      	cmp	r3, #8
 80051b6:	d10e      	bne.n	80051d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f831 	bl	800522e <UART_WaitOnFlagUntilTimeout>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e027      	b.n	8005226 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0304 	and.w	r3, r3, #4
 80051e0:	2b04      	cmp	r3, #4
 80051e2:	d10e      	bne.n	8005202 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051e8:	9300      	str	r3, [sp, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 f81b 	bl	800522e <UART_WaitOnFlagUntilTimeout>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e011      	b.n	8005226 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2220      	movs	r2, #32
 8005206:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2220      	movs	r2, #32
 800520c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b09c      	sub	sp, #112	; 0x70
 8005232:	af00      	add	r7, sp, #0
 8005234:	60f8      	str	r0, [r7, #12]
 8005236:	60b9      	str	r1, [r7, #8]
 8005238:	603b      	str	r3, [r7, #0]
 800523a:	4613      	mov	r3, r2
 800523c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800523e:	e0a7      	b.n	8005390 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005240:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005246:	f000 80a3 	beq.w	8005390 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800524a:	f7fd fb5b 	bl	8002904 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005256:	429a      	cmp	r2, r3
 8005258:	d302      	bcc.n	8005260 <UART_WaitOnFlagUntilTimeout+0x32>
 800525a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800525c:	2b00      	cmp	r3, #0
 800525e:	d13f      	bne.n	80052e0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005268:	e853 3f00 	ldrex	r3, [r3]
 800526c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800526e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005270:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005274:	667b      	str	r3, [r7, #100]	; 0x64
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	461a      	mov	r2, r3
 800527c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800527e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005280:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005282:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005284:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005286:	e841 2300 	strex	r3, r2, [r1]
 800528a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800528c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1e6      	bne.n	8005260 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	3308      	adds	r3, #8
 8005298:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800529c:	e853 3f00 	ldrex	r3, [r3]
 80052a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a4:	f023 0301 	bic.w	r3, r3, #1
 80052a8:	663b      	str	r3, [r7, #96]	; 0x60
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	3308      	adds	r3, #8
 80052b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80052b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80052b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052ba:	e841 2300 	strex	r3, r2, [r1]
 80052be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80052c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1e5      	bne.n	8005292 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2220      	movs	r2, #32
 80052ca:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2220      	movs	r2, #32
 80052d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e068      	b.n	80053b2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0304 	and.w	r3, r3, #4
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d050      	beq.n	8005390 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	69db      	ldr	r3, [r3, #28]
 80052f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052fc:	d148      	bne.n	8005390 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005306:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005310:	e853 3f00 	ldrex	r3, [r3]
 8005314:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005318:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800531c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	461a      	mov	r2, r3
 8005324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005326:	637b      	str	r3, [r7, #52]	; 0x34
 8005328:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800532c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800532e:	e841 2300 	strex	r3, r2, [r1]
 8005332:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1e6      	bne.n	8005308 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	3308      	adds	r3, #8
 8005340:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	e853 3f00 	ldrex	r3, [r3]
 8005348:	613b      	str	r3, [r7, #16]
   return(result);
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	f023 0301 	bic.w	r3, r3, #1
 8005350:	66bb      	str	r3, [r7, #104]	; 0x68
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	3308      	adds	r3, #8
 8005358:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800535a:	623a      	str	r2, [r7, #32]
 800535c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535e:	69f9      	ldr	r1, [r7, #28]
 8005360:	6a3a      	ldr	r2, [r7, #32]
 8005362:	e841 2300 	strex	r3, r2, [r1]
 8005366:	61bb      	str	r3, [r7, #24]
   return(result);
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1e5      	bne.n	800533a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2220      	movs	r2, #32
 8005372:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2220      	movs	r2, #32
 8005378:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2220      	movs	r2, #32
 8005380:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e010      	b.n	80053b2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	69da      	ldr	r2, [r3, #28]
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	4013      	ands	r3, r2
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	429a      	cmp	r2, r3
 800539e:	bf0c      	ite	eq
 80053a0:	2301      	moveq	r3, #1
 80053a2:	2300      	movne	r3, #0
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	461a      	mov	r2, r3
 80053a8:	79fb      	ldrb	r3, [r7, #7]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	f43f af48 	beq.w	8005240 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3770      	adds	r7, #112	; 0x70
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b082      	sub	sp, #8
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d101      	bne.n	80053cc <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e03c      	b.n	8005446 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d106      	bne.n	80053e6 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f7fd f8dd 	bl	80025a0 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2202      	movs	r2, #2
 80053ea:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 0201 	bic.w	r2, r2, #1
 80053fc:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f9ea 	bl	80057d8 <USART_SetConfig>
 8005404:	4603      	mov	r3, r0
 8005406:	2b01      	cmp	r3, #1
 8005408:	d101      	bne.n	800540e <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e01b      	b.n	8005446 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800541c:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	689a      	ldr	r2, [r3, #8]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800542c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f042 0201 	orr.w	r2, r2, #1
 800543c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 fb4c 	bl	8005adc <USART_CheckIdleState>
 8005444:	4603      	mov	r3, r0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
	...

08005450 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b088      	sub	sp, #32
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005470:	69fa      	ldr	r2, [r7, #28]
 8005472:	f640 030f 	movw	r3, #2063	; 0x80f
 8005476:	4013      	ands	r3, r2
 8005478:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d113      	bne.n	80054a8 <HAL_USART_IRQHandler+0x58>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	f003 0320 	and.w	r3, r3, #32
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00e      	beq.n	80054a8 <HAL_USART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	f003 0320 	and.w	r3, r3, #32
 8005490:	2b00      	cmp	r3, #0
 8005492:	d009      	beq.n	80054a8 <HAL_USART_IRQHandler+0x58>
    {
      if (husart->RxISR != NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005498:	2b00      	cmp	r3, #0
 800549a:	f000 810d 	beq.w	80056b8 <HAL_USART_IRQHandler+0x268>
      {
        husart->RxISR(husart);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	4798      	blx	r3
      }
      return;
 80054a6:	e107      	b.n	80056b8 <HAL_USART_IRQHandler+0x268>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f000 80e3 	beq.w	8005676 <HAL_USART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d105      	bne.n	80054c6 <HAL_USART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 80d8 	beq.w	8005676 <HAL_USART_IRQHandler+0x226>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00e      	beq.n	80054ee <HAL_USART_IRQHandler+0x9e>
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d009      	beq.n	80054ee <HAL_USART_IRQHandler+0x9e>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2201      	movs	r2, #1
 80054e0:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054e6:	f043 0201 	orr.w	r2, r3, #1
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	f003 0302 	and.w	r3, r3, #2
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00e      	beq.n	8005516 <HAL_USART_IRQHandler+0xc6>
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d009      	beq.n	8005516 <HAL_USART_IRQHandler+0xc6>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2202      	movs	r2, #2
 8005508:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800550e:	f043 0204 	orr.w	r2, r3, #4
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	f003 0304 	and.w	r3, r3, #4
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00e      	beq.n	800553e <HAL_USART_IRQHandler+0xee>
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b00      	cmp	r3, #0
 8005528:	d009      	beq.n	800553e <HAL_USART_IRQHandler+0xee>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2204      	movs	r2, #4
 8005530:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005536:	f043 0202 	orr.w	r2, r3, #2
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	f003 0308 	and.w	r3, r3, #8
 8005544:	2b00      	cmp	r3, #0
 8005546:	d013      	beq.n	8005570 <HAL_USART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	f003 0320 	and.w	r3, r3, #32
 800554e:	2b00      	cmp	r3, #0
 8005550:	d104      	bne.n	800555c <HAL_USART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005558:	2b00      	cmp	r3, #0
 800555a:	d009      	beq.n	8005570 <HAL_USART_IRQHandler+0x120>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2208      	movs	r2, #8
 8005562:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005568:	f043 0208 	orr.w	r2, r3, #8
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* USART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00f      	beq.n	800559a <HAL_USART_IRQHandler+0x14a>
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00a      	beq.n	800559a <HAL_USART_IRQHandler+0x14a>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_RTOF);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800558c:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_RTO;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005592:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	64da      	str	r2, [r3, #76]	; 0x4c
    }


    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f000 808c 	beq.w	80056bc <HAL_USART_IRQHandler+0x26c>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	f003 0320 	and.w	r3, r3, #32
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00c      	beq.n	80055c8 <HAL_USART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	f003 0320 	and.w	r3, r3, #32
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d007      	beq.n	80055c8 <HAL_USART_IRQHandler+0x178>
      {
        if (husart->RxISR != NULL)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d003      	beq.n	80055c8 <HAL_USART_IRQHandler+0x178>
        {
          husart->RxISR(husart);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055cc:	f003 0308 	and.w	r3, r3, #8
 80055d0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055dc:	2b40      	cmp	r3, #64	; 0x40
 80055de:	d002      	beq.n	80055e6 <HAL_USART_IRQHandler+0x196>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d03e      	beq.n	8005664 <HAL_USART_IRQHandler+0x214>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f88e 	bl	8005708 <USART_EndTransfer>

        /* Abort the USART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f6:	2b40      	cmp	r3, #64	; 0x40
 80055f8:	d130      	bne.n	800565c <HAL_USART_IRQHandler+0x20c>
        {
          /* Disable the USART DMA Rx request if enabled */
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	689a      	ldr	r2, [r3, #8]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005608:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560e:	2b00      	cmp	r3, #0
 8005610:	d008      	beq.n	8005624 <HAL_USART_IRQHandler+0x1d4>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005616:	2200      	movs	r2, #0
 8005618:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561e:	4618      	mov	r0, r3
 8005620:	f7fd fab1 	bl	8002b86 <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005628:	2b00      	cmp	r3, #0
 800562a:	d013      	beq.n	8005654 <HAL_USART_IRQHandler+0x204>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005630:	4a25      	ldr	r2, [pc, #148]	; (80056c8 <HAL_USART_IRQHandler+0x278>)
 8005632:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005638:	4618      	mov	r0, r3
 800563a:	f7fd faa4 	bl	8002b86 <HAL_DMA_Abort_IT>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d016      	beq.n	8005672 <HAL_USART_IRQHandler+0x222>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800564e:	4610      	mov	r0, r2
 8005650:	4798      	blx	r3
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8005652:	e00e      	b.n	8005672 <HAL_USART_IRQHandler+0x222>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 f84d 	bl	80056f4 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800565a:	e00a      	b.n	8005672 <HAL_USART_IRQHandler+0x222>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 f849 	bl	80056f4 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8005662:	e006      	b.n	8005672 <HAL_USART_IRQHandler+0x222>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f845 	bl	80056f4 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	64da      	str	r2, [r3, #76]	; 0x4c
      }
    }
    return;
 8005670:	e024      	b.n	80056bc <HAL_USART_IRQHandler+0x26c>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8005672:	bf00      	nop
    return;
 8005674:	e022      	b.n	80056bc <HAL_USART_IRQHandler+0x26c>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00d      	beq.n	800569c <HAL_USART_IRQHandler+0x24c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005686:	2b00      	cmp	r3, #0
 8005688:	d008      	beq.n	800569c <HAL_USART_IRQHandler+0x24c>
  {
    if (husart->TxISR != NULL)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800568e:	2b00      	cmp	r3, #0
 8005690:	d016      	beq.n	80056c0 <HAL_USART_IRQHandler+0x270>
    {
      husart->TxISR(husart);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	4798      	blx	r3
    }
    return;
 800569a:	e011      	b.n	80056c0 <HAL_USART_IRQHandler+0x270>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00d      	beq.n	80056c2 <HAL_USART_IRQHandler+0x272>
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d008      	beq.n	80056c2 <HAL_USART_IRQHandler+0x272>
  {
    USART_EndTransmit_IT(husart);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 fa56 	bl	8005b62 <USART_EndTransmit_IT>
    return;
 80056b6:	e004      	b.n	80056c2 <HAL_USART_IRQHandler+0x272>
      return;
 80056b8:	bf00      	nop
 80056ba:	e002      	b.n	80056c2 <HAL_USART_IRQHandler+0x272>
    return;
 80056bc:	bf00      	nop
 80056be:	e000      	b.n	80056c2 <HAL_USART_IRQHandler+0x272>
    return;
 80056c0:	bf00      	nop
  }

}
 80056c2:	3720      	adds	r7, #32
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	08005745 	.word	0x08005745

080056cc <HAL_USART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxCpltCallback can be implemented in the user file.
   */
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 80056fc:	bf00      	nop
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 800571e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	689a      	ldr	r2, [r3, #8]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f022 0201 	bic.w	r2, r2, #1
 800572e:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 8005738:	bf00      	nop
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005750:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	865a      	strh	r2, [r3, #50]	; 0x32
  husart->TxXferCount = 0U;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	855a      	strh	r2, [r3, #42]	; 0x2a
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f7ff ffc8 	bl	80056f4 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8005764:	bf00      	nop
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	603b      	str	r3, [r7, #0]
 8005778:	4613      	mov	r3, r2
 800577a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800577c:	e018      	b.n	80057b0 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005784:	d014      	beq.n	80057b0 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005786:	f7fd f8bd 	bl	8002904 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	429a      	cmp	r2, r3
 8005794:	d302      	bcc.n	800579c <USART_WaitOnFlagUntilTimeout+0x30>
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d109      	bne.n	80057b0 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e00f      	b.n	80057d0 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	69da      	ldr	r2, [r3, #28]
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	4013      	ands	r3, r2
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	429a      	cmp	r2, r3
 80057be:	bf0c      	ite	eq
 80057c0:	2301      	moveq	r3, #1
 80057c2:	2300      	movne	r3, #0
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	461a      	mov	r2, r3
 80057c8:	79fb      	ldrb	r3, [r7, #7]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d0d7      	beq.n	800577e <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3710      	adds	r7, #16
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b088      	sub	sp, #32
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 80057e0:	2300      	movs	r3, #0
 80057e2:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 80057e4:	2300      	movs	r3, #0
 80057e6:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689a      	ldr	r2, [r3, #8]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	431a      	orrs	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	4ba7      	ldr	r3, [pc, #668]	; (8005aa4 <USART_SetConfig+0x2cc>)
 8005806:	4013      	ands	r3, r2
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	6812      	ldr	r2, [r2, #0]
 800580c:	6979      	ldr	r1, [r7, #20]
 800580e:	430b      	orrs	r3, r1
 8005810:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL and STOP bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8005812:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005816:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a1b      	ldr	r3, [r3, #32]
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	4313      	orrs	r3, r2
 8005820:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	699a      	ldr	r2, [r3, #24]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	4313      	orrs	r3, r2
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	4313      	orrs	r3, r2
 8005830:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	4313      	orrs	r3, r2
 800583a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	430a      	orrs	r2, r1
 800584e:	605a      	str	r2, [r3, #4]


  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a94      	ldr	r2, [pc, #592]	; (8005aa8 <USART_SetConfig+0x2d0>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d121      	bne.n	800589e <USART_SetConfig+0xc6>
 800585a:	4b94      	ldr	r3, [pc, #592]	; (8005aac <USART_SetConfig+0x2d4>)
 800585c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005860:	f003 0303 	and.w	r3, r3, #3
 8005864:	2b03      	cmp	r3, #3
 8005866:	d817      	bhi.n	8005898 <USART_SetConfig+0xc0>
 8005868:	a201      	add	r2, pc, #4	; (adr r2, 8005870 <USART_SetConfig+0x98>)
 800586a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586e:	bf00      	nop
 8005870:	08005881 	.word	0x08005881
 8005874:	0800588d 	.word	0x0800588d
 8005878:	08005887 	.word	0x08005887
 800587c:	08005893 	.word	0x08005893
 8005880:	2301      	movs	r3, #1
 8005882:	77fb      	strb	r3, [r7, #31]
 8005884:	e096      	b.n	80059b4 <USART_SetConfig+0x1dc>
 8005886:	2302      	movs	r3, #2
 8005888:	77fb      	strb	r3, [r7, #31]
 800588a:	e093      	b.n	80059b4 <USART_SetConfig+0x1dc>
 800588c:	2304      	movs	r3, #4
 800588e:	77fb      	strb	r3, [r7, #31]
 8005890:	e090      	b.n	80059b4 <USART_SetConfig+0x1dc>
 8005892:	2308      	movs	r3, #8
 8005894:	77fb      	strb	r3, [r7, #31]
 8005896:	e08d      	b.n	80059b4 <USART_SetConfig+0x1dc>
 8005898:	2310      	movs	r3, #16
 800589a:	77fb      	strb	r3, [r7, #31]
 800589c:	e08a      	b.n	80059b4 <USART_SetConfig+0x1dc>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a83      	ldr	r2, [pc, #524]	; (8005ab0 <USART_SetConfig+0x2d8>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d132      	bne.n	800590e <USART_SetConfig+0x136>
 80058a8:	4b80      	ldr	r3, [pc, #512]	; (8005aac <USART_SetConfig+0x2d4>)
 80058aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ae:	f003 030c 	and.w	r3, r3, #12
 80058b2:	2b0c      	cmp	r3, #12
 80058b4:	d828      	bhi.n	8005908 <USART_SetConfig+0x130>
 80058b6:	a201      	add	r2, pc, #4	; (adr r2, 80058bc <USART_SetConfig+0xe4>)
 80058b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058bc:	080058f1 	.word	0x080058f1
 80058c0:	08005909 	.word	0x08005909
 80058c4:	08005909 	.word	0x08005909
 80058c8:	08005909 	.word	0x08005909
 80058cc:	080058fd 	.word	0x080058fd
 80058d0:	08005909 	.word	0x08005909
 80058d4:	08005909 	.word	0x08005909
 80058d8:	08005909 	.word	0x08005909
 80058dc:	080058f7 	.word	0x080058f7
 80058e0:	08005909 	.word	0x08005909
 80058e4:	08005909 	.word	0x08005909
 80058e8:	08005909 	.word	0x08005909
 80058ec:	08005903 	.word	0x08005903
 80058f0:	2300      	movs	r3, #0
 80058f2:	77fb      	strb	r3, [r7, #31]
 80058f4:	e05e      	b.n	80059b4 <USART_SetConfig+0x1dc>
 80058f6:	2302      	movs	r3, #2
 80058f8:	77fb      	strb	r3, [r7, #31]
 80058fa:	e05b      	b.n	80059b4 <USART_SetConfig+0x1dc>
 80058fc:	2304      	movs	r3, #4
 80058fe:	77fb      	strb	r3, [r7, #31]
 8005900:	e058      	b.n	80059b4 <USART_SetConfig+0x1dc>
 8005902:	2308      	movs	r3, #8
 8005904:	77fb      	strb	r3, [r7, #31]
 8005906:	e055      	b.n	80059b4 <USART_SetConfig+0x1dc>
 8005908:	2310      	movs	r3, #16
 800590a:	77fb      	strb	r3, [r7, #31]
 800590c:	e052      	b.n	80059b4 <USART_SetConfig+0x1dc>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a68      	ldr	r2, [pc, #416]	; (8005ab4 <USART_SetConfig+0x2dc>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d120      	bne.n	800595a <USART_SetConfig+0x182>
 8005918:	4b64      	ldr	r3, [pc, #400]	; (8005aac <USART_SetConfig+0x2d4>)
 800591a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800591e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005922:	2b30      	cmp	r3, #48	; 0x30
 8005924:	d013      	beq.n	800594e <USART_SetConfig+0x176>
 8005926:	2b30      	cmp	r3, #48	; 0x30
 8005928:	d814      	bhi.n	8005954 <USART_SetConfig+0x17c>
 800592a:	2b20      	cmp	r3, #32
 800592c:	d009      	beq.n	8005942 <USART_SetConfig+0x16a>
 800592e:	2b20      	cmp	r3, #32
 8005930:	d810      	bhi.n	8005954 <USART_SetConfig+0x17c>
 8005932:	2b00      	cmp	r3, #0
 8005934:	d002      	beq.n	800593c <USART_SetConfig+0x164>
 8005936:	2b10      	cmp	r3, #16
 8005938:	d006      	beq.n	8005948 <USART_SetConfig+0x170>
 800593a:	e00b      	b.n	8005954 <USART_SetConfig+0x17c>
 800593c:	2300      	movs	r3, #0
 800593e:	77fb      	strb	r3, [r7, #31]
 8005940:	e038      	b.n	80059b4 <USART_SetConfig+0x1dc>
 8005942:	2302      	movs	r3, #2
 8005944:	77fb      	strb	r3, [r7, #31]
 8005946:	e035      	b.n	80059b4 <USART_SetConfig+0x1dc>
 8005948:	2304      	movs	r3, #4
 800594a:	77fb      	strb	r3, [r7, #31]
 800594c:	e032      	b.n	80059b4 <USART_SetConfig+0x1dc>
 800594e:	2308      	movs	r3, #8
 8005950:	77fb      	strb	r3, [r7, #31]
 8005952:	e02f      	b.n	80059b4 <USART_SetConfig+0x1dc>
 8005954:	2310      	movs	r3, #16
 8005956:	77fb      	strb	r3, [r7, #31]
 8005958:	e02c      	b.n	80059b4 <USART_SetConfig+0x1dc>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a56      	ldr	r2, [pc, #344]	; (8005ab8 <USART_SetConfig+0x2e0>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d125      	bne.n	80059b0 <USART_SetConfig+0x1d8>
 8005964:	4b51      	ldr	r3, [pc, #324]	; (8005aac <USART_SetConfig+0x2d4>)
 8005966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800596a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800596e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005972:	d017      	beq.n	80059a4 <USART_SetConfig+0x1cc>
 8005974:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005978:	d817      	bhi.n	80059aa <USART_SetConfig+0x1d2>
 800597a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800597e:	d00b      	beq.n	8005998 <USART_SetConfig+0x1c0>
 8005980:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005984:	d811      	bhi.n	80059aa <USART_SetConfig+0x1d2>
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <USART_SetConfig+0x1ba>
 800598a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800598e:	d006      	beq.n	800599e <USART_SetConfig+0x1c6>
 8005990:	e00b      	b.n	80059aa <USART_SetConfig+0x1d2>
 8005992:	2301      	movs	r3, #1
 8005994:	77fb      	strb	r3, [r7, #31]
 8005996:	e00d      	b.n	80059b4 <USART_SetConfig+0x1dc>
 8005998:	2302      	movs	r3, #2
 800599a:	77fb      	strb	r3, [r7, #31]
 800599c:	e00a      	b.n	80059b4 <USART_SetConfig+0x1dc>
 800599e:	2304      	movs	r3, #4
 80059a0:	77fb      	strb	r3, [r7, #31]
 80059a2:	e007      	b.n	80059b4 <USART_SetConfig+0x1dc>
 80059a4:	2308      	movs	r3, #8
 80059a6:	77fb      	strb	r3, [r7, #31]
 80059a8:	e004      	b.n	80059b4 <USART_SetConfig+0x1dc>
 80059aa:	2310      	movs	r3, #16
 80059ac:	77fb      	strb	r3, [r7, #31]
 80059ae:	e001      	b.n	80059b4 <USART_SetConfig+0x1dc>
 80059b0:	2310      	movs	r3, #16
 80059b2:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 80059b4:	7ffb      	ldrb	r3, [r7, #31]
 80059b6:	2b08      	cmp	r3, #8
 80059b8:	d857      	bhi.n	8005a6a <USART_SetConfig+0x292>
 80059ba:	a201      	add	r2, pc, #4	; (adr r2, 80059c0 <USART_SetConfig+0x1e8>)
 80059bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c0:	080059e5 	.word	0x080059e5
 80059c4:	08005a03 	.word	0x08005a03
 80059c8:	08005a21 	.word	0x08005a21
 80059cc:	08005a6b 	.word	0x08005a6b
 80059d0:	08005a37 	.word	0x08005a37
 80059d4:	08005a6b 	.word	0x08005a6b
 80059d8:	08005a6b 	.word	0x08005a6b
 80059dc:	08005a6b 	.word	0x08005a6b
 80059e0:	08005a55 	.word	0x08005a55
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 80059e4:	f7fe fc32 	bl	800424c <HAL_RCC_GetPCLK1Freq>
 80059e8:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	005a      	lsls	r2, r3, #1
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	085b      	lsrs	r3, r3, #1
 80059f4:	441a      	add	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80059fe:	61bb      	str	r3, [r7, #24]
      break;
 8005a00:	e036      	b.n	8005a70 <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a02:	f7fe fc37 	bl	8004274 <HAL_RCC_GetPCLK2Freq>
 8005a06:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	005a      	lsls	r2, r3, #1
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	085b      	lsrs	r3, r3, #1
 8005a12:	441a      	add	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1c:	61bb      	str	r3, [r7, #24]
      break;
 8005a1e:	e027      	b.n	8005a70 <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	085a      	lsrs	r2, r3, #1
 8005a26:	4b25      	ldr	r3, [pc, #148]	; (8005abc <USART_SetConfig+0x2e4>)
 8005a28:	4413      	add	r3, r2
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	6852      	ldr	r2, [r2, #4]
 8005a2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a32:	61bb      	str	r3, [r7, #24]
      break;
 8005a34:	e01c      	b.n	8005a70 <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8005a36:	f7fe faf7 	bl	8004028 <HAL_RCC_GetSysClockFreq>
 8005a3a:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	005a      	lsls	r2, r3, #1
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	085b      	lsrs	r3, r3, #1
 8005a46:	441a      	add	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a50:	61bb      	str	r3, [r7, #24]
      break;
 8005a52:	e00d      	b.n	8005a70 <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	085b      	lsrs	r3, r3, #1
 8005a5a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a66:	61bb      	str	r3, [r7, #24]
      break;
 8005a68:	e002      	b.n	8005a70 <USART_SetConfig+0x298>
    default:
      ret = HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	77bb      	strb	r3, [r7, #30]
      break;
 8005a6e:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	2b0f      	cmp	r3, #15
 8005a74:	d924      	bls.n	8005ac0 <USART_SetConfig+0x2e8>
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a7c:	d220      	bcs.n	8005ac0 <USART_SetConfig+0x2e8>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	f023 030f 	bic.w	r3, r3, #15
 8005a86:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	085b      	lsrs	r3, r3, #1
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	f003 0307 	and.w	r3, r3, #7
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	89fb      	ldrh	r3, [r7, #14]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	89fa      	ldrh	r2, [r7, #14]
 8005aa0:	60da      	str	r2, [r3, #12]
 8005aa2:	e00f      	b.n	8005ac4 <USART_SetConfig+0x2ec>
 8005aa4:	efff69f3 	.word	0xefff69f3
 8005aa8:	40011000 	.word	0x40011000
 8005aac:	40023800 	.word	0x40023800
 8005ab0:	40004400 	.word	0x40004400
 8005ab4:	40004800 	.word	0x40004800
 8005ab8:	40011400 	.word	0x40011400
 8005abc:	01e84800 	.word	0x01e84800
  }
  else
  {
    ret = HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	77bb      	strb	r3, [r7, #30]
  }


  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 8005ad0:	7fbb      	ldrb	r3, [r7, #30]
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3720      	adds	r7, #32
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop

08005adc <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af02      	add	r7, sp, #8
 8005ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005aea:	f7fc ff0b 	bl	8002904 <HAL_GetTick>
 8005aee:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0308 	and.w	r3, r3, #8
 8005afa:	2b08      	cmp	r3, #8
 8005afc:	d10e      	bne.n	8005b1c <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8005afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b02:	9300      	str	r3, [sp, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f7ff fe2d 	bl	800576c <USART_WaitOnFlagUntilTimeout>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e01e      	b.n	8005b5a <USART_CheckIdleState+0x7e>
    }
  }
#if defined(USART_ISR_REACK)
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0304 	and.w	r3, r3, #4
 8005b26:	2b04      	cmp	r3, #4
 8005b28:	d10e      	bne.n	8005b48 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8005b2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b2e:	9300      	str	r3, [sp, #0]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f7ff fe17 	bl	800576c <USART_WaitOnFlagUntilTimeout>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e008      	b.n	8005b5a <USART_CheckIdleState+0x7e>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b082      	sub	sp, #8
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b78:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f022 0201 	bic.w	r2, r2, #1
 8005b88:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	63da      	str	r2, [r3, #60]	; 0x3c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	2b12      	cmp	r3, #18
 8005b9a:	d113      	bne.n	8005bc4 <USART_EndTransmit_IT+0x62>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2208      	movs	r2, #8
 8005ba2:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	699a      	ldr	r2, [r3, #24]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f042 0208 	orr.w	r2, r2, #8
 8005bb2:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f7ff fd85 	bl	80056cc <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005bc2:	e00b      	b.n	8005bdc <USART_EndTransmit_IT+0x7a>
  else if (husart->RxXferCount == 0U)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d106      	bne.n	8005bdc <USART_EndTransmit_IT+0x7a>
    husart->State = HAL_USART_STATE_READY;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    HAL_USART_TxRxCpltCallback(husart);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f7ff fd82 	bl	80056e0 <HAL_USART_TxRxCpltCallback>
}
 8005bdc:	bf00      	nop
 8005bde:	3708      	adds	r7, #8
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005be4:	b084      	sub	sp, #16
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b084      	sub	sp, #16
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
 8005bee:	f107 001c 	add.w	r0, r7, #28
 8005bf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d120      	bne.n	8005c3e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	68da      	ldr	r2, [r3, #12]
 8005c0c:	4b20      	ldr	r3, [pc, #128]	; (8005c90 <USB_CoreInit+0xac>)
 8005c0e:	4013      	ands	r3, r2
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005c20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d105      	bne.n	8005c32 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 fa96 	bl	8006164 <USB_CoreReset>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	73fb      	strb	r3, [r7, #15]
 8005c3c:	e010      	b.n	8005c60 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 fa8a 	bl	8006164 <USB_CoreReset>
 8005c50:	4603      	mov	r3, r0
 8005c52:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c58:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d10b      	bne.n	8005c7e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f043 0206 	orr.w	r2, r3, #6
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f043 0220 	orr.w	r2, r3, #32
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c8a:	b004      	add	sp, #16
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	ffbdffbf 	.word	0xffbdffbf

08005c94 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	f023 0201 	bic.w	r2, r3, #1
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	370c      	adds	r7, #12
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr

08005cb6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b084      	sub	sp, #16
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005cd2:	78fb      	ldrb	r3, [r7, #3]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d115      	bne.n	8005d04 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ce4:	2001      	movs	r0, #1
 8005ce6:	f7fc fe19 	bl	800291c <HAL_Delay>
      ms++;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	3301      	adds	r3, #1
 8005cee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 fa29 	bl	8006148 <USB_GetMode>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d01e      	beq.n	8005d3a <USB_SetCurrentMode+0x84>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2b31      	cmp	r3, #49	; 0x31
 8005d00:	d9f0      	bls.n	8005ce4 <USB_SetCurrentMode+0x2e>
 8005d02:	e01a      	b.n	8005d3a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005d04:	78fb      	ldrb	r3, [r7, #3]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d115      	bne.n	8005d36 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005d16:	2001      	movs	r0, #1
 8005d18:	f7fc fe00 	bl	800291c <HAL_Delay>
      ms++;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 fa10 	bl	8006148 <USB_GetMode>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d005      	beq.n	8005d3a <USB_SetCurrentMode+0x84>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2b31      	cmp	r3, #49	; 0x31
 8005d32:	d9f0      	bls.n	8005d16 <USB_SetCurrentMode+0x60>
 8005d34:	e001      	b.n	8005d3a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e005      	b.n	8005d46 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2b32      	cmp	r3, #50	; 0x32
 8005d3e:	d101      	bne.n	8005d44 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e000      	b.n	8005d46 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
	...

08005d50 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d50:	b084      	sub	sp, #16
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b086      	sub	sp, #24
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
 8005d5a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005d5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005d62:	2300      	movs	r3, #0
 8005d64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	613b      	str	r3, [r7, #16]
 8005d6e:	e009      	b.n	8005d84 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	3340      	adds	r3, #64	; 0x40
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	3301      	adds	r3, #1
 8005d82:	613b      	str	r3, [r7, #16]
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	2b0e      	cmp	r3, #14
 8005d88:	d9f2      	bls.n	8005d70 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d11c      	bne.n	8005dca <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d9e:	f043 0302 	orr.w	r3, r3, #2
 8005da2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	601a      	str	r2, [r3, #0]
 8005dc8:	e005      	b.n	8005dd6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ddc:	461a      	mov	r2, r3
 8005dde:	2300      	movs	r3, #0
 8005de0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005de8:	4619      	mov	r1, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005df0:	461a      	mov	r2, r3
 8005df2:	680b      	ldr	r3, [r1, #0]
 8005df4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d10c      	bne.n	8005e16 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d104      	bne.n	8005e0c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005e02:	2100      	movs	r1, #0
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 f965 	bl	80060d4 <USB_SetDevSpeed>
 8005e0a:	e008      	b.n	8005e1e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005e0c:	2101      	movs	r1, #1
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 f960 	bl	80060d4 <USB_SetDevSpeed>
 8005e14:	e003      	b.n	8005e1e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005e16:	2103      	movs	r1, #3
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 f95b 	bl	80060d4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e1e:	2110      	movs	r1, #16
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 f8f3 	bl	800600c <USB_FlushTxFifo>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d001      	beq.n	8005e30 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 f91f 	bl	8006074 <USB_FlushRxFifo>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d001      	beq.n	8005e40 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e46:	461a      	mov	r2, r3
 8005e48:	2300      	movs	r3, #0
 8005e4a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e52:	461a      	mov	r2, r3
 8005e54:	2300      	movs	r3, #0
 8005e56:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e5e:	461a      	mov	r2, r3
 8005e60:	2300      	movs	r3, #0
 8005e62:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e64:	2300      	movs	r3, #0
 8005e66:	613b      	str	r3, [r7, #16]
 8005e68:	e043      	b.n	8005ef2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	015a      	lsls	r2, r3, #5
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	4413      	add	r3, r2
 8005e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e80:	d118      	bne.n	8005eb4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10a      	bne.n	8005e9e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e94:	461a      	mov	r2, r3
 8005e96:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e9a:	6013      	str	r3, [r2, #0]
 8005e9c:	e013      	b.n	8005ec6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	015a      	lsls	r2, r3, #5
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eaa:	461a      	mov	r2, r3
 8005eac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005eb0:	6013      	str	r3, [r2, #0]
 8005eb2:	e008      	b.n	8005ec6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	015a      	lsls	r2, r3, #5
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	4413      	add	r3, r2
 8005ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	015a      	lsls	r2, r3, #5
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	015a      	lsls	r2, r3, #5
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005eea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	613b      	str	r3, [r7, #16]
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d3b7      	bcc.n	8005e6a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005efa:	2300      	movs	r3, #0
 8005efc:	613b      	str	r3, [r7, #16]
 8005efe:	e043      	b.n	8005f88 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	015a      	lsls	r2, r3, #5
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	4413      	add	r3, r2
 8005f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f16:	d118      	bne.n	8005f4a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d10a      	bne.n	8005f34 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	015a      	lsls	r2, r3, #5
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	4413      	add	r3, r2
 8005f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005f30:	6013      	str	r3, [r2, #0]
 8005f32:	e013      	b.n	8005f5c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	015a      	lsls	r2, r3, #5
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f40:	461a      	mov	r2, r3
 8005f42:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005f46:	6013      	str	r3, [r2, #0]
 8005f48:	e008      	b.n	8005f5c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	015a      	lsls	r2, r3, #5
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	4413      	add	r3, r2
 8005f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f56:	461a      	mov	r2, r3
 8005f58:	2300      	movs	r3, #0
 8005f5a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	015a      	lsls	r2, r3, #5
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	4413      	add	r3, r2
 8005f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f68:	461a      	mov	r2, r3
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	015a      	lsls	r2, r3, #5
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	4413      	add	r3, r2
 8005f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f80:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	3301      	adds	r3, #1
 8005f86:	613b      	str	r3, [r7, #16]
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d3b7      	bcc.n	8005f00 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fa2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005fb0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d105      	bne.n	8005fc4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	f043 0210 	orr.w	r2, r3, #16
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	699a      	ldr	r2, [r3, #24]
 8005fc8:	4b0e      	ldr	r3, [pc, #56]	; (8006004 <USB_DevInit+0x2b4>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d005      	beq.n	8005fe2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	f043 0208 	orr.w	r2, r3, #8
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d105      	bne.n	8005ff4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	699a      	ldr	r2, [r3, #24]
 8005fec:	4b06      	ldr	r3, [pc, #24]	; (8006008 <USB_DevInit+0x2b8>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3718      	adds	r7, #24
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006000:	b004      	add	sp, #16
 8006002:	4770      	bx	lr
 8006004:	803c3800 	.word	0x803c3800
 8006008:	40000004 	.word	0x40000004

0800600c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006016:	2300      	movs	r3, #0
 8006018:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	3301      	adds	r3, #1
 800601e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	4a13      	ldr	r2, [pc, #76]	; (8006070 <USB_FlushTxFifo+0x64>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d901      	bls.n	800602c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	e01b      	b.n	8006064 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	2b00      	cmp	r3, #0
 8006032:	daf2      	bge.n	800601a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006034:	2300      	movs	r3, #0
 8006036:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	019b      	lsls	r3, r3, #6
 800603c:	f043 0220 	orr.w	r2, r3, #32
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	3301      	adds	r3, #1
 8006048:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	4a08      	ldr	r2, [pc, #32]	; (8006070 <USB_FlushTxFifo+0x64>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d901      	bls.n	8006056 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e006      	b.n	8006064 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	f003 0320 	and.w	r3, r3, #32
 800605e:	2b20      	cmp	r3, #32
 8006060:	d0f0      	beq.n	8006044 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr
 8006070:	00030d40 	.word	0x00030d40

08006074 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800607c:	2300      	movs	r3, #0
 800607e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	3301      	adds	r3, #1
 8006084:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	4a11      	ldr	r2, [pc, #68]	; (80060d0 <USB_FlushRxFifo+0x5c>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d901      	bls.n	8006092 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e018      	b.n	80060c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	2b00      	cmp	r3, #0
 8006098:	daf2      	bge.n	8006080 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800609a:	2300      	movs	r3, #0
 800609c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2210      	movs	r2, #16
 80060a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	3301      	adds	r3, #1
 80060a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	4a08      	ldr	r2, [pc, #32]	; (80060d0 <USB_FlushRxFifo+0x5c>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d901      	bls.n	80060b6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e006      	b.n	80060c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	f003 0310 	and.w	r3, r3, #16
 80060be:	2b10      	cmp	r3, #16
 80060c0:	d0f0      	beq.n	80060a4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3714      	adds	r7, #20
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr
 80060d0:	00030d40 	.word	0x00030d40

080060d4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	460b      	mov	r3, r1
 80060de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	78fb      	ldrb	r3, [r7, #3]
 80060ee:	68f9      	ldr	r1, [r7, #12]
 80060f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060f4:	4313      	orrs	r3, r2
 80060f6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3714      	adds	r7, #20
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr

08006106 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006106:	b480      	push	{r7}
 8006108:	b085      	sub	sp, #20
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006120:	f023 0303 	bic.w	r3, r3, #3
 8006124:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006134:	f043 0302 	orr.w	r3, r3, #2
 8006138:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3714      	adds	r7, #20
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	f003 0301 	and.w	r3, r3, #1
}
 8006158:	4618      	mov	r0, r3
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800616c:	2300      	movs	r3, #0
 800616e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	3301      	adds	r3, #1
 8006174:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	4a13      	ldr	r2, [pc, #76]	; (80061c8 <USB_CoreReset+0x64>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d901      	bls.n	8006182 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e01b      	b.n	80061ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	2b00      	cmp	r3, #0
 8006188:	daf2      	bge.n	8006170 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800618a:	2300      	movs	r3, #0
 800618c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	f043 0201 	orr.w	r2, r3, #1
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	3301      	adds	r3, #1
 800619e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	4a09      	ldr	r2, [pc, #36]	; (80061c8 <USB_CoreReset+0x64>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d901      	bls.n	80061ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e006      	b.n	80061ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	f003 0301 	and.w	r3, r3, #1
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d0f0      	beq.n	800619a <USB_CoreReset+0x36>

  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3714      	adds	r7, #20
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	00030d40 	.word	0x00030d40

080061cc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80061cc:	b480      	push	{r7}
 80061ce:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80061d0:	bf00      	nop
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
	...

080061dc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061e2:	f3ef 8305 	mrs	r3, IPSR
 80061e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80061e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10f      	bne.n	800620e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061ee:	f3ef 8310 	mrs	r3, PRIMASK
 80061f2:	607b      	str	r3, [r7, #4]
  return(result);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d105      	bne.n	8006206 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80061fa:	f3ef 8311 	mrs	r3, BASEPRI
 80061fe:	603b      	str	r3, [r7, #0]
  return(result);
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d007      	beq.n	8006216 <osKernelInitialize+0x3a>
 8006206:	4b0e      	ldr	r3, [pc, #56]	; (8006240 <osKernelInitialize+0x64>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2b02      	cmp	r3, #2
 800620c:	d103      	bne.n	8006216 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800620e:	f06f 0305 	mvn.w	r3, #5
 8006212:	60fb      	str	r3, [r7, #12]
 8006214:	e00c      	b.n	8006230 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006216:	4b0a      	ldr	r3, [pc, #40]	; (8006240 <osKernelInitialize+0x64>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d105      	bne.n	800622a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800621e:	4b08      	ldr	r3, [pc, #32]	; (8006240 <osKernelInitialize+0x64>)
 8006220:	2201      	movs	r2, #1
 8006222:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006224:	2300      	movs	r3, #0
 8006226:	60fb      	str	r3, [r7, #12]
 8006228:	e002      	b.n	8006230 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800622a:	f04f 33ff 	mov.w	r3, #4294967295
 800622e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006230:	68fb      	ldr	r3, [r7, #12]
}
 8006232:	4618      	mov	r0, r3
 8006234:	3714      	adds	r7, #20
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	200013b8 	.word	0x200013b8

08006244 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800624a:	f3ef 8305 	mrs	r3, IPSR
 800624e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006250:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006252:	2b00      	cmp	r3, #0
 8006254:	d10f      	bne.n	8006276 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006256:	f3ef 8310 	mrs	r3, PRIMASK
 800625a:	607b      	str	r3, [r7, #4]
  return(result);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d105      	bne.n	800626e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006262:	f3ef 8311 	mrs	r3, BASEPRI
 8006266:	603b      	str	r3, [r7, #0]
  return(result);
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d007      	beq.n	800627e <osKernelStart+0x3a>
 800626e:	4b0f      	ldr	r3, [pc, #60]	; (80062ac <osKernelStart+0x68>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2b02      	cmp	r3, #2
 8006274:	d103      	bne.n	800627e <osKernelStart+0x3a>
    stat = osErrorISR;
 8006276:	f06f 0305 	mvn.w	r3, #5
 800627a:	60fb      	str	r3, [r7, #12]
 800627c:	e010      	b.n	80062a0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800627e:	4b0b      	ldr	r3, [pc, #44]	; (80062ac <osKernelStart+0x68>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d109      	bne.n	800629a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006286:	f7ff ffa1 	bl	80061cc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800628a:	4b08      	ldr	r3, [pc, #32]	; (80062ac <osKernelStart+0x68>)
 800628c:	2202      	movs	r2, #2
 800628e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006290:	f001 fa6c 	bl	800776c <vTaskStartScheduler>
      stat = osOK;
 8006294:	2300      	movs	r3, #0
 8006296:	60fb      	str	r3, [r7, #12]
 8006298:	e002      	b.n	80062a0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800629a:	f04f 33ff 	mov.w	r3, #4294967295
 800629e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80062a0:	68fb      	ldr	r3, [r7, #12]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3710      	adds	r7, #16
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	200013b8 	.word	0x200013b8

080062b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b090      	sub	sp, #64	; 0x40
 80062b4:	af04      	add	r7, sp, #16
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80062bc:	2300      	movs	r3, #0
 80062be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062c0:	f3ef 8305 	mrs	r3, IPSR
 80062c4:	61fb      	str	r3, [r7, #28]
  return(result);
 80062c6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f040 808f 	bne.w	80063ec <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062ce:	f3ef 8310 	mrs	r3, PRIMASK
 80062d2:	61bb      	str	r3, [r7, #24]
  return(result);
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d105      	bne.n	80062e6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80062da:	f3ef 8311 	mrs	r3, BASEPRI
 80062de:	617b      	str	r3, [r7, #20]
  return(result);
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d003      	beq.n	80062ee <osThreadNew+0x3e>
 80062e6:	4b44      	ldr	r3, [pc, #272]	; (80063f8 <osThreadNew+0x148>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d07e      	beq.n	80063ec <osThreadNew+0x13c>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d07b      	beq.n	80063ec <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80062f4:	2380      	movs	r3, #128	; 0x80
 80062f6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80062f8:	2318      	movs	r3, #24
 80062fa:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80062fc:	2300      	movs	r3, #0
 80062fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006300:	f04f 33ff 	mov.w	r3, #4294967295
 8006304:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d045      	beq.n	8006398 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d002      	beq.n	800631a <osThreadNew+0x6a>
        name = attr->name;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d002      	beq.n	8006328 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632a:	2b00      	cmp	r3, #0
 800632c:	d008      	beq.n	8006340 <osThreadNew+0x90>
 800632e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006330:	2b38      	cmp	r3, #56	; 0x38
 8006332:	d805      	bhi.n	8006340 <osThreadNew+0x90>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f003 0301 	and.w	r3, r3, #1
 800633c:	2b00      	cmp	r3, #0
 800633e:	d001      	beq.n	8006344 <osThreadNew+0x94>
        return (NULL);
 8006340:	2300      	movs	r3, #0
 8006342:	e054      	b.n	80063ee <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d003      	beq.n	8006354 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	695b      	ldr	r3, [r3, #20]
 8006350:	089b      	lsrs	r3, r3, #2
 8006352:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00e      	beq.n	800637a <osThreadNew+0xca>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	2bbb      	cmp	r3, #187	; 0xbb
 8006362:	d90a      	bls.n	800637a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006368:	2b00      	cmp	r3, #0
 800636a:	d006      	beq.n	800637a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d002      	beq.n	800637a <osThreadNew+0xca>
        mem = 1;
 8006374:	2301      	movs	r3, #1
 8006376:	623b      	str	r3, [r7, #32]
 8006378:	e010      	b.n	800639c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10c      	bne.n	800639c <osThreadNew+0xec>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d108      	bne.n	800639c <osThreadNew+0xec>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d104      	bne.n	800639c <osThreadNew+0xec>
          mem = 0;
 8006392:	2300      	movs	r3, #0
 8006394:	623b      	str	r3, [r7, #32]
 8006396:	e001      	b.n	800639c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006398:	2300      	movs	r3, #0
 800639a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800639c:	6a3b      	ldr	r3, [r7, #32]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d110      	bne.n	80063c4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80063aa:	9202      	str	r2, [sp, #8]
 80063ac:	9301      	str	r3, [sp, #4]
 80063ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b0:	9300      	str	r3, [sp, #0]
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f000 ffe1 	bl	8007380 <xTaskCreateStatic>
 80063be:	4603      	mov	r3, r0
 80063c0:	613b      	str	r3, [r7, #16]
 80063c2:	e013      	b.n	80063ec <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80063c4:	6a3b      	ldr	r3, [r7, #32]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d110      	bne.n	80063ec <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80063ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063cc:	b29a      	uxth	r2, r3
 80063ce:	f107 0310 	add.w	r3, r7, #16
 80063d2:	9301      	str	r3, [sp, #4]
 80063d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d6:	9300      	str	r3, [sp, #0]
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f001 f832 	bl	8007446 <xTaskCreate>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d001      	beq.n	80063ec <osThreadNew+0x13c>
          hTask = NULL;
 80063e8:	2300      	movs	r3, #0
 80063ea:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80063ec:	693b      	ldr	r3, [r7, #16]
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3730      	adds	r7, #48	; 0x30
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	200013b8 	.word	0x200013b8

080063fc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006404:	f3ef 8305 	mrs	r3, IPSR
 8006408:	613b      	str	r3, [r7, #16]
  return(result);
 800640a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800640c:	2b00      	cmp	r3, #0
 800640e:	d10f      	bne.n	8006430 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006410:	f3ef 8310 	mrs	r3, PRIMASK
 8006414:	60fb      	str	r3, [r7, #12]
  return(result);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d105      	bne.n	8006428 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800641c:	f3ef 8311 	mrs	r3, BASEPRI
 8006420:	60bb      	str	r3, [r7, #8]
  return(result);
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d007      	beq.n	8006438 <osDelay+0x3c>
 8006428:	4b0a      	ldr	r3, [pc, #40]	; (8006454 <osDelay+0x58>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2b02      	cmp	r3, #2
 800642e:	d103      	bne.n	8006438 <osDelay+0x3c>
    stat = osErrorISR;
 8006430:	f06f 0305 	mvn.w	r3, #5
 8006434:	617b      	str	r3, [r7, #20]
 8006436:	e007      	b.n	8006448 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006438:	2300      	movs	r3, #0
 800643a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d002      	beq.n	8006448 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f001 f95c 	bl	8007700 <vTaskDelay>
    }
  }

  return (stat);
 8006448:	697b      	ldr	r3, [r7, #20]
}
 800644a:	4618      	mov	r0, r3
 800644c:	3718      	adds	r7, #24
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	200013b8 	.word	0x200013b8

08006458 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f002 fb1f 	bl	8008aa4 <pvTimerGetTimerID>
 8006466:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d005      	beq.n	800647a <TimerCallback+0x22>
    callb->func (callb->arg);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	6852      	ldr	r2, [r2, #4]
 8006476:	4610      	mov	r0, r2
 8006478:	4798      	blx	r3
  }
}
 800647a:	bf00      	nop
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
	...

08006484 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8006484:	b580      	push	{r7, lr}
 8006486:	b08e      	sub	sp, #56	; 0x38
 8006488:	af02      	add	r7, sp, #8
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	607a      	str	r2, [r7, #4]
 800648e:	603b      	str	r3, [r7, #0]
 8006490:	460b      	mov	r3, r1
 8006492:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8006494:	2300      	movs	r3, #0
 8006496:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006498:	f3ef 8305 	mrs	r3, IPSR
 800649c:	61bb      	str	r3, [r7, #24]
  return(result);
 800649e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d16a      	bne.n	800657a <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064a4:	f3ef 8310 	mrs	r3, PRIMASK
 80064a8:	617b      	str	r3, [r7, #20]
  return(result);
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d105      	bne.n	80064bc <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064b0:	f3ef 8311 	mrs	r3, BASEPRI
 80064b4:	613b      	str	r3, [r7, #16]
  return(result);
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d003      	beq.n	80064c4 <osTimerNew+0x40>
 80064bc:	4b31      	ldr	r3, [pc, #196]	; (8006584 <osTimerNew+0x100>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d05a      	beq.n	800657a <osTimerNew+0xf6>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d057      	beq.n	800657a <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80064ca:	2008      	movs	r0, #8
 80064cc:	f002 fd42 	bl	8008f54 <pvPortMalloc>
 80064d0:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d050      	beq.n	800657a <osTimerNew+0xf6>
      callb->func = func;
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80064e4:	7afb      	ldrb	r3, [r7, #11]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d102      	bne.n	80064f0 <osTimerNew+0x6c>
        reload = pdFALSE;
 80064ea:	2300      	movs	r3, #0
 80064ec:	627b      	str	r3, [r7, #36]	; 0x24
 80064ee:	e001      	b.n	80064f4 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 80064f0:	2301      	movs	r3, #1
 80064f2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 80064f4:	f04f 33ff 	mov.w	r3, #4294967295
 80064f8:	623b      	str	r3, [r7, #32]
      name = NULL;
 80064fa:	2300      	movs	r3, #0
 80064fc:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d01c      	beq.n	800653e <osTimerNew+0xba>
        if (attr->name != NULL) {
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d002      	beq.n	8006512 <osTimerNew+0x8e>
          name = attr->name;
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d006      	beq.n	8006528 <osTimerNew+0xa4>
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	2b2b      	cmp	r3, #43	; 0x2b
 8006520:	d902      	bls.n	8006528 <osTimerNew+0xa4>
          mem = 1;
 8006522:	2301      	movs	r3, #1
 8006524:	623b      	str	r3, [r7, #32]
 8006526:	e00c      	b.n	8006542 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d108      	bne.n	8006542 <osTimerNew+0xbe>
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d104      	bne.n	8006542 <osTimerNew+0xbe>
            mem = 0;
 8006538:	2300      	movs	r3, #0
 800653a:	623b      	str	r3, [r7, #32]
 800653c:	e001      	b.n	8006542 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800653e:	2300      	movs	r3, #0
 8006540:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8006542:	6a3b      	ldr	r3, [r7, #32]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d10c      	bne.n	8006562 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	9301      	str	r3, [sp, #4]
 800654e:	4b0e      	ldr	r3, [pc, #56]	; (8006588 <osTimerNew+0x104>)
 8006550:	9300      	str	r3, [sp, #0]
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006556:	2101      	movs	r1, #1
 8006558:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800655a:	f001 ff12 	bl	8008382 <xTimerCreateStatic>
 800655e:	62b8      	str	r0, [r7, #40]	; 0x28
 8006560:	e00b      	b.n	800657a <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8006562:	6a3b      	ldr	r3, [r7, #32]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d108      	bne.n	800657a <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8006568:	4b07      	ldr	r3, [pc, #28]	; (8006588 <osTimerNew+0x104>)
 800656a:	9300      	str	r3, [sp, #0]
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006570:	2101      	movs	r1, #1
 8006572:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006574:	f001 fee4 	bl	8008340 <xTimerCreate>
 8006578:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800657a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800657c:	4618      	mov	r0, r3
 800657e:	3730      	adds	r7, #48	; 0x30
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	200013b8 	.word	0x200013b8
 8006588:	08006459 	.word	0x08006459

0800658c <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800658c:	b580      	push	{r7, lr}
 800658e:	b08a      	sub	sp, #40	; 0x28
 8006590:	af02      	add	r7, sp, #8
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800659a:	f3ef 8305 	mrs	r3, IPSR
 800659e:	617b      	str	r3, [r7, #20]
  return(result);
 80065a0:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d10f      	bne.n	80065c6 <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065a6:	f3ef 8310 	mrs	r3, PRIMASK
 80065aa:	613b      	str	r3, [r7, #16]
  return(result);
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d105      	bne.n	80065be <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065b2:	f3ef 8311 	mrs	r3, BASEPRI
 80065b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d007      	beq.n	80065ce <osTimerStart+0x42>
 80065be:	4b12      	ldr	r3, [pc, #72]	; (8006608 <osTimerStart+0x7c>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d103      	bne.n	80065ce <osTimerStart+0x42>
    stat = osErrorISR;
 80065c6:	f06f 0305 	mvn.w	r3, #5
 80065ca:	61fb      	str	r3, [r7, #28]
 80065cc:	e017      	b.n	80065fe <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d103      	bne.n	80065dc <osTimerStart+0x50>
    stat = osErrorParameter;
 80065d4:	f06f 0303 	mvn.w	r3, #3
 80065d8:	61fb      	str	r3, [r7, #28]
 80065da:	e010      	b.n	80065fe <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80065dc:	2300      	movs	r3, #0
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	2300      	movs	r3, #0
 80065e2:	683a      	ldr	r2, [r7, #0]
 80065e4:	2104      	movs	r1, #4
 80065e6:	69b8      	ldr	r0, [r7, #24]
 80065e8:	f001 ff4a 	bl	8008480 <xTimerGenericCommand>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d102      	bne.n	80065f8 <osTimerStart+0x6c>
      stat = osOK;
 80065f2:	2300      	movs	r3, #0
 80065f4:	61fb      	str	r3, [r7, #28]
 80065f6:	e002      	b.n	80065fe <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 80065f8:	f06f 0302 	mvn.w	r3, #2
 80065fc:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 80065fe:	69fb      	ldr	r3, [r7, #28]
}
 8006600:	4618      	mov	r0, r3
 8006602:	3720      	adds	r7, #32
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	200013b8 	.word	0x200013b8

0800660c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800660c:	b580      	push	{r7, lr}
 800660e:	b08c      	sub	sp, #48	; 0x30
 8006610:	af02      	add	r7, sp, #8
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006618:	2300      	movs	r3, #0
 800661a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800661c:	f3ef 8305 	mrs	r3, IPSR
 8006620:	61bb      	str	r3, [r7, #24]
  return(result);
 8006622:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006624:	2b00      	cmp	r3, #0
 8006626:	d16f      	bne.n	8006708 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006628:	f3ef 8310 	mrs	r3, PRIMASK
 800662c:	617b      	str	r3, [r7, #20]
  return(result);
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d105      	bne.n	8006640 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006634:	f3ef 8311 	mrs	r3, BASEPRI
 8006638:	613b      	str	r3, [r7, #16]
  return(result);
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d003      	beq.n	8006648 <osMessageQueueNew+0x3c>
 8006640:	4b34      	ldr	r3, [pc, #208]	; (8006714 <osMessageQueueNew+0x108>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2b02      	cmp	r3, #2
 8006646:	d05f      	beq.n	8006708 <osMessageQueueNew+0xfc>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d05c      	beq.n	8006708 <osMessageQueueNew+0xfc>
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d059      	beq.n	8006708 <osMessageQueueNew+0xfc>
    mem = -1;
 8006654:	f04f 33ff 	mov.w	r3, #4294967295
 8006658:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d029      	beq.n	80066b4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d012      	beq.n	800668e <osMessageQueueNew+0x82>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	2b4f      	cmp	r3, #79	; 0x4f
 800666e:	d90e      	bls.n	800668e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00a      	beq.n	800668e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	695a      	ldr	r2, [r3, #20]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	68b9      	ldr	r1, [r7, #8]
 8006680:	fb01 f303 	mul.w	r3, r1, r3
 8006684:	429a      	cmp	r2, r3
 8006686:	d302      	bcc.n	800668e <osMessageQueueNew+0x82>
        mem = 1;
 8006688:	2301      	movs	r3, #1
 800668a:	623b      	str	r3, [r7, #32]
 800668c:	e014      	b.n	80066b8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d110      	bne.n	80066b8 <osMessageQueueNew+0xac>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10c      	bne.n	80066b8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d108      	bne.n	80066b8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d104      	bne.n	80066b8 <osMessageQueueNew+0xac>
          mem = 0;
 80066ae:	2300      	movs	r3, #0
 80066b0:	623b      	str	r3, [r7, #32]
 80066b2:	e001      	b.n	80066b8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80066b4:	2300      	movs	r3, #0
 80066b6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80066b8:	6a3b      	ldr	r3, [r7, #32]
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d10b      	bne.n	80066d6 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	691a      	ldr	r2, [r3, #16]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	2100      	movs	r1, #0
 80066c8:	9100      	str	r1, [sp, #0]
 80066ca:	68b9      	ldr	r1, [r7, #8]
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f000 f975 	bl	80069bc <xQueueGenericCreateStatic>
 80066d2:	6278      	str	r0, [r7, #36]	; 0x24
 80066d4:	e008      	b.n	80066e8 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80066d6:	6a3b      	ldr	r3, [r7, #32]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d105      	bne.n	80066e8 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80066dc:	2200      	movs	r2, #0
 80066de:	68b9      	ldr	r1, [r7, #8]
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	f000 f9ed 	bl	8006ac0 <xQueueGenericCreate>
 80066e6:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80066e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00c      	beq.n	8006708 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d003      	beq.n	80066fc <osMessageQueueNew+0xf0>
        name = attr->name;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	61fb      	str	r3, [r7, #28]
 80066fa:	e001      	b.n	8006700 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80066fc:	2300      	movs	r3, #0
 80066fe:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8006700:	69f9      	ldr	r1, [r7, #28]
 8006702:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006704:	f000 fdde 	bl	80072c4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800670a:	4618      	mov	r0, r3
 800670c:	3728      	adds	r7, #40	; 0x28
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	200013b8 	.word	0x200013b8

08006718 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	4a07      	ldr	r2, [pc, #28]	; (8006744 <vApplicationGetIdleTaskMemory+0x2c>)
 8006728:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	4a06      	ldr	r2, [pc, #24]	; (8006748 <vApplicationGetIdleTaskMemory+0x30>)
 800672e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2280      	movs	r2, #128	; 0x80
 8006734:	601a      	str	r2, [r3, #0]
}
 8006736:	bf00      	nop
 8006738:	3714      	adds	r7, #20
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	200013bc 	.word	0x200013bc
 8006748:	20001478 	.word	0x20001478

0800674c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	4a07      	ldr	r2, [pc, #28]	; (8006778 <vApplicationGetTimerTaskMemory+0x2c>)
 800675c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	4a06      	ldr	r2, [pc, #24]	; (800677c <vApplicationGetTimerTaskMemory+0x30>)
 8006762:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f44f 7280 	mov.w	r2, #256	; 0x100
 800676a:	601a      	str	r2, [r3, #0]
}
 800676c:	bf00      	nop
 800676e:	3714      	adds	r7, #20
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr
 8006778:	20001678 	.word	0x20001678
 800677c:	20001734 	.word	0x20001734

08006780 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f103 0208 	add.w	r2, r3, #8
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f04f 32ff 	mov.w	r2, #4294967295
 8006798:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f103 0208 	add.w	r2, r3, #8
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f103 0208 	add.w	r2, r3, #8
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80067ce:	bf00      	nop
 80067d0:	370c      	adds	r7, #12
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr

080067da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067da:	b480      	push	{r7}
 80067dc:	b085      	sub	sp, #20
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
 80067e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	689a      	ldr	r2, [r3, #8]
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	683a      	ldr	r2, [r7, #0]
 80067fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	683a      	ldr	r2, [r7, #0]
 8006804:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	1c5a      	adds	r2, r3, #1
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	601a      	str	r2, [r3, #0]
}
 8006816:	bf00      	nop
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr

08006822 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006822:	b480      	push	{r7}
 8006824:	b085      	sub	sp, #20
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
 800682a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006838:	d103      	bne.n	8006842 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	60fb      	str	r3, [r7, #12]
 8006840:	e00c      	b.n	800685c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	3308      	adds	r3, #8
 8006846:	60fb      	str	r3, [r7, #12]
 8006848:	e002      	b.n	8006850 <vListInsert+0x2e>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	60fb      	str	r3, [r7, #12]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68ba      	ldr	r2, [r7, #8]
 8006858:	429a      	cmp	r2, r3
 800685a:	d2f6      	bcs.n	800684a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	685a      	ldr	r2, [r3, #4]
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	683a      	ldr	r2, [r7, #0]
 800686a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	683a      	ldr	r2, [r7, #0]
 8006876:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	1c5a      	adds	r2, r3, #1
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	601a      	str	r2, [r3, #0]
}
 8006888:	bf00      	nop
 800688a:	3714      	adds	r7, #20
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	6892      	ldr	r2, [r2, #8]
 80068aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	6852      	ldr	r2, [r2, #4]
 80068b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d103      	bne.n	80068c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	689a      	ldr	r2, [r3, #8]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	1e5a      	subs	r2, r3, #1
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3714      	adds	r7, #20
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d10c      	bne.n	8006916 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80068fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006900:	b672      	cpsid	i
 8006902:	f383 8811 	msr	BASEPRI, r3
 8006906:	f3bf 8f6f 	isb	sy
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	b662      	cpsie	i
 8006910:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006912:	bf00      	nop
 8006914:	e7fe      	b.n	8006914 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006916:	f002 f9f1 	bl	8008cfc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006922:	68f9      	ldr	r1, [r7, #12]
 8006924:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006926:	fb01 f303 	mul.w	r3, r1, r3
 800692a:	441a      	add	r2, r3
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2200      	movs	r2, #0
 8006934:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006946:	3b01      	subs	r3, #1
 8006948:	68f9      	ldr	r1, [r7, #12]
 800694a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800694c:	fb01 f303 	mul.w	r3, r1, r3
 8006950:	441a      	add	r2, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	22ff      	movs	r2, #255	; 0xff
 800695a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	22ff      	movs	r2, #255	; 0xff
 8006962:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d114      	bne.n	8006996 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d01a      	beq.n	80069aa <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	3310      	adds	r3, #16
 8006978:	4618      	mov	r0, r3
 800697a:	f001 f9b1 	bl	8007ce0 <xTaskRemoveFromEventList>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d012      	beq.n	80069aa <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006984:	4b0c      	ldr	r3, [pc, #48]	; (80069b8 <xQueueGenericReset+0xd0>)
 8006986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800698a:	601a      	str	r2, [r3, #0]
 800698c:	f3bf 8f4f 	dsb	sy
 8006990:	f3bf 8f6f 	isb	sy
 8006994:	e009      	b.n	80069aa <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	3310      	adds	r3, #16
 800699a:	4618      	mov	r0, r3
 800699c:	f7ff fef0 	bl	8006780 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	3324      	adds	r3, #36	; 0x24
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7ff feeb 	bl	8006780 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80069aa:	f002 f9db 	bl	8008d64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80069ae:	2301      	movs	r3, #1
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3710      	adds	r7, #16
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	e000ed04 	.word	0xe000ed04

080069bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b08e      	sub	sp, #56	; 0x38
 80069c0:	af02      	add	r7, sp, #8
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
 80069c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10c      	bne.n	80069ea <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d4:	b672      	cpsid	i
 80069d6:	f383 8811 	msr	BASEPRI, r3
 80069da:	f3bf 8f6f 	isb	sy
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	b662      	cpsie	i
 80069e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80069e6:	bf00      	nop
 80069e8:	e7fe      	b.n	80069e8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10c      	bne.n	8006a0a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80069f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f4:	b672      	cpsid	i
 80069f6:	f383 8811 	msr	BASEPRI, r3
 80069fa:	f3bf 8f6f 	isb	sy
 80069fe:	f3bf 8f4f 	dsb	sy
 8006a02:	b662      	cpsie	i
 8006a04:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006a06:	bf00      	nop
 8006a08:	e7fe      	b.n	8006a08 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d002      	beq.n	8006a16 <xQueueGenericCreateStatic+0x5a>
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d001      	beq.n	8006a1a <xQueueGenericCreateStatic+0x5e>
 8006a16:	2301      	movs	r3, #1
 8006a18:	e000      	b.n	8006a1c <xQueueGenericCreateStatic+0x60>
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d10c      	bne.n	8006a3a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8006a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a24:	b672      	cpsid	i
 8006a26:	f383 8811 	msr	BASEPRI, r3
 8006a2a:	f3bf 8f6f 	isb	sy
 8006a2e:	f3bf 8f4f 	dsb	sy
 8006a32:	b662      	cpsie	i
 8006a34:	623b      	str	r3, [r7, #32]
}
 8006a36:	bf00      	nop
 8006a38:	e7fe      	b.n	8006a38 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d102      	bne.n	8006a46 <xQueueGenericCreateStatic+0x8a>
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d101      	bne.n	8006a4a <xQueueGenericCreateStatic+0x8e>
 8006a46:	2301      	movs	r3, #1
 8006a48:	e000      	b.n	8006a4c <xQueueGenericCreateStatic+0x90>
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d10c      	bne.n	8006a6a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8006a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a54:	b672      	cpsid	i
 8006a56:	f383 8811 	msr	BASEPRI, r3
 8006a5a:	f3bf 8f6f 	isb	sy
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	b662      	cpsie	i
 8006a64:	61fb      	str	r3, [r7, #28]
}
 8006a66:	bf00      	nop
 8006a68:	e7fe      	b.n	8006a68 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a6a:	2350      	movs	r3, #80	; 0x50
 8006a6c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	2b50      	cmp	r3, #80	; 0x50
 8006a72:	d00c      	beq.n	8006a8e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8006a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a78:	b672      	cpsid	i
 8006a7a:	f383 8811 	msr	BASEPRI, r3
 8006a7e:	f3bf 8f6f 	isb	sy
 8006a82:	f3bf 8f4f 	dsb	sy
 8006a86:	b662      	cpsie	i
 8006a88:	61bb      	str	r3, [r7, #24]
}
 8006a8a:	bf00      	nop
 8006a8c:	e7fe      	b.n	8006a8c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006a8e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00d      	beq.n	8006ab6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006aa2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	68b9      	ldr	r1, [r7, #8]
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f000 f847 	bl	8006b44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3730      	adds	r7, #48	; 0x30
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b08a      	sub	sp, #40	; 0x28
 8006ac4:	af02      	add	r7, sp, #8
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	4613      	mov	r3, r2
 8006acc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10c      	bne.n	8006aee <xQueueGenericCreate+0x2e>
	__asm volatile
 8006ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad8:	b672      	cpsid	i
 8006ada:	f383 8811 	msr	BASEPRI, r3
 8006ade:	f3bf 8f6f 	isb	sy
 8006ae2:	f3bf 8f4f 	dsb	sy
 8006ae6:	b662      	cpsie	i
 8006ae8:	613b      	str	r3, [r7, #16]
}
 8006aea:	bf00      	nop
 8006aec:	e7fe      	b.n	8006aec <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d102      	bne.n	8006afa <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006af4:	2300      	movs	r3, #0
 8006af6:	61fb      	str	r3, [r7, #28]
 8006af8:	e004      	b.n	8006b04 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	fb02 f303 	mul.w	r3, r2, r3
 8006b02:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	3350      	adds	r3, #80	; 0x50
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f002 fa23 	bl	8008f54 <pvPortMalloc>
 8006b0e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d011      	beq.n	8006b3a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	3350      	adds	r3, #80	; 0x50
 8006b1e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b28:	79fa      	ldrb	r2, [r7, #7]
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	9300      	str	r3, [sp, #0]
 8006b2e:	4613      	mov	r3, r2
 8006b30:	697a      	ldr	r2, [r7, #20]
 8006b32:	68b9      	ldr	r1, [r7, #8]
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	f000 f805 	bl	8006b44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b3a:	69bb      	ldr	r3, [r7, #24]
	}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3720      	adds	r7, #32
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	607a      	str	r2, [r7, #4]
 8006b50:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d103      	bne.n	8006b60 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	69ba      	ldr	r2, [r7, #24]
 8006b5c:	601a      	str	r2, [r3, #0]
 8006b5e:	e002      	b.n	8006b66 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	68ba      	ldr	r2, [r7, #8]
 8006b70:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006b72:	2101      	movs	r1, #1
 8006b74:	69b8      	ldr	r0, [r7, #24]
 8006b76:	f7ff feb7 	bl	80068e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	78fa      	ldrb	r2, [r7, #3]
 8006b7e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006b82:	bf00      	nop
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
	...

08006b8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b08e      	sub	sp, #56	; 0x38
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	607a      	str	r2, [r7, #4]
 8006b98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10c      	bne.n	8006bc2 <xQueueGenericSend+0x36>
	__asm volatile
 8006ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bac:	b672      	cpsid	i
 8006bae:	f383 8811 	msr	BASEPRI, r3
 8006bb2:	f3bf 8f6f 	isb	sy
 8006bb6:	f3bf 8f4f 	dsb	sy
 8006bba:	b662      	cpsie	i
 8006bbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006bbe:	bf00      	nop
 8006bc0:	e7fe      	b.n	8006bc0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d103      	bne.n	8006bd0 <xQueueGenericSend+0x44>
 8006bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d101      	bne.n	8006bd4 <xQueueGenericSend+0x48>
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e000      	b.n	8006bd6 <xQueueGenericSend+0x4a>
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d10c      	bne.n	8006bf4 <xQueueGenericSend+0x68>
	__asm volatile
 8006bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bde:	b672      	cpsid	i
 8006be0:	f383 8811 	msr	BASEPRI, r3
 8006be4:	f3bf 8f6f 	isb	sy
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	b662      	cpsie	i
 8006bee:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006bf0:	bf00      	nop
 8006bf2:	e7fe      	b.n	8006bf2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	d103      	bne.n	8006c02 <xQueueGenericSend+0x76>
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d101      	bne.n	8006c06 <xQueueGenericSend+0x7a>
 8006c02:	2301      	movs	r3, #1
 8006c04:	e000      	b.n	8006c08 <xQueueGenericSend+0x7c>
 8006c06:	2300      	movs	r3, #0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d10c      	bne.n	8006c26 <xQueueGenericSend+0x9a>
	__asm volatile
 8006c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c10:	b672      	cpsid	i
 8006c12:	f383 8811 	msr	BASEPRI, r3
 8006c16:	f3bf 8f6f 	isb	sy
 8006c1a:	f3bf 8f4f 	dsb	sy
 8006c1e:	b662      	cpsie	i
 8006c20:	623b      	str	r3, [r7, #32]
}
 8006c22:	bf00      	nop
 8006c24:	e7fe      	b.n	8006c24 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c26:	f001 fa5d 	bl	80080e4 <xTaskGetSchedulerState>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d102      	bne.n	8006c36 <xQueueGenericSend+0xaa>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d101      	bne.n	8006c3a <xQueueGenericSend+0xae>
 8006c36:	2301      	movs	r3, #1
 8006c38:	e000      	b.n	8006c3c <xQueueGenericSend+0xb0>
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d10c      	bne.n	8006c5a <xQueueGenericSend+0xce>
	__asm volatile
 8006c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c44:	b672      	cpsid	i
 8006c46:	f383 8811 	msr	BASEPRI, r3
 8006c4a:	f3bf 8f6f 	isb	sy
 8006c4e:	f3bf 8f4f 	dsb	sy
 8006c52:	b662      	cpsie	i
 8006c54:	61fb      	str	r3, [r7, #28]
}
 8006c56:	bf00      	nop
 8006c58:	e7fe      	b.n	8006c58 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c5a:	f002 f84f 	bl	8008cfc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d302      	bcc.n	8006c70 <xQueueGenericSend+0xe4>
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	2b02      	cmp	r3, #2
 8006c6e:	d129      	bne.n	8006cc4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c70:	683a      	ldr	r2, [r7, #0]
 8006c72:	68b9      	ldr	r1, [r7, #8]
 8006c74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c76:	f000 fa15 	bl	80070a4 <prvCopyDataToQueue>
 8006c7a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d010      	beq.n	8006ca6 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c86:	3324      	adds	r3, #36	; 0x24
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f001 f829 	bl	8007ce0 <xTaskRemoveFromEventList>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d013      	beq.n	8006cbc <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006c94:	4b3f      	ldr	r3, [pc, #252]	; (8006d94 <xQueueGenericSend+0x208>)
 8006c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c9a:	601a      	str	r2, [r3, #0]
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	f3bf 8f6f 	isb	sy
 8006ca4:	e00a      	b.n	8006cbc <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d007      	beq.n	8006cbc <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006cac:	4b39      	ldr	r3, [pc, #228]	; (8006d94 <xQueueGenericSend+0x208>)
 8006cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cb2:	601a      	str	r2, [r3, #0]
 8006cb4:	f3bf 8f4f 	dsb	sy
 8006cb8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006cbc:	f002 f852 	bl	8008d64 <vPortExitCritical>
				return pdPASS;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e063      	b.n	8006d8c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d103      	bne.n	8006cd2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006cca:	f002 f84b 	bl	8008d64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	e05c      	b.n	8006d8c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d106      	bne.n	8006ce6 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006cd8:	f107 0314 	add.w	r3, r7, #20
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f001 f865 	bl	8007dac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ce6:	f002 f83d 	bl	8008d64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006cea:	f000 fdb3 	bl	8007854 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006cee:	f002 f805 	bl	8008cfc <vPortEnterCritical>
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cf8:	b25b      	sxtb	r3, r3
 8006cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cfe:	d103      	bne.n	8006d08 <xQueueGenericSend+0x17c>
 8006d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d0e:	b25b      	sxtb	r3, r3
 8006d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d14:	d103      	bne.n	8006d1e <xQueueGenericSend+0x192>
 8006d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d1e:	f002 f821 	bl	8008d64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d22:	1d3a      	adds	r2, r7, #4
 8006d24:	f107 0314 	add.w	r3, r7, #20
 8006d28:	4611      	mov	r1, r2
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f001 f854 	bl	8007dd8 <xTaskCheckForTimeOut>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d124      	bne.n	8006d80 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006d36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d38:	f000 faac 	bl	8007294 <prvIsQueueFull>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d018      	beq.n	8006d74 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d44:	3310      	adds	r3, #16
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	4611      	mov	r1, r2
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f000 ff74 	bl	8007c38 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006d50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d52:	f000 fa37 	bl	80071c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006d56:	f000 fd8b 	bl	8007870 <xTaskResumeAll>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f47f af7c 	bne.w	8006c5a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8006d62:	4b0c      	ldr	r3, [pc, #48]	; (8006d94 <xQueueGenericSend+0x208>)
 8006d64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d68:	601a      	str	r2, [r3, #0]
 8006d6a:	f3bf 8f4f 	dsb	sy
 8006d6e:	f3bf 8f6f 	isb	sy
 8006d72:	e772      	b.n	8006c5a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006d74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d76:	f000 fa25 	bl	80071c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d7a:	f000 fd79 	bl	8007870 <xTaskResumeAll>
 8006d7e:	e76c      	b.n	8006c5a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006d80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d82:	f000 fa1f 	bl	80071c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d86:	f000 fd73 	bl	8007870 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006d8a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3738      	adds	r7, #56	; 0x38
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	e000ed04 	.word	0xe000ed04

08006d98 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b08e      	sub	sp, #56	; 0x38
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	607a      	str	r2, [r7, #4]
 8006da4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d10c      	bne.n	8006dca <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8006db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db4:	b672      	cpsid	i
 8006db6:	f383 8811 	msr	BASEPRI, r3
 8006dba:	f3bf 8f6f 	isb	sy
 8006dbe:	f3bf 8f4f 	dsb	sy
 8006dc2:	b662      	cpsie	i
 8006dc4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006dc6:	bf00      	nop
 8006dc8:	e7fe      	b.n	8006dc8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d103      	bne.n	8006dd8 <xQueueGenericSendFromISR+0x40>
 8006dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d101      	bne.n	8006ddc <xQueueGenericSendFromISR+0x44>
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e000      	b.n	8006dde <xQueueGenericSendFromISR+0x46>
 8006ddc:	2300      	movs	r3, #0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10c      	bne.n	8006dfc <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8006de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de6:	b672      	cpsid	i
 8006de8:	f383 8811 	msr	BASEPRI, r3
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	f3bf 8f4f 	dsb	sy
 8006df4:	b662      	cpsie	i
 8006df6:	623b      	str	r3, [r7, #32]
}
 8006df8:	bf00      	nop
 8006dfa:	e7fe      	b.n	8006dfa <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d103      	bne.n	8006e0a <xQueueGenericSendFromISR+0x72>
 8006e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d101      	bne.n	8006e0e <xQueueGenericSendFromISR+0x76>
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e000      	b.n	8006e10 <xQueueGenericSendFromISR+0x78>
 8006e0e:	2300      	movs	r3, #0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d10c      	bne.n	8006e2e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8006e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e18:	b672      	cpsid	i
 8006e1a:	f383 8811 	msr	BASEPRI, r3
 8006e1e:	f3bf 8f6f 	isb	sy
 8006e22:	f3bf 8f4f 	dsb	sy
 8006e26:	b662      	cpsie	i
 8006e28:	61fb      	str	r3, [r7, #28]
}
 8006e2a:	bf00      	nop
 8006e2c:	e7fe      	b.n	8006e2c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e2e:	f002 f84d 	bl	8008ecc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006e32:	f3ef 8211 	mrs	r2, BASEPRI
 8006e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3a:	b672      	cpsid	i
 8006e3c:	f383 8811 	msr	BASEPRI, r3
 8006e40:	f3bf 8f6f 	isb	sy
 8006e44:	f3bf 8f4f 	dsb	sy
 8006e48:	b662      	cpsie	i
 8006e4a:	61ba      	str	r2, [r7, #24]
 8006e4c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006e4e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e50:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d302      	bcc.n	8006e64 <xQueueGenericSendFromISR+0xcc>
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	d12c      	bne.n	8006ebe <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e6e:	683a      	ldr	r2, [r7, #0]
 8006e70:	68b9      	ldr	r1, [r7, #8]
 8006e72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e74:	f000 f916 	bl	80070a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006e78:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e80:	d112      	bne.n	8006ea8 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d016      	beq.n	8006eb8 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8c:	3324      	adds	r3, #36	; 0x24
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f000 ff26 	bl	8007ce0 <xTaskRemoveFromEventList>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00e      	beq.n	8006eb8 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00b      	beq.n	8006eb8 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	601a      	str	r2, [r3, #0]
 8006ea6:	e007      	b.n	8006eb8 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006ea8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006eac:	3301      	adds	r3, #1
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	b25a      	sxtb	r2, r3
 8006eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006ebc:	e001      	b.n	8006ec2 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006ecc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3738      	adds	r7, #56	; 0x38
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b08c      	sub	sp, #48	; 0x30
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10c      	bne.n	8006f0c <xQueueReceive+0x34>
	__asm volatile
 8006ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef6:	b672      	cpsid	i
 8006ef8:	f383 8811 	msr	BASEPRI, r3
 8006efc:	f3bf 8f6f 	isb	sy
 8006f00:	f3bf 8f4f 	dsb	sy
 8006f04:	b662      	cpsie	i
 8006f06:	623b      	str	r3, [r7, #32]
}
 8006f08:	bf00      	nop
 8006f0a:	e7fe      	b.n	8006f0a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d103      	bne.n	8006f1a <xQueueReceive+0x42>
 8006f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d101      	bne.n	8006f1e <xQueueReceive+0x46>
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e000      	b.n	8006f20 <xQueueReceive+0x48>
 8006f1e:	2300      	movs	r3, #0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d10c      	bne.n	8006f3e <xQueueReceive+0x66>
	__asm volatile
 8006f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f28:	b672      	cpsid	i
 8006f2a:	f383 8811 	msr	BASEPRI, r3
 8006f2e:	f3bf 8f6f 	isb	sy
 8006f32:	f3bf 8f4f 	dsb	sy
 8006f36:	b662      	cpsie	i
 8006f38:	61fb      	str	r3, [r7, #28]
}
 8006f3a:	bf00      	nop
 8006f3c:	e7fe      	b.n	8006f3c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f3e:	f001 f8d1 	bl	80080e4 <xTaskGetSchedulerState>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d102      	bne.n	8006f4e <xQueueReceive+0x76>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d101      	bne.n	8006f52 <xQueueReceive+0x7a>
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e000      	b.n	8006f54 <xQueueReceive+0x7c>
 8006f52:	2300      	movs	r3, #0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d10c      	bne.n	8006f72 <xQueueReceive+0x9a>
	__asm volatile
 8006f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5c:	b672      	cpsid	i
 8006f5e:	f383 8811 	msr	BASEPRI, r3
 8006f62:	f3bf 8f6f 	isb	sy
 8006f66:	f3bf 8f4f 	dsb	sy
 8006f6a:	b662      	cpsie	i
 8006f6c:	61bb      	str	r3, [r7, #24]
}
 8006f6e:	bf00      	nop
 8006f70:	e7fe      	b.n	8006f70 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f72:	f001 fec3 	bl	8008cfc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d01f      	beq.n	8006fc2 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f82:	68b9      	ldr	r1, [r7, #8]
 8006f84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f86:	f000 f8f7 	bl	8007178 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8c:	1e5a      	subs	r2, r3, #1
 8006f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f90:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00f      	beq.n	8006fba <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9c:	3310      	adds	r3, #16
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f000 fe9e 	bl	8007ce0 <xTaskRemoveFromEventList>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d007      	beq.n	8006fba <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006faa:	4b3d      	ldr	r3, [pc, #244]	; (80070a0 <xQueueReceive+0x1c8>)
 8006fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fb0:	601a      	str	r2, [r3, #0]
 8006fb2:	f3bf 8f4f 	dsb	sy
 8006fb6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006fba:	f001 fed3 	bl	8008d64 <vPortExitCritical>
				return pdPASS;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e069      	b.n	8007096 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d103      	bne.n	8006fd0 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006fc8:	f001 fecc 	bl	8008d64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	e062      	b.n	8007096 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d106      	bne.n	8006fe4 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fd6:	f107 0310 	add.w	r3, r7, #16
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f000 fee6 	bl	8007dac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006fe4:	f001 febe 	bl	8008d64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006fe8:	f000 fc34 	bl	8007854 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006fec:	f001 fe86 	bl	8008cfc <vPortEnterCritical>
 8006ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ff6:	b25b      	sxtb	r3, r3
 8006ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ffc:	d103      	bne.n	8007006 <xQueueReceive+0x12e>
 8006ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007000:	2200      	movs	r2, #0
 8007002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007008:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800700c:	b25b      	sxtb	r3, r3
 800700e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007012:	d103      	bne.n	800701c <xQueueReceive+0x144>
 8007014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007016:	2200      	movs	r2, #0
 8007018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800701c:	f001 fea2 	bl	8008d64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007020:	1d3a      	adds	r2, r7, #4
 8007022:	f107 0310 	add.w	r3, r7, #16
 8007026:	4611      	mov	r1, r2
 8007028:	4618      	mov	r0, r3
 800702a:	f000 fed5 	bl	8007dd8 <xTaskCheckForTimeOut>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d123      	bne.n	800707c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007034:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007036:	f000 f917 	bl	8007268 <prvIsQueueEmpty>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d017      	beq.n	8007070 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007042:	3324      	adds	r3, #36	; 0x24
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	4611      	mov	r1, r2
 8007048:	4618      	mov	r0, r3
 800704a:	f000 fdf5 	bl	8007c38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800704e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007050:	f000 f8b8 	bl	80071c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007054:	f000 fc0c 	bl	8007870 <xTaskResumeAll>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d189      	bne.n	8006f72 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800705e:	4b10      	ldr	r3, [pc, #64]	; (80070a0 <xQueueReceive+0x1c8>)
 8007060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007064:	601a      	str	r2, [r3, #0]
 8007066:	f3bf 8f4f 	dsb	sy
 800706a:	f3bf 8f6f 	isb	sy
 800706e:	e780      	b.n	8006f72 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007070:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007072:	f000 f8a7 	bl	80071c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007076:	f000 fbfb 	bl	8007870 <xTaskResumeAll>
 800707a:	e77a      	b.n	8006f72 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800707c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800707e:	f000 f8a1 	bl	80071c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007082:	f000 fbf5 	bl	8007870 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007086:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007088:	f000 f8ee 	bl	8007268 <prvIsQueueEmpty>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	f43f af6f 	beq.w	8006f72 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007094:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007096:	4618      	mov	r0, r3
 8007098:	3730      	adds	r7, #48	; 0x30
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	e000ed04 	.word	0xe000ed04

080070a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b086      	sub	sp, #24
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80070b0:	2300      	movs	r3, #0
 80070b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d10d      	bne.n	80070de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d14d      	bne.n	8007166 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	4618      	mov	r0, r3
 80070d0:	f001 f826 	bl	8008120 <xTaskPriorityDisinherit>
 80070d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	609a      	str	r2, [r3, #8]
 80070dc:	e043      	b.n	8007166 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d119      	bne.n	8007118 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6858      	ldr	r0, [r3, #4]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ec:	461a      	mov	r2, r3
 80070ee:	68b9      	ldr	r1, [r7, #8]
 80070f0:	f002 f93a 	bl	8009368 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	685a      	ldr	r2, [r3, #4]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fc:	441a      	add	r2, r3
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	685a      	ldr	r2, [r3, #4]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	429a      	cmp	r2, r3
 800710c:	d32b      	bcc.n	8007166 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	605a      	str	r2, [r3, #4]
 8007116:	e026      	b.n	8007166 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	68d8      	ldr	r0, [r3, #12]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007120:	461a      	mov	r2, r3
 8007122:	68b9      	ldr	r1, [r7, #8]
 8007124:	f002 f920 	bl	8009368 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	68da      	ldr	r2, [r3, #12]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007130:	425b      	negs	r3, r3
 8007132:	441a      	add	r2, r3
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	68da      	ldr	r2, [r3, #12]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	429a      	cmp	r2, r3
 8007142:	d207      	bcs.n	8007154 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	689a      	ldr	r2, [r3, #8]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714c:	425b      	negs	r3, r3
 800714e:	441a      	add	r2, r3
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2b02      	cmp	r3, #2
 8007158:	d105      	bne.n	8007166 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d002      	beq.n	8007166 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	3b01      	subs	r3, #1
 8007164:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	1c5a      	adds	r2, r3, #1
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800716e:	697b      	ldr	r3, [r7, #20]
}
 8007170:	4618      	mov	r0, r3
 8007172:	3718      	adds	r7, #24
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007186:	2b00      	cmp	r3, #0
 8007188:	d018      	beq.n	80071bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	68da      	ldr	r2, [r3, #12]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007192:	441a      	add	r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	68da      	ldr	r2, [r3, #12]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d303      	bcc.n	80071ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	68d9      	ldr	r1, [r3, #12]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b4:	461a      	mov	r2, r3
 80071b6:	6838      	ldr	r0, [r7, #0]
 80071b8:	f002 f8d6 	bl	8009368 <memcpy>
	}
}
 80071bc:	bf00      	nop
 80071be:	3708      	adds	r7, #8
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80071cc:	f001 fd96 	bl	8008cfc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071d8:	e011      	b.n	80071fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d012      	beq.n	8007208 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	3324      	adds	r3, #36	; 0x24
 80071e6:	4618      	mov	r0, r3
 80071e8:	f000 fd7a 	bl	8007ce0 <xTaskRemoveFromEventList>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d001      	beq.n	80071f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80071f2:	f000 fe57 	bl	8007ea4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80071f6:	7bfb      	ldrb	r3, [r7, #15]
 80071f8:	3b01      	subs	r3, #1
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007202:	2b00      	cmp	r3, #0
 8007204:	dce9      	bgt.n	80071da <prvUnlockQueue+0x16>
 8007206:	e000      	b.n	800720a <prvUnlockQueue+0x46>
					break;
 8007208:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	22ff      	movs	r2, #255	; 0xff
 800720e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007212:	f001 fda7 	bl	8008d64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007216:	f001 fd71 	bl	8008cfc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007220:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007222:	e011      	b.n	8007248 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d012      	beq.n	8007252 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	3310      	adds	r3, #16
 8007230:	4618      	mov	r0, r3
 8007232:	f000 fd55 	bl	8007ce0 <xTaskRemoveFromEventList>
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d001      	beq.n	8007240 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800723c:	f000 fe32 	bl	8007ea4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007240:	7bbb      	ldrb	r3, [r7, #14]
 8007242:	3b01      	subs	r3, #1
 8007244:	b2db      	uxtb	r3, r3
 8007246:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007248:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800724c:	2b00      	cmp	r3, #0
 800724e:	dce9      	bgt.n	8007224 <prvUnlockQueue+0x60>
 8007250:	e000      	b.n	8007254 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007252:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	22ff      	movs	r2, #255	; 0xff
 8007258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800725c:	f001 fd82 	bl	8008d64 <vPortExitCritical>
}
 8007260:	bf00      	nop
 8007262:	3710      	adds	r7, #16
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007270:	f001 fd44 	bl	8008cfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007278:	2b00      	cmp	r3, #0
 800727a:	d102      	bne.n	8007282 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800727c:	2301      	movs	r3, #1
 800727e:	60fb      	str	r3, [r7, #12]
 8007280:	e001      	b.n	8007286 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007282:	2300      	movs	r3, #0
 8007284:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007286:	f001 fd6d 	bl	8008d64 <vPortExitCritical>

	return xReturn;
 800728a:	68fb      	ldr	r3, [r7, #12]
}
 800728c:	4618      	mov	r0, r3
 800728e:	3710      	adds	r7, #16
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800729c:	f001 fd2e 	bl	8008cfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d102      	bne.n	80072b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80072ac:	2301      	movs	r3, #1
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	e001      	b.n	80072b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80072b2:	2300      	movs	r3, #0
 80072b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072b6:	f001 fd55 	bl	8008d64 <vPortExitCritical>

	return xReturn;
 80072ba:	68fb      	ldr	r3, [r7, #12]
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3710      	adds	r7, #16
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80072ce:	2300      	movs	r3, #0
 80072d0:	60fb      	str	r3, [r7, #12]
 80072d2:	e014      	b.n	80072fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80072d4:	4a0f      	ldr	r2, [pc, #60]	; (8007314 <vQueueAddToRegistry+0x50>)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d10b      	bne.n	80072f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80072e0:	490c      	ldr	r1, [pc, #48]	; (8007314 <vQueueAddToRegistry+0x50>)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	683a      	ldr	r2, [r7, #0]
 80072e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80072ea:	4a0a      	ldr	r2, [pc, #40]	; (8007314 <vQueueAddToRegistry+0x50>)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	00db      	lsls	r3, r3, #3
 80072f0:	4413      	add	r3, r2
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80072f6:	e006      	b.n	8007306 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	3301      	adds	r3, #1
 80072fc:	60fb      	str	r3, [r7, #12]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2b07      	cmp	r3, #7
 8007302:	d9e7      	bls.n	80072d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007304:	bf00      	nop
 8007306:	bf00      	nop
 8007308:	3714      	adds	r7, #20
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	20001b34 	.word	0x20001b34

08007318 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007318:	b580      	push	{r7, lr}
 800731a:	b086      	sub	sp, #24
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007328:	f001 fce8 	bl	8008cfc <vPortEnterCritical>
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007332:	b25b      	sxtb	r3, r3
 8007334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007338:	d103      	bne.n	8007342 <vQueueWaitForMessageRestricted+0x2a>
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007348:	b25b      	sxtb	r3, r3
 800734a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800734e:	d103      	bne.n	8007358 <vQueueWaitForMessageRestricted+0x40>
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	2200      	movs	r2, #0
 8007354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007358:	f001 fd04 	bl	8008d64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007360:	2b00      	cmp	r3, #0
 8007362:	d106      	bne.n	8007372 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	3324      	adds	r3, #36	; 0x24
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	68b9      	ldr	r1, [r7, #8]
 800736c:	4618      	mov	r0, r3
 800736e:	f000 fc89 	bl	8007c84 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007372:	6978      	ldr	r0, [r7, #20]
 8007374:	f7ff ff26 	bl	80071c4 <prvUnlockQueue>
	}
 8007378:	bf00      	nop
 800737a:	3718      	adds	r7, #24
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007380:	b580      	push	{r7, lr}
 8007382:	b08e      	sub	sp, #56	; 0x38
 8007384:	af04      	add	r7, sp, #16
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	607a      	str	r2, [r7, #4]
 800738c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800738e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10c      	bne.n	80073ae <xTaskCreateStatic+0x2e>
	__asm volatile
 8007394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007398:	b672      	cpsid	i
 800739a:	f383 8811 	msr	BASEPRI, r3
 800739e:	f3bf 8f6f 	isb	sy
 80073a2:	f3bf 8f4f 	dsb	sy
 80073a6:	b662      	cpsie	i
 80073a8:	623b      	str	r3, [r7, #32]
}
 80073aa:	bf00      	nop
 80073ac:	e7fe      	b.n	80073ac <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80073ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d10c      	bne.n	80073ce <xTaskCreateStatic+0x4e>
	__asm volatile
 80073b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b8:	b672      	cpsid	i
 80073ba:	f383 8811 	msr	BASEPRI, r3
 80073be:	f3bf 8f6f 	isb	sy
 80073c2:	f3bf 8f4f 	dsb	sy
 80073c6:	b662      	cpsie	i
 80073c8:	61fb      	str	r3, [r7, #28]
}
 80073ca:	bf00      	nop
 80073cc:	e7fe      	b.n	80073cc <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80073ce:	23bc      	movs	r3, #188	; 0xbc
 80073d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	2bbc      	cmp	r3, #188	; 0xbc
 80073d6:	d00c      	beq.n	80073f2 <xTaskCreateStatic+0x72>
	__asm volatile
 80073d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073dc:	b672      	cpsid	i
 80073de:	f383 8811 	msr	BASEPRI, r3
 80073e2:	f3bf 8f6f 	isb	sy
 80073e6:	f3bf 8f4f 	dsb	sy
 80073ea:	b662      	cpsie	i
 80073ec:	61bb      	str	r3, [r7, #24]
}
 80073ee:	bf00      	nop
 80073f0:	e7fe      	b.n	80073f0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80073f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80073f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d01e      	beq.n	8007438 <xTaskCreateStatic+0xb8>
 80073fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d01b      	beq.n	8007438 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007402:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007406:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007408:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800740a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740c:	2202      	movs	r2, #2
 800740e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007412:	2300      	movs	r3, #0
 8007414:	9303      	str	r3, [sp, #12]
 8007416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007418:	9302      	str	r3, [sp, #8]
 800741a:	f107 0314 	add.w	r3, r7, #20
 800741e:	9301      	str	r3, [sp, #4]
 8007420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007422:	9300      	str	r3, [sp, #0]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	68b9      	ldr	r1, [r7, #8]
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	f000 f850 	bl	80074d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007430:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007432:	f000 f8f5 	bl	8007620 <prvAddNewTaskToReadyList>
 8007436:	e001      	b.n	800743c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8007438:	2300      	movs	r3, #0
 800743a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800743c:	697b      	ldr	r3, [r7, #20]
	}
 800743e:	4618      	mov	r0, r3
 8007440:	3728      	adds	r7, #40	; 0x28
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007446:	b580      	push	{r7, lr}
 8007448:	b08c      	sub	sp, #48	; 0x30
 800744a:	af04      	add	r7, sp, #16
 800744c:	60f8      	str	r0, [r7, #12]
 800744e:	60b9      	str	r1, [r7, #8]
 8007450:	603b      	str	r3, [r7, #0]
 8007452:	4613      	mov	r3, r2
 8007454:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007456:	88fb      	ldrh	r3, [r7, #6]
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	4618      	mov	r0, r3
 800745c:	f001 fd7a 	bl	8008f54 <pvPortMalloc>
 8007460:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00e      	beq.n	8007486 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007468:	20bc      	movs	r0, #188	; 0xbc
 800746a:	f001 fd73 	bl	8008f54 <pvPortMalloc>
 800746e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d003      	beq.n	800747e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	697a      	ldr	r2, [r7, #20]
 800747a:	631a      	str	r2, [r3, #48]	; 0x30
 800747c:	e005      	b.n	800748a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800747e:	6978      	ldr	r0, [r7, #20]
 8007480:	f001 fe32 	bl	80090e8 <vPortFree>
 8007484:	e001      	b.n	800748a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007486:	2300      	movs	r3, #0
 8007488:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d017      	beq.n	80074c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	2200      	movs	r2, #0
 8007494:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007498:	88fa      	ldrh	r2, [r7, #6]
 800749a:	2300      	movs	r3, #0
 800749c:	9303      	str	r3, [sp, #12]
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	9302      	str	r3, [sp, #8]
 80074a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a4:	9301      	str	r3, [sp, #4]
 80074a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a8:	9300      	str	r3, [sp, #0]
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	68b9      	ldr	r1, [r7, #8]
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f000 f80e 	bl	80074d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074b4:	69f8      	ldr	r0, [r7, #28]
 80074b6:	f000 f8b3 	bl	8007620 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80074ba:	2301      	movs	r3, #1
 80074bc:	61bb      	str	r3, [r7, #24]
 80074be:	e002      	b.n	80074c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80074c0:	f04f 33ff 	mov.w	r3, #4294967295
 80074c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80074c6:	69bb      	ldr	r3, [r7, #24]
	}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3720      	adds	r7, #32
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b088      	sub	sp, #32
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	607a      	str	r2, [r7, #4]
 80074dc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80074de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	461a      	mov	r2, r3
 80074e8:	21a5      	movs	r1, #165	; 0xa5
 80074ea:	f001 ff4b 	bl	8009384 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80074ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074f2:	6879      	ldr	r1, [r7, #4]
 80074f4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80074f8:	440b      	add	r3, r1
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	4413      	add	r3, r2
 80074fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	f023 0307 	bic.w	r3, r3, #7
 8007506:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	f003 0307 	and.w	r3, r3, #7
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00c      	beq.n	800752c <prvInitialiseNewTask+0x5c>
	__asm volatile
 8007512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007516:	b672      	cpsid	i
 8007518:	f383 8811 	msr	BASEPRI, r3
 800751c:	f3bf 8f6f 	isb	sy
 8007520:	f3bf 8f4f 	dsb	sy
 8007524:	b662      	cpsie	i
 8007526:	617b      	str	r3, [r7, #20]
}
 8007528:	bf00      	nop
 800752a:	e7fe      	b.n	800752a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d01f      	beq.n	8007572 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007532:	2300      	movs	r3, #0
 8007534:	61fb      	str	r3, [r7, #28]
 8007536:	e012      	b.n	800755e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007538:	68ba      	ldr	r2, [r7, #8]
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	4413      	add	r3, r2
 800753e:	7819      	ldrb	r1, [r3, #0]
 8007540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	4413      	add	r3, r2
 8007546:	3334      	adds	r3, #52	; 0x34
 8007548:	460a      	mov	r2, r1
 800754a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800754c:	68ba      	ldr	r2, [r7, #8]
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	4413      	add	r3, r2
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d006      	beq.n	8007566 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	3301      	adds	r3, #1
 800755c:	61fb      	str	r3, [r7, #28]
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	2b0f      	cmp	r3, #15
 8007562:	d9e9      	bls.n	8007538 <prvInitialiseNewTask+0x68>
 8007564:	e000      	b.n	8007568 <prvInitialiseNewTask+0x98>
			{
				break;
 8007566:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756a:	2200      	movs	r2, #0
 800756c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007570:	e003      	b.n	800757a <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007574:	2200      	movs	r2, #0
 8007576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800757a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757c:	2b37      	cmp	r3, #55	; 0x37
 800757e:	d901      	bls.n	8007584 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007580:	2337      	movs	r3, #55	; 0x37
 8007582:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007586:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007588:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800758a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800758e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007592:	2200      	movs	r2, #0
 8007594:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007598:	3304      	adds	r3, #4
 800759a:	4618      	mov	r0, r3
 800759c:	f7ff f910 	bl	80067c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80075a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a2:	3318      	adds	r3, #24
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7ff f90b 	bl	80067c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80075aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80075b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80075ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80075c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c2:	2200      	movs	r2, #0
 80075c4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80075c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ca:	2200      	movs	r2, #0
 80075cc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80075d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d2:	3354      	adds	r3, #84	; 0x54
 80075d4:	2260      	movs	r2, #96	; 0x60
 80075d6:	2100      	movs	r1, #0
 80075d8:	4618      	mov	r0, r3
 80075da:	f001 fed3 	bl	8009384 <memset>
 80075de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e0:	4a0c      	ldr	r2, [pc, #48]	; (8007614 <prvInitialiseNewTask+0x144>)
 80075e2:	659a      	str	r2, [r3, #88]	; 0x58
 80075e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e6:	4a0c      	ldr	r2, [pc, #48]	; (8007618 <prvInitialiseNewTask+0x148>)
 80075e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80075ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ec:	4a0b      	ldr	r2, [pc, #44]	; (800761c <prvInitialiseNewTask+0x14c>)
 80075ee:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80075f0:	683a      	ldr	r2, [r7, #0]
 80075f2:	68f9      	ldr	r1, [r7, #12]
 80075f4:	69b8      	ldr	r0, [r7, #24]
 80075f6:	f001 fa77 	bl	8008ae8 <pxPortInitialiseStack>
 80075fa:	4602      	mov	r2, r0
 80075fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007602:	2b00      	cmp	r3, #0
 8007604:	d002      	beq.n	800760c <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800760a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800760c:	bf00      	nop
 800760e:	3720      	adds	r7, #32
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}
 8007614:	080096c0 	.word	0x080096c0
 8007618:	080096e0 	.word	0x080096e0
 800761c:	080096a0 	.word	0x080096a0

08007620 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007628:	f001 fb68 	bl	8008cfc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800762c:	4b2d      	ldr	r3, [pc, #180]	; (80076e4 <prvAddNewTaskToReadyList+0xc4>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	3301      	adds	r3, #1
 8007632:	4a2c      	ldr	r2, [pc, #176]	; (80076e4 <prvAddNewTaskToReadyList+0xc4>)
 8007634:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007636:	4b2c      	ldr	r3, [pc, #176]	; (80076e8 <prvAddNewTaskToReadyList+0xc8>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d109      	bne.n	8007652 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800763e:	4a2a      	ldr	r2, [pc, #168]	; (80076e8 <prvAddNewTaskToReadyList+0xc8>)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007644:	4b27      	ldr	r3, [pc, #156]	; (80076e4 <prvAddNewTaskToReadyList+0xc4>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2b01      	cmp	r3, #1
 800764a:	d110      	bne.n	800766e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800764c:	f000 fc4e 	bl	8007eec <prvInitialiseTaskLists>
 8007650:	e00d      	b.n	800766e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007652:	4b26      	ldr	r3, [pc, #152]	; (80076ec <prvAddNewTaskToReadyList+0xcc>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d109      	bne.n	800766e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800765a:	4b23      	ldr	r3, [pc, #140]	; (80076e8 <prvAddNewTaskToReadyList+0xc8>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007664:	429a      	cmp	r2, r3
 8007666:	d802      	bhi.n	800766e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007668:	4a1f      	ldr	r2, [pc, #124]	; (80076e8 <prvAddNewTaskToReadyList+0xc8>)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800766e:	4b20      	ldr	r3, [pc, #128]	; (80076f0 <prvAddNewTaskToReadyList+0xd0>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	3301      	adds	r3, #1
 8007674:	4a1e      	ldr	r2, [pc, #120]	; (80076f0 <prvAddNewTaskToReadyList+0xd0>)
 8007676:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007678:	4b1d      	ldr	r3, [pc, #116]	; (80076f0 <prvAddNewTaskToReadyList+0xd0>)
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007684:	4b1b      	ldr	r3, [pc, #108]	; (80076f4 <prvAddNewTaskToReadyList+0xd4>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	429a      	cmp	r2, r3
 800768a:	d903      	bls.n	8007694 <prvAddNewTaskToReadyList+0x74>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007690:	4a18      	ldr	r2, [pc, #96]	; (80076f4 <prvAddNewTaskToReadyList+0xd4>)
 8007692:	6013      	str	r3, [r2, #0]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007698:	4613      	mov	r3, r2
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	4413      	add	r3, r2
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4a15      	ldr	r2, [pc, #84]	; (80076f8 <prvAddNewTaskToReadyList+0xd8>)
 80076a2:	441a      	add	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	3304      	adds	r3, #4
 80076a8:	4619      	mov	r1, r3
 80076aa:	4610      	mov	r0, r2
 80076ac:	f7ff f895 	bl	80067da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80076b0:	f001 fb58 	bl	8008d64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80076b4:	4b0d      	ldr	r3, [pc, #52]	; (80076ec <prvAddNewTaskToReadyList+0xcc>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00e      	beq.n	80076da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80076bc:	4b0a      	ldr	r3, [pc, #40]	; (80076e8 <prvAddNewTaskToReadyList+0xc8>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d207      	bcs.n	80076da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80076ca:	4b0c      	ldr	r3, [pc, #48]	; (80076fc <prvAddNewTaskToReadyList+0xdc>)
 80076cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076d0:	601a      	str	r2, [r3, #0]
 80076d2:	f3bf 8f4f 	dsb	sy
 80076d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076da:	bf00      	nop
 80076dc:	3708      	adds	r7, #8
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	20002048 	.word	0x20002048
 80076e8:	20001b74 	.word	0x20001b74
 80076ec:	20002054 	.word	0x20002054
 80076f0:	20002064 	.word	0x20002064
 80076f4:	20002050 	.word	0x20002050
 80076f8:	20001b78 	.word	0x20001b78
 80076fc:	e000ed04 	.word	0xe000ed04

08007700 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007708:	2300      	movs	r3, #0
 800770a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d019      	beq.n	8007746 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007712:	4b14      	ldr	r3, [pc, #80]	; (8007764 <vTaskDelay+0x64>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00c      	beq.n	8007734 <vTaskDelay+0x34>
	__asm volatile
 800771a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800771e:	b672      	cpsid	i
 8007720:	f383 8811 	msr	BASEPRI, r3
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	b662      	cpsie	i
 800772e:	60bb      	str	r3, [r7, #8]
}
 8007730:	bf00      	nop
 8007732:	e7fe      	b.n	8007732 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007734:	f000 f88e 	bl	8007854 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007738:	2100      	movs	r1, #0
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fd62 	bl	8008204 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007740:	f000 f896 	bl	8007870 <xTaskResumeAll>
 8007744:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d107      	bne.n	800775c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800774c:	4b06      	ldr	r3, [pc, #24]	; (8007768 <vTaskDelay+0x68>)
 800774e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007752:	601a      	str	r2, [r3, #0]
 8007754:	f3bf 8f4f 	dsb	sy
 8007758:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800775c:	bf00      	nop
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}
 8007764:	20002070 	.word	0x20002070
 8007768:	e000ed04 	.word	0xe000ed04

0800776c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b08a      	sub	sp, #40	; 0x28
 8007770:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007772:	2300      	movs	r3, #0
 8007774:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007776:	2300      	movs	r3, #0
 8007778:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800777a:	463a      	mov	r2, r7
 800777c:	1d39      	adds	r1, r7, #4
 800777e:	f107 0308 	add.w	r3, r7, #8
 8007782:	4618      	mov	r0, r3
 8007784:	f7fe ffc8 	bl	8006718 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007788:	6839      	ldr	r1, [r7, #0]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	68ba      	ldr	r2, [r7, #8]
 800778e:	9202      	str	r2, [sp, #8]
 8007790:	9301      	str	r3, [sp, #4]
 8007792:	2300      	movs	r3, #0
 8007794:	9300      	str	r3, [sp, #0]
 8007796:	2300      	movs	r3, #0
 8007798:	460a      	mov	r2, r1
 800779a:	4926      	ldr	r1, [pc, #152]	; (8007834 <vTaskStartScheduler+0xc8>)
 800779c:	4826      	ldr	r0, [pc, #152]	; (8007838 <vTaskStartScheduler+0xcc>)
 800779e:	f7ff fdef 	bl	8007380 <xTaskCreateStatic>
 80077a2:	4603      	mov	r3, r0
 80077a4:	4a25      	ldr	r2, [pc, #148]	; (800783c <vTaskStartScheduler+0xd0>)
 80077a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80077a8:	4b24      	ldr	r3, [pc, #144]	; (800783c <vTaskStartScheduler+0xd0>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d002      	beq.n	80077b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80077b0:	2301      	movs	r3, #1
 80077b2:	617b      	str	r3, [r7, #20]
 80077b4:	e001      	b.n	80077ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80077b6:	2300      	movs	r3, #0
 80077b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d102      	bne.n	80077c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80077c0:	f000 fd74 	bl	80082ac <xTimerCreateTimerTask>
 80077c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d11d      	bne.n	8007808 <vTaskStartScheduler+0x9c>
	__asm volatile
 80077cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d0:	b672      	cpsid	i
 80077d2:	f383 8811 	msr	BASEPRI, r3
 80077d6:	f3bf 8f6f 	isb	sy
 80077da:	f3bf 8f4f 	dsb	sy
 80077de:	b662      	cpsie	i
 80077e0:	613b      	str	r3, [r7, #16]
}
 80077e2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80077e4:	4b16      	ldr	r3, [pc, #88]	; (8007840 <vTaskStartScheduler+0xd4>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	3354      	adds	r3, #84	; 0x54
 80077ea:	4a16      	ldr	r2, [pc, #88]	; (8007844 <vTaskStartScheduler+0xd8>)
 80077ec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80077ee:	4b16      	ldr	r3, [pc, #88]	; (8007848 <vTaskStartScheduler+0xdc>)
 80077f0:	f04f 32ff 	mov.w	r2, #4294967295
 80077f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80077f6:	4b15      	ldr	r3, [pc, #84]	; (800784c <vTaskStartScheduler+0xe0>)
 80077f8:	2201      	movs	r2, #1
 80077fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80077fc:	4b14      	ldr	r3, [pc, #80]	; (8007850 <vTaskStartScheduler+0xe4>)
 80077fe:	2200      	movs	r2, #0
 8007800:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007802:	f001 f9fd 	bl	8008c00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007806:	e010      	b.n	800782a <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800780e:	d10c      	bne.n	800782a <vTaskStartScheduler+0xbe>
	__asm volatile
 8007810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007814:	b672      	cpsid	i
 8007816:	f383 8811 	msr	BASEPRI, r3
 800781a:	f3bf 8f6f 	isb	sy
 800781e:	f3bf 8f4f 	dsb	sy
 8007822:	b662      	cpsie	i
 8007824:	60fb      	str	r3, [r7, #12]
}
 8007826:	bf00      	nop
 8007828:	e7fe      	b.n	8007828 <vTaskStartScheduler+0xbc>
}
 800782a:	bf00      	nop
 800782c:	3718      	adds	r7, #24
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	080095d8 	.word	0x080095d8
 8007838:	08007ebd 	.word	0x08007ebd
 800783c:	2000206c 	.word	0x2000206c
 8007840:	20001b74 	.word	0x20001b74
 8007844:	20000010 	.word	0x20000010
 8007848:	20002068 	.word	0x20002068
 800784c:	20002054 	.word	0x20002054
 8007850:	2000204c 	.word	0x2000204c

08007854 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007854:	b480      	push	{r7}
 8007856:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007858:	4b04      	ldr	r3, [pc, #16]	; (800786c <vTaskSuspendAll+0x18>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	3301      	adds	r3, #1
 800785e:	4a03      	ldr	r2, [pc, #12]	; (800786c <vTaskSuspendAll+0x18>)
 8007860:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007862:	bf00      	nop
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr
 800786c:	20002070 	.word	0x20002070

08007870 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007876:	2300      	movs	r3, #0
 8007878:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800787a:	2300      	movs	r3, #0
 800787c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800787e:	4b43      	ldr	r3, [pc, #268]	; (800798c <xTaskResumeAll+0x11c>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d10c      	bne.n	80078a0 <xTaskResumeAll+0x30>
	__asm volatile
 8007886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788a:	b672      	cpsid	i
 800788c:	f383 8811 	msr	BASEPRI, r3
 8007890:	f3bf 8f6f 	isb	sy
 8007894:	f3bf 8f4f 	dsb	sy
 8007898:	b662      	cpsie	i
 800789a:	603b      	str	r3, [r7, #0]
}
 800789c:	bf00      	nop
 800789e:	e7fe      	b.n	800789e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80078a0:	f001 fa2c 	bl	8008cfc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80078a4:	4b39      	ldr	r3, [pc, #228]	; (800798c <xTaskResumeAll+0x11c>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	3b01      	subs	r3, #1
 80078aa:	4a38      	ldr	r2, [pc, #224]	; (800798c <xTaskResumeAll+0x11c>)
 80078ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078ae:	4b37      	ldr	r3, [pc, #220]	; (800798c <xTaskResumeAll+0x11c>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d162      	bne.n	800797c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80078b6:	4b36      	ldr	r3, [pc, #216]	; (8007990 <xTaskResumeAll+0x120>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d05e      	beq.n	800797c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078be:	e02f      	b.n	8007920 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078c0:	4b34      	ldr	r3, [pc, #208]	; (8007994 <xTaskResumeAll+0x124>)
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	3318      	adds	r3, #24
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7fe ffe1 	bl	8006894 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	3304      	adds	r3, #4
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7fe ffdc 	bl	8006894 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e0:	4b2d      	ldr	r3, [pc, #180]	; (8007998 <xTaskResumeAll+0x128>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d903      	bls.n	80078f0 <xTaskResumeAll+0x80>
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ec:	4a2a      	ldr	r2, [pc, #168]	; (8007998 <xTaskResumeAll+0x128>)
 80078ee:	6013      	str	r3, [r2, #0]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078f4:	4613      	mov	r3, r2
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	4413      	add	r3, r2
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	4a27      	ldr	r2, [pc, #156]	; (800799c <xTaskResumeAll+0x12c>)
 80078fe:	441a      	add	r2, r3
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	3304      	adds	r3, #4
 8007904:	4619      	mov	r1, r3
 8007906:	4610      	mov	r0, r2
 8007908:	f7fe ff67 	bl	80067da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007910:	4b23      	ldr	r3, [pc, #140]	; (80079a0 <xTaskResumeAll+0x130>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007916:	429a      	cmp	r2, r3
 8007918:	d302      	bcc.n	8007920 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800791a:	4b22      	ldr	r3, [pc, #136]	; (80079a4 <xTaskResumeAll+0x134>)
 800791c:	2201      	movs	r2, #1
 800791e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007920:	4b1c      	ldr	r3, [pc, #112]	; (8007994 <xTaskResumeAll+0x124>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d1cb      	bne.n	80078c0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d001      	beq.n	8007932 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800792e:	f000 fbb9 	bl	80080a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007932:	4b1d      	ldr	r3, [pc, #116]	; (80079a8 <xTaskResumeAll+0x138>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d010      	beq.n	8007960 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800793e:	f000 f859 	bl	80079f4 <xTaskIncrementTick>
 8007942:	4603      	mov	r3, r0
 8007944:	2b00      	cmp	r3, #0
 8007946:	d002      	beq.n	800794e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8007948:	4b16      	ldr	r3, [pc, #88]	; (80079a4 <xTaskResumeAll+0x134>)
 800794a:	2201      	movs	r2, #1
 800794c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	3b01      	subs	r3, #1
 8007952:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d1f1      	bne.n	800793e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800795a:	4b13      	ldr	r3, [pc, #76]	; (80079a8 <xTaskResumeAll+0x138>)
 800795c:	2200      	movs	r2, #0
 800795e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007960:	4b10      	ldr	r3, [pc, #64]	; (80079a4 <xTaskResumeAll+0x134>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d009      	beq.n	800797c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007968:	2301      	movs	r3, #1
 800796a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800796c:	4b0f      	ldr	r3, [pc, #60]	; (80079ac <xTaskResumeAll+0x13c>)
 800796e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007972:	601a      	str	r2, [r3, #0]
 8007974:	f3bf 8f4f 	dsb	sy
 8007978:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800797c:	f001 f9f2 	bl	8008d64 <vPortExitCritical>

	return xAlreadyYielded;
 8007980:	68bb      	ldr	r3, [r7, #8]
}
 8007982:	4618      	mov	r0, r3
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	20002070 	.word	0x20002070
 8007990:	20002048 	.word	0x20002048
 8007994:	20002008 	.word	0x20002008
 8007998:	20002050 	.word	0x20002050
 800799c:	20001b78 	.word	0x20001b78
 80079a0:	20001b74 	.word	0x20001b74
 80079a4:	2000205c 	.word	0x2000205c
 80079a8:	20002058 	.word	0x20002058
 80079ac:	e000ed04 	.word	0xe000ed04

080079b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80079b6:	4b05      	ldr	r3, [pc, #20]	; (80079cc <xTaskGetTickCount+0x1c>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80079bc:	687b      	ldr	r3, [r7, #4]
}
 80079be:	4618      	mov	r0, r3
 80079c0:	370c      	adds	r7, #12
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	2000204c 	.word	0x2000204c

080079d0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80079d6:	f001 fa79 	bl	8008ecc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80079da:	2300      	movs	r3, #0
 80079dc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80079de:	4b04      	ldr	r3, [pc, #16]	; (80079f0 <xTaskGetTickCountFromISR+0x20>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80079e4:	683b      	ldr	r3, [r7, #0]
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3708      	adds	r7, #8
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	2000204c 	.word	0x2000204c

080079f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b086      	sub	sp, #24
 80079f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80079fa:	2300      	movs	r3, #0
 80079fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079fe:	4b50      	ldr	r3, [pc, #320]	; (8007b40 <xTaskIncrementTick+0x14c>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f040 808b 	bne.w	8007b1e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a08:	4b4e      	ldr	r3, [pc, #312]	; (8007b44 <xTaskIncrementTick+0x150>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a10:	4a4c      	ldr	r2, [pc, #304]	; (8007b44 <xTaskIncrementTick+0x150>)
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d122      	bne.n	8007a62 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a1c:	4b4a      	ldr	r3, [pc, #296]	; (8007b48 <xTaskIncrementTick+0x154>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d00c      	beq.n	8007a40 <xTaskIncrementTick+0x4c>
	__asm volatile
 8007a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2a:	b672      	cpsid	i
 8007a2c:	f383 8811 	msr	BASEPRI, r3
 8007a30:	f3bf 8f6f 	isb	sy
 8007a34:	f3bf 8f4f 	dsb	sy
 8007a38:	b662      	cpsie	i
 8007a3a:	603b      	str	r3, [r7, #0]
}
 8007a3c:	bf00      	nop
 8007a3e:	e7fe      	b.n	8007a3e <xTaskIncrementTick+0x4a>
 8007a40:	4b41      	ldr	r3, [pc, #260]	; (8007b48 <xTaskIncrementTick+0x154>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	60fb      	str	r3, [r7, #12]
 8007a46:	4b41      	ldr	r3, [pc, #260]	; (8007b4c <xTaskIncrementTick+0x158>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a3f      	ldr	r2, [pc, #252]	; (8007b48 <xTaskIncrementTick+0x154>)
 8007a4c:	6013      	str	r3, [r2, #0]
 8007a4e:	4a3f      	ldr	r2, [pc, #252]	; (8007b4c <xTaskIncrementTick+0x158>)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6013      	str	r3, [r2, #0]
 8007a54:	4b3e      	ldr	r3, [pc, #248]	; (8007b50 <xTaskIncrementTick+0x15c>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	4a3d      	ldr	r2, [pc, #244]	; (8007b50 <xTaskIncrementTick+0x15c>)
 8007a5c:	6013      	str	r3, [r2, #0]
 8007a5e:	f000 fb21 	bl	80080a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007a62:	4b3c      	ldr	r3, [pc, #240]	; (8007b54 <xTaskIncrementTick+0x160>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	693a      	ldr	r2, [r7, #16]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d349      	bcc.n	8007b00 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a6c:	4b36      	ldr	r3, [pc, #216]	; (8007b48 <xTaskIncrementTick+0x154>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d104      	bne.n	8007a80 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a76:	4b37      	ldr	r3, [pc, #220]	; (8007b54 <xTaskIncrementTick+0x160>)
 8007a78:	f04f 32ff 	mov.w	r2, #4294967295
 8007a7c:	601a      	str	r2, [r3, #0]
					break;
 8007a7e:	e03f      	b.n	8007b00 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a80:	4b31      	ldr	r3, [pc, #196]	; (8007b48 <xTaskIncrementTick+0x154>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007a90:	693a      	ldr	r2, [r7, #16]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d203      	bcs.n	8007aa0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007a98:	4a2e      	ldr	r2, [pc, #184]	; (8007b54 <xTaskIncrementTick+0x160>)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007a9e:	e02f      	b.n	8007b00 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	3304      	adds	r3, #4
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f7fe fef5 	bl	8006894 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d004      	beq.n	8007abc <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	3318      	adds	r3, #24
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f7fe feec 	bl	8006894 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ac0:	4b25      	ldr	r3, [pc, #148]	; (8007b58 <xTaskIncrementTick+0x164>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d903      	bls.n	8007ad0 <xTaskIncrementTick+0xdc>
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007acc:	4a22      	ldr	r2, [pc, #136]	; (8007b58 <xTaskIncrementTick+0x164>)
 8007ace:	6013      	str	r3, [r2, #0]
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ad4:	4613      	mov	r3, r2
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	4413      	add	r3, r2
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	4a1f      	ldr	r2, [pc, #124]	; (8007b5c <xTaskIncrementTick+0x168>)
 8007ade:	441a      	add	r2, r3
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	3304      	adds	r3, #4
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	4610      	mov	r0, r2
 8007ae8:	f7fe fe77 	bl	80067da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007af0:	4b1b      	ldr	r3, [pc, #108]	; (8007b60 <xTaskIncrementTick+0x16c>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d3b8      	bcc.n	8007a6c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8007afa:	2301      	movs	r3, #1
 8007afc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007afe:	e7b5      	b.n	8007a6c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b00:	4b17      	ldr	r3, [pc, #92]	; (8007b60 <xTaskIncrementTick+0x16c>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b06:	4915      	ldr	r1, [pc, #84]	; (8007b5c <xTaskIncrementTick+0x168>)
 8007b08:	4613      	mov	r3, r2
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	4413      	add	r3, r2
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	440b      	add	r3, r1
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d907      	bls.n	8007b28 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	617b      	str	r3, [r7, #20]
 8007b1c:	e004      	b.n	8007b28 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007b1e:	4b11      	ldr	r3, [pc, #68]	; (8007b64 <xTaskIncrementTick+0x170>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	3301      	adds	r3, #1
 8007b24:	4a0f      	ldr	r2, [pc, #60]	; (8007b64 <xTaskIncrementTick+0x170>)
 8007b26:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007b28:	4b0f      	ldr	r3, [pc, #60]	; (8007b68 <xTaskIncrementTick+0x174>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d001      	beq.n	8007b34 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8007b30:	2301      	movs	r3, #1
 8007b32:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007b34:	697b      	ldr	r3, [r7, #20]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3718      	adds	r7, #24
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	20002070 	.word	0x20002070
 8007b44:	2000204c 	.word	0x2000204c
 8007b48:	20002000 	.word	0x20002000
 8007b4c:	20002004 	.word	0x20002004
 8007b50:	20002060 	.word	0x20002060
 8007b54:	20002068 	.word	0x20002068
 8007b58:	20002050 	.word	0x20002050
 8007b5c:	20001b78 	.word	0x20001b78
 8007b60:	20001b74 	.word	0x20001b74
 8007b64:	20002058 	.word	0x20002058
 8007b68:	2000205c 	.word	0x2000205c

08007b6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b085      	sub	sp, #20
 8007b70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007b72:	4b2b      	ldr	r3, [pc, #172]	; (8007c20 <vTaskSwitchContext+0xb4>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d003      	beq.n	8007b82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007b7a:	4b2a      	ldr	r3, [pc, #168]	; (8007c24 <vTaskSwitchContext+0xb8>)
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b80:	e048      	b.n	8007c14 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8007b82:	4b28      	ldr	r3, [pc, #160]	; (8007c24 <vTaskSwitchContext+0xb8>)
 8007b84:	2200      	movs	r2, #0
 8007b86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b88:	4b27      	ldr	r3, [pc, #156]	; (8007c28 <vTaskSwitchContext+0xbc>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	60fb      	str	r3, [r7, #12]
 8007b8e:	e012      	b.n	8007bb6 <vTaskSwitchContext+0x4a>
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d10c      	bne.n	8007bb0 <vTaskSwitchContext+0x44>
	__asm volatile
 8007b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9a:	b672      	cpsid	i
 8007b9c:	f383 8811 	msr	BASEPRI, r3
 8007ba0:	f3bf 8f6f 	isb	sy
 8007ba4:	f3bf 8f4f 	dsb	sy
 8007ba8:	b662      	cpsie	i
 8007baa:	607b      	str	r3, [r7, #4]
}
 8007bac:	bf00      	nop
 8007bae:	e7fe      	b.n	8007bae <vTaskSwitchContext+0x42>
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	3b01      	subs	r3, #1
 8007bb4:	60fb      	str	r3, [r7, #12]
 8007bb6:	491d      	ldr	r1, [pc, #116]	; (8007c2c <vTaskSwitchContext+0xc0>)
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	4613      	mov	r3, r2
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	4413      	add	r3, r2
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	440b      	add	r3, r1
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d0e2      	beq.n	8007b90 <vTaskSwitchContext+0x24>
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	4613      	mov	r3, r2
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	4413      	add	r3, r2
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	4a15      	ldr	r2, [pc, #84]	; (8007c2c <vTaskSwitchContext+0xc0>)
 8007bd6:	4413      	add	r3, r2
 8007bd8:	60bb      	str	r3, [r7, #8]
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	685a      	ldr	r2, [r3, #4]
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	605a      	str	r2, [r3, #4]
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	685a      	ldr	r2, [r3, #4]
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	3308      	adds	r3, #8
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d104      	bne.n	8007bfa <vTaskSwitchContext+0x8e>
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	685a      	ldr	r2, [r3, #4]
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	605a      	str	r2, [r3, #4]
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	4a0b      	ldr	r2, [pc, #44]	; (8007c30 <vTaskSwitchContext+0xc4>)
 8007c02:	6013      	str	r3, [r2, #0]
 8007c04:	4a08      	ldr	r2, [pc, #32]	; (8007c28 <vTaskSwitchContext+0xbc>)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007c0a:	4b09      	ldr	r3, [pc, #36]	; (8007c30 <vTaskSwitchContext+0xc4>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	3354      	adds	r3, #84	; 0x54
 8007c10:	4a08      	ldr	r2, [pc, #32]	; (8007c34 <vTaskSwitchContext+0xc8>)
 8007c12:	6013      	str	r3, [r2, #0]
}
 8007c14:	bf00      	nop
 8007c16:	3714      	adds	r7, #20
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr
 8007c20:	20002070 	.word	0x20002070
 8007c24:	2000205c 	.word	0x2000205c
 8007c28:	20002050 	.word	0x20002050
 8007c2c:	20001b78 	.word	0x20001b78
 8007c30:	20001b74 	.word	0x20001b74
 8007c34:	20000010 	.word	0x20000010

08007c38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d10c      	bne.n	8007c62 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8007c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4c:	b672      	cpsid	i
 8007c4e:	f383 8811 	msr	BASEPRI, r3
 8007c52:	f3bf 8f6f 	isb	sy
 8007c56:	f3bf 8f4f 	dsb	sy
 8007c5a:	b662      	cpsie	i
 8007c5c:	60fb      	str	r3, [r7, #12]
}
 8007c5e:	bf00      	nop
 8007c60:	e7fe      	b.n	8007c60 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c62:	4b07      	ldr	r3, [pc, #28]	; (8007c80 <vTaskPlaceOnEventList+0x48>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	3318      	adds	r3, #24
 8007c68:	4619      	mov	r1, r3
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f7fe fdd9 	bl	8006822 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007c70:	2101      	movs	r1, #1
 8007c72:	6838      	ldr	r0, [r7, #0]
 8007c74:	f000 fac6 	bl	8008204 <prvAddCurrentTaskToDelayedList>
}
 8007c78:	bf00      	nop
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	20001b74 	.word	0x20001b74

08007c84 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b086      	sub	sp, #24
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d10c      	bne.n	8007cb0 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8007c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9a:	b672      	cpsid	i
 8007c9c:	f383 8811 	msr	BASEPRI, r3
 8007ca0:	f3bf 8f6f 	isb	sy
 8007ca4:	f3bf 8f4f 	dsb	sy
 8007ca8:	b662      	cpsie	i
 8007caa:	617b      	str	r3, [r7, #20]
}
 8007cac:	bf00      	nop
 8007cae:	e7fe      	b.n	8007cae <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007cb0:	4b0a      	ldr	r3, [pc, #40]	; (8007cdc <vTaskPlaceOnEventListRestricted+0x58>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	3318      	adds	r3, #24
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	68f8      	ldr	r0, [r7, #12]
 8007cba:	f7fe fd8e 	bl	80067da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d002      	beq.n	8007cca <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8007cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8007cc8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007cca:	6879      	ldr	r1, [r7, #4]
 8007ccc:	68b8      	ldr	r0, [r7, #8]
 8007cce:	f000 fa99 	bl	8008204 <prvAddCurrentTaskToDelayedList>
	}
 8007cd2:	bf00      	nop
 8007cd4:	3718      	adds	r7, #24
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	20001b74 	.word	0x20001b74

08007ce0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b086      	sub	sp, #24
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	68db      	ldr	r3, [r3, #12]
 8007cee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d10c      	bne.n	8007d10 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8007cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfa:	b672      	cpsid	i
 8007cfc:	f383 8811 	msr	BASEPRI, r3
 8007d00:	f3bf 8f6f 	isb	sy
 8007d04:	f3bf 8f4f 	dsb	sy
 8007d08:	b662      	cpsie	i
 8007d0a:	60fb      	str	r3, [r7, #12]
}
 8007d0c:	bf00      	nop
 8007d0e:	e7fe      	b.n	8007d0e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	3318      	adds	r3, #24
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7fe fdbd 	bl	8006894 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d1a:	4b1e      	ldr	r3, [pc, #120]	; (8007d94 <xTaskRemoveFromEventList+0xb4>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d11d      	bne.n	8007d5e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	3304      	adds	r3, #4
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7fe fdb4 	bl	8006894 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d30:	4b19      	ldr	r3, [pc, #100]	; (8007d98 <xTaskRemoveFromEventList+0xb8>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d903      	bls.n	8007d40 <xTaskRemoveFromEventList+0x60>
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d3c:	4a16      	ldr	r2, [pc, #88]	; (8007d98 <xTaskRemoveFromEventList+0xb8>)
 8007d3e:	6013      	str	r3, [r2, #0]
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d44:	4613      	mov	r3, r2
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	4413      	add	r3, r2
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	4a13      	ldr	r2, [pc, #76]	; (8007d9c <xTaskRemoveFromEventList+0xbc>)
 8007d4e:	441a      	add	r2, r3
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	3304      	adds	r3, #4
 8007d54:	4619      	mov	r1, r3
 8007d56:	4610      	mov	r0, r2
 8007d58:	f7fe fd3f 	bl	80067da <vListInsertEnd>
 8007d5c:	e005      	b.n	8007d6a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	3318      	adds	r3, #24
 8007d62:	4619      	mov	r1, r3
 8007d64:	480e      	ldr	r0, [pc, #56]	; (8007da0 <xTaskRemoveFromEventList+0xc0>)
 8007d66:	f7fe fd38 	bl	80067da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d6e:	4b0d      	ldr	r3, [pc, #52]	; (8007da4 <xTaskRemoveFromEventList+0xc4>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d905      	bls.n	8007d84 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007d7c:	4b0a      	ldr	r3, [pc, #40]	; (8007da8 <xTaskRemoveFromEventList+0xc8>)
 8007d7e:	2201      	movs	r2, #1
 8007d80:	601a      	str	r2, [r3, #0]
 8007d82:	e001      	b.n	8007d88 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8007d84:	2300      	movs	r3, #0
 8007d86:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007d88:	697b      	ldr	r3, [r7, #20]
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3718      	adds	r7, #24
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	20002070 	.word	0x20002070
 8007d98:	20002050 	.word	0x20002050
 8007d9c:	20001b78 	.word	0x20001b78
 8007da0:	20002008 	.word	0x20002008
 8007da4:	20001b74 	.word	0x20001b74
 8007da8:	2000205c 	.word	0x2000205c

08007dac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007db4:	4b06      	ldr	r3, [pc, #24]	; (8007dd0 <vTaskInternalSetTimeOutState+0x24>)
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007dbc:	4b05      	ldr	r3, [pc, #20]	; (8007dd4 <vTaskInternalSetTimeOutState+0x28>)
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	605a      	str	r2, [r3, #4]
}
 8007dc4:	bf00      	nop
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr
 8007dd0:	20002060 	.word	0x20002060
 8007dd4:	2000204c 	.word	0x2000204c

08007dd8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b088      	sub	sp, #32
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d10c      	bne.n	8007e02 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8007de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dec:	b672      	cpsid	i
 8007dee:	f383 8811 	msr	BASEPRI, r3
 8007df2:	f3bf 8f6f 	isb	sy
 8007df6:	f3bf 8f4f 	dsb	sy
 8007dfa:	b662      	cpsie	i
 8007dfc:	613b      	str	r3, [r7, #16]
}
 8007dfe:	bf00      	nop
 8007e00:	e7fe      	b.n	8007e00 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d10c      	bne.n	8007e22 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8007e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e0c:	b672      	cpsid	i
 8007e0e:	f383 8811 	msr	BASEPRI, r3
 8007e12:	f3bf 8f6f 	isb	sy
 8007e16:	f3bf 8f4f 	dsb	sy
 8007e1a:	b662      	cpsie	i
 8007e1c:	60fb      	str	r3, [r7, #12]
}
 8007e1e:	bf00      	nop
 8007e20:	e7fe      	b.n	8007e20 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8007e22:	f000 ff6b 	bl	8008cfc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007e26:	4b1d      	ldr	r3, [pc, #116]	; (8007e9c <xTaskCheckForTimeOut+0xc4>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	69ba      	ldr	r2, [r7, #24]
 8007e32:	1ad3      	subs	r3, r2, r3
 8007e34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e3e:	d102      	bne.n	8007e46 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007e40:	2300      	movs	r3, #0
 8007e42:	61fb      	str	r3, [r7, #28]
 8007e44:	e023      	b.n	8007e8e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	4b15      	ldr	r3, [pc, #84]	; (8007ea0 <xTaskCheckForTimeOut+0xc8>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d007      	beq.n	8007e62 <xTaskCheckForTimeOut+0x8a>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	69ba      	ldr	r2, [r7, #24]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d302      	bcc.n	8007e62 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	61fb      	str	r3, [r7, #28]
 8007e60:	e015      	b.n	8007e8e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	697a      	ldr	r2, [r7, #20]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d20b      	bcs.n	8007e84 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	1ad2      	subs	r2, r2, r3
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f7ff ff97 	bl	8007dac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	61fb      	str	r3, [r7, #28]
 8007e82:	e004      	b.n	8007e8e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	2200      	movs	r2, #0
 8007e88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007e8e:	f000 ff69 	bl	8008d64 <vPortExitCritical>

	return xReturn;
 8007e92:	69fb      	ldr	r3, [r7, #28]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3720      	adds	r7, #32
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	2000204c 	.word	0x2000204c
 8007ea0:	20002060 	.word	0x20002060

08007ea4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ea8:	4b03      	ldr	r3, [pc, #12]	; (8007eb8 <vTaskMissedYield+0x14>)
 8007eaa:	2201      	movs	r2, #1
 8007eac:	601a      	str	r2, [r3, #0]
}
 8007eae:	bf00      	nop
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr
 8007eb8:	2000205c 	.word	0x2000205c

08007ebc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b082      	sub	sp, #8
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007ec4:	f000 f852 	bl	8007f6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007ec8:	4b06      	ldr	r3, [pc, #24]	; (8007ee4 <prvIdleTask+0x28>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d9f9      	bls.n	8007ec4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007ed0:	4b05      	ldr	r3, [pc, #20]	; (8007ee8 <prvIdleTask+0x2c>)
 8007ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ed6:	601a      	str	r2, [r3, #0]
 8007ed8:	f3bf 8f4f 	dsb	sy
 8007edc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007ee0:	e7f0      	b.n	8007ec4 <prvIdleTask+0x8>
 8007ee2:	bf00      	nop
 8007ee4:	20001b78 	.word	0x20001b78
 8007ee8:	e000ed04 	.word	0xe000ed04

08007eec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	607b      	str	r3, [r7, #4]
 8007ef6:	e00c      	b.n	8007f12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	4613      	mov	r3, r2
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	4413      	add	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	4a12      	ldr	r2, [pc, #72]	; (8007f4c <prvInitialiseTaskLists+0x60>)
 8007f04:	4413      	add	r3, r2
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7fe fc3a 	bl	8006780 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	3301      	adds	r3, #1
 8007f10:	607b      	str	r3, [r7, #4]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2b37      	cmp	r3, #55	; 0x37
 8007f16:	d9ef      	bls.n	8007ef8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f18:	480d      	ldr	r0, [pc, #52]	; (8007f50 <prvInitialiseTaskLists+0x64>)
 8007f1a:	f7fe fc31 	bl	8006780 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f1e:	480d      	ldr	r0, [pc, #52]	; (8007f54 <prvInitialiseTaskLists+0x68>)
 8007f20:	f7fe fc2e 	bl	8006780 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f24:	480c      	ldr	r0, [pc, #48]	; (8007f58 <prvInitialiseTaskLists+0x6c>)
 8007f26:	f7fe fc2b 	bl	8006780 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007f2a:	480c      	ldr	r0, [pc, #48]	; (8007f5c <prvInitialiseTaskLists+0x70>)
 8007f2c:	f7fe fc28 	bl	8006780 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007f30:	480b      	ldr	r0, [pc, #44]	; (8007f60 <prvInitialiseTaskLists+0x74>)
 8007f32:	f7fe fc25 	bl	8006780 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f36:	4b0b      	ldr	r3, [pc, #44]	; (8007f64 <prvInitialiseTaskLists+0x78>)
 8007f38:	4a05      	ldr	r2, [pc, #20]	; (8007f50 <prvInitialiseTaskLists+0x64>)
 8007f3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f3c:	4b0a      	ldr	r3, [pc, #40]	; (8007f68 <prvInitialiseTaskLists+0x7c>)
 8007f3e:	4a05      	ldr	r2, [pc, #20]	; (8007f54 <prvInitialiseTaskLists+0x68>)
 8007f40:	601a      	str	r2, [r3, #0]
}
 8007f42:	bf00      	nop
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	20001b78 	.word	0x20001b78
 8007f50:	20001fd8 	.word	0x20001fd8
 8007f54:	20001fec 	.word	0x20001fec
 8007f58:	20002008 	.word	0x20002008
 8007f5c:	2000201c 	.word	0x2000201c
 8007f60:	20002034 	.word	0x20002034
 8007f64:	20002000 	.word	0x20002000
 8007f68:	20002004 	.word	0x20002004

08007f6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f72:	e019      	b.n	8007fa8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007f74:	f000 fec2 	bl	8008cfc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f78:	4b10      	ldr	r3, [pc, #64]	; (8007fbc <prvCheckTasksWaitingTermination+0x50>)
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	3304      	adds	r3, #4
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7fe fc85 	bl	8006894 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007f8a:	4b0d      	ldr	r3, [pc, #52]	; (8007fc0 <prvCheckTasksWaitingTermination+0x54>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	3b01      	subs	r3, #1
 8007f90:	4a0b      	ldr	r2, [pc, #44]	; (8007fc0 <prvCheckTasksWaitingTermination+0x54>)
 8007f92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f94:	4b0b      	ldr	r3, [pc, #44]	; (8007fc4 <prvCheckTasksWaitingTermination+0x58>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	4a0a      	ldr	r2, [pc, #40]	; (8007fc4 <prvCheckTasksWaitingTermination+0x58>)
 8007f9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f9e:	f000 fee1 	bl	8008d64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 f848 	bl	8008038 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fa8:	4b06      	ldr	r3, [pc, #24]	; (8007fc4 <prvCheckTasksWaitingTermination+0x58>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d1e1      	bne.n	8007f74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007fb0:	bf00      	nop
 8007fb2:	bf00      	nop
 8007fb4:	3708      	adds	r7, #8
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	2000201c 	.word	0x2000201c
 8007fc0:	20002048 	.word	0x20002048
 8007fc4:	20002030 	.word	0x20002030

08007fc8 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8007fd4:	e005      	b.n	8007fe2 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	607b      	str	r3, [r7, #4]
			ulCount++;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	2ba5      	cmp	r3, #165	; 0xa5
 8007fe8:	d0f5      	beq.n	8007fd6 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	089b      	lsrs	r3, r3, #2
 8007fee:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	b29b      	uxth	r3, r3
	}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3714      	adds	r7, #20
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8008000:	b580      	push	{r7, lr}
 8008002:	b086      	sub	sp, #24
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d102      	bne.n	8008014 <uxTaskGetStackHighWaterMark+0x14>
 800800e:	4b09      	ldr	r3, [pc, #36]	; (8008034 <uxTaskGetStackHighWaterMark+0x34>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	e000      	b.n	8008016 <uxTaskGetStackHighWaterMark+0x16>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800801c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800801e:	6938      	ldr	r0, [r7, #16]
 8008020:	f7ff ffd2 	bl	8007fc8 <prvTaskCheckFreeStackSpace>
 8008024:	4603      	mov	r3, r0
 8008026:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8008028:	68fb      	ldr	r3, [r7, #12]
	}
 800802a:	4618      	mov	r0, r3
 800802c:	3718      	adds	r7, #24
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	20001b74 	.word	0x20001b74

08008038 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	3354      	adds	r3, #84	; 0x54
 8008044:	4618      	mov	r0, r3
 8008046:	f001 f9b3 	bl	80093b0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008050:	2b00      	cmp	r3, #0
 8008052:	d108      	bne.n	8008066 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008058:	4618      	mov	r0, r3
 800805a:	f001 f845 	bl	80090e8 <vPortFree>
				vPortFree( pxTCB );
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f001 f842 	bl	80090e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008064:	e01a      	b.n	800809c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800806c:	2b01      	cmp	r3, #1
 800806e:	d103      	bne.n	8008078 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f001 f839 	bl	80090e8 <vPortFree>
	}
 8008076:	e011      	b.n	800809c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800807e:	2b02      	cmp	r3, #2
 8008080:	d00c      	beq.n	800809c <prvDeleteTCB+0x64>
	__asm volatile
 8008082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008086:	b672      	cpsid	i
 8008088:	f383 8811 	msr	BASEPRI, r3
 800808c:	f3bf 8f6f 	isb	sy
 8008090:	f3bf 8f4f 	dsb	sy
 8008094:	b662      	cpsie	i
 8008096:	60fb      	str	r3, [r7, #12]
}
 8008098:	bf00      	nop
 800809a:	e7fe      	b.n	800809a <prvDeleteTCB+0x62>
	}
 800809c:	bf00      	nop
 800809e:	3710      	adds	r7, #16
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080aa:	4b0c      	ldr	r3, [pc, #48]	; (80080dc <prvResetNextTaskUnblockTime+0x38>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d104      	bne.n	80080be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80080b4:	4b0a      	ldr	r3, [pc, #40]	; (80080e0 <prvResetNextTaskUnblockTime+0x3c>)
 80080b6:	f04f 32ff 	mov.w	r2, #4294967295
 80080ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80080bc:	e008      	b.n	80080d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080be:	4b07      	ldr	r3, [pc, #28]	; (80080dc <prvResetNextTaskUnblockTime+0x38>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	4a04      	ldr	r2, [pc, #16]	; (80080e0 <prvResetNextTaskUnblockTime+0x3c>)
 80080ce:	6013      	str	r3, [r2, #0]
}
 80080d0:	bf00      	nop
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr
 80080dc:	20002000 	.word	0x20002000
 80080e0:	20002068 	.word	0x20002068

080080e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80080ea:	4b0b      	ldr	r3, [pc, #44]	; (8008118 <xTaskGetSchedulerState+0x34>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d102      	bne.n	80080f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80080f2:	2301      	movs	r3, #1
 80080f4:	607b      	str	r3, [r7, #4]
 80080f6:	e008      	b.n	800810a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080f8:	4b08      	ldr	r3, [pc, #32]	; (800811c <xTaskGetSchedulerState+0x38>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d102      	bne.n	8008106 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008100:	2302      	movs	r3, #2
 8008102:	607b      	str	r3, [r7, #4]
 8008104:	e001      	b.n	800810a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008106:	2300      	movs	r3, #0
 8008108:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800810a:	687b      	ldr	r3, [r7, #4]
	}
 800810c:	4618      	mov	r0, r3
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr
 8008118:	20002054 	.word	0x20002054
 800811c:	20002070 	.word	0x20002070

08008120 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008120:	b580      	push	{r7, lr}
 8008122:	b086      	sub	sp, #24
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800812c:	2300      	movs	r3, #0
 800812e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d05a      	beq.n	80081ec <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008136:	4b30      	ldr	r3, [pc, #192]	; (80081f8 <xTaskPriorityDisinherit+0xd8>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	693a      	ldr	r2, [r7, #16]
 800813c:	429a      	cmp	r2, r3
 800813e:	d00c      	beq.n	800815a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008144:	b672      	cpsid	i
 8008146:	f383 8811 	msr	BASEPRI, r3
 800814a:	f3bf 8f6f 	isb	sy
 800814e:	f3bf 8f4f 	dsb	sy
 8008152:	b662      	cpsie	i
 8008154:	60fb      	str	r3, [r7, #12]
}
 8008156:	bf00      	nop
 8008158:	e7fe      	b.n	8008158 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800815e:	2b00      	cmp	r3, #0
 8008160:	d10c      	bne.n	800817c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8008162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008166:	b672      	cpsid	i
 8008168:	f383 8811 	msr	BASEPRI, r3
 800816c:	f3bf 8f6f 	isb	sy
 8008170:	f3bf 8f4f 	dsb	sy
 8008174:	b662      	cpsie	i
 8008176:	60bb      	str	r3, [r7, #8]
}
 8008178:	bf00      	nop
 800817a:	e7fe      	b.n	800817a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008180:	1e5a      	subs	r2, r3, #1
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800818e:	429a      	cmp	r2, r3
 8008190:	d02c      	beq.n	80081ec <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008196:	2b00      	cmp	r3, #0
 8008198:	d128      	bne.n	80081ec <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	3304      	adds	r3, #4
 800819e:	4618      	mov	r0, r3
 80081a0:	f7fe fb78 	bl	8006894 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081bc:	4b0f      	ldr	r3, [pc, #60]	; (80081fc <xTaskPriorityDisinherit+0xdc>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d903      	bls.n	80081cc <xTaskPriorityDisinherit+0xac>
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c8:	4a0c      	ldr	r2, [pc, #48]	; (80081fc <xTaskPriorityDisinherit+0xdc>)
 80081ca:	6013      	str	r3, [r2, #0]
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081d0:	4613      	mov	r3, r2
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	4413      	add	r3, r2
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	4a09      	ldr	r2, [pc, #36]	; (8008200 <xTaskPriorityDisinherit+0xe0>)
 80081da:	441a      	add	r2, r3
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	3304      	adds	r3, #4
 80081e0:	4619      	mov	r1, r3
 80081e2:	4610      	mov	r0, r2
 80081e4:	f7fe faf9 	bl	80067da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80081e8:	2301      	movs	r3, #1
 80081ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80081ec:	697b      	ldr	r3, [r7, #20]
	}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3718      	adds	r7, #24
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	20001b74 	.word	0x20001b74
 80081fc:	20002050 	.word	0x20002050
 8008200:	20001b78 	.word	0x20001b78

08008204 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800820e:	4b21      	ldr	r3, [pc, #132]	; (8008294 <prvAddCurrentTaskToDelayedList+0x90>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008214:	4b20      	ldr	r3, [pc, #128]	; (8008298 <prvAddCurrentTaskToDelayedList+0x94>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	3304      	adds	r3, #4
 800821a:	4618      	mov	r0, r3
 800821c:	f7fe fb3a 	bl	8006894 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008226:	d10a      	bne.n	800823e <prvAddCurrentTaskToDelayedList+0x3a>
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d007      	beq.n	800823e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800822e:	4b1a      	ldr	r3, [pc, #104]	; (8008298 <prvAddCurrentTaskToDelayedList+0x94>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	3304      	adds	r3, #4
 8008234:	4619      	mov	r1, r3
 8008236:	4819      	ldr	r0, [pc, #100]	; (800829c <prvAddCurrentTaskToDelayedList+0x98>)
 8008238:	f7fe facf 	bl	80067da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800823c:	e026      	b.n	800828c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800823e:	68fa      	ldr	r2, [r7, #12]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4413      	add	r3, r2
 8008244:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008246:	4b14      	ldr	r3, [pc, #80]	; (8008298 <prvAddCurrentTaskToDelayedList+0x94>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800824e:	68ba      	ldr	r2, [r7, #8]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	429a      	cmp	r2, r3
 8008254:	d209      	bcs.n	800826a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008256:	4b12      	ldr	r3, [pc, #72]	; (80082a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	4b0f      	ldr	r3, [pc, #60]	; (8008298 <prvAddCurrentTaskToDelayedList+0x94>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	3304      	adds	r3, #4
 8008260:	4619      	mov	r1, r3
 8008262:	4610      	mov	r0, r2
 8008264:	f7fe fadd 	bl	8006822 <vListInsert>
}
 8008268:	e010      	b.n	800828c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800826a:	4b0e      	ldr	r3, [pc, #56]	; (80082a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	4b0a      	ldr	r3, [pc, #40]	; (8008298 <prvAddCurrentTaskToDelayedList+0x94>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	3304      	adds	r3, #4
 8008274:	4619      	mov	r1, r3
 8008276:	4610      	mov	r0, r2
 8008278:	f7fe fad3 	bl	8006822 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800827c:	4b0a      	ldr	r3, [pc, #40]	; (80082a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	68ba      	ldr	r2, [r7, #8]
 8008282:	429a      	cmp	r2, r3
 8008284:	d202      	bcs.n	800828c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008286:	4a08      	ldr	r2, [pc, #32]	; (80082a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	6013      	str	r3, [r2, #0]
}
 800828c:	bf00      	nop
 800828e:	3710      	adds	r7, #16
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	2000204c 	.word	0x2000204c
 8008298:	20001b74 	.word	0x20001b74
 800829c:	20002034 	.word	0x20002034
 80082a0:	20002004 	.word	0x20002004
 80082a4:	20002000 	.word	0x20002000
 80082a8:	20002068 	.word	0x20002068

080082ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b08a      	sub	sp, #40	; 0x28
 80082b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80082b2:	2300      	movs	r3, #0
 80082b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80082b6:	f000 fbb5 	bl	8008a24 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80082ba:	4b1d      	ldr	r3, [pc, #116]	; (8008330 <xTimerCreateTimerTask+0x84>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d021      	beq.n	8008306 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80082c2:	2300      	movs	r3, #0
 80082c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80082c6:	2300      	movs	r3, #0
 80082c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80082ca:	1d3a      	adds	r2, r7, #4
 80082cc:	f107 0108 	add.w	r1, r7, #8
 80082d0:	f107 030c 	add.w	r3, r7, #12
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7fe fa39 	bl	800674c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80082da:	6879      	ldr	r1, [r7, #4]
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	68fa      	ldr	r2, [r7, #12]
 80082e0:	9202      	str	r2, [sp, #8]
 80082e2:	9301      	str	r3, [sp, #4]
 80082e4:	2308      	movs	r3, #8
 80082e6:	9300      	str	r3, [sp, #0]
 80082e8:	2300      	movs	r3, #0
 80082ea:	460a      	mov	r2, r1
 80082ec:	4911      	ldr	r1, [pc, #68]	; (8008334 <xTimerCreateTimerTask+0x88>)
 80082ee:	4812      	ldr	r0, [pc, #72]	; (8008338 <xTimerCreateTimerTask+0x8c>)
 80082f0:	f7ff f846 	bl	8007380 <xTaskCreateStatic>
 80082f4:	4603      	mov	r3, r0
 80082f6:	4a11      	ldr	r2, [pc, #68]	; (800833c <xTimerCreateTimerTask+0x90>)
 80082f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80082fa:	4b10      	ldr	r3, [pc, #64]	; (800833c <xTimerCreateTimerTask+0x90>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d001      	beq.n	8008306 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008302:	2301      	movs	r3, #1
 8008304:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d10c      	bne.n	8008326 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800830c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008310:	b672      	cpsid	i
 8008312:	f383 8811 	msr	BASEPRI, r3
 8008316:	f3bf 8f6f 	isb	sy
 800831a:	f3bf 8f4f 	dsb	sy
 800831e:	b662      	cpsie	i
 8008320:	613b      	str	r3, [r7, #16]
}
 8008322:	bf00      	nop
 8008324:	e7fe      	b.n	8008324 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8008326:	697b      	ldr	r3, [r7, #20]
}
 8008328:	4618      	mov	r0, r3
 800832a:	3718      	adds	r7, #24
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}
 8008330:	200020a4 	.word	0x200020a4
 8008334:	080095e0 	.word	0x080095e0
 8008338:	080085bd 	.word	0x080085bd
 800833c:	200020a8 	.word	0x200020a8

08008340 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8008340:	b580      	push	{r7, lr}
 8008342:	b088      	sub	sp, #32
 8008344:	af02      	add	r7, sp, #8
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	60b9      	str	r1, [r7, #8]
 800834a:	607a      	str	r2, [r7, #4]
 800834c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800834e:	202c      	movs	r0, #44	; 0x2c
 8008350:	f000 fe00 	bl	8008f54 <pvPortMalloc>
 8008354:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d00d      	beq.n	8008378 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	2200      	movs	r2, #0
 8008360:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	9301      	str	r3, [sp, #4]
 8008368:	6a3b      	ldr	r3, [r7, #32]
 800836a:	9300      	str	r3, [sp, #0]
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	68b9      	ldr	r1, [r7, #8]
 8008372:	68f8      	ldr	r0, [r7, #12]
 8008374:	f000 f847 	bl	8008406 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8008378:	697b      	ldr	r3, [r7, #20]
	}
 800837a:	4618      	mov	r0, r3
 800837c:	3718      	adds	r7, #24
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8008382:	b580      	push	{r7, lr}
 8008384:	b08a      	sub	sp, #40	; 0x28
 8008386:	af02      	add	r7, sp, #8
 8008388:	60f8      	str	r0, [r7, #12]
 800838a:	60b9      	str	r1, [r7, #8]
 800838c:	607a      	str	r2, [r7, #4]
 800838e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8008390:	232c      	movs	r3, #44	; 0x2c
 8008392:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	2b2c      	cmp	r3, #44	; 0x2c
 8008398:	d00c      	beq.n	80083b4 <xTimerCreateStatic+0x32>
	__asm volatile
 800839a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839e:	b672      	cpsid	i
 80083a0:	f383 8811 	msr	BASEPRI, r3
 80083a4:	f3bf 8f6f 	isb	sy
 80083a8:	f3bf 8f4f 	dsb	sy
 80083ac:	b662      	cpsie	i
 80083ae:	61bb      	str	r3, [r7, #24]
}
 80083b0:	bf00      	nop
 80083b2:	e7fe      	b.n	80083b2 <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80083b4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80083b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d10c      	bne.n	80083d6 <xTimerCreateStatic+0x54>
	__asm volatile
 80083bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c0:	b672      	cpsid	i
 80083c2:	f383 8811 	msr	BASEPRI, r3
 80083c6:	f3bf 8f6f 	isb	sy
 80083ca:	f3bf 8f4f 	dsb	sy
 80083ce:	b662      	cpsie	i
 80083d0:	617b      	str	r3, [r7, #20]
}
 80083d2:	bf00      	nop
 80083d4:	e7fe      	b.n	80083d4 <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80083d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d8:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d00d      	beq.n	80083fc <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	2202      	movs	r2, #2
 80083e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80083e8:	69fb      	ldr	r3, [r7, #28]
 80083ea:	9301      	str	r3, [sp, #4]
 80083ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ee:	9300      	str	r3, [sp, #0]
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	68b9      	ldr	r1, [r7, #8]
 80083f6:	68f8      	ldr	r0, [r7, #12]
 80083f8:	f000 f805 	bl	8008406 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80083fc:	69fb      	ldr	r3, [r7, #28]
	}
 80083fe:	4618      	mov	r0, r3
 8008400:	3720      	adds	r7, #32
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8008406:	b580      	push	{r7, lr}
 8008408:	b086      	sub	sp, #24
 800840a:	af00      	add	r7, sp, #0
 800840c:	60f8      	str	r0, [r7, #12]
 800840e:	60b9      	str	r1, [r7, #8]
 8008410:	607a      	str	r2, [r7, #4]
 8008412:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d10c      	bne.n	8008434 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 800841a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841e:	b672      	cpsid	i
 8008420:	f383 8811 	msr	BASEPRI, r3
 8008424:	f3bf 8f6f 	isb	sy
 8008428:	f3bf 8f4f 	dsb	sy
 800842c:	b662      	cpsie	i
 800842e:	617b      	str	r3, [r7, #20]
}
 8008430:	bf00      	nop
 8008432:	e7fe      	b.n	8008432 <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 8008434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008436:	2b00      	cmp	r3, #0
 8008438:	d01e      	beq.n	8008478 <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800843a:	f000 faf3 	bl	8008a24 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800843e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008446:	68ba      	ldr	r2, [r7, #8]
 8008448:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800844a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844c:	683a      	ldr	r2, [r7, #0]
 800844e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008452:	6a3a      	ldr	r2, [r7, #32]
 8008454:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008458:	3304      	adds	r3, #4
 800845a:	4618      	mov	r0, r3
 800845c:	f7fe f9b0 	bl	80067c0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d008      	beq.n	8008478 <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8008466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008468:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800846c:	f043 0304 	orr.w	r3, r3, #4
 8008470:	b2da      	uxtb	r2, r3
 8008472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008474:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008478:	bf00      	nop
 800847a:	3718      	adds	r7, #24
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b08a      	sub	sp, #40	; 0x28
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	607a      	str	r2, [r7, #4]
 800848c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800848e:	2300      	movs	r3, #0
 8008490:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d10c      	bne.n	80084b2 <xTimerGenericCommand+0x32>
	__asm volatile
 8008498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800849c:	b672      	cpsid	i
 800849e:	f383 8811 	msr	BASEPRI, r3
 80084a2:	f3bf 8f6f 	isb	sy
 80084a6:	f3bf 8f4f 	dsb	sy
 80084aa:	b662      	cpsie	i
 80084ac:	623b      	str	r3, [r7, #32]
}
 80084ae:	bf00      	nop
 80084b0:	e7fe      	b.n	80084b0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80084b2:	4b1a      	ldr	r3, [pc, #104]	; (800851c <xTimerGenericCommand+0x9c>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d02a      	beq.n	8008510 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	2b05      	cmp	r3, #5
 80084ca:	dc18      	bgt.n	80084fe <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80084cc:	f7ff fe0a 	bl	80080e4 <xTaskGetSchedulerState>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b02      	cmp	r3, #2
 80084d4:	d109      	bne.n	80084ea <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80084d6:	4b11      	ldr	r3, [pc, #68]	; (800851c <xTimerGenericCommand+0x9c>)
 80084d8:	6818      	ldr	r0, [r3, #0]
 80084da:	f107 0110 	add.w	r1, r7, #16
 80084de:	2300      	movs	r3, #0
 80084e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084e2:	f7fe fb53 	bl	8006b8c <xQueueGenericSend>
 80084e6:	6278      	str	r0, [r7, #36]	; 0x24
 80084e8:	e012      	b.n	8008510 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80084ea:	4b0c      	ldr	r3, [pc, #48]	; (800851c <xTimerGenericCommand+0x9c>)
 80084ec:	6818      	ldr	r0, [r3, #0]
 80084ee:	f107 0110 	add.w	r1, r7, #16
 80084f2:	2300      	movs	r3, #0
 80084f4:	2200      	movs	r2, #0
 80084f6:	f7fe fb49 	bl	8006b8c <xQueueGenericSend>
 80084fa:	6278      	str	r0, [r7, #36]	; 0x24
 80084fc:	e008      	b.n	8008510 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80084fe:	4b07      	ldr	r3, [pc, #28]	; (800851c <xTimerGenericCommand+0x9c>)
 8008500:	6818      	ldr	r0, [r3, #0]
 8008502:	f107 0110 	add.w	r1, r7, #16
 8008506:	2300      	movs	r3, #0
 8008508:	683a      	ldr	r2, [r7, #0]
 800850a:	f7fe fc45 	bl	8006d98 <xQueueGenericSendFromISR>
 800850e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008512:	4618      	mov	r0, r3
 8008514:	3728      	adds	r7, #40	; 0x28
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	200020a4 	.word	0x200020a4

08008520 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b088      	sub	sp, #32
 8008524:	af02      	add	r7, sp, #8
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800852a:	4b23      	ldr	r3, [pc, #140]	; (80085b8 <prvProcessExpiredTimer+0x98>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	3304      	adds	r3, #4
 8008538:	4618      	mov	r0, r3
 800853a:	f7fe f9ab 	bl	8006894 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008544:	f003 0304 	and.w	r3, r3, #4
 8008548:	2b00      	cmp	r3, #0
 800854a:	d024      	beq.n	8008596 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	699a      	ldr	r2, [r3, #24]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	18d1      	adds	r1, r2, r3
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	683a      	ldr	r2, [r7, #0]
 8008558:	6978      	ldr	r0, [r7, #20]
 800855a:	f000 f8d3 	bl	8008704 <prvInsertTimerInActiveList>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d021      	beq.n	80085a8 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008564:	2300      	movs	r3, #0
 8008566:	9300      	str	r3, [sp, #0]
 8008568:	2300      	movs	r3, #0
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	2100      	movs	r1, #0
 800856e:	6978      	ldr	r0, [r7, #20]
 8008570:	f7ff ff86 	bl	8008480 <xTimerGenericCommand>
 8008574:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d115      	bne.n	80085a8 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800857c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008580:	b672      	cpsid	i
 8008582:	f383 8811 	msr	BASEPRI, r3
 8008586:	f3bf 8f6f 	isb	sy
 800858a:	f3bf 8f4f 	dsb	sy
 800858e:	b662      	cpsie	i
 8008590:	60fb      	str	r3, [r7, #12]
}
 8008592:	bf00      	nop
 8008594:	e7fe      	b.n	8008594 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800859c:	f023 0301 	bic.w	r3, r3, #1
 80085a0:	b2da      	uxtb	r2, r3
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	6a1b      	ldr	r3, [r3, #32]
 80085ac:	6978      	ldr	r0, [r7, #20]
 80085ae:	4798      	blx	r3
}
 80085b0:	bf00      	nop
 80085b2:	3718      	adds	r7, #24
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	2000209c 	.word	0x2000209c

080085bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80085c4:	f107 0308 	add.w	r3, r7, #8
 80085c8:	4618      	mov	r0, r3
 80085ca:	f000 f857 	bl	800867c <prvGetNextExpireTime>
 80085ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	4619      	mov	r1, r3
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	f000 f803 	bl	80085e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80085da:	f000 f8d5 	bl	8008788 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80085de:	e7f1      	b.n	80085c4 <prvTimerTask+0x8>

080085e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80085ea:	f7ff f933 	bl	8007854 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80085ee:	f107 0308 	add.w	r3, r7, #8
 80085f2:	4618      	mov	r0, r3
 80085f4:	f000 f866 	bl	80086c4 <prvSampleTimeNow>
 80085f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d130      	bne.n	8008662 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d10a      	bne.n	800861c <prvProcessTimerOrBlockTask+0x3c>
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	429a      	cmp	r2, r3
 800860c:	d806      	bhi.n	800861c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800860e:	f7ff f92f 	bl	8007870 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008612:	68f9      	ldr	r1, [r7, #12]
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f7ff ff83 	bl	8008520 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800861a:	e024      	b.n	8008666 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d008      	beq.n	8008634 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008622:	4b13      	ldr	r3, [pc, #76]	; (8008670 <prvProcessTimerOrBlockTask+0x90>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d101      	bne.n	8008630 <prvProcessTimerOrBlockTask+0x50>
 800862c:	2301      	movs	r3, #1
 800862e:	e000      	b.n	8008632 <prvProcessTimerOrBlockTask+0x52>
 8008630:	2300      	movs	r3, #0
 8008632:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008634:	4b0f      	ldr	r3, [pc, #60]	; (8008674 <prvProcessTimerOrBlockTask+0x94>)
 8008636:	6818      	ldr	r0, [r3, #0]
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	1ad3      	subs	r3, r2, r3
 800863e:	683a      	ldr	r2, [r7, #0]
 8008640:	4619      	mov	r1, r3
 8008642:	f7fe fe69 	bl	8007318 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008646:	f7ff f913 	bl	8007870 <xTaskResumeAll>
 800864a:	4603      	mov	r3, r0
 800864c:	2b00      	cmp	r3, #0
 800864e:	d10a      	bne.n	8008666 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008650:	4b09      	ldr	r3, [pc, #36]	; (8008678 <prvProcessTimerOrBlockTask+0x98>)
 8008652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008656:	601a      	str	r2, [r3, #0]
 8008658:	f3bf 8f4f 	dsb	sy
 800865c:	f3bf 8f6f 	isb	sy
}
 8008660:	e001      	b.n	8008666 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008662:	f7ff f905 	bl	8007870 <xTaskResumeAll>
}
 8008666:	bf00      	nop
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	200020a0 	.word	0x200020a0
 8008674:	200020a4 	.word	0x200020a4
 8008678:	e000ed04 	.word	0xe000ed04

0800867c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800867c:	b480      	push	{r7}
 800867e:	b085      	sub	sp, #20
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008684:	4b0e      	ldr	r3, [pc, #56]	; (80086c0 <prvGetNextExpireTime+0x44>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d101      	bne.n	8008692 <prvGetNextExpireTime+0x16>
 800868e:	2201      	movs	r2, #1
 8008690:	e000      	b.n	8008694 <prvGetNextExpireTime+0x18>
 8008692:	2200      	movs	r2, #0
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d105      	bne.n	80086ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80086a0:	4b07      	ldr	r3, [pc, #28]	; (80086c0 <prvGetNextExpireTime+0x44>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	60fb      	str	r3, [r7, #12]
 80086aa:	e001      	b.n	80086b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80086ac:	2300      	movs	r3, #0
 80086ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80086b0:	68fb      	ldr	r3, [r7, #12]
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3714      	adds	r7, #20
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop
 80086c0:	2000209c 	.word	0x2000209c

080086c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80086cc:	f7ff f970 	bl	80079b0 <xTaskGetTickCount>
 80086d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80086d2:	4b0b      	ldr	r3, [pc, #44]	; (8008700 <prvSampleTimeNow+0x3c>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	68fa      	ldr	r2, [r7, #12]
 80086d8:	429a      	cmp	r2, r3
 80086da:	d205      	bcs.n	80086e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80086dc:	f000 f93c 	bl	8008958 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2201      	movs	r2, #1
 80086e4:	601a      	str	r2, [r3, #0]
 80086e6:	e002      	b.n	80086ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80086ee:	4a04      	ldr	r2, [pc, #16]	; (8008700 <prvSampleTimeNow+0x3c>)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80086f4:	68fb      	ldr	r3, [r7, #12]
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	200020ac 	.word	0x200020ac

08008704 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b086      	sub	sp, #24
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	607a      	str	r2, [r7, #4]
 8008710:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008712:	2300      	movs	r3, #0
 8008714:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	68ba      	ldr	r2, [r7, #8]
 800871a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	68fa      	ldr	r2, [r7, #12]
 8008720:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008722:	68ba      	ldr	r2, [r7, #8]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	429a      	cmp	r2, r3
 8008728:	d812      	bhi.n	8008750 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	1ad2      	subs	r2, r2, r3
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	699b      	ldr	r3, [r3, #24]
 8008734:	429a      	cmp	r2, r3
 8008736:	d302      	bcc.n	800873e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008738:	2301      	movs	r3, #1
 800873a:	617b      	str	r3, [r7, #20]
 800873c:	e01b      	b.n	8008776 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800873e:	4b10      	ldr	r3, [pc, #64]	; (8008780 <prvInsertTimerInActiveList+0x7c>)
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	3304      	adds	r3, #4
 8008746:	4619      	mov	r1, r3
 8008748:	4610      	mov	r0, r2
 800874a:	f7fe f86a 	bl	8006822 <vListInsert>
 800874e:	e012      	b.n	8008776 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	429a      	cmp	r2, r3
 8008756:	d206      	bcs.n	8008766 <prvInsertTimerInActiveList+0x62>
 8008758:	68ba      	ldr	r2, [r7, #8]
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	429a      	cmp	r2, r3
 800875e:	d302      	bcc.n	8008766 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008760:	2301      	movs	r3, #1
 8008762:	617b      	str	r3, [r7, #20]
 8008764:	e007      	b.n	8008776 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008766:	4b07      	ldr	r3, [pc, #28]	; (8008784 <prvInsertTimerInActiveList+0x80>)
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	3304      	adds	r3, #4
 800876e:	4619      	mov	r1, r3
 8008770:	4610      	mov	r0, r2
 8008772:	f7fe f856 	bl	8006822 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008776:	697b      	ldr	r3, [r7, #20]
}
 8008778:	4618      	mov	r0, r3
 800877a:	3718      	adds	r7, #24
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}
 8008780:	200020a0 	.word	0x200020a0
 8008784:	2000209c 	.word	0x2000209c

08008788 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b08e      	sub	sp, #56	; 0x38
 800878c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800878e:	e0d0      	b.n	8008932 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2b00      	cmp	r3, #0
 8008794:	da1a      	bge.n	80087cc <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008796:	1d3b      	adds	r3, r7, #4
 8008798:	3304      	adds	r3, #4
 800879a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800879c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d10c      	bne.n	80087bc <prvProcessReceivedCommands+0x34>
	__asm volatile
 80087a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a6:	b672      	cpsid	i
 80087a8:	f383 8811 	msr	BASEPRI, r3
 80087ac:	f3bf 8f6f 	isb	sy
 80087b0:	f3bf 8f4f 	dsb	sy
 80087b4:	b662      	cpsie	i
 80087b6:	61fb      	str	r3, [r7, #28]
}
 80087b8:	bf00      	nop
 80087ba:	e7fe      	b.n	80087ba <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80087bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087c2:	6850      	ldr	r0, [r2, #4]
 80087c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087c6:	6892      	ldr	r2, [r2, #8]
 80087c8:	4611      	mov	r1, r2
 80087ca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	f2c0 80ae 	blt.w	8008930 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80087d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087da:	695b      	ldr	r3, [r3, #20]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d004      	beq.n	80087ea <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e2:	3304      	adds	r3, #4
 80087e4:	4618      	mov	r0, r3
 80087e6:	f7fe f855 	bl	8006894 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80087ea:	463b      	mov	r3, r7
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7ff ff69 	bl	80086c4 <prvSampleTimeNow>
 80087f2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2b09      	cmp	r3, #9
 80087f8:	f200 809b 	bhi.w	8008932 <prvProcessReceivedCommands+0x1aa>
 80087fc:	a201      	add	r2, pc, #4	; (adr r2, 8008804 <prvProcessReceivedCommands+0x7c>)
 80087fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008802:	bf00      	nop
 8008804:	0800882d 	.word	0x0800882d
 8008808:	0800882d 	.word	0x0800882d
 800880c:	0800882d 	.word	0x0800882d
 8008810:	080088a5 	.word	0x080088a5
 8008814:	080088b9 	.word	0x080088b9
 8008818:	08008907 	.word	0x08008907
 800881c:	0800882d 	.word	0x0800882d
 8008820:	0800882d 	.word	0x0800882d
 8008824:	080088a5 	.word	0x080088a5
 8008828:	080088b9 	.word	0x080088b9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800882c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800882e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008832:	f043 0301 	orr.w	r3, r3, #1
 8008836:	b2da      	uxtb	r2, r3
 8008838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800883a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800883e:	68ba      	ldr	r2, [r7, #8]
 8008840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008842:	699b      	ldr	r3, [r3, #24]
 8008844:	18d1      	adds	r1, r2, r3
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800884a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800884c:	f7ff ff5a 	bl	8008704 <prvInsertTimerInActiveList>
 8008850:	4603      	mov	r3, r0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d06d      	beq.n	8008932 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008858:	6a1b      	ldr	r3, [r3, #32]
 800885a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800885c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800885e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008860:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008864:	f003 0304 	and.w	r3, r3, #4
 8008868:	2b00      	cmp	r3, #0
 800886a:	d062      	beq.n	8008932 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800886c:	68ba      	ldr	r2, [r7, #8]
 800886e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008870:	699b      	ldr	r3, [r3, #24]
 8008872:	441a      	add	r2, r3
 8008874:	2300      	movs	r3, #0
 8008876:	9300      	str	r3, [sp, #0]
 8008878:	2300      	movs	r3, #0
 800887a:	2100      	movs	r1, #0
 800887c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800887e:	f7ff fdff 	bl	8008480 <xTimerGenericCommand>
 8008882:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008884:	6a3b      	ldr	r3, [r7, #32]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d153      	bne.n	8008932 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800888a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888e:	b672      	cpsid	i
 8008890:	f383 8811 	msr	BASEPRI, r3
 8008894:	f3bf 8f6f 	isb	sy
 8008898:	f3bf 8f4f 	dsb	sy
 800889c:	b662      	cpsie	i
 800889e:	61bb      	str	r3, [r7, #24]
}
 80088a0:	bf00      	nop
 80088a2:	e7fe      	b.n	80088a2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80088a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088aa:	f023 0301 	bic.w	r3, r3, #1
 80088ae:	b2da      	uxtb	r2, r3
 80088b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80088b6:	e03c      	b.n	8008932 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80088b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088be:	f043 0301 	orr.w	r3, r3, #1
 80088c2:	b2da      	uxtb	r2, r3
 80088c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80088ca:	68ba      	ldr	r2, [r7, #8]
 80088cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80088d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d2:	699b      	ldr	r3, [r3, #24]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d10c      	bne.n	80088f2 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80088d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088dc:	b672      	cpsid	i
 80088de:	f383 8811 	msr	BASEPRI, r3
 80088e2:	f3bf 8f6f 	isb	sy
 80088e6:	f3bf 8f4f 	dsb	sy
 80088ea:	b662      	cpsie	i
 80088ec:	617b      	str	r3, [r7, #20]
}
 80088ee:	bf00      	nop
 80088f0:	e7fe      	b.n	80088f0 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80088f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f4:	699a      	ldr	r2, [r3, #24]
 80088f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f8:	18d1      	adds	r1, r2, r3
 80088fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008900:	f7ff ff00 	bl	8008704 <prvInsertTimerInActiveList>
					break;
 8008904:	e015      	b.n	8008932 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008908:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800890c:	f003 0302 	and.w	r3, r3, #2
 8008910:	2b00      	cmp	r3, #0
 8008912:	d103      	bne.n	800891c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8008914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008916:	f000 fbe7 	bl	80090e8 <vPortFree>
 800891a:	e00a      	b.n	8008932 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800891c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008922:	f023 0301 	bic.w	r3, r3, #1
 8008926:	b2da      	uxtb	r2, r3
 8008928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800892e:	e000      	b.n	8008932 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008930:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008932:	4b08      	ldr	r3, [pc, #32]	; (8008954 <prvProcessReceivedCommands+0x1cc>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	1d39      	adds	r1, r7, #4
 8008938:	2200      	movs	r2, #0
 800893a:	4618      	mov	r0, r3
 800893c:	f7fe facc 	bl	8006ed8 <xQueueReceive>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	f47f af24 	bne.w	8008790 <prvProcessReceivedCommands+0x8>
	}
}
 8008948:	bf00      	nop
 800894a:	bf00      	nop
 800894c:	3730      	adds	r7, #48	; 0x30
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop
 8008954:	200020a4 	.word	0x200020a4

08008958 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b088      	sub	sp, #32
 800895c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800895e:	e04a      	b.n	80089f6 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008960:	4b2e      	ldr	r3, [pc, #184]	; (8008a1c <prvSwitchTimerLists+0xc4>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800896a:	4b2c      	ldr	r3, [pc, #176]	; (8008a1c <prvSwitchTimerLists+0xc4>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	68db      	ldr	r3, [r3, #12]
 8008972:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	3304      	adds	r3, #4
 8008978:	4618      	mov	r0, r3
 800897a:	f7fd ff8b 	bl	8006894 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6a1b      	ldr	r3, [r3, #32]
 8008982:	68f8      	ldr	r0, [r7, #12]
 8008984:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800898c:	f003 0304 	and.w	r3, r3, #4
 8008990:	2b00      	cmp	r3, #0
 8008992:	d030      	beq.n	80089f6 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	699b      	ldr	r3, [r3, #24]
 8008998:	693a      	ldr	r2, [r7, #16]
 800899a:	4413      	add	r3, r2
 800899c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800899e:	68ba      	ldr	r2, [r7, #8]
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d90e      	bls.n	80089c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	68ba      	ldr	r2, [r7, #8]
 80089aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	68fa      	ldr	r2, [r7, #12]
 80089b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80089b2:	4b1a      	ldr	r3, [pc, #104]	; (8008a1c <prvSwitchTimerLists+0xc4>)
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	3304      	adds	r3, #4
 80089ba:	4619      	mov	r1, r3
 80089bc:	4610      	mov	r0, r2
 80089be:	f7fd ff30 	bl	8006822 <vListInsert>
 80089c2:	e018      	b.n	80089f6 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80089c4:	2300      	movs	r3, #0
 80089c6:	9300      	str	r3, [sp, #0]
 80089c8:	2300      	movs	r3, #0
 80089ca:	693a      	ldr	r2, [r7, #16]
 80089cc:	2100      	movs	r1, #0
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	f7ff fd56 	bl	8008480 <xTimerGenericCommand>
 80089d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d10c      	bne.n	80089f6 <prvSwitchTimerLists+0x9e>
	__asm volatile
 80089dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e0:	b672      	cpsid	i
 80089e2:	f383 8811 	msr	BASEPRI, r3
 80089e6:	f3bf 8f6f 	isb	sy
 80089ea:	f3bf 8f4f 	dsb	sy
 80089ee:	b662      	cpsie	i
 80089f0:	603b      	str	r3, [r7, #0]
}
 80089f2:	bf00      	nop
 80089f4:	e7fe      	b.n	80089f4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80089f6:	4b09      	ldr	r3, [pc, #36]	; (8008a1c <prvSwitchTimerLists+0xc4>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d1af      	bne.n	8008960 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008a00:	4b06      	ldr	r3, [pc, #24]	; (8008a1c <prvSwitchTimerLists+0xc4>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008a06:	4b06      	ldr	r3, [pc, #24]	; (8008a20 <prvSwitchTimerLists+0xc8>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a04      	ldr	r2, [pc, #16]	; (8008a1c <prvSwitchTimerLists+0xc4>)
 8008a0c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008a0e:	4a04      	ldr	r2, [pc, #16]	; (8008a20 <prvSwitchTimerLists+0xc8>)
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	6013      	str	r3, [r2, #0]
}
 8008a14:	bf00      	nop
 8008a16:	3718      	adds	r7, #24
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}
 8008a1c:	2000209c 	.word	0x2000209c
 8008a20:	200020a0 	.word	0x200020a0

08008a24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008a2a:	f000 f967 	bl	8008cfc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008a2e:	4b15      	ldr	r3, [pc, #84]	; (8008a84 <prvCheckForValidListAndQueue+0x60>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d120      	bne.n	8008a78 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008a36:	4814      	ldr	r0, [pc, #80]	; (8008a88 <prvCheckForValidListAndQueue+0x64>)
 8008a38:	f7fd fea2 	bl	8006780 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008a3c:	4813      	ldr	r0, [pc, #76]	; (8008a8c <prvCheckForValidListAndQueue+0x68>)
 8008a3e:	f7fd fe9f 	bl	8006780 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008a42:	4b13      	ldr	r3, [pc, #76]	; (8008a90 <prvCheckForValidListAndQueue+0x6c>)
 8008a44:	4a10      	ldr	r2, [pc, #64]	; (8008a88 <prvCheckForValidListAndQueue+0x64>)
 8008a46:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008a48:	4b12      	ldr	r3, [pc, #72]	; (8008a94 <prvCheckForValidListAndQueue+0x70>)
 8008a4a:	4a10      	ldr	r2, [pc, #64]	; (8008a8c <prvCheckForValidListAndQueue+0x68>)
 8008a4c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008a4e:	2300      	movs	r3, #0
 8008a50:	9300      	str	r3, [sp, #0]
 8008a52:	4b11      	ldr	r3, [pc, #68]	; (8008a98 <prvCheckForValidListAndQueue+0x74>)
 8008a54:	4a11      	ldr	r2, [pc, #68]	; (8008a9c <prvCheckForValidListAndQueue+0x78>)
 8008a56:	2110      	movs	r1, #16
 8008a58:	200a      	movs	r0, #10
 8008a5a:	f7fd ffaf 	bl	80069bc <xQueueGenericCreateStatic>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	4a08      	ldr	r2, [pc, #32]	; (8008a84 <prvCheckForValidListAndQueue+0x60>)
 8008a62:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008a64:	4b07      	ldr	r3, [pc, #28]	; (8008a84 <prvCheckForValidListAndQueue+0x60>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d005      	beq.n	8008a78 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008a6c:	4b05      	ldr	r3, [pc, #20]	; (8008a84 <prvCheckForValidListAndQueue+0x60>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	490b      	ldr	r1, [pc, #44]	; (8008aa0 <prvCheckForValidListAndQueue+0x7c>)
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7fe fc26 	bl	80072c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a78:	f000 f974 	bl	8008d64 <vPortExitCritical>
}
 8008a7c:	bf00      	nop
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	200020a4 	.word	0x200020a4
 8008a88:	20002074 	.word	0x20002074
 8008a8c:	20002088 	.word	0x20002088
 8008a90:	2000209c 	.word	0x2000209c
 8008a94:	200020a0 	.word	0x200020a0
 8008a98:	20002150 	.word	0x20002150
 8008a9c:	200020b0 	.word	0x200020b0
 8008aa0:	080095e8 	.word	0x080095e8

08008aa4 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b086      	sub	sp, #24
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d10c      	bne.n	8008ad0 <pvTimerGetTimerID+0x2c>
	__asm volatile
 8008ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aba:	b672      	cpsid	i
 8008abc:	f383 8811 	msr	BASEPRI, r3
 8008ac0:	f3bf 8f6f 	isb	sy
 8008ac4:	f3bf 8f4f 	dsb	sy
 8008ac8:	b662      	cpsie	i
 8008aca:	60fb      	str	r3, [r7, #12]
}
 8008acc:	bf00      	nop
 8008ace:	e7fe      	b.n	8008ace <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 8008ad0:	f000 f914 	bl	8008cfc <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	69db      	ldr	r3, [r3, #28]
 8008ad8:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8008ada:	f000 f943 	bl	8008d64 <vPortExitCritical>

	return pvReturn;
 8008ade:	693b      	ldr	r3, [r7, #16]
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3718      	adds	r7, #24
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b085      	sub	sp, #20
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	60b9      	str	r1, [r7, #8]
 8008af2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	3b04      	subs	r3, #4
 8008af8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008b00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	3b04      	subs	r3, #4
 8008b06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	f023 0201 	bic.w	r2, r3, #1
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	3b04      	subs	r3, #4
 8008b16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008b18:	4a0c      	ldr	r2, [pc, #48]	; (8008b4c <pxPortInitialiseStack+0x64>)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	3b14      	subs	r3, #20
 8008b22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	3b04      	subs	r3, #4
 8008b2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f06f 0202 	mvn.w	r2, #2
 8008b36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	3b20      	subs	r3, #32
 8008b3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3714      	adds	r7, #20
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr
 8008b4c:	08008b51 	.word	0x08008b51

08008b50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008b50:	b480      	push	{r7}
 8008b52:	b085      	sub	sp, #20
 8008b54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008b56:	2300      	movs	r3, #0
 8008b58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008b5a:	4b14      	ldr	r3, [pc, #80]	; (8008bac <prvTaskExitError+0x5c>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b62:	d00c      	beq.n	8008b7e <prvTaskExitError+0x2e>
	__asm volatile
 8008b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b68:	b672      	cpsid	i
 8008b6a:	f383 8811 	msr	BASEPRI, r3
 8008b6e:	f3bf 8f6f 	isb	sy
 8008b72:	f3bf 8f4f 	dsb	sy
 8008b76:	b662      	cpsie	i
 8008b78:	60fb      	str	r3, [r7, #12]
}
 8008b7a:	bf00      	nop
 8008b7c:	e7fe      	b.n	8008b7c <prvTaskExitError+0x2c>
	__asm volatile
 8008b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b82:	b672      	cpsid	i
 8008b84:	f383 8811 	msr	BASEPRI, r3
 8008b88:	f3bf 8f6f 	isb	sy
 8008b8c:	f3bf 8f4f 	dsb	sy
 8008b90:	b662      	cpsie	i
 8008b92:	60bb      	str	r3, [r7, #8]
}
 8008b94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008b96:	bf00      	nop
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d0fc      	beq.n	8008b98 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008b9e:	bf00      	nop
 8008ba0:	bf00      	nop
 8008ba2:	3714      	adds	r7, #20
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr
 8008bac:	2000000c 	.word	0x2000000c

08008bb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008bb0:	4b07      	ldr	r3, [pc, #28]	; (8008bd0 <pxCurrentTCBConst2>)
 8008bb2:	6819      	ldr	r1, [r3, #0]
 8008bb4:	6808      	ldr	r0, [r1, #0]
 8008bb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bba:	f380 8809 	msr	PSP, r0
 8008bbe:	f3bf 8f6f 	isb	sy
 8008bc2:	f04f 0000 	mov.w	r0, #0
 8008bc6:	f380 8811 	msr	BASEPRI, r0
 8008bca:	4770      	bx	lr
 8008bcc:	f3af 8000 	nop.w

08008bd0 <pxCurrentTCBConst2>:
 8008bd0:	20001b74 	.word	0x20001b74
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008bd4:	bf00      	nop
 8008bd6:	bf00      	nop

08008bd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008bd8:	4808      	ldr	r0, [pc, #32]	; (8008bfc <prvPortStartFirstTask+0x24>)
 8008bda:	6800      	ldr	r0, [r0, #0]
 8008bdc:	6800      	ldr	r0, [r0, #0]
 8008bde:	f380 8808 	msr	MSP, r0
 8008be2:	f04f 0000 	mov.w	r0, #0
 8008be6:	f380 8814 	msr	CONTROL, r0
 8008bea:	b662      	cpsie	i
 8008bec:	b661      	cpsie	f
 8008bee:	f3bf 8f4f 	dsb	sy
 8008bf2:	f3bf 8f6f 	isb	sy
 8008bf6:	df00      	svc	0
 8008bf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008bfa:	bf00      	nop
 8008bfc:	e000ed08 	.word	0xe000ed08

08008c00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008c06:	4b37      	ldr	r3, [pc, #220]	; (8008ce4 <xPortStartScheduler+0xe4>)
 8008c08:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	22ff      	movs	r2, #255	; 0xff
 8008c16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008c20:	78fb      	ldrb	r3, [r7, #3]
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008c28:	b2da      	uxtb	r2, r3
 8008c2a:	4b2f      	ldr	r3, [pc, #188]	; (8008ce8 <xPortStartScheduler+0xe8>)
 8008c2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008c2e:	4b2f      	ldr	r3, [pc, #188]	; (8008cec <xPortStartScheduler+0xec>)
 8008c30:	2207      	movs	r2, #7
 8008c32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c34:	e009      	b.n	8008c4a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008c36:	4b2d      	ldr	r3, [pc, #180]	; (8008cec <xPortStartScheduler+0xec>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	3b01      	subs	r3, #1
 8008c3c:	4a2b      	ldr	r2, [pc, #172]	; (8008cec <xPortStartScheduler+0xec>)
 8008c3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008c40:	78fb      	ldrb	r3, [r7, #3]
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	005b      	lsls	r3, r3, #1
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c4a:	78fb      	ldrb	r3, [r7, #3]
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c52:	2b80      	cmp	r3, #128	; 0x80
 8008c54:	d0ef      	beq.n	8008c36 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008c56:	4b25      	ldr	r3, [pc, #148]	; (8008cec <xPortStartScheduler+0xec>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f1c3 0307 	rsb	r3, r3, #7
 8008c5e:	2b04      	cmp	r3, #4
 8008c60:	d00c      	beq.n	8008c7c <xPortStartScheduler+0x7c>
	__asm volatile
 8008c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c66:	b672      	cpsid	i
 8008c68:	f383 8811 	msr	BASEPRI, r3
 8008c6c:	f3bf 8f6f 	isb	sy
 8008c70:	f3bf 8f4f 	dsb	sy
 8008c74:	b662      	cpsie	i
 8008c76:	60bb      	str	r3, [r7, #8]
}
 8008c78:	bf00      	nop
 8008c7a:	e7fe      	b.n	8008c7a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008c7c:	4b1b      	ldr	r3, [pc, #108]	; (8008cec <xPortStartScheduler+0xec>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	021b      	lsls	r3, r3, #8
 8008c82:	4a1a      	ldr	r2, [pc, #104]	; (8008cec <xPortStartScheduler+0xec>)
 8008c84:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008c86:	4b19      	ldr	r3, [pc, #100]	; (8008cec <xPortStartScheduler+0xec>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008c8e:	4a17      	ldr	r2, [pc, #92]	; (8008cec <xPortStartScheduler+0xec>)
 8008c90:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	b2da      	uxtb	r2, r3
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008c9a:	4b15      	ldr	r3, [pc, #84]	; (8008cf0 <xPortStartScheduler+0xf0>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a14      	ldr	r2, [pc, #80]	; (8008cf0 <xPortStartScheduler+0xf0>)
 8008ca0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008ca4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008ca6:	4b12      	ldr	r3, [pc, #72]	; (8008cf0 <xPortStartScheduler+0xf0>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a11      	ldr	r2, [pc, #68]	; (8008cf0 <xPortStartScheduler+0xf0>)
 8008cac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008cb0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008cb2:	f000 f8dd 	bl	8008e70 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008cb6:	4b0f      	ldr	r3, [pc, #60]	; (8008cf4 <xPortStartScheduler+0xf4>)
 8008cb8:	2200      	movs	r2, #0
 8008cba:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008cbc:	f000 f8fc 	bl	8008eb8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008cc0:	4b0d      	ldr	r3, [pc, #52]	; (8008cf8 <xPortStartScheduler+0xf8>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a0c      	ldr	r2, [pc, #48]	; (8008cf8 <xPortStartScheduler+0xf8>)
 8008cc6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008cca:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008ccc:	f7ff ff84 	bl	8008bd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008cd0:	f7fe ff4c 	bl	8007b6c <vTaskSwitchContext>
	prvTaskExitError();
 8008cd4:	f7ff ff3c 	bl	8008b50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008cd8:	2300      	movs	r3, #0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3710      	adds	r7, #16
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	e000e400 	.word	0xe000e400
 8008ce8:	200021a0 	.word	0x200021a0
 8008cec:	200021a4 	.word	0x200021a4
 8008cf0:	e000ed20 	.word	0xe000ed20
 8008cf4:	2000000c 	.word	0x2000000c
 8008cf8:	e000ef34 	.word	0xe000ef34

08008cfc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
	__asm volatile
 8008d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d06:	b672      	cpsid	i
 8008d08:	f383 8811 	msr	BASEPRI, r3
 8008d0c:	f3bf 8f6f 	isb	sy
 8008d10:	f3bf 8f4f 	dsb	sy
 8008d14:	b662      	cpsie	i
 8008d16:	607b      	str	r3, [r7, #4]
}
 8008d18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008d1a:	4b10      	ldr	r3, [pc, #64]	; (8008d5c <vPortEnterCritical+0x60>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	3301      	adds	r3, #1
 8008d20:	4a0e      	ldr	r2, [pc, #56]	; (8008d5c <vPortEnterCritical+0x60>)
 8008d22:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008d24:	4b0d      	ldr	r3, [pc, #52]	; (8008d5c <vPortEnterCritical+0x60>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d111      	bne.n	8008d50 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008d2c:	4b0c      	ldr	r3, [pc, #48]	; (8008d60 <vPortEnterCritical+0x64>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d00c      	beq.n	8008d50 <vPortEnterCritical+0x54>
	__asm volatile
 8008d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d3a:	b672      	cpsid	i
 8008d3c:	f383 8811 	msr	BASEPRI, r3
 8008d40:	f3bf 8f6f 	isb	sy
 8008d44:	f3bf 8f4f 	dsb	sy
 8008d48:	b662      	cpsie	i
 8008d4a:	603b      	str	r3, [r7, #0]
}
 8008d4c:	bf00      	nop
 8008d4e:	e7fe      	b.n	8008d4e <vPortEnterCritical+0x52>
	}
}
 8008d50:	bf00      	nop
 8008d52:	370c      	adds	r7, #12
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr
 8008d5c:	2000000c 	.word	0x2000000c
 8008d60:	e000ed04 	.word	0xe000ed04

08008d64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008d6a:	4b13      	ldr	r3, [pc, #76]	; (8008db8 <vPortExitCritical+0x54>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d10c      	bne.n	8008d8c <vPortExitCritical+0x28>
	__asm volatile
 8008d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d76:	b672      	cpsid	i
 8008d78:	f383 8811 	msr	BASEPRI, r3
 8008d7c:	f3bf 8f6f 	isb	sy
 8008d80:	f3bf 8f4f 	dsb	sy
 8008d84:	b662      	cpsie	i
 8008d86:	607b      	str	r3, [r7, #4]
}
 8008d88:	bf00      	nop
 8008d8a:	e7fe      	b.n	8008d8a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8008d8c:	4b0a      	ldr	r3, [pc, #40]	; (8008db8 <vPortExitCritical+0x54>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	3b01      	subs	r3, #1
 8008d92:	4a09      	ldr	r2, [pc, #36]	; (8008db8 <vPortExitCritical+0x54>)
 8008d94:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008d96:	4b08      	ldr	r3, [pc, #32]	; (8008db8 <vPortExitCritical+0x54>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d105      	bne.n	8008daa <vPortExitCritical+0x46>
 8008d9e:	2300      	movs	r3, #0
 8008da0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	f383 8811 	msr	BASEPRI, r3
}
 8008da8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008daa:	bf00      	nop
 8008dac:	370c      	adds	r7, #12
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop
 8008db8:	2000000c 	.word	0x2000000c
 8008dbc:	00000000 	.word	0x00000000

08008dc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008dc0:	f3ef 8009 	mrs	r0, PSP
 8008dc4:	f3bf 8f6f 	isb	sy
 8008dc8:	4b15      	ldr	r3, [pc, #84]	; (8008e20 <pxCurrentTCBConst>)
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	f01e 0f10 	tst.w	lr, #16
 8008dd0:	bf08      	it	eq
 8008dd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008dd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dda:	6010      	str	r0, [r2, #0]
 8008ddc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008de0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008de4:	b672      	cpsid	i
 8008de6:	f380 8811 	msr	BASEPRI, r0
 8008dea:	f3bf 8f4f 	dsb	sy
 8008dee:	f3bf 8f6f 	isb	sy
 8008df2:	b662      	cpsie	i
 8008df4:	f7fe feba 	bl	8007b6c <vTaskSwitchContext>
 8008df8:	f04f 0000 	mov.w	r0, #0
 8008dfc:	f380 8811 	msr	BASEPRI, r0
 8008e00:	bc09      	pop	{r0, r3}
 8008e02:	6819      	ldr	r1, [r3, #0]
 8008e04:	6808      	ldr	r0, [r1, #0]
 8008e06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e0a:	f01e 0f10 	tst.w	lr, #16
 8008e0e:	bf08      	it	eq
 8008e10:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008e14:	f380 8809 	msr	PSP, r0
 8008e18:	f3bf 8f6f 	isb	sy
 8008e1c:	4770      	bx	lr
 8008e1e:	bf00      	nop

08008e20 <pxCurrentTCBConst>:
 8008e20:	20001b74 	.word	0x20001b74
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008e24:	bf00      	nop
 8008e26:	bf00      	nop

08008e28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b082      	sub	sp, #8
 8008e2c:	af00      	add	r7, sp, #0
	__asm volatile
 8008e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e32:	b672      	cpsid	i
 8008e34:	f383 8811 	msr	BASEPRI, r3
 8008e38:	f3bf 8f6f 	isb	sy
 8008e3c:	f3bf 8f4f 	dsb	sy
 8008e40:	b662      	cpsie	i
 8008e42:	607b      	str	r3, [r7, #4]
}
 8008e44:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008e46:	f7fe fdd5 	bl	80079f4 <xTaskIncrementTick>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d003      	beq.n	8008e58 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008e50:	4b06      	ldr	r3, [pc, #24]	; (8008e6c <xPortSysTickHandler+0x44>)
 8008e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e56:	601a      	str	r2, [r3, #0]
 8008e58:	2300      	movs	r3, #0
 8008e5a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	f383 8811 	msr	BASEPRI, r3
}
 8008e62:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008e64:	bf00      	nop
 8008e66:	3708      	adds	r7, #8
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	e000ed04 	.word	0xe000ed04

08008e70 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008e70:	b480      	push	{r7}
 8008e72:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008e74:	4b0b      	ldr	r3, [pc, #44]	; (8008ea4 <vPortSetupTimerInterrupt+0x34>)
 8008e76:	2200      	movs	r2, #0
 8008e78:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008e7a:	4b0b      	ldr	r3, [pc, #44]	; (8008ea8 <vPortSetupTimerInterrupt+0x38>)
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008e80:	4b0a      	ldr	r3, [pc, #40]	; (8008eac <vPortSetupTimerInterrupt+0x3c>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a0a      	ldr	r2, [pc, #40]	; (8008eb0 <vPortSetupTimerInterrupt+0x40>)
 8008e86:	fba2 2303 	umull	r2, r3, r2, r3
 8008e8a:	099b      	lsrs	r3, r3, #6
 8008e8c:	4a09      	ldr	r2, [pc, #36]	; (8008eb4 <vPortSetupTimerInterrupt+0x44>)
 8008e8e:	3b01      	subs	r3, #1
 8008e90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008e92:	4b04      	ldr	r3, [pc, #16]	; (8008ea4 <vPortSetupTimerInterrupt+0x34>)
 8008e94:	2207      	movs	r2, #7
 8008e96:	601a      	str	r2, [r3, #0]
}
 8008e98:	bf00      	nop
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop
 8008ea4:	e000e010 	.word	0xe000e010
 8008ea8:	e000e018 	.word	0xe000e018
 8008eac:	20000000 	.word	0x20000000
 8008eb0:	10624dd3 	.word	0x10624dd3
 8008eb4:	e000e014 	.word	0xe000e014

08008eb8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008eb8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008ec8 <vPortEnableVFP+0x10>
 8008ebc:	6801      	ldr	r1, [r0, #0]
 8008ebe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008ec2:	6001      	str	r1, [r0, #0]
 8008ec4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008ec6:	bf00      	nop
 8008ec8:	e000ed88 	.word	0xe000ed88

08008ecc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008ecc:	b480      	push	{r7}
 8008ece:	b085      	sub	sp, #20
 8008ed0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008ed2:	f3ef 8305 	mrs	r3, IPSR
 8008ed6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2b0f      	cmp	r3, #15
 8008edc:	d916      	bls.n	8008f0c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008ede:	4a19      	ldr	r2, [pc, #100]	; (8008f44 <vPortValidateInterruptPriority+0x78>)
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008ee8:	4b17      	ldr	r3, [pc, #92]	; (8008f48 <vPortValidateInterruptPriority+0x7c>)
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	7afa      	ldrb	r2, [r7, #11]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d20c      	bcs.n	8008f0c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8008ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef6:	b672      	cpsid	i
 8008ef8:	f383 8811 	msr	BASEPRI, r3
 8008efc:	f3bf 8f6f 	isb	sy
 8008f00:	f3bf 8f4f 	dsb	sy
 8008f04:	b662      	cpsie	i
 8008f06:	607b      	str	r3, [r7, #4]
}
 8008f08:	bf00      	nop
 8008f0a:	e7fe      	b.n	8008f0a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008f0c:	4b0f      	ldr	r3, [pc, #60]	; (8008f4c <vPortValidateInterruptPriority+0x80>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008f14:	4b0e      	ldr	r3, [pc, #56]	; (8008f50 <vPortValidateInterruptPriority+0x84>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d90c      	bls.n	8008f36 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8008f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f20:	b672      	cpsid	i
 8008f22:	f383 8811 	msr	BASEPRI, r3
 8008f26:	f3bf 8f6f 	isb	sy
 8008f2a:	f3bf 8f4f 	dsb	sy
 8008f2e:	b662      	cpsie	i
 8008f30:	603b      	str	r3, [r7, #0]
}
 8008f32:	bf00      	nop
 8008f34:	e7fe      	b.n	8008f34 <vPortValidateInterruptPriority+0x68>
	}
 8008f36:	bf00      	nop
 8008f38:	3714      	adds	r7, #20
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop
 8008f44:	e000e3f0 	.word	0xe000e3f0
 8008f48:	200021a0 	.word	0x200021a0
 8008f4c:	e000ed0c 	.word	0xe000ed0c
 8008f50:	200021a4 	.word	0x200021a4

08008f54 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b08a      	sub	sp, #40	; 0x28
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008f60:	f7fe fc78 	bl	8007854 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008f64:	4b5b      	ldr	r3, [pc, #364]	; (80090d4 <pvPortMalloc+0x180>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d101      	bne.n	8008f70 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008f6c:	f000 f91a 	bl	80091a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008f70:	4b59      	ldr	r3, [pc, #356]	; (80090d8 <pvPortMalloc+0x184>)
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	4013      	ands	r3, r2
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	f040 8092 	bne.w	80090a2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d01f      	beq.n	8008fc4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8008f84:	2208      	movs	r2, #8
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	4413      	add	r3, r2
 8008f8a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f003 0307 	and.w	r3, r3, #7
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d016      	beq.n	8008fc4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f023 0307 	bic.w	r3, r3, #7
 8008f9c:	3308      	adds	r3, #8
 8008f9e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f003 0307 	and.w	r3, r3, #7
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d00c      	beq.n	8008fc4 <pvPortMalloc+0x70>
	__asm volatile
 8008faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fae:	b672      	cpsid	i
 8008fb0:	f383 8811 	msr	BASEPRI, r3
 8008fb4:	f3bf 8f6f 	isb	sy
 8008fb8:	f3bf 8f4f 	dsb	sy
 8008fbc:	b662      	cpsie	i
 8008fbe:	617b      	str	r3, [r7, #20]
}
 8008fc0:	bf00      	nop
 8008fc2:	e7fe      	b.n	8008fc2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d06b      	beq.n	80090a2 <pvPortMalloc+0x14e>
 8008fca:	4b44      	ldr	r3, [pc, #272]	; (80090dc <pvPortMalloc+0x188>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d866      	bhi.n	80090a2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008fd4:	4b42      	ldr	r3, [pc, #264]	; (80090e0 <pvPortMalloc+0x18c>)
 8008fd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008fd8:	4b41      	ldr	r3, [pc, #260]	; (80090e0 <pvPortMalloc+0x18c>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008fde:	e004      	b.n	8008fea <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8008fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d903      	bls.n	8008ffc <pvPortMalloc+0xa8>
 8008ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d1f1      	bne.n	8008fe0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008ffc:	4b35      	ldr	r3, [pc, #212]	; (80090d4 <pvPortMalloc+0x180>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009002:	429a      	cmp	r2, r3
 8009004:	d04d      	beq.n	80090a2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009006:	6a3b      	ldr	r3, [r7, #32]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	2208      	movs	r2, #8
 800900c:	4413      	add	r3, r2
 800900e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	6a3b      	ldr	r3, [r7, #32]
 8009016:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901a:	685a      	ldr	r2, [r3, #4]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	1ad2      	subs	r2, r2, r3
 8009020:	2308      	movs	r3, #8
 8009022:	005b      	lsls	r3, r3, #1
 8009024:	429a      	cmp	r2, r3
 8009026:	d921      	bls.n	800906c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	4413      	add	r3, r2
 800902e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	f003 0307 	and.w	r3, r3, #7
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00c      	beq.n	8009054 <pvPortMalloc+0x100>
	__asm volatile
 800903a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800903e:	b672      	cpsid	i
 8009040:	f383 8811 	msr	BASEPRI, r3
 8009044:	f3bf 8f6f 	isb	sy
 8009048:	f3bf 8f4f 	dsb	sy
 800904c:	b662      	cpsie	i
 800904e:	613b      	str	r3, [r7, #16]
}
 8009050:	bf00      	nop
 8009052:	e7fe      	b.n	8009052 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009056:	685a      	ldr	r2, [r3, #4]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	1ad2      	subs	r2, r2, r3
 800905c:	69bb      	ldr	r3, [r7, #24]
 800905e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009066:	69b8      	ldr	r0, [r7, #24]
 8009068:	f000 f8fe 	bl	8009268 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800906c:	4b1b      	ldr	r3, [pc, #108]	; (80090dc <pvPortMalloc+0x188>)
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	1ad3      	subs	r3, r2, r3
 8009076:	4a19      	ldr	r2, [pc, #100]	; (80090dc <pvPortMalloc+0x188>)
 8009078:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800907a:	4b18      	ldr	r3, [pc, #96]	; (80090dc <pvPortMalloc+0x188>)
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	4b19      	ldr	r3, [pc, #100]	; (80090e4 <pvPortMalloc+0x190>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	429a      	cmp	r2, r3
 8009084:	d203      	bcs.n	800908e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009086:	4b15      	ldr	r3, [pc, #84]	; (80090dc <pvPortMalloc+0x188>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a16      	ldr	r2, [pc, #88]	; (80090e4 <pvPortMalloc+0x190>)
 800908c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800908e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009090:	685a      	ldr	r2, [r3, #4]
 8009092:	4b11      	ldr	r3, [pc, #68]	; (80090d8 <pvPortMalloc+0x184>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	431a      	orrs	r2, r3
 8009098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800909c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909e:	2200      	movs	r2, #0
 80090a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80090a2:	f7fe fbe5 	bl	8007870 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	f003 0307 	and.w	r3, r3, #7
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d00c      	beq.n	80090ca <pvPortMalloc+0x176>
	__asm volatile
 80090b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b4:	b672      	cpsid	i
 80090b6:	f383 8811 	msr	BASEPRI, r3
 80090ba:	f3bf 8f6f 	isb	sy
 80090be:	f3bf 8f4f 	dsb	sy
 80090c2:	b662      	cpsie	i
 80090c4:	60fb      	str	r3, [r7, #12]
}
 80090c6:	bf00      	nop
 80090c8:	e7fe      	b.n	80090c8 <pvPortMalloc+0x174>
	return pvReturn;
 80090ca:	69fb      	ldr	r3, [r7, #28]
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3728      	adds	r7, #40	; 0x28
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}
 80090d4:	20005db0 	.word	0x20005db0
 80090d8:	20005dbc 	.word	0x20005dbc
 80090dc:	20005db4 	.word	0x20005db4
 80090e0:	20005da8 	.word	0x20005da8
 80090e4:	20005db8 	.word	0x20005db8

080090e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b086      	sub	sp, #24
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d04c      	beq.n	8009194 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80090fa:	2308      	movs	r3, #8
 80090fc:	425b      	negs	r3, r3
 80090fe:	697a      	ldr	r2, [r7, #20]
 8009100:	4413      	add	r3, r2
 8009102:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	685a      	ldr	r2, [r3, #4]
 800910c:	4b23      	ldr	r3, [pc, #140]	; (800919c <vPortFree+0xb4>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4013      	ands	r3, r2
 8009112:	2b00      	cmp	r3, #0
 8009114:	d10c      	bne.n	8009130 <vPortFree+0x48>
	__asm volatile
 8009116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800911a:	b672      	cpsid	i
 800911c:	f383 8811 	msr	BASEPRI, r3
 8009120:	f3bf 8f6f 	isb	sy
 8009124:	f3bf 8f4f 	dsb	sy
 8009128:	b662      	cpsie	i
 800912a:	60fb      	str	r3, [r7, #12]
}
 800912c:	bf00      	nop
 800912e:	e7fe      	b.n	800912e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d00c      	beq.n	8009152 <vPortFree+0x6a>
	__asm volatile
 8009138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800913c:	b672      	cpsid	i
 800913e:	f383 8811 	msr	BASEPRI, r3
 8009142:	f3bf 8f6f 	isb	sy
 8009146:	f3bf 8f4f 	dsb	sy
 800914a:	b662      	cpsie	i
 800914c:	60bb      	str	r3, [r7, #8]
}
 800914e:	bf00      	nop
 8009150:	e7fe      	b.n	8009150 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	685a      	ldr	r2, [r3, #4]
 8009156:	4b11      	ldr	r3, [pc, #68]	; (800919c <vPortFree+0xb4>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4013      	ands	r3, r2
 800915c:	2b00      	cmp	r3, #0
 800915e:	d019      	beq.n	8009194 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d115      	bne.n	8009194 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	685a      	ldr	r2, [r3, #4]
 800916c:	4b0b      	ldr	r3, [pc, #44]	; (800919c <vPortFree+0xb4>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	43db      	mvns	r3, r3
 8009172:	401a      	ands	r2, r3
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009178:	f7fe fb6c 	bl	8007854 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	685a      	ldr	r2, [r3, #4]
 8009180:	4b07      	ldr	r3, [pc, #28]	; (80091a0 <vPortFree+0xb8>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4413      	add	r3, r2
 8009186:	4a06      	ldr	r2, [pc, #24]	; (80091a0 <vPortFree+0xb8>)
 8009188:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800918a:	6938      	ldr	r0, [r7, #16]
 800918c:	f000 f86c 	bl	8009268 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009190:	f7fe fb6e 	bl	8007870 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009194:	bf00      	nop
 8009196:	3718      	adds	r7, #24
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}
 800919c:	20005dbc 	.word	0x20005dbc
 80091a0:	20005db4 	.word	0x20005db4

080091a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80091a4:	b480      	push	{r7}
 80091a6:	b085      	sub	sp, #20
 80091a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80091aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80091ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80091b0:	4b27      	ldr	r3, [pc, #156]	; (8009250 <prvHeapInit+0xac>)
 80091b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f003 0307 	and.w	r3, r3, #7
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d00c      	beq.n	80091d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	3307      	adds	r3, #7
 80091c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f023 0307 	bic.w	r3, r3, #7
 80091ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80091cc:	68ba      	ldr	r2, [r7, #8]
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	1ad3      	subs	r3, r2, r3
 80091d2:	4a1f      	ldr	r2, [pc, #124]	; (8009250 <prvHeapInit+0xac>)
 80091d4:	4413      	add	r3, r2
 80091d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80091dc:	4a1d      	ldr	r2, [pc, #116]	; (8009254 <prvHeapInit+0xb0>)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80091e2:	4b1c      	ldr	r3, [pc, #112]	; (8009254 <prvHeapInit+0xb0>)
 80091e4:	2200      	movs	r2, #0
 80091e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	68ba      	ldr	r2, [r7, #8]
 80091ec:	4413      	add	r3, r2
 80091ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80091f0:	2208      	movs	r2, #8
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	1a9b      	subs	r3, r3, r2
 80091f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f023 0307 	bic.w	r3, r3, #7
 80091fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	4a15      	ldr	r2, [pc, #84]	; (8009258 <prvHeapInit+0xb4>)
 8009204:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009206:	4b14      	ldr	r3, [pc, #80]	; (8009258 <prvHeapInit+0xb4>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	2200      	movs	r2, #0
 800920c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800920e:	4b12      	ldr	r3, [pc, #72]	; (8009258 <prvHeapInit+0xb4>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2200      	movs	r2, #0
 8009214:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	68fa      	ldr	r2, [r7, #12]
 800921e:	1ad2      	subs	r2, r2, r3
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009224:	4b0c      	ldr	r3, [pc, #48]	; (8009258 <prvHeapInit+0xb4>)
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	4a0a      	ldr	r2, [pc, #40]	; (800925c <prvHeapInit+0xb8>)
 8009232:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	4a09      	ldr	r2, [pc, #36]	; (8009260 <prvHeapInit+0xbc>)
 800923a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800923c:	4b09      	ldr	r3, [pc, #36]	; (8009264 <prvHeapInit+0xc0>)
 800923e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009242:	601a      	str	r2, [r3, #0]
}
 8009244:	bf00      	nop
 8009246:	3714      	adds	r7, #20
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr
 8009250:	200021a8 	.word	0x200021a8
 8009254:	20005da8 	.word	0x20005da8
 8009258:	20005db0 	.word	0x20005db0
 800925c:	20005db8 	.word	0x20005db8
 8009260:	20005db4 	.word	0x20005db4
 8009264:	20005dbc 	.word	0x20005dbc

08009268 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009268:	b480      	push	{r7}
 800926a:	b085      	sub	sp, #20
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009270:	4b28      	ldr	r3, [pc, #160]	; (8009314 <prvInsertBlockIntoFreeList+0xac>)
 8009272:	60fb      	str	r3, [r7, #12]
 8009274:	e002      	b.n	800927c <prvInsertBlockIntoFreeList+0x14>
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	60fb      	str	r3, [r7, #12]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	429a      	cmp	r2, r3
 8009284:	d8f7      	bhi.n	8009276 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	68ba      	ldr	r2, [r7, #8]
 8009290:	4413      	add	r3, r2
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	429a      	cmp	r2, r3
 8009296:	d108      	bne.n	80092aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	685a      	ldr	r2, [r3, #4]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	441a      	add	r2, r3
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	68ba      	ldr	r2, [r7, #8]
 80092b4:	441a      	add	r2, r3
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d118      	bne.n	80092f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	4b15      	ldr	r3, [pc, #84]	; (8009318 <prvInsertBlockIntoFreeList+0xb0>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d00d      	beq.n	80092e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	685a      	ldr	r2, [r3, #4]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	441a      	add	r2, r3
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	601a      	str	r2, [r3, #0]
 80092e4:	e008      	b.n	80092f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80092e6:	4b0c      	ldr	r3, [pc, #48]	; (8009318 <prvInsertBlockIntoFreeList+0xb0>)
 80092e8:	681a      	ldr	r2, [r3, #0]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	601a      	str	r2, [r3, #0]
 80092ee:	e003      	b.n	80092f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80092f8:	68fa      	ldr	r2, [r7, #12]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d002      	beq.n	8009306 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009306:	bf00      	nop
 8009308:	3714      	adds	r7, #20
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr
 8009312:	bf00      	nop
 8009314:	20005da8 	.word	0x20005da8
 8009318:	20005db0 	.word	0x20005db0

0800931c <__libc_init_array>:
 800931c:	b570      	push	{r4, r5, r6, lr}
 800931e:	4d0d      	ldr	r5, [pc, #52]	; (8009354 <__libc_init_array+0x38>)
 8009320:	4c0d      	ldr	r4, [pc, #52]	; (8009358 <__libc_init_array+0x3c>)
 8009322:	1b64      	subs	r4, r4, r5
 8009324:	10a4      	asrs	r4, r4, #2
 8009326:	2600      	movs	r6, #0
 8009328:	42a6      	cmp	r6, r4
 800932a:	d109      	bne.n	8009340 <__libc_init_array+0x24>
 800932c:	4d0b      	ldr	r5, [pc, #44]	; (800935c <__libc_init_array+0x40>)
 800932e:	4c0c      	ldr	r4, [pc, #48]	; (8009360 <__libc_init_array+0x44>)
 8009330:	f000 f8f2 	bl	8009518 <_init>
 8009334:	1b64      	subs	r4, r4, r5
 8009336:	10a4      	asrs	r4, r4, #2
 8009338:	2600      	movs	r6, #0
 800933a:	42a6      	cmp	r6, r4
 800933c:	d105      	bne.n	800934a <__libc_init_array+0x2e>
 800933e:	bd70      	pop	{r4, r5, r6, pc}
 8009340:	f855 3b04 	ldr.w	r3, [r5], #4
 8009344:	4798      	blx	r3
 8009346:	3601      	adds	r6, #1
 8009348:	e7ee      	b.n	8009328 <__libc_init_array+0xc>
 800934a:	f855 3b04 	ldr.w	r3, [r5], #4
 800934e:	4798      	blx	r3
 8009350:	3601      	adds	r6, #1
 8009352:	e7f2      	b.n	800933a <__libc_init_array+0x1e>
 8009354:	08009708 	.word	0x08009708
 8009358:	08009708 	.word	0x08009708
 800935c:	08009708 	.word	0x08009708
 8009360:	0800970c 	.word	0x0800970c

08009364 <__retarget_lock_acquire_recursive>:
 8009364:	4770      	bx	lr

08009366 <__retarget_lock_release_recursive>:
 8009366:	4770      	bx	lr

08009368 <memcpy>:
 8009368:	440a      	add	r2, r1
 800936a:	4291      	cmp	r1, r2
 800936c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009370:	d100      	bne.n	8009374 <memcpy+0xc>
 8009372:	4770      	bx	lr
 8009374:	b510      	push	{r4, lr}
 8009376:	f811 4b01 	ldrb.w	r4, [r1], #1
 800937a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800937e:	4291      	cmp	r1, r2
 8009380:	d1f9      	bne.n	8009376 <memcpy+0xe>
 8009382:	bd10      	pop	{r4, pc}

08009384 <memset>:
 8009384:	4402      	add	r2, r0
 8009386:	4603      	mov	r3, r0
 8009388:	4293      	cmp	r3, r2
 800938a:	d100      	bne.n	800938e <memset+0xa>
 800938c:	4770      	bx	lr
 800938e:	f803 1b01 	strb.w	r1, [r3], #1
 8009392:	e7f9      	b.n	8009388 <memset+0x4>

08009394 <cleanup_glue>:
 8009394:	b538      	push	{r3, r4, r5, lr}
 8009396:	460c      	mov	r4, r1
 8009398:	6809      	ldr	r1, [r1, #0]
 800939a:	4605      	mov	r5, r0
 800939c:	b109      	cbz	r1, 80093a2 <cleanup_glue+0xe>
 800939e:	f7ff fff9 	bl	8009394 <cleanup_glue>
 80093a2:	4621      	mov	r1, r4
 80093a4:	4628      	mov	r0, r5
 80093a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093aa:	f000 b869 	b.w	8009480 <_free_r>
	...

080093b0 <_reclaim_reent>:
 80093b0:	4b2c      	ldr	r3, [pc, #176]	; (8009464 <_reclaim_reent+0xb4>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4283      	cmp	r3, r0
 80093b6:	b570      	push	{r4, r5, r6, lr}
 80093b8:	4604      	mov	r4, r0
 80093ba:	d051      	beq.n	8009460 <_reclaim_reent+0xb0>
 80093bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80093be:	b143      	cbz	r3, 80093d2 <_reclaim_reent+0x22>
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d14a      	bne.n	800945c <_reclaim_reent+0xac>
 80093c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093c8:	6819      	ldr	r1, [r3, #0]
 80093ca:	b111      	cbz	r1, 80093d2 <_reclaim_reent+0x22>
 80093cc:	4620      	mov	r0, r4
 80093ce:	f000 f857 	bl	8009480 <_free_r>
 80093d2:	6961      	ldr	r1, [r4, #20]
 80093d4:	b111      	cbz	r1, 80093dc <_reclaim_reent+0x2c>
 80093d6:	4620      	mov	r0, r4
 80093d8:	f000 f852 	bl	8009480 <_free_r>
 80093dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80093de:	b111      	cbz	r1, 80093e6 <_reclaim_reent+0x36>
 80093e0:	4620      	mov	r0, r4
 80093e2:	f000 f84d 	bl	8009480 <_free_r>
 80093e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80093e8:	b111      	cbz	r1, 80093f0 <_reclaim_reent+0x40>
 80093ea:	4620      	mov	r0, r4
 80093ec:	f000 f848 	bl	8009480 <_free_r>
 80093f0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80093f2:	b111      	cbz	r1, 80093fa <_reclaim_reent+0x4a>
 80093f4:	4620      	mov	r0, r4
 80093f6:	f000 f843 	bl	8009480 <_free_r>
 80093fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80093fc:	b111      	cbz	r1, 8009404 <_reclaim_reent+0x54>
 80093fe:	4620      	mov	r0, r4
 8009400:	f000 f83e 	bl	8009480 <_free_r>
 8009404:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009406:	b111      	cbz	r1, 800940e <_reclaim_reent+0x5e>
 8009408:	4620      	mov	r0, r4
 800940a:	f000 f839 	bl	8009480 <_free_r>
 800940e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009410:	b111      	cbz	r1, 8009418 <_reclaim_reent+0x68>
 8009412:	4620      	mov	r0, r4
 8009414:	f000 f834 	bl	8009480 <_free_r>
 8009418:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800941a:	b111      	cbz	r1, 8009422 <_reclaim_reent+0x72>
 800941c:	4620      	mov	r0, r4
 800941e:	f000 f82f 	bl	8009480 <_free_r>
 8009422:	69a3      	ldr	r3, [r4, #24]
 8009424:	b1e3      	cbz	r3, 8009460 <_reclaim_reent+0xb0>
 8009426:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009428:	4620      	mov	r0, r4
 800942a:	4798      	blx	r3
 800942c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800942e:	b1b9      	cbz	r1, 8009460 <_reclaim_reent+0xb0>
 8009430:	4620      	mov	r0, r4
 8009432:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009436:	f7ff bfad 	b.w	8009394 <cleanup_glue>
 800943a:	5949      	ldr	r1, [r1, r5]
 800943c:	b941      	cbnz	r1, 8009450 <_reclaim_reent+0xa0>
 800943e:	3504      	adds	r5, #4
 8009440:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009442:	2d80      	cmp	r5, #128	; 0x80
 8009444:	68d9      	ldr	r1, [r3, #12]
 8009446:	d1f8      	bne.n	800943a <_reclaim_reent+0x8a>
 8009448:	4620      	mov	r0, r4
 800944a:	f000 f819 	bl	8009480 <_free_r>
 800944e:	e7ba      	b.n	80093c6 <_reclaim_reent+0x16>
 8009450:	680e      	ldr	r6, [r1, #0]
 8009452:	4620      	mov	r0, r4
 8009454:	f000 f814 	bl	8009480 <_free_r>
 8009458:	4631      	mov	r1, r6
 800945a:	e7ef      	b.n	800943c <_reclaim_reent+0x8c>
 800945c:	2500      	movs	r5, #0
 800945e:	e7ef      	b.n	8009440 <_reclaim_reent+0x90>
 8009460:	bd70      	pop	{r4, r5, r6, pc}
 8009462:	bf00      	nop
 8009464:	20000010 	.word	0x20000010

08009468 <__malloc_lock>:
 8009468:	4801      	ldr	r0, [pc, #4]	; (8009470 <__malloc_lock+0x8>)
 800946a:	f7ff bf7b 	b.w	8009364 <__retarget_lock_acquire_recursive>
 800946e:	bf00      	nop
 8009470:	20005dc0 	.word	0x20005dc0

08009474 <__malloc_unlock>:
 8009474:	4801      	ldr	r0, [pc, #4]	; (800947c <__malloc_unlock+0x8>)
 8009476:	f7ff bf76 	b.w	8009366 <__retarget_lock_release_recursive>
 800947a:	bf00      	nop
 800947c:	20005dc0 	.word	0x20005dc0

08009480 <_free_r>:
 8009480:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009482:	2900      	cmp	r1, #0
 8009484:	d044      	beq.n	8009510 <_free_r+0x90>
 8009486:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800948a:	9001      	str	r0, [sp, #4]
 800948c:	2b00      	cmp	r3, #0
 800948e:	f1a1 0404 	sub.w	r4, r1, #4
 8009492:	bfb8      	it	lt
 8009494:	18e4      	addlt	r4, r4, r3
 8009496:	f7ff ffe7 	bl	8009468 <__malloc_lock>
 800949a:	4a1e      	ldr	r2, [pc, #120]	; (8009514 <_free_r+0x94>)
 800949c:	9801      	ldr	r0, [sp, #4]
 800949e:	6813      	ldr	r3, [r2, #0]
 80094a0:	b933      	cbnz	r3, 80094b0 <_free_r+0x30>
 80094a2:	6063      	str	r3, [r4, #4]
 80094a4:	6014      	str	r4, [r2, #0]
 80094a6:	b003      	add	sp, #12
 80094a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094ac:	f7ff bfe2 	b.w	8009474 <__malloc_unlock>
 80094b0:	42a3      	cmp	r3, r4
 80094b2:	d908      	bls.n	80094c6 <_free_r+0x46>
 80094b4:	6825      	ldr	r5, [r4, #0]
 80094b6:	1961      	adds	r1, r4, r5
 80094b8:	428b      	cmp	r3, r1
 80094ba:	bf01      	itttt	eq
 80094bc:	6819      	ldreq	r1, [r3, #0]
 80094be:	685b      	ldreq	r3, [r3, #4]
 80094c0:	1949      	addeq	r1, r1, r5
 80094c2:	6021      	streq	r1, [r4, #0]
 80094c4:	e7ed      	b.n	80094a2 <_free_r+0x22>
 80094c6:	461a      	mov	r2, r3
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	b10b      	cbz	r3, 80094d0 <_free_r+0x50>
 80094cc:	42a3      	cmp	r3, r4
 80094ce:	d9fa      	bls.n	80094c6 <_free_r+0x46>
 80094d0:	6811      	ldr	r1, [r2, #0]
 80094d2:	1855      	adds	r5, r2, r1
 80094d4:	42a5      	cmp	r5, r4
 80094d6:	d10b      	bne.n	80094f0 <_free_r+0x70>
 80094d8:	6824      	ldr	r4, [r4, #0]
 80094da:	4421      	add	r1, r4
 80094dc:	1854      	adds	r4, r2, r1
 80094de:	42a3      	cmp	r3, r4
 80094e0:	6011      	str	r1, [r2, #0]
 80094e2:	d1e0      	bne.n	80094a6 <_free_r+0x26>
 80094e4:	681c      	ldr	r4, [r3, #0]
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	6053      	str	r3, [r2, #4]
 80094ea:	4421      	add	r1, r4
 80094ec:	6011      	str	r1, [r2, #0]
 80094ee:	e7da      	b.n	80094a6 <_free_r+0x26>
 80094f0:	d902      	bls.n	80094f8 <_free_r+0x78>
 80094f2:	230c      	movs	r3, #12
 80094f4:	6003      	str	r3, [r0, #0]
 80094f6:	e7d6      	b.n	80094a6 <_free_r+0x26>
 80094f8:	6825      	ldr	r5, [r4, #0]
 80094fa:	1961      	adds	r1, r4, r5
 80094fc:	428b      	cmp	r3, r1
 80094fe:	bf04      	itt	eq
 8009500:	6819      	ldreq	r1, [r3, #0]
 8009502:	685b      	ldreq	r3, [r3, #4]
 8009504:	6063      	str	r3, [r4, #4]
 8009506:	bf04      	itt	eq
 8009508:	1949      	addeq	r1, r1, r5
 800950a:	6021      	streq	r1, [r4, #0]
 800950c:	6054      	str	r4, [r2, #4]
 800950e:	e7ca      	b.n	80094a6 <_free_r+0x26>
 8009510:	b003      	add	sp, #12
 8009512:	bd30      	pop	{r4, r5, pc}
 8009514:	20005dc4 	.word	0x20005dc4

08009518 <_init>:
 8009518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800951a:	bf00      	nop
 800951c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800951e:	bc08      	pop	{r3}
 8009520:	469e      	mov	lr, r3
 8009522:	4770      	bx	lr

08009524 <_fini>:
 8009524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009526:	bf00      	nop
 8009528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800952a:	bc08      	pop	{r3}
 800952c:	469e      	mov	lr, r3
 800952e:	4770      	bx	lr
