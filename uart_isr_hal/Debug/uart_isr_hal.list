
uart_isr_hal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082e8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080084e8  080084e8  000184e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008578  08008578  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  08008578  08008578  00018578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008580  08008580  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008580  08008580  00018580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008584  08008584  00018584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008588  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000010  08008598  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000b0  08008638  000200b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000056c8  20000150  080086d8  00020150  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20005818  080086d8  00025818  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 14 .debug_info   00022a6b  00000000  00000000  0002017e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003fc3  00000000  00000000  00042be9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001958  00000000  00000000  00046bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000017c0  00000000  00000000  00048508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000598e  00000000  00000000  00049cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ba47  00000000  00000000  0004f656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00107513  00000000  00000000  0006b09d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001725b0  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006b0c  00000000  00000000  00172600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000150 	.word	0x20000150
 800021c:	00000000 	.word	0x00000000
 8000220:	080084d0 	.word	0x080084d0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000154 	.word	0x20000154
 800023c:	080084d0 	.word	0x080084d0

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002d0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d332      	bcc.n	80002c2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d314      	bcc.n	8000290 <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000284:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000288:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800028a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028e:	4770      	bx	lr

08000290 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000290:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000292:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000294:	d319      	bcc.n	80002ca <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000296:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000298:	1b12      	subs	r2, r2, r4

0800029a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800029a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80002a2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a4:	d1f9      	bne.n	800029a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a8:	d005      	beq.n	80002b6 <_No2ChunkNeeded>

080002aa <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002aa:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002ae:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002b2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b4:	d1f9      	bne.n	80002aa <_LoopCopyAfterWrapAround>

080002b6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80002b6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002ba:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002bc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002be:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002c0:	4770      	bx	lr

080002c2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002c2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002c4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002c6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c8:	d2cd      	bcs.n	8000266 <_Case4>

080002ca <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002ca:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ce:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002d0:	2000016c 	.word	0x2000016c

080002d4 <__aeabi_uldivmod>:
 80002d4:	b953      	cbnz	r3, 80002ec <__aeabi_uldivmod+0x18>
 80002d6:	b94a      	cbnz	r2, 80002ec <__aeabi_uldivmod+0x18>
 80002d8:	2900      	cmp	r1, #0
 80002da:	bf08      	it	eq
 80002dc:	2800      	cmpeq	r0, #0
 80002de:	bf1c      	itt	ne
 80002e0:	f04f 31ff 	movne.w	r1, #4294967295
 80002e4:	f04f 30ff 	movne.w	r0, #4294967295
 80002e8:	f000 b974 	b.w	80005d4 <__aeabi_idiv0>
 80002ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f4:	f000 f806 	bl	8000304 <__udivmoddi4>
 80002f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000300:	b004      	add	sp, #16
 8000302:	4770      	bx	lr

08000304 <__udivmoddi4>:
 8000304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000308:	9d08      	ldr	r5, [sp, #32]
 800030a:	4604      	mov	r4, r0
 800030c:	468e      	mov	lr, r1
 800030e:	2b00      	cmp	r3, #0
 8000310:	d14d      	bne.n	80003ae <__udivmoddi4+0xaa>
 8000312:	428a      	cmp	r2, r1
 8000314:	4694      	mov	ip, r2
 8000316:	d969      	bls.n	80003ec <__udivmoddi4+0xe8>
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	b152      	cbz	r2, 8000334 <__udivmoddi4+0x30>
 800031e:	fa01 f302 	lsl.w	r3, r1, r2
 8000322:	f1c2 0120 	rsb	r1, r2, #32
 8000326:	fa20 f101 	lsr.w	r1, r0, r1
 800032a:	fa0c fc02 	lsl.w	ip, ip, r2
 800032e:	ea41 0e03 	orr.w	lr, r1, r3
 8000332:	4094      	lsls	r4, r2
 8000334:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000338:	0c21      	lsrs	r1, r4, #16
 800033a:	fbbe f6f8 	udiv	r6, lr, r8
 800033e:	fa1f f78c 	uxth.w	r7, ip
 8000342:	fb08 e316 	mls	r3, r8, r6, lr
 8000346:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034a:	fb06 f107 	mul.w	r1, r6, r7
 800034e:	4299      	cmp	r1, r3
 8000350:	d90a      	bls.n	8000368 <__udivmoddi4+0x64>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 811f 	bcs.w	800059c <__udivmoddi4+0x298>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 811c 	bls.w	800059c <__udivmoddi4+0x298>
 8000364:	3e02      	subs	r6, #2
 8000366:	4463      	add	r3, ip
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 f707 	mul.w	r7, r0, r7
 800037c:	42a7      	cmp	r7, r4
 800037e:	d90a      	bls.n	8000396 <__udivmoddi4+0x92>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f100 33ff 	add.w	r3, r0, #4294967295
 8000388:	f080 810a 	bcs.w	80005a0 <__udivmoddi4+0x29c>
 800038c:	42a7      	cmp	r7, r4
 800038e:	f240 8107 	bls.w	80005a0 <__udivmoddi4+0x29c>
 8000392:	4464      	add	r4, ip
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039a:	1be4      	subs	r4, r4, r7
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa4>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xc2>
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	f000 80ef 	beq.w	8000596 <__udivmoddi4+0x292>
 80003b8:	2600      	movs	r6, #0
 80003ba:	e9c5 0100 	strd	r0, r1, [r5]
 80003be:	4630      	mov	r0, r6
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f683 	clz	r6, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d14a      	bne.n	8000464 <__udivmoddi4+0x160>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd4>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80f9 	bhi.w	80005ca <__udivmoddi4+0x2c6>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	469e      	mov	lr, r3
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa4>
 80003e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa4>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xec>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 8092 	bne.w	800051e <__udivmoddi4+0x21a>
 80003fa:	eba1 010c 	sub.w	r1, r1, ip
 80003fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000402:	fa1f fe8c 	uxth.w	lr, ip
 8000406:	2601      	movs	r6, #1
 8000408:	0c20      	lsrs	r0, r4, #16
 800040a:	fbb1 f3f7 	udiv	r3, r1, r7
 800040e:	fb07 1113 	mls	r1, r7, r3, r1
 8000412:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000416:	fb0e f003 	mul.w	r0, lr, r3
 800041a:	4288      	cmp	r0, r1
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x12c>
 800041e:	eb1c 0101 	adds.w	r1, ip, r1
 8000422:	f103 38ff 	add.w	r8, r3, #4294967295
 8000426:	d202      	bcs.n	800042e <__udivmoddi4+0x12a>
 8000428:	4288      	cmp	r0, r1
 800042a:	f200 80cb 	bhi.w	80005c4 <__udivmoddi4+0x2c0>
 800042e:	4643      	mov	r3, r8
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1110 	mls	r1, r7, r0, r1
 800043c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000440:	fb0e fe00 	mul.w	lr, lr, r0
 8000444:	45a6      	cmp	lr, r4
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x156>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d202      	bcs.n	8000458 <__udivmoddi4+0x154>
 8000452:	45a6      	cmp	lr, r4
 8000454:	f200 80bb 	bhi.w	80005ce <__udivmoddi4+0x2ca>
 8000458:	4608      	mov	r0, r1
 800045a:	eba4 040e 	sub.w	r4, r4, lr
 800045e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000462:	e79c      	b.n	800039e <__udivmoddi4+0x9a>
 8000464:	f1c6 0720 	rsb	r7, r6, #32
 8000468:	40b3      	lsls	r3, r6
 800046a:	fa22 fc07 	lsr.w	ip, r2, r7
 800046e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000472:	fa20 f407 	lsr.w	r4, r0, r7
 8000476:	fa01 f306 	lsl.w	r3, r1, r6
 800047a:	431c      	orrs	r4, r3
 800047c:	40f9      	lsrs	r1, r7
 800047e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000482:	fa00 f306 	lsl.w	r3, r0, r6
 8000486:	fbb1 f8f9 	udiv	r8, r1, r9
 800048a:	0c20      	lsrs	r0, r4, #16
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	fb09 1118 	mls	r1, r9, r8, r1
 8000494:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000498:	fb08 f00e 	mul.w	r0, r8, lr
 800049c:	4288      	cmp	r0, r1
 800049e:	fa02 f206 	lsl.w	r2, r2, r6
 80004a2:	d90b      	bls.n	80004bc <__udivmoddi4+0x1b8>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004ac:	f080 8088 	bcs.w	80005c0 <__udivmoddi4+0x2bc>
 80004b0:	4288      	cmp	r0, r1
 80004b2:	f240 8085 	bls.w	80005c0 <__udivmoddi4+0x2bc>
 80004b6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	1a09      	subs	r1, r1, r0
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c4:	fb09 1110 	mls	r1, r9, r0, r1
 80004c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d0:	458e      	cmp	lr, r1
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x1e2>
 80004d4:	eb1c 0101 	adds.w	r1, ip, r1
 80004d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80004dc:	d26c      	bcs.n	80005b8 <__udivmoddi4+0x2b4>
 80004de:	458e      	cmp	lr, r1
 80004e0:	d96a      	bls.n	80005b8 <__udivmoddi4+0x2b4>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4461      	add	r1, ip
 80004e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ea:	fba0 9402 	umull	r9, r4, r0, r2
 80004ee:	eba1 010e 	sub.w	r1, r1, lr
 80004f2:	42a1      	cmp	r1, r4
 80004f4:	46c8      	mov	r8, r9
 80004f6:	46a6      	mov	lr, r4
 80004f8:	d356      	bcc.n	80005a8 <__udivmoddi4+0x2a4>
 80004fa:	d053      	beq.n	80005a4 <__udivmoddi4+0x2a0>
 80004fc:	b15d      	cbz	r5, 8000516 <__udivmoddi4+0x212>
 80004fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000502:	eb61 010e 	sbc.w	r1, r1, lr
 8000506:	fa01 f707 	lsl.w	r7, r1, r7
 800050a:	fa22 f306 	lsr.w	r3, r2, r6
 800050e:	40f1      	lsrs	r1, r6
 8000510:	431f      	orrs	r7, r3
 8000512:	e9c5 7100 	strd	r7, r1, [r5]
 8000516:	2600      	movs	r6, #0
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	f1c2 0320 	rsb	r3, r2, #32
 8000522:	40d8      	lsrs	r0, r3
 8000524:	fa0c fc02 	lsl.w	ip, ip, r2
 8000528:	fa21 f303 	lsr.w	r3, r1, r3
 800052c:	4091      	lsls	r1, r2
 800052e:	4301      	orrs	r1, r0
 8000530:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000534:	fa1f fe8c 	uxth.w	lr, ip
 8000538:	fbb3 f0f7 	udiv	r0, r3, r7
 800053c:	fb07 3610 	mls	r6, r7, r0, r3
 8000540:	0c0b      	lsrs	r3, r1, #16
 8000542:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000546:	fb00 f60e 	mul.w	r6, r0, lr
 800054a:	429e      	cmp	r6, r3
 800054c:	fa04 f402 	lsl.w	r4, r4, r2
 8000550:	d908      	bls.n	8000564 <__udivmoddi4+0x260>
 8000552:	eb1c 0303 	adds.w	r3, ip, r3
 8000556:	f100 38ff 	add.w	r8, r0, #4294967295
 800055a:	d22f      	bcs.n	80005bc <__udivmoddi4+0x2b8>
 800055c:	429e      	cmp	r6, r3
 800055e:	d92d      	bls.n	80005bc <__udivmoddi4+0x2b8>
 8000560:	3802      	subs	r0, #2
 8000562:	4463      	add	r3, ip
 8000564:	1b9b      	subs	r3, r3, r6
 8000566:	b289      	uxth	r1, r1
 8000568:	fbb3 f6f7 	udiv	r6, r3, r7
 800056c:	fb07 3316 	mls	r3, r7, r6, r3
 8000570:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000574:	fb06 f30e 	mul.w	r3, r6, lr
 8000578:	428b      	cmp	r3, r1
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x28a>
 800057c:	eb1c 0101 	adds.w	r1, ip, r1
 8000580:	f106 38ff 	add.w	r8, r6, #4294967295
 8000584:	d216      	bcs.n	80005b4 <__udivmoddi4+0x2b0>
 8000586:	428b      	cmp	r3, r1
 8000588:	d914      	bls.n	80005b4 <__udivmoddi4+0x2b0>
 800058a:	3e02      	subs	r6, #2
 800058c:	4461      	add	r1, ip
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000594:	e738      	b.n	8000408 <__udivmoddi4+0x104>
 8000596:	462e      	mov	r6, r5
 8000598:	4628      	mov	r0, r5
 800059a:	e705      	b.n	80003a8 <__udivmoddi4+0xa4>
 800059c:	4606      	mov	r6, r0
 800059e:	e6e3      	b.n	8000368 <__udivmoddi4+0x64>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6f8      	b.n	8000396 <__udivmoddi4+0x92>
 80005a4:	454b      	cmp	r3, r9
 80005a6:	d2a9      	bcs.n	80004fc <__udivmoddi4+0x1f8>
 80005a8:	ebb9 0802 	subs.w	r8, r9, r2
 80005ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b0:	3801      	subs	r0, #1
 80005b2:	e7a3      	b.n	80004fc <__udivmoddi4+0x1f8>
 80005b4:	4646      	mov	r6, r8
 80005b6:	e7ea      	b.n	800058e <__udivmoddi4+0x28a>
 80005b8:	4620      	mov	r0, r4
 80005ba:	e794      	b.n	80004e6 <__udivmoddi4+0x1e2>
 80005bc:	4640      	mov	r0, r8
 80005be:	e7d1      	b.n	8000564 <__udivmoddi4+0x260>
 80005c0:	46d0      	mov	r8, sl
 80005c2:	e77b      	b.n	80004bc <__udivmoddi4+0x1b8>
 80005c4:	3b02      	subs	r3, #2
 80005c6:	4461      	add	r1, ip
 80005c8:	e732      	b.n	8000430 <__udivmoddi4+0x12c>
 80005ca:	4630      	mov	r0, r6
 80005cc:	e709      	b.n	80003e2 <__udivmoddi4+0xde>
 80005ce:	4464      	add	r4, ip
 80005d0:	3802      	subs	r0, #2
 80005d2:	e742      	b.n	800045a <__udivmoddi4+0x156>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80005de:	4b26      	ldr	r3, [pc, #152]	; (8000678 <_DoInit+0xa0>)
 80005e0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80005e2:	22a8      	movs	r2, #168	; 0xa8
 80005e4:	2100      	movs	r1, #0
 80005e6:	6838      	ldr	r0, [r7, #0]
 80005e8:	f007 ff6a 	bl	80084c0 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	2203      	movs	r2, #3
 80005f0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	2203      	movs	r2, #3
 80005f6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	4a20      	ldr	r2, [pc, #128]	; (800067c <_DoInit+0xa4>)
 80005fc:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	4a1f      	ldr	r2, [pc, #124]	; (8000680 <_DoInit+0xa8>)
 8000602:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800060a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	2200      	movs	r2, #0
 8000610:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	2200      	movs	r2, #0
 8000616:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	2200      	movs	r2, #0
 800061c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	4a16      	ldr	r2, [pc, #88]	; (800067c <_DoInit+0xa4>)
 8000622:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	4a17      	ldr	r2, [pc, #92]	; (8000684 <_DoInit+0xac>)
 8000628:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	2210      	movs	r2, #16
 800062e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	2200      	movs	r2, #0
 8000634:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	2200      	movs	r2, #0
 800063a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	2200      	movs	r2, #0
 8000640:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000642:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	e00c      	b.n	8000666 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f1c3 030f 	rsb	r3, r3, #15
 8000652:	4a0d      	ldr	r2, [pc, #52]	; (8000688 <_DoInit+0xb0>)
 8000654:	5cd1      	ldrb	r1, [r2, r3]
 8000656:	683a      	ldr	r2, [r7, #0]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4413      	add	r3, r2
 800065c:	460a      	mov	r2, r1
 800065e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	3301      	adds	r3, #1
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2b0f      	cmp	r3, #15
 800066a:	d9ef      	bls.n	800064c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800066c:	f3bf 8f5f 	dmb	sy
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	2000016c 	.word	0x2000016c
 800067c:	080084e8 	.word	0x080084e8
 8000680:	20000214 	.word	0x20000214
 8000684:	20000614 	.word	0x20000614
 8000688:	0800851c 	.word	0x0800851c

0800068c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b08c      	sub	sp, #48	; 0x30
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8000698:	4b3e      	ldr	r3, [pc, #248]	; (8000794 <SEGGER_RTT_ReadNoLock+0x108>)
 800069a:	623b      	str	r3, [r7, #32]
 800069c:	6a3b      	ldr	r3, [r7, #32]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d101      	bne.n	80006aa <SEGGER_RTT_ReadNoLock+0x1e>
 80006a6:	f7ff ff97 	bl	80005d8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80006aa:	68fa      	ldr	r2, [r7, #12]
 80006ac:	4613      	mov	r3, r2
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	4413      	add	r3, r2
 80006b2:	00db      	lsls	r3, r3, #3
 80006b4:	3360      	adds	r3, #96	; 0x60
 80006b6:	4a37      	ldr	r2, [pc, #220]	; (8000794 <SEGGER_RTT_ReadNoLock+0x108>)
 80006b8:	4413      	add	r3, r2
 80006ba:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	691b      	ldr	r3, [r3, #16]
 80006c4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80006c6:	69fb      	ldr	r3, [r7, #28]
 80006c8:	68db      	ldr	r3, [r3, #12]
 80006ca:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80006cc:	2300      	movs	r3, #0
 80006ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80006d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006d2:	69bb      	ldr	r3, [r7, #24]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d92b      	bls.n	8000730 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80006d8:	69fb      	ldr	r3, [r7, #28]
 80006da:	689a      	ldr	r2, [r3, #8]
 80006dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006de:	1ad3      	subs	r3, r2, r3
 80006e0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80006e2:	697a      	ldr	r2, [r7, #20]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4293      	cmp	r3, r2
 80006e8:	bf28      	it	cs
 80006ea:	4613      	movcs	r3, r2
 80006ec:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	685a      	ldr	r2, [r3, #4]
 80006f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006f4:	4413      	add	r3, r2
 80006f6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80006f8:	697a      	ldr	r2, [r7, #20]
 80006fa:	6939      	ldr	r1, [r7, #16]
 80006fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006fe:	f007 fed1 	bl	80084a4 <memcpy>
    NumBytesRead += NumBytesRem;
 8000702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	4413      	add	r3, r2
 8000708:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800070a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	4413      	add	r3, r2
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	1ad3      	subs	r3, r2, r3
 8000718:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800071a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	4413      	add	r3, r2
 8000720:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	689b      	ldr	r3, [r3, #8]
 8000726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000728:	429a      	cmp	r2, r3
 800072a:	d101      	bne.n	8000730 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800072c:	2300      	movs	r3, #0
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8000730:	69ba      	ldr	r2, [r7, #24]
 8000732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000734:	1ad3      	subs	r3, r2, r3
 8000736:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8000738:	697a      	ldr	r2, [r7, #20]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4293      	cmp	r3, r2
 800073e:	bf28      	it	cs
 8000740:	4613      	movcs	r3, r2
 8000742:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d019      	beq.n	800077e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	685a      	ldr	r2, [r3, #4]
 800074e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000750:	4413      	add	r3, r2
 8000752:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8000754:	697a      	ldr	r2, [r7, #20]
 8000756:	6939      	ldr	r1, [r7, #16]
 8000758:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800075a:	f007 fea3 	bl	80084a4 <memcpy>
    NumBytesRead += NumBytesRem;
 800075e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	4413      	add	r3, r2
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8000766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	4413      	add	r3, r2
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	1ad3      	subs	r3, r2, r3
 8000774:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8000776:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	4413      	add	r3, r2
 800077c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800077e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000780:	2b00      	cmp	r3, #0
 8000782:	d002      	beq.n	800078a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000788:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800078a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800078c:	4618      	mov	r0, r3
 800078e:	3730      	adds	r7, #48	; 0x30
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	2000016c 	.word	0x2000016c

08000798 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8000798:	b480      	push	{r7}
 800079a:	b087      	sub	sp, #28
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	1c5a      	adds	r2, r3, #1
 80007ac:	60fa      	str	r2, [r7, #12]
 80007ae:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2b80      	cmp	r3, #128	; 0x80
 80007b4:	d90a      	bls.n	80007cc <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80007b6:	2380      	movs	r3, #128	; 0x80
 80007b8:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 80007ba:	e007      	b.n	80007cc <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 80007bc:	68ba      	ldr	r2, [r7, #8]
 80007be:	1c53      	adds	r3, r2, #1
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	1c59      	adds	r1, r3, #1
 80007c6:	60f9      	str	r1, [r7, #12]
 80007c8:	7812      	ldrb	r2, [r2, #0]
 80007ca:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	1e5a      	subs	r2, r3, #1
 80007d0:	607a      	str	r2, [r7, #4]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d003      	beq.n	80007de <_EncodeStr+0x46>
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d1ee      	bne.n	80007bc <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 80007de:	68ba      	ldr	r2, [r7, #8]
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	1ad3      	subs	r3, r2, r3
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	693b      	ldr	r3, [r7, #16]
 80007e8:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 80007ea:	68fb      	ldr	r3, [r7, #12]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	371c      	adds	r7, #28
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3307      	adds	r3, #7
}
 8000804:	4618      	mov	r0, r3
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000816:	4b35      	ldr	r3, [pc, #212]	; (80008ec <_HandleIncomingPacket+0xdc>)
 8000818:	7e1b      	ldrb	r3, [r3, #24]
 800081a:	4618      	mov	r0, r3
 800081c:	1cfb      	adds	r3, r7, #3
 800081e:	2201      	movs	r2, #1
 8000820:	4619      	mov	r1, r3
 8000822:	f7ff ff33 	bl	800068c <SEGGER_RTT_ReadNoLock>
 8000826:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d052      	beq.n	80008d4 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 800082e:	78fb      	ldrb	r3, [r7, #3]
 8000830:	2b80      	cmp	r3, #128	; 0x80
 8000832:	d031      	beq.n	8000898 <_HandleIncomingPacket+0x88>
 8000834:	2b80      	cmp	r3, #128	; 0x80
 8000836:	dc40      	bgt.n	80008ba <_HandleIncomingPacket+0xaa>
 8000838:	2b07      	cmp	r3, #7
 800083a:	dc15      	bgt.n	8000868 <_HandleIncomingPacket+0x58>
 800083c:	2b00      	cmp	r3, #0
 800083e:	dd3c      	ble.n	80008ba <_HandleIncomingPacket+0xaa>
 8000840:	3b01      	subs	r3, #1
 8000842:	2b06      	cmp	r3, #6
 8000844:	d839      	bhi.n	80008ba <_HandleIncomingPacket+0xaa>
 8000846:	a201      	add	r2, pc, #4	; (adr r2, 800084c <_HandleIncomingPacket+0x3c>)
 8000848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800084c:	0800086f 	.word	0x0800086f
 8000850:	08000875 	.word	0x08000875
 8000854:	0800087b 	.word	0x0800087b
 8000858:	08000881 	.word	0x08000881
 800085c:	08000887 	.word	0x08000887
 8000860:	0800088d 	.word	0x0800088d
 8000864:	08000893 	.word	0x08000893
 8000868:	2b7f      	cmp	r3, #127	; 0x7f
 800086a:	d035      	beq.n	80008d8 <_HandleIncomingPacket+0xc8>
 800086c:	e025      	b.n	80008ba <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800086e:	f000 fb91 	bl	8000f94 <SEGGER_SYSVIEW_Start>
      break;
 8000872:	e036      	b.n	80008e2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8000874:	f000 fc48 	bl	8001108 <SEGGER_SYSVIEW_Stop>
      break;
 8000878:	e033      	b.n	80008e2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800087a:	f000 fd19 	bl	80012b0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800087e:	e030      	b.n	80008e2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8000880:	f000 fd02 	bl	8001288 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8000884:	e02d      	b.n	80008e2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8000886:	f000 fc65 	bl	8001154 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800088a:	e02a      	b.n	80008e2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800088c:	f000 fdea 	bl	8001464 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8000890:	e027      	b.n	80008e2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8000892:	f000 fdc9 	bl	8001428 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8000896:	e024      	b.n	80008e2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000898:	4b14      	ldr	r3, [pc, #80]	; (80008ec <_HandleIncomingPacket+0xdc>)
 800089a:	7e1b      	ldrb	r3, [r3, #24]
 800089c:	4618      	mov	r0, r3
 800089e:	1cfb      	adds	r3, r7, #3
 80008a0:	2201      	movs	r2, #1
 80008a2:	4619      	mov	r1, r3
 80008a4:	f7ff fef2 	bl	800068c <SEGGER_RTT_ReadNoLock>
 80008a8:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d015      	beq.n	80008dc <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80008b0:	78fb      	ldrb	r3, [r7, #3]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 fd2e 	bl	8001314 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80008b8:	e010      	b.n	80008dc <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80008ba:	78fb      	ldrb	r3, [r7, #3]
 80008bc:	b25b      	sxtb	r3, r3
 80008be:	2b00      	cmp	r3, #0
 80008c0:	da0e      	bge.n	80008e0 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80008c2:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <_HandleIncomingPacket+0xdc>)
 80008c4:	7e1b      	ldrb	r3, [r3, #24]
 80008c6:	4618      	mov	r0, r3
 80008c8:	1cfb      	adds	r3, r7, #3
 80008ca:	2201      	movs	r2, #1
 80008cc:	4619      	mov	r1, r3
 80008ce:	f7ff fedd 	bl	800068c <SEGGER_RTT_ReadNoLock>
      }
      break;
 80008d2:	e005      	b.n	80008e0 <_HandleIncomingPacket+0xd0>
    }
  }
 80008d4:	bf00      	nop
 80008d6:	e004      	b.n	80008e2 <_HandleIncomingPacket+0xd2>
      break;
 80008d8:	bf00      	nop
 80008da:	e002      	b.n	80008e2 <_HandleIncomingPacket+0xd2>
      break;
 80008dc:	bf00      	nop
 80008de:	e000      	b.n	80008e2 <_HandleIncomingPacket+0xd2>
      break;
 80008e0:	bf00      	nop
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000624 	.word	0x20000624

080008f0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08c      	sub	sp, #48	; 0x30
 80008f4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80008f6:	2301      	movs	r3, #1
 80008f8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	3301      	adds	r3, #1
 80008fe:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000904:	4b31      	ldr	r3, [pc, #196]	; (80009cc <_TrySendOverflowPacket+0xdc>)
 8000906:	695b      	ldr	r3, [r3, #20]
 8000908:	62bb      	str	r3, [r7, #40]	; 0x28
 800090a:	e00b      	b.n	8000924 <_TrySendOverflowPacket+0x34>
 800090c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800090e:	b2da      	uxtb	r2, r3
 8000910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000912:	1c59      	adds	r1, r3, #1
 8000914:	62f9      	str	r1, [r7, #44]	; 0x2c
 8000916:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800091a:	b2d2      	uxtb	r2, r2
 800091c:	701a      	strb	r2, [r3, #0]
 800091e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000920:	09db      	lsrs	r3, r3, #7
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
 8000924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000926:	2b7f      	cmp	r3, #127	; 0x7f
 8000928:	d8f0      	bhi.n	800090c <_TrySendOverflowPacket+0x1c>
 800092a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800092c:	1c5a      	adds	r2, r3, #1
 800092e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000930:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000932:	b2d2      	uxtb	r2, r2
 8000934:	701a      	strb	r2, [r3, #0]
 8000936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000938:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800093a:	4b25      	ldr	r3, [pc, #148]	; (80009d0 <_TrySendOverflowPacket+0xe0>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000940:	4b22      	ldr	r3, [pc, #136]	; (80009cc <_TrySendOverflowPacket+0xdc>)
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	69ba      	ldr	r2, [r7, #24]
 8000946:	1ad3      	subs	r3, r2, r3
 8000948:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	623b      	str	r3, [r7, #32]
 8000952:	e00b      	b.n	800096c <_TrySendOverflowPacket+0x7c>
 8000954:	6a3b      	ldr	r3, [r7, #32]
 8000956:	b2da      	uxtb	r2, r3
 8000958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095a:	1c59      	adds	r1, r3, #1
 800095c:	6279      	str	r1, [r7, #36]	; 0x24
 800095e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000962:	b2d2      	uxtb	r2, r2
 8000964:	701a      	strb	r2, [r3, #0]
 8000966:	6a3b      	ldr	r3, [r7, #32]
 8000968:	09db      	lsrs	r3, r3, #7
 800096a:	623b      	str	r3, [r7, #32]
 800096c:	6a3b      	ldr	r3, [r7, #32]
 800096e:	2b7f      	cmp	r3, #127	; 0x7f
 8000970:	d8f0      	bhi.n	8000954 <_TrySendOverflowPacket+0x64>
 8000972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000974:	1c5a      	adds	r2, r3, #1
 8000976:	627a      	str	r2, [r7, #36]	; 0x24
 8000978:	6a3a      	ldr	r2, [r7, #32]
 800097a:	b2d2      	uxtb	r2, r2
 800097c:	701a      	strb	r2, [r3, #0]
 800097e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000980:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8000982:	4b12      	ldr	r3, [pc, #72]	; (80009cc <_TrySendOverflowPacket+0xdc>)
 8000984:	785b      	ldrb	r3, [r3, #1]
 8000986:	4618      	mov	r0, r3
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	69fa      	ldr	r2, [r7, #28]
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	461a      	mov	r2, r3
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	4619      	mov	r1, r3
 8000994:	f7ff fc54 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000998:	4603      	mov	r3, r0
 800099a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800099c:	693b      	ldr	r3, [r7, #16]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d009      	beq.n	80009b6 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80009a2:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <_TrySendOverflowPacket+0xdc>)
 80009a4:	69bb      	ldr	r3, [r7, #24]
 80009a6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80009a8:	4b08      	ldr	r3, [pc, #32]	; (80009cc <_TrySendOverflowPacket+0xdc>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	3b01      	subs	r3, #1
 80009ae:	b2da      	uxtb	r2, r3
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <_TrySendOverflowPacket+0xdc>)
 80009b2:	701a      	strb	r2, [r3, #0]
 80009b4:	e004      	b.n	80009c0 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80009b6:	4b05      	ldr	r3, [pc, #20]	; (80009cc <_TrySendOverflowPacket+0xdc>)
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	3301      	adds	r3, #1
 80009bc:	4a03      	ldr	r2, [pc, #12]	; (80009cc <_TrySendOverflowPacket+0xdc>)
 80009be:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80009c0:	693b      	ldr	r3, [r7, #16]
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3730      	adds	r7, #48	; 0x30
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000624 	.word	0x20000624
 80009d0:	e0001004 	.word	0xe0001004

080009d4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	; 0x28
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80009e0:	4b98      	ldr	r3, [pc, #608]	; (8000c44 <_SendPacket+0x270>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d010      	beq.n	8000a0a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80009e8:	4b96      	ldr	r3, [pc, #600]	; (8000c44 <_SendPacket+0x270>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	f000 812d 	beq.w	8000c4c <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80009f2:	4b94      	ldr	r3, [pc, #592]	; (8000c44 <_SendPacket+0x270>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b02      	cmp	r3, #2
 80009f8:	d109      	bne.n	8000a0e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80009fa:	f7ff ff79 	bl	80008f0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80009fe:	4b91      	ldr	r3, [pc, #580]	; (8000c44 <_SendPacket+0x270>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	f040 8124 	bne.w	8000c50 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8000a08:	e001      	b.n	8000a0e <_SendPacket+0x3a>
    goto Send;
 8000a0a:	bf00      	nop
 8000a0c:	e000      	b.n	8000a10 <_SendPacket+0x3c>
Send:
 8000a0e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2b1f      	cmp	r3, #31
 8000a14:	d809      	bhi.n	8000a2a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8000a16:	4b8b      	ldr	r3, [pc, #556]	; (8000c44 <_SendPacket+0x270>)
 8000a18:	69da      	ldr	r2, [r3, #28]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	f040 8115 	bne.w	8000c54 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2b17      	cmp	r3, #23
 8000a2e:	d807      	bhi.n	8000a40 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	3b01      	subs	r3, #1
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	701a      	strb	r2, [r3, #0]
 8000a3e:	e0c4      	b.n	8000bca <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8000a40:	68ba      	ldr	r2, [r7, #8]
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8000a48:	69fb      	ldr	r3, [r7, #28]
 8000a4a:	2b7f      	cmp	r3, #127	; 0x7f
 8000a4c:	d912      	bls.n	8000a74 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	09da      	lsrs	r2, r3, #7
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	3b01      	subs	r3, #1
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	b2d2      	uxtb	r2, r2
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	3a01      	subs	r2, #1
 8000a66:	60fa      	str	r2, [r7, #12]
 8000a68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	701a      	strb	r2, [r3, #0]
 8000a72:	e006      	b.n	8000a82 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2b7e      	cmp	r3, #126	; 0x7e
 8000a86:	d807      	bhi.n	8000a98 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	701a      	strb	r2, [r3, #0]
 8000a96:	e098      	b.n	8000bca <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000a9e:	d212      	bcs.n	8000ac6 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	09da      	lsrs	r2, r3, #7
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	3b01      	subs	r3, #1
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	b2d2      	uxtb	r2, r2
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	68fa      	ldr	r2, [r7, #12]
 8000ab6:	3a01      	subs	r2, #1
 8000ab8:	60fa      	str	r2, [r7, #12]
 8000aba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000abe:	b2da      	uxtb	r2, r3
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	701a      	strb	r2, [r3, #0]
 8000ac4:	e081      	b.n	8000bca <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000acc:	d21d      	bcs.n	8000b0a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	0b9a      	lsrs	r2, r3, #14
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	b2d2      	uxtb	r2, r2
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	09db      	lsrs	r3, r3, #7
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	68fa      	ldr	r2, [r7, #12]
 8000ae6:	3a01      	subs	r2, #1
 8000ae8:	60fa      	str	r2, [r7, #12]
 8000aea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	68fa      	ldr	r2, [r7, #12]
 8000afa:	3a01      	subs	r2, #1
 8000afc:	60fa      	str	r2, [r7, #12]
 8000afe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	701a      	strb	r2, [r3, #0]
 8000b08:	e05f      	b.n	8000bca <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000b10:	d228      	bcs.n	8000b64 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	0d5a      	lsrs	r2, r3, #21
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	b2d2      	uxtb	r2, r2
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	0b9b      	lsrs	r3, r3, #14
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	68fa      	ldr	r2, [r7, #12]
 8000b2a:	3a01      	subs	r2, #1
 8000b2c:	60fa      	str	r2, [r7, #12]
 8000b2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	09db      	lsrs	r3, r3, #7
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	68fa      	ldr	r2, [r7, #12]
 8000b40:	3a01      	subs	r2, #1
 8000b42:	60fa      	str	r2, [r7, #12]
 8000b44:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b48:	b2da      	uxtb	r2, r3
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	68fa      	ldr	r2, [r7, #12]
 8000b54:	3a01      	subs	r2, #1
 8000b56:	60fa      	str	r2, [r7, #12]
 8000b58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	701a      	strb	r2, [r3, #0]
 8000b62:	e032      	b.n	8000bca <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	0f1a      	lsrs	r2, r3, #28
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	b2d2      	uxtb	r2, r2
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	0d5b      	lsrs	r3, r3, #21
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	68fa      	ldr	r2, [r7, #12]
 8000b7c:	3a01      	subs	r2, #1
 8000b7e:	60fa      	str	r2, [r7, #12]
 8000b80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	0b9b      	lsrs	r3, r3, #14
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	68fa      	ldr	r2, [r7, #12]
 8000b92:	3a01      	subs	r2, #1
 8000b94:	60fa      	str	r2, [r7, #12]
 8000b96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	09db      	lsrs	r3, r3, #7
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	68fa      	ldr	r2, [r7, #12]
 8000ba8:	3a01      	subs	r2, #1
 8000baa:	60fa      	str	r2, [r7, #12]
 8000bac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	68fa      	ldr	r2, [r7, #12]
 8000bbc:	3a01      	subs	r2, #1
 8000bbe:	60fa      	str	r2, [r7, #12]
 8000bc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000bca:	4b1f      	ldr	r3, [pc, #124]	; (8000c48 <_SendPacket+0x274>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000bd0:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <_SendPacket+0x270>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	69ba      	ldr	r2, [r7, #24]
 8000bd6:	1ad3      	subs	r3, r2, r3
 8000bd8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	623b      	str	r3, [r7, #32]
 8000be2:	e00b      	b.n	8000bfc <_SendPacket+0x228>
 8000be4:	6a3b      	ldr	r3, [r7, #32]
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bea:	1c59      	adds	r1, r3, #1
 8000bec:	6279      	str	r1, [r7, #36]	; 0x24
 8000bee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000bf2:	b2d2      	uxtb	r2, r2
 8000bf4:	701a      	strb	r2, [r3, #0]
 8000bf6:	6a3b      	ldr	r3, [r7, #32]
 8000bf8:	09db      	lsrs	r3, r3, #7
 8000bfa:	623b      	str	r3, [r7, #32]
 8000bfc:	6a3b      	ldr	r3, [r7, #32]
 8000bfe:	2b7f      	cmp	r3, #127	; 0x7f
 8000c00:	d8f0      	bhi.n	8000be4 <_SendPacket+0x210>
 8000c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c04:	1c5a      	adds	r2, r3, #1
 8000c06:	627a      	str	r2, [r7, #36]	; 0x24
 8000c08:	6a3a      	ldr	r2, [r7, #32]
 8000c0a:	b2d2      	uxtb	r2, r2
 8000c0c:	701a      	strb	r2, [r3, #0]
 8000c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c10:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8000c12:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <_SendPacket+0x270>)
 8000c14:	785b      	ldrb	r3, [r3, #1]
 8000c16:	4618      	mov	r0, r3
 8000c18:	68ba      	ldr	r2, [r7, #8]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	461a      	mov	r2, r3
 8000c20:	68f9      	ldr	r1, [r7, #12]
 8000c22:	f7ff fb0d 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000c26:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d003      	beq.n	8000c36 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000c2e:	4a05      	ldr	r2, [pc, #20]	; (8000c44 <_SendPacket+0x270>)
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	60d3      	str	r3, [r2, #12]
 8000c34:	e00f      	b.n	8000c56 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8000c36:	4b03      	ldr	r3, [pc, #12]	; (8000c44 <_SendPacket+0x270>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	4b01      	ldr	r3, [pc, #4]	; (8000c44 <_SendPacket+0x270>)
 8000c40:	701a      	strb	r2, [r3, #0]
 8000c42:	e008      	b.n	8000c56 <_SendPacket+0x282>
 8000c44:	20000624 	.word	0x20000624
 8000c48:	e0001004 	.word	0xe0001004
    goto SendDone;
 8000c4c:	bf00      	nop
 8000c4e:	e002      	b.n	8000c56 <_SendPacket+0x282>
      goto SendDone;
 8000c50:	bf00      	nop
 8000c52:	e000      	b.n	8000c56 <_SendPacket+0x282>
      goto SendDone;
 8000c54:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8000c56:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <_SendPacket+0x2d4>)
 8000c58:	7e1b      	ldrb	r3, [r3, #24]
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4a13      	ldr	r2, [pc, #76]	; (8000cac <_SendPacket+0x2d8>)
 8000c5e:	460b      	mov	r3, r1
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	440b      	add	r3, r1
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	4413      	add	r3, r2
 8000c68:	336c      	adds	r3, #108	; 0x6c
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <_SendPacket+0x2d4>)
 8000c6e:	7e1b      	ldrb	r3, [r3, #24]
 8000c70:	4618      	mov	r0, r3
 8000c72:	490e      	ldr	r1, [pc, #56]	; (8000cac <_SendPacket+0x2d8>)
 8000c74:	4603      	mov	r3, r0
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	4403      	add	r3, r0
 8000c7a:	00db      	lsls	r3, r3, #3
 8000c7c:	440b      	add	r3, r1
 8000c7e:	3370      	adds	r3, #112	; 0x70
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d00b      	beq.n	8000c9e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8000c86:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <_SendPacket+0x2d4>)
 8000c88:	789b      	ldrb	r3, [r3, #2]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d107      	bne.n	8000c9e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <_SendPacket+0x2d4>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8000c94:	f7ff fdbc 	bl	8000810 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8000c98:	4b03      	ldr	r3, [pc, #12]	; (8000ca8 <_SendPacket+0x2d4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8000c9e:	bf00      	nop
 8000ca0:	3728      	adds	r7, #40	; 0x28
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000624 	.word	0x20000624
 8000cac:	2000016c 	.word	0x2000016c

08000cb0 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b0a2      	sub	sp, #136	; 0x88
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
#endif
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 8000cc6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000cc8:	1c5a      	adds	r2, r3, #1
 8000cca:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 8000cd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d01d      	beq.n	8000d16 <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 8000cda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000cde:	2b25      	cmp	r3, #37	; 0x25
 8000ce0:	d1f1      	bne.n	8000cc6 <_VPrintHost+0x16>
      c = *p;
 8000ce2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = (U32)(va_arg(*pParamList, int));
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	1d19      	adds	r1, r3, #4
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	6011      	str	r1, [r2, #0]
 8000cf4:	6819      	ldr	r1, [r3, #0]
 8000cf6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000cfa:	1c5a      	adds	r2, r3, #1
 8000cfc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8000d00:	460a      	mov	r2, r1
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	3388      	adds	r3, #136	; 0x88
 8000d06:	443b      	add	r3, r7
 8000d08:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 8000d0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000d10:	2b10      	cmp	r3, #16
 8000d12:	d002      	beq.n	8000d1a <_VPrintHost+0x6a>
    c = *p++;
 8000d14:	e7d7      	b.n	8000cc6 <_VPrintHost+0x16>
      break;
 8000d16:	bf00      	nop
 8000d18:	e000      	b.n	8000d1c <_VPrintHost+0x6c>
        break;
 8000d1a:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 8000d1c:	f3ef 8311 	mrs	r3, BASEPRI
 8000d20:	f04f 0120 	mov.w	r1, #32
 8000d24:	f381 8811 	msr	BASEPRI, r1
 8000d28:	65bb      	str	r3, [r7, #88]	; 0x58
 8000d2a:	483f      	ldr	r0, [pc, #252]	; (8000e28 <_VPrintHost+0x178>)
 8000d2c:	f7ff fd64 	bl	80007f8 <_PreparePacket>
 8000d30:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8000d32:	2280      	movs	r2, #128	; 0x80
 8000d34:	68f9      	ldr	r1, [r7, #12]
 8000d36:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000d38:	f7ff fd2e 	bl	8000798 <_EncodeStr>
 8000d3c:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 8000d3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d40:	677b      	str	r3, [r7, #116]	; 0x74
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	673b      	str	r3, [r7, #112]	; 0x70
 8000d46:	e00b      	b.n	8000d60 <_VPrintHost+0xb0>
 8000d48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d4e:	1c59      	adds	r1, r3, #1
 8000d50:	6779      	str	r1, [r7, #116]	; 0x74
 8000d52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000d56:	b2d2      	uxtb	r2, r2
 8000d58:	701a      	strb	r2, [r3, #0]
 8000d5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000d5c:	09db      	lsrs	r3, r3, #7
 8000d5e:	673b      	str	r3, [r7, #112]	; 0x70
 8000d60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000d62:	2b7f      	cmp	r3, #127	; 0x7f
 8000d64:	d8f0      	bhi.n	8000d48 <_VPrintHost+0x98>
 8000d66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d68:	1c5a      	adds	r2, r3, #1
 8000d6a:	677a      	str	r2, [r7, #116]	; 0x74
 8000d6c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000d6e:	b2d2      	uxtb	r2, r2
 8000d70:	701a      	strb	r2, [r3, #0]
 8000d72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d74:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 8000d76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000d7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000d7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8000d80:	e00b      	b.n	8000d9a <_VPrintHost+0xea>
 8000d82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d88:	1c59      	adds	r1, r3, #1
 8000d8a:	66f9      	str	r1, [r7, #108]	; 0x6c
 8000d8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000d90:	b2d2      	uxtb	r2, r2
 8000d92:	701a      	strb	r2, [r3, #0]
 8000d94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d96:	09db      	lsrs	r3, r3, #7
 8000d98:	66bb      	str	r3, [r7, #104]	; 0x68
 8000d9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d9c:	2b7f      	cmp	r3, #127	; 0x7f
 8000d9e:	d8f0      	bhi.n	8000d82 <_VPrintHost+0xd2>
 8000da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000da2:	1c5a      	adds	r2, r3, #1
 8000da4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000da6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000da8:	b2d2      	uxtb	r2, r2
 8000daa:	701a      	strb	r2, [r3, #0]
 8000dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000dae:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8000db8:	e022      	b.n	8000e00 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 8000dba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000dbc:	667b      	str	r3, [r7, #100]	; 0x64
 8000dbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	663b      	str	r3, [r7, #96]	; 0x60
 8000dc6:	e00b      	b.n	8000de0 <_VPrintHost+0x130>
 8000dc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000dce:	1c59      	adds	r1, r3, #1
 8000dd0:	6679      	str	r1, [r7, #100]	; 0x64
 8000dd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000dd6:	b2d2      	uxtb	r2, r2
 8000dd8:	701a      	strb	r2, [r3, #0]
 8000dda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000ddc:	09db      	lsrs	r3, r3, #7
 8000dde:	663b      	str	r3, [r7, #96]	; 0x60
 8000de0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000de2:	2b7f      	cmp	r3, #127	; 0x7f
 8000de4:	d8f0      	bhi.n	8000dc8 <_VPrintHost+0x118>
 8000de6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000de8:	1c5a      	adds	r2, r3, #1
 8000dea:	667a      	str	r2, [r7, #100]	; 0x64
 8000dec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000dee:	b2d2      	uxtb	r2, r2
 8000df0:	701a      	strb	r2, [r3, #0]
 8000df2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000df4:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 8000df6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000dfa:	3304      	adds	r3, #4
 8000dfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8000e00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000e04:	1e5a      	subs	r2, r3, #1
 8000e06:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d1d5      	bne.n	8000dba <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8000e0e:	221a      	movs	r2, #26
 8000e10:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000e12:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000e14:	f7ff fdde 	bl	80009d4 <_SendPacket>
    RECORD_END();
 8000e18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000e1a:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 8000e1e:	2300      	movs	r3, #0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3788      	adds	r7, #136	; 0x88
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000654 	.word	0x20000654

08000e2c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8000e34:	f3ef 8311 	mrs	r3, BASEPRI
 8000e38:	f04f 0120 	mov.w	r1, #32
 8000e3c:	f381 8811 	msr	BASEPRI, r1
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	4808      	ldr	r0, [pc, #32]	; (8000e64 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8000e44:	f7ff fcd8 	bl	80007f8 <_PreparePacket>
 8000e48:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	68b9      	ldr	r1, [r7, #8]
 8000e4e:	68b8      	ldr	r0, [r7, #8]
 8000e50:	f7ff fdc0 	bl	80009d4 <_SendPacket>
  RECORD_END();
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f383 8811 	msr	BASEPRI, r3
}
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000654 	.word	0x20000654

08000e68 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b088      	sub	sp, #32
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8000e72:	f3ef 8311 	mrs	r3, BASEPRI
 8000e76:	f04f 0120 	mov.w	r1, #32
 8000e7a:	f381 8811 	msr	BASEPRI, r1
 8000e7e:	617b      	str	r3, [r7, #20]
 8000e80:	4816      	ldr	r0, [pc, #88]	; (8000edc <SEGGER_SYSVIEW_RecordU32+0x74>)
 8000e82:	f7ff fcb9 	bl	80007f8 <_PreparePacket>
 8000e86:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	61fb      	str	r3, [r7, #28]
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	61bb      	str	r3, [r7, #24]
 8000e94:	e00b      	b.n	8000eae <SEGGER_SYSVIEW_RecordU32+0x46>
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	1c59      	adds	r1, r3, #1
 8000e9e:	61f9      	str	r1, [r7, #28]
 8000ea0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000ea4:	b2d2      	uxtb	r2, r2
 8000ea6:	701a      	strb	r2, [r3, #0]
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	09db      	lsrs	r3, r3, #7
 8000eac:	61bb      	str	r3, [r7, #24]
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	2b7f      	cmp	r3, #127	; 0x7f
 8000eb2:	d8f0      	bhi.n	8000e96 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	1c5a      	adds	r2, r3, #1
 8000eb8:	61fa      	str	r2, [r7, #28]
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	b2d2      	uxtb	r2, r2
 8000ebe:	701a      	strb	r2, [r3, #0]
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	68f9      	ldr	r1, [r7, #12]
 8000ec8:	6938      	ldr	r0, [r7, #16]
 8000eca:	f7ff fd83 	bl	80009d4 <_SendPacket>
  RECORD_END();
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	f383 8811 	msr	BASEPRI, r3
}
 8000ed4:	bf00      	nop
 8000ed6:	3720      	adds	r7, #32
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000654 	.word	0x20000654

08000ee0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08c      	sub	sp, #48	; 0x30
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8000eec:	f3ef 8311 	mrs	r3, BASEPRI
 8000ef0:	f04f 0120 	mov.w	r1, #32
 8000ef4:	f381 8811 	msr	BASEPRI, r1
 8000ef8:	61fb      	str	r3, [r7, #28]
 8000efa:	4825      	ldr	r0, [pc, #148]	; (8000f90 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8000efc:	f7ff fc7c 	bl	80007f8 <_PreparePacket>
 8000f00:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f0e:	e00b      	b.n	8000f28 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8000f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f16:	1c59      	adds	r1, r3, #1
 8000f18:	62f9      	str	r1, [r7, #44]	; 0x2c
 8000f1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000f1e:	b2d2      	uxtb	r2, r2
 8000f20:	701a      	strb	r2, [r3, #0]
 8000f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f24:	09db      	lsrs	r3, r3, #7
 8000f26:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f2a:	2b7f      	cmp	r3, #127	; 0x7f
 8000f2c:	d8f0      	bhi.n	8000f10 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8000f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f30:	1c5a      	adds	r2, r3, #1
 8000f32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000f34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f36:	b2d2      	uxtb	r2, r2
 8000f38:	701a      	strb	r2, [r3, #0]
 8000f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f3c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	623b      	str	r3, [r7, #32]
 8000f46:	e00b      	b.n	8000f60 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8000f48:	6a3b      	ldr	r3, [r7, #32]
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4e:	1c59      	adds	r1, r3, #1
 8000f50:	6279      	str	r1, [r7, #36]	; 0x24
 8000f52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000f56:	b2d2      	uxtb	r2, r2
 8000f58:	701a      	strb	r2, [r3, #0]
 8000f5a:	6a3b      	ldr	r3, [r7, #32]
 8000f5c:	09db      	lsrs	r3, r3, #7
 8000f5e:	623b      	str	r3, [r7, #32]
 8000f60:	6a3b      	ldr	r3, [r7, #32]
 8000f62:	2b7f      	cmp	r3, #127	; 0x7f
 8000f64:	d8f0      	bhi.n	8000f48 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8000f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f68:	1c5a      	adds	r2, r3, #1
 8000f6a:	627a      	str	r2, [r7, #36]	; 0x24
 8000f6c:	6a3a      	ldr	r2, [r7, #32]
 8000f6e:	b2d2      	uxtb	r2, r2
 8000f70:	701a      	strb	r2, [r3, #0]
 8000f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f74:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	6979      	ldr	r1, [r7, #20]
 8000f7a:	69b8      	ldr	r0, [r7, #24]
 8000f7c:	f7ff fd2a 	bl	80009d4 <_SendPacket>
  RECORD_END();
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	f383 8811 	msr	BASEPRI, r3
}
 8000f86:	bf00      	nop
 8000f88:	3730      	adds	r7, #48	; 0x30
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000654 	.word	0x20000654

08000f94 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08c      	sub	sp, #48	; 0x30
 8000f98:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8000f9a:	4b58      	ldr	r3, [pc, #352]	; (80010fc <SEGGER_SYSVIEW_Start+0x168>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8000fa0:	f3ef 8311 	mrs	r3, BASEPRI
 8000fa4:	f04f 0120 	mov.w	r1, #32
 8000fa8:	f381 8811 	msr	BASEPRI, r1
 8000fac:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8000fae:	4b53      	ldr	r3, [pc, #332]	; (80010fc <SEGGER_SYSVIEW_Start+0x168>)
 8000fb0:	785b      	ldrb	r3, [r3, #1]
 8000fb2:	220a      	movs	r2, #10
 8000fb4:	4952      	ldr	r1, [pc, #328]	; (8001100 <SEGGER_SYSVIEW_Start+0x16c>)
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff f942 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8000fc2:	200a      	movs	r0, #10
 8000fc4:	f7ff ff32 	bl	8000e2c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8000fc8:	f3ef 8311 	mrs	r3, BASEPRI
 8000fcc:	f04f 0120 	mov.w	r1, #32
 8000fd0:	f381 8811 	msr	BASEPRI, r1
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	484b      	ldr	r0, [pc, #300]	; (8001104 <SEGGER_SYSVIEW_Start+0x170>)
 8000fd8:	f7ff fc0e 	bl	80007f8 <_PreparePacket>
 8000fdc:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fe6:	4b45      	ldr	r3, [pc, #276]	; (80010fc <SEGGER_SYSVIEW_Start+0x168>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fec:	e00b      	b.n	8001006 <SEGGER_SYSVIEW_Start+0x72>
 8000fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff4:	1c59      	adds	r1, r3, #1
 8000ff6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8000ff8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	701a      	strb	r2, [r3, #0]
 8001000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001002:	09db      	lsrs	r3, r3, #7
 8001004:	62bb      	str	r3, [r7, #40]	; 0x28
 8001006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001008:	2b7f      	cmp	r3, #127	; 0x7f
 800100a:	d8f0      	bhi.n	8000fee <SEGGER_SYSVIEW_Start+0x5a>
 800100c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800100e:	1c5a      	adds	r2, r3, #1
 8001010:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001012:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	701a      	strb	r2, [r3, #0]
 8001018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800101a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
 8001020:	4b36      	ldr	r3, [pc, #216]	; (80010fc <SEGGER_SYSVIEW_Start+0x168>)
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	623b      	str	r3, [r7, #32]
 8001026:	e00b      	b.n	8001040 <SEGGER_SYSVIEW_Start+0xac>
 8001028:	6a3b      	ldr	r3, [r7, #32]
 800102a:	b2da      	uxtb	r2, r3
 800102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102e:	1c59      	adds	r1, r3, #1
 8001030:	6279      	str	r1, [r7, #36]	; 0x24
 8001032:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001036:	b2d2      	uxtb	r2, r2
 8001038:	701a      	strb	r2, [r3, #0]
 800103a:	6a3b      	ldr	r3, [r7, #32]
 800103c:	09db      	lsrs	r3, r3, #7
 800103e:	623b      	str	r3, [r7, #32]
 8001040:	6a3b      	ldr	r3, [r7, #32]
 8001042:	2b7f      	cmp	r3, #127	; 0x7f
 8001044:	d8f0      	bhi.n	8001028 <SEGGER_SYSVIEW_Start+0x94>
 8001046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001048:	1c5a      	adds	r2, r3, #1
 800104a:	627a      	str	r2, [r7, #36]	; 0x24
 800104c:	6a3a      	ldr	r2, [r7, #32]
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	701a      	strb	r2, [r3, #0]
 8001052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001054:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	61fb      	str	r3, [r7, #28]
 800105a:	4b28      	ldr	r3, [pc, #160]	; (80010fc <SEGGER_SYSVIEW_Start+0x168>)
 800105c:	691b      	ldr	r3, [r3, #16]
 800105e:	61bb      	str	r3, [r7, #24]
 8001060:	e00b      	b.n	800107a <SEGGER_SYSVIEW_Start+0xe6>
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	b2da      	uxtb	r2, r3
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	1c59      	adds	r1, r3, #1
 800106a:	61f9      	str	r1, [r7, #28]
 800106c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	701a      	strb	r2, [r3, #0]
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	09db      	lsrs	r3, r3, #7
 8001078:	61bb      	str	r3, [r7, #24]
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	2b7f      	cmp	r3, #127	; 0x7f
 800107e:	d8f0      	bhi.n	8001062 <SEGGER_SYSVIEW_Start+0xce>
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	1c5a      	adds	r2, r3, #1
 8001084:	61fa      	str	r2, [r7, #28]
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	b2d2      	uxtb	r2, r2
 800108a:	701a      	strb	r2, [r3, #0]
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	2300      	movs	r3, #0
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	e00b      	b.n	80010b2 <SEGGER_SYSVIEW_Start+0x11e>
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	b2da      	uxtb	r2, r3
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	1c59      	adds	r1, r3, #1
 80010a2:	6179      	str	r1, [r7, #20]
 80010a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	701a      	strb	r2, [r3, #0]
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	09db      	lsrs	r3, r3, #7
 80010b0:	613b      	str	r3, [r7, #16]
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	2b7f      	cmp	r3, #127	; 0x7f
 80010b6:	d8f0      	bhi.n	800109a <SEGGER_SYSVIEW_Start+0x106>
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	1c5a      	adds	r2, r3, #1
 80010bc:	617a      	str	r2, [r7, #20]
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	701a      	strb	r2, [r3, #0]
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80010c8:	2218      	movs	r2, #24
 80010ca:	6839      	ldr	r1, [r7, #0]
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff fc81 	bl	80009d4 <_SendPacket>
      RECORD_END();
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <SEGGER_SYSVIEW_Start+0x168>)
 80010da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d002      	beq.n	80010e6 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <SEGGER_SYSVIEW_Start+0x168>)
 80010e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80010e6:	f000 f8e3 	bl	80012b0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80010ea:	f000 f8cd 	bl	8001288 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80010ee:	f000 f9b9 	bl	8001464 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80010f2:	bf00      	nop
 80010f4:	3730      	adds	r7, #48	; 0x30
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000624 	.word	0x20000624
 8001100:	08008530 	.word	0x08008530
 8001104:	20000654 	.word	0x20000654

08001108 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800110e:	f3ef 8311 	mrs	r3, BASEPRI
 8001112:	f04f 0120 	mov.w	r1, #32
 8001116:	f381 8811 	msr	BASEPRI, r1
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	480b      	ldr	r0, [pc, #44]	; (800114c <SEGGER_SYSVIEW_Stop+0x44>)
 800111e:	f7ff fb6b 	bl	80007f8 <_PreparePacket>
 8001122:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8001124:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <SEGGER_SYSVIEW_Stop+0x48>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d007      	beq.n	800113c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800112c:	220b      	movs	r2, #11
 800112e:	6839      	ldr	r1, [r7, #0]
 8001130:	6838      	ldr	r0, [r7, #0]
 8001132:	f7ff fc4f 	bl	80009d4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <SEGGER_SYSVIEW_Stop+0x48>)
 8001138:	2200      	movs	r2, #0
 800113a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f383 8811 	msr	BASEPRI, r3
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000654 	.word	0x20000654
 8001150:	20000624 	.word	0x20000624

08001154 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b08c      	sub	sp, #48	; 0x30
 8001158:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800115a:	f3ef 8311 	mrs	r3, BASEPRI
 800115e:	f04f 0120 	mov.w	r1, #32
 8001162:	f381 8811 	msr	BASEPRI, r1
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	4845      	ldr	r0, [pc, #276]	; (8001280 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800116a:	f7ff fb45 	bl	80007f8 <_PreparePacket>
 800116e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001178:	4b42      	ldr	r3, [pc, #264]	; (8001284 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	62bb      	str	r3, [r7, #40]	; 0x28
 800117e:	e00b      	b.n	8001198 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8001180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001182:	b2da      	uxtb	r2, r3
 8001184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001186:	1c59      	adds	r1, r3, #1
 8001188:	62f9      	str	r1, [r7, #44]	; 0x2c
 800118a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	701a      	strb	r2, [r3, #0]
 8001192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001194:	09db      	lsrs	r3, r3, #7
 8001196:	62bb      	str	r3, [r7, #40]	; 0x28
 8001198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800119a:	2b7f      	cmp	r3, #127	; 0x7f
 800119c:	d8f0      	bhi.n	8001180 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800119e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011a0:	1c5a      	adds	r2, r3, #1
 80011a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80011a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	701a      	strb	r2, [r3, #0]
 80011aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ac:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
 80011b2:	4b34      	ldr	r3, [pc, #208]	; (8001284 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	623b      	str	r3, [r7, #32]
 80011b8:	e00b      	b.n	80011d2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80011ba:	6a3b      	ldr	r3, [r7, #32]
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c0:	1c59      	adds	r1, r3, #1
 80011c2:	6279      	str	r1, [r7, #36]	; 0x24
 80011c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80011c8:	b2d2      	uxtb	r2, r2
 80011ca:	701a      	strb	r2, [r3, #0]
 80011cc:	6a3b      	ldr	r3, [r7, #32]
 80011ce:	09db      	lsrs	r3, r3, #7
 80011d0:	623b      	str	r3, [r7, #32]
 80011d2:	6a3b      	ldr	r3, [r7, #32]
 80011d4:	2b7f      	cmp	r3, #127	; 0x7f
 80011d6:	d8f0      	bhi.n	80011ba <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80011d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011da:	1c5a      	adds	r2, r3, #1
 80011dc:	627a      	str	r2, [r7, #36]	; 0x24
 80011de:	6a3a      	ldr	r2, [r7, #32]
 80011e0:	b2d2      	uxtb	r2, r2
 80011e2:	701a      	strb	r2, [r3, #0]
 80011e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	61fb      	str	r3, [r7, #28]
 80011ec:	4b25      	ldr	r3, [pc, #148]	; (8001284 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	61bb      	str	r3, [r7, #24]
 80011f2:	e00b      	b.n	800120c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	1c59      	adds	r1, r3, #1
 80011fc:	61f9      	str	r1, [r7, #28]
 80011fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	701a      	strb	r2, [r3, #0]
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	09db      	lsrs	r3, r3, #7
 800120a:	61bb      	str	r3, [r7, #24]
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	2b7f      	cmp	r3, #127	; 0x7f
 8001210:	d8f0      	bhi.n	80011f4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	1c5a      	adds	r2, r3, #1
 8001216:	61fa      	str	r2, [r7, #28]
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	701a      	strb	r2, [r3, #0]
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	617b      	str	r3, [r7, #20]
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	e00b      	b.n	8001244 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	b2da      	uxtb	r2, r3
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	1c59      	adds	r1, r3, #1
 8001234:	6179      	str	r1, [r7, #20]
 8001236:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	701a      	strb	r2, [r3, #0]
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	09db      	lsrs	r3, r3, #7
 8001242:	613b      	str	r3, [r7, #16]
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	2b7f      	cmp	r3, #127	; 0x7f
 8001248:	d8f0      	bhi.n	800122c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	1c5a      	adds	r2, r3, #1
 800124e:	617a      	str	r2, [r7, #20]
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	701a      	strb	r2, [r3, #0]
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800125a:	2218      	movs	r2, #24
 800125c:	6879      	ldr	r1, [r7, #4]
 800125e:	68b8      	ldr	r0, [r7, #8]
 8001260:	f7ff fbb8 	bl	80009d4 <_SendPacket>
  RECORD_END();
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800126c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126e:	2b00      	cmp	r3, #0
 8001270:	d002      	beq.n	8001278 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8001272:	4b04      	ldr	r3, [pc, #16]	; (8001284 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001276:	4798      	blx	r3
  }
}
 8001278:	bf00      	nop
 800127a:	3730      	adds	r7, #48	; 0x30
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000654 	.word	0x20000654
 8001284:	20000624 	.word	0x20000624

08001288 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800128c:	4b07      	ldr	r3, [pc, #28]	; (80012ac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800128e:	6a1b      	ldr	r3, [r3, #32]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d008      	beq.n	80012a6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8001294:	4b05      	ldr	r3, [pc, #20]	; (80012ac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8001296:	6a1b      	ldr	r3, [r3, #32]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800129e:	4b03      	ldr	r3, [pc, #12]	; (80012ac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80012a0:	6a1b      	ldr	r3, [r3, #32]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	4798      	blx	r3
  }
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000624 	.word	0x20000624

080012b0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80012b0:	b590      	push	{r4, r7, lr}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80012b8:	6a1b      	ldr	r3, [r3, #32]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d01a      	beq.n	80012f4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80012be:	4b13      	ldr	r3, [pc, #76]	; (800130c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80012c0:	6a1b      	ldr	r3, [r3, #32]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d015      	beq.n	80012f4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80012c8:	4b10      	ldr	r3, [pc, #64]	; (800130c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80012ca:	6a1b      	ldr	r3, [r3, #32]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4798      	blx	r3
 80012d0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80012d4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80012d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	f04f 0300 	mov.w	r3, #0
 80012e2:	000a      	movs	r2, r1
 80012e4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80012e6:	4613      	mov	r3, r2
 80012e8:	461a      	mov	r2, r3
 80012ea:	4621      	mov	r1, r4
 80012ec:	200d      	movs	r0, #13
 80012ee:	f7ff fdf7 	bl	8000ee0 <SEGGER_SYSVIEW_RecordU32x2>
 80012f2:	e006      	b.n	8001302 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4619      	mov	r1, r3
 80012fa:	200c      	movs	r0, #12
 80012fc:	f7ff fdb4 	bl	8000e68 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8001300:	bf00      	nop
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	bd90      	pop	{r4, r7, pc}
 800130a:	bf00      	nop
 800130c:	20000624 	.word	0x20000624
 8001310:	e0001004 	.word	0xe0001004

08001314 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b08c      	sub	sp, #48	; 0x30
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800131e:	4b40      	ldr	r3, [pc, #256]	; (8001420 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d077      	beq.n	8001416 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8001326:	4b3e      	ldr	r3, [pc, #248]	; (8001420 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800132c:	2300      	movs	r3, #0
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001330:	e008      	b.n	8001344 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8001332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8001338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800133a:	2b00      	cmp	r3, #0
 800133c:	d007      	beq.n	800134e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800133e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001340:	3301      	adds	r3, #1
 8001342:	62bb      	str	r3, [r7, #40]	; 0x28
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001348:	429a      	cmp	r2, r3
 800134a:	d3f2      	bcc.n	8001332 <SEGGER_SYSVIEW_SendModule+0x1e>
 800134c:	e000      	b.n	8001350 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800134e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8001350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001352:	2b00      	cmp	r3, #0
 8001354:	d055      	beq.n	8001402 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8001356:	f3ef 8311 	mrs	r3, BASEPRI
 800135a:	f04f 0120 	mov.w	r1, #32
 800135e:	f381 8811 	msr	BASEPRI, r1
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	482f      	ldr	r0, [pc, #188]	; (8001424 <SEGGER_SYSVIEW_SendModule+0x110>)
 8001366:	f7ff fa47 	bl	80007f8 <_PreparePacket>
 800136a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	623b      	str	r3, [r7, #32]
 8001378:	e00b      	b.n	8001392 <SEGGER_SYSVIEW_SendModule+0x7e>
 800137a:	6a3b      	ldr	r3, [r7, #32]
 800137c:	b2da      	uxtb	r2, r3
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	1c59      	adds	r1, r3, #1
 8001382:	6279      	str	r1, [r7, #36]	; 0x24
 8001384:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	701a      	strb	r2, [r3, #0]
 800138c:	6a3b      	ldr	r3, [r7, #32]
 800138e:	09db      	lsrs	r3, r3, #7
 8001390:	623b      	str	r3, [r7, #32]
 8001392:	6a3b      	ldr	r3, [r7, #32]
 8001394:	2b7f      	cmp	r3, #127	; 0x7f
 8001396:	d8f0      	bhi.n	800137a <SEGGER_SYSVIEW_SendModule+0x66>
 8001398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139a:	1c5a      	adds	r2, r3, #1
 800139c:	627a      	str	r2, [r7, #36]	; 0x24
 800139e:	6a3a      	ldr	r2, [r7, #32]
 80013a0:	b2d2      	uxtb	r2, r2
 80013a2:	701a      	strb	r2, [r3, #0]
 80013a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	61fb      	str	r3, [r7, #28]
 80013ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	61bb      	str	r3, [r7, #24]
 80013b2:	e00b      	b.n	80013cc <SEGGER_SYSVIEW_SendModule+0xb8>
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	1c59      	adds	r1, r3, #1
 80013bc:	61f9      	str	r1, [r7, #28]
 80013be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	701a      	strb	r2, [r3, #0]
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	09db      	lsrs	r3, r3, #7
 80013ca:	61bb      	str	r3, [r7, #24]
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	2b7f      	cmp	r3, #127	; 0x7f
 80013d0:	d8f0      	bhi.n	80013b4 <SEGGER_SYSVIEW_SendModule+0xa0>
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	1c5a      	adds	r2, r3, #1
 80013d6:	61fa      	str	r2, [r7, #28]
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	701a      	strb	r2, [r3, #0]
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80013e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2280      	movs	r2, #128	; 0x80
 80013e8:	4619      	mov	r1, r3
 80013ea:	68f8      	ldr	r0, [r7, #12]
 80013ec:	f7ff f9d4 	bl	8000798 <_EncodeStr>
 80013f0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80013f2:	2216      	movs	r2, #22
 80013f4:	68f9      	ldr	r1, [r7, #12]
 80013f6:	6938      	ldr	r0, [r7, #16]
 80013f8:	f7ff faec 	bl	80009d4 <_SendPacket>
      RECORD_END();
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8001402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001404:	2b00      	cmp	r3, #0
 8001406:	d006      	beq.n	8001416 <SEGGER_SYSVIEW_SendModule+0x102>
 8001408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d002      	beq.n	8001416 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8001410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	4798      	blx	r3
    }
  }
}
 8001416:	bf00      	nop
 8001418:	3730      	adds	r7, #48	; 0x30
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	2000064c 	.word	0x2000064c
 8001424:	20000654 	.word	0x20000654

08001428 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800142e:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d00f      	beq.n	8001456 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8001436:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d002      	beq.n	800144a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1f2      	bne.n	800143c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	2000064c 	.word	0x2000064c

08001464 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800146a:	f3ef 8311 	mrs	r3, BASEPRI
 800146e:	f04f 0120 	mov.w	r1, #32
 8001472:	f381 8811 	msr	BASEPRI, r1
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	4817      	ldr	r0, [pc, #92]	; (80014d8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800147a:	f7ff f9bd 	bl	80007f8 <_PreparePacket>
 800147e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	617b      	str	r3, [r7, #20]
 8001488:	4b14      	ldr	r3, [pc, #80]	; (80014dc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	e00b      	b.n	80014a8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	b2da      	uxtb	r2, r3
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	1c59      	adds	r1, r3, #1
 8001498:	6179      	str	r1, [r7, #20]
 800149a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800149e:	b2d2      	uxtb	r2, r2
 80014a0:	701a      	strb	r2, [r3, #0]
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	09db      	lsrs	r3, r3, #7
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	2b7f      	cmp	r3, #127	; 0x7f
 80014ac:	d8f0      	bhi.n	8001490 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	1c5a      	adds	r2, r3, #1
 80014b2:	617a      	str	r2, [r7, #20]
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	b2d2      	uxtb	r2, r2
 80014b8:	701a      	strb	r2, [r3, #0]
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80014be:	221b      	movs	r2, #27
 80014c0:	6879      	ldr	r1, [r7, #4]
 80014c2:	68b8      	ldr	r0, [r7, #8]
 80014c4:	f7ff fa86 	bl	80009d4 <_SendPacket>
  RECORD_END();
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f383 8811 	msr	BASEPRI, r3
}
 80014ce:	bf00      	nop
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000654 	.word	0x20000654
 80014dc:	20000650 	.word	0x20000650

080014e0 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 80014e0:	b40f      	push	{r0, r1, r2, r3}
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	461a      	mov	r2, r3
 80014f2:	2100      	movs	r1, #0
 80014f4:	6938      	ldr	r0, [r7, #16]
 80014f6:	f7ff fbdb 	bl	8000cb0 <_VPrintHost>
  va_end(ParamList);
#endif
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001504:	b004      	add	sp, #16
 8001506:	4770      	bx	lr

08001508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800150c:	f000 fd09 	bl	8001f22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001510:	f000 f820 	bl	8001554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001514:	f000 f99c 	bl	8001850 <MX_GPIO_Init>
  MX_ETH_Init();
 8001518:	f000 f88e 	bl	8001638 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800151c:	f000 f93a 	bl	8001794 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001520:	f000 f968 	bl	80017f4 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 8001524:	f000 f906 	bl	8001734 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8001528:	f000 f8d4 	bl	80016d4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800152c:	f004 f9c8 	bl	80058c0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001530:	4a05      	ldr	r2, [pc, #20]	; (8001548 <main+0x40>)
 8001532:	2100      	movs	r1, #0
 8001534:	4805      	ldr	r0, [pc, #20]	; (800154c <main+0x44>)
 8001536:	f004 fa2d 	bl	8005994 <osThreadNew>
 800153a:	4603      	mov	r3, r0
 800153c:	4a04      	ldr	r2, [pc, #16]	; (8001550 <main+0x48>)
 800153e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001540:	f004 f9f2 	bl	8005928 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001544:	e7fe      	b.n	8001544 <main+0x3c>
 8001546:	bf00      	nop
 8001548:	0800853c 	.word	0x0800853c
 800154c:	08001995 	.word	0x08001995
 8001550:	20000ec0 	.word	0x20000ec0

08001554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b094      	sub	sp, #80	; 0x50
 8001558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800155a:	f107 031c 	add.w	r3, r7, #28
 800155e:	2234      	movs	r2, #52	; 0x34
 8001560:	2100      	movs	r1, #0
 8001562:	4618      	mov	r0, r3
 8001564:	f006 ffac 	bl	80084c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001568:	f107 0308 	add.w	r3, r7, #8
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001578:	f001 fd2c 	bl	8002fd4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800157c:	4b2c      	ldr	r3, [pc, #176]	; (8001630 <SystemClock_Config+0xdc>)
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	4a2b      	ldr	r2, [pc, #172]	; (8001630 <SystemClock_Config+0xdc>)
 8001582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001586:	6413      	str	r3, [r2, #64]	; 0x40
 8001588:	4b29      	ldr	r3, [pc, #164]	; (8001630 <SystemClock_Config+0xdc>)
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001594:	4b27      	ldr	r3, [pc, #156]	; (8001634 <SystemClock_Config+0xe0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800159c:	4a25      	ldr	r2, [pc, #148]	; (8001634 <SystemClock_Config+0xe0>)
 800159e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	4b23      	ldr	r3, [pc, #140]	; (8001634 <SystemClock_Config+0xe0>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015ac:	603b      	str	r3, [r7, #0]
 80015ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015b0:	2301      	movs	r3, #1
 80015b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80015b4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80015b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ba:	2302      	movs	r3, #2
 80015bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015c4:	2304      	movs	r3, #4
 80015c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80015c8:	2360      	movs	r3, #96	; 0x60
 80015ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015cc:	2302      	movs	r3, #2
 80015ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015d0:	2304      	movs	r3, #4
 80015d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015d4:	2302      	movs	r3, #2
 80015d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d8:	f107 031c 	add.w	r3, r7, #28
 80015dc:	4618      	mov	r0, r3
 80015de:	f001 fd59 	bl	8003094 <HAL_RCC_OscConfig>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80015e8:	f000 f9dc 	bl	80019a4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80015ec:	f001 fd02 	bl	8002ff4 <HAL_PWREx_EnableOverDrive>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80015f6:	f000 f9d5 	bl	80019a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015fa:	230f      	movs	r3, #15
 80015fc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015fe:	2302      	movs	r3, #2
 8001600:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800160a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800160c:	2300      	movs	r3, #0
 800160e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001610:	f107 0308 	add.w	r3, r7, #8
 8001614:	2103      	movs	r1, #3
 8001616:	4618      	mov	r0, r3
 8001618:	f001 ffea 	bl	80035f0 <HAL_RCC_ClockConfig>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001622:	f000 f9bf 	bl	80019a4 <Error_Handler>
  }
}
 8001626:	bf00      	nop
 8001628:	3750      	adds	r7, #80	; 0x50
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40023800 	.word	0x40023800
 8001634:	40007000 	.word	0x40007000

08001638 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800163c:	4b1f      	ldr	r3, [pc, #124]	; (80016bc <MX_ETH_Init+0x84>)
 800163e:	4a20      	ldr	r2, [pc, #128]	; (80016c0 <MX_ETH_Init+0x88>)
 8001640:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001642:	4b20      	ldr	r3, [pc, #128]	; (80016c4 <MX_ETH_Init+0x8c>)
 8001644:	2200      	movs	r2, #0
 8001646:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001648:	4b1e      	ldr	r3, [pc, #120]	; (80016c4 <MX_ETH_Init+0x8c>)
 800164a:	2280      	movs	r2, #128	; 0x80
 800164c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800164e:	4b1d      	ldr	r3, [pc, #116]	; (80016c4 <MX_ETH_Init+0x8c>)
 8001650:	22e1      	movs	r2, #225	; 0xe1
 8001652:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001654:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <MX_ETH_Init+0x8c>)
 8001656:	2200      	movs	r2, #0
 8001658:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800165a:	4b1a      	ldr	r3, [pc, #104]	; (80016c4 <MX_ETH_Init+0x8c>)
 800165c:	2200      	movs	r2, #0
 800165e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001660:	4b18      	ldr	r3, [pc, #96]	; (80016c4 <MX_ETH_Init+0x8c>)
 8001662:	2200      	movs	r2, #0
 8001664:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <MX_ETH_Init+0x84>)
 8001668:	4a16      	ldr	r2, [pc, #88]	; (80016c4 <MX_ETH_Init+0x8c>)
 800166a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800166c:	4b13      	ldr	r3, [pc, #76]	; (80016bc <MX_ETH_Init+0x84>)
 800166e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001672:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001674:	4b11      	ldr	r3, [pc, #68]	; (80016bc <MX_ETH_Init+0x84>)
 8001676:	4a14      	ldr	r2, [pc, #80]	; (80016c8 <MX_ETH_Init+0x90>)
 8001678:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <MX_ETH_Init+0x84>)
 800167c:	4a13      	ldr	r2, [pc, #76]	; (80016cc <MX_ETH_Init+0x94>)
 800167e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001680:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <MX_ETH_Init+0x84>)
 8001682:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001686:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001688:	480c      	ldr	r0, [pc, #48]	; (80016bc <MX_ETH_Init+0x84>)
 800168a:	f000 fe6f 	bl	800236c <HAL_ETH_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001694:	f000 f986 	bl	80019a4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001698:	2238      	movs	r2, #56	; 0x38
 800169a:	2100      	movs	r1, #0
 800169c:	480c      	ldr	r0, [pc, #48]	; (80016d0 <MX_ETH_Init+0x98>)
 800169e:	f006 ff0f 	bl	80084c0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <MX_ETH_Init+0x98>)
 80016a4:	2221      	movs	r2, #33	; 0x21
 80016a6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <MX_ETH_Init+0x98>)
 80016aa:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80016ae:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80016b0:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <MX_ETH_Init+0x98>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000770 	.word	0x20000770
 80016c0:	40028000 	.word	0x40028000
 80016c4:	20000ec4 	.word	0x20000ec4
 80016c8:	200000b0 	.word	0x200000b0
 80016cc:	20000010 	.word	0x20000010
 80016d0:	20000738 	.word	0x20000738

080016d4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80016d8:	4b14      	ldr	r3, [pc, #80]	; (800172c <MX_UART4_Init+0x58>)
 80016da:	4a15      	ldr	r2, [pc, #84]	; (8001730 <MX_UART4_Init+0x5c>)
 80016dc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80016de:	4b13      	ldr	r3, [pc, #76]	; (800172c <MX_UART4_Init+0x58>)
 80016e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016e4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80016e6:	4b11      	ldr	r3, [pc, #68]	; (800172c <MX_UART4_Init+0x58>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80016ec:	4b0f      	ldr	r3, [pc, #60]	; (800172c <MX_UART4_Init+0x58>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <MX_UART4_Init+0x58>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80016f8:	4b0c      	ldr	r3, [pc, #48]	; (800172c <MX_UART4_Init+0x58>)
 80016fa:	220c      	movs	r2, #12
 80016fc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fe:	4b0b      	ldr	r3, [pc, #44]	; (800172c <MX_UART4_Init+0x58>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001704:	4b09      	ldr	r3, [pc, #36]	; (800172c <MX_UART4_Init+0x58>)
 8001706:	2200      	movs	r2, #0
 8001708:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800170a:	4b08      	ldr	r3, [pc, #32]	; (800172c <MX_UART4_Init+0x58>)
 800170c:	2200      	movs	r2, #0
 800170e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <MX_UART4_Init+0x58>)
 8001712:	2200      	movs	r2, #0
 8001714:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001716:	4805      	ldr	r0, [pc, #20]	; (800172c <MX_UART4_Init+0x58>)
 8001718:	f002 fdb8 	bl	800428c <HAL_UART_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001722:	f000 f93f 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000820 	.word	0x20000820
 8001730:	40004c00 	.word	0x40004c00

08001734 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001738:	4b14      	ldr	r3, [pc, #80]	; (800178c <MX_USART2_UART_Init+0x58>)
 800173a:	4a15      	ldr	r2, [pc, #84]	; (8001790 <MX_USART2_UART_Init+0x5c>)
 800173c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800173e:	4b13      	ldr	r3, [pc, #76]	; (800178c <MX_USART2_UART_Init+0x58>)
 8001740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001744:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001746:	4b11      	ldr	r3, [pc, #68]	; (800178c <MX_USART2_UART_Init+0x58>)
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800174c:	4b0f      	ldr	r3, [pc, #60]	; (800178c <MX_USART2_UART_Init+0x58>)
 800174e:	2200      	movs	r2, #0
 8001750:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <MX_USART2_UART_Init+0x58>)
 8001754:	2200      	movs	r2, #0
 8001756:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <MX_USART2_UART_Init+0x58>)
 800175a:	220c      	movs	r2, #12
 800175c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <MX_USART2_UART_Init+0x58>)
 8001760:	2200      	movs	r2, #0
 8001762:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001764:	4b09      	ldr	r3, [pc, #36]	; (800178c <MX_USART2_UART_Init+0x58>)
 8001766:	2200      	movs	r2, #0
 8001768:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800176a:	4b08      	ldr	r3, [pc, #32]	; (800178c <MX_USART2_UART_Init+0x58>)
 800176c:	2200      	movs	r2, #0
 800176e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <MX_USART2_UART_Init+0x58>)
 8001772:	2200      	movs	r2, #0
 8001774:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001776:	4805      	ldr	r0, [pc, #20]	; (800178c <MX_USART2_UART_Init+0x58>)
 8001778:	f002 fd88 	bl	800428c <HAL_UART_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001782:	f000 f90f 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	200008a8 	.word	0x200008a8
 8001790:	40004400 	.word	0x40004400

08001794 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001798:	4b14      	ldr	r3, [pc, #80]	; (80017ec <MX_USART3_UART_Init+0x58>)
 800179a:	4a15      	ldr	r2, [pc, #84]	; (80017f0 <MX_USART3_UART_Init+0x5c>)
 800179c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800179e:	4b13      	ldr	r3, [pc, #76]	; (80017ec <MX_USART3_UART_Init+0x58>)
 80017a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017a6:	4b11      	ldr	r3, [pc, #68]	; (80017ec <MX_USART3_UART_Init+0x58>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017ac:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <MX_USART3_UART_Init+0x58>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017b2:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <MX_USART3_UART_Init+0x58>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <MX_USART3_UART_Init+0x58>)
 80017ba:	220c      	movs	r2, #12
 80017bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017be:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <MX_USART3_UART_Init+0x58>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <MX_USART3_UART_Init+0x58>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ca:	4b08      	ldr	r3, [pc, #32]	; (80017ec <MX_USART3_UART_Init+0x58>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <MX_USART3_UART_Init+0x58>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017d6:	4805      	ldr	r0, [pc, #20]	; (80017ec <MX_USART3_UART_Init+0x58>)
 80017d8:	f002 fd58 	bl	800428c <HAL_UART_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80017e2:	f000 f8df 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000930 	.word	0x20000930
 80017f0:	40004800 	.word	0x40004800

080017f4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80017f8:	4b14      	ldr	r3, [pc, #80]	; (800184c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80017fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001802:	2206      	movs	r2, #6
 8001804:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001808:	2202      	movs	r2, #2
 800180a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800180e:	2200      	movs	r2, #0
 8001810:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001814:	2202      	movs	r2, #2
 8001816:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800181a:	2201      	movs	r2, #1
 800181c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001820:	2200      	movs	r2, #0
 8001822:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001824:	4b09      	ldr	r3, [pc, #36]	; (800184c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001826:	2200      	movs	r2, #0
 8001828:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800182a:	4b08      	ldr	r3, [pc, #32]	; (800184c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800182c:	2201      	movs	r2, #1
 800182e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001832:	2200      	movs	r2, #0
 8001834:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001836:	4805      	ldr	r0, [pc, #20]	; (800184c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001838:	f001 fa83 	bl	8002d42 <HAL_PCD_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001842:	f000 f8af 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200009b8 	.word	0x200009b8

08001850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08c      	sub	sp, #48	; 0x30
 8001854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001856:	f107 031c 	add.w	r3, r7, #28
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	609a      	str	r2, [r3, #8]
 8001862:	60da      	str	r2, [r3, #12]
 8001864:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001866:	4b47      	ldr	r3, [pc, #284]	; (8001984 <MX_GPIO_Init+0x134>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a46      	ldr	r2, [pc, #280]	; (8001984 <MX_GPIO_Init+0x134>)
 800186c:	f043 0304 	orr.w	r3, r3, #4
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b44      	ldr	r3, [pc, #272]	; (8001984 <MX_GPIO_Init+0x134>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	61bb      	str	r3, [r7, #24]
 800187c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800187e:	4b41      	ldr	r3, [pc, #260]	; (8001984 <MX_GPIO_Init+0x134>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a40      	ldr	r2, [pc, #256]	; (8001984 <MX_GPIO_Init+0x134>)
 8001884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b3e      	ldr	r3, [pc, #248]	; (8001984 <MX_GPIO_Init+0x134>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001896:	4b3b      	ldr	r3, [pc, #236]	; (8001984 <MX_GPIO_Init+0x134>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a3a      	ldr	r2, [pc, #232]	; (8001984 <MX_GPIO_Init+0x134>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b38      	ldr	r3, [pc, #224]	; (8001984 <MX_GPIO_Init+0x134>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	613b      	str	r3, [r7, #16]
 80018ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ae:	4b35      	ldr	r3, [pc, #212]	; (8001984 <MX_GPIO_Init+0x134>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	4a34      	ldr	r2, [pc, #208]	; (8001984 <MX_GPIO_Init+0x134>)
 80018b4:	f043 0302 	orr.w	r3, r3, #2
 80018b8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ba:	4b32      	ldr	r3, [pc, #200]	; (8001984 <MX_GPIO_Init+0x134>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018c6:	4b2f      	ldr	r3, [pc, #188]	; (8001984 <MX_GPIO_Init+0x134>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	4a2e      	ldr	r2, [pc, #184]	; (8001984 <MX_GPIO_Init+0x134>)
 80018cc:	f043 0308 	orr.w	r3, r3, #8
 80018d0:	6313      	str	r3, [r2, #48]	; 0x30
 80018d2:	4b2c      	ldr	r3, [pc, #176]	; (8001984 <MX_GPIO_Init+0x134>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018de:	4b29      	ldr	r3, [pc, #164]	; (8001984 <MX_GPIO_Init+0x134>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	4a28      	ldr	r2, [pc, #160]	; (8001984 <MX_GPIO_Init+0x134>)
 80018e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018e8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ea:	4b26      	ldr	r3, [pc, #152]	; (8001984 <MX_GPIO_Init+0x134>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80018f6:	2200      	movs	r2, #0
 80018f8:	f244 0181 	movw	r1, #16513	; 0x4081
 80018fc:	4822      	ldr	r0, [pc, #136]	; (8001988 <MX_GPIO_Init+0x138>)
 80018fe:	f001 fa07 	bl	8002d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001902:	2200      	movs	r2, #0
 8001904:	2140      	movs	r1, #64	; 0x40
 8001906:	4821      	ldr	r0, [pc, #132]	; (800198c <MX_GPIO_Init+0x13c>)
 8001908:	f001 fa02 	bl	8002d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800190c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001912:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800191c:	f107 031c 	add.w	r3, r7, #28
 8001920:	4619      	mov	r1, r3
 8001922:	481b      	ldr	r0, [pc, #108]	; (8001990 <MX_GPIO_Init+0x140>)
 8001924:	f001 f848 	bl	80029b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001928:	f244 0381 	movw	r3, #16513	; 0x4081
 800192c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192e:	2301      	movs	r3, #1
 8001930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001936:	2300      	movs	r3, #0
 8001938:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193a:	f107 031c 	add.w	r3, r7, #28
 800193e:	4619      	mov	r1, r3
 8001940:	4811      	ldr	r0, [pc, #68]	; (8001988 <MX_GPIO_Init+0x138>)
 8001942:	f001 f839 	bl	80029b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001946:	2340      	movs	r3, #64	; 0x40
 8001948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194a:	2301      	movs	r3, #1
 800194c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001952:	2300      	movs	r3, #0
 8001954:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001956:	f107 031c 	add.w	r3, r7, #28
 800195a:	4619      	mov	r1, r3
 800195c:	480b      	ldr	r0, [pc, #44]	; (800198c <MX_GPIO_Init+0x13c>)
 800195e:	f001 f82b 	bl	80029b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001962:	2380      	movs	r3, #128	; 0x80
 8001964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001966:	2300      	movs	r3, #0
 8001968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800196e:	f107 031c 	add.w	r3, r7, #28
 8001972:	4619      	mov	r1, r3
 8001974:	4805      	ldr	r0, [pc, #20]	; (800198c <MX_GPIO_Init+0x13c>)
 8001976:	f001 f81f 	bl	80029b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800197a:	bf00      	nop
 800197c:	3730      	adds	r7, #48	; 0x30
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800
 8001988:	40020400 	.word	0x40020400
 800198c:	40021800 	.word	0x40021800
 8001990:	40020800 	.word	0x40020800

08001994 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800199c:	2001      	movs	r0, #1
 800199e:	f004 f89f 	bl	8005ae0 <osDelay>
 80019a2:	e7fb      	b.n	800199c <StartDefaultTask+0x8>

080019a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a8:	b672      	cpsid	i
}
 80019aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019ac:	e7fe      	b.n	80019ac <Error_Handler+0x8>
	...

080019b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80019b6:	4b11      	ldr	r3, [pc, #68]	; (80019fc <HAL_MspInit+0x4c>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	4a10      	ldr	r2, [pc, #64]	; (80019fc <HAL_MspInit+0x4c>)
 80019bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c0:	6413      	str	r3, [r2, #64]	; 0x40
 80019c2:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <HAL_MspInit+0x4c>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ce:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <HAL_MspInit+0x4c>)
 80019d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d2:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <HAL_MspInit+0x4c>)
 80019d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d8:	6453      	str	r3, [r2, #68]	; 0x44
 80019da:	4b08      	ldr	r3, [pc, #32]	; (80019fc <HAL_MspInit+0x4c>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019e2:	603b      	str	r3, [r7, #0]
 80019e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	210f      	movs	r1, #15
 80019ea:	f06f 0001 	mvn.w	r0, #1
 80019ee:	f000 fbf4 	bl	80021da <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40023800 	.word	0x40023800

08001a00 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08e      	sub	sp, #56	; 0x38
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a4e      	ldr	r2, [pc, #312]	; (8001b58 <HAL_ETH_MspInit+0x158>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	f040 8096 	bne.w	8001b50 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001a24:	4b4d      	ldr	r3, [pc, #308]	; (8001b5c <HAL_ETH_MspInit+0x15c>)
 8001a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a28:	4a4c      	ldr	r2, [pc, #304]	; (8001b5c <HAL_ETH_MspInit+0x15c>)
 8001a2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a2e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a30:	4b4a      	ldr	r3, [pc, #296]	; (8001b5c <HAL_ETH_MspInit+0x15c>)
 8001a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a38:	623b      	str	r3, [r7, #32]
 8001a3a:	6a3b      	ldr	r3, [r7, #32]
 8001a3c:	4b47      	ldr	r3, [pc, #284]	; (8001b5c <HAL_ETH_MspInit+0x15c>)
 8001a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a40:	4a46      	ldr	r2, [pc, #280]	; (8001b5c <HAL_ETH_MspInit+0x15c>)
 8001a42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a46:	6313      	str	r3, [r2, #48]	; 0x30
 8001a48:	4b44      	ldr	r3, [pc, #272]	; (8001b5c <HAL_ETH_MspInit+0x15c>)
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a50:	61fb      	str	r3, [r7, #28]
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	4b41      	ldr	r3, [pc, #260]	; (8001b5c <HAL_ETH_MspInit+0x15c>)
 8001a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a58:	4a40      	ldr	r2, [pc, #256]	; (8001b5c <HAL_ETH_MspInit+0x15c>)
 8001a5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a60:	4b3e      	ldr	r3, [pc, #248]	; (8001b5c <HAL_ETH_MspInit+0x15c>)
 8001a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a68:	61bb      	str	r3, [r7, #24]
 8001a6a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a6c:	4b3b      	ldr	r3, [pc, #236]	; (8001b5c <HAL_ETH_MspInit+0x15c>)
 8001a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a70:	4a3a      	ldr	r2, [pc, #232]	; (8001b5c <HAL_ETH_MspInit+0x15c>)
 8001a72:	f043 0304 	orr.w	r3, r3, #4
 8001a76:	6313      	str	r3, [r2, #48]	; 0x30
 8001a78:	4b38      	ldr	r3, [pc, #224]	; (8001b5c <HAL_ETH_MspInit+0x15c>)
 8001a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a84:	4b35      	ldr	r3, [pc, #212]	; (8001b5c <HAL_ETH_MspInit+0x15c>)
 8001a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a88:	4a34      	ldr	r2, [pc, #208]	; (8001b5c <HAL_ETH_MspInit+0x15c>)
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a90:	4b32      	ldr	r3, [pc, #200]	; (8001b5c <HAL_ETH_MspInit+0x15c>)
 8001a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9c:	4b2f      	ldr	r3, [pc, #188]	; (8001b5c <HAL_ETH_MspInit+0x15c>)
 8001a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa0:	4a2e      	ldr	r2, [pc, #184]	; (8001b5c <HAL_ETH_MspInit+0x15c>)
 8001aa2:	f043 0302 	orr.w	r3, r3, #2
 8001aa6:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa8:	4b2c      	ldr	r3, [pc, #176]	; (8001b5c <HAL_ETH_MspInit+0x15c>)
 8001aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ab4:	4b29      	ldr	r3, [pc, #164]	; (8001b5c <HAL_ETH_MspInit+0x15c>)
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab8:	4a28      	ldr	r2, [pc, #160]	; (8001b5c <HAL_ETH_MspInit+0x15c>)
 8001aba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001abe:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac0:	4b26      	ldr	r3, [pc, #152]	; (8001b5c <HAL_ETH_MspInit+0x15c>)
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001acc:	2332      	movs	r3, #50	; 0x32
 8001ace:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001adc:	230b      	movs	r3, #11
 8001ade:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	481e      	ldr	r0, [pc, #120]	; (8001b60 <HAL_ETH_MspInit+0x160>)
 8001ae8:	f000 ff66 	bl	80029b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001aec:	2386      	movs	r3, #134	; 0x86
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af0:	2302      	movs	r3, #2
 8001af2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af8:	2303      	movs	r3, #3
 8001afa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001afc:	230b      	movs	r3, #11
 8001afe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b04:	4619      	mov	r1, r3
 8001b06:	4817      	ldr	r0, [pc, #92]	; (8001b64 <HAL_ETH_MspInit+0x164>)
 8001b08:	f000 ff56 	bl	80029b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001b0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b12:	2302      	movs	r3, #2
 8001b14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b1e:	230b      	movs	r3, #11
 8001b20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b26:	4619      	mov	r1, r3
 8001b28:	480f      	ldr	r0, [pc, #60]	; (8001b68 <HAL_ETH_MspInit+0x168>)
 8001b2a:	f000 ff45 	bl	80029b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001b2e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b40:	230b      	movs	r3, #11
 8001b42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4808      	ldr	r0, [pc, #32]	; (8001b6c <HAL_ETH_MspInit+0x16c>)
 8001b4c:	f000 ff34 	bl	80029b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001b50:	bf00      	nop
 8001b52:	3738      	adds	r7, #56	; 0x38
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40028000 	.word	0x40028000
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40020800 	.word	0x40020800
 8001b64:	40020000 	.word	0x40020000
 8001b68:	40020400 	.word	0x40020400
 8001b6c:	40021800 	.word	0x40021800

08001b70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b0b2      	sub	sp, #200	; 0xc8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b8c:	2290      	movs	r2, #144	; 0x90
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f006 fc95 	bl	80084c0 <memset>
  if(huart->Instance==UART4)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a68      	ldr	r2, [pc, #416]	; (8001d3c <HAL_UART_MspInit+0x1cc>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d145      	bne.n	8001c2c <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001ba0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f001 ff44 	bl	8003a3c <HAL_RCCEx_PeriphCLKConfig>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001bba:	f7ff fef3 	bl	80019a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001bbe:	4b60      	ldr	r3, [pc, #384]	; (8001d40 <HAL_UART_MspInit+0x1d0>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	4a5f      	ldr	r2, [pc, #380]	; (8001d40 <HAL_UART_MspInit+0x1d0>)
 8001bc4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bca:	4b5d      	ldr	r3, [pc, #372]	; (8001d40 <HAL_UART_MspInit+0x1d0>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bd2:	623b      	str	r3, [r7, #32]
 8001bd4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd6:	4b5a      	ldr	r3, [pc, #360]	; (8001d40 <HAL_UART_MspInit+0x1d0>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	4a59      	ldr	r2, [pc, #356]	; (8001d40 <HAL_UART_MspInit+0x1d0>)
 8001bdc:	f043 0304 	orr.w	r3, r3, #4
 8001be0:	6313      	str	r3, [r2, #48]	; 0x30
 8001be2:	4b57      	ldr	r3, [pc, #348]	; (8001d40 <HAL_UART_MspInit+0x1d0>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	f003 0304 	and.w	r3, r3, #4
 8001bea:	61fb      	str	r3, [r7, #28]
 8001bec:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001bee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001bf2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c02:	2303      	movs	r3, #3
 8001c04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001c08:	2308      	movs	r3, #8
 8001c0a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c0e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c12:	4619      	mov	r1, r3
 8001c14:	484b      	ldr	r0, [pc, #300]	; (8001d44 <HAL_UART_MspInit+0x1d4>)
 8001c16:	f000 fecf 	bl	80029b8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2105      	movs	r1, #5
 8001c1e:	2034      	movs	r0, #52	; 0x34
 8001c20:	f000 fadb 	bl	80021da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001c24:	2034      	movs	r0, #52	; 0x34
 8001c26:	f000 faf4 	bl	8002212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c2a:	e082      	b.n	8001d32 <HAL_UART_MspInit+0x1c2>
  else if(huart->Instance==USART2)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a45      	ldr	r2, [pc, #276]	; (8001d48 <HAL_UART_MspInit+0x1d8>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d13b      	bne.n	8001cae <HAL_UART_MspInit+0x13e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c36:	2380      	movs	r3, #128	; 0x80
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c42:	4618      	mov	r0, r3
 8001c44:	f001 fefa 	bl	8003a3c <HAL_RCCEx_PeriphCLKConfig>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8001c4e:	f7ff fea9 	bl	80019a4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c52:	4b3b      	ldr	r3, [pc, #236]	; (8001d40 <HAL_UART_MspInit+0x1d0>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	4a3a      	ldr	r2, [pc, #232]	; (8001d40 <HAL_UART_MspInit+0x1d0>)
 8001c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5e:	4b38      	ldr	r3, [pc, #224]	; (8001d40 <HAL_UART_MspInit+0x1d0>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c66:	61bb      	str	r3, [r7, #24]
 8001c68:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c6a:	4b35      	ldr	r3, [pc, #212]	; (8001d40 <HAL_UART_MspInit+0x1d0>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	4a34      	ldr	r2, [pc, #208]	; (8001d40 <HAL_UART_MspInit+0x1d0>)
 8001c70:	f043 0308 	orr.w	r3, r3, #8
 8001c74:	6313      	str	r3, [r2, #48]	; 0x30
 8001c76:	4b32      	ldr	r3, [pc, #200]	; (8001d40 <HAL_UART_MspInit+0x1d0>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001c82:	2360      	movs	r3, #96	; 0x60
 8001c84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c94:	2303      	movs	r3, #3
 8001c96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c9a:	2307      	movs	r3, #7
 8001c9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ca0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4829      	ldr	r0, [pc, #164]	; (8001d4c <HAL_UART_MspInit+0x1dc>)
 8001ca8:	f000 fe86 	bl	80029b8 <HAL_GPIO_Init>
}
 8001cac:	e041      	b.n	8001d32 <HAL_UART_MspInit+0x1c2>
  else if(huart->Instance==USART3)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a27      	ldr	r2, [pc, #156]	; (8001d50 <HAL_UART_MspInit+0x1e0>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d13c      	bne.n	8001d32 <HAL_UART_MspInit+0x1c2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001cb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f001 feb8 	bl	8003a3c <HAL_RCCEx_PeriphCLKConfig>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_UART_MspInit+0x166>
      Error_Handler();
 8001cd2:	f7ff fe67 	bl	80019a4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cd6:	4b1a      	ldr	r3, [pc, #104]	; (8001d40 <HAL_UART_MspInit+0x1d0>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	4a19      	ldr	r2, [pc, #100]	; (8001d40 <HAL_UART_MspInit+0x1d0>)
 8001cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce2:	4b17      	ldr	r3, [pc, #92]	; (8001d40 <HAL_UART_MspInit+0x1d0>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cee:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <HAL_UART_MspInit+0x1d0>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	4a13      	ldr	r2, [pc, #76]	; (8001d40 <HAL_UART_MspInit+0x1d0>)
 8001cf4:	f043 0308 	orr.w	r3, r3, #8
 8001cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfa:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <HAL_UART_MspInit+0x1d0>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	f003 0308 	and.w	r3, r3, #8
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001d06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d20:	2307      	movs	r3, #7
 8001d22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d26:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4807      	ldr	r0, [pc, #28]	; (8001d4c <HAL_UART_MspInit+0x1dc>)
 8001d2e:	f000 fe43 	bl	80029b8 <HAL_GPIO_Init>
}
 8001d32:	bf00      	nop
 8001d34:	37c8      	adds	r7, #200	; 0xc8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40004c00 	.word	0x40004c00
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40020800 	.word	0x40020800
 8001d48:	40004400 	.word	0x40004400
 8001d4c:	40020c00 	.word	0x40020c00
 8001d50:	40004800 	.word	0x40004800

08001d54 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b0ae      	sub	sp, #184	; 0xb8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d6c:	f107 0314 	add.w	r3, r7, #20
 8001d70:	2290      	movs	r2, #144	; 0x90
 8001d72:	2100      	movs	r1, #0
 8001d74:	4618      	mov	r0, r3
 8001d76:	f006 fba3 	bl	80084c0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d82:	d159      	bne.n	8001e38 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001d84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d88:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	4618      	mov	r0, r3
 8001d96:	f001 fe51 	bl	8003a3c <HAL_RCCEx_PeriphCLKConfig>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001da0:	f7ff fe00 	bl	80019a4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da4:	4b26      	ldr	r3, [pc, #152]	; (8001e40 <HAL_PCD_MspInit+0xec>)
 8001da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da8:	4a25      	ldr	r2, [pc, #148]	; (8001e40 <HAL_PCD_MspInit+0xec>)
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	6313      	str	r3, [r2, #48]	; 0x30
 8001db0:	4b23      	ldr	r3, [pc, #140]	; (8001e40 <HAL_PCD_MspInit+0xec>)
 8001db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001dbc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001dc0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001dd6:	230a      	movs	r3, #10
 8001dd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ddc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001de0:	4619      	mov	r1, r3
 8001de2:	4818      	ldr	r0, [pc, #96]	; (8001e44 <HAL_PCD_MspInit+0xf0>)
 8001de4:	f000 fde8 	bl	80029b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001de8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001df0:	2300      	movs	r3, #0
 8001df2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001dfc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e00:	4619      	mov	r1, r3
 8001e02:	4810      	ldr	r0, [pc, #64]	; (8001e44 <HAL_PCD_MspInit+0xf0>)
 8001e04:	f000 fdd8 	bl	80029b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001e08:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <HAL_PCD_MspInit+0xec>)
 8001e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e0c:	4a0c      	ldr	r2, [pc, #48]	; (8001e40 <HAL_PCD_MspInit+0xec>)
 8001e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e12:	6353      	str	r3, [r2, #52]	; 0x34
 8001e14:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <HAL_PCD_MspInit+0xec>)
 8001e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <HAL_PCD_MspInit+0xec>)
 8001e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e24:	4a06      	ldr	r2, [pc, #24]	; (8001e40 <HAL_PCD_MspInit+0xec>)
 8001e26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e2a:	6453      	str	r3, [r2, #68]	; 0x44
 8001e2c:	4b04      	ldr	r3, [pc, #16]	; (8001e40 <HAL_PCD_MspInit+0xec>)
 8001e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001e38:	bf00      	nop
 8001e3a:	37b8      	adds	r7, #184	; 0xb8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40020000 	.word	0x40020000

08001e48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e4c:	e7fe      	b.n	8001e4c <NMI_Handler+0x4>

08001e4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e52:	e7fe      	b.n	8001e52 <HardFault_Handler+0x4>

08001e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e58:	e7fe      	b.n	8001e58 <MemManage_Handler+0x4>

08001e5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e5e:	e7fe      	b.n	8001e5e <BusFault_Handler+0x4>

08001e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e64:	e7fe      	b.n	8001e64 <UsageFault_Handler+0x4>

08001e66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e78:	f000 f890 	bl	8001f9c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001e7c:	f005 fa8e 	bl	800739c <xTaskGetSchedulerState>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d001      	beq.n	8001e8a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001e86:	f006 f86f 	bl	8007f68 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
	...

08001e90 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001e94:	4803      	ldr	r0, [pc, #12]	; (8001ea4 <UART4_IRQHandler+0x14>)
 8001e96:	f002 fa47 	bl	8004328 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  SEGGER_SYSVIEW_PrintfHost("isr");
 8001e9a:	4803      	ldr	r0, [pc, #12]	; (8001ea8 <UART4_IRQHandler+0x18>)
 8001e9c:	f7ff fb20 	bl	80014e0 <SEGGER_SYSVIEW_PrintfHost>
  /* USER CODE END UART4_IRQn 1 */
}
 8001ea0:	bf00      	nop
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20000820 	.word	0x20000820
 8001ea8:	08008500 	.word	0x08008500

08001eac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <SystemInit+0x20>)
 8001eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb6:	4a05      	ldr	r2, [pc, #20]	; (8001ecc <SystemInit+0x20>)
 8001eb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ed0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ed4:	480d      	ldr	r0, [pc, #52]	; (8001f0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ed6:	490e      	ldr	r1, [pc, #56]	; (8001f10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ed8:	4a0e      	ldr	r2, [pc, #56]	; (8001f14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001edc:	e002      	b.n	8001ee4 <LoopCopyDataInit>

08001ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ee2:	3304      	adds	r3, #4

08001ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee8:	d3f9      	bcc.n	8001ede <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eea:	4a0b      	ldr	r2, [pc, #44]	; (8001f18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001eec:	4c0b      	ldr	r4, [pc, #44]	; (8001f1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ef0:	e001      	b.n	8001ef6 <LoopFillZerobss>

08001ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ef4:	3204      	adds	r2, #4

08001ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef8:	d3fb      	bcc.n	8001ef2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001efa:	f7ff ffd7 	bl	8001eac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001efe:	f006 faad 	bl	800845c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f02:	f7ff fb01 	bl	8001508 <main>
  bx  lr    
 8001f06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f08:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f10:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001f14:	08008588 	.word	0x08008588
  ldr r2, =_sbss
 8001f18:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8001f1c:	20005818 	.word	0x20005818

08001f20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f20:	e7fe      	b.n	8001f20 <ADC_IRQHandler>

08001f22 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f26:	2003      	movs	r0, #3
 8001f28:	f000 f94c 	bl	80021c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f2c:	200f      	movs	r0, #15
 8001f2e:	f000 f805 	bl	8001f3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f32:	f7ff fd3d 	bl	80019b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f44:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <HAL_InitTick+0x54>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <HAL_InitTick+0x58>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f000 f967 	bl	800222e <HAL_SYSTICK_Config>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e00e      	b.n	8001f88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b0f      	cmp	r3, #15
 8001f6e:	d80a      	bhi.n	8001f86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f70:	2200      	movs	r2, #0
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	f04f 30ff 	mov.w	r0, #4294967295
 8001f78:	f000 f92f 	bl	80021da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f7c:	4a06      	ldr	r2, [pc, #24]	; (8001f98 <HAL_InitTick+0x5c>)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
 8001f84:	e000      	b.n	8001f88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	20000000 	.word	0x20000000
 8001f94:	20000008 	.word	0x20000008
 8001f98:	20000004 	.word	0x20000004

08001f9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <HAL_IncTick+0x20>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <HAL_IncTick+0x24>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4413      	add	r3, r2
 8001fac:	4a04      	ldr	r2, [pc, #16]	; (8001fc0 <HAL_IncTick+0x24>)
 8001fae:	6013      	str	r3, [r2, #0]
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	20000008 	.word	0x20000008
 8001fc0:	20000ecc 	.word	0x20000ecc

08001fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fc8:	4b03      	ldr	r3, [pc, #12]	; (8001fd8 <HAL_GetTick+0x14>)
 8001fca:	681b      	ldr	r3, [r3, #0]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	20000ecc 	.word	0x20000ecc

08001fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fe4:	f7ff ffee 	bl	8001fc4 <HAL_GetTick>
 8001fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff4:	d005      	beq.n	8002002 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <HAL_Delay+0x44>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4413      	add	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002002:	bf00      	nop
 8002004:	f7ff ffde 	bl	8001fc4 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	429a      	cmp	r2, r3
 8002012:	d8f7      	bhi.n	8002004 <HAL_Delay+0x28>
  {
  }
}
 8002014:	bf00      	nop
 8002016:	bf00      	nop
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20000008 	.word	0x20000008

08002024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002034:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <__NVIC_SetPriorityGrouping+0x40>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002040:	4013      	ands	r3, r2
 8002042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800204c:	4b06      	ldr	r3, [pc, #24]	; (8002068 <__NVIC_SetPriorityGrouping+0x44>)
 800204e:	4313      	orrs	r3, r2
 8002050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002052:	4a04      	ldr	r2, [pc, #16]	; (8002064 <__NVIC_SetPriorityGrouping+0x40>)
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	60d3      	str	r3, [r2, #12]
}
 8002058:	bf00      	nop
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	e000ed00 	.word	0xe000ed00
 8002068:	05fa0000 	.word	0x05fa0000

0800206c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002070:	4b04      	ldr	r3, [pc, #16]	; (8002084 <__NVIC_GetPriorityGrouping+0x18>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	0a1b      	lsrs	r3, r3, #8
 8002076:	f003 0307 	and.w	r3, r3, #7
}
 800207a:	4618      	mov	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002096:	2b00      	cmp	r3, #0
 8002098:	db0b      	blt.n	80020b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800209a:	79fb      	ldrb	r3, [r7, #7]
 800209c:	f003 021f 	and.w	r2, r3, #31
 80020a0:	4907      	ldr	r1, [pc, #28]	; (80020c0 <__NVIC_EnableIRQ+0x38>)
 80020a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a6:	095b      	lsrs	r3, r3, #5
 80020a8:	2001      	movs	r0, #1
 80020aa:	fa00 f202 	lsl.w	r2, r0, r2
 80020ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	e000e100 	.word	0xe000e100

080020c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	6039      	str	r1, [r7, #0]
 80020ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	db0a      	blt.n	80020ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	490c      	ldr	r1, [pc, #48]	; (8002110 <__NVIC_SetPriority+0x4c>)
 80020de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e2:	0112      	lsls	r2, r2, #4
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	440b      	add	r3, r1
 80020e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020ec:	e00a      	b.n	8002104 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	4908      	ldr	r1, [pc, #32]	; (8002114 <__NVIC_SetPriority+0x50>)
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	3b04      	subs	r3, #4
 80020fc:	0112      	lsls	r2, r2, #4
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	440b      	add	r3, r1
 8002102:	761a      	strb	r2, [r3, #24]
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	e000e100 	.word	0xe000e100
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002118:	b480      	push	{r7}
 800211a:	b089      	sub	sp, #36	; 0x24
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f1c3 0307 	rsb	r3, r3, #7
 8002132:	2b04      	cmp	r3, #4
 8002134:	bf28      	it	cs
 8002136:	2304      	movcs	r3, #4
 8002138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3304      	adds	r3, #4
 800213e:	2b06      	cmp	r3, #6
 8002140:	d902      	bls.n	8002148 <NVIC_EncodePriority+0x30>
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3b03      	subs	r3, #3
 8002146:	e000      	b.n	800214a <NVIC_EncodePriority+0x32>
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800214c:	f04f 32ff 	mov.w	r2, #4294967295
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43da      	mvns	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	401a      	ands	r2, r3
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002160:	f04f 31ff 	mov.w	r1, #4294967295
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	fa01 f303 	lsl.w	r3, r1, r3
 800216a:	43d9      	mvns	r1, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002170:	4313      	orrs	r3, r2
         );
}
 8002172:	4618      	mov	r0, r3
 8002174:	3724      	adds	r7, #36	; 0x24
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
	...

08002180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3b01      	subs	r3, #1
 800218c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002190:	d301      	bcc.n	8002196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002192:	2301      	movs	r3, #1
 8002194:	e00f      	b.n	80021b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002196:	4a0a      	ldr	r2, [pc, #40]	; (80021c0 <SysTick_Config+0x40>)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3b01      	subs	r3, #1
 800219c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800219e:	210f      	movs	r1, #15
 80021a0:	f04f 30ff 	mov.w	r0, #4294967295
 80021a4:	f7ff ff8e 	bl	80020c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021a8:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <SysTick_Config+0x40>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ae:	4b04      	ldr	r3, [pc, #16]	; (80021c0 <SysTick_Config+0x40>)
 80021b0:	2207      	movs	r2, #7
 80021b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	e000e010 	.word	0xe000e010

080021c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7ff ff29 	bl	8002024 <__NVIC_SetPriorityGrouping>
}
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021da:	b580      	push	{r7, lr}
 80021dc:	b086      	sub	sp, #24
 80021de:	af00      	add	r7, sp, #0
 80021e0:	4603      	mov	r3, r0
 80021e2:	60b9      	str	r1, [r7, #8]
 80021e4:	607a      	str	r2, [r7, #4]
 80021e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021ec:	f7ff ff3e 	bl	800206c <__NVIC_GetPriorityGrouping>
 80021f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	68b9      	ldr	r1, [r7, #8]
 80021f6:	6978      	ldr	r0, [r7, #20]
 80021f8:	f7ff ff8e 	bl	8002118 <NVIC_EncodePriority>
 80021fc:	4602      	mov	r2, r0
 80021fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002202:	4611      	mov	r1, r2
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff ff5d 	bl	80020c4 <__NVIC_SetPriority>
}
 800220a:	bf00      	nop
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	4603      	mov	r3, r0
 800221a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800221c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff ff31 	bl	8002088 <__NVIC_EnableIRQ>
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7ff ffa2 	bl	8002180 <SysTick_Config>
 800223c:	4603      	mov	r3, r0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b084      	sub	sp, #16
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002252:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002254:	f7ff feb6 	bl	8001fc4 <HAL_GetTick>
 8002258:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d008      	beq.n	8002278 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2280      	movs	r2, #128	; 0x80
 800226a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e052      	b.n	800231e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 0216 	bic.w	r2, r2, #22
 8002286:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	695a      	ldr	r2, [r3, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002296:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229c:	2b00      	cmp	r3, #0
 800229e:	d103      	bne.n	80022a8 <HAL_DMA_Abort+0x62>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d007      	beq.n	80022b8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0208 	bic.w	r2, r2, #8
 80022b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 0201 	bic.w	r2, r2, #1
 80022c6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022c8:	e013      	b.n	80022f2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022ca:	f7ff fe7b 	bl	8001fc4 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b05      	cmp	r3, #5
 80022d6:	d90c      	bls.n	80022f2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2220      	movs	r2, #32
 80022dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2203      	movs	r2, #3
 80022e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e015      	b.n	800231e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1e4      	bne.n	80022ca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002304:	223f      	movs	r2, #63	; 0x3f
 8002306:	409a      	lsls	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d004      	beq.n	8002344 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2280      	movs	r2, #128	; 0x80
 800233e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e00c      	b.n	800235e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2205      	movs	r2, #5
 8002348:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 0201 	bic.w	r2, r2, #1
 800235a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
	...

0800236c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e06a      	b.n	8002454 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002384:	2b00      	cmp	r3, #0
 8002386:	d106      	bne.n	8002396 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2223      	movs	r2, #35	; 0x23
 800238c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7ff fb35 	bl	8001a00 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002396:	4b31      	ldr	r3, [pc, #196]	; (800245c <HAL_ETH_Init+0xf0>)
 8002398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239a:	4a30      	ldr	r2, [pc, #192]	; (800245c <HAL_ETH_Init+0xf0>)
 800239c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023a0:	6453      	str	r3, [r2, #68]	; 0x44
 80023a2:	4b2e      	ldr	r3, [pc, #184]	; (800245c <HAL_ETH_Init+0xf0>)
 80023a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023aa:	60bb      	str	r3, [r7, #8]
 80023ac:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80023ae:	4b2c      	ldr	r3, [pc, #176]	; (8002460 <HAL_ETH_Init+0xf4>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	4a2b      	ldr	r2, [pc, #172]	; (8002460 <HAL_ETH_Init+0xf4>)
 80023b4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80023b8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80023ba:	4b29      	ldr	r3, [pc, #164]	; (8002460 <HAL_ETH_Init+0xf4>)
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	4927      	ldr	r1, [pc, #156]	; (8002460 <HAL_ETH_Init+0xf4>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80023c8:	4b25      	ldr	r3, [pc, #148]	; (8002460 <HAL_ETH_Init+0xf4>)
 80023ca:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6812      	ldr	r2, [r2, #0]
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023e4:	f7ff fdee 	bl	8001fc4 <HAL_GetTick>
 80023e8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80023ea:	e011      	b.n	8002410 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80023ec:	f7ff fdea 	bl	8001fc4 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80023fa:	d909      	bls.n	8002410 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2204      	movs	r2, #4
 8002400:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	22e0      	movs	r2, #224	; 0xe0
 8002408:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e021      	b.n	8002454 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1e4      	bne.n	80023ec <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f958 	bl	80026d8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 f9ff 	bl	800282c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 fa55 	bl	80028de <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	461a      	mov	r2, r3
 800243a:	2100      	movs	r1, #0
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 f9bd 	bl	80027bc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2210      	movs	r2, #16
 800244e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40023800 	.word	0x40023800
 8002460:	40013800 	.word	0x40013800

08002464 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	4b51      	ldr	r3, [pc, #324]	; (80025c0 <ETH_SetMACConfig+0x15c>)
 800247a:	4013      	ands	r3, r2
 800247c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	7c1b      	ldrb	r3, [r3, #16]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d102      	bne.n	800248c <ETH_SetMACConfig+0x28>
 8002486:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800248a:	e000      	b.n	800248e <ETH_SetMACConfig+0x2a>
 800248c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	7c5b      	ldrb	r3, [r3, #17]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d102      	bne.n	800249c <ETH_SetMACConfig+0x38>
 8002496:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800249a:	e000      	b.n	800249e <ETH_SetMACConfig+0x3a>
 800249c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800249e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80024a4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	7fdb      	ldrb	r3, [r3, #31]
 80024aa:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80024ac:	431a      	orrs	r2, r3
                        macconf->Speed |
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80024b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	7f92      	ldrb	r2, [r2, #30]
 80024b8:	2a00      	cmp	r2, #0
 80024ba:	d102      	bne.n	80024c2 <ETH_SetMACConfig+0x5e>
 80024bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024c0:	e000      	b.n	80024c4 <ETH_SetMACConfig+0x60>
 80024c2:	2200      	movs	r2, #0
                        macconf->Speed |
 80024c4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	7f1b      	ldrb	r3, [r3, #28]
 80024ca:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80024cc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80024d2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	791b      	ldrb	r3, [r3, #4]
 80024d8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80024da:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	f892 2020 	ldrb.w	r2, [r2, #32]
 80024e2:	2a00      	cmp	r2, #0
 80024e4:	d102      	bne.n	80024ec <ETH_SetMACConfig+0x88>
 80024e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024ea:	e000      	b.n	80024ee <ETH_SetMACConfig+0x8a>
 80024ec:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80024ee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	7bdb      	ldrb	r3, [r3, #15]
 80024f4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80024f6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80024fc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002504:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002506:	4313      	orrs	r3, r2
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	4313      	orrs	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800251e:	2001      	movs	r0, #1
 8002520:	f7ff fd5c 	bl	8001fdc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	f64f 7341 	movw	r3, #65345	; 0xff41
 800253a:	4013      	ands	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002542:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800254a:	2a00      	cmp	r2, #0
 800254c:	d101      	bne.n	8002552 <ETH_SetMACConfig+0xee>
 800254e:	2280      	movs	r2, #128	; 0x80
 8002550:	e000      	b.n	8002554 <ETH_SetMACConfig+0xf0>
 8002552:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002554:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800255a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002562:	2a01      	cmp	r2, #1
 8002564:	d101      	bne.n	800256a <ETH_SetMACConfig+0x106>
 8002566:	2208      	movs	r2, #8
 8002568:	e000      	b.n	800256c <ETH_SetMACConfig+0x108>
 800256a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800256c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002574:	2a01      	cmp	r2, #1
 8002576:	d101      	bne.n	800257c <ETH_SetMACConfig+0x118>
 8002578:	2204      	movs	r2, #4
 800257a:	e000      	b.n	800257e <ETH_SetMACConfig+0x11a>
 800257c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800257e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002586:	2a01      	cmp	r2, #1
 8002588:	d101      	bne.n	800258e <ETH_SetMACConfig+0x12a>
 800258a:	2202      	movs	r2, #2
 800258c:	e000      	b.n	8002590 <ETH_SetMACConfig+0x12c>
 800258e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002590:	4313      	orrs	r3, r2
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	4313      	orrs	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025a8:	2001      	movs	r0, #1
 80025aa:	f7ff fd17 	bl	8001fdc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	619a      	str	r2, [r3, #24]
}
 80025b6:	bf00      	nop
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	ff20810f 	.word	0xff20810f

080025c4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	4b3d      	ldr	r3, [pc, #244]	; (80026d4 <ETH_SetDMAConfig+0x110>)
 80025de:	4013      	ands	r3, r2
 80025e0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	7b1b      	ldrb	r3, [r3, #12]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d102      	bne.n	80025f0 <ETH_SetDMAConfig+0x2c>
 80025ea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80025ee:	e000      	b.n	80025f2 <ETH_SetDMAConfig+0x2e>
 80025f0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	7b5b      	ldrb	r3, [r3, #13]
 80025f6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80025f8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	7f52      	ldrb	r2, [r2, #29]
 80025fe:	2a00      	cmp	r2, #0
 8002600:	d102      	bne.n	8002608 <ETH_SetDMAConfig+0x44>
 8002602:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002606:	e000      	b.n	800260a <ETH_SetDMAConfig+0x46>
 8002608:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800260a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	7b9b      	ldrb	r3, [r3, #14]
 8002610:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002612:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002618:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	7f1b      	ldrb	r3, [r3, #28]
 800261e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002620:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	7f9b      	ldrb	r3, [r3, #30]
 8002626:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002628:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800262e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002636:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002638:	4313      	orrs	r3, r2
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	4313      	orrs	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002648:	461a      	mov	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800265a:	2001      	movs	r0, #1
 800265c:	f7ff fcbe 	bl	8001fdc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002668:	461a      	mov	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	791b      	ldrb	r3, [r3, #4]
 8002672:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002678:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800267e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002684:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800268c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800268e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002694:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002696:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800269c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6812      	ldr	r2, [r2, #0]
 80026a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026aa:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026b8:	2001      	movs	r0, #1
 80026ba:	f7ff fc8f 	bl	8001fdc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026c6:	461a      	mov	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6013      	str	r3, [r2, #0]
}
 80026cc:	bf00      	nop
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	f8de3f23 	.word	0xf8de3f23

080026d8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b0a6      	sub	sp, #152	; 0x98
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80026e0:	2301      	movs	r3, #1
 80026e2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80026e6:	2301      	movs	r3, #1
 80026e8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80026ec:	2300      	movs	r3, #0
 80026ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80026f0:	2300      	movs	r3, #0
 80026f2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80026f6:	2301      	movs	r3, #1
 80026f8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80026fc:	2300      	movs	r3, #0
 80026fe:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002702:	2301      	movs	r3, #1
 8002704:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002708:	2300      	movs	r3, #0
 800270a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800270e:	2300      	movs	r3, #0
 8002710:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002714:	2300      	movs	r3, #0
 8002716:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002718:	2300      	movs	r3, #0
 800271a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800271e:	2300      	movs	r3, #0
 8002720:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002722:	2300      	movs	r3, #0
 8002724:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002728:	2300      	movs	r3, #0
 800272a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800272e:	2300      	movs	r3, #0
 8002730:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002734:	2300      	movs	r3, #0
 8002736:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800273a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800273e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002740:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002744:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002746:	2300      	movs	r3, #0
 8002748:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800274c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002750:	4619      	mov	r1, r3
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f7ff fe86 	bl	8002464 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002758:	2301      	movs	r3, #1
 800275a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800275c:	2301      	movs	r3, #1
 800275e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002760:	2301      	movs	r3, #1
 8002762:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002766:	2301      	movs	r3, #1
 8002768:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800276a:	2300      	movs	r3, #0
 800276c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800276e:	2300      	movs	r3, #0
 8002770:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002774:	2300      	movs	r3, #0
 8002776:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800277a:	2300      	movs	r3, #0
 800277c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800277e:	2301      	movs	r3, #1
 8002780:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002784:	2301      	movs	r3, #1
 8002786:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002788:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800278c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800278e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002792:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002794:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002798:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800279a:	2301      	movs	r3, #1
 800279c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80027a4:	2300      	movs	r3, #0
 80027a6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80027a8:	f107 0308 	add.w	r3, r7, #8
 80027ac:	4619      	mov	r1, r3
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7ff ff08 	bl	80025c4 <ETH_SetDMAConfig>
}
 80027b4:	bf00      	nop
 80027b6:	3798      	adds	r7, #152	; 0x98
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80027bc:	b480      	push	{r7}
 80027be:	b087      	sub	sp, #28
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3305      	adds	r3, #5
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	021b      	lsls	r3, r3, #8
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	3204      	adds	r2, #4
 80027d4:	7812      	ldrb	r2, [r2, #0]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80027da:	68ba      	ldr	r2, [r7, #8]
 80027dc:	4b11      	ldr	r3, [pc, #68]	; (8002824 <ETH_MACAddressConfig+0x68>)
 80027de:	4413      	add	r3, r2
 80027e0:	461a      	mov	r2, r3
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3303      	adds	r3, #3
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	061a      	lsls	r2, r3, #24
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	3302      	adds	r3, #2
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	041b      	lsls	r3, r3, #16
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3301      	adds	r3, #1
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	021b      	lsls	r3, r3, #8
 8002800:	4313      	orrs	r3, r2
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	7812      	ldrb	r2, [r2, #0]
 8002806:	4313      	orrs	r3, r2
 8002808:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	4b06      	ldr	r3, [pc, #24]	; (8002828 <ETH_MACAddressConfig+0x6c>)
 800280e:	4413      	add	r3, r2
 8002810:	461a      	mov	r2, r3
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	6013      	str	r3, [r2, #0]
}
 8002816:	bf00      	nop
 8002818:	371c      	adds	r7, #28
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	40028040 	.word	0x40028040
 8002828:	40028044 	.word	0x40028044

0800282c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002834:	2300      	movs	r3, #0
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	e03e      	b.n	80028b8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68d9      	ldr	r1, [r3, #12]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	4613      	mov	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	440b      	add	r3, r1
 800284a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2200      	movs	r2, #0
 8002856:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	2200      	movs	r2, #0
 800285c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	2200      	movs	r2, #0
 8002862:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002864:	68b9      	ldr	r1, [r7, #8]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	3206      	adds	r2, #6
 800286c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2b02      	cmp	r3, #2
 8002880:	d80c      	bhi.n	800289c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68d9      	ldr	r1, [r3, #12]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	4613      	mov	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	440b      	add	r3, r1
 8002894:	461a      	mov	r2, r3
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	60da      	str	r2, [r3, #12]
 800289a:	e004      	b.n	80028a6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	461a      	mov	r2, r3
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	3301      	adds	r3, #1
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2b03      	cmp	r3, #3
 80028bc:	d9bd      	bls.n	800283a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68da      	ldr	r2, [r3, #12]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028d0:	611a      	str	r2, [r3, #16]
}
 80028d2:	bf00      	nop
 80028d4:	3714      	adds	r7, #20
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80028de:	b480      	push	{r7}
 80028e0:	b085      	sub	sp, #20
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80028e6:	2300      	movs	r3, #0
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	e046      	b.n	800297a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6919      	ldr	r1, [r3, #16]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	440b      	add	r3, r1
 80028fc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2200      	movs	r2, #0
 8002908:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	2200      	movs	r2, #0
 800290e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	2200      	movs	r2, #0
 8002914:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	2200      	movs	r2, #0
 800291a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2200      	movs	r2, #0
 8002920:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002928:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002930:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800293e:	68b9      	ldr	r1, [r7, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	3212      	adds	r2, #18
 8002946:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2b02      	cmp	r3, #2
 800294e:	d80c      	bhi.n	800296a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6919      	ldr	r1, [r3, #16]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	1c5a      	adds	r2, r3, #1
 8002958:	4613      	mov	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	440b      	add	r3, r1
 8002962:	461a      	mov	r2, r3
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	60da      	str	r2, [r3, #12]
 8002968:	e004      	b.n	8002974 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	461a      	mov	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	3301      	adds	r3, #1
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2b03      	cmp	r3, #3
 800297e:	d9b5      	bls.n	80028ec <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691a      	ldr	r2, [r3, #16]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029aa:	60da      	str	r2, [r3, #12]
}
 80029ac:	bf00      	nop
 80029ae:	3714      	adds	r7, #20
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b089      	sub	sp, #36	; 0x24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80029c2:	2300      	movs	r3, #0
 80029c4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80029c6:	2300      	movs	r3, #0
 80029c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80029ca:	2300      	movs	r3, #0
 80029cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80029ce:	2300      	movs	r3, #0
 80029d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80029d2:	2300      	movs	r3, #0
 80029d4:	61fb      	str	r3, [r7, #28]
 80029d6:	e175      	b.n	8002cc4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80029d8:	2201      	movs	r2, #1
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	4013      	ands	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	f040 8164 	bne.w	8002cbe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d005      	beq.n	8002a0e <HAL_GPIO_Init+0x56>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d130      	bne.n	8002a70 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	2203      	movs	r2, #3
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4013      	ands	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	68da      	ldr	r2, [r3, #12]
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a44:	2201      	movs	r2, #1
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4013      	ands	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	091b      	lsrs	r3, r3, #4
 8002a5a:	f003 0201 	and.w	r2, r3, #1
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f003 0303 	and.w	r3, r3, #3
 8002a78:	2b03      	cmp	r3, #3
 8002a7a:	d017      	beq.n	8002aac <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	2203      	movs	r2, #3
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4013      	ands	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d123      	bne.n	8002b00 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	08da      	lsrs	r2, r3, #3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3208      	adds	r2, #8
 8002ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	220f      	movs	r2, #15
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	691a      	ldr	r2, [r3, #16]
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	08da      	lsrs	r2, r3, #3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	3208      	adds	r2, #8
 8002afa:	69b9      	ldr	r1, [r7, #24]
 8002afc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	2203      	movs	r2, #3
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	43db      	mvns	r3, r3
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4013      	ands	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f003 0203 	and.w	r2, r3, #3
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 80be 	beq.w	8002cbe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b42:	4b66      	ldr	r3, [pc, #408]	; (8002cdc <HAL_GPIO_Init+0x324>)
 8002b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b46:	4a65      	ldr	r2, [pc, #404]	; (8002cdc <HAL_GPIO_Init+0x324>)
 8002b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b4e:	4b63      	ldr	r3, [pc, #396]	; (8002cdc <HAL_GPIO_Init+0x324>)
 8002b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b5a:	4a61      	ldr	r2, [pc, #388]	; (8002ce0 <HAL_GPIO_Init+0x328>)
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	089b      	lsrs	r3, r3, #2
 8002b60:	3302      	adds	r3, #2
 8002b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	220f      	movs	r2, #15
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	43db      	mvns	r3, r3
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a58      	ldr	r2, [pc, #352]	; (8002ce4 <HAL_GPIO_Init+0x32c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d037      	beq.n	8002bf6 <HAL_GPIO_Init+0x23e>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a57      	ldr	r2, [pc, #348]	; (8002ce8 <HAL_GPIO_Init+0x330>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d031      	beq.n	8002bf2 <HAL_GPIO_Init+0x23a>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a56      	ldr	r2, [pc, #344]	; (8002cec <HAL_GPIO_Init+0x334>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d02b      	beq.n	8002bee <HAL_GPIO_Init+0x236>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a55      	ldr	r2, [pc, #340]	; (8002cf0 <HAL_GPIO_Init+0x338>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d025      	beq.n	8002bea <HAL_GPIO_Init+0x232>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a54      	ldr	r2, [pc, #336]	; (8002cf4 <HAL_GPIO_Init+0x33c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d01f      	beq.n	8002be6 <HAL_GPIO_Init+0x22e>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a53      	ldr	r2, [pc, #332]	; (8002cf8 <HAL_GPIO_Init+0x340>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d019      	beq.n	8002be2 <HAL_GPIO_Init+0x22a>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a52      	ldr	r2, [pc, #328]	; (8002cfc <HAL_GPIO_Init+0x344>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d013      	beq.n	8002bde <HAL_GPIO_Init+0x226>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a51      	ldr	r2, [pc, #324]	; (8002d00 <HAL_GPIO_Init+0x348>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d00d      	beq.n	8002bda <HAL_GPIO_Init+0x222>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a50      	ldr	r2, [pc, #320]	; (8002d04 <HAL_GPIO_Init+0x34c>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d007      	beq.n	8002bd6 <HAL_GPIO_Init+0x21e>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a4f      	ldr	r2, [pc, #316]	; (8002d08 <HAL_GPIO_Init+0x350>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d101      	bne.n	8002bd2 <HAL_GPIO_Init+0x21a>
 8002bce:	2309      	movs	r3, #9
 8002bd0:	e012      	b.n	8002bf8 <HAL_GPIO_Init+0x240>
 8002bd2:	230a      	movs	r3, #10
 8002bd4:	e010      	b.n	8002bf8 <HAL_GPIO_Init+0x240>
 8002bd6:	2308      	movs	r3, #8
 8002bd8:	e00e      	b.n	8002bf8 <HAL_GPIO_Init+0x240>
 8002bda:	2307      	movs	r3, #7
 8002bdc:	e00c      	b.n	8002bf8 <HAL_GPIO_Init+0x240>
 8002bde:	2306      	movs	r3, #6
 8002be0:	e00a      	b.n	8002bf8 <HAL_GPIO_Init+0x240>
 8002be2:	2305      	movs	r3, #5
 8002be4:	e008      	b.n	8002bf8 <HAL_GPIO_Init+0x240>
 8002be6:	2304      	movs	r3, #4
 8002be8:	e006      	b.n	8002bf8 <HAL_GPIO_Init+0x240>
 8002bea:	2303      	movs	r3, #3
 8002bec:	e004      	b.n	8002bf8 <HAL_GPIO_Init+0x240>
 8002bee:	2302      	movs	r3, #2
 8002bf0:	e002      	b.n	8002bf8 <HAL_GPIO_Init+0x240>
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e000      	b.n	8002bf8 <HAL_GPIO_Init+0x240>
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	69fa      	ldr	r2, [r7, #28]
 8002bfa:	f002 0203 	and.w	r2, r2, #3
 8002bfe:	0092      	lsls	r2, r2, #2
 8002c00:	4093      	lsls	r3, r2
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c08:	4935      	ldr	r1, [pc, #212]	; (8002ce0 <HAL_GPIO_Init+0x328>)
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	089b      	lsrs	r3, r3, #2
 8002c0e:	3302      	adds	r3, #2
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c16:	4b3d      	ldr	r3, [pc, #244]	; (8002d0c <HAL_GPIO_Init+0x354>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4013      	ands	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c3a:	4a34      	ldr	r2, [pc, #208]	; (8002d0c <HAL_GPIO_Init+0x354>)
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c40:	4b32      	ldr	r3, [pc, #200]	; (8002d0c <HAL_GPIO_Init+0x354>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c64:	4a29      	ldr	r2, [pc, #164]	; (8002d0c <HAL_GPIO_Init+0x354>)
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c6a:	4b28      	ldr	r3, [pc, #160]	; (8002d0c <HAL_GPIO_Init+0x354>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	43db      	mvns	r3, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4013      	ands	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c8e:	4a1f      	ldr	r2, [pc, #124]	; (8002d0c <HAL_GPIO_Init+0x354>)
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c94:	4b1d      	ldr	r3, [pc, #116]	; (8002d0c <HAL_GPIO_Init+0x354>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d003      	beq.n	8002cb8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cb8:	4a14      	ldr	r2, [pc, #80]	; (8002d0c <HAL_GPIO_Init+0x354>)
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	61fb      	str	r3, [r7, #28]
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	2b0f      	cmp	r3, #15
 8002cc8:	f67f ae86 	bls.w	80029d8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ccc:	bf00      	nop
 8002cce:	bf00      	nop
 8002cd0:	3724      	adds	r7, #36	; 0x24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	40013800 	.word	0x40013800
 8002ce4:	40020000 	.word	0x40020000
 8002ce8:	40020400 	.word	0x40020400
 8002cec:	40020800 	.word	0x40020800
 8002cf0:	40020c00 	.word	0x40020c00
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	40021400 	.word	0x40021400
 8002cfc:	40021800 	.word	0x40021800
 8002d00:	40021c00 	.word	0x40021c00
 8002d04:	40022000 	.word	0x40022000
 8002d08:	40022400 	.word	0x40022400
 8002d0c:	40013c00 	.word	0x40013c00

08002d10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	807b      	strh	r3, [r7, #2]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d20:	787b      	ldrb	r3, [r7, #1]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d26:	887a      	ldrh	r2, [r7, #2]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002d2c:	e003      	b.n	8002d36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002d2e:	887b      	ldrh	r3, [r7, #2]
 8002d30:	041a      	lsls	r2, r3, #16
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	619a      	str	r2, [r3, #24]
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d44:	b08f      	sub	sp, #60	; 0x3c
 8002d46:	af0a      	add	r7, sp, #40	; 0x28
 8002d48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e116      	b.n	8002f82 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d106      	bne.n	8002d74 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7fe fff0 	bl	8001d54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2203      	movs	r2, #3
 8002d78:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d102      	bne.n	8002d8e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f002 faf0 	bl	8005378 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	603b      	str	r3, [r7, #0]
 8002d9e:	687e      	ldr	r6, [r7, #4]
 8002da0:	466d      	mov	r5, sp
 8002da2:	f106 0410 	add.w	r4, r6, #16
 8002da6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002da8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002daa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002db2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002db6:	1d33      	adds	r3, r6, #4
 8002db8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dba:	6838      	ldr	r0, [r7, #0]
 8002dbc:	f002 fa84 	bl	80052c8 <USB_CoreInit>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d005      	beq.n	8002dd2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2202      	movs	r2, #2
 8002dca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e0d7      	b.n	8002f82 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f002 fade 	bl	800539a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dde:	2300      	movs	r3, #0
 8002de0:	73fb      	strb	r3, [r7, #15]
 8002de2:	e04a      	b.n	8002e7a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002de4:	7bfa      	ldrb	r2, [r7, #15]
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	4613      	mov	r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	4413      	add	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	333d      	adds	r3, #61	; 0x3d
 8002df4:	2201      	movs	r2, #1
 8002df6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002df8:	7bfa      	ldrb	r2, [r7, #15]
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	4413      	add	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	333c      	adds	r3, #60	; 0x3c
 8002e08:	7bfa      	ldrb	r2, [r7, #15]
 8002e0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e0c:	7bfa      	ldrb	r2, [r7, #15]
 8002e0e:	7bfb      	ldrb	r3, [r7, #15]
 8002e10:	b298      	uxth	r0, r3
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	4613      	mov	r3, r2
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	4413      	add	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	440b      	add	r3, r1
 8002e1e:	3344      	adds	r3, #68	; 0x44
 8002e20:	4602      	mov	r2, r0
 8002e22:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e24:	7bfa      	ldrb	r2, [r7, #15]
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	3340      	adds	r3, #64	; 0x40
 8002e34:	2200      	movs	r2, #0
 8002e36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e38:	7bfa      	ldrb	r2, [r7, #15]
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	4413      	add	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	3348      	adds	r3, #72	; 0x48
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e4c:	7bfa      	ldrb	r2, [r7, #15]
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	4613      	mov	r3, r2
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	4413      	add	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	334c      	adds	r3, #76	; 0x4c
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e60:	7bfa      	ldrb	r2, [r7, #15]
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4413      	add	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	3354      	adds	r3, #84	; 0x54
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e74:	7bfb      	ldrb	r3, [r7, #15]
 8002e76:	3301      	adds	r3, #1
 8002e78:	73fb      	strb	r3, [r7, #15]
 8002e7a:	7bfa      	ldrb	r2, [r7, #15]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d3af      	bcc.n	8002de4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e84:	2300      	movs	r3, #0
 8002e86:	73fb      	strb	r3, [r7, #15]
 8002e88:	e044      	b.n	8002f14 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e8a:	7bfa      	ldrb	r2, [r7, #15]
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	4413      	add	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ea0:	7bfa      	ldrb	r2, [r7, #15]
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002eb2:	7bfa      	ldrb	r2, [r7, #15]
 8002eb4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002eb6:	7bfa      	ldrb	r2, [r7, #15]
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	4413      	add	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	440b      	add	r3, r1
 8002ec4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002ec8:	2200      	movs	r2, #0
 8002eca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ecc:	7bfa      	ldrb	r2, [r7, #15]
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	4413      	add	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ee2:	7bfa      	ldrb	r2, [r7, #15]
 8002ee4:	6879      	ldr	r1, [r7, #4]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	4413      	add	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	440b      	add	r3, r1
 8002ef0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ef8:	7bfa      	ldrb	r2, [r7, #15]
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	4613      	mov	r3, r2
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	4413      	add	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
 8002f10:	3301      	adds	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
 8002f14:	7bfa      	ldrb	r2, [r7, #15]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d3b5      	bcc.n	8002e8a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	603b      	str	r3, [r7, #0]
 8002f24:	687e      	ldr	r6, [r7, #4]
 8002f26:	466d      	mov	r5, sp
 8002f28:	f106 0410 	add.w	r4, r6, #16
 8002f2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f34:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f38:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f3c:	1d33      	adds	r3, r6, #4
 8002f3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f40:	6838      	ldr	r0, [r7, #0]
 8002f42:	f002 fa77 	bl	8005434 <USB_DevInit>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d005      	beq.n	8002f58 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e014      	b.n	8002f82 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d102      	bne.n	8002f76 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f80b 	bl	8002f8c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f002 fc35 	bl	80057ea <USB_DevDisconnect>

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002f8c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002fba:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <HAL_PCDEx_ActivateLPM+0x44>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	10000003 	.word	0x10000003

08002fd4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fd8:	4b05      	ldr	r3, [pc, #20]	; (8002ff0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a04      	ldr	r2, [pc, #16]	; (8002ff0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe2:	6013      	str	r3, [r2, #0]
}
 8002fe4:	bf00      	nop
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	40007000 	.word	0x40007000

08002ff4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ffe:	4b23      	ldr	r3, [pc, #140]	; (800308c <HAL_PWREx_EnableOverDrive+0x98>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	4a22      	ldr	r2, [pc, #136]	; (800308c <HAL_PWREx_EnableOverDrive+0x98>)
 8003004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003008:	6413      	str	r3, [r2, #64]	; 0x40
 800300a:	4b20      	ldr	r3, [pc, #128]	; (800308c <HAL_PWREx_EnableOverDrive+0x98>)
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003012:	603b      	str	r3, [r7, #0]
 8003014:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003016:	4b1e      	ldr	r3, [pc, #120]	; (8003090 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a1d      	ldr	r2, [pc, #116]	; (8003090 <HAL_PWREx_EnableOverDrive+0x9c>)
 800301c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003020:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003022:	f7fe ffcf 	bl	8001fc4 <HAL_GetTick>
 8003026:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003028:	e009      	b.n	800303e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800302a:	f7fe ffcb 	bl	8001fc4 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003038:	d901      	bls.n	800303e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e022      	b.n	8003084 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800303e:	4b14      	ldr	r3, [pc, #80]	; (8003090 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800304a:	d1ee      	bne.n	800302a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800304c:	4b10      	ldr	r3, [pc, #64]	; (8003090 <HAL_PWREx_EnableOverDrive+0x9c>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a0f      	ldr	r2, [pc, #60]	; (8003090 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003052:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003056:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003058:	f7fe ffb4 	bl	8001fc4 <HAL_GetTick>
 800305c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800305e:	e009      	b.n	8003074 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003060:	f7fe ffb0 	bl	8001fc4 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800306e:	d901      	bls.n	8003074 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e007      	b.n	8003084 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003074:	4b06      	ldr	r3, [pc, #24]	; (8003090 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003080:	d1ee      	bne.n	8003060 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40023800 	.word	0x40023800
 8003090:	40007000 	.word	0x40007000

08003094 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800309c:	2300      	movs	r3, #0
 800309e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e29b      	b.n	80035e2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 8087 	beq.w	80031c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030b8:	4b96      	ldr	r3, [pc, #600]	; (8003314 <HAL_RCC_OscConfig+0x280>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 030c 	and.w	r3, r3, #12
 80030c0:	2b04      	cmp	r3, #4
 80030c2:	d00c      	beq.n	80030de <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030c4:	4b93      	ldr	r3, [pc, #588]	; (8003314 <HAL_RCC_OscConfig+0x280>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 030c 	and.w	r3, r3, #12
 80030cc:	2b08      	cmp	r3, #8
 80030ce:	d112      	bne.n	80030f6 <HAL_RCC_OscConfig+0x62>
 80030d0:	4b90      	ldr	r3, [pc, #576]	; (8003314 <HAL_RCC_OscConfig+0x280>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030dc:	d10b      	bne.n	80030f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030de:	4b8d      	ldr	r3, [pc, #564]	; (8003314 <HAL_RCC_OscConfig+0x280>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d06c      	beq.n	80031c4 <HAL_RCC_OscConfig+0x130>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d168      	bne.n	80031c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e275      	b.n	80035e2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030fe:	d106      	bne.n	800310e <HAL_RCC_OscConfig+0x7a>
 8003100:	4b84      	ldr	r3, [pc, #528]	; (8003314 <HAL_RCC_OscConfig+0x280>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a83      	ldr	r2, [pc, #524]	; (8003314 <HAL_RCC_OscConfig+0x280>)
 8003106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800310a:	6013      	str	r3, [r2, #0]
 800310c:	e02e      	b.n	800316c <HAL_RCC_OscConfig+0xd8>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10c      	bne.n	8003130 <HAL_RCC_OscConfig+0x9c>
 8003116:	4b7f      	ldr	r3, [pc, #508]	; (8003314 <HAL_RCC_OscConfig+0x280>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a7e      	ldr	r2, [pc, #504]	; (8003314 <HAL_RCC_OscConfig+0x280>)
 800311c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	4b7c      	ldr	r3, [pc, #496]	; (8003314 <HAL_RCC_OscConfig+0x280>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a7b      	ldr	r2, [pc, #492]	; (8003314 <HAL_RCC_OscConfig+0x280>)
 8003128:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	e01d      	b.n	800316c <HAL_RCC_OscConfig+0xd8>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003138:	d10c      	bne.n	8003154 <HAL_RCC_OscConfig+0xc0>
 800313a:	4b76      	ldr	r3, [pc, #472]	; (8003314 <HAL_RCC_OscConfig+0x280>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a75      	ldr	r2, [pc, #468]	; (8003314 <HAL_RCC_OscConfig+0x280>)
 8003140:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003144:	6013      	str	r3, [r2, #0]
 8003146:	4b73      	ldr	r3, [pc, #460]	; (8003314 <HAL_RCC_OscConfig+0x280>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a72      	ldr	r2, [pc, #456]	; (8003314 <HAL_RCC_OscConfig+0x280>)
 800314c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003150:	6013      	str	r3, [r2, #0]
 8003152:	e00b      	b.n	800316c <HAL_RCC_OscConfig+0xd8>
 8003154:	4b6f      	ldr	r3, [pc, #444]	; (8003314 <HAL_RCC_OscConfig+0x280>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a6e      	ldr	r2, [pc, #440]	; (8003314 <HAL_RCC_OscConfig+0x280>)
 800315a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800315e:	6013      	str	r3, [r2, #0]
 8003160:	4b6c      	ldr	r3, [pc, #432]	; (8003314 <HAL_RCC_OscConfig+0x280>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a6b      	ldr	r2, [pc, #428]	; (8003314 <HAL_RCC_OscConfig+0x280>)
 8003166:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800316a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d013      	beq.n	800319c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003174:	f7fe ff26 	bl	8001fc4 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800317c:	f7fe ff22 	bl	8001fc4 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b64      	cmp	r3, #100	; 0x64
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e229      	b.n	80035e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318e:	4b61      	ldr	r3, [pc, #388]	; (8003314 <HAL_RCC_OscConfig+0x280>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0f0      	beq.n	800317c <HAL_RCC_OscConfig+0xe8>
 800319a:	e014      	b.n	80031c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319c:	f7fe ff12 	bl	8001fc4 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031a4:	f7fe ff0e 	bl	8001fc4 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b64      	cmp	r3, #100	; 0x64
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e215      	b.n	80035e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031b6:	4b57      	ldr	r3, [pc, #348]	; (8003314 <HAL_RCC_OscConfig+0x280>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f0      	bne.n	80031a4 <HAL_RCC_OscConfig+0x110>
 80031c2:	e000      	b.n	80031c6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d069      	beq.n	80032a6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031d2:	4b50      	ldr	r3, [pc, #320]	; (8003314 <HAL_RCC_OscConfig+0x280>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 030c 	and.w	r3, r3, #12
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00b      	beq.n	80031f6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031de:	4b4d      	ldr	r3, [pc, #308]	; (8003314 <HAL_RCC_OscConfig+0x280>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 030c 	and.w	r3, r3, #12
 80031e6:	2b08      	cmp	r3, #8
 80031e8:	d11c      	bne.n	8003224 <HAL_RCC_OscConfig+0x190>
 80031ea:	4b4a      	ldr	r3, [pc, #296]	; (8003314 <HAL_RCC_OscConfig+0x280>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d116      	bne.n	8003224 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031f6:	4b47      	ldr	r3, [pc, #284]	; (8003314 <HAL_RCC_OscConfig+0x280>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d005      	beq.n	800320e <HAL_RCC_OscConfig+0x17a>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d001      	beq.n	800320e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e1e9      	b.n	80035e2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800320e:	4b41      	ldr	r3, [pc, #260]	; (8003314 <HAL_RCC_OscConfig+0x280>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	493d      	ldr	r1, [pc, #244]	; (8003314 <HAL_RCC_OscConfig+0x280>)
 800321e:	4313      	orrs	r3, r2
 8003220:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003222:	e040      	b.n	80032a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d023      	beq.n	8003274 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800322c:	4b39      	ldr	r3, [pc, #228]	; (8003314 <HAL_RCC_OscConfig+0x280>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a38      	ldr	r2, [pc, #224]	; (8003314 <HAL_RCC_OscConfig+0x280>)
 8003232:	f043 0301 	orr.w	r3, r3, #1
 8003236:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003238:	f7fe fec4 	bl	8001fc4 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003240:	f7fe fec0 	bl	8001fc4 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e1c7      	b.n	80035e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003252:	4b30      	ldr	r3, [pc, #192]	; (8003314 <HAL_RCC_OscConfig+0x280>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0f0      	beq.n	8003240 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800325e:	4b2d      	ldr	r3, [pc, #180]	; (8003314 <HAL_RCC_OscConfig+0x280>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	4929      	ldr	r1, [pc, #164]	; (8003314 <HAL_RCC_OscConfig+0x280>)
 800326e:	4313      	orrs	r3, r2
 8003270:	600b      	str	r3, [r1, #0]
 8003272:	e018      	b.n	80032a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003274:	4b27      	ldr	r3, [pc, #156]	; (8003314 <HAL_RCC_OscConfig+0x280>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a26      	ldr	r2, [pc, #152]	; (8003314 <HAL_RCC_OscConfig+0x280>)
 800327a:	f023 0301 	bic.w	r3, r3, #1
 800327e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003280:	f7fe fea0 	bl	8001fc4 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003288:	f7fe fe9c 	bl	8001fc4 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e1a3      	b.n	80035e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800329a:	4b1e      	ldr	r3, [pc, #120]	; (8003314 <HAL_RCC_OscConfig+0x280>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f0      	bne.n	8003288 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0308 	and.w	r3, r3, #8
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d038      	beq.n	8003324 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d019      	beq.n	80032ee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ba:	4b16      	ldr	r3, [pc, #88]	; (8003314 <HAL_RCC_OscConfig+0x280>)
 80032bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032be:	4a15      	ldr	r2, [pc, #84]	; (8003314 <HAL_RCC_OscConfig+0x280>)
 80032c0:	f043 0301 	orr.w	r3, r3, #1
 80032c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c6:	f7fe fe7d 	bl	8001fc4 <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ce:	f7fe fe79 	bl	8001fc4 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e180      	b.n	80035e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032e0:	4b0c      	ldr	r3, [pc, #48]	; (8003314 <HAL_RCC_OscConfig+0x280>)
 80032e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0f0      	beq.n	80032ce <HAL_RCC_OscConfig+0x23a>
 80032ec:	e01a      	b.n	8003324 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032ee:	4b09      	ldr	r3, [pc, #36]	; (8003314 <HAL_RCC_OscConfig+0x280>)
 80032f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f2:	4a08      	ldr	r2, [pc, #32]	; (8003314 <HAL_RCC_OscConfig+0x280>)
 80032f4:	f023 0301 	bic.w	r3, r3, #1
 80032f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032fa:	f7fe fe63 	bl	8001fc4 <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003300:	e00a      	b.n	8003318 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003302:	f7fe fe5f 	bl	8001fc4 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d903      	bls.n	8003318 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e166      	b.n	80035e2 <HAL_RCC_OscConfig+0x54e>
 8003314:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003318:	4b92      	ldr	r3, [pc, #584]	; (8003564 <HAL_RCC_OscConfig+0x4d0>)
 800331a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1ee      	bne.n	8003302 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 80a4 	beq.w	800347a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003332:	4b8c      	ldr	r3, [pc, #560]	; (8003564 <HAL_RCC_OscConfig+0x4d0>)
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10d      	bne.n	800335a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800333e:	4b89      	ldr	r3, [pc, #548]	; (8003564 <HAL_RCC_OscConfig+0x4d0>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	4a88      	ldr	r2, [pc, #544]	; (8003564 <HAL_RCC_OscConfig+0x4d0>)
 8003344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003348:	6413      	str	r3, [r2, #64]	; 0x40
 800334a:	4b86      	ldr	r3, [pc, #536]	; (8003564 <HAL_RCC_OscConfig+0x4d0>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003352:	60bb      	str	r3, [r7, #8]
 8003354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003356:	2301      	movs	r3, #1
 8003358:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800335a:	4b83      	ldr	r3, [pc, #524]	; (8003568 <HAL_RCC_OscConfig+0x4d4>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003362:	2b00      	cmp	r3, #0
 8003364:	d118      	bne.n	8003398 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003366:	4b80      	ldr	r3, [pc, #512]	; (8003568 <HAL_RCC_OscConfig+0x4d4>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a7f      	ldr	r2, [pc, #508]	; (8003568 <HAL_RCC_OscConfig+0x4d4>)
 800336c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003370:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003372:	f7fe fe27 	bl	8001fc4 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800337a:	f7fe fe23 	bl	8001fc4 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b64      	cmp	r3, #100	; 0x64
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e12a      	b.n	80035e2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800338c:	4b76      	ldr	r3, [pc, #472]	; (8003568 <HAL_RCC_OscConfig+0x4d4>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0f0      	beq.n	800337a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d106      	bne.n	80033ae <HAL_RCC_OscConfig+0x31a>
 80033a0:	4b70      	ldr	r3, [pc, #448]	; (8003564 <HAL_RCC_OscConfig+0x4d0>)
 80033a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a4:	4a6f      	ldr	r2, [pc, #444]	; (8003564 <HAL_RCC_OscConfig+0x4d0>)
 80033a6:	f043 0301 	orr.w	r3, r3, #1
 80033aa:	6713      	str	r3, [r2, #112]	; 0x70
 80033ac:	e02d      	b.n	800340a <HAL_RCC_OscConfig+0x376>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10c      	bne.n	80033d0 <HAL_RCC_OscConfig+0x33c>
 80033b6:	4b6b      	ldr	r3, [pc, #428]	; (8003564 <HAL_RCC_OscConfig+0x4d0>)
 80033b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ba:	4a6a      	ldr	r2, [pc, #424]	; (8003564 <HAL_RCC_OscConfig+0x4d0>)
 80033bc:	f023 0301 	bic.w	r3, r3, #1
 80033c0:	6713      	str	r3, [r2, #112]	; 0x70
 80033c2:	4b68      	ldr	r3, [pc, #416]	; (8003564 <HAL_RCC_OscConfig+0x4d0>)
 80033c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c6:	4a67      	ldr	r2, [pc, #412]	; (8003564 <HAL_RCC_OscConfig+0x4d0>)
 80033c8:	f023 0304 	bic.w	r3, r3, #4
 80033cc:	6713      	str	r3, [r2, #112]	; 0x70
 80033ce:	e01c      	b.n	800340a <HAL_RCC_OscConfig+0x376>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2b05      	cmp	r3, #5
 80033d6:	d10c      	bne.n	80033f2 <HAL_RCC_OscConfig+0x35e>
 80033d8:	4b62      	ldr	r3, [pc, #392]	; (8003564 <HAL_RCC_OscConfig+0x4d0>)
 80033da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033dc:	4a61      	ldr	r2, [pc, #388]	; (8003564 <HAL_RCC_OscConfig+0x4d0>)
 80033de:	f043 0304 	orr.w	r3, r3, #4
 80033e2:	6713      	str	r3, [r2, #112]	; 0x70
 80033e4:	4b5f      	ldr	r3, [pc, #380]	; (8003564 <HAL_RCC_OscConfig+0x4d0>)
 80033e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e8:	4a5e      	ldr	r2, [pc, #376]	; (8003564 <HAL_RCC_OscConfig+0x4d0>)
 80033ea:	f043 0301 	orr.w	r3, r3, #1
 80033ee:	6713      	str	r3, [r2, #112]	; 0x70
 80033f0:	e00b      	b.n	800340a <HAL_RCC_OscConfig+0x376>
 80033f2:	4b5c      	ldr	r3, [pc, #368]	; (8003564 <HAL_RCC_OscConfig+0x4d0>)
 80033f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f6:	4a5b      	ldr	r2, [pc, #364]	; (8003564 <HAL_RCC_OscConfig+0x4d0>)
 80033f8:	f023 0301 	bic.w	r3, r3, #1
 80033fc:	6713      	str	r3, [r2, #112]	; 0x70
 80033fe:	4b59      	ldr	r3, [pc, #356]	; (8003564 <HAL_RCC_OscConfig+0x4d0>)
 8003400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003402:	4a58      	ldr	r2, [pc, #352]	; (8003564 <HAL_RCC_OscConfig+0x4d0>)
 8003404:	f023 0304 	bic.w	r3, r3, #4
 8003408:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d015      	beq.n	800343e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003412:	f7fe fdd7 	bl	8001fc4 <HAL_GetTick>
 8003416:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003418:	e00a      	b.n	8003430 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800341a:	f7fe fdd3 	bl	8001fc4 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	f241 3288 	movw	r2, #5000	; 0x1388
 8003428:	4293      	cmp	r3, r2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e0d8      	b.n	80035e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003430:	4b4c      	ldr	r3, [pc, #304]	; (8003564 <HAL_RCC_OscConfig+0x4d0>)
 8003432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0ee      	beq.n	800341a <HAL_RCC_OscConfig+0x386>
 800343c:	e014      	b.n	8003468 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343e:	f7fe fdc1 	bl	8001fc4 <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003444:	e00a      	b.n	800345c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003446:	f7fe fdbd 	bl	8001fc4 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	f241 3288 	movw	r2, #5000	; 0x1388
 8003454:	4293      	cmp	r3, r2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e0c2      	b.n	80035e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800345c:	4b41      	ldr	r3, [pc, #260]	; (8003564 <HAL_RCC_OscConfig+0x4d0>)
 800345e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1ee      	bne.n	8003446 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003468:	7dfb      	ldrb	r3, [r7, #23]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d105      	bne.n	800347a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800346e:	4b3d      	ldr	r3, [pc, #244]	; (8003564 <HAL_RCC_OscConfig+0x4d0>)
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	4a3c      	ldr	r2, [pc, #240]	; (8003564 <HAL_RCC_OscConfig+0x4d0>)
 8003474:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003478:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 80ae 	beq.w	80035e0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003484:	4b37      	ldr	r3, [pc, #220]	; (8003564 <HAL_RCC_OscConfig+0x4d0>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 030c 	and.w	r3, r3, #12
 800348c:	2b08      	cmp	r3, #8
 800348e:	d06d      	beq.n	800356c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	2b02      	cmp	r3, #2
 8003496:	d14b      	bne.n	8003530 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003498:	4b32      	ldr	r3, [pc, #200]	; (8003564 <HAL_RCC_OscConfig+0x4d0>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a31      	ldr	r2, [pc, #196]	; (8003564 <HAL_RCC_OscConfig+0x4d0>)
 800349e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a4:	f7fe fd8e 	bl	8001fc4 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ac:	f7fe fd8a 	bl	8001fc4 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e091      	b.n	80035e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034be:	4b29      	ldr	r3, [pc, #164]	; (8003564 <HAL_RCC_OscConfig+0x4d0>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69da      	ldr	r2, [r3, #28]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	019b      	lsls	r3, r3, #6
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e0:	085b      	lsrs	r3, r3, #1
 80034e2:	3b01      	subs	r3, #1
 80034e4:	041b      	lsls	r3, r3, #16
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ec:	061b      	lsls	r3, r3, #24
 80034ee:	431a      	orrs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f4:	071b      	lsls	r3, r3, #28
 80034f6:	491b      	ldr	r1, [pc, #108]	; (8003564 <HAL_RCC_OscConfig+0x4d0>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034fc:	4b19      	ldr	r3, [pc, #100]	; (8003564 <HAL_RCC_OscConfig+0x4d0>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a18      	ldr	r2, [pc, #96]	; (8003564 <HAL_RCC_OscConfig+0x4d0>)
 8003502:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003506:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003508:	f7fe fd5c 	bl	8001fc4 <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003510:	f7fe fd58 	bl	8001fc4 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e05f      	b.n	80035e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003522:	4b10      	ldr	r3, [pc, #64]	; (8003564 <HAL_RCC_OscConfig+0x4d0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d0f0      	beq.n	8003510 <HAL_RCC_OscConfig+0x47c>
 800352e:	e057      	b.n	80035e0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003530:	4b0c      	ldr	r3, [pc, #48]	; (8003564 <HAL_RCC_OscConfig+0x4d0>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a0b      	ldr	r2, [pc, #44]	; (8003564 <HAL_RCC_OscConfig+0x4d0>)
 8003536:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800353a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353c:	f7fe fd42 	bl	8001fc4 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003544:	f7fe fd3e 	bl	8001fc4 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e045      	b.n	80035e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003556:	4b03      	ldr	r3, [pc, #12]	; (8003564 <HAL_RCC_OscConfig+0x4d0>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1f0      	bne.n	8003544 <HAL_RCC_OscConfig+0x4b0>
 8003562:	e03d      	b.n	80035e0 <HAL_RCC_OscConfig+0x54c>
 8003564:	40023800 	.word	0x40023800
 8003568:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800356c:	4b1f      	ldr	r3, [pc, #124]	; (80035ec <HAL_RCC_OscConfig+0x558>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d030      	beq.n	80035dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003584:	429a      	cmp	r2, r3
 8003586:	d129      	bne.n	80035dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003592:	429a      	cmp	r2, r3
 8003594:	d122      	bne.n	80035dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800359c:	4013      	ands	r3, r2
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035a2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d119      	bne.n	80035dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b2:	085b      	lsrs	r3, r3, #1
 80035b4:	3b01      	subs	r3, #1
 80035b6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d10f      	bne.n	80035dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d107      	bne.n	80035dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035d8:	429a      	cmp	r2, r3
 80035da:	d001      	beq.n	80035e0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e000      	b.n	80035e2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	40023800 	.word	0x40023800

080035f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80035fa:	2300      	movs	r3, #0
 80035fc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e0d0      	b.n	80037aa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003608:	4b6a      	ldr	r3, [pc, #424]	; (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 030f 	and.w	r3, r3, #15
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	429a      	cmp	r2, r3
 8003614:	d910      	bls.n	8003638 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003616:	4b67      	ldr	r3, [pc, #412]	; (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f023 020f 	bic.w	r2, r3, #15
 800361e:	4965      	ldr	r1, [pc, #404]	; (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	4313      	orrs	r3, r2
 8003624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003626:	4b63      	ldr	r3, [pc, #396]	; (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	429a      	cmp	r2, r3
 8003632:	d001      	beq.n	8003638 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e0b8      	b.n	80037aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d020      	beq.n	8003686 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	d005      	beq.n	800365c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003650:	4b59      	ldr	r3, [pc, #356]	; (80037b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	4a58      	ldr	r2, [pc, #352]	; (80037b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003656:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800365a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0308 	and.w	r3, r3, #8
 8003664:	2b00      	cmp	r3, #0
 8003666:	d005      	beq.n	8003674 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003668:	4b53      	ldr	r3, [pc, #332]	; (80037b8 <HAL_RCC_ClockConfig+0x1c8>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	4a52      	ldr	r2, [pc, #328]	; (80037b8 <HAL_RCC_ClockConfig+0x1c8>)
 800366e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003672:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003674:	4b50      	ldr	r3, [pc, #320]	; (80037b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	494d      	ldr	r1, [pc, #308]	; (80037b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003682:	4313      	orrs	r3, r2
 8003684:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d040      	beq.n	8003714 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d107      	bne.n	80036aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800369a:	4b47      	ldr	r3, [pc, #284]	; (80037b8 <HAL_RCC_ClockConfig+0x1c8>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d115      	bne.n	80036d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e07f      	b.n	80037aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d107      	bne.n	80036c2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b2:	4b41      	ldr	r3, [pc, #260]	; (80037b8 <HAL_RCC_ClockConfig+0x1c8>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d109      	bne.n	80036d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e073      	b.n	80037aa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c2:	4b3d      	ldr	r3, [pc, #244]	; (80037b8 <HAL_RCC_ClockConfig+0x1c8>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e06b      	b.n	80037aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036d2:	4b39      	ldr	r3, [pc, #228]	; (80037b8 <HAL_RCC_ClockConfig+0x1c8>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f023 0203 	bic.w	r2, r3, #3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	4936      	ldr	r1, [pc, #216]	; (80037b8 <HAL_RCC_ClockConfig+0x1c8>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036e4:	f7fe fc6e 	bl	8001fc4 <HAL_GetTick>
 80036e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ea:	e00a      	b.n	8003702 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ec:	f7fe fc6a 	bl	8001fc4 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e053      	b.n	80037aa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003702:	4b2d      	ldr	r3, [pc, #180]	; (80037b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 020c 	and.w	r2, r3, #12
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	429a      	cmp	r2, r3
 8003712:	d1eb      	bne.n	80036ec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003714:	4b27      	ldr	r3, [pc, #156]	; (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 030f 	and.w	r3, r3, #15
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	429a      	cmp	r2, r3
 8003720:	d210      	bcs.n	8003744 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003722:	4b24      	ldr	r3, [pc, #144]	; (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f023 020f 	bic.w	r2, r3, #15
 800372a:	4922      	ldr	r1, [pc, #136]	; (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	4313      	orrs	r3, r2
 8003730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003732:	4b20      	ldr	r3, [pc, #128]	; (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 030f 	and.w	r3, r3, #15
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d001      	beq.n	8003744 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e032      	b.n	80037aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b00      	cmp	r3, #0
 800374e:	d008      	beq.n	8003762 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003750:	4b19      	ldr	r3, [pc, #100]	; (80037b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	4916      	ldr	r1, [pc, #88]	; (80037b8 <HAL_RCC_ClockConfig+0x1c8>)
 800375e:	4313      	orrs	r3, r2
 8003760:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	2b00      	cmp	r3, #0
 800376c:	d009      	beq.n	8003782 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800376e:	4b12      	ldr	r3, [pc, #72]	; (80037b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	490e      	ldr	r1, [pc, #56]	; (80037b8 <HAL_RCC_ClockConfig+0x1c8>)
 800377e:	4313      	orrs	r3, r2
 8003780:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003782:	f000 f821 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 8003786:	4602      	mov	r2, r0
 8003788:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <HAL_RCC_ClockConfig+0x1c8>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	091b      	lsrs	r3, r3, #4
 800378e:	f003 030f 	and.w	r3, r3, #15
 8003792:	490a      	ldr	r1, [pc, #40]	; (80037bc <HAL_RCC_ClockConfig+0x1cc>)
 8003794:	5ccb      	ldrb	r3, [r1, r3]
 8003796:	fa22 f303 	lsr.w	r3, r2, r3
 800379a:	4a09      	ldr	r2, [pc, #36]	; (80037c0 <HAL_RCC_ClockConfig+0x1d0>)
 800379c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800379e:	4b09      	ldr	r3, [pc, #36]	; (80037c4 <HAL_RCC_ClockConfig+0x1d4>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fe fbca 	bl	8001f3c <HAL_InitTick>

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	40023c00 	.word	0x40023c00
 80037b8:	40023800 	.word	0x40023800
 80037bc:	08008560 	.word	0x08008560
 80037c0:	20000000 	.word	0x20000000
 80037c4:	20000004 	.word	0x20000004

080037c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037cc:	b094      	sub	sp, #80	; 0x50
 80037ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80037d0:	2300      	movs	r3, #0
 80037d2:	647b      	str	r3, [r7, #68]	; 0x44
 80037d4:	2300      	movs	r3, #0
 80037d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037d8:	2300      	movs	r3, #0
 80037da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80037dc:	2300      	movs	r3, #0
 80037de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037e0:	4b79      	ldr	r3, [pc, #484]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f003 030c 	and.w	r3, r3, #12
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	d00d      	beq.n	8003808 <HAL_RCC_GetSysClockFreq+0x40>
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	f200 80e1 	bhi.w	80039b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d002      	beq.n	80037fc <HAL_RCC_GetSysClockFreq+0x34>
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	d003      	beq.n	8003802 <HAL_RCC_GetSysClockFreq+0x3a>
 80037fa:	e0db      	b.n	80039b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037fc:	4b73      	ldr	r3, [pc, #460]	; (80039cc <HAL_RCC_GetSysClockFreq+0x204>)
 80037fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003800:	e0db      	b.n	80039ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003802:	4b73      	ldr	r3, [pc, #460]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003804:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003806:	e0d8      	b.n	80039ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003808:	4b6f      	ldr	r3, [pc, #444]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003810:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003812:	4b6d      	ldr	r3, [pc, #436]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d063      	beq.n	80038e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800381e:	4b6a      	ldr	r3, [pc, #424]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	099b      	lsrs	r3, r3, #6
 8003824:	2200      	movs	r2, #0
 8003826:	63bb      	str	r3, [r7, #56]	; 0x38
 8003828:	63fa      	str	r2, [r7, #60]	; 0x3c
 800382a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800382c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003830:	633b      	str	r3, [r7, #48]	; 0x30
 8003832:	2300      	movs	r3, #0
 8003834:	637b      	str	r3, [r7, #52]	; 0x34
 8003836:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800383a:	4622      	mov	r2, r4
 800383c:	462b      	mov	r3, r5
 800383e:	f04f 0000 	mov.w	r0, #0
 8003842:	f04f 0100 	mov.w	r1, #0
 8003846:	0159      	lsls	r1, r3, #5
 8003848:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800384c:	0150      	lsls	r0, r2, #5
 800384e:	4602      	mov	r2, r0
 8003850:	460b      	mov	r3, r1
 8003852:	4621      	mov	r1, r4
 8003854:	1a51      	subs	r1, r2, r1
 8003856:	6139      	str	r1, [r7, #16]
 8003858:	4629      	mov	r1, r5
 800385a:	eb63 0301 	sbc.w	r3, r3, r1
 800385e:	617b      	str	r3, [r7, #20]
 8003860:	f04f 0200 	mov.w	r2, #0
 8003864:	f04f 0300 	mov.w	r3, #0
 8003868:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800386c:	4659      	mov	r1, fp
 800386e:	018b      	lsls	r3, r1, #6
 8003870:	4651      	mov	r1, sl
 8003872:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003876:	4651      	mov	r1, sl
 8003878:	018a      	lsls	r2, r1, #6
 800387a:	4651      	mov	r1, sl
 800387c:	ebb2 0801 	subs.w	r8, r2, r1
 8003880:	4659      	mov	r1, fp
 8003882:	eb63 0901 	sbc.w	r9, r3, r1
 8003886:	f04f 0200 	mov.w	r2, #0
 800388a:	f04f 0300 	mov.w	r3, #0
 800388e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003892:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003896:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800389a:	4690      	mov	r8, r2
 800389c:	4699      	mov	r9, r3
 800389e:	4623      	mov	r3, r4
 80038a0:	eb18 0303 	adds.w	r3, r8, r3
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	462b      	mov	r3, r5
 80038a8:	eb49 0303 	adc.w	r3, r9, r3
 80038ac:	60fb      	str	r3, [r7, #12]
 80038ae:	f04f 0200 	mov.w	r2, #0
 80038b2:	f04f 0300 	mov.w	r3, #0
 80038b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80038ba:	4629      	mov	r1, r5
 80038bc:	024b      	lsls	r3, r1, #9
 80038be:	4621      	mov	r1, r4
 80038c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80038c4:	4621      	mov	r1, r4
 80038c6:	024a      	lsls	r2, r1, #9
 80038c8:	4610      	mov	r0, r2
 80038ca:	4619      	mov	r1, r3
 80038cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038ce:	2200      	movs	r2, #0
 80038d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80038d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038d8:	f7fc fcfc 	bl	80002d4 <__aeabi_uldivmod>
 80038dc:	4602      	mov	r2, r0
 80038de:	460b      	mov	r3, r1
 80038e0:	4613      	mov	r3, r2
 80038e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038e4:	e058      	b.n	8003998 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038e6:	4b38      	ldr	r3, [pc, #224]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	099b      	lsrs	r3, r3, #6
 80038ec:	2200      	movs	r2, #0
 80038ee:	4618      	mov	r0, r3
 80038f0:	4611      	mov	r1, r2
 80038f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038f6:	623b      	str	r3, [r7, #32]
 80038f8:	2300      	movs	r3, #0
 80038fa:	627b      	str	r3, [r7, #36]	; 0x24
 80038fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003900:	4642      	mov	r2, r8
 8003902:	464b      	mov	r3, r9
 8003904:	f04f 0000 	mov.w	r0, #0
 8003908:	f04f 0100 	mov.w	r1, #0
 800390c:	0159      	lsls	r1, r3, #5
 800390e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003912:	0150      	lsls	r0, r2, #5
 8003914:	4602      	mov	r2, r0
 8003916:	460b      	mov	r3, r1
 8003918:	4641      	mov	r1, r8
 800391a:	ebb2 0a01 	subs.w	sl, r2, r1
 800391e:	4649      	mov	r1, r9
 8003920:	eb63 0b01 	sbc.w	fp, r3, r1
 8003924:	f04f 0200 	mov.w	r2, #0
 8003928:	f04f 0300 	mov.w	r3, #0
 800392c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003930:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003934:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003938:	ebb2 040a 	subs.w	r4, r2, sl
 800393c:	eb63 050b 	sbc.w	r5, r3, fp
 8003940:	f04f 0200 	mov.w	r2, #0
 8003944:	f04f 0300 	mov.w	r3, #0
 8003948:	00eb      	lsls	r3, r5, #3
 800394a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800394e:	00e2      	lsls	r2, r4, #3
 8003950:	4614      	mov	r4, r2
 8003952:	461d      	mov	r5, r3
 8003954:	4643      	mov	r3, r8
 8003956:	18e3      	adds	r3, r4, r3
 8003958:	603b      	str	r3, [r7, #0]
 800395a:	464b      	mov	r3, r9
 800395c:	eb45 0303 	adc.w	r3, r5, r3
 8003960:	607b      	str	r3, [r7, #4]
 8003962:	f04f 0200 	mov.w	r2, #0
 8003966:	f04f 0300 	mov.w	r3, #0
 800396a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800396e:	4629      	mov	r1, r5
 8003970:	028b      	lsls	r3, r1, #10
 8003972:	4621      	mov	r1, r4
 8003974:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003978:	4621      	mov	r1, r4
 800397a:	028a      	lsls	r2, r1, #10
 800397c:	4610      	mov	r0, r2
 800397e:	4619      	mov	r1, r3
 8003980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003982:	2200      	movs	r2, #0
 8003984:	61bb      	str	r3, [r7, #24]
 8003986:	61fa      	str	r2, [r7, #28]
 8003988:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800398c:	f7fc fca2 	bl	80002d4 <__aeabi_uldivmod>
 8003990:	4602      	mov	r2, r0
 8003992:	460b      	mov	r3, r1
 8003994:	4613      	mov	r3, r2
 8003996:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003998:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	0c1b      	lsrs	r3, r3, #16
 800399e:	f003 0303 	and.w	r3, r3, #3
 80039a2:	3301      	adds	r3, #1
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80039a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039b2:	e002      	b.n	80039ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039b4:	4b05      	ldr	r3, [pc, #20]	; (80039cc <HAL_RCC_GetSysClockFreq+0x204>)
 80039b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3750      	adds	r7, #80	; 0x50
 80039c0:	46bd      	mov	sp, r7
 80039c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039c6:	bf00      	nop
 80039c8:	40023800 	.word	0x40023800
 80039cc:	00f42400 	.word	0x00f42400
 80039d0:	007a1200 	.word	0x007a1200

080039d4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039d8:	4b03      	ldr	r3, [pc, #12]	; (80039e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80039da:	681b      	ldr	r3, [r3, #0]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	20000000 	.word	0x20000000

080039ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039f0:	f7ff fff0 	bl	80039d4 <HAL_RCC_GetHCLKFreq>
 80039f4:	4602      	mov	r2, r0
 80039f6:	4b05      	ldr	r3, [pc, #20]	; (8003a0c <HAL_RCC_GetPCLK1Freq+0x20>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	0a9b      	lsrs	r3, r3, #10
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	4903      	ldr	r1, [pc, #12]	; (8003a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a02:	5ccb      	ldrb	r3, [r1, r3]
 8003a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	08008570 	.word	0x08008570

08003a14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a18:	f7ff ffdc 	bl	80039d4 <HAL_RCC_GetHCLKFreq>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	4b05      	ldr	r3, [pc, #20]	; (8003a34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	0b5b      	lsrs	r3, r3, #13
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	4903      	ldr	r1, [pc, #12]	; (8003a38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a2a:	5ccb      	ldrb	r3, [r1, r3]
 8003a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40023800 	.word	0x40023800
 8003a38:	08008570 	.word	0x08008570

08003a3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b088      	sub	sp, #32
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003a44:	2300      	movs	r3, #0
 8003a46:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003a50:	2300      	movs	r3, #0
 8003a52:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003a54:	2300      	movs	r3, #0
 8003a56:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d012      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a64:	4b69      	ldr	r3, [pc, #420]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	4a68      	ldr	r2, [pc, #416]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a6a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003a6e:	6093      	str	r3, [r2, #8]
 8003a70:	4b66      	ldr	r3, [pc, #408]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a78:	4964      	ldr	r1, [pc, #400]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003a86:	2301      	movs	r3, #1
 8003a88:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d017      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a96:	4b5d      	ldr	r3, [pc, #372]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa4:	4959      	ldr	r1, [pc, #356]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ab4:	d101      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d017      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ad2:	4b4e      	ldr	r3, [pc, #312]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ad8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae0:	494a      	ldr	r1, [pc, #296]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003af0:	d101      	bne.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003af2:	2301      	movs	r3, #1
 8003af4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003afe:	2301      	movs	r3, #1
 8003b00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0320 	and.w	r3, r3, #32
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 808b 	beq.w	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b20:	4b3a      	ldr	r3, [pc, #232]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	4a39      	ldr	r2, [pc, #228]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b2a:	6413      	str	r3, [r2, #64]	; 0x40
 8003b2c:	4b37      	ldr	r3, [pc, #220]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b34:	60bb      	str	r3, [r7, #8]
 8003b36:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b38:	4b35      	ldr	r3, [pc, #212]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a34      	ldr	r2, [pc, #208]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b44:	f7fe fa3e 	bl	8001fc4 <HAL_GetTick>
 8003b48:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b4c:	f7fe fa3a 	bl	8001fc4 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b64      	cmp	r3, #100	; 0x64
 8003b58:	d901      	bls.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e38f      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b5e:	4b2c      	ldr	r3, [pc, #176]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d0f0      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b6a:	4b28      	ldr	r3, [pc, #160]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b72:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d035      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d02e      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b88:	4b20      	ldr	r3, [pc, #128]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b90:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b92:	4b1e      	ldr	r3, [pc, #120]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b96:	4a1d      	ldr	r2, [pc, #116]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b9c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b9e:	4b1b      	ldr	r3, [pc, #108]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba2:	4a1a      	ldr	r2, [pc, #104]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ba4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ba8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003baa:	4a18      	ldr	r2, [pc, #96]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003bb0:	4b16      	ldr	r3, [pc, #88]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d114      	bne.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbc:	f7fe fa02 	bl	8001fc4 <HAL_GetTick>
 8003bc0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc2:	e00a      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bc4:	f7fe f9fe 	bl	8001fc4 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e351      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bda:	4b0c      	ldr	r3, [pc, #48]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d0ee      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bf2:	d111      	bne.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003bf4:	4b05      	ldr	r3, [pc, #20]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c00:	4b04      	ldr	r3, [pc, #16]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003c02:	400b      	ands	r3, r1
 8003c04:	4901      	ldr	r1, [pc, #4]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	608b      	str	r3, [r1, #8]
 8003c0a:	e00b      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	40007000 	.word	0x40007000
 8003c14:	0ffffcff 	.word	0x0ffffcff
 8003c18:	4bac      	ldr	r3, [pc, #688]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	4aab      	ldr	r2, [pc, #684]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c1e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003c22:	6093      	str	r3, [r2, #8]
 8003c24:	4ba9      	ldr	r3, [pc, #676]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c30:	49a6      	ldr	r1, [pc, #664]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0310 	and.w	r3, r3, #16
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d010      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c42:	4ba2      	ldr	r3, [pc, #648]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c48:	4aa0      	ldr	r2, [pc, #640]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c4e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003c52:	4b9e      	ldr	r3, [pc, #632]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c54:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5c:	499b      	ldr	r1, [pc, #620]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00a      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c70:	4b96      	ldr	r3, [pc, #600]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c76:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c7e:	4993      	ldr	r1, [pc, #588]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00a      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c92:	4b8e      	ldr	r3, [pc, #568]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ca0:	498a      	ldr	r1, [pc, #552]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00a      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cb4:	4b85      	ldr	r3, [pc, #532]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cc2:	4982      	ldr	r1, [pc, #520]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00a      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003cd6:	4b7d      	ldr	r3, [pc, #500]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cdc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce4:	4979      	ldr	r1, [pc, #484]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00a      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cf8:	4b74      	ldr	r3, [pc, #464]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfe:	f023 0203 	bic.w	r2, r3, #3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d06:	4971      	ldr	r1, [pc, #452]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00a      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d1a:	4b6c      	ldr	r3, [pc, #432]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d20:	f023 020c 	bic.w	r2, r3, #12
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d28:	4968      	ldr	r1, [pc, #416]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00a      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d3c:	4b63      	ldr	r3, [pc, #396]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d42:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d4a:	4960      	ldr	r1, [pc, #384]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d5e:	4b5b      	ldr	r3, [pc, #364]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d64:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d6c:	4957      	ldr	r1, [pc, #348]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00a      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d80:	4b52      	ldr	r3, [pc, #328]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8e:	494f      	ldr	r1, [pc, #316]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003da2:	4b4a      	ldr	r3, [pc, #296]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db0:	4946      	ldr	r1, [pc, #280]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00a      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003dc4:	4b41      	ldr	r3, [pc, #260]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd2:	493e      	ldr	r1, [pc, #248]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00a      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003de6:	4b39      	ldr	r3, [pc, #228]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003df4:	4935      	ldr	r1, [pc, #212]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00a      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e08:	4b30      	ldr	r3, [pc, #192]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e16:	492d      	ldr	r1, [pc, #180]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d011      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003e2a:	4b28      	ldr	r3, [pc, #160]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e30:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e38:	4924      	ldr	r1, [pc, #144]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e48:	d101      	bne.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0308 	and.w	r3, r3, #8
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00a      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e6a:	4b18      	ldr	r3, [pc, #96]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e70:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e78:	4914      	ldr	r1, [pc, #80]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00b      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e8c:	4b0f      	ldr	r3, [pc, #60]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e92:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e9c:	490b      	ldr	r1, [pc, #44]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00f      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003eb0:	4b06      	ldr	r3, [pc, #24]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ec0:	4902      	ldr	r1, [pc, #8]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ec8:	e002      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003eca:	bf00      	nop
 8003ecc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00b      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003edc:	4b8a      	ldr	r3, [pc, #552]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ede:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ee2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eec:	4986      	ldr	r1, [pc, #536]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00b      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003f00:	4b81      	ldr	r3, [pc, #516]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f06:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f10:	497d      	ldr	r1, [pc, #500]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d006      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f000 80d6 	beq.w	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f2c:	4b76      	ldr	r3, [pc, #472]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a75      	ldr	r2, [pc, #468]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f38:	f7fe f844 	bl	8001fc4 <HAL_GetTick>
 8003f3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f40:	f7fe f840 	bl	8001fc4 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b64      	cmp	r3, #100	; 0x64
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e195      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f52:	4b6d      	ldr	r3, [pc, #436]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1f0      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d021      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d11d      	bne.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f72:	4b65      	ldr	r3, [pc, #404]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f78:	0c1b      	lsrs	r3, r3, #16
 8003f7a:	f003 0303 	and.w	r3, r3, #3
 8003f7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f80:	4b61      	ldr	r3, [pc, #388]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f86:	0e1b      	lsrs	r3, r3, #24
 8003f88:	f003 030f 	and.w	r3, r3, #15
 8003f8c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	019a      	lsls	r2, r3, #6
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	041b      	lsls	r3, r3, #16
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	061b      	lsls	r3, r3, #24
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	071b      	lsls	r3, r3, #28
 8003fa6:	4958      	ldr	r1, [pc, #352]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d004      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fc2:	d00a      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d02e      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fd8:	d129      	bne.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003fda:	4b4b      	ldr	r3, [pc, #300]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fe0:	0c1b      	lsrs	r3, r3, #16
 8003fe2:	f003 0303 	and.w	r3, r3, #3
 8003fe6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003fe8:	4b47      	ldr	r3, [pc, #284]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fee:	0f1b      	lsrs	r3, r3, #28
 8003ff0:	f003 0307 	and.w	r3, r3, #7
 8003ff4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	019a      	lsls	r2, r3, #6
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	041b      	lsls	r3, r3, #16
 8004000:	431a      	orrs	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	061b      	lsls	r3, r3, #24
 8004008:	431a      	orrs	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	071b      	lsls	r3, r3, #28
 800400e:	493e      	ldr	r1, [pc, #248]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004010:	4313      	orrs	r3, r2
 8004012:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004016:	4b3c      	ldr	r3, [pc, #240]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004018:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800401c:	f023 021f 	bic.w	r2, r3, #31
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	3b01      	subs	r3, #1
 8004026:	4938      	ldr	r1, [pc, #224]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004028:	4313      	orrs	r3, r2
 800402a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d01d      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800403a:	4b33      	ldr	r3, [pc, #204]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800403c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004040:	0e1b      	lsrs	r3, r3, #24
 8004042:	f003 030f 	and.w	r3, r3, #15
 8004046:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004048:	4b2f      	ldr	r3, [pc, #188]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800404a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800404e:	0f1b      	lsrs	r3, r3, #28
 8004050:	f003 0307 	and.w	r3, r3, #7
 8004054:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	019a      	lsls	r2, r3, #6
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	041b      	lsls	r3, r3, #16
 8004062:	431a      	orrs	r2, r3
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	061b      	lsls	r3, r3, #24
 8004068:	431a      	orrs	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	071b      	lsls	r3, r3, #28
 800406e:	4926      	ldr	r1, [pc, #152]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004070:	4313      	orrs	r3, r2
 8004072:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d011      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	019a      	lsls	r2, r3, #6
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	041b      	lsls	r3, r3, #16
 800408e:	431a      	orrs	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	061b      	lsls	r3, r3, #24
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	071b      	lsls	r3, r3, #28
 800409e:	491a      	ldr	r1, [pc, #104]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80040a6:	4b18      	ldr	r3, [pc, #96]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a17      	ldr	r2, [pc, #92]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040b2:	f7fd ff87 	bl	8001fc4 <HAL_GetTick>
 80040b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040b8:	e008      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80040ba:	f7fd ff83 	bl	8001fc4 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b64      	cmp	r3, #100	; 0x64
 80040c6:	d901      	bls.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e0d8      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040cc:	4b0e      	ldr	r3, [pc, #56]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d0f0      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	f040 80ce 	bne.w	800427c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80040e0:	4b09      	ldr	r3, [pc, #36]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a08      	ldr	r2, [pc, #32]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040ec:	f7fd ff6a 	bl	8001fc4 <HAL_GetTick>
 80040f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040f2:	e00b      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040f4:	f7fd ff66 	bl	8001fc4 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b64      	cmp	r3, #100	; 0x64
 8004100:	d904      	bls.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e0bb      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004106:	bf00      	nop
 8004108:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800410c:	4b5e      	ldr	r3, [pc, #376]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004114:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004118:	d0ec      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412a:	2b00      	cmp	r3, #0
 800412c:	d009      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004136:	2b00      	cmp	r3, #0
 8004138:	d02e      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	2b00      	cmp	r3, #0
 8004140:	d12a      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004142:	4b51      	ldr	r3, [pc, #324]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004148:	0c1b      	lsrs	r3, r3, #16
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004150:	4b4d      	ldr	r3, [pc, #308]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004156:	0f1b      	lsrs	r3, r3, #28
 8004158:	f003 0307 	and.w	r3, r3, #7
 800415c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	019a      	lsls	r2, r3, #6
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	041b      	lsls	r3, r3, #16
 8004168:	431a      	orrs	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	061b      	lsls	r3, r3, #24
 8004170:	431a      	orrs	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	071b      	lsls	r3, r3, #28
 8004176:	4944      	ldr	r1, [pc, #272]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004178:	4313      	orrs	r3, r2
 800417a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800417e:	4b42      	ldr	r3, [pc, #264]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004180:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004184:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418c:	3b01      	subs	r3, #1
 800418e:	021b      	lsls	r3, r3, #8
 8004190:	493d      	ldr	r1, [pc, #244]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004192:	4313      	orrs	r3, r2
 8004194:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d022      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041ac:	d11d      	bne.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80041ae:	4b36      	ldr	r3, [pc, #216]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b4:	0e1b      	lsrs	r3, r3, #24
 80041b6:	f003 030f 	and.w	r3, r3, #15
 80041ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80041bc:	4b32      	ldr	r3, [pc, #200]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c2:	0f1b      	lsrs	r3, r3, #28
 80041c4:	f003 0307 	and.w	r3, r3, #7
 80041c8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	019a      	lsls	r2, r3, #6
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	041b      	lsls	r3, r3, #16
 80041d6:	431a      	orrs	r2, r3
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	061b      	lsls	r3, r3, #24
 80041dc:	431a      	orrs	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	071b      	lsls	r3, r3, #28
 80041e2:	4929      	ldr	r1, [pc, #164]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0308 	and.w	r3, r3, #8
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d028      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80041f6:	4b24      	ldr	r3, [pc, #144]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fc:	0e1b      	lsrs	r3, r3, #24
 80041fe:	f003 030f 	and.w	r3, r3, #15
 8004202:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004204:	4b20      	ldr	r3, [pc, #128]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420a:	0c1b      	lsrs	r3, r3, #16
 800420c:	f003 0303 	and.w	r3, r3, #3
 8004210:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	019a      	lsls	r2, r3, #6
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	041b      	lsls	r3, r3, #16
 800421c:	431a      	orrs	r2, r3
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	061b      	lsls	r3, r3, #24
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	071b      	lsls	r3, r3, #28
 800422a:	4917      	ldr	r1, [pc, #92]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800422c:	4313      	orrs	r3, r2
 800422e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004232:	4b15      	ldr	r3, [pc, #84]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004234:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004238:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004240:	4911      	ldr	r1, [pc, #68]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004242:	4313      	orrs	r3, r2
 8004244:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004248:	4b0f      	ldr	r3, [pc, #60]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a0e      	ldr	r2, [pc, #56]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800424e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004252:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004254:	f7fd feb6 	bl	8001fc4 <HAL_GetTick>
 8004258:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800425a:	e008      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800425c:	f7fd feb2 	bl	8001fc4 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b64      	cmp	r3, #100	; 0x64
 8004268:	d901      	bls.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e007      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800426e:	4b06      	ldr	r3, [pc, #24]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004276:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800427a:	d1ef      	bne.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3720      	adds	r7, #32
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	40023800 	.word	0x40023800

0800428c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e040      	b.n	8004320 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d106      	bne.n	80042b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7fd fc5e 	bl	8001b70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2224      	movs	r2, #36	; 0x24
 80042b8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f022 0201 	bic.w	r2, r2, #1
 80042c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 fb3e 	bl	800494c <UART_SetConfig>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d101      	bne.n	80042da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e022      	b.n	8004320 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 fd96 	bl	8004e14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689a      	ldr	r2, [r3, #8]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004306:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f042 0201 	orr.w	r2, r2, #1
 8004316:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 fe1d 	bl	8004f58 <UART_CheckIdleState>
 800431e:	4603      	mov	r3, r0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3708      	adds	r7, #8
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b0ba      	sub	sp, #232	; 0xe8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800434e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004352:	f640 030f 	movw	r3, #2063	; 0x80f
 8004356:	4013      	ands	r3, r2
 8004358:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800435c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004360:	2b00      	cmp	r3, #0
 8004362:	d115      	bne.n	8004390 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004368:	f003 0320 	and.w	r3, r3, #32
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00f      	beq.n	8004390 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004374:	f003 0320 	and.w	r3, r3, #32
 8004378:	2b00      	cmp	r3, #0
 800437a:	d009      	beq.n	8004390 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 82ac 	beq.w	80048de <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	4798      	blx	r3
      }
      return;
 800438e:	e2a6      	b.n	80048de <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004390:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 8117 	beq.w	80045c8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800439a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d106      	bne.n	80043b4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80043a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80043aa:	4b85      	ldr	r3, [pc, #532]	; (80045c0 <HAL_UART_IRQHandler+0x298>)
 80043ac:	4013      	ands	r3, r2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f000 810a 	beq.w	80045c8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80043b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043b8:	f003 0301 	and.w	r3, r3, #1
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d011      	beq.n	80043e4 <HAL_UART_IRQHandler+0xbc>
 80043c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00b      	beq.n	80043e4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2201      	movs	r2, #1
 80043d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043da:	f043 0201 	orr.w	r2, r3, #1
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d011      	beq.n	8004414 <HAL_UART_IRQHandler+0xec>
 80043f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00b      	beq.n	8004414 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2202      	movs	r2, #2
 8004402:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800440a:	f043 0204 	orr.w	r2, r3, #4
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004418:	f003 0304 	and.w	r3, r3, #4
 800441c:	2b00      	cmp	r3, #0
 800441e:	d011      	beq.n	8004444 <HAL_UART_IRQHandler+0x11c>
 8004420:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00b      	beq.n	8004444 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2204      	movs	r2, #4
 8004432:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800443a:	f043 0202 	orr.w	r2, r3, #2
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004448:	f003 0308 	and.w	r3, r3, #8
 800444c:	2b00      	cmp	r3, #0
 800444e:	d017      	beq.n	8004480 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004454:	f003 0320 	and.w	r3, r3, #32
 8004458:	2b00      	cmp	r3, #0
 800445a:	d105      	bne.n	8004468 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800445c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004460:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00b      	beq.n	8004480 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2208      	movs	r2, #8
 800446e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004476:	f043 0208 	orr.w	r2, r3, #8
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004484:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004488:	2b00      	cmp	r3, #0
 800448a:	d012      	beq.n	80044b2 <HAL_UART_IRQHandler+0x18a>
 800448c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004490:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00c      	beq.n	80044b2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044a8:	f043 0220 	orr.w	r2, r3, #32
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 8212 	beq.w	80048e2 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80044be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044c2:	f003 0320 	and.w	r3, r3, #32
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00d      	beq.n	80044e6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80044ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044ce:	f003 0320 	and.w	r3, r3, #32
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d007      	beq.n	80044e6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fa:	2b40      	cmp	r3, #64	; 0x40
 80044fc:	d005      	beq.n	800450a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80044fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004502:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004506:	2b00      	cmp	r3, #0
 8004508:	d04f      	beq.n	80045aa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 fe37 	bl	800517e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451a:	2b40      	cmp	r3, #64	; 0x40
 800451c:	d141      	bne.n	80045a2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	3308      	adds	r3, #8
 8004524:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004528:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800452c:	e853 3f00 	ldrex	r3, [r3]
 8004530:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004534:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004538:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800453c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	3308      	adds	r3, #8
 8004546:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800454a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800454e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004552:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004556:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800455a:	e841 2300 	strex	r3, r2, [r1]
 800455e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004562:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1d9      	bne.n	800451e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800456e:	2b00      	cmp	r3, #0
 8004570:	d013      	beq.n	800459a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004576:	4a13      	ldr	r2, [pc, #76]	; (80045c4 <HAL_UART_IRQHandler+0x29c>)
 8004578:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800457e:	4618      	mov	r0, r3
 8004580:	f7fd fed1 	bl	8002326 <HAL_DMA_Abort_IT>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d017      	beq.n	80045ba <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800458e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004594:	4610      	mov	r0, r2
 8004596:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004598:	e00f      	b.n	80045ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f9b6 	bl	800490c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045a0:	e00b      	b.n	80045ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f9b2 	bl	800490c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045a8:	e007      	b.n	80045ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f9ae 	bl	800490c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80045b8:	e193      	b.n	80048e2 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ba:	bf00      	nop
    return;
 80045bc:	e191      	b.n	80048e2 <HAL_UART_IRQHandler+0x5ba>
 80045be:	bf00      	nop
 80045c0:	04000120 	.word	0x04000120
 80045c4:	08005247 	.word	0x08005247

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	f040 814c 	bne.w	800486a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80045d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045d6:	f003 0310 	and.w	r3, r3, #16
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f000 8145 	beq.w	800486a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80045e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045e4:	f003 0310 	and.w	r3, r3, #16
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 813e 	beq.w	800486a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2210      	movs	r2, #16
 80045f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004600:	2b40      	cmp	r3, #64	; 0x40
 8004602:	f040 80b6 	bne.w	8004772 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004612:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004616:	2b00      	cmp	r3, #0
 8004618:	f000 8165 	beq.w	80048e6 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004622:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004626:	429a      	cmp	r2, r3
 8004628:	f080 815d 	bcs.w	80048e6 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004632:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800463a:	69db      	ldr	r3, [r3, #28]
 800463c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004640:	f000 8086 	beq.w	8004750 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004650:	e853 3f00 	ldrex	r3, [r3]
 8004654:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004658:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800465c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004660:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	461a      	mov	r2, r3
 800466a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800466e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004672:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004676:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800467a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800467e:	e841 2300 	strex	r3, r2, [r1]
 8004682:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004686:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1da      	bne.n	8004644 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	3308      	adds	r3, #8
 8004694:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004696:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004698:	e853 3f00 	ldrex	r3, [r3]
 800469c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800469e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046a0:	f023 0301 	bic.w	r3, r3, #1
 80046a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	3308      	adds	r3, #8
 80046ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80046b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80046b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80046ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80046be:	e841 2300 	strex	r3, r2, [r1]
 80046c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80046c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1e1      	bne.n	800468e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3308      	adds	r3, #8
 80046d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046d4:	e853 3f00 	ldrex	r3, [r3]
 80046d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80046da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	3308      	adds	r3, #8
 80046ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80046ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80046f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80046f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80046f6:	e841 2300 	strex	r3, r2, [r1]
 80046fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80046fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1e3      	bne.n	80046ca <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2220      	movs	r2, #32
 8004706:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004718:	e853 3f00 	ldrex	r3, [r3]
 800471c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800471e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004720:	f023 0310 	bic.w	r3, r3, #16
 8004724:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	461a      	mov	r2, r3
 800472e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004732:	65bb      	str	r3, [r7, #88]	; 0x58
 8004734:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004736:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004738:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800473a:	e841 2300 	strex	r3, r2, [r1]
 800473e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004740:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1e4      	bne.n	8004710 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800474a:	4618      	mov	r0, r3
 800474c:	f7fd fd7b 	bl	8002246 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2202      	movs	r2, #2
 8004754:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004762:	b29b      	uxth	r3, r3
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	b29b      	uxth	r3, r3
 8004768:	4619      	mov	r1, r3
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 f8d8 	bl	8004920 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004770:	e0b9      	b.n	80048e6 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800477e:	b29b      	uxth	r3, r3
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800478c:	b29b      	uxth	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	f000 80ab 	beq.w	80048ea <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8004794:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 80a6 	beq.w	80048ea <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a6:	e853 3f00 	ldrex	r3, [r3]
 80047aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	461a      	mov	r2, r3
 80047bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80047c0:	647b      	str	r3, [r7, #68]	; 0x44
 80047c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047c8:	e841 2300 	strex	r3, r2, [r1]
 80047cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1e4      	bne.n	800479e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	3308      	adds	r3, #8
 80047da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047de:	e853 3f00 	ldrex	r3, [r3]
 80047e2:	623b      	str	r3, [r7, #32]
   return(result);
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	f023 0301 	bic.w	r3, r3, #1
 80047ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	3308      	adds	r3, #8
 80047f4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80047f8:	633a      	str	r2, [r7, #48]	; 0x30
 80047fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004800:	e841 2300 	strex	r3, r2, [r1]
 8004804:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1e3      	bne.n	80047d4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2220      	movs	r2, #32
 8004810:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	e853 3f00 	ldrex	r3, [r3]
 800482c:	60fb      	str	r3, [r7, #12]
   return(result);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f023 0310 	bic.w	r3, r3, #16
 8004834:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	461a      	mov	r2, r3
 800483e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004842:	61fb      	str	r3, [r7, #28]
 8004844:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004846:	69b9      	ldr	r1, [r7, #24]
 8004848:	69fa      	ldr	r2, [r7, #28]
 800484a:	e841 2300 	strex	r3, r2, [r1]
 800484e:	617b      	str	r3, [r7, #20]
   return(result);
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1e4      	bne.n	8004820 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2202      	movs	r2, #2
 800485a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800485c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004860:	4619      	mov	r1, r3
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 f85c 	bl	8004920 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004868:	e03f      	b.n	80048ea <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800486a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800486e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00e      	beq.n	8004894 <HAL_UART_IRQHandler+0x56c>
 8004876:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800487a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d008      	beq.n	8004894 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800488a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 f853 	bl	8004938 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004892:	e02d      	b.n	80048f0 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00e      	beq.n	80048be <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80048a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d008      	beq.n	80048be <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d01c      	beq.n	80048ee <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	4798      	blx	r3
    }
    return;
 80048bc:	e017      	b.n	80048ee <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80048be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d012      	beq.n	80048f0 <HAL_UART_IRQHandler+0x5c8>
 80048ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00c      	beq.n	80048f0 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 fccb 	bl	8005272 <UART_EndTransmit_IT>
    return;
 80048dc:	e008      	b.n	80048f0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80048de:	bf00      	nop
 80048e0:	e006      	b.n	80048f0 <HAL_UART_IRQHandler+0x5c8>
    return;
 80048e2:	bf00      	nop
 80048e4:	e004      	b.n	80048f0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80048e6:	bf00      	nop
 80048e8:	e002      	b.n	80048f0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80048ea:	bf00      	nop
 80048ec:	e000      	b.n	80048f0 <HAL_UART_IRQHandler+0x5c8>
    return;
 80048ee:	bf00      	nop
  }

}
 80048f0:	37e8      	adds	r7, #232	; 0xe8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop

080048f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	460b      	mov	r3, r1
 800492a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b088      	sub	sp, #32
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004954:	2300      	movs	r3, #0
 8004956:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	431a      	orrs	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	431a      	orrs	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	69db      	ldr	r3, [r3, #28]
 800496c:	4313      	orrs	r3, r2
 800496e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	4ba6      	ldr	r3, [pc, #664]	; (8004c10 <UART_SetConfig+0x2c4>)
 8004978:	4013      	ands	r3, r2
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	6812      	ldr	r2, [r2, #0]
 800497e:	6979      	ldr	r1, [r7, #20]
 8004980:	430b      	orrs	r3, r1
 8004982:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68da      	ldr	r2, [r3, #12]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	430a      	orrs	r2, r1
 8004998:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a1b      	ldr	r3, [r3, #32]
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a94      	ldr	r2, [pc, #592]	; (8004c14 <UART_SetConfig+0x2c8>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d120      	bne.n	8004a0a <UART_SetConfig+0xbe>
 80049c8:	4b93      	ldr	r3, [pc, #588]	; (8004c18 <UART_SetConfig+0x2cc>)
 80049ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	2b03      	cmp	r3, #3
 80049d4:	d816      	bhi.n	8004a04 <UART_SetConfig+0xb8>
 80049d6:	a201      	add	r2, pc, #4	; (adr r2, 80049dc <UART_SetConfig+0x90>)
 80049d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049dc:	080049ed 	.word	0x080049ed
 80049e0:	080049f9 	.word	0x080049f9
 80049e4:	080049f3 	.word	0x080049f3
 80049e8:	080049ff 	.word	0x080049ff
 80049ec:	2301      	movs	r3, #1
 80049ee:	77fb      	strb	r3, [r7, #31]
 80049f0:	e150      	b.n	8004c94 <UART_SetConfig+0x348>
 80049f2:	2302      	movs	r3, #2
 80049f4:	77fb      	strb	r3, [r7, #31]
 80049f6:	e14d      	b.n	8004c94 <UART_SetConfig+0x348>
 80049f8:	2304      	movs	r3, #4
 80049fa:	77fb      	strb	r3, [r7, #31]
 80049fc:	e14a      	b.n	8004c94 <UART_SetConfig+0x348>
 80049fe:	2308      	movs	r3, #8
 8004a00:	77fb      	strb	r3, [r7, #31]
 8004a02:	e147      	b.n	8004c94 <UART_SetConfig+0x348>
 8004a04:	2310      	movs	r3, #16
 8004a06:	77fb      	strb	r3, [r7, #31]
 8004a08:	e144      	b.n	8004c94 <UART_SetConfig+0x348>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a83      	ldr	r2, [pc, #524]	; (8004c1c <UART_SetConfig+0x2d0>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d132      	bne.n	8004a7a <UART_SetConfig+0x12e>
 8004a14:	4b80      	ldr	r3, [pc, #512]	; (8004c18 <UART_SetConfig+0x2cc>)
 8004a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1a:	f003 030c 	and.w	r3, r3, #12
 8004a1e:	2b0c      	cmp	r3, #12
 8004a20:	d828      	bhi.n	8004a74 <UART_SetConfig+0x128>
 8004a22:	a201      	add	r2, pc, #4	; (adr r2, 8004a28 <UART_SetConfig+0xdc>)
 8004a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a28:	08004a5d 	.word	0x08004a5d
 8004a2c:	08004a75 	.word	0x08004a75
 8004a30:	08004a75 	.word	0x08004a75
 8004a34:	08004a75 	.word	0x08004a75
 8004a38:	08004a69 	.word	0x08004a69
 8004a3c:	08004a75 	.word	0x08004a75
 8004a40:	08004a75 	.word	0x08004a75
 8004a44:	08004a75 	.word	0x08004a75
 8004a48:	08004a63 	.word	0x08004a63
 8004a4c:	08004a75 	.word	0x08004a75
 8004a50:	08004a75 	.word	0x08004a75
 8004a54:	08004a75 	.word	0x08004a75
 8004a58:	08004a6f 	.word	0x08004a6f
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	77fb      	strb	r3, [r7, #31]
 8004a60:	e118      	b.n	8004c94 <UART_SetConfig+0x348>
 8004a62:	2302      	movs	r3, #2
 8004a64:	77fb      	strb	r3, [r7, #31]
 8004a66:	e115      	b.n	8004c94 <UART_SetConfig+0x348>
 8004a68:	2304      	movs	r3, #4
 8004a6a:	77fb      	strb	r3, [r7, #31]
 8004a6c:	e112      	b.n	8004c94 <UART_SetConfig+0x348>
 8004a6e:	2308      	movs	r3, #8
 8004a70:	77fb      	strb	r3, [r7, #31]
 8004a72:	e10f      	b.n	8004c94 <UART_SetConfig+0x348>
 8004a74:	2310      	movs	r3, #16
 8004a76:	77fb      	strb	r3, [r7, #31]
 8004a78:	e10c      	b.n	8004c94 <UART_SetConfig+0x348>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a68      	ldr	r2, [pc, #416]	; (8004c20 <UART_SetConfig+0x2d4>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d120      	bne.n	8004ac6 <UART_SetConfig+0x17a>
 8004a84:	4b64      	ldr	r3, [pc, #400]	; (8004c18 <UART_SetConfig+0x2cc>)
 8004a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a8a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a8e:	2b30      	cmp	r3, #48	; 0x30
 8004a90:	d013      	beq.n	8004aba <UART_SetConfig+0x16e>
 8004a92:	2b30      	cmp	r3, #48	; 0x30
 8004a94:	d814      	bhi.n	8004ac0 <UART_SetConfig+0x174>
 8004a96:	2b20      	cmp	r3, #32
 8004a98:	d009      	beq.n	8004aae <UART_SetConfig+0x162>
 8004a9a:	2b20      	cmp	r3, #32
 8004a9c:	d810      	bhi.n	8004ac0 <UART_SetConfig+0x174>
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d002      	beq.n	8004aa8 <UART_SetConfig+0x15c>
 8004aa2:	2b10      	cmp	r3, #16
 8004aa4:	d006      	beq.n	8004ab4 <UART_SetConfig+0x168>
 8004aa6:	e00b      	b.n	8004ac0 <UART_SetConfig+0x174>
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	77fb      	strb	r3, [r7, #31]
 8004aac:	e0f2      	b.n	8004c94 <UART_SetConfig+0x348>
 8004aae:	2302      	movs	r3, #2
 8004ab0:	77fb      	strb	r3, [r7, #31]
 8004ab2:	e0ef      	b.n	8004c94 <UART_SetConfig+0x348>
 8004ab4:	2304      	movs	r3, #4
 8004ab6:	77fb      	strb	r3, [r7, #31]
 8004ab8:	e0ec      	b.n	8004c94 <UART_SetConfig+0x348>
 8004aba:	2308      	movs	r3, #8
 8004abc:	77fb      	strb	r3, [r7, #31]
 8004abe:	e0e9      	b.n	8004c94 <UART_SetConfig+0x348>
 8004ac0:	2310      	movs	r3, #16
 8004ac2:	77fb      	strb	r3, [r7, #31]
 8004ac4:	e0e6      	b.n	8004c94 <UART_SetConfig+0x348>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a56      	ldr	r2, [pc, #344]	; (8004c24 <UART_SetConfig+0x2d8>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d120      	bne.n	8004b12 <UART_SetConfig+0x1c6>
 8004ad0:	4b51      	ldr	r3, [pc, #324]	; (8004c18 <UART_SetConfig+0x2cc>)
 8004ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ada:	2bc0      	cmp	r3, #192	; 0xc0
 8004adc:	d013      	beq.n	8004b06 <UART_SetConfig+0x1ba>
 8004ade:	2bc0      	cmp	r3, #192	; 0xc0
 8004ae0:	d814      	bhi.n	8004b0c <UART_SetConfig+0x1c0>
 8004ae2:	2b80      	cmp	r3, #128	; 0x80
 8004ae4:	d009      	beq.n	8004afa <UART_SetConfig+0x1ae>
 8004ae6:	2b80      	cmp	r3, #128	; 0x80
 8004ae8:	d810      	bhi.n	8004b0c <UART_SetConfig+0x1c0>
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d002      	beq.n	8004af4 <UART_SetConfig+0x1a8>
 8004aee:	2b40      	cmp	r3, #64	; 0x40
 8004af0:	d006      	beq.n	8004b00 <UART_SetConfig+0x1b4>
 8004af2:	e00b      	b.n	8004b0c <UART_SetConfig+0x1c0>
 8004af4:	2300      	movs	r3, #0
 8004af6:	77fb      	strb	r3, [r7, #31]
 8004af8:	e0cc      	b.n	8004c94 <UART_SetConfig+0x348>
 8004afa:	2302      	movs	r3, #2
 8004afc:	77fb      	strb	r3, [r7, #31]
 8004afe:	e0c9      	b.n	8004c94 <UART_SetConfig+0x348>
 8004b00:	2304      	movs	r3, #4
 8004b02:	77fb      	strb	r3, [r7, #31]
 8004b04:	e0c6      	b.n	8004c94 <UART_SetConfig+0x348>
 8004b06:	2308      	movs	r3, #8
 8004b08:	77fb      	strb	r3, [r7, #31]
 8004b0a:	e0c3      	b.n	8004c94 <UART_SetConfig+0x348>
 8004b0c:	2310      	movs	r3, #16
 8004b0e:	77fb      	strb	r3, [r7, #31]
 8004b10:	e0c0      	b.n	8004c94 <UART_SetConfig+0x348>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a44      	ldr	r2, [pc, #272]	; (8004c28 <UART_SetConfig+0x2dc>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d125      	bne.n	8004b68 <UART_SetConfig+0x21c>
 8004b1c:	4b3e      	ldr	r3, [pc, #248]	; (8004c18 <UART_SetConfig+0x2cc>)
 8004b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b2a:	d017      	beq.n	8004b5c <UART_SetConfig+0x210>
 8004b2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b30:	d817      	bhi.n	8004b62 <UART_SetConfig+0x216>
 8004b32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b36:	d00b      	beq.n	8004b50 <UART_SetConfig+0x204>
 8004b38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b3c:	d811      	bhi.n	8004b62 <UART_SetConfig+0x216>
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <UART_SetConfig+0x1fe>
 8004b42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b46:	d006      	beq.n	8004b56 <UART_SetConfig+0x20a>
 8004b48:	e00b      	b.n	8004b62 <UART_SetConfig+0x216>
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	77fb      	strb	r3, [r7, #31]
 8004b4e:	e0a1      	b.n	8004c94 <UART_SetConfig+0x348>
 8004b50:	2302      	movs	r3, #2
 8004b52:	77fb      	strb	r3, [r7, #31]
 8004b54:	e09e      	b.n	8004c94 <UART_SetConfig+0x348>
 8004b56:	2304      	movs	r3, #4
 8004b58:	77fb      	strb	r3, [r7, #31]
 8004b5a:	e09b      	b.n	8004c94 <UART_SetConfig+0x348>
 8004b5c:	2308      	movs	r3, #8
 8004b5e:	77fb      	strb	r3, [r7, #31]
 8004b60:	e098      	b.n	8004c94 <UART_SetConfig+0x348>
 8004b62:	2310      	movs	r3, #16
 8004b64:	77fb      	strb	r3, [r7, #31]
 8004b66:	e095      	b.n	8004c94 <UART_SetConfig+0x348>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a2f      	ldr	r2, [pc, #188]	; (8004c2c <UART_SetConfig+0x2e0>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d125      	bne.n	8004bbe <UART_SetConfig+0x272>
 8004b72:	4b29      	ldr	r3, [pc, #164]	; (8004c18 <UART_SetConfig+0x2cc>)
 8004b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b80:	d017      	beq.n	8004bb2 <UART_SetConfig+0x266>
 8004b82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b86:	d817      	bhi.n	8004bb8 <UART_SetConfig+0x26c>
 8004b88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b8c:	d00b      	beq.n	8004ba6 <UART_SetConfig+0x25a>
 8004b8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b92:	d811      	bhi.n	8004bb8 <UART_SetConfig+0x26c>
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d003      	beq.n	8004ba0 <UART_SetConfig+0x254>
 8004b98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b9c:	d006      	beq.n	8004bac <UART_SetConfig+0x260>
 8004b9e:	e00b      	b.n	8004bb8 <UART_SetConfig+0x26c>
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	77fb      	strb	r3, [r7, #31]
 8004ba4:	e076      	b.n	8004c94 <UART_SetConfig+0x348>
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	77fb      	strb	r3, [r7, #31]
 8004baa:	e073      	b.n	8004c94 <UART_SetConfig+0x348>
 8004bac:	2304      	movs	r3, #4
 8004bae:	77fb      	strb	r3, [r7, #31]
 8004bb0:	e070      	b.n	8004c94 <UART_SetConfig+0x348>
 8004bb2:	2308      	movs	r3, #8
 8004bb4:	77fb      	strb	r3, [r7, #31]
 8004bb6:	e06d      	b.n	8004c94 <UART_SetConfig+0x348>
 8004bb8:	2310      	movs	r3, #16
 8004bba:	77fb      	strb	r3, [r7, #31]
 8004bbc:	e06a      	b.n	8004c94 <UART_SetConfig+0x348>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a1b      	ldr	r2, [pc, #108]	; (8004c30 <UART_SetConfig+0x2e4>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d138      	bne.n	8004c3a <UART_SetConfig+0x2ee>
 8004bc8:	4b13      	ldr	r3, [pc, #76]	; (8004c18 <UART_SetConfig+0x2cc>)
 8004bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bce:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004bd2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bd6:	d017      	beq.n	8004c08 <UART_SetConfig+0x2bc>
 8004bd8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bdc:	d82a      	bhi.n	8004c34 <UART_SetConfig+0x2e8>
 8004bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004be2:	d00b      	beq.n	8004bfc <UART_SetConfig+0x2b0>
 8004be4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004be8:	d824      	bhi.n	8004c34 <UART_SetConfig+0x2e8>
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <UART_SetConfig+0x2aa>
 8004bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bf2:	d006      	beq.n	8004c02 <UART_SetConfig+0x2b6>
 8004bf4:	e01e      	b.n	8004c34 <UART_SetConfig+0x2e8>
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	77fb      	strb	r3, [r7, #31]
 8004bfa:	e04b      	b.n	8004c94 <UART_SetConfig+0x348>
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	77fb      	strb	r3, [r7, #31]
 8004c00:	e048      	b.n	8004c94 <UART_SetConfig+0x348>
 8004c02:	2304      	movs	r3, #4
 8004c04:	77fb      	strb	r3, [r7, #31]
 8004c06:	e045      	b.n	8004c94 <UART_SetConfig+0x348>
 8004c08:	2308      	movs	r3, #8
 8004c0a:	77fb      	strb	r3, [r7, #31]
 8004c0c:	e042      	b.n	8004c94 <UART_SetConfig+0x348>
 8004c0e:	bf00      	nop
 8004c10:	efff69f3 	.word	0xefff69f3
 8004c14:	40011000 	.word	0x40011000
 8004c18:	40023800 	.word	0x40023800
 8004c1c:	40004400 	.word	0x40004400
 8004c20:	40004800 	.word	0x40004800
 8004c24:	40004c00 	.word	0x40004c00
 8004c28:	40005000 	.word	0x40005000
 8004c2c:	40011400 	.word	0x40011400
 8004c30:	40007800 	.word	0x40007800
 8004c34:	2310      	movs	r3, #16
 8004c36:	77fb      	strb	r3, [r7, #31]
 8004c38:	e02c      	b.n	8004c94 <UART_SetConfig+0x348>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a72      	ldr	r2, [pc, #456]	; (8004e08 <UART_SetConfig+0x4bc>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d125      	bne.n	8004c90 <UART_SetConfig+0x344>
 8004c44:	4b71      	ldr	r3, [pc, #452]	; (8004e0c <UART_SetConfig+0x4c0>)
 8004c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004c4e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c52:	d017      	beq.n	8004c84 <UART_SetConfig+0x338>
 8004c54:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c58:	d817      	bhi.n	8004c8a <UART_SetConfig+0x33e>
 8004c5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c5e:	d00b      	beq.n	8004c78 <UART_SetConfig+0x32c>
 8004c60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c64:	d811      	bhi.n	8004c8a <UART_SetConfig+0x33e>
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <UART_SetConfig+0x326>
 8004c6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c6e:	d006      	beq.n	8004c7e <UART_SetConfig+0x332>
 8004c70:	e00b      	b.n	8004c8a <UART_SetConfig+0x33e>
 8004c72:	2300      	movs	r3, #0
 8004c74:	77fb      	strb	r3, [r7, #31]
 8004c76:	e00d      	b.n	8004c94 <UART_SetConfig+0x348>
 8004c78:	2302      	movs	r3, #2
 8004c7a:	77fb      	strb	r3, [r7, #31]
 8004c7c:	e00a      	b.n	8004c94 <UART_SetConfig+0x348>
 8004c7e:	2304      	movs	r3, #4
 8004c80:	77fb      	strb	r3, [r7, #31]
 8004c82:	e007      	b.n	8004c94 <UART_SetConfig+0x348>
 8004c84:	2308      	movs	r3, #8
 8004c86:	77fb      	strb	r3, [r7, #31]
 8004c88:	e004      	b.n	8004c94 <UART_SetConfig+0x348>
 8004c8a:	2310      	movs	r3, #16
 8004c8c:	77fb      	strb	r3, [r7, #31]
 8004c8e:	e001      	b.n	8004c94 <UART_SetConfig+0x348>
 8004c90:	2310      	movs	r3, #16
 8004c92:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	69db      	ldr	r3, [r3, #28]
 8004c98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c9c:	d15b      	bne.n	8004d56 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004c9e:	7ffb      	ldrb	r3, [r7, #31]
 8004ca0:	2b08      	cmp	r3, #8
 8004ca2:	d828      	bhi.n	8004cf6 <UART_SetConfig+0x3aa>
 8004ca4:	a201      	add	r2, pc, #4	; (adr r2, 8004cac <UART_SetConfig+0x360>)
 8004ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004caa:	bf00      	nop
 8004cac:	08004cd1 	.word	0x08004cd1
 8004cb0:	08004cd9 	.word	0x08004cd9
 8004cb4:	08004ce1 	.word	0x08004ce1
 8004cb8:	08004cf7 	.word	0x08004cf7
 8004cbc:	08004ce7 	.word	0x08004ce7
 8004cc0:	08004cf7 	.word	0x08004cf7
 8004cc4:	08004cf7 	.word	0x08004cf7
 8004cc8:	08004cf7 	.word	0x08004cf7
 8004ccc:	08004cef 	.word	0x08004cef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cd0:	f7fe fe8c 	bl	80039ec <HAL_RCC_GetPCLK1Freq>
 8004cd4:	61b8      	str	r0, [r7, #24]
        break;
 8004cd6:	e013      	b.n	8004d00 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cd8:	f7fe fe9c 	bl	8003a14 <HAL_RCC_GetPCLK2Freq>
 8004cdc:	61b8      	str	r0, [r7, #24]
        break;
 8004cde:	e00f      	b.n	8004d00 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ce0:	4b4b      	ldr	r3, [pc, #300]	; (8004e10 <UART_SetConfig+0x4c4>)
 8004ce2:	61bb      	str	r3, [r7, #24]
        break;
 8004ce4:	e00c      	b.n	8004d00 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ce6:	f7fe fd6f 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 8004cea:	61b8      	str	r0, [r7, #24]
        break;
 8004cec:	e008      	b.n	8004d00 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cf2:	61bb      	str	r3, [r7, #24]
        break;
 8004cf4:	e004      	b.n	8004d00 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	77bb      	strb	r3, [r7, #30]
        break;
 8004cfe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d074      	beq.n	8004df0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	005a      	lsls	r2, r3, #1
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	085b      	lsrs	r3, r3, #1
 8004d10:	441a      	add	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d1a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	2b0f      	cmp	r3, #15
 8004d20:	d916      	bls.n	8004d50 <UART_SetConfig+0x404>
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d28:	d212      	bcs.n	8004d50 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	f023 030f 	bic.w	r3, r3, #15
 8004d32:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	085b      	lsrs	r3, r3, #1
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	f003 0307 	and.w	r3, r3, #7
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	89fb      	ldrh	r3, [r7, #14]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	89fa      	ldrh	r2, [r7, #14]
 8004d4c:	60da      	str	r2, [r3, #12]
 8004d4e:	e04f      	b.n	8004df0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	77bb      	strb	r3, [r7, #30]
 8004d54:	e04c      	b.n	8004df0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d56:	7ffb      	ldrb	r3, [r7, #31]
 8004d58:	2b08      	cmp	r3, #8
 8004d5a:	d828      	bhi.n	8004dae <UART_SetConfig+0x462>
 8004d5c:	a201      	add	r2, pc, #4	; (adr r2, 8004d64 <UART_SetConfig+0x418>)
 8004d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d62:	bf00      	nop
 8004d64:	08004d89 	.word	0x08004d89
 8004d68:	08004d91 	.word	0x08004d91
 8004d6c:	08004d99 	.word	0x08004d99
 8004d70:	08004daf 	.word	0x08004daf
 8004d74:	08004d9f 	.word	0x08004d9f
 8004d78:	08004daf 	.word	0x08004daf
 8004d7c:	08004daf 	.word	0x08004daf
 8004d80:	08004daf 	.word	0x08004daf
 8004d84:	08004da7 	.word	0x08004da7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d88:	f7fe fe30 	bl	80039ec <HAL_RCC_GetPCLK1Freq>
 8004d8c:	61b8      	str	r0, [r7, #24]
        break;
 8004d8e:	e013      	b.n	8004db8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d90:	f7fe fe40 	bl	8003a14 <HAL_RCC_GetPCLK2Freq>
 8004d94:	61b8      	str	r0, [r7, #24]
        break;
 8004d96:	e00f      	b.n	8004db8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d98:	4b1d      	ldr	r3, [pc, #116]	; (8004e10 <UART_SetConfig+0x4c4>)
 8004d9a:	61bb      	str	r3, [r7, #24]
        break;
 8004d9c:	e00c      	b.n	8004db8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d9e:	f7fe fd13 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 8004da2:	61b8      	str	r0, [r7, #24]
        break;
 8004da4:	e008      	b.n	8004db8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004daa:	61bb      	str	r3, [r7, #24]
        break;
 8004dac:	e004      	b.n	8004db8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004dae:	2300      	movs	r3, #0
 8004db0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	77bb      	strb	r3, [r7, #30]
        break;
 8004db6:	bf00      	nop
    }

    if (pclk != 0U)
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d018      	beq.n	8004df0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	085a      	lsrs	r2, r3, #1
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	441a      	add	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	2b0f      	cmp	r3, #15
 8004dd6:	d909      	bls.n	8004dec <UART_SetConfig+0x4a0>
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dde:	d205      	bcs.n	8004dec <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	60da      	str	r2, [r3, #12]
 8004dea:	e001      	b.n	8004df0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004dfc:	7fbb      	ldrb	r3, [r7, #30]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3720      	adds	r7, #32
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	40007c00 	.word	0x40007c00
 8004e0c:	40023800 	.word	0x40023800
 8004e10:	00f42400 	.word	0x00f42400

08004e14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00a      	beq.n	8004e3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	f003 0304 	and.w	r3, r3, #4
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00a      	beq.n	8004e82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	f003 0308 	and.w	r3, r3, #8
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00a      	beq.n	8004ea4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea8:	f003 0310 	and.w	r3, r3, #16
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00a      	beq.n	8004ec6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	f003 0320 	and.w	r3, r3, #32
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00a      	beq.n	8004ee8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d01a      	beq.n	8004f2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f12:	d10a      	bne.n	8004f2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	605a      	str	r2, [r3, #4]
  }
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af02      	add	r7, sp, #8
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f68:	f7fd f82c 	bl	8001fc4 <HAL_GetTick>
 8004f6c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0308 	and.w	r3, r3, #8
 8004f78:	2b08      	cmp	r3, #8
 8004f7a:	d10e      	bne.n	8004f9a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f831 	bl	8004ff2 <UART_WaitOnFlagUntilTimeout>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e027      	b.n	8004fea <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0304 	and.w	r3, r3, #4
 8004fa4:	2b04      	cmp	r3, #4
 8004fa6:	d10e      	bne.n	8004fc6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fa8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f81b 	bl	8004ff2 <UART_WaitOnFlagUntilTimeout>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e011      	b.n	8004fea <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b09c      	sub	sp, #112	; 0x70
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	60f8      	str	r0, [r7, #12]
 8004ffa:	60b9      	str	r1, [r7, #8]
 8004ffc:	603b      	str	r3, [r7, #0]
 8004ffe:	4613      	mov	r3, r2
 8005000:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005002:	e0a7      	b.n	8005154 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005004:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800500a:	f000 80a3 	beq.w	8005154 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800500e:	f7fc ffd9 	bl	8001fc4 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800501a:	429a      	cmp	r2, r3
 800501c:	d302      	bcc.n	8005024 <UART_WaitOnFlagUntilTimeout+0x32>
 800501e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005020:	2b00      	cmp	r3, #0
 8005022:	d13f      	bne.n	80050a4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800502c:	e853 3f00 	ldrex	r3, [r3]
 8005030:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005034:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005038:	667b      	str	r3, [r7, #100]	; 0x64
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	461a      	mov	r2, r3
 8005040:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005042:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005044:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005046:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005048:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800504a:	e841 2300 	strex	r3, r2, [r1]
 800504e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005050:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1e6      	bne.n	8005024 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	3308      	adds	r3, #8
 800505c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005060:	e853 3f00 	ldrex	r3, [r3]
 8005064:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005068:	f023 0301 	bic.w	r3, r3, #1
 800506c:	663b      	str	r3, [r7, #96]	; 0x60
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	3308      	adds	r3, #8
 8005074:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005076:	64ba      	str	r2, [r7, #72]	; 0x48
 8005078:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800507c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800507e:	e841 2300 	strex	r3, r2, [r1]
 8005082:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1e5      	bne.n	8005056 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2220      	movs	r2, #32
 800508e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2220      	movs	r2, #32
 8005094:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e068      	b.n	8005176 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0304 	and.w	r3, r3, #4
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d050      	beq.n	8005154 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	69db      	ldr	r3, [r3, #28]
 80050b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050c0:	d148      	bne.n	8005154 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050ca:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d4:	e853 3f00 	ldrex	r3, [r3]
 80050d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	461a      	mov	r2, r3
 80050e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ea:	637b      	str	r3, [r7, #52]	; 0x34
 80050ec:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050f2:	e841 2300 	strex	r3, r2, [r1]
 80050f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80050f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1e6      	bne.n	80050cc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	3308      	adds	r3, #8
 8005104:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	e853 3f00 	ldrex	r3, [r3]
 800510c:	613b      	str	r3, [r7, #16]
   return(result);
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	f023 0301 	bic.w	r3, r3, #1
 8005114:	66bb      	str	r3, [r7, #104]	; 0x68
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	3308      	adds	r3, #8
 800511c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800511e:	623a      	str	r2, [r7, #32]
 8005120:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005122:	69f9      	ldr	r1, [r7, #28]
 8005124:	6a3a      	ldr	r2, [r7, #32]
 8005126:	e841 2300 	strex	r3, r2, [r1]
 800512a:	61bb      	str	r3, [r7, #24]
   return(result);
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1e5      	bne.n	80050fe <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2220      	movs	r2, #32
 8005136:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2220      	movs	r2, #32
 800513c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2220      	movs	r2, #32
 8005144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e010      	b.n	8005176 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	69da      	ldr	r2, [r3, #28]
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	4013      	ands	r3, r2
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	429a      	cmp	r2, r3
 8005162:	bf0c      	ite	eq
 8005164:	2301      	moveq	r3, #1
 8005166:	2300      	movne	r3, #0
 8005168:	b2db      	uxtb	r3, r3
 800516a:	461a      	mov	r2, r3
 800516c:	79fb      	ldrb	r3, [r7, #7]
 800516e:	429a      	cmp	r2, r3
 8005170:	f43f af48 	beq.w	8005004 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3770      	adds	r7, #112	; 0x70
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800517e:	b480      	push	{r7}
 8005180:	b095      	sub	sp, #84	; 0x54
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800518e:	e853 3f00 	ldrex	r3, [r3]
 8005192:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005196:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800519a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	461a      	mov	r2, r3
 80051a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051a4:	643b      	str	r3, [r7, #64]	; 0x40
 80051a6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051ac:	e841 2300 	strex	r3, r2, [r1]
 80051b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1e6      	bne.n	8005186 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	3308      	adds	r3, #8
 80051be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	e853 3f00 	ldrex	r3, [r3]
 80051c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	f023 0301 	bic.w	r3, r3, #1
 80051ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	3308      	adds	r3, #8
 80051d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051e0:	e841 2300 	strex	r3, r2, [r1]
 80051e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1e5      	bne.n	80051b8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d118      	bne.n	8005226 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	e853 3f00 	ldrex	r3, [r3]
 8005200:	60bb      	str	r3, [r7, #8]
   return(result);
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	f023 0310 	bic.w	r3, r3, #16
 8005208:	647b      	str	r3, [r7, #68]	; 0x44
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	461a      	mov	r2, r3
 8005210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005212:	61bb      	str	r3, [r7, #24]
 8005214:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005216:	6979      	ldr	r1, [r7, #20]
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	e841 2300 	strex	r3, r2, [r1]
 800521e:	613b      	str	r3, [r7, #16]
   return(result);
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1e6      	bne.n	80051f4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2220      	movs	r2, #32
 800522a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	669a      	str	r2, [r3, #104]	; 0x68
}
 800523a:	bf00      	nop
 800523c:	3754      	adds	r7, #84	; 0x54
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr

08005246 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b084      	sub	sp, #16
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005252:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f7ff fb51 	bl	800490c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800526a:	bf00      	nop
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b088      	sub	sp, #32
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	e853 3f00 	ldrex	r3, [r3]
 8005286:	60bb      	str	r3, [r7, #8]
   return(result);
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800528e:	61fb      	str	r3, [r7, #28]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	461a      	mov	r2, r3
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	61bb      	str	r3, [r7, #24]
 800529a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529c:	6979      	ldr	r1, [r7, #20]
 800529e:	69ba      	ldr	r2, [r7, #24]
 80052a0:	e841 2300 	strex	r3, r2, [r1]
 80052a4:	613b      	str	r3, [r7, #16]
   return(result);
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1e6      	bne.n	800527a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2220      	movs	r2, #32
 80052b0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f7ff fb1d 	bl	80048f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052be:	bf00      	nop
 80052c0:	3720      	adds	r7, #32
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
	...

080052c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052c8:	b084      	sub	sp, #16
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b084      	sub	sp, #16
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
 80052d2:	f107 001c 	add.w	r0, r7, #28
 80052d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d120      	bne.n	8005322 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68da      	ldr	r2, [r3, #12]
 80052f0:	4b20      	ldr	r3, [pc, #128]	; (8005374 <USB_CoreInit+0xac>)
 80052f2:	4013      	ands	r3, r2
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005306:	2b01      	cmp	r3, #1
 8005308:	d105      	bne.n	8005316 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 fa96 	bl	8005848 <USB_CoreReset>
 800531c:	4603      	mov	r3, r0
 800531e:	73fb      	strb	r3, [r7, #15]
 8005320:	e010      	b.n	8005344 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 fa8a 	bl	8005848 <USB_CoreReset>
 8005334:	4603      	mov	r3, r0
 8005336:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005346:	2b01      	cmp	r3, #1
 8005348:	d10b      	bne.n	8005362 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f043 0206 	orr.w	r2, r3, #6
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f043 0220 	orr.w	r2, r3, #32
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005362:	7bfb      	ldrb	r3, [r7, #15]
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800536e:	b004      	add	sp, #16
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	ffbdffbf 	.word	0xffbdffbf

08005378 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f023 0201 	bic.w	r2, r3, #1
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	370c      	adds	r7, #12
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b084      	sub	sp, #16
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
 80053a2:	460b      	mov	r3, r1
 80053a4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80053a6:	2300      	movs	r3, #0
 80053a8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80053b6:	78fb      	ldrb	r3, [r7, #3]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d115      	bne.n	80053e8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80053c8:	2001      	movs	r0, #1
 80053ca:	f7fc fe07 	bl	8001fdc <HAL_Delay>
      ms++;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	3301      	adds	r3, #1
 80053d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 fa29 	bl	800582c <USB_GetMode>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d01e      	beq.n	800541e <USB_SetCurrentMode+0x84>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2b31      	cmp	r3, #49	; 0x31
 80053e4:	d9f0      	bls.n	80053c8 <USB_SetCurrentMode+0x2e>
 80053e6:	e01a      	b.n	800541e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80053e8:	78fb      	ldrb	r3, [r7, #3]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d115      	bne.n	800541a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80053fa:	2001      	movs	r0, #1
 80053fc:	f7fc fdee 	bl	8001fdc <HAL_Delay>
      ms++;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	3301      	adds	r3, #1
 8005404:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 fa10 	bl	800582c <USB_GetMode>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d005      	beq.n	800541e <USB_SetCurrentMode+0x84>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2b31      	cmp	r3, #49	; 0x31
 8005416:	d9f0      	bls.n	80053fa <USB_SetCurrentMode+0x60>
 8005418:	e001      	b.n	800541e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e005      	b.n	800542a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2b32      	cmp	r3, #50	; 0x32
 8005422:	d101      	bne.n	8005428 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e000      	b.n	800542a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
	...

08005434 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005434:	b084      	sub	sp, #16
 8005436:	b580      	push	{r7, lr}
 8005438:	b086      	sub	sp, #24
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
 800543e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005442:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005446:	2300      	movs	r3, #0
 8005448:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800544e:	2300      	movs	r3, #0
 8005450:	613b      	str	r3, [r7, #16]
 8005452:	e009      	b.n	8005468 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	3340      	adds	r3, #64	; 0x40
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	4413      	add	r3, r2
 800545e:	2200      	movs	r2, #0
 8005460:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	3301      	adds	r3, #1
 8005466:	613b      	str	r3, [r7, #16]
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	2b0e      	cmp	r3, #14
 800546c:	d9f2      	bls.n	8005454 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800546e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005470:	2b00      	cmp	r3, #0
 8005472:	d11c      	bne.n	80054ae <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005482:	f043 0302 	orr.w	r3, r3, #2
 8005486:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	601a      	str	r2, [r3, #0]
 80054ac:	e005      	b.n	80054ba <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054c0:	461a      	mov	r2, r3
 80054c2:	2300      	movs	r3, #0
 80054c4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054cc:	4619      	mov	r1, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d4:	461a      	mov	r2, r3
 80054d6:	680b      	ldr	r3, [r1, #0]
 80054d8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d10c      	bne.n	80054fa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80054e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d104      	bne.n	80054f0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80054e6:	2100      	movs	r1, #0
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f965 	bl	80057b8 <USB_SetDevSpeed>
 80054ee:	e008      	b.n	8005502 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80054f0:	2101      	movs	r1, #1
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f960 	bl	80057b8 <USB_SetDevSpeed>
 80054f8:	e003      	b.n	8005502 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80054fa:	2103      	movs	r1, #3
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 f95b 	bl	80057b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005502:	2110      	movs	r1, #16
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 f8f3 	bl	80056f0 <USB_FlushTxFifo>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d001      	beq.n	8005514 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 f91f 	bl	8005758 <USB_FlushRxFifo>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d001      	beq.n	8005524 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800552a:	461a      	mov	r2, r3
 800552c:	2300      	movs	r3, #0
 800552e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005536:	461a      	mov	r2, r3
 8005538:	2300      	movs	r3, #0
 800553a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005542:	461a      	mov	r2, r3
 8005544:	2300      	movs	r3, #0
 8005546:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005548:	2300      	movs	r3, #0
 800554a:	613b      	str	r3, [r7, #16]
 800554c:	e043      	b.n	80055d6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	015a      	lsls	r2, r3, #5
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	4413      	add	r3, r2
 8005556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005560:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005564:	d118      	bne.n	8005598 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d10a      	bne.n	8005582 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	015a      	lsls	r2, r3, #5
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	4413      	add	r3, r2
 8005574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005578:	461a      	mov	r2, r3
 800557a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800557e:	6013      	str	r3, [r2, #0]
 8005580:	e013      	b.n	80055aa <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	4413      	add	r3, r2
 800558a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558e:	461a      	mov	r2, r3
 8005590:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005594:	6013      	str	r3, [r2, #0]
 8005596:	e008      	b.n	80055aa <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	015a      	lsls	r2, r3, #5
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4413      	add	r3, r2
 80055a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a4:	461a      	mov	r2, r3
 80055a6:	2300      	movs	r3, #0
 80055a8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	015a      	lsls	r2, r3, #5
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	4413      	add	r3, r2
 80055b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b6:	461a      	mov	r2, r3
 80055b8:	2300      	movs	r3, #0
 80055ba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c8:	461a      	mov	r2, r3
 80055ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	3301      	adds	r3, #1
 80055d4:	613b      	str	r3, [r7, #16]
 80055d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d3b7      	bcc.n	800554e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055de:	2300      	movs	r3, #0
 80055e0:	613b      	str	r3, [r7, #16]
 80055e2:	e043      	b.n	800566c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055fa:	d118      	bne.n	800562e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10a      	bne.n	8005618 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	4413      	add	r3, r2
 800560a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800560e:	461a      	mov	r2, r3
 8005610:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005614:	6013      	str	r3, [r2, #0]
 8005616:	e013      	b.n	8005640 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4413      	add	r3, r2
 8005620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005624:	461a      	mov	r2, r3
 8005626:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800562a:	6013      	str	r3, [r2, #0]
 800562c:	e008      	b.n	8005640 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	015a      	lsls	r2, r3, #5
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	4413      	add	r3, r2
 8005636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800563a:	461a      	mov	r2, r3
 800563c:	2300      	movs	r3, #0
 800563e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	015a      	lsls	r2, r3, #5
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	4413      	add	r3, r2
 8005648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800564c:	461a      	mov	r2, r3
 800564e:	2300      	movs	r3, #0
 8005650:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	015a      	lsls	r2, r3, #5
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	4413      	add	r3, r2
 800565a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565e:	461a      	mov	r2, r3
 8005660:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005664:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	3301      	adds	r3, #1
 800566a:	613b      	str	r3, [r7, #16]
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	429a      	cmp	r2, r3
 8005672:	d3b7      	bcc.n	80055e4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005682:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005686:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005694:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005698:	2b00      	cmp	r3, #0
 800569a:	d105      	bne.n	80056a8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	f043 0210 	orr.w	r2, r3, #16
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	699a      	ldr	r2, [r3, #24]
 80056ac:	4b0e      	ldr	r3, [pc, #56]	; (80056e8 <USB_DevInit+0x2b4>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80056b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d005      	beq.n	80056c6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	f043 0208 	orr.w	r2, r3, #8
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80056c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d105      	bne.n	80056d8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	699a      	ldr	r2, [r3, #24]
 80056d0:	4b06      	ldr	r3, [pc, #24]	; (80056ec <USB_DevInit+0x2b8>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80056d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3718      	adds	r7, #24
 80056de:	46bd      	mov	sp, r7
 80056e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056e4:	b004      	add	sp, #16
 80056e6:	4770      	bx	lr
 80056e8:	803c3800 	.word	0x803c3800
 80056ec:	40000004 	.word	0x40000004

080056f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80056fa:	2300      	movs	r3, #0
 80056fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	3301      	adds	r3, #1
 8005702:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	4a13      	ldr	r2, [pc, #76]	; (8005754 <USB_FlushTxFifo+0x64>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d901      	bls.n	8005710 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e01b      	b.n	8005748 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	2b00      	cmp	r3, #0
 8005716:	daf2      	bge.n	80056fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005718:	2300      	movs	r3, #0
 800571a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	019b      	lsls	r3, r3, #6
 8005720:	f043 0220 	orr.w	r2, r3, #32
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	3301      	adds	r3, #1
 800572c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	4a08      	ldr	r2, [pc, #32]	; (8005754 <USB_FlushTxFifo+0x64>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d901      	bls.n	800573a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e006      	b.n	8005748 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	f003 0320 	and.w	r3, r3, #32
 8005742:	2b20      	cmp	r3, #32
 8005744:	d0f0      	beq.n	8005728 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	00030d40 	.word	0x00030d40

08005758 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005760:	2300      	movs	r3, #0
 8005762:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	3301      	adds	r3, #1
 8005768:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	4a11      	ldr	r2, [pc, #68]	; (80057b4 <USB_FlushRxFifo+0x5c>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d901      	bls.n	8005776 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e018      	b.n	80057a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	2b00      	cmp	r3, #0
 800577c:	daf2      	bge.n	8005764 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800577e:	2300      	movs	r3, #0
 8005780:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2210      	movs	r2, #16
 8005786:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	3301      	adds	r3, #1
 800578c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	4a08      	ldr	r2, [pc, #32]	; (80057b4 <USB_FlushRxFifo+0x5c>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d901      	bls.n	800579a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e006      	b.n	80057a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	f003 0310 	and.w	r3, r3, #16
 80057a2:	2b10      	cmp	r3, #16
 80057a4:	d0f0      	beq.n	8005788 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3714      	adds	r7, #20
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	00030d40 	.word	0x00030d40

080057b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	460b      	mov	r3, r1
 80057c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	78fb      	ldrb	r3, [r7, #3]
 80057d2:	68f9      	ldr	r1, [r7, #12]
 80057d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057d8:	4313      	orrs	r3, r2
 80057da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3714      	adds	r7, #20
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b085      	sub	sp, #20
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005804:	f023 0303 	bic.w	r3, r3, #3
 8005808:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005818:	f043 0302 	orr.w	r3, r3, #2
 800581c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	f003 0301 	and.w	r3, r3, #1
}
 800583c:	4618      	mov	r0, r3
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005850:	2300      	movs	r3, #0
 8005852:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	3301      	adds	r3, #1
 8005858:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	4a13      	ldr	r2, [pc, #76]	; (80058ac <USB_CoreReset+0x64>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d901      	bls.n	8005866 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e01b      	b.n	800589e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	2b00      	cmp	r3, #0
 800586c:	daf2      	bge.n	8005854 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800586e:	2300      	movs	r3, #0
 8005870:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	f043 0201 	orr.w	r2, r3, #1
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	3301      	adds	r3, #1
 8005882:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	4a09      	ldr	r2, [pc, #36]	; (80058ac <USB_CoreReset+0x64>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d901      	bls.n	8005890 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e006      	b.n	800589e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	2b01      	cmp	r3, #1
 800589a:	d0f0      	beq.n	800587e <USB_CoreReset+0x36>

  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3714      	adds	r7, #20
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	00030d40 	.word	0x00030d40

080058b0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80058b0:	b480      	push	{r7}
 80058b2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80058b4:	bf00      	nop
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
	...

080058c0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058c6:	f3ef 8305 	mrs	r3, IPSR
 80058ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80058cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10f      	bne.n	80058f2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058d2:	f3ef 8310 	mrs	r3, PRIMASK
 80058d6:	607b      	str	r3, [r7, #4]
  return(result);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d105      	bne.n	80058ea <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80058de:	f3ef 8311 	mrs	r3, BASEPRI
 80058e2:	603b      	str	r3, [r7, #0]
  return(result);
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d007      	beq.n	80058fa <osKernelInitialize+0x3a>
 80058ea:	4b0e      	ldr	r3, [pc, #56]	; (8005924 <osKernelInitialize+0x64>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d103      	bne.n	80058fa <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80058f2:	f06f 0305 	mvn.w	r3, #5
 80058f6:	60fb      	str	r3, [r7, #12]
 80058f8:	e00c      	b.n	8005914 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80058fa:	4b0a      	ldr	r3, [pc, #40]	; (8005924 <osKernelInitialize+0x64>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d105      	bne.n	800590e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005902:	4b08      	ldr	r3, [pc, #32]	; (8005924 <osKernelInitialize+0x64>)
 8005904:	2201      	movs	r2, #1
 8005906:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005908:	2300      	movs	r3, #0
 800590a:	60fb      	str	r3, [r7, #12]
 800590c:	e002      	b.n	8005914 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800590e:	f04f 33ff 	mov.w	r3, #4294967295
 8005912:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005914:	68fb      	ldr	r3, [r7, #12]
}
 8005916:	4618      	mov	r0, r3
 8005918:	3714      	adds	r7, #20
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	20000ed0 	.word	0x20000ed0

08005928 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800592e:	f3ef 8305 	mrs	r3, IPSR
 8005932:	60bb      	str	r3, [r7, #8]
  return(result);
 8005934:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10f      	bne.n	800595a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800593a:	f3ef 8310 	mrs	r3, PRIMASK
 800593e:	607b      	str	r3, [r7, #4]
  return(result);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d105      	bne.n	8005952 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005946:	f3ef 8311 	mrs	r3, BASEPRI
 800594a:	603b      	str	r3, [r7, #0]
  return(result);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d007      	beq.n	8005962 <osKernelStart+0x3a>
 8005952:	4b0f      	ldr	r3, [pc, #60]	; (8005990 <osKernelStart+0x68>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2b02      	cmp	r3, #2
 8005958:	d103      	bne.n	8005962 <osKernelStart+0x3a>
    stat = osErrorISR;
 800595a:	f06f 0305 	mvn.w	r3, #5
 800595e:	60fb      	str	r3, [r7, #12]
 8005960:	e010      	b.n	8005984 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005962:	4b0b      	ldr	r3, [pc, #44]	; (8005990 <osKernelStart+0x68>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d109      	bne.n	800597e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800596a:	f7ff ffa1 	bl	80058b0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800596e:	4b08      	ldr	r3, [pc, #32]	; (8005990 <osKernelStart+0x68>)
 8005970:	2202      	movs	r2, #2
 8005972:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005974:	f001 f8b4 	bl	8006ae0 <vTaskStartScheduler>
      stat = osOK;
 8005978:	2300      	movs	r3, #0
 800597a:	60fb      	str	r3, [r7, #12]
 800597c:	e002      	b.n	8005984 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800597e:	f04f 33ff 	mov.w	r3, #4294967295
 8005982:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005984:	68fb      	ldr	r3, [r7, #12]
}
 8005986:	4618      	mov	r0, r3
 8005988:	3710      	adds	r7, #16
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	20000ed0 	.word	0x20000ed0

08005994 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005994:	b580      	push	{r7, lr}
 8005996:	b090      	sub	sp, #64	; 0x40
 8005998:	af04      	add	r7, sp, #16
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80059a0:	2300      	movs	r3, #0
 80059a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059a4:	f3ef 8305 	mrs	r3, IPSR
 80059a8:	61fb      	str	r3, [r7, #28]
  return(result);
 80059aa:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f040 808f 	bne.w	8005ad0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059b2:	f3ef 8310 	mrs	r3, PRIMASK
 80059b6:	61bb      	str	r3, [r7, #24]
  return(result);
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d105      	bne.n	80059ca <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80059be:	f3ef 8311 	mrs	r3, BASEPRI
 80059c2:	617b      	str	r3, [r7, #20]
  return(result);
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d003      	beq.n	80059d2 <osThreadNew+0x3e>
 80059ca:	4b44      	ldr	r3, [pc, #272]	; (8005adc <osThreadNew+0x148>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d07e      	beq.n	8005ad0 <osThreadNew+0x13c>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d07b      	beq.n	8005ad0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80059d8:	2380      	movs	r3, #128	; 0x80
 80059da:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80059dc:	2318      	movs	r3, #24
 80059de:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80059e0:	2300      	movs	r3, #0
 80059e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80059e4:	f04f 33ff 	mov.w	r3, #4294967295
 80059e8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d045      	beq.n	8005a7c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d002      	beq.n	80059fe <osThreadNew+0x6a>
        name = attr->name;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d002      	beq.n	8005a0c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d008      	beq.n	8005a24 <osThreadNew+0x90>
 8005a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a14:	2b38      	cmp	r3, #56	; 0x38
 8005a16:	d805      	bhi.n	8005a24 <osThreadNew+0x90>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f003 0301 	and.w	r3, r3, #1
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d001      	beq.n	8005a28 <osThreadNew+0x94>
        return (NULL);
 8005a24:	2300      	movs	r3, #0
 8005a26:	e054      	b.n	8005ad2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	695b      	ldr	r3, [r3, #20]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d003      	beq.n	8005a38 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	089b      	lsrs	r3, r3, #2
 8005a36:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00e      	beq.n	8005a5e <osThreadNew+0xca>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	2b5b      	cmp	r3, #91	; 0x5b
 8005a46:	d90a      	bls.n	8005a5e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d006      	beq.n	8005a5e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	695b      	ldr	r3, [r3, #20]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d002      	beq.n	8005a5e <osThreadNew+0xca>
        mem = 1;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	623b      	str	r3, [r7, #32]
 8005a5c:	e010      	b.n	8005a80 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10c      	bne.n	8005a80 <osThreadNew+0xec>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d108      	bne.n	8005a80 <osThreadNew+0xec>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d104      	bne.n	8005a80 <osThreadNew+0xec>
          mem = 0;
 8005a76:	2300      	movs	r3, #0
 8005a78:	623b      	str	r3, [r7, #32]
 8005a7a:	e001      	b.n	8005a80 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005a80:	6a3b      	ldr	r3, [r7, #32]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d110      	bne.n	8005aa8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a8e:	9202      	str	r2, [sp, #8]
 8005a90:	9301      	str	r3, [sp, #4]
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	9300      	str	r3, [sp, #0]
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f000 fe3f 	bl	8006720 <xTaskCreateStatic>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	613b      	str	r3, [r7, #16]
 8005aa6:	e013      	b.n	8005ad0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005aa8:	6a3b      	ldr	r3, [r7, #32]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d110      	bne.n	8005ad0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	f107 0310 	add.w	r3, r7, #16
 8005ab6:	9301      	str	r3, [sp, #4]
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f000 fe90 	bl	80067e6 <xTaskCreate>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d001      	beq.n	8005ad0 <osThreadNew+0x13c>
          hTask = NULL;
 8005acc:	2300      	movs	r3, #0
 8005ace:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005ad0:	693b      	ldr	r3, [r7, #16]
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3730      	adds	r7, #48	; 0x30
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	20000ed0 	.word	0x20000ed0

08005ae0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ae8:	f3ef 8305 	mrs	r3, IPSR
 8005aec:	613b      	str	r3, [r7, #16]
  return(result);
 8005aee:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d10f      	bne.n	8005b14 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005af4:	f3ef 8310 	mrs	r3, PRIMASK
 8005af8:	60fb      	str	r3, [r7, #12]
  return(result);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d105      	bne.n	8005b0c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b00:	f3ef 8311 	mrs	r3, BASEPRI
 8005b04:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d007      	beq.n	8005b1c <osDelay+0x3c>
 8005b0c:	4b0a      	ldr	r3, [pc, #40]	; (8005b38 <osDelay+0x58>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d103      	bne.n	8005b1c <osDelay+0x3c>
    stat = osErrorISR;
 8005b14:	f06f 0305 	mvn.w	r3, #5
 8005b18:	617b      	str	r3, [r7, #20]
 8005b1a:	e007      	b.n	8005b2c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d002      	beq.n	8005b2c <osDelay+0x4c>
      vTaskDelay(ticks);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 ffa4 	bl	8006a74 <vTaskDelay>
    }
  }

  return (stat);
 8005b2c:	697b      	ldr	r3, [r7, #20]
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3718      	adds	r7, #24
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	20000ed0 	.word	0x20000ed0

08005b3c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	4a07      	ldr	r2, [pc, #28]	; (8005b68 <vApplicationGetIdleTaskMemory+0x2c>)
 8005b4c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	4a06      	ldr	r2, [pc, #24]	; (8005b6c <vApplicationGetIdleTaskMemory+0x30>)
 8005b52:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2280      	movs	r2, #128	; 0x80
 8005b58:	601a      	str	r2, [r3, #0]
}
 8005b5a:	bf00      	nop
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	20000ed4 	.word	0x20000ed4
 8005b6c:	20000f30 	.word	0x20000f30

08005b70 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	4a07      	ldr	r2, [pc, #28]	; (8005b9c <vApplicationGetTimerTaskMemory+0x2c>)
 8005b80:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	4a06      	ldr	r2, [pc, #24]	; (8005ba0 <vApplicationGetTimerTaskMemory+0x30>)
 8005b86:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b8e:	601a      	str	r2, [r3, #0]
}
 8005b90:	bf00      	nop
 8005b92:	3714      	adds	r7, #20
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr
 8005b9c:	20001130 	.word	0x20001130
 8005ba0:	2000118c 	.word	0x2000118c

08005ba4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f103 0208 	add.w	r2, r3, #8
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8005bbc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f103 0208 	add.w	r2, r3, #8
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f103 0208 	add.w	r2, r3, #8
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005bf2:	bf00      	nop
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b085      	sub	sp, #20
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
 8005c06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	689a      	ldr	r2, [r3, #8]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	683a      	ldr	r2, [r7, #0]
 8005c22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	683a      	ldr	r2, [r7, #0]
 8005c28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	1c5a      	adds	r2, r3, #1
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	601a      	str	r2, [r3, #0]
}
 8005c3a:	bf00      	nop
 8005c3c:	3714      	adds	r7, #20
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c46:	b480      	push	{r7}
 8005c48:	b085      	sub	sp, #20
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
 8005c4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c5c:	d103      	bne.n	8005c66 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	60fb      	str	r3, [r7, #12]
 8005c64:	e00c      	b.n	8005c80 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	3308      	adds	r3, #8
 8005c6a:	60fb      	str	r3, [r7, #12]
 8005c6c:	e002      	b.n	8005c74 <vListInsert+0x2e>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	60fb      	str	r3, [r7, #12]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d2f6      	bcs.n	8005c6e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	685a      	ldr	r2, [r3, #4]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	683a      	ldr	r2, [r7, #0]
 8005c8e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	683a      	ldr	r2, [r7, #0]
 8005c9a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	1c5a      	adds	r2, r3, #1
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	601a      	str	r2, [r3, #0]
}
 8005cac:	bf00      	nop
 8005cae:	3714      	adds	r7, #20
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	6892      	ldr	r2, [r2, #8]
 8005cce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	6852      	ldr	r2, [r2, #4]
 8005cd8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d103      	bne.n	8005cec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	1e5a      	subs	r2, r3, #1
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10c      	bne.n	8005d3a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d24:	b672      	cpsid	i
 8005d26:	f383 8811 	msr	BASEPRI, r3
 8005d2a:	f3bf 8f6f 	isb	sy
 8005d2e:	f3bf 8f4f 	dsb	sy
 8005d32:	b662      	cpsie	i
 8005d34:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005d36:	bf00      	nop
 8005d38:	e7fe      	b.n	8005d38 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005d3a:	f002 f87f 	bl	8007e3c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d46:	68f9      	ldr	r1, [r7, #12]
 8005d48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d4a:	fb01 f303 	mul.w	r3, r1, r3
 8005d4e:	441a      	add	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	68f9      	ldr	r1, [r7, #12]
 8005d6e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d70:	fb01 f303 	mul.w	r3, r1, r3
 8005d74:	441a      	add	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	22ff      	movs	r2, #255	; 0xff
 8005d7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	22ff      	movs	r2, #255	; 0xff
 8005d86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d114      	bne.n	8005dba <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d01a      	beq.n	8005dce <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	3310      	adds	r3, #16
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f001 f937 	bl	8007010 <xTaskRemoveFromEventList>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d012      	beq.n	8005dce <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005da8:	4b0c      	ldr	r3, [pc, #48]	; (8005ddc <xQueueGenericReset+0xd0>)
 8005daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dae:	601a      	str	r2, [r3, #0]
 8005db0:	f3bf 8f4f 	dsb	sy
 8005db4:	f3bf 8f6f 	isb	sy
 8005db8:	e009      	b.n	8005dce <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	3310      	adds	r3, #16
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7ff fef0 	bl	8005ba4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	3324      	adds	r3, #36	; 0x24
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7ff feeb 	bl	8005ba4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005dce:	f002 f869 	bl	8007ea4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005dd2:	2301      	movs	r3, #1
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	e000ed04 	.word	0xe000ed04

08005de0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b08e      	sub	sp, #56	; 0x38
 8005de4:	af02      	add	r7, sp, #8
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
 8005dec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d10c      	bne.n	8005e0e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8005df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df8:	b672      	cpsid	i
 8005dfa:	f383 8811 	msr	BASEPRI, r3
 8005dfe:	f3bf 8f6f 	isb	sy
 8005e02:	f3bf 8f4f 	dsb	sy
 8005e06:	b662      	cpsie	i
 8005e08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e0a:	bf00      	nop
 8005e0c:	e7fe      	b.n	8005e0c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10c      	bne.n	8005e2e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8005e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e18:	b672      	cpsid	i
 8005e1a:	f383 8811 	msr	BASEPRI, r3
 8005e1e:	f3bf 8f6f 	isb	sy
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	b662      	cpsie	i
 8005e28:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e2a:	bf00      	nop
 8005e2c:	e7fe      	b.n	8005e2c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d002      	beq.n	8005e3a <xQueueGenericCreateStatic+0x5a>
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d001      	beq.n	8005e3e <xQueueGenericCreateStatic+0x5e>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e000      	b.n	8005e40 <xQueueGenericCreateStatic+0x60>
 8005e3e:	2300      	movs	r3, #0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10c      	bne.n	8005e5e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8005e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e48:	b672      	cpsid	i
 8005e4a:	f383 8811 	msr	BASEPRI, r3
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	b662      	cpsie	i
 8005e58:	623b      	str	r3, [r7, #32]
}
 8005e5a:	bf00      	nop
 8005e5c:	e7fe      	b.n	8005e5c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d102      	bne.n	8005e6a <xQueueGenericCreateStatic+0x8a>
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d101      	bne.n	8005e6e <xQueueGenericCreateStatic+0x8e>
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e000      	b.n	8005e70 <xQueueGenericCreateStatic+0x90>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10c      	bne.n	8005e8e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8005e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e78:	b672      	cpsid	i
 8005e7a:	f383 8811 	msr	BASEPRI, r3
 8005e7e:	f3bf 8f6f 	isb	sy
 8005e82:	f3bf 8f4f 	dsb	sy
 8005e86:	b662      	cpsie	i
 8005e88:	61fb      	str	r3, [r7, #28]
}
 8005e8a:	bf00      	nop
 8005e8c:	e7fe      	b.n	8005e8c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005e8e:	2350      	movs	r3, #80	; 0x50
 8005e90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	2b50      	cmp	r3, #80	; 0x50
 8005e96:	d00c      	beq.n	8005eb2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8005e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9c:	b672      	cpsid	i
 8005e9e:	f383 8811 	msr	BASEPRI, r3
 8005ea2:	f3bf 8f6f 	isb	sy
 8005ea6:	f3bf 8f4f 	dsb	sy
 8005eaa:	b662      	cpsie	i
 8005eac:	61bb      	str	r3, [r7, #24]
}
 8005eae:	bf00      	nop
 8005eb0:	e7fe      	b.n	8005eb0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005eb2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00d      	beq.n	8005eda <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ec6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ecc:	9300      	str	r3, [sp, #0]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	68b9      	ldr	r1, [r7, #8]
 8005ed4:	68f8      	ldr	r0, [r7, #12]
 8005ed6:	f000 f805 	bl	8005ee4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3730      	adds	r7, #48	; 0x30
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
 8005ef0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d103      	bne.n	8005f00 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	69ba      	ldr	r2, [r7, #24]
 8005efc:	601a      	str	r2, [r3, #0]
 8005efe:	e002      	b.n	8005f06 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005f12:	2101      	movs	r1, #1
 8005f14:	69b8      	ldr	r0, [r7, #24]
 8005f16:	f7ff fef9 	bl	8005d0c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	78fa      	ldrb	r2, [r7, #3]
 8005f1e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005f22:	bf00      	nop
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
	...

08005f2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b08e      	sub	sp, #56	; 0x38
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]
 8005f38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10c      	bne.n	8005f62 <xQueueGenericSend+0x36>
	__asm volatile
 8005f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4c:	b672      	cpsid	i
 8005f4e:	f383 8811 	msr	BASEPRI, r3
 8005f52:	f3bf 8f6f 	isb	sy
 8005f56:	f3bf 8f4f 	dsb	sy
 8005f5a:	b662      	cpsie	i
 8005f5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f5e:	bf00      	nop
 8005f60:	e7fe      	b.n	8005f60 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d103      	bne.n	8005f70 <xQueueGenericSend+0x44>
 8005f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d101      	bne.n	8005f74 <xQueueGenericSend+0x48>
 8005f70:	2301      	movs	r3, #1
 8005f72:	e000      	b.n	8005f76 <xQueueGenericSend+0x4a>
 8005f74:	2300      	movs	r3, #0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d10c      	bne.n	8005f94 <xQueueGenericSend+0x68>
	__asm volatile
 8005f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7e:	b672      	cpsid	i
 8005f80:	f383 8811 	msr	BASEPRI, r3
 8005f84:	f3bf 8f6f 	isb	sy
 8005f88:	f3bf 8f4f 	dsb	sy
 8005f8c:	b662      	cpsie	i
 8005f8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f90:	bf00      	nop
 8005f92:	e7fe      	b.n	8005f92 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d103      	bne.n	8005fa2 <xQueueGenericSend+0x76>
 8005f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d101      	bne.n	8005fa6 <xQueueGenericSend+0x7a>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e000      	b.n	8005fa8 <xQueueGenericSend+0x7c>
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d10c      	bne.n	8005fc6 <xQueueGenericSend+0x9a>
	__asm volatile
 8005fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb0:	b672      	cpsid	i
 8005fb2:	f383 8811 	msr	BASEPRI, r3
 8005fb6:	f3bf 8f6f 	isb	sy
 8005fba:	f3bf 8f4f 	dsb	sy
 8005fbe:	b662      	cpsie	i
 8005fc0:	623b      	str	r3, [r7, #32]
}
 8005fc2:	bf00      	nop
 8005fc4:	e7fe      	b.n	8005fc4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fc6:	f001 f9e9 	bl	800739c <xTaskGetSchedulerState>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d102      	bne.n	8005fd6 <xQueueGenericSend+0xaa>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d101      	bne.n	8005fda <xQueueGenericSend+0xae>
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e000      	b.n	8005fdc <xQueueGenericSend+0xb0>
 8005fda:	2300      	movs	r3, #0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10c      	bne.n	8005ffa <xQueueGenericSend+0xce>
	__asm volatile
 8005fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe4:	b672      	cpsid	i
 8005fe6:	f383 8811 	msr	BASEPRI, r3
 8005fea:	f3bf 8f6f 	isb	sy
 8005fee:	f3bf 8f4f 	dsb	sy
 8005ff2:	b662      	cpsie	i
 8005ff4:	61fb      	str	r3, [r7, #28]
}
 8005ff6:	bf00      	nop
 8005ff8:	e7fe      	b.n	8005ff8 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ffa:	f001 ff1f 	bl	8007e3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006006:	429a      	cmp	r2, r3
 8006008:	d302      	bcc.n	8006010 <xQueueGenericSend+0xe4>
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	2b02      	cmp	r3, #2
 800600e:	d129      	bne.n	8006064 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006010:	683a      	ldr	r2, [r7, #0]
 8006012:	68b9      	ldr	r1, [r7, #8]
 8006014:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006016:	f000 fa15 	bl	8006444 <prvCopyDataToQueue>
 800601a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800601c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006020:	2b00      	cmp	r3, #0
 8006022:	d010      	beq.n	8006046 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006026:	3324      	adds	r3, #36	; 0x24
 8006028:	4618      	mov	r0, r3
 800602a:	f000 fff1 	bl	8007010 <xTaskRemoveFromEventList>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d013      	beq.n	800605c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006034:	4b3f      	ldr	r3, [pc, #252]	; (8006134 <xQueueGenericSend+0x208>)
 8006036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800603a:	601a      	str	r2, [r3, #0]
 800603c:	f3bf 8f4f 	dsb	sy
 8006040:	f3bf 8f6f 	isb	sy
 8006044:	e00a      	b.n	800605c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006048:	2b00      	cmp	r3, #0
 800604a:	d007      	beq.n	800605c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800604c:	4b39      	ldr	r3, [pc, #228]	; (8006134 <xQueueGenericSend+0x208>)
 800604e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006052:	601a      	str	r2, [r3, #0]
 8006054:	f3bf 8f4f 	dsb	sy
 8006058:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800605c:	f001 ff22 	bl	8007ea4 <vPortExitCritical>
				return pdPASS;
 8006060:	2301      	movs	r3, #1
 8006062:	e063      	b.n	800612c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d103      	bne.n	8006072 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800606a:	f001 ff1b 	bl	8007ea4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800606e:	2300      	movs	r3, #0
 8006070:	e05c      	b.n	800612c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006074:	2b00      	cmp	r3, #0
 8006076:	d106      	bne.n	8006086 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006078:	f107 0314 	add.w	r3, r7, #20
 800607c:	4618      	mov	r0, r3
 800607e:	f001 f82d 	bl	80070dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006082:	2301      	movs	r3, #1
 8006084:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006086:	f001 ff0d 	bl	8007ea4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800608a:	f000 fd93 	bl	8006bb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800608e:	f001 fed5 	bl	8007e3c <vPortEnterCritical>
 8006092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006094:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006098:	b25b      	sxtb	r3, r3
 800609a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800609e:	d103      	bne.n	80060a8 <xQueueGenericSend+0x17c>
 80060a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060ae:	b25b      	sxtb	r3, r3
 80060b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b4:	d103      	bne.n	80060be <xQueueGenericSend+0x192>
 80060b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060be:	f001 fef1 	bl	8007ea4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060c2:	1d3a      	adds	r2, r7, #4
 80060c4:	f107 0314 	add.w	r3, r7, #20
 80060c8:	4611      	mov	r1, r2
 80060ca:	4618      	mov	r0, r3
 80060cc:	f001 f81c 	bl	8007108 <xTaskCheckForTimeOut>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d124      	bne.n	8006120 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80060d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060d8:	f000 faac 	bl	8006634 <prvIsQueueFull>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d018      	beq.n	8006114 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80060e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e4:	3310      	adds	r3, #16
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	4611      	mov	r1, r2
 80060ea:	4618      	mov	r0, r3
 80060ec:	f000 ff3c 	bl	8006f68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80060f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060f2:	f000 fa37 	bl	8006564 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80060f6:	f000 fd6b 	bl	8006bd0 <xTaskResumeAll>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f47f af7c 	bne.w	8005ffa <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8006102:	4b0c      	ldr	r3, [pc, #48]	; (8006134 <xQueueGenericSend+0x208>)
 8006104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006108:	601a      	str	r2, [r3, #0]
 800610a:	f3bf 8f4f 	dsb	sy
 800610e:	f3bf 8f6f 	isb	sy
 8006112:	e772      	b.n	8005ffa <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006114:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006116:	f000 fa25 	bl	8006564 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800611a:	f000 fd59 	bl	8006bd0 <xTaskResumeAll>
 800611e:	e76c      	b.n	8005ffa <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006120:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006122:	f000 fa1f 	bl	8006564 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006126:	f000 fd53 	bl	8006bd0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800612a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800612c:	4618      	mov	r0, r3
 800612e:	3738      	adds	r7, #56	; 0x38
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	e000ed04 	.word	0xe000ed04

08006138 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b08e      	sub	sp, #56	; 0x38
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
 8006144:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800614a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10c      	bne.n	800616a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8006150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006154:	b672      	cpsid	i
 8006156:	f383 8811 	msr	BASEPRI, r3
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	b662      	cpsie	i
 8006164:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006166:	bf00      	nop
 8006168:	e7fe      	b.n	8006168 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d103      	bne.n	8006178 <xQueueGenericSendFromISR+0x40>
 8006170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006174:	2b00      	cmp	r3, #0
 8006176:	d101      	bne.n	800617c <xQueueGenericSendFromISR+0x44>
 8006178:	2301      	movs	r3, #1
 800617a:	e000      	b.n	800617e <xQueueGenericSendFromISR+0x46>
 800617c:	2300      	movs	r3, #0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d10c      	bne.n	800619c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8006182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006186:	b672      	cpsid	i
 8006188:	f383 8811 	msr	BASEPRI, r3
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	b662      	cpsie	i
 8006196:	623b      	str	r3, [r7, #32]
}
 8006198:	bf00      	nop
 800619a:	e7fe      	b.n	800619a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d103      	bne.n	80061aa <xQueueGenericSendFromISR+0x72>
 80061a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d101      	bne.n	80061ae <xQueueGenericSendFromISR+0x76>
 80061aa:	2301      	movs	r3, #1
 80061ac:	e000      	b.n	80061b0 <xQueueGenericSendFromISR+0x78>
 80061ae:	2300      	movs	r3, #0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10c      	bne.n	80061ce <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80061b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b8:	b672      	cpsid	i
 80061ba:	f383 8811 	msr	BASEPRI, r3
 80061be:	f3bf 8f6f 	isb	sy
 80061c2:	f3bf 8f4f 	dsb	sy
 80061c6:	b662      	cpsie	i
 80061c8:	61fb      	str	r3, [r7, #28]
}
 80061ca:	bf00      	nop
 80061cc:	e7fe      	b.n	80061cc <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80061ce:	f001 ff1d 	bl	800800c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80061d2:	f3ef 8211 	mrs	r2, BASEPRI
 80061d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061da:	b672      	cpsid	i
 80061dc:	f383 8811 	msr	BASEPRI, r3
 80061e0:	f3bf 8f6f 	isb	sy
 80061e4:	f3bf 8f4f 	dsb	sy
 80061e8:	b662      	cpsie	i
 80061ea:	61ba      	str	r2, [r7, #24]
 80061ec:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80061ee:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80061f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d302      	bcc.n	8006204 <xQueueGenericSendFromISR+0xcc>
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	2b02      	cmp	r3, #2
 8006202:	d12c      	bne.n	800625e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006206:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800620a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800620e:	683a      	ldr	r2, [r7, #0]
 8006210:	68b9      	ldr	r1, [r7, #8]
 8006212:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006214:	f000 f916 	bl	8006444 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006218:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800621c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006220:	d112      	bne.n	8006248 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006226:	2b00      	cmp	r3, #0
 8006228:	d016      	beq.n	8006258 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800622a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622c:	3324      	adds	r3, #36	; 0x24
 800622e:	4618      	mov	r0, r3
 8006230:	f000 feee 	bl	8007010 <xTaskRemoveFromEventList>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00e      	beq.n	8006258 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00b      	beq.n	8006258 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	601a      	str	r2, [r3, #0]
 8006246:	e007      	b.n	8006258 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006248:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800624c:	3301      	adds	r3, #1
 800624e:	b2db      	uxtb	r3, r3
 8006250:	b25a      	sxtb	r2, r3
 8006252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006258:	2301      	movs	r3, #1
 800625a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800625c:	e001      	b.n	8006262 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800625e:	2300      	movs	r3, #0
 8006260:	637b      	str	r3, [r7, #52]	; 0x34
 8006262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006264:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800626c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800626e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006270:	4618      	mov	r0, r3
 8006272:	3738      	adds	r7, #56	; 0x38
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b08c      	sub	sp, #48	; 0x30
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006284:	2300      	movs	r3, #0
 8006286:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800628c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10c      	bne.n	80062ac <xQueueReceive+0x34>
	__asm volatile
 8006292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006296:	b672      	cpsid	i
 8006298:	f383 8811 	msr	BASEPRI, r3
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	b662      	cpsie	i
 80062a6:	623b      	str	r3, [r7, #32]
}
 80062a8:	bf00      	nop
 80062aa:	e7fe      	b.n	80062aa <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d103      	bne.n	80062ba <xQueueReceive+0x42>
 80062b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <xQueueReceive+0x46>
 80062ba:	2301      	movs	r3, #1
 80062bc:	e000      	b.n	80062c0 <xQueueReceive+0x48>
 80062be:	2300      	movs	r3, #0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10c      	bne.n	80062de <xQueueReceive+0x66>
	__asm volatile
 80062c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c8:	b672      	cpsid	i
 80062ca:	f383 8811 	msr	BASEPRI, r3
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f3bf 8f4f 	dsb	sy
 80062d6:	b662      	cpsie	i
 80062d8:	61fb      	str	r3, [r7, #28]
}
 80062da:	bf00      	nop
 80062dc:	e7fe      	b.n	80062dc <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062de:	f001 f85d 	bl	800739c <xTaskGetSchedulerState>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d102      	bne.n	80062ee <xQueueReceive+0x76>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d101      	bne.n	80062f2 <xQueueReceive+0x7a>
 80062ee:	2301      	movs	r3, #1
 80062f0:	e000      	b.n	80062f4 <xQueueReceive+0x7c>
 80062f2:	2300      	movs	r3, #0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10c      	bne.n	8006312 <xQueueReceive+0x9a>
	__asm volatile
 80062f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fc:	b672      	cpsid	i
 80062fe:	f383 8811 	msr	BASEPRI, r3
 8006302:	f3bf 8f6f 	isb	sy
 8006306:	f3bf 8f4f 	dsb	sy
 800630a:	b662      	cpsie	i
 800630c:	61bb      	str	r3, [r7, #24]
}
 800630e:	bf00      	nop
 8006310:	e7fe      	b.n	8006310 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006312:	f001 fd93 	bl	8007e3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800631c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631e:	2b00      	cmp	r3, #0
 8006320:	d01f      	beq.n	8006362 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006322:	68b9      	ldr	r1, [r7, #8]
 8006324:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006326:	f000 f8f7 	bl	8006518 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632c:	1e5a      	subs	r2, r3, #1
 800632e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006330:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00f      	beq.n	800635a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800633a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633c:	3310      	adds	r3, #16
 800633e:	4618      	mov	r0, r3
 8006340:	f000 fe66 	bl	8007010 <xTaskRemoveFromEventList>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d007      	beq.n	800635a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800634a:	4b3d      	ldr	r3, [pc, #244]	; (8006440 <xQueueReceive+0x1c8>)
 800634c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006350:	601a      	str	r2, [r3, #0]
 8006352:	f3bf 8f4f 	dsb	sy
 8006356:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800635a:	f001 fda3 	bl	8007ea4 <vPortExitCritical>
				return pdPASS;
 800635e:	2301      	movs	r3, #1
 8006360:	e069      	b.n	8006436 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d103      	bne.n	8006370 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006368:	f001 fd9c 	bl	8007ea4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800636c:	2300      	movs	r3, #0
 800636e:	e062      	b.n	8006436 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006372:	2b00      	cmp	r3, #0
 8006374:	d106      	bne.n	8006384 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006376:	f107 0310 	add.w	r3, r7, #16
 800637a:	4618      	mov	r0, r3
 800637c:	f000 feae 	bl	80070dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006380:	2301      	movs	r3, #1
 8006382:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006384:	f001 fd8e 	bl	8007ea4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006388:	f000 fc14 	bl	8006bb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800638c:	f001 fd56 	bl	8007e3c <vPortEnterCritical>
 8006390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006392:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006396:	b25b      	sxtb	r3, r3
 8006398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800639c:	d103      	bne.n	80063a6 <xQueueReceive+0x12e>
 800639e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063ac:	b25b      	sxtb	r3, r3
 80063ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b2:	d103      	bne.n	80063bc <xQueueReceive+0x144>
 80063b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063bc:	f001 fd72 	bl	8007ea4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063c0:	1d3a      	adds	r2, r7, #4
 80063c2:	f107 0310 	add.w	r3, r7, #16
 80063c6:	4611      	mov	r1, r2
 80063c8:	4618      	mov	r0, r3
 80063ca:	f000 fe9d 	bl	8007108 <xTaskCheckForTimeOut>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d123      	bne.n	800641c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063d6:	f000 f917 	bl	8006608 <prvIsQueueEmpty>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d017      	beq.n	8006410 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80063e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e2:	3324      	adds	r3, #36	; 0x24
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	4611      	mov	r1, r2
 80063e8:	4618      	mov	r0, r3
 80063ea:	f000 fdbd 	bl	8006f68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80063ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063f0:	f000 f8b8 	bl	8006564 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80063f4:	f000 fbec 	bl	8006bd0 <xTaskResumeAll>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d189      	bne.n	8006312 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80063fe:	4b10      	ldr	r3, [pc, #64]	; (8006440 <xQueueReceive+0x1c8>)
 8006400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006404:	601a      	str	r2, [r3, #0]
 8006406:	f3bf 8f4f 	dsb	sy
 800640a:	f3bf 8f6f 	isb	sy
 800640e:	e780      	b.n	8006312 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006410:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006412:	f000 f8a7 	bl	8006564 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006416:	f000 fbdb 	bl	8006bd0 <xTaskResumeAll>
 800641a:	e77a      	b.n	8006312 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800641c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800641e:	f000 f8a1 	bl	8006564 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006422:	f000 fbd5 	bl	8006bd0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006426:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006428:	f000 f8ee 	bl	8006608 <prvIsQueueEmpty>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	f43f af6f 	beq.w	8006312 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006434:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006436:	4618      	mov	r0, r3
 8006438:	3730      	adds	r7, #48	; 0x30
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	e000ed04 	.word	0xe000ed04

08006444 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b086      	sub	sp, #24
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006450:	2300      	movs	r3, #0
 8006452:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006458:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10d      	bne.n	800647e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d14d      	bne.n	8006506 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	4618      	mov	r0, r3
 8006470:	f000 ffb2 	bl	80073d8 <xTaskPriorityDisinherit>
 8006474:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	609a      	str	r2, [r3, #8]
 800647c:	e043      	b.n	8006506 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d119      	bne.n	80064b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6858      	ldr	r0, [r3, #4]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648c:	461a      	mov	r2, r3
 800648e:	68b9      	ldr	r1, [r7, #8]
 8006490:	f002 f808 	bl	80084a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	685a      	ldr	r2, [r3, #4]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649c:	441a      	add	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	685a      	ldr	r2, [r3, #4]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d32b      	bcc.n	8006506 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	605a      	str	r2, [r3, #4]
 80064b6:	e026      	b.n	8006506 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	68d8      	ldr	r0, [r3, #12]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c0:	461a      	mov	r2, r3
 80064c2:	68b9      	ldr	r1, [r7, #8]
 80064c4:	f001 ffee 	bl	80084a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	68da      	ldr	r2, [r3, #12]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d0:	425b      	negs	r3, r3
 80064d2:	441a      	add	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	68da      	ldr	r2, [r3, #12]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d207      	bcs.n	80064f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	689a      	ldr	r2, [r3, #8]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ec:	425b      	negs	r3, r3
 80064ee:	441a      	add	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d105      	bne.n	8006506 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d002      	beq.n	8006506 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	3b01      	subs	r3, #1
 8006504:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	1c5a      	adds	r2, r3, #1
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800650e:	697b      	ldr	r3, [r7, #20]
}
 8006510:	4618      	mov	r0, r3
 8006512:	3718      	adds	r7, #24
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006526:	2b00      	cmp	r3, #0
 8006528:	d018      	beq.n	800655c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68da      	ldr	r2, [r3, #12]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006532:	441a      	add	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	68da      	ldr	r2, [r3, #12]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	429a      	cmp	r2, r3
 8006542:	d303      	bcc.n	800654c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	68d9      	ldr	r1, [r3, #12]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006554:	461a      	mov	r2, r3
 8006556:	6838      	ldr	r0, [r7, #0]
 8006558:	f001 ffa4 	bl	80084a4 <memcpy>
	}
}
 800655c:	bf00      	nop
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800656c:	f001 fc66 	bl	8007e3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006576:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006578:	e011      	b.n	800659e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657e:	2b00      	cmp	r3, #0
 8006580:	d012      	beq.n	80065a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	3324      	adds	r3, #36	; 0x24
 8006586:	4618      	mov	r0, r3
 8006588:	f000 fd42 	bl	8007010 <xTaskRemoveFromEventList>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d001      	beq.n	8006596 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006592:	f000 fe1f 	bl	80071d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006596:	7bfb      	ldrb	r3, [r7, #15]
 8006598:	3b01      	subs	r3, #1
 800659a:	b2db      	uxtb	r3, r3
 800659c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800659e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	dce9      	bgt.n	800657a <prvUnlockQueue+0x16>
 80065a6:	e000      	b.n	80065aa <prvUnlockQueue+0x46>
					break;
 80065a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	22ff      	movs	r2, #255	; 0xff
 80065ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80065b2:	f001 fc77 	bl	8007ea4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80065b6:	f001 fc41 	bl	8007e3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80065c2:	e011      	b.n	80065e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d012      	beq.n	80065f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	3310      	adds	r3, #16
 80065d0:	4618      	mov	r0, r3
 80065d2:	f000 fd1d 	bl	8007010 <xTaskRemoveFromEventList>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d001      	beq.n	80065e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80065dc:	f000 fdfa 	bl	80071d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80065e0:	7bbb      	ldrb	r3, [r7, #14]
 80065e2:	3b01      	subs	r3, #1
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80065e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	dce9      	bgt.n	80065c4 <prvUnlockQueue+0x60>
 80065f0:	e000      	b.n	80065f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80065f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	22ff      	movs	r2, #255	; 0xff
 80065f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80065fc:	f001 fc52 	bl	8007ea4 <vPortExitCritical>
}
 8006600:	bf00      	nop
 8006602:	3710      	adds	r7, #16
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006610:	f001 fc14 	bl	8007e3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006618:	2b00      	cmp	r3, #0
 800661a:	d102      	bne.n	8006622 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800661c:	2301      	movs	r3, #1
 800661e:	60fb      	str	r3, [r7, #12]
 8006620:	e001      	b.n	8006626 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006622:	2300      	movs	r3, #0
 8006624:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006626:	f001 fc3d 	bl	8007ea4 <vPortExitCritical>

	return xReturn;
 800662a:	68fb      	ldr	r3, [r7, #12]
}
 800662c:	4618      	mov	r0, r3
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800663c:	f001 fbfe 	bl	8007e3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006648:	429a      	cmp	r2, r3
 800664a:	d102      	bne.n	8006652 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800664c:	2301      	movs	r3, #1
 800664e:	60fb      	str	r3, [r7, #12]
 8006650:	e001      	b.n	8006656 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006652:	2300      	movs	r3, #0
 8006654:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006656:	f001 fc25 	bl	8007ea4 <vPortExitCritical>

	return xReturn;
 800665a:	68fb      	ldr	r3, [r7, #12]
}
 800665c:	4618      	mov	r0, r3
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800666e:	2300      	movs	r3, #0
 8006670:	60fb      	str	r3, [r7, #12]
 8006672:	e014      	b.n	800669e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006674:	4a0f      	ldr	r2, [pc, #60]	; (80066b4 <vQueueAddToRegistry+0x50>)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d10b      	bne.n	8006698 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006680:	490c      	ldr	r1, [pc, #48]	; (80066b4 <vQueueAddToRegistry+0x50>)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	683a      	ldr	r2, [r7, #0]
 8006686:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800668a:	4a0a      	ldr	r2, [pc, #40]	; (80066b4 <vQueueAddToRegistry+0x50>)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	00db      	lsls	r3, r3, #3
 8006690:	4413      	add	r3, r2
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006696:	e006      	b.n	80066a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	3301      	adds	r3, #1
 800669c:	60fb      	str	r3, [r7, #12]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2b07      	cmp	r3, #7
 80066a2:	d9e7      	bls.n	8006674 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80066a4:	bf00      	nop
 80066a6:	bf00      	nop
 80066a8:	3714      	adds	r7, #20
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	2000158c 	.word	0x2000158c

080066b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b086      	sub	sp, #24
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80066c8:	f001 fbb8 	bl	8007e3c <vPortEnterCritical>
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066d2:	b25b      	sxtb	r3, r3
 80066d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d8:	d103      	bne.n	80066e2 <vQueueWaitForMessageRestricted+0x2a>
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066e8:	b25b      	sxtb	r3, r3
 80066ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ee:	d103      	bne.n	80066f8 <vQueueWaitForMessageRestricted+0x40>
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066f8:	f001 fbd4 	bl	8007ea4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006700:	2b00      	cmp	r3, #0
 8006702:	d106      	bne.n	8006712 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	3324      	adds	r3, #36	; 0x24
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	68b9      	ldr	r1, [r7, #8]
 800670c:	4618      	mov	r0, r3
 800670e:	f000 fc51 	bl	8006fb4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006712:	6978      	ldr	r0, [r7, #20]
 8006714:	f7ff ff26 	bl	8006564 <prvUnlockQueue>
	}
 8006718:	bf00      	nop
 800671a:	3718      	adds	r7, #24
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006720:	b580      	push	{r7, lr}
 8006722:	b08e      	sub	sp, #56	; 0x38
 8006724:	af04      	add	r7, sp, #16
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
 800672c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800672e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10c      	bne.n	800674e <xTaskCreateStatic+0x2e>
	__asm volatile
 8006734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006738:	b672      	cpsid	i
 800673a:	f383 8811 	msr	BASEPRI, r3
 800673e:	f3bf 8f6f 	isb	sy
 8006742:	f3bf 8f4f 	dsb	sy
 8006746:	b662      	cpsie	i
 8006748:	623b      	str	r3, [r7, #32]
}
 800674a:	bf00      	nop
 800674c:	e7fe      	b.n	800674c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800674e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006750:	2b00      	cmp	r3, #0
 8006752:	d10c      	bne.n	800676e <xTaskCreateStatic+0x4e>
	__asm volatile
 8006754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006758:	b672      	cpsid	i
 800675a:	f383 8811 	msr	BASEPRI, r3
 800675e:	f3bf 8f6f 	isb	sy
 8006762:	f3bf 8f4f 	dsb	sy
 8006766:	b662      	cpsie	i
 8006768:	61fb      	str	r3, [r7, #28]
}
 800676a:	bf00      	nop
 800676c:	e7fe      	b.n	800676c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800676e:	235c      	movs	r3, #92	; 0x5c
 8006770:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	2b5c      	cmp	r3, #92	; 0x5c
 8006776:	d00c      	beq.n	8006792 <xTaskCreateStatic+0x72>
	__asm volatile
 8006778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677c:	b672      	cpsid	i
 800677e:	f383 8811 	msr	BASEPRI, r3
 8006782:	f3bf 8f6f 	isb	sy
 8006786:	f3bf 8f4f 	dsb	sy
 800678a:	b662      	cpsie	i
 800678c:	61bb      	str	r3, [r7, #24]
}
 800678e:	bf00      	nop
 8006790:	e7fe      	b.n	8006790 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006792:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006796:	2b00      	cmp	r3, #0
 8006798:	d01e      	beq.n	80067d8 <xTaskCreateStatic+0xb8>
 800679a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800679c:	2b00      	cmp	r3, #0
 800679e:	d01b      	beq.n	80067d8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80067a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80067a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80067aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ac:	2202      	movs	r2, #2
 80067ae:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80067b2:	2300      	movs	r3, #0
 80067b4:	9303      	str	r3, [sp, #12]
 80067b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b8:	9302      	str	r3, [sp, #8]
 80067ba:	f107 0314 	add.w	r3, r7, #20
 80067be:	9301      	str	r3, [sp, #4]
 80067c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c2:	9300      	str	r3, [sp, #0]
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	68b9      	ldr	r1, [r7, #8]
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	f000 f850 	bl	8006870 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067d2:	f000 f8df 	bl	8006994 <prvAddNewTaskToReadyList>
 80067d6:	e001      	b.n	80067dc <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80067d8:	2300      	movs	r3, #0
 80067da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80067dc:	697b      	ldr	r3, [r7, #20]
	}
 80067de:	4618      	mov	r0, r3
 80067e0:	3728      	adds	r7, #40	; 0x28
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b08c      	sub	sp, #48	; 0x30
 80067ea:	af04      	add	r7, sp, #16
 80067ec:	60f8      	str	r0, [r7, #12]
 80067ee:	60b9      	str	r1, [r7, #8]
 80067f0:	603b      	str	r3, [r7, #0]
 80067f2:	4613      	mov	r3, r2
 80067f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80067f6:	88fb      	ldrh	r3, [r7, #6]
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	4618      	mov	r0, r3
 80067fc:	f001 fc4a 	bl	8008094 <pvPortMalloc>
 8006800:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d00e      	beq.n	8006826 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006808:	205c      	movs	r0, #92	; 0x5c
 800680a:	f001 fc43 	bl	8008094 <pvPortMalloc>
 800680e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d003      	beq.n	800681e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	697a      	ldr	r2, [r7, #20]
 800681a:	631a      	str	r2, [r3, #48]	; 0x30
 800681c:	e005      	b.n	800682a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800681e:	6978      	ldr	r0, [r7, #20]
 8006820:	f001 fd02 	bl	8008228 <vPortFree>
 8006824:	e001      	b.n	800682a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006826:	2300      	movs	r3, #0
 8006828:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d017      	beq.n	8006860 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006838:	88fa      	ldrh	r2, [r7, #6]
 800683a:	2300      	movs	r3, #0
 800683c:	9303      	str	r3, [sp, #12]
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	9302      	str	r3, [sp, #8]
 8006842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006844:	9301      	str	r3, [sp, #4]
 8006846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006848:	9300      	str	r3, [sp, #0]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	68b9      	ldr	r1, [r7, #8]
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	f000 f80e 	bl	8006870 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006854:	69f8      	ldr	r0, [r7, #28]
 8006856:	f000 f89d 	bl	8006994 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800685a:	2301      	movs	r3, #1
 800685c:	61bb      	str	r3, [r7, #24]
 800685e:	e002      	b.n	8006866 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006860:	f04f 33ff 	mov.w	r3, #4294967295
 8006864:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006866:	69bb      	ldr	r3, [r7, #24]
	}
 8006868:	4618      	mov	r0, r3
 800686a:	3720      	adds	r7, #32
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b088      	sub	sp, #32
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]
 800687c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800687e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006880:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	461a      	mov	r2, r3
 8006888:	21a5      	movs	r1, #165	; 0xa5
 800688a:	f001 fe19 	bl	80084c0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800688e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006890:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006892:	6879      	ldr	r1, [r7, #4]
 8006894:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006898:	440b      	add	r3, r1
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	f023 0307 	bic.w	r3, r3, #7
 80068a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	f003 0307 	and.w	r3, r3, #7
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00c      	beq.n	80068cc <prvInitialiseNewTask+0x5c>
	__asm volatile
 80068b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b6:	b672      	cpsid	i
 80068b8:	f383 8811 	msr	BASEPRI, r3
 80068bc:	f3bf 8f6f 	isb	sy
 80068c0:	f3bf 8f4f 	dsb	sy
 80068c4:	b662      	cpsie	i
 80068c6:	617b      	str	r3, [r7, #20]
}
 80068c8:	bf00      	nop
 80068ca:	e7fe      	b.n	80068ca <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d01f      	beq.n	8006912 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068d2:	2300      	movs	r3, #0
 80068d4:	61fb      	str	r3, [r7, #28]
 80068d6:	e012      	b.n	80068fe <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	4413      	add	r3, r2
 80068de:	7819      	ldrb	r1, [r3, #0]
 80068e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	4413      	add	r3, r2
 80068e6:	3334      	adds	r3, #52	; 0x34
 80068e8:	460a      	mov	r2, r1
 80068ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80068ec:	68ba      	ldr	r2, [r7, #8]
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	4413      	add	r3, r2
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d006      	beq.n	8006906 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	3301      	adds	r3, #1
 80068fc:	61fb      	str	r3, [r7, #28]
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	2b0f      	cmp	r3, #15
 8006902:	d9e9      	bls.n	80068d8 <prvInitialiseNewTask+0x68>
 8006904:	e000      	b.n	8006908 <prvInitialiseNewTask+0x98>
			{
				break;
 8006906:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690a:	2200      	movs	r2, #0
 800690c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006910:	e003      	b.n	800691a <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006914:	2200      	movs	r2, #0
 8006916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800691a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691c:	2b37      	cmp	r3, #55	; 0x37
 800691e:	d901      	bls.n	8006924 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006920:	2337      	movs	r3, #55	; 0x37
 8006922:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006926:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006928:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800692a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800692e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006932:	2200      	movs	r2, #0
 8006934:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006938:	3304      	adds	r3, #4
 800693a:	4618      	mov	r0, r3
 800693c:	f7ff f952 	bl	8005be4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006942:	3318      	adds	r3, #24
 8006944:	4618      	mov	r0, r3
 8006946:	f7ff f94d 	bl	8005be4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800694a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800694e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006952:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006958:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800695a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800695e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006962:	2200      	movs	r2, #0
 8006964:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006968:	2200      	movs	r2, #0
 800696a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800696e:	683a      	ldr	r2, [r7, #0]
 8006970:	68f9      	ldr	r1, [r7, #12]
 8006972:	69b8      	ldr	r0, [r7, #24]
 8006974:	f001 f952 	bl	8007c1c <pxPortInitialiseStack>
 8006978:	4602      	mov	r2, r0
 800697a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800697e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006980:	2b00      	cmp	r3, #0
 8006982:	d002      	beq.n	800698a <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006986:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006988:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800698a:	bf00      	nop
 800698c:	3720      	adds	r7, #32
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
	...

08006994 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800699c:	f001 fa4e 	bl	8007e3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80069a0:	4b2d      	ldr	r3, [pc, #180]	; (8006a58 <prvAddNewTaskToReadyList+0xc4>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	3301      	adds	r3, #1
 80069a6:	4a2c      	ldr	r2, [pc, #176]	; (8006a58 <prvAddNewTaskToReadyList+0xc4>)
 80069a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80069aa:	4b2c      	ldr	r3, [pc, #176]	; (8006a5c <prvAddNewTaskToReadyList+0xc8>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d109      	bne.n	80069c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80069b2:	4a2a      	ldr	r2, [pc, #168]	; (8006a5c <prvAddNewTaskToReadyList+0xc8>)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80069b8:	4b27      	ldr	r3, [pc, #156]	; (8006a58 <prvAddNewTaskToReadyList+0xc4>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d110      	bne.n	80069e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80069c0:	f000 fc2c 	bl	800721c <prvInitialiseTaskLists>
 80069c4:	e00d      	b.n	80069e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80069c6:	4b26      	ldr	r3, [pc, #152]	; (8006a60 <prvAddNewTaskToReadyList+0xcc>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d109      	bne.n	80069e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80069ce:	4b23      	ldr	r3, [pc, #140]	; (8006a5c <prvAddNewTaskToReadyList+0xc8>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d8:	429a      	cmp	r2, r3
 80069da:	d802      	bhi.n	80069e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80069dc:	4a1f      	ldr	r2, [pc, #124]	; (8006a5c <prvAddNewTaskToReadyList+0xc8>)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80069e2:	4b20      	ldr	r3, [pc, #128]	; (8006a64 <prvAddNewTaskToReadyList+0xd0>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	3301      	adds	r3, #1
 80069e8:	4a1e      	ldr	r2, [pc, #120]	; (8006a64 <prvAddNewTaskToReadyList+0xd0>)
 80069ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80069ec:	4b1d      	ldr	r3, [pc, #116]	; (8006a64 <prvAddNewTaskToReadyList+0xd0>)
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069f8:	4b1b      	ldr	r3, [pc, #108]	; (8006a68 <prvAddNewTaskToReadyList+0xd4>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d903      	bls.n	8006a08 <prvAddNewTaskToReadyList+0x74>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a04:	4a18      	ldr	r2, [pc, #96]	; (8006a68 <prvAddNewTaskToReadyList+0xd4>)
 8006a06:	6013      	str	r3, [r2, #0]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	4413      	add	r3, r2
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	4a15      	ldr	r2, [pc, #84]	; (8006a6c <prvAddNewTaskToReadyList+0xd8>)
 8006a16:	441a      	add	r2, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	3304      	adds	r3, #4
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	4610      	mov	r0, r2
 8006a20:	f7ff f8ed 	bl	8005bfe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006a24:	f001 fa3e 	bl	8007ea4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006a28:	4b0d      	ldr	r3, [pc, #52]	; (8006a60 <prvAddNewTaskToReadyList+0xcc>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00e      	beq.n	8006a4e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006a30:	4b0a      	ldr	r3, [pc, #40]	; (8006a5c <prvAddNewTaskToReadyList+0xc8>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d207      	bcs.n	8006a4e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006a3e:	4b0c      	ldr	r3, [pc, #48]	; (8006a70 <prvAddNewTaskToReadyList+0xdc>)
 8006a40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a44:	601a      	str	r2, [r3, #0]
 8006a46:	f3bf 8f4f 	dsb	sy
 8006a4a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a4e:	bf00      	nop
 8006a50:	3708      	adds	r7, #8
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	20001aa0 	.word	0x20001aa0
 8006a5c:	200015cc 	.word	0x200015cc
 8006a60:	20001aac 	.word	0x20001aac
 8006a64:	20001abc 	.word	0x20001abc
 8006a68:	20001aa8 	.word	0x20001aa8
 8006a6c:	200015d0 	.word	0x200015d0
 8006a70:	e000ed04 	.word	0xe000ed04

08006a74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d019      	beq.n	8006aba <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006a86:	4b14      	ldr	r3, [pc, #80]	; (8006ad8 <vTaskDelay+0x64>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00c      	beq.n	8006aa8 <vTaskDelay+0x34>
	__asm volatile
 8006a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a92:	b672      	cpsid	i
 8006a94:	f383 8811 	msr	BASEPRI, r3
 8006a98:	f3bf 8f6f 	isb	sy
 8006a9c:	f3bf 8f4f 	dsb	sy
 8006aa0:	b662      	cpsie	i
 8006aa2:	60bb      	str	r3, [r7, #8]
}
 8006aa4:	bf00      	nop
 8006aa6:	e7fe      	b.n	8006aa6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006aa8:	f000 f884 	bl	8006bb4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006aac:	2100      	movs	r1, #0
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 fd04 	bl	80074bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006ab4:	f000 f88c 	bl	8006bd0 <xTaskResumeAll>
 8006ab8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d107      	bne.n	8006ad0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8006ac0:	4b06      	ldr	r3, [pc, #24]	; (8006adc <vTaskDelay+0x68>)
 8006ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ac6:	601a      	str	r2, [r3, #0]
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ad0:	bf00      	nop
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	20001ac8 	.word	0x20001ac8
 8006adc:	e000ed04 	.word	0xe000ed04

08006ae0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b08a      	sub	sp, #40	; 0x28
 8006ae4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006aea:	2300      	movs	r3, #0
 8006aec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006aee:	463a      	mov	r2, r7
 8006af0:	1d39      	adds	r1, r7, #4
 8006af2:	f107 0308 	add.w	r3, r7, #8
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7ff f820 	bl	8005b3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006afc:	6839      	ldr	r1, [r7, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	68ba      	ldr	r2, [r7, #8]
 8006b02:	9202      	str	r2, [sp, #8]
 8006b04:	9301      	str	r3, [sp, #4]
 8006b06:	2300      	movs	r3, #0
 8006b08:	9300      	str	r3, [sp, #0]
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	460a      	mov	r2, r1
 8006b0e:	4923      	ldr	r1, [pc, #140]	; (8006b9c <vTaskStartScheduler+0xbc>)
 8006b10:	4823      	ldr	r0, [pc, #140]	; (8006ba0 <vTaskStartScheduler+0xc0>)
 8006b12:	f7ff fe05 	bl	8006720 <xTaskCreateStatic>
 8006b16:	4603      	mov	r3, r0
 8006b18:	4a22      	ldr	r2, [pc, #136]	; (8006ba4 <vTaskStartScheduler+0xc4>)
 8006b1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006b1c:	4b21      	ldr	r3, [pc, #132]	; (8006ba4 <vTaskStartScheduler+0xc4>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d002      	beq.n	8006b2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006b24:	2301      	movs	r3, #1
 8006b26:	617b      	str	r3, [r7, #20]
 8006b28:	e001      	b.n	8006b2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d102      	bne.n	8006b3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006b34:	f000 fd16 	bl	8007564 <xTimerCreateTimerTask>
 8006b38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d118      	bne.n	8006b72 <vTaskStartScheduler+0x92>
	__asm volatile
 8006b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b44:	b672      	cpsid	i
 8006b46:	f383 8811 	msr	BASEPRI, r3
 8006b4a:	f3bf 8f6f 	isb	sy
 8006b4e:	f3bf 8f4f 	dsb	sy
 8006b52:	b662      	cpsie	i
 8006b54:	613b      	str	r3, [r7, #16]
}
 8006b56:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006b58:	4b13      	ldr	r3, [pc, #76]	; (8006ba8 <vTaskStartScheduler+0xc8>)
 8006b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b5e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006b60:	4b12      	ldr	r3, [pc, #72]	; (8006bac <vTaskStartScheduler+0xcc>)
 8006b62:	2201      	movs	r2, #1
 8006b64:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006b66:	4b12      	ldr	r3, [pc, #72]	; (8006bb0 <vTaskStartScheduler+0xd0>)
 8006b68:	2200      	movs	r2, #0
 8006b6a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b6c:	f001 f8e8 	bl	8007d40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b70:	e010      	b.n	8006b94 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b78:	d10c      	bne.n	8006b94 <vTaskStartScheduler+0xb4>
	__asm volatile
 8006b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7e:	b672      	cpsid	i
 8006b80:	f383 8811 	msr	BASEPRI, r3
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	b662      	cpsie	i
 8006b8e:	60fb      	str	r3, [r7, #12]
}
 8006b90:	bf00      	nop
 8006b92:	e7fe      	b.n	8006b92 <vTaskStartScheduler+0xb2>
}
 8006b94:	bf00      	nop
 8006b96:	3718      	adds	r7, #24
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	08008504 	.word	0x08008504
 8006ba0:	080071ed 	.word	0x080071ed
 8006ba4:	20001ac4 	.word	0x20001ac4
 8006ba8:	20001ac0 	.word	0x20001ac0
 8006bac:	20001aac 	.word	0x20001aac
 8006bb0:	20001aa4 	.word	0x20001aa4

08006bb4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006bb8:	4b04      	ldr	r3, [pc, #16]	; (8006bcc <vTaskSuspendAll+0x18>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	4a03      	ldr	r2, [pc, #12]	; (8006bcc <vTaskSuspendAll+0x18>)
 8006bc0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006bc2:	bf00      	nop
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr
 8006bcc:	20001ac8 	.word	0x20001ac8

08006bd0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006bde:	4b43      	ldr	r3, [pc, #268]	; (8006cec <xTaskResumeAll+0x11c>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d10c      	bne.n	8006c00 <xTaskResumeAll+0x30>
	__asm volatile
 8006be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bea:	b672      	cpsid	i
 8006bec:	f383 8811 	msr	BASEPRI, r3
 8006bf0:	f3bf 8f6f 	isb	sy
 8006bf4:	f3bf 8f4f 	dsb	sy
 8006bf8:	b662      	cpsie	i
 8006bfa:	603b      	str	r3, [r7, #0]
}
 8006bfc:	bf00      	nop
 8006bfe:	e7fe      	b.n	8006bfe <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006c00:	f001 f91c 	bl	8007e3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006c04:	4b39      	ldr	r3, [pc, #228]	; (8006cec <xTaskResumeAll+0x11c>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	3b01      	subs	r3, #1
 8006c0a:	4a38      	ldr	r2, [pc, #224]	; (8006cec <xTaskResumeAll+0x11c>)
 8006c0c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c0e:	4b37      	ldr	r3, [pc, #220]	; (8006cec <xTaskResumeAll+0x11c>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d162      	bne.n	8006cdc <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006c16:	4b36      	ldr	r3, [pc, #216]	; (8006cf0 <xTaskResumeAll+0x120>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d05e      	beq.n	8006cdc <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c1e:	e02f      	b.n	8006c80 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c20:	4b34      	ldr	r3, [pc, #208]	; (8006cf4 <xTaskResumeAll+0x124>)
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	3318      	adds	r3, #24
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7ff f843 	bl	8005cb8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	3304      	adds	r3, #4
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7ff f83e 	bl	8005cb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c40:	4b2d      	ldr	r3, [pc, #180]	; (8006cf8 <xTaskResumeAll+0x128>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d903      	bls.n	8006c50 <xTaskResumeAll+0x80>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c4c:	4a2a      	ldr	r2, [pc, #168]	; (8006cf8 <xTaskResumeAll+0x128>)
 8006c4e:	6013      	str	r3, [r2, #0]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c54:	4613      	mov	r3, r2
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	4413      	add	r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	4a27      	ldr	r2, [pc, #156]	; (8006cfc <xTaskResumeAll+0x12c>)
 8006c5e:	441a      	add	r2, r3
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	3304      	adds	r3, #4
 8006c64:	4619      	mov	r1, r3
 8006c66:	4610      	mov	r0, r2
 8006c68:	f7fe ffc9 	bl	8005bfe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c70:	4b23      	ldr	r3, [pc, #140]	; (8006d00 <xTaskResumeAll+0x130>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d302      	bcc.n	8006c80 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8006c7a:	4b22      	ldr	r3, [pc, #136]	; (8006d04 <xTaskResumeAll+0x134>)
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c80:	4b1c      	ldr	r3, [pc, #112]	; (8006cf4 <xTaskResumeAll+0x124>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d1cb      	bne.n	8006c20 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d001      	beq.n	8006c92 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006c8e:	f000 fb65 	bl	800735c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006c92:	4b1d      	ldr	r3, [pc, #116]	; (8006d08 <xTaskResumeAll+0x138>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d010      	beq.n	8006cc0 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006c9e:	f000 f847 	bl	8006d30 <xTaskIncrementTick>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d002      	beq.n	8006cae <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8006ca8:	4b16      	ldr	r3, [pc, #88]	; (8006d04 <xTaskResumeAll+0x134>)
 8006caa:	2201      	movs	r2, #1
 8006cac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1f1      	bne.n	8006c9e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8006cba:	4b13      	ldr	r3, [pc, #76]	; (8006d08 <xTaskResumeAll+0x138>)
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006cc0:	4b10      	ldr	r3, [pc, #64]	; (8006d04 <xTaskResumeAll+0x134>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d009      	beq.n	8006cdc <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006ccc:	4b0f      	ldr	r3, [pc, #60]	; (8006d0c <xTaskResumeAll+0x13c>)
 8006cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cd2:	601a      	str	r2, [r3, #0]
 8006cd4:	f3bf 8f4f 	dsb	sy
 8006cd8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006cdc:	f001 f8e2 	bl	8007ea4 <vPortExitCritical>

	return xAlreadyYielded;
 8006ce0:	68bb      	ldr	r3, [r7, #8]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	20001ac8 	.word	0x20001ac8
 8006cf0:	20001aa0 	.word	0x20001aa0
 8006cf4:	20001a60 	.word	0x20001a60
 8006cf8:	20001aa8 	.word	0x20001aa8
 8006cfc:	200015d0 	.word	0x200015d0
 8006d00:	200015cc 	.word	0x200015cc
 8006d04:	20001ab4 	.word	0x20001ab4
 8006d08:	20001ab0 	.word	0x20001ab0
 8006d0c:	e000ed04 	.word	0xe000ed04

08006d10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006d16:	4b05      	ldr	r3, [pc, #20]	; (8006d2c <xTaskGetTickCount+0x1c>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006d1c:	687b      	ldr	r3, [r7, #4]
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	370c      	adds	r7, #12
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	20001aa4 	.word	0x20001aa4

08006d30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006d36:	2300      	movs	r3, #0
 8006d38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d3a:	4b50      	ldr	r3, [pc, #320]	; (8006e7c <xTaskIncrementTick+0x14c>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	f040 808b 	bne.w	8006e5a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006d44:	4b4e      	ldr	r3, [pc, #312]	; (8006e80 <xTaskIncrementTick+0x150>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	3301      	adds	r3, #1
 8006d4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006d4c:	4a4c      	ldr	r2, [pc, #304]	; (8006e80 <xTaskIncrementTick+0x150>)
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d122      	bne.n	8006d9e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8006d58:	4b4a      	ldr	r3, [pc, #296]	; (8006e84 <xTaskIncrementTick+0x154>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00c      	beq.n	8006d7c <xTaskIncrementTick+0x4c>
	__asm volatile
 8006d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d66:	b672      	cpsid	i
 8006d68:	f383 8811 	msr	BASEPRI, r3
 8006d6c:	f3bf 8f6f 	isb	sy
 8006d70:	f3bf 8f4f 	dsb	sy
 8006d74:	b662      	cpsie	i
 8006d76:	603b      	str	r3, [r7, #0]
}
 8006d78:	bf00      	nop
 8006d7a:	e7fe      	b.n	8006d7a <xTaskIncrementTick+0x4a>
 8006d7c:	4b41      	ldr	r3, [pc, #260]	; (8006e84 <xTaskIncrementTick+0x154>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	60fb      	str	r3, [r7, #12]
 8006d82:	4b41      	ldr	r3, [pc, #260]	; (8006e88 <xTaskIncrementTick+0x158>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a3f      	ldr	r2, [pc, #252]	; (8006e84 <xTaskIncrementTick+0x154>)
 8006d88:	6013      	str	r3, [r2, #0]
 8006d8a:	4a3f      	ldr	r2, [pc, #252]	; (8006e88 <xTaskIncrementTick+0x158>)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6013      	str	r3, [r2, #0]
 8006d90:	4b3e      	ldr	r3, [pc, #248]	; (8006e8c <xTaskIncrementTick+0x15c>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	3301      	adds	r3, #1
 8006d96:	4a3d      	ldr	r2, [pc, #244]	; (8006e8c <xTaskIncrementTick+0x15c>)
 8006d98:	6013      	str	r3, [r2, #0]
 8006d9a:	f000 fadf 	bl	800735c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006d9e:	4b3c      	ldr	r3, [pc, #240]	; (8006e90 <xTaskIncrementTick+0x160>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	693a      	ldr	r2, [r7, #16]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d349      	bcc.n	8006e3c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006da8:	4b36      	ldr	r3, [pc, #216]	; (8006e84 <xTaskIncrementTick+0x154>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d104      	bne.n	8006dbc <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006db2:	4b37      	ldr	r3, [pc, #220]	; (8006e90 <xTaskIncrementTick+0x160>)
 8006db4:	f04f 32ff 	mov.w	r2, #4294967295
 8006db8:	601a      	str	r2, [r3, #0]
					break;
 8006dba:	e03f      	b.n	8006e3c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dbc:	4b31      	ldr	r3, [pc, #196]	; (8006e84 <xTaskIncrementTick+0x154>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d203      	bcs.n	8006ddc <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006dd4:	4a2e      	ldr	r2, [pc, #184]	; (8006e90 <xTaskIncrementTick+0x160>)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006dda:	e02f      	b.n	8006e3c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	3304      	adds	r3, #4
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7fe ff69 	bl	8005cb8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d004      	beq.n	8006df8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	3318      	adds	r3, #24
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7fe ff60 	bl	8005cb8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dfc:	4b25      	ldr	r3, [pc, #148]	; (8006e94 <xTaskIncrementTick+0x164>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d903      	bls.n	8006e0c <xTaskIncrementTick+0xdc>
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e08:	4a22      	ldr	r2, [pc, #136]	; (8006e94 <xTaskIncrementTick+0x164>)
 8006e0a:	6013      	str	r3, [r2, #0]
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e10:	4613      	mov	r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	4413      	add	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4a1f      	ldr	r2, [pc, #124]	; (8006e98 <xTaskIncrementTick+0x168>)
 8006e1a:	441a      	add	r2, r3
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	3304      	adds	r3, #4
 8006e20:	4619      	mov	r1, r3
 8006e22:	4610      	mov	r0, r2
 8006e24:	f7fe feeb 	bl	8005bfe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e2c:	4b1b      	ldr	r3, [pc, #108]	; (8006e9c <xTaskIncrementTick+0x16c>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d3b8      	bcc.n	8006da8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8006e36:	2301      	movs	r3, #1
 8006e38:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e3a:	e7b5      	b.n	8006da8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006e3c:	4b17      	ldr	r3, [pc, #92]	; (8006e9c <xTaskIncrementTick+0x16c>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e42:	4915      	ldr	r1, [pc, #84]	; (8006e98 <xTaskIncrementTick+0x168>)
 8006e44:	4613      	mov	r3, r2
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	4413      	add	r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	440b      	add	r3, r1
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d907      	bls.n	8006e64 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8006e54:	2301      	movs	r3, #1
 8006e56:	617b      	str	r3, [r7, #20]
 8006e58:	e004      	b.n	8006e64 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006e5a:	4b11      	ldr	r3, [pc, #68]	; (8006ea0 <xTaskIncrementTick+0x170>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	3301      	adds	r3, #1
 8006e60:	4a0f      	ldr	r2, [pc, #60]	; (8006ea0 <xTaskIncrementTick+0x170>)
 8006e62:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006e64:	4b0f      	ldr	r3, [pc, #60]	; (8006ea4 <xTaskIncrementTick+0x174>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d001      	beq.n	8006e70 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006e70:	697b      	ldr	r3, [r7, #20]
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3718      	adds	r7, #24
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	20001ac8 	.word	0x20001ac8
 8006e80:	20001aa4 	.word	0x20001aa4
 8006e84:	20001a58 	.word	0x20001a58
 8006e88:	20001a5c 	.word	0x20001a5c
 8006e8c:	20001ab8 	.word	0x20001ab8
 8006e90:	20001ac0 	.word	0x20001ac0
 8006e94:	20001aa8 	.word	0x20001aa8
 8006e98:	200015d0 	.word	0x200015d0
 8006e9c:	200015cc 	.word	0x200015cc
 8006ea0:	20001ab0 	.word	0x20001ab0
 8006ea4:	20001ab4 	.word	0x20001ab4

08006ea8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006eae:	4b29      	ldr	r3, [pc, #164]	; (8006f54 <vTaskSwitchContext+0xac>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d003      	beq.n	8006ebe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006eb6:	4b28      	ldr	r3, [pc, #160]	; (8006f58 <vTaskSwitchContext+0xb0>)
 8006eb8:	2201      	movs	r2, #1
 8006eba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006ebc:	e043      	b.n	8006f46 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8006ebe:	4b26      	ldr	r3, [pc, #152]	; (8006f58 <vTaskSwitchContext+0xb0>)
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ec4:	4b25      	ldr	r3, [pc, #148]	; (8006f5c <vTaskSwitchContext+0xb4>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	60fb      	str	r3, [r7, #12]
 8006eca:	e012      	b.n	8006ef2 <vTaskSwitchContext+0x4a>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10c      	bne.n	8006eec <vTaskSwitchContext+0x44>
	__asm volatile
 8006ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed6:	b672      	cpsid	i
 8006ed8:	f383 8811 	msr	BASEPRI, r3
 8006edc:	f3bf 8f6f 	isb	sy
 8006ee0:	f3bf 8f4f 	dsb	sy
 8006ee4:	b662      	cpsie	i
 8006ee6:	607b      	str	r3, [r7, #4]
}
 8006ee8:	bf00      	nop
 8006eea:	e7fe      	b.n	8006eea <vTaskSwitchContext+0x42>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	60fb      	str	r3, [r7, #12]
 8006ef2:	491b      	ldr	r1, [pc, #108]	; (8006f60 <vTaskSwitchContext+0xb8>)
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	4613      	mov	r3, r2
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	4413      	add	r3, r2
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	440b      	add	r3, r1
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d0e2      	beq.n	8006ecc <vTaskSwitchContext+0x24>
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	4613      	mov	r3, r2
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4413      	add	r3, r2
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	4a13      	ldr	r2, [pc, #76]	; (8006f60 <vTaskSwitchContext+0xb8>)
 8006f12:	4413      	add	r3, r2
 8006f14:	60bb      	str	r3, [r7, #8]
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	685a      	ldr	r2, [r3, #4]
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	605a      	str	r2, [r3, #4]
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	685a      	ldr	r2, [r3, #4]
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	3308      	adds	r3, #8
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d104      	bne.n	8006f36 <vTaskSwitchContext+0x8e>
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	685a      	ldr	r2, [r3, #4]
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	605a      	str	r2, [r3, #4]
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	4a09      	ldr	r2, [pc, #36]	; (8006f64 <vTaskSwitchContext+0xbc>)
 8006f3e:	6013      	str	r3, [r2, #0]
 8006f40:	4a06      	ldr	r2, [pc, #24]	; (8006f5c <vTaskSwitchContext+0xb4>)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6013      	str	r3, [r2, #0]
}
 8006f46:	bf00      	nop
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	20001ac8 	.word	0x20001ac8
 8006f58:	20001ab4 	.word	0x20001ab4
 8006f5c:	20001aa8 	.word	0x20001aa8
 8006f60:	200015d0 	.word	0x200015d0
 8006f64:	200015cc 	.word	0x200015cc

08006f68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d10c      	bne.n	8006f92 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8006f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7c:	b672      	cpsid	i
 8006f7e:	f383 8811 	msr	BASEPRI, r3
 8006f82:	f3bf 8f6f 	isb	sy
 8006f86:	f3bf 8f4f 	dsb	sy
 8006f8a:	b662      	cpsie	i
 8006f8c:	60fb      	str	r3, [r7, #12]
}
 8006f8e:	bf00      	nop
 8006f90:	e7fe      	b.n	8006f90 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f92:	4b07      	ldr	r3, [pc, #28]	; (8006fb0 <vTaskPlaceOnEventList+0x48>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	3318      	adds	r3, #24
 8006f98:	4619      	mov	r1, r3
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f7fe fe53 	bl	8005c46 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006fa0:	2101      	movs	r1, #1
 8006fa2:	6838      	ldr	r0, [r7, #0]
 8006fa4:	f000 fa8a 	bl	80074bc <prvAddCurrentTaskToDelayedList>
}
 8006fa8:	bf00      	nop
 8006faa:	3710      	adds	r7, #16
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	200015cc 	.word	0x200015cc

08006fb4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b086      	sub	sp, #24
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d10c      	bne.n	8006fe0 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8006fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fca:	b672      	cpsid	i
 8006fcc:	f383 8811 	msr	BASEPRI, r3
 8006fd0:	f3bf 8f6f 	isb	sy
 8006fd4:	f3bf 8f4f 	dsb	sy
 8006fd8:	b662      	cpsie	i
 8006fda:	617b      	str	r3, [r7, #20]
}
 8006fdc:	bf00      	nop
 8006fde:	e7fe      	b.n	8006fde <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006fe0:	4b0a      	ldr	r3, [pc, #40]	; (800700c <vTaskPlaceOnEventListRestricted+0x58>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	3318      	adds	r3, #24
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f7fe fe08 	bl	8005bfe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d002      	beq.n	8006ffa <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8006ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ff8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006ffa:	6879      	ldr	r1, [r7, #4]
 8006ffc:	68b8      	ldr	r0, [r7, #8]
 8006ffe:	f000 fa5d 	bl	80074bc <prvAddCurrentTaskToDelayedList>
	}
 8007002:	bf00      	nop
 8007004:	3718      	adds	r7, #24
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	200015cc 	.word	0x200015cc

08007010 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b086      	sub	sp, #24
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d10c      	bne.n	8007040 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8007026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702a:	b672      	cpsid	i
 800702c:	f383 8811 	msr	BASEPRI, r3
 8007030:	f3bf 8f6f 	isb	sy
 8007034:	f3bf 8f4f 	dsb	sy
 8007038:	b662      	cpsie	i
 800703a:	60fb      	str	r3, [r7, #12]
}
 800703c:	bf00      	nop
 800703e:	e7fe      	b.n	800703e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	3318      	adds	r3, #24
 8007044:	4618      	mov	r0, r3
 8007046:	f7fe fe37 	bl	8005cb8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800704a:	4b1e      	ldr	r3, [pc, #120]	; (80070c4 <xTaskRemoveFromEventList+0xb4>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d11d      	bne.n	800708e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	3304      	adds	r3, #4
 8007056:	4618      	mov	r0, r3
 8007058:	f7fe fe2e 	bl	8005cb8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007060:	4b19      	ldr	r3, [pc, #100]	; (80070c8 <xTaskRemoveFromEventList+0xb8>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	429a      	cmp	r2, r3
 8007066:	d903      	bls.n	8007070 <xTaskRemoveFromEventList+0x60>
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706c:	4a16      	ldr	r2, [pc, #88]	; (80070c8 <xTaskRemoveFromEventList+0xb8>)
 800706e:	6013      	str	r3, [r2, #0]
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007074:	4613      	mov	r3, r2
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4413      	add	r3, r2
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	4a13      	ldr	r2, [pc, #76]	; (80070cc <xTaskRemoveFromEventList+0xbc>)
 800707e:	441a      	add	r2, r3
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	3304      	adds	r3, #4
 8007084:	4619      	mov	r1, r3
 8007086:	4610      	mov	r0, r2
 8007088:	f7fe fdb9 	bl	8005bfe <vListInsertEnd>
 800708c:	e005      	b.n	800709a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	3318      	adds	r3, #24
 8007092:	4619      	mov	r1, r3
 8007094:	480e      	ldr	r0, [pc, #56]	; (80070d0 <xTaskRemoveFromEventList+0xc0>)
 8007096:	f7fe fdb2 	bl	8005bfe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800709e:	4b0d      	ldr	r3, [pc, #52]	; (80070d4 <xTaskRemoveFromEventList+0xc4>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d905      	bls.n	80070b4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80070a8:	2301      	movs	r3, #1
 80070aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80070ac:	4b0a      	ldr	r3, [pc, #40]	; (80070d8 <xTaskRemoveFromEventList+0xc8>)
 80070ae:	2201      	movs	r2, #1
 80070b0:	601a      	str	r2, [r3, #0]
 80070b2:	e001      	b.n	80070b8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80070b4:	2300      	movs	r3, #0
 80070b6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80070b8:	697b      	ldr	r3, [r7, #20]
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3718      	adds	r7, #24
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	20001ac8 	.word	0x20001ac8
 80070c8:	20001aa8 	.word	0x20001aa8
 80070cc:	200015d0 	.word	0x200015d0
 80070d0:	20001a60 	.word	0x20001a60
 80070d4:	200015cc 	.word	0x200015cc
 80070d8:	20001ab4 	.word	0x20001ab4

080070dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80070e4:	4b06      	ldr	r3, [pc, #24]	; (8007100 <vTaskInternalSetTimeOutState+0x24>)
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80070ec:	4b05      	ldr	r3, [pc, #20]	; (8007104 <vTaskInternalSetTimeOutState+0x28>)
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	605a      	str	r2, [r3, #4]
}
 80070f4:	bf00      	nop
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr
 8007100:	20001ab8 	.word	0x20001ab8
 8007104:	20001aa4 	.word	0x20001aa4

08007108 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b088      	sub	sp, #32
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10c      	bne.n	8007132 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8007118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711c:	b672      	cpsid	i
 800711e:	f383 8811 	msr	BASEPRI, r3
 8007122:	f3bf 8f6f 	isb	sy
 8007126:	f3bf 8f4f 	dsb	sy
 800712a:	b662      	cpsie	i
 800712c:	613b      	str	r3, [r7, #16]
}
 800712e:	bf00      	nop
 8007130:	e7fe      	b.n	8007130 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d10c      	bne.n	8007152 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8007138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713c:	b672      	cpsid	i
 800713e:	f383 8811 	msr	BASEPRI, r3
 8007142:	f3bf 8f6f 	isb	sy
 8007146:	f3bf 8f4f 	dsb	sy
 800714a:	b662      	cpsie	i
 800714c:	60fb      	str	r3, [r7, #12]
}
 800714e:	bf00      	nop
 8007150:	e7fe      	b.n	8007150 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8007152:	f000 fe73 	bl	8007e3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007156:	4b1d      	ldr	r3, [pc, #116]	; (80071cc <xTaskCheckForTimeOut+0xc4>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	69ba      	ldr	r2, [r7, #24]
 8007162:	1ad3      	subs	r3, r2, r3
 8007164:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800716e:	d102      	bne.n	8007176 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007170:	2300      	movs	r3, #0
 8007172:	61fb      	str	r3, [r7, #28]
 8007174:	e023      	b.n	80071be <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	4b15      	ldr	r3, [pc, #84]	; (80071d0 <xTaskCheckForTimeOut+0xc8>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	429a      	cmp	r2, r3
 8007180:	d007      	beq.n	8007192 <xTaskCheckForTimeOut+0x8a>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	69ba      	ldr	r2, [r7, #24]
 8007188:	429a      	cmp	r2, r3
 800718a:	d302      	bcc.n	8007192 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800718c:	2301      	movs	r3, #1
 800718e:	61fb      	str	r3, [r7, #28]
 8007190:	e015      	b.n	80071be <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	697a      	ldr	r2, [r7, #20]
 8007198:	429a      	cmp	r2, r3
 800719a:	d20b      	bcs.n	80071b4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	1ad2      	subs	r2, r2, r3
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f7ff ff97 	bl	80070dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80071ae:	2300      	movs	r3, #0
 80071b0:	61fb      	str	r3, [r7, #28]
 80071b2:	e004      	b.n	80071be <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	2200      	movs	r2, #0
 80071b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80071ba:	2301      	movs	r3, #1
 80071bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80071be:	f000 fe71 	bl	8007ea4 <vPortExitCritical>

	return xReturn;
 80071c2:	69fb      	ldr	r3, [r7, #28]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3720      	adds	r7, #32
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	20001aa4 	.word	0x20001aa4
 80071d0:	20001ab8 	.word	0x20001ab8

080071d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80071d4:	b480      	push	{r7}
 80071d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80071d8:	4b03      	ldr	r3, [pc, #12]	; (80071e8 <vTaskMissedYield+0x14>)
 80071da:	2201      	movs	r2, #1
 80071dc:	601a      	str	r2, [r3, #0]
}
 80071de:	bf00      	nop
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr
 80071e8:	20001ab4 	.word	0x20001ab4

080071ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80071f4:	f000 f852 	bl	800729c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80071f8:	4b06      	ldr	r3, [pc, #24]	; (8007214 <prvIdleTask+0x28>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d9f9      	bls.n	80071f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007200:	4b05      	ldr	r3, [pc, #20]	; (8007218 <prvIdleTask+0x2c>)
 8007202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007206:	601a      	str	r2, [r3, #0]
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007210:	e7f0      	b.n	80071f4 <prvIdleTask+0x8>
 8007212:	bf00      	nop
 8007214:	200015d0 	.word	0x200015d0
 8007218:	e000ed04 	.word	0xe000ed04

0800721c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007222:	2300      	movs	r3, #0
 8007224:	607b      	str	r3, [r7, #4]
 8007226:	e00c      	b.n	8007242 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	4613      	mov	r3, r2
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	4413      	add	r3, r2
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	4a12      	ldr	r2, [pc, #72]	; (800727c <prvInitialiseTaskLists+0x60>)
 8007234:	4413      	add	r3, r2
 8007236:	4618      	mov	r0, r3
 8007238:	f7fe fcb4 	bl	8005ba4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	3301      	adds	r3, #1
 8007240:	607b      	str	r3, [r7, #4]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2b37      	cmp	r3, #55	; 0x37
 8007246:	d9ef      	bls.n	8007228 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007248:	480d      	ldr	r0, [pc, #52]	; (8007280 <prvInitialiseTaskLists+0x64>)
 800724a:	f7fe fcab 	bl	8005ba4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800724e:	480d      	ldr	r0, [pc, #52]	; (8007284 <prvInitialiseTaskLists+0x68>)
 8007250:	f7fe fca8 	bl	8005ba4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007254:	480c      	ldr	r0, [pc, #48]	; (8007288 <prvInitialiseTaskLists+0x6c>)
 8007256:	f7fe fca5 	bl	8005ba4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800725a:	480c      	ldr	r0, [pc, #48]	; (800728c <prvInitialiseTaskLists+0x70>)
 800725c:	f7fe fca2 	bl	8005ba4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007260:	480b      	ldr	r0, [pc, #44]	; (8007290 <prvInitialiseTaskLists+0x74>)
 8007262:	f7fe fc9f 	bl	8005ba4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007266:	4b0b      	ldr	r3, [pc, #44]	; (8007294 <prvInitialiseTaskLists+0x78>)
 8007268:	4a05      	ldr	r2, [pc, #20]	; (8007280 <prvInitialiseTaskLists+0x64>)
 800726a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800726c:	4b0a      	ldr	r3, [pc, #40]	; (8007298 <prvInitialiseTaskLists+0x7c>)
 800726e:	4a05      	ldr	r2, [pc, #20]	; (8007284 <prvInitialiseTaskLists+0x68>)
 8007270:	601a      	str	r2, [r3, #0]
}
 8007272:	bf00      	nop
 8007274:	3708      	adds	r7, #8
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	200015d0 	.word	0x200015d0
 8007280:	20001a30 	.word	0x20001a30
 8007284:	20001a44 	.word	0x20001a44
 8007288:	20001a60 	.word	0x20001a60
 800728c:	20001a74 	.word	0x20001a74
 8007290:	20001a8c 	.word	0x20001a8c
 8007294:	20001a58 	.word	0x20001a58
 8007298:	20001a5c 	.word	0x20001a5c

0800729c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072a2:	e019      	b.n	80072d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80072a4:	f000 fdca 	bl	8007e3c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072a8:	4b10      	ldr	r3, [pc, #64]	; (80072ec <prvCheckTasksWaitingTermination+0x50>)
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	3304      	adds	r3, #4
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7fe fcff 	bl	8005cb8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80072ba:	4b0d      	ldr	r3, [pc, #52]	; (80072f0 <prvCheckTasksWaitingTermination+0x54>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	3b01      	subs	r3, #1
 80072c0:	4a0b      	ldr	r2, [pc, #44]	; (80072f0 <prvCheckTasksWaitingTermination+0x54>)
 80072c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80072c4:	4b0b      	ldr	r3, [pc, #44]	; (80072f4 <prvCheckTasksWaitingTermination+0x58>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	3b01      	subs	r3, #1
 80072ca:	4a0a      	ldr	r2, [pc, #40]	; (80072f4 <prvCheckTasksWaitingTermination+0x58>)
 80072cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80072ce:	f000 fde9 	bl	8007ea4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 f810 	bl	80072f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072d8:	4b06      	ldr	r3, [pc, #24]	; (80072f4 <prvCheckTasksWaitingTermination+0x58>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1e1      	bne.n	80072a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80072e0:	bf00      	nop
 80072e2:	bf00      	nop
 80072e4:	3708      	adds	r7, #8
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	20001a74 	.word	0x20001a74
 80072f0:	20001aa0 	.word	0x20001aa0
 80072f4:	20001a88 	.word	0x20001a88

080072f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007306:	2b00      	cmp	r3, #0
 8007308:	d108      	bne.n	800731c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800730e:	4618      	mov	r0, r3
 8007310:	f000 ff8a 	bl	8008228 <vPortFree>
				vPortFree( pxTCB );
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 ff87 	bl	8008228 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800731a:	e01a      	b.n	8007352 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007322:	2b01      	cmp	r3, #1
 8007324:	d103      	bne.n	800732e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 ff7e 	bl	8008228 <vPortFree>
	}
 800732c:	e011      	b.n	8007352 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007334:	2b02      	cmp	r3, #2
 8007336:	d00c      	beq.n	8007352 <prvDeleteTCB+0x5a>
	__asm volatile
 8007338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733c:	b672      	cpsid	i
 800733e:	f383 8811 	msr	BASEPRI, r3
 8007342:	f3bf 8f6f 	isb	sy
 8007346:	f3bf 8f4f 	dsb	sy
 800734a:	b662      	cpsie	i
 800734c:	60fb      	str	r3, [r7, #12]
}
 800734e:	bf00      	nop
 8007350:	e7fe      	b.n	8007350 <prvDeleteTCB+0x58>
	}
 8007352:	bf00      	nop
 8007354:	3710      	adds	r7, #16
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
	...

0800735c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007362:	4b0c      	ldr	r3, [pc, #48]	; (8007394 <prvResetNextTaskUnblockTime+0x38>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d104      	bne.n	8007376 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800736c:	4b0a      	ldr	r3, [pc, #40]	; (8007398 <prvResetNextTaskUnblockTime+0x3c>)
 800736e:	f04f 32ff 	mov.w	r2, #4294967295
 8007372:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007374:	e008      	b.n	8007388 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007376:	4b07      	ldr	r3, [pc, #28]	; (8007394 <prvResetNextTaskUnblockTime+0x38>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	4a04      	ldr	r2, [pc, #16]	; (8007398 <prvResetNextTaskUnblockTime+0x3c>)
 8007386:	6013      	str	r3, [r2, #0]
}
 8007388:	bf00      	nop
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr
 8007394:	20001a58 	.word	0x20001a58
 8007398:	20001ac0 	.word	0x20001ac0

0800739c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80073a2:	4b0b      	ldr	r3, [pc, #44]	; (80073d0 <xTaskGetSchedulerState+0x34>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d102      	bne.n	80073b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80073aa:	2301      	movs	r3, #1
 80073ac:	607b      	str	r3, [r7, #4]
 80073ae:	e008      	b.n	80073c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073b0:	4b08      	ldr	r3, [pc, #32]	; (80073d4 <xTaskGetSchedulerState+0x38>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d102      	bne.n	80073be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80073b8:	2302      	movs	r3, #2
 80073ba:	607b      	str	r3, [r7, #4]
 80073bc:	e001      	b.n	80073c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80073be:	2300      	movs	r3, #0
 80073c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80073c2:	687b      	ldr	r3, [r7, #4]
	}
 80073c4:	4618      	mov	r0, r3
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr
 80073d0:	20001aac 	.word	0x20001aac
 80073d4:	20001ac8 	.word	0x20001ac8

080073d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80073e4:	2300      	movs	r3, #0
 80073e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d05a      	beq.n	80074a4 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80073ee:	4b30      	ldr	r3, [pc, #192]	; (80074b0 <xTaskPriorityDisinherit+0xd8>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	693a      	ldr	r2, [r7, #16]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d00c      	beq.n	8007412 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80073f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fc:	b672      	cpsid	i
 80073fe:	f383 8811 	msr	BASEPRI, r3
 8007402:	f3bf 8f6f 	isb	sy
 8007406:	f3bf 8f4f 	dsb	sy
 800740a:	b662      	cpsie	i
 800740c:	60fb      	str	r3, [r7, #12]
}
 800740e:	bf00      	nop
 8007410:	e7fe      	b.n	8007410 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10c      	bne.n	8007434 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800741a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741e:	b672      	cpsid	i
 8007420:	f383 8811 	msr	BASEPRI, r3
 8007424:	f3bf 8f6f 	isb	sy
 8007428:	f3bf 8f4f 	dsb	sy
 800742c:	b662      	cpsie	i
 800742e:	60bb      	str	r3, [r7, #8]
}
 8007430:	bf00      	nop
 8007432:	e7fe      	b.n	8007432 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007438:	1e5a      	subs	r2, r3, #1
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007446:	429a      	cmp	r2, r3
 8007448:	d02c      	beq.n	80074a4 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800744e:	2b00      	cmp	r3, #0
 8007450:	d128      	bne.n	80074a4 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	3304      	adds	r3, #4
 8007456:	4618      	mov	r0, r3
 8007458:	f7fe fc2e 	bl	8005cb8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007468:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007474:	4b0f      	ldr	r3, [pc, #60]	; (80074b4 <xTaskPriorityDisinherit+0xdc>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	429a      	cmp	r2, r3
 800747a:	d903      	bls.n	8007484 <xTaskPriorityDisinherit+0xac>
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007480:	4a0c      	ldr	r2, [pc, #48]	; (80074b4 <xTaskPriorityDisinherit+0xdc>)
 8007482:	6013      	str	r3, [r2, #0]
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007488:	4613      	mov	r3, r2
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4413      	add	r3, r2
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	4a09      	ldr	r2, [pc, #36]	; (80074b8 <xTaskPriorityDisinherit+0xe0>)
 8007492:	441a      	add	r2, r3
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	3304      	adds	r3, #4
 8007498:	4619      	mov	r1, r3
 800749a:	4610      	mov	r0, r2
 800749c:	f7fe fbaf 	bl	8005bfe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80074a0:	2301      	movs	r3, #1
 80074a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80074a4:	697b      	ldr	r3, [r7, #20]
	}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3718      	adds	r7, #24
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	200015cc 	.word	0x200015cc
 80074b4:	20001aa8 	.word	0x20001aa8
 80074b8:	200015d0 	.word	0x200015d0

080074bc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80074c6:	4b21      	ldr	r3, [pc, #132]	; (800754c <prvAddCurrentTaskToDelayedList+0x90>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074cc:	4b20      	ldr	r3, [pc, #128]	; (8007550 <prvAddCurrentTaskToDelayedList+0x94>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	3304      	adds	r3, #4
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7fe fbf0 	bl	8005cb8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074de:	d10a      	bne.n	80074f6 <prvAddCurrentTaskToDelayedList+0x3a>
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d007      	beq.n	80074f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074e6:	4b1a      	ldr	r3, [pc, #104]	; (8007550 <prvAddCurrentTaskToDelayedList+0x94>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	3304      	adds	r3, #4
 80074ec:	4619      	mov	r1, r3
 80074ee:	4819      	ldr	r0, [pc, #100]	; (8007554 <prvAddCurrentTaskToDelayedList+0x98>)
 80074f0:	f7fe fb85 	bl	8005bfe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80074f4:	e026      	b.n	8007544 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4413      	add	r3, r2
 80074fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80074fe:	4b14      	ldr	r3, [pc, #80]	; (8007550 <prvAddCurrentTaskToDelayedList+0x94>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68ba      	ldr	r2, [r7, #8]
 8007504:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007506:	68ba      	ldr	r2, [r7, #8]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	429a      	cmp	r2, r3
 800750c:	d209      	bcs.n	8007522 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800750e:	4b12      	ldr	r3, [pc, #72]	; (8007558 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	4b0f      	ldr	r3, [pc, #60]	; (8007550 <prvAddCurrentTaskToDelayedList+0x94>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	3304      	adds	r3, #4
 8007518:	4619      	mov	r1, r3
 800751a:	4610      	mov	r0, r2
 800751c:	f7fe fb93 	bl	8005c46 <vListInsert>
}
 8007520:	e010      	b.n	8007544 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007522:	4b0e      	ldr	r3, [pc, #56]	; (800755c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	4b0a      	ldr	r3, [pc, #40]	; (8007550 <prvAddCurrentTaskToDelayedList+0x94>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	3304      	adds	r3, #4
 800752c:	4619      	mov	r1, r3
 800752e:	4610      	mov	r0, r2
 8007530:	f7fe fb89 	bl	8005c46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007534:	4b0a      	ldr	r3, [pc, #40]	; (8007560 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68ba      	ldr	r2, [r7, #8]
 800753a:	429a      	cmp	r2, r3
 800753c:	d202      	bcs.n	8007544 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800753e:	4a08      	ldr	r2, [pc, #32]	; (8007560 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	6013      	str	r3, [r2, #0]
}
 8007544:	bf00      	nop
 8007546:	3710      	adds	r7, #16
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	20001aa4 	.word	0x20001aa4
 8007550:	200015cc 	.word	0x200015cc
 8007554:	20001a8c 	.word	0x20001a8c
 8007558:	20001a5c 	.word	0x20001a5c
 800755c:	20001a58 	.word	0x20001a58
 8007560:	20001ac0 	.word	0x20001ac0

08007564 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b08a      	sub	sp, #40	; 0x28
 8007568:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800756a:	2300      	movs	r3, #0
 800756c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800756e:	f000 fb15 	bl	8007b9c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007572:	4b1d      	ldr	r3, [pc, #116]	; (80075e8 <xTimerCreateTimerTask+0x84>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d021      	beq.n	80075be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800757a:	2300      	movs	r3, #0
 800757c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800757e:	2300      	movs	r3, #0
 8007580:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007582:	1d3a      	adds	r2, r7, #4
 8007584:	f107 0108 	add.w	r1, r7, #8
 8007588:	f107 030c 	add.w	r3, r7, #12
 800758c:	4618      	mov	r0, r3
 800758e:	f7fe faef 	bl	8005b70 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007592:	6879      	ldr	r1, [r7, #4]
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	9202      	str	r2, [sp, #8]
 800759a:	9301      	str	r3, [sp, #4]
 800759c:	2302      	movs	r3, #2
 800759e:	9300      	str	r3, [sp, #0]
 80075a0:	2300      	movs	r3, #0
 80075a2:	460a      	mov	r2, r1
 80075a4:	4911      	ldr	r1, [pc, #68]	; (80075ec <xTimerCreateTimerTask+0x88>)
 80075a6:	4812      	ldr	r0, [pc, #72]	; (80075f0 <xTimerCreateTimerTask+0x8c>)
 80075a8:	f7ff f8ba 	bl	8006720 <xTaskCreateStatic>
 80075ac:	4603      	mov	r3, r0
 80075ae:	4a11      	ldr	r2, [pc, #68]	; (80075f4 <xTimerCreateTimerTask+0x90>)
 80075b0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80075b2:	4b10      	ldr	r3, [pc, #64]	; (80075f4 <xTimerCreateTimerTask+0x90>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d001      	beq.n	80075be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80075ba:	2301      	movs	r3, #1
 80075bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10c      	bne.n	80075de <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80075c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c8:	b672      	cpsid	i
 80075ca:	f383 8811 	msr	BASEPRI, r3
 80075ce:	f3bf 8f6f 	isb	sy
 80075d2:	f3bf 8f4f 	dsb	sy
 80075d6:	b662      	cpsie	i
 80075d8:	613b      	str	r3, [r7, #16]
}
 80075da:	bf00      	nop
 80075dc:	e7fe      	b.n	80075dc <xTimerCreateTimerTask+0x78>
	return xReturn;
 80075de:	697b      	ldr	r3, [r7, #20]
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3718      	adds	r7, #24
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	20001afc 	.word	0x20001afc
 80075ec:	0800850c 	.word	0x0800850c
 80075f0:	08007735 	.word	0x08007735
 80075f4:	20001b00 	.word	0x20001b00

080075f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b08a      	sub	sp, #40	; 0x28
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	607a      	str	r2, [r7, #4]
 8007604:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007606:	2300      	movs	r3, #0
 8007608:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d10c      	bne.n	800762a <xTimerGenericCommand+0x32>
	__asm volatile
 8007610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007614:	b672      	cpsid	i
 8007616:	f383 8811 	msr	BASEPRI, r3
 800761a:	f3bf 8f6f 	isb	sy
 800761e:	f3bf 8f4f 	dsb	sy
 8007622:	b662      	cpsie	i
 8007624:	623b      	str	r3, [r7, #32]
}
 8007626:	bf00      	nop
 8007628:	e7fe      	b.n	8007628 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800762a:	4b1a      	ldr	r3, [pc, #104]	; (8007694 <xTimerGenericCommand+0x9c>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d02a      	beq.n	8007688 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	2b05      	cmp	r3, #5
 8007642:	dc18      	bgt.n	8007676 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007644:	f7ff feaa 	bl	800739c <xTaskGetSchedulerState>
 8007648:	4603      	mov	r3, r0
 800764a:	2b02      	cmp	r3, #2
 800764c:	d109      	bne.n	8007662 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800764e:	4b11      	ldr	r3, [pc, #68]	; (8007694 <xTimerGenericCommand+0x9c>)
 8007650:	6818      	ldr	r0, [r3, #0]
 8007652:	f107 0110 	add.w	r1, r7, #16
 8007656:	2300      	movs	r3, #0
 8007658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800765a:	f7fe fc67 	bl	8005f2c <xQueueGenericSend>
 800765e:	6278      	str	r0, [r7, #36]	; 0x24
 8007660:	e012      	b.n	8007688 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007662:	4b0c      	ldr	r3, [pc, #48]	; (8007694 <xTimerGenericCommand+0x9c>)
 8007664:	6818      	ldr	r0, [r3, #0]
 8007666:	f107 0110 	add.w	r1, r7, #16
 800766a:	2300      	movs	r3, #0
 800766c:	2200      	movs	r2, #0
 800766e:	f7fe fc5d 	bl	8005f2c <xQueueGenericSend>
 8007672:	6278      	str	r0, [r7, #36]	; 0x24
 8007674:	e008      	b.n	8007688 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007676:	4b07      	ldr	r3, [pc, #28]	; (8007694 <xTimerGenericCommand+0x9c>)
 8007678:	6818      	ldr	r0, [r3, #0]
 800767a:	f107 0110 	add.w	r1, r7, #16
 800767e:	2300      	movs	r3, #0
 8007680:	683a      	ldr	r2, [r7, #0]
 8007682:	f7fe fd59 	bl	8006138 <xQueueGenericSendFromISR>
 8007686:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800768a:	4618      	mov	r0, r3
 800768c:	3728      	adds	r7, #40	; 0x28
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	20001afc 	.word	0x20001afc

08007698 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b088      	sub	sp, #32
 800769c:	af02      	add	r7, sp, #8
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076a2:	4b23      	ldr	r3, [pc, #140]	; (8007730 <prvProcessExpiredTimer+0x98>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	3304      	adds	r3, #4
 80076b0:	4618      	mov	r0, r3
 80076b2:	f7fe fb01 	bl	8005cb8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076bc:	f003 0304 	and.w	r3, r3, #4
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d024      	beq.n	800770e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	699a      	ldr	r2, [r3, #24]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	18d1      	adds	r1, r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	683a      	ldr	r2, [r7, #0]
 80076d0:	6978      	ldr	r0, [r7, #20]
 80076d2:	f000 f8d3 	bl	800787c <prvInsertTimerInActiveList>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d021      	beq.n	8007720 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80076dc:	2300      	movs	r3, #0
 80076de:	9300      	str	r3, [sp, #0]
 80076e0:	2300      	movs	r3, #0
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	2100      	movs	r1, #0
 80076e6:	6978      	ldr	r0, [r7, #20]
 80076e8:	f7ff ff86 	bl	80075f8 <xTimerGenericCommand>
 80076ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d115      	bne.n	8007720 <prvProcessExpiredTimer+0x88>
	__asm volatile
 80076f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f8:	b672      	cpsid	i
 80076fa:	f383 8811 	msr	BASEPRI, r3
 80076fe:	f3bf 8f6f 	isb	sy
 8007702:	f3bf 8f4f 	dsb	sy
 8007706:	b662      	cpsie	i
 8007708:	60fb      	str	r3, [r7, #12]
}
 800770a:	bf00      	nop
 800770c:	e7fe      	b.n	800770c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007714:	f023 0301 	bic.w	r3, r3, #1
 8007718:	b2da      	uxtb	r2, r3
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	6a1b      	ldr	r3, [r3, #32]
 8007724:	6978      	ldr	r0, [r7, #20]
 8007726:	4798      	blx	r3
}
 8007728:	bf00      	nop
 800772a:	3718      	adds	r7, #24
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}
 8007730:	20001af4 	.word	0x20001af4

08007734 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800773c:	f107 0308 	add.w	r3, r7, #8
 8007740:	4618      	mov	r0, r3
 8007742:	f000 f857 	bl	80077f4 <prvGetNextExpireTime>
 8007746:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	4619      	mov	r1, r3
 800774c:	68f8      	ldr	r0, [r7, #12]
 800774e:	f000 f803 	bl	8007758 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007752:	f000 f8d5 	bl	8007900 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007756:	e7f1      	b.n	800773c <prvTimerTask+0x8>

08007758 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007762:	f7ff fa27 	bl	8006bb4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007766:	f107 0308 	add.w	r3, r7, #8
 800776a:	4618      	mov	r0, r3
 800776c:	f000 f866 	bl	800783c <prvSampleTimeNow>
 8007770:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d130      	bne.n	80077da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d10a      	bne.n	8007794 <prvProcessTimerOrBlockTask+0x3c>
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	429a      	cmp	r2, r3
 8007784:	d806      	bhi.n	8007794 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007786:	f7ff fa23 	bl	8006bd0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800778a:	68f9      	ldr	r1, [r7, #12]
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f7ff ff83 	bl	8007698 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007792:	e024      	b.n	80077de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d008      	beq.n	80077ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800779a:	4b13      	ldr	r3, [pc, #76]	; (80077e8 <prvProcessTimerOrBlockTask+0x90>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d101      	bne.n	80077a8 <prvProcessTimerOrBlockTask+0x50>
 80077a4:	2301      	movs	r3, #1
 80077a6:	e000      	b.n	80077aa <prvProcessTimerOrBlockTask+0x52>
 80077a8:	2300      	movs	r3, #0
 80077aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80077ac:	4b0f      	ldr	r3, [pc, #60]	; (80077ec <prvProcessTimerOrBlockTask+0x94>)
 80077ae:	6818      	ldr	r0, [r3, #0]
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	1ad3      	subs	r3, r2, r3
 80077b6:	683a      	ldr	r2, [r7, #0]
 80077b8:	4619      	mov	r1, r3
 80077ba:	f7fe ff7d 	bl	80066b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80077be:	f7ff fa07 	bl	8006bd0 <xTaskResumeAll>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d10a      	bne.n	80077de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80077c8:	4b09      	ldr	r3, [pc, #36]	; (80077f0 <prvProcessTimerOrBlockTask+0x98>)
 80077ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077ce:	601a      	str	r2, [r3, #0]
 80077d0:	f3bf 8f4f 	dsb	sy
 80077d4:	f3bf 8f6f 	isb	sy
}
 80077d8:	e001      	b.n	80077de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80077da:	f7ff f9f9 	bl	8006bd0 <xTaskResumeAll>
}
 80077de:	bf00      	nop
 80077e0:	3710      	adds	r7, #16
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	20001af8 	.word	0x20001af8
 80077ec:	20001afc 	.word	0x20001afc
 80077f0:	e000ed04 	.word	0xe000ed04

080077f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80077fc:	4b0e      	ldr	r3, [pc, #56]	; (8007838 <prvGetNextExpireTime+0x44>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d101      	bne.n	800780a <prvGetNextExpireTime+0x16>
 8007806:	2201      	movs	r2, #1
 8007808:	e000      	b.n	800780c <prvGetNextExpireTime+0x18>
 800780a:	2200      	movs	r2, #0
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d105      	bne.n	8007824 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007818:	4b07      	ldr	r3, [pc, #28]	; (8007838 <prvGetNextExpireTime+0x44>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	60fb      	str	r3, [r7, #12]
 8007822:	e001      	b.n	8007828 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007824:	2300      	movs	r3, #0
 8007826:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007828:	68fb      	ldr	r3, [r7, #12]
}
 800782a:	4618      	mov	r0, r3
 800782c:	3714      	adds	r7, #20
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr
 8007836:	bf00      	nop
 8007838:	20001af4 	.word	0x20001af4

0800783c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007844:	f7ff fa64 	bl	8006d10 <xTaskGetTickCount>
 8007848:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800784a:	4b0b      	ldr	r3, [pc, #44]	; (8007878 <prvSampleTimeNow+0x3c>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68fa      	ldr	r2, [r7, #12]
 8007850:	429a      	cmp	r2, r3
 8007852:	d205      	bcs.n	8007860 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007854:	f000 f93c 	bl	8007ad0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	601a      	str	r2, [r3, #0]
 800785e:	e002      	b.n	8007866 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007866:	4a04      	ldr	r2, [pc, #16]	; (8007878 <prvSampleTimeNow+0x3c>)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800786c:	68fb      	ldr	r3, [r7, #12]
}
 800786e:	4618      	mov	r0, r3
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	20001b04 	.word	0x20001b04

0800787c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b086      	sub	sp, #24
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	607a      	str	r2, [r7, #4]
 8007888:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800788a:	2300      	movs	r3, #0
 800788c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	68ba      	ldr	r2, [r7, #8]
 8007892:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800789a:	68ba      	ldr	r2, [r7, #8]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d812      	bhi.n	80078c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	1ad2      	subs	r2, r2, r3
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	699b      	ldr	r3, [r3, #24]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d302      	bcc.n	80078b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80078b0:	2301      	movs	r3, #1
 80078b2:	617b      	str	r3, [r7, #20]
 80078b4:	e01b      	b.n	80078ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80078b6:	4b10      	ldr	r3, [pc, #64]	; (80078f8 <prvInsertTimerInActiveList+0x7c>)
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	3304      	adds	r3, #4
 80078be:	4619      	mov	r1, r3
 80078c0:	4610      	mov	r0, r2
 80078c2:	f7fe f9c0 	bl	8005c46 <vListInsert>
 80078c6:	e012      	b.n	80078ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d206      	bcs.n	80078de <prvInsertTimerInActiveList+0x62>
 80078d0:	68ba      	ldr	r2, [r7, #8]
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d302      	bcc.n	80078de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80078d8:	2301      	movs	r3, #1
 80078da:	617b      	str	r3, [r7, #20]
 80078dc:	e007      	b.n	80078ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80078de:	4b07      	ldr	r3, [pc, #28]	; (80078fc <prvInsertTimerInActiveList+0x80>)
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	3304      	adds	r3, #4
 80078e6:	4619      	mov	r1, r3
 80078e8:	4610      	mov	r0, r2
 80078ea:	f7fe f9ac 	bl	8005c46 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80078ee:	697b      	ldr	r3, [r7, #20]
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3718      	adds	r7, #24
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	20001af8 	.word	0x20001af8
 80078fc:	20001af4 	.word	0x20001af4

08007900 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b08e      	sub	sp, #56	; 0x38
 8007904:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007906:	e0d0      	b.n	8007aaa <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2b00      	cmp	r3, #0
 800790c:	da1a      	bge.n	8007944 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800790e:	1d3b      	adds	r3, r7, #4
 8007910:	3304      	adds	r3, #4
 8007912:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007916:	2b00      	cmp	r3, #0
 8007918:	d10c      	bne.n	8007934 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800791a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800791e:	b672      	cpsid	i
 8007920:	f383 8811 	msr	BASEPRI, r3
 8007924:	f3bf 8f6f 	isb	sy
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	b662      	cpsie	i
 800792e:	61fb      	str	r3, [r7, #28]
}
 8007930:	bf00      	nop
 8007932:	e7fe      	b.n	8007932 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800793a:	6850      	ldr	r0, [r2, #4]
 800793c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800793e:	6892      	ldr	r2, [r2, #8]
 8007940:	4611      	mov	r1, r2
 8007942:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	f2c0 80ae 	blt.w	8007aa8 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007952:	695b      	ldr	r3, [r3, #20]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d004      	beq.n	8007962 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795a:	3304      	adds	r3, #4
 800795c:	4618      	mov	r0, r3
 800795e:	f7fe f9ab 	bl	8005cb8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007962:	463b      	mov	r3, r7
 8007964:	4618      	mov	r0, r3
 8007966:	f7ff ff69 	bl	800783c <prvSampleTimeNow>
 800796a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2b09      	cmp	r3, #9
 8007970:	f200 809b 	bhi.w	8007aaa <prvProcessReceivedCommands+0x1aa>
 8007974:	a201      	add	r2, pc, #4	; (adr r2, 800797c <prvProcessReceivedCommands+0x7c>)
 8007976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800797a:	bf00      	nop
 800797c:	080079a5 	.word	0x080079a5
 8007980:	080079a5 	.word	0x080079a5
 8007984:	080079a5 	.word	0x080079a5
 8007988:	08007a1d 	.word	0x08007a1d
 800798c:	08007a31 	.word	0x08007a31
 8007990:	08007a7f 	.word	0x08007a7f
 8007994:	080079a5 	.word	0x080079a5
 8007998:	080079a5 	.word	0x080079a5
 800799c:	08007a1d 	.word	0x08007a1d
 80079a0:	08007a31 	.word	0x08007a31
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80079a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079aa:	f043 0301 	orr.w	r3, r3, #1
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80079b6:	68ba      	ldr	r2, [r7, #8]
 80079b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ba:	699b      	ldr	r3, [r3, #24]
 80079bc:	18d1      	adds	r1, r2, r3
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079c4:	f7ff ff5a 	bl	800787c <prvInsertTimerInActiveList>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d06d      	beq.n	8007aaa <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d0:	6a1b      	ldr	r3, [r3, #32]
 80079d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80079d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079dc:	f003 0304 	and.w	r3, r3, #4
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d062      	beq.n	8007aaa <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80079e4:	68ba      	ldr	r2, [r7, #8]
 80079e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e8:	699b      	ldr	r3, [r3, #24]
 80079ea:	441a      	add	r2, r3
 80079ec:	2300      	movs	r3, #0
 80079ee:	9300      	str	r3, [sp, #0]
 80079f0:	2300      	movs	r3, #0
 80079f2:	2100      	movs	r1, #0
 80079f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079f6:	f7ff fdff 	bl	80075f8 <xTimerGenericCommand>
 80079fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80079fc:	6a3b      	ldr	r3, [r7, #32]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d153      	bne.n	8007aaa <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8007a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a06:	b672      	cpsid	i
 8007a08:	f383 8811 	msr	BASEPRI, r3
 8007a0c:	f3bf 8f6f 	isb	sy
 8007a10:	f3bf 8f4f 	dsb	sy
 8007a14:	b662      	cpsie	i
 8007a16:	61bb      	str	r3, [r7, #24]
}
 8007a18:	bf00      	nop
 8007a1a:	e7fe      	b.n	8007a1a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a22:	f023 0301 	bic.w	r3, r3, #1
 8007a26:	b2da      	uxtb	r2, r3
 8007a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007a2e:	e03c      	b.n	8007aaa <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a36:	f043 0301 	orr.w	r3, r3, #1
 8007a3a:	b2da      	uxtb	r2, r3
 8007a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007a42:	68ba      	ldr	r2, [r7, #8]
 8007a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a46:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4a:	699b      	ldr	r3, [r3, #24]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d10c      	bne.n	8007a6a <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8007a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a54:	b672      	cpsid	i
 8007a56:	f383 8811 	msr	BASEPRI, r3
 8007a5a:	f3bf 8f6f 	isb	sy
 8007a5e:	f3bf 8f4f 	dsb	sy
 8007a62:	b662      	cpsie	i
 8007a64:	617b      	str	r3, [r7, #20]
}
 8007a66:	bf00      	nop
 8007a68:	e7fe      	b.n	8007a68 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6c:	699a      	ldr	r2, [r3, #24]
 8007a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a70:	18d1      	adds	r1, r2, r3
 8007a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a78:	f7ff ff00 	bl	800787c <prvInsertTimerInActiveList>
					break;
 8007a7c:	e015      	b.n	8007aaa <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a84:	f003 0302 	and.w	r3, r3, #2
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d103      	bne.n	8007a94 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8007a8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a8e:	f000 fbcb 	bl	8008228 <vPortFree>
 8007a92:	e00a      	b.n	8007aaa <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a9a:	f023 0301 	bic.w	r3, r3, #1
 8007a9e:	b2da      	uxtb	r2, r3
 8007aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007aa6:	e000      	b.n	8007aaa <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007aa8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007aaa:	4b08      	ldr	r3, [pc, #32]	; (8007acc <prvProcessReceivedCommands+0x1cc>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	1d39      	adds	r1, r7, #4
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f7fe fbe0 	bl	8006278 <xQueueReceive>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	f47f af24 	bne.w	8007908 <prvProcessReceivedCommands+0x8>
	}
}
 8007ac0:	bf00      	nop
 8007ac2:	bf00      	nop
 8007ac4:	3730      	adds	r7, #48	; 0x30
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	20001afc 	.word	0x20001afc

08007ad0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b088      	sub	sp, #32
 8007ad4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007ad6:	e04a      	b.n	8007b6e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ad8:	4b2e      	ldr	r3, [pc, #184]	; (8007b94 <prvSwitchTimerLists+0xc4>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ae2:	4b2c      	ldr	r3, [pc, #176]	; (8007b94 <prvSwitchTimerLists+0xc4>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	3304      	adds	r3, #4
 8007af0:	4618      	mov	r0, r3
 8007af2:	f7fe f8e1 	bl	8005cb8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6a1b      	ldr	r3, [r3, #32]
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b04:	f003 0304 	and.w	r3, r3, #4
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d030      	beq.n	8007b6e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	699b      	ldr	r3, [r3, #24]
 8007b10:	693a      	ldr	r2, [r7, #16]
 8007b12:	4413      	add	r3, r2
 8007b14:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007b16:	68ba      	ldr	r2, [r7, #8]
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d90e      	bls.n	8007b3c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	68ba      	ldr	r2, [r7, #8]
 8007b22:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b2a:	4b1a      	ldr	r3, [pc, #104]	; (8007b94 <prvSwitchTimerLists+0xc4>)
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	3304      	adds	r3, #4
 8007b32:	4619      	mov	r1, r3
 8007b34:	4610      	mov	r0, r2
 8007b36:	f7fe f886 	bl	8005c46 <vListInsert>
 8007b3a:	e018      	b.n	8007b6e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	9300      	str	r3, [sp, #0]
 8007b40:	2300      	movs	r3, #0
 8007b42:	693a      	ldr	r2, [r7, #16]
 8007b44:	2100      	movs	r1, #0
 8007b46:	68f8      	ldr	r0, [r7, #12]
 8007b48:	f7ff fd56 	bl	80075f8 <xTimerGenericCommand>
 8007b4c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d10c      	bne.n	8007b6e <prvSwitchTimerLists+0x9e>
	__asm volatile
 8007b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b58:	b672      	cpsid	i
 8007b5a:	f383 8811 	msr	BASEPRI, r3
 8007b5e:	f3bf 8f6f 	isb	sy
 8007b62:	f3bf 8f4f 	dsb	sy
 8007b66:	b662      	cpsie	i
 8007b68:	603b      	str	r3, [r7, #0]
}
 8007b6a:	bf00      	nop
 8007b6c:	e7fe      	b.n	8007b6c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007b6e:	4b09      	ldr	r3, [pc, #36]	; (8007b94 <prvSwitchTimerLists+0xc4>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d1af      	bne.n	8007ad8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007b78:	4b06      	ldr	r3, [pc, #24]	; (8007b94 <prvSwitchTimerLists+0xc4>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007b7e:	4b06      	ldr	r3, [pc, #24]	; (8007b98 <prvSwitchTimerLists+0xc8>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a04      	ldr	r2, [pc, #16]	; (8007b94 <prvSwitchTimerLists+0xc4>)
 8007b84:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007b86:	4a04      	ldr	r2, [pc, #16]	; (8007b98 <prvSwitchTimerLists+0xc8>)
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	6013      	str	r3, [r2, #0]
}
 8007b8c:	bf00      	nop
 8007b8e:	3718      	adds	r7, #24
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	20001af4 	.word	0x20001af4
 8007b98:	20001af8 	.word	0x20001af8

08007b9c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007ba2:	f000 f94b 	bl	8007e3c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007ba6:	4b15      	ldr	r3, [pc, #84]	; (8007bfc <prvCheckForValidListAndQueue+0x60>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d120      	bne.n	8007bf0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007bae:	4814      	ldr	r0, [pc, #80]	; (8007c00 <prvCheckForValidListAndQueue+0x64>)
 8007bb0:	f7fd fff8 	bl	8005ba4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007bb4:	4813      	ldr	r0, [pc, #76]	; (8007c04 <prvCheckForValidListAndQueue+0x68>)
 8007bb6:	f7fd fff5 	bl	8005ba4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007bba:	4b13      	ldr	r3, [pc, #76]	; (8007c08 <prvCheckForValidListAndQueue+0x6c>)
 8007bbc:	4a10      	ldr	r2, [pc, #64]	; (8007c00 <prvCheckForValidListAndQueue+0x64>)
 8007bbe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007bc0:	4b12      	ldr	r3, [pc, #72]	; (8007c0c <prvCheckForValidListAndQueue+0x70>)
 8007bc2:	4a10      	ldr	r2, [pc, #64]	; (8007c04 <prvCheckForValidListAndQueue+0x68>)
 8007bc4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	9300      	str	r3, [sp, #0]
 8007bca:	4b11      	ldr	r3, [pc, #68]	; (8007c10 <prvCheckForValidListAndQueue+0x74>)
 8007bcc:	4a11      	ldr	r2, [pc, #68]	; (8007c14 <prvCheckForValidListAndQueue+0x78>)
 8007bce:	2110      	movs	r1, #16
 8007bd0:	200a      	movs	r0, #10
 8007bd2:	f7fe f905 	bl	8005de0 <xQueueGenericCreateStatic>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	4a08      	ldr	r2, [pc, #32]	; (8007bfc <prvCheckForValidListAndQueue+0x60>)
 8007bda:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007bdc:	4b07      	ldr	r3, [pc, #28]	; (8007bfc <prvCheckForValidListAndQueue+0x60>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d005      	beq.n	8007bf0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007be4:	4b05      	ldr	r3, [pc, #20]	; (8007bfc <prvCheckForValidListAndQueue+0x60>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	490b      	ldr	r1, [pc, #44]	; (8007c18 <prvCheckForValidListAndQueue+0x7c>)
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fe fd3a 	bl	8006664 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007bf0:	f000 f958 	bl	8007ea4 <vPortExitCritical>
}
 8007bf4:	bf00      	nop
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	20001afc 	.word	0x20001afc
 8007c00:	20001acc 	.word	0x20001acc
 8007c04:	20001ae0 	.word	0x20001ae0
 8007c08:	20001af4 	.word	0x20001af4
 8007c0c:	20001af8 	.word	0x20001af8
 8007c10:	20001ba8 	.word	0x20001ba8
 8007c14:	20001b08 	.word	0x20001b08
 8007c18:	08008514 	.word	0x08008514

08007c1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	3b04      	subs	r3, #4
 8007c2c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007c34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	3b04      	subs	r3, #4
 8007c3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	f023 0201 	bic.w	r2, r3, #1
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	3b04      	subs	r3, #4
 8007c4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007c4c:	4a0c      	ldr	r2, [pc, #48]	; (8007c80 <pxPortInitialiseStack+0x64>)
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	3b14      	subs	r3, #20
 8007c56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	3b04      	subs	r3, #4
 8007c62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f06f 0202 	mvn.w	r2, #2
 8007c6a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	3b20      	subs	r3, #32
 8007c70:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007c72:	68fb      	ldr	r3, [r7, #12]
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3714      	adds	r7, #20
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr
 8007c80:	08007c85 	.word	0x08007c85

08007c84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007c84:	b480      	push	{r7}
 8007c86:	b085      	sub	sp, #20
 8007c88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007c8e:	4b14      	ldr	r3, [pc, #80]	; (8007ce0 <prvTaskExitError+0x5c>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c96:	d00c      	beq.n	8007cb2 <prvTaskExitError+0x2e>
	__asm volatile
 8007c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9c:	b672      	cpsid	i
 8007c9e:	f383 8811 	msr	BASEPRI, r3
 8007ca2:	f3bf 8f6f 	isb	sy
 8007ca6:	f3bf 8f4f 	dsb	sy
 8007caa:	b662      	cpsie	i
 8007cac:	60fb      	str	r3, [r7, #12]
}
 8007cae:	bf00      	nop
 8007cb0:	e7fe      	b.n	8007cb0 <prvTaskExitError+0x2c>
	__asm volatile
 8007cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb6:	b672      	cpsid	i
 8007cb8:	f383 8811 	msr	BASEPRI, r3
 8007cbc:	f3bf 8f6f 	isb	sy
 8007cc0:	f3bf 8f4f 	dsb	sy
 8007cc4:	b662      	cpsie	i
 8007cc6:	60bb      	str	r3, [r7, #8]
}
 8007cc8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007cca:	bf00      	nop
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d0fc      	beq.n	8007ccc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007cd2:	bf00      	nop
 8007cd4:	bf00      	nop
 8007cd6:	3714      	adds	r7, #20
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr
 8007ce0:	2000000c 	.word	0x2000000c
	...

08007cf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007cf0:	4b07      	ldr	r3, [pc, #28]	; (8007d10 <pxCurrentTCBConst2>)
 8007cf2:	6819      	ldr	r1, [r3, #0]
 8007cf4:	6808      	ldr	r0, [r1, #0]
 8007cf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cfa:	f380 8809 	msr	PSP, r0
 8007cfe:	f3bf 8f6f 	isb	sy
 8007d02:	f04f 0000 	mov.w	r0, #0
 8007d06:	f380 8811 	msr	BASEPRI, r0
 8007d0a:	4770      	bx	lr
 8007d0c:	f3af 8000 	nop.w

08007d10 <pxCurrentTCBConst2>:
 8007d10:	200015cc 	.word	0x200015cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007d14:	bf00      	nop
 8007d16:	bf00      	nop

08007d18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007d18:	4808      	ldr	r0, [pc, #32]	; (8007d3c <prvPortStartFirstTask+0x24>)
 8007d1a:	6800      	ldr	r0, [r0, #0]
 8007d1c:	6800      	ldr	r0, [r0, #0]
 8007d1e:	f380 8808 	msr	MSP, r0
 8007d22:	f04f 0000 	mov.w	r0, #0
 8007d26:	f380 8814 	msr	CONTROL, r0
 8007d2a:	b662      	cpsie	i
 8007d2c:	b661      	cpsie	f
 8007d2e:	f3bf 8f4f 	dsb	sy
 8007d32:	f3bf 8f6f 	isb	sy
 8007d36:	df00      	svc	0
 8007d38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007d3a:	bf00      	nop
 8007d3c:	e000ed08 	.word	0xe000ed08

08007d40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007d46:	4b37      	ldr	r3, [pc, #220]	; (8007e24 <xPortStartScheduler+0xe4>)
 8007d48:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	22ff      	movs	r2, #255	; 0xff
 8007d56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007d60:	78fb      	ldrb	r3, [r7, #3]
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007d68:	b2da      	uxtb	r2, r3
 8007d6a:	4b2f      	ldr	r3, [pc, #188]	; (8007e28 <xPortStartScheduler+0xe8>)
 8007d6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007d6e:	4b2f      	ldr	r3, [pc, #188]	; (8007e2c <xPortStartScheduler+0xec>)
 8007d70:	2207      	movs	r2, #7
 8007d72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d74:	e009      	b.n	8007d8a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007d76:	4b2d      	ldr	r3, [pc, #180]	; (8007e2c <xPortStartScheduler+0xec>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	4a2b      	ldr	r2, [pc, #172]	; (8007e2c <xPortStartScheduler+0xec>)
 8007d7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007d80:	78fb      	ldrb	r3, [r7, #3]
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	005b      	lsls	r3, r3, #1
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d8a:	78fb      	ldrb	r3, [r7, #3]
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d92:	2b80      	cmp	r3, #128	; 0x80
 8007d94:	d0ef      	beq.n	8007d76 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007d96:	4b25      	ldr	r3, [pc, #148]	; (8007e2c <xPortStartScheduler+0xec>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f1c3 0307 	rsb	r3, r3, #7
 8007d9e:	2b04      	cmp	r3, #4
 8007da0:	d00c      	beq.n	8007dbc <xPortStartScheduler+0x7c>
	__asm volatile
 8007da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da6:	b672      	cpsid	i
 8007da8:	f383 8811 	msr	BASEPRI, r3
 8007dac:	f3bf 8f6f 	isb	sy
 8007db0:	f3bf 8f4f 	dsb	sy
 8007db4:	b662      	cpsie	i
 8007db6:	60bb      	str	r3, [r7, #8]
}
 8007db8:	bf00      	nop
 8007dba:	e7fe      	b.n	8007dba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007dbc:	4b1b      	ldr	r3, [pc, #108]	; (8007e2c <xPortStartScheduler+0xec>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	021b      	lsls	r3, r3, #8
 8007dc2:	4a1a      	ldr	r2, [pc, #104]	; (8007e2c <xPortStartScheduler+0xec>)
 8007dc4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007dc6:	4b19      	ldr	r3, [pc, #100]	; (8007e2c <xPortStartScheduler+0xec>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007dce:	4a17      	ldr	r2, [pc, #92]	; (8007e2c <xPortStartScheduler+0xec>)
 8007dd0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	b2da      	uxtb	r2, r3
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007dda:	4b15      	ldr	r3, [pc, #84]	; (8007e30 <xPortStartScheduler+0xf0>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a14      	ldr	r2, [pc, #80]	; (8007e30 <xPortStartScheduler+0xf0>)
 8007de0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007de4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007de6:	4b12      	ldr	r3, [pc, #72]	; (8007e30 <xPortStartScheduler+0xf0>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a11      	ldr	r2, [pc, #68]	; (8007e30 <xPortStartScheduler+0xf0>)
 8007dec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007df0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007df2:	f000 f8dd 	bl	8007fb0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007df6:	4b0f      	ldr	r3, [pc, #60]	; (8007e34 <xPortStartScheduler+0xf4>)
 8007df8:	2200      	movs	r2, #0
 8007dfa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007dfc:	f000 f8fc 	bl	8007ff8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007e00:	4b0d      	ldr	r3, [pc, #52]	; (8007e38 <xPortStartScheduler+0xf8>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a0c      	ldr	r2, [pc, #48]	; (8007e38 <xPortStartScheduler+0xf8>)
 8007e06:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007e0a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007e0c:	f7ff ff84 	bl	8007d18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007e10:	f7ff f84a 	bl	8006ea8 <vTaskSwitchContext>
	prvTaskExitError();
 8007e14:	f7ff ff36 	bl	8007c84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	e000e400 	.word	0xe000e400
 8007e28:	20001bf8 	.word	0x20001bf8
 8007e2c:	20001bfc 	.word	0x20001bfc
 8007e30:	e000ed20 	.word	0xe000ed20
 8007e34:	2000000c 	.word	0x2000000c
 8007e38:	e000ef34 	.word	0xe000ef34

08007e3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
	__asm volatile
 8007e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e46:	b672      	cpsid	i
 8007e48:	f383 8811 	msr	BASEPRI, r3
 8007e4c:	f3bf 8f6f 	isb	sy
 8007e50:	f3bf 8f4f 	dsb	sy
 8007e54:	b662      	cpsie	i
 8007e56:	607b      	str	r3, [r7, #4]
}
 8007e58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007e5a:	4b10      	ldr	r3, [pc, #64]	; (8007e9c <vPortEnterCritical+0x60>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	4a0e      	ldr	r2, [pc, #56]	; (8007e9c <vPortEnterCritical+0x60>)
 8007e62:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007e64:	4b0d      	ldr	r3, [pc, #52]	; (8007e9c <vPortEnterCritical+0x60>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d111      	bne.n	8007e90 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007e6c:	4b0c      	ldr	r3, [pc, #48]	; (8007ea0 <vPortEnterCritical+0x64>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00c      	beq.n	8007e90 <vPortEnterCritical+0x54>
	__asm volatile
 8007e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e7a:	b672      	cpsid	i
 8007e7c:	f383 8811 	msr	BASEPRI, r3
 8007e80:	f3bf 8f6f 	isb	sy
 8007e84:	f3bf 8f4f 	dsb	sy
 8007e88:	b662      	cpsie	i
 8007e8a:	603b      	str	r3, [r7, #0]
}
 8007e8c:	bf00      	nop
 8007e8e:	e7fe      	b.n	8007e8e <vPortEnterCritical+0x52>
	}
}
 8007e90:	bf00      	nop
 8007e92:	370c      	adds	r7, #12
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr
 8007e9c:	2000000c 	.word	0x2000000c
 8007ea0:	e000ed04 	.word	0xe000ed04

08007ea4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007eaa:	4b13      	ldr	r3, [pc, #76]	; (8007ef8 <vPortExitCritical+0x54>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d10c      	bne.n	8007ecc <vPortExitCritical+0x28>
	__asm volatile
 8007eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb6:	b672      	cpsid	i
 8007eb8:	f383 8811 	msr	BASEPRI, r3
 8007ebc:	f3bf 8f6f 	isb	sy
 8007ec0:	f3bf 8f4f 	dsb	sy
 8007ec4:	b662      	cpsie	i
 8007ec6:	607b      	str	r3, [r7, #4]
}
 8007ec8:	bf00      	nop
 8007eca:	e7fe      	b.n	8007eca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007ecc:	4b0a      	ldr	r3, [pc, #40]	; (8007ef8 <vPortExitCritical+0x54>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	4a09      	ldr	r2, [pc, #36]	; (8007ef8 <vPortExitCritical+0x54>)
 8007ed4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007ed6:	4b08      	ldr	r3, [pc, #32]	; (8007ef8 <vPortExitCritical+0x54>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d105      	bne.n	8007eea <vPortExitCritical+0x46>
 8007ede:	2300      	movs	r3, #0
 8007ee0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	f383 8811 	msr	BASEPRI, r3
}
 8007ee8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007eea:	bf00      	nop
 8007eec:	370c      	adds	r7, #12
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr
 8007ef6:	bf00      	nop
 8007ef8:	2000000c 	.word	0x2000000c
 8007efc:	00000000 	.word	0x00000000

08007f00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007f00:	f3ef 8009 	mrs	r0, PSP
 8007f04:	f3bf 8f6f 	isb	sy
 8007f08:	4b15      	ldr	r3, [pc, #84]	; (8007f60 <pxCurrentTCBConst>)
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	f01e 0f10 	tst.w	lr, #16
 8007f10:	bf08      	it	eq
 8007f12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007f16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f1a:	6010      	str	r0, [r2, #0]
 8007f1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007f20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007f24:	b672      	cpsid	i
 8007f26:	f380 8811 	msr	BASEPRI, r0
 8007f2a:	f3bf 8f4f 	dsb	sy
 8007f2e:	f3bf 8f6f 	isb	sy
 8007f32:	b662      	cpsie	i
 8007f34:	f7fe ffb8 	bl	8006ea8 <vTaskSwitchContext>
 8007f38:	f04f 0000 	mov.w	r0, #0
 8007f3c:	f380 8811 	msr	BASEPRI, r0
 8007f40:	bc09      	pop	{r0, r3}
 8007f42:	6819      	ldr	r1, [r3, #0]
 8007f44:	6808      	ldr	r0, [r1, #0]
 8007f46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f4a:	f01e 0f10 	tst.w	lr, #16
 8007f4e:	bf08      	it	eq
 8007f50:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007f54:	f380 8809 	msr	PSP, r0
 8007f58:	f3bf 8f6f 	isb	sy
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop

08007f60 <pxCurrentTCBConst>:
 8007f60:	200015cc 	.word	0x200015cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007f64:	bf00      	nop
 8007f66:	bf00      	nop

08007f68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
	__asm volatile
 8007f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f72:	b672      	cpsid	i
 8007f74:	f383 8811 	msr	BASEPRI, r3
 8007f78:	f3bf 8f6f 	isb	sy
 8007f7c:	f3bf 8f4f 	dsb	sy
 8007f80:	b662      	cpsie	i
 8007f82:	607b      	str	r3, [r7, #4]
}
 8007f84:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007f86:	f7fe fed3 	bl	8006d30 <xTaskIncrementTick>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d003      	beq.n	8007f98 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007f90:	4b06      	ldr	r3, [pc, #24]	; (8007fac <xPortSysTickHandler+0x44>)
 8007f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f96:	601a      	str	r2, [r3, #0]
 8007f98:	2300      	movs	r3, #0
 8007f9a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	f383 8811 	msr	BASEPRI, r3
}
 8007fa2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007fa4:	bf00      	nop
 8007fa6:	3708      	adds	r7, #8
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}
 8007fac:	e000ed04 	.word	0xe000ed04

08007fb0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007fb4:	4b0b      	ldr	r3, [pc, #44]	; (8007fe4 <vPortSetupTimerInterrupt+0x34>)
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007fba:	4b0b      	ldr	r3, [pc, #44]	; (8007fe8 <vPortSetupTimerInterrupt+0x38>)
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007fc0:	4b0a      	ldr	r3, [pc, #40]	; (8007fec <vPortSetupTimerInterrupt+0x3c>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a0a      	ldr	r2, [pc, #40]	; (8007ff0 <vPortSetupTimerInterrupt+0x40>)
 8007fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8007fca:	099b      	lsrs	r3, r3, #6
 8007fcc:	4a09      	ldr	r2, [pc, #36]	; (8007ff4 <vPortSetupTimerInterrupt+0x44>)
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007fd2:	4b04      	ldr	r3, [pc, #16]	; (8007fe4 <vPortSetupTimerInterrupt+0x34>)
 8007fd4:	2207      	movs	r2, #7
 8007fd6:	601a      	str	r2, [r3, #0]
}
 8007fd8:	bf00      	nop
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr
 8007fe2:	bf00      	nop
 8007fe4:	e000e010 	.word	0xe000e010
 8007fe8:	e000e018 	.word	0xe000e018
 8007fec:	20000000 	.word	0x20000000
 8007ff0:	10624dd3 	.word	0x10624dd3
 8007ff4:	e000e014 	.word	0xe000e014

08007ff8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ff8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008008 <vPortEnableVFP+0x10>
 8007ffc:	6801      	ldr	r1, [r0, #0]
 8007ffe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008002:	6001      	str	r1, [r0, #0]
 8008004:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008006:	bf00      	nop
 8008008:	e000ed88 	.word	0xe000ed88

0800800c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800800c:	b480      	push	{r7}
 800800e:	b085      	sub	sp, #20
 8008010:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008012:	f3ef 8305 	mrs	r3, IPSR
 8008016:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2b0f      	cmp	r3, #15
 800801c:	d916      	bls.n	800804c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800801e:	4a19      	ldr	r2, [pc, #100]	; (8008084 <vPortValidateInterruptPriority+0x78>)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	4413      	add	r3, r2
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008028:	4b17      	ldr	r3, [pc, #92]	; (8008088 <vPortValidateInterruptPriority+0x7c>)
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	7afa      	ldrb	r2, [r7, #11]
 800802e:	429a      	cmp	r2, r3
 8008030:	d20c      	bcs.n	800804c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8008032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008036:	b672      	cpsid	i
 8008038:	f383 8811 	msr	BASEPRI, r3
 800803c:	f3bf 8f6f 	isb	sy
 8008040:	f3bf 8f4f 	dsb	sy
 8008044:	b662      	cpsie	i
 8008046:	607b      	str	r3, [r7, #4]
}
 8008048:	bf00      	nop
 800804a:	e7fe      	b.n	800804a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800804c:	4b0f      	ldr	r3, [pc, #60]	; (800808c <vPortValidateInterruptPriority+0x80>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008054:	4b0e      	ldr	r3, [pc, #56]	; (8008090 <vPortValidateInterruptPriority+0x84>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	429a      	cmp	r2, r3
 800805a:	d90c      	bls.n	8008076 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800805c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008060:	b672      	cpsid	i
 8008062:	f383 8811 	msr	BASEPRI, r3
 8008066:	f3bf 8f6f 	isb	sy
 800806a:	f3bf 8f4f 	dsb	sy
 800806e:	b662      	cpsie	i
 8008070:	603b      	str	r3, [r7, #0]
}
 8008072:	bf00      	nop
 8008074:	e7fe      	b.n	8008074 <vPortValidateInterruptPriority+0x68>
	}
 8008076:	bf00      	nop
 8008078:	3714      	adds	r7, #20
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	e000e3f0 	.word	0xe000e3f0
 8008088:	20001bf8 	.word	0x20001bf8
 800808c:	e000ed0c 	.word	0xe000ed0c
 8008090:	20001bfc 	.word	0x20001bfc

08008094 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b08a      	sub	sp, #40	; 0x28
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800809c:	2300      	movs	r3, #0
 800809e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80080a0:	f7fe fd88 	bl	8006bb4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80080a4:	4b5b      	ldr	r3, [pc, #364]	; (8008214 <pvPortMalloc+0x180>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d101      	bne.n	80080b0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80080ac:	f000 f91a 	bl	80082e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80080b0:	4b59      	ldr	r3, [pc, #356]	; (8008218 <pvPortMalloc+0x184>)
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4013      	ands	r3, r2
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	f040 8092 	bne.w	80081e2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d01f      	beq.n	8008104 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80080c4:	2208      	movs	r2, #8
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4413      	add	r3, r2
 80080ca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f003 0307 	and.w	r3, r3, #7
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d016      	beq.n	8008104 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f023 0307 	bic.w	r3, r3, #7
 80080dc:	3308      	adds	r3, #8
 80080de:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f003 0307 	and.w	r3, r3, #7
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d00c      	beq.n	8008104 <pvPortMalloc+0x70>
	__asm volatile
 80080ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ee:	b672      	cpsid	i
 80080f0:	f383 8811 	msr	BASEPRI, r3
 80080f4:	f3bf 8f6f 	isb	sy
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	b662      	cpsie	i
 80080fe:	617b      	str	r3, [r7, #20]
}
 8008100:	bf00      	nop
 8008102:	e7fe      	b.n	8008102 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d06b      	beq.n	80081e2 <pvPortMalloc+0x14e>
 800810a:	4b44      	ldr	r3, [pc, #272]	; (800821c <pvPortMalloc+0x188>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	429a      	cmp	r2, r3
 8008112:	d866      	bhi.n	80081e2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008114:	4b42      	ldr	r3, [pc, #264]	; (8008220 <pvPortMalloc+0x18c>)
 8008116:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008118:	4b41      	ldr	r3, [pc, #260]	; (8008220 <pvPortMalloc+0x18c>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800811e:	e004      	b.n	800812a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8008120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008122:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800812a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	429a      	cmp	r2, r3
 8008132:	d903      	bls.n	800813c <pvPortMalloc+0xa8>
 8008134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d1f1      	bne.n	8008120 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800813c:	4b35      	ldr	r3, [pc, #212]	; (8008214 <pvPortMalloc+0x180>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008142:	429a      	cmp	r2, r3
 8008144:	d04d      	beq.n	80081e2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008146:	6a3b      	ldr	r3, [r7, #32]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2208      	movs	r2, #8
 800814c:	4413      	add	r3, r2
 800814e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	6a3b      	ldr	r3, [r7, #32]
 8008156:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815a:	685a      	ldr	r2, [r3, #4]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	1ad2      	subs	r2, r2, r3
 8008160:	2308      	movs	r3, #8
 8008162:	005b      	lsls	r3, r3, #1
 8008164:	429a      	cmp	r2, r3
 8008166:	d921      	bls.n	80081ac <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4413      	add	r3, r2
 800816e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008170:	69bb      	ldr	r3, [r7, #24]
 8008172:	f003 0307 	and.w	r3, r3, #7
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00c      	beq.n	8008194 <pvPortMalloc+0x100>
	__asm volatile
 800817a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817e:	b672      	cpsid	i
 8008180:	f383 8811 	msr	BASEPRI, r3
 8008184:	f3bf 8f6f 	isb	sy
 8008188:	f3bf 8f4f 	dsb	sy
 800818c:	b662      	cpsie	i
 800818e:	613b      	str	r3, [r7, #16]
}
 8008190:	bf00      	nop
 8008192:	e7fe      	b.n	8008192 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008196:	685a      	ldr	r2, [r3, #4]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	1ad2      	subs	r2, r2, r3
 800819c:	69bb      	ldr	r3, [r7, #24]
 800819e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80081a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80081a6:	69b8      	ldr	r0, [r7, #24]
 80081a8:	f000 f8fe 	bl	80083a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80081ac:	4b1b      	ldr	r3, [pc, #108]	; (800821c <pvPortMalloc+0x188>)
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	1ad3      	subs	r3, r2, r3
 80081b6:	4a19      	ldr	r2, [pc, #100]	; (800821c <pvPortMalloc+0x188>)
 80081b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80081ba:	4b18      	ldr	r3, [pc, #96]	; (800821c <pvPortMalloc+0x188>)
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	4b19      	ldr	r3, [pc, #100]	; (8008224 <pvPortMalloc+0x190>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d203      	bcs.n	80081ce <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80081c6:	4b15      	ldr	r3, [pc, #84]	; (800821c <pvPortMalloc+0x188>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a16      	ldr	r2, [pc, #88]	; (8008224 <pvPortMalloc+0x190>)
 80081cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80081ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d0:	685a      	ldr	r2, [r3, #4]
 80081d2:	4b11      	ldr	r3, [pc, #68]	; (8008218 <pvPortMalloc+0x184>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	431a      	orrs	r2, r3
 80081d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80081dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081de:	2200      	movs	r2, #0
 80081e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80081e2:	f7fe fcf5 	bl	8006bd0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80081e6:	69fb      	ldr	r3, [r7, #28]
 80081e8:	f003 0307 	and.w	r3, r3, #7
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00c      	beq.n	800820a <pvPortMalloc+0x176>
	__asm volatile
 80081f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f4:	b672      	cpsid	i
 80081f6:	f383 8811 	msr	BASEPRI, r3
 80081fa:	f3bf 8f6f 	isb	sy
 80081fe:	f3bf 8f4f 	dsb	sy
 8008202:	b662      	cpsie	i
 8008204:	60fb      	str	r3, [r7, #12]
}
 8008206:	bf00      	nop
 8008208:	e7fe      	b.n	8008208 <pvPortMalloc+0x174>
	return pvReturn;
 800820a:	69fb      	ldr	r3, [r7, #28]
}
 800820c:	4618      	mov	r0, r3
 800820e:	3728      	adds	r7, #40	; 0x28
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}
 8008214:	20005808 	.word	0x20005808
 8008218:	20005814 	.word	0x20005814
 800821c:	2000580c 	.word	0x2000580c
 8008220:	20005800 	.word	0x20005800
 8008224:	20005810 	.word	0x20005810

08008228 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b086      	sub	sp, #24
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d04c      	beq.n	80082d4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800823a:	2308      	movs	r3, #8
 800823c:	425b      	negs	r3, r3
 800823e:	697a      	ldr	r2, [r7, #20]
 8008240:	4413      	add	r3, r2
 8008242:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	685a      	ldr	r2, [r3, #4]
 800824c:	4b23      	ldr	r3, [pc, #140]	; (80082dc <vPortFree+0xb4>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4013      	ands	r3, r2
 8008252:	2b00      	cmp	r3, #0
 8008254:	d10c      	bne.n	8008270 <vPortFree+0x48>
	__asm volatile
 8008256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825a:	b672      	cpsid	i
 800825c:	f383 8811 	msr	BASEPRI, r3
 8008260:	f3bf 8f6f 	isb	sy
 8008264:	f3bf 8f4f 	dsb	sy
 8008268:	b662      	cpsie	i
 800826a:	60fb      	str	r3, [r7, #12]
}
 800826c:	bf00      	nop
 800826e:	e7fe      	b.n	800826e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d00c      	beq.n	8008292 <vPortFree+0x6a>
	__asm volatile
 8008278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827c:	b672      	cpsid	i
 800827e:	f383 8811 	msr	BASEPRI, r3
 8008282:	f3bf 8f6f 	isb	sy
 8008286:	f3bf 8f4f 	dsb	sy
 800828a:	b662      	cpsie	i
 800828c:	60bb      	str	r3, [r7, #8]
}
 800828e:	bf00      	nop
 8008290:	e7fe      	b.n	8008290 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	685a      	ldr	r2, [r3, #4]
 8008296:	4b11      	ldr	r3, [pc, #68]	; (80082dc <vPortFree+0xb4>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4013      	ands	r3, r2
 800829c:	2b00      	cmp	r3, #0
 800829e:	d019      	beq.n	80082d4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d115      	bne.n	80082d4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	685a      	ldr	r2, [r3, #4]
 80082ac:	4b0b      	ldr	r3, [pc, #44]	; (80082dc <vPortFree+0xb4>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	43db      	mvns	r3, r3
 80082b2:	401a      	ands	r2, r3
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80082b8:	f7fe fc7c 	bl	8006bb4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	685a      	ldr	r2, [r3, #4]
 80082c0:	4b07      	ldr	r3, [pc, #28]	; (80082e0 <vPortFree+0xb8>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4413      	add	r3, r2
 80082c6:	4a06      	ldr	r2, [pc, #24]	; (80082e0 <vPortFree+0xb8>)
 80082c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80082ca:	6938      	ldr	r0, [r7, #16]
 80082cc:	f000 f86c 	bl	80083a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80082d0:	f7fe fc7e 	bl	8006bd0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80082d4:	bf00      	nop
 80082d6:	3718      	adds	r7, #24
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	20005814 	.word	0x20005814
 80082e0:	2000580c 	.word	0x2000580c

080082e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80082e4:	b480      	push	{r7}
 80082e6:	b085      	sub	sp, #20
 80082e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80082ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80082ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80082f0:	4b27      	ldr	r3, [pc, #156]	; (8008390 <prvHeapInit+0xac>)
 80082f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f003 0307 	and.w	r3, r3, #7
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00c      	beq.n	8008318 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	3307      	adds	r3, #7
 8008302:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f023 0307 	bic.w	r3, r3, #7
 800830a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800830c:	68ba      	ldr	r2, [r7, #8]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	1ad3      	subs	r3, r2, r3
 8008312:	4a1f      	ldr	r2, [pc, #124]	; (8008390 <prvHeapInit+0xac>)
 8008314:	4413      	add	r3, r2
 8008316:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800831c:	4a1d      	ldr	r2, [pc, #116]	; (8008394 <prvHeapInit+0xb0>)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008322:	4b1c      	ldr	r3, [pc, #112]	; (8008394 <prvHeapInit+0xb0>)
 8008324:	2200      	movs	r2, #0
 8008326:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	68ba      	ldr	r2, [r7, #8]
 800832c:	4413      	add	r3, r2
 800832e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008330:	2208      	movs	r2, #8
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	1a9b      	subs	r3, r3, r2
 8008336:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f023 0307 	bic.w	r3, r3, #7
 800833e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	4a15      	ldr	r2, [pc, #84]	; (8008398 <prvHeapInit+0xb4>)
 8008344:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008346:	4b14      	ldr	r3, [pc, #80]	; (8008398 <prvHeapInit+0xb4>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2200      	movs	r2, #0
 800834c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800834e:	4b12      	ldr	r3, [pc, #72]	; (8008398 <prvHeapInit+0xb4>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2200      	movs	r2, #0
 8008354:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	68fa      	ldr	r2, [r7, #12]
 800835e:	1ad2      	subs	r2, r2, r3
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008364:	4b0c      	ldr	r3, [pc, #48]	; (8008398 <prvHeapInit+0xb4>)
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	4a0a      	ldr	r2, [pc, #40]	; (800839c <prvHeapInit+0xb8>)
 8008372:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	4a09      	ldr	r2, [pc, #36]	; (80083a0 <prvHeapInit+0xbc>)
 800837a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800837c:	4b09      	ldr	r3, [pc, #36]	; (80083a4 <prvHeapInit+0xc0>)
 800837e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008382:	601a      	str	r2, [r3, #0]
}
 8008384:	bf00      	nop
 8008386:	3714      	adds	r7, #20
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr
 8008390:	20001c00 	.word	0x20001c00
 8008394:	20005800 	.word	0x20005800
 8008398:	20005808 	.word	0x20005808
 800839c:	20005810 	.word	0x20005810
 80083a0:	2000580c 	.word	0x2000580c
 80083a4:	20005814 	.word	0x20005814

080083a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80083a8:	b480      	push	{r7}
 80083aa:	b085      	sub	sp, #20
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80083b0:	4b28      	ldr	r3, [pc, #160]	; (8008454 <prvInsertBlockIntoFreeList+0xac>)
 80083b2:	60fb      	str	r3, [r7, #12]
 80083b4:	e002      	b.n	80083bc <prvInsertBlockIntoFreeList+0x14>
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	60fb      	str	r3, [r7, #12]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d8f7      	bhi.n	80083b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	68ba      	ldr	r2, [r7, #8]
 80083d0:	4413      	add	r3, r2
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d108      	bne.n	80083ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	685a      	ldr	r2, [r3, #4]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	441a      	add	r2, r3
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	68ba      	ldr	r2, [r7, #8]
 80083f4:	441a      	add	r2, r3
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d118      	bne.n	8008430 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	4b15      	ldr	r3, [pc, #84]	; (8008458 <prvInsertBlockIntoFreeList+0xb0>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	429a      	cmp	r2, r3
 8008408:	d00d      	beq.n	8008426 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	685a      	ldr	r2, [r3, #4]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	441a      	add	r2, r3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	601a      	str	r2, [r3, #0]
 8008424:	e008      	b.n	8008438 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008426:	4b0c      	ldr	r3, [pc, #48]	; (8008458 <prvInsertBlockIntoFreeList+0xb0>)
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	601a      	str	r2, [r3, #0]
 800842e:	e003      	b.n	8008438 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008438:	68fa      	ldr	r2, [r7, #12]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	429a      	cmp	r2, r3
 800843e:	d002      	beq.n	8008446 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008446:	bf00      	nop
 8008448:	3714      	adds	r7, #20
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr
 8008452:	bf00      	nop
 8008454:	20005800 	.word	0x20005800
 8008458:	20005808 	.word	0x20005808

0800845c <__libc_init_array>:
 800845c:	b570      	push	{r4, r5, r6, lr}
 800845e:	4d0d      	ldr	r5, [pc, #52]	; (8008494 <__libc_init_array+0x38>)
 8008460:	4c0d      	ldr	r4, [pc, #52]	; (8008498 <__libc_init_array+0x3c>)
 8008462:	1b64      	subs	r4, r4, r5
 8008464:	10a4      	asrs	r4, r4, #2
 8008466:	2600      	movs	r6, #0
 8008468:	42a6      	cmp	r6, r4
 800846a:	d109      	bne.n	8008480 <__libc_init_array+0x24>
 800846c:	4d0b      	ldr	r5, [pc, #44]	; (800849c <__libc_init_array+0x40>)
 800846e:	4c0c      	ldr	r4, [pc, #48]	; (80084a0 <__libc_init_array+0x44>)
 8008470:	f000 f82e 	bl	80084d0 <_init>
 8008474:	1b64      	subs	r4, r4, r5
 8008476:	10a4      	asrs	r4, r4, #2
 8008478:	2600      	movs	r6, #0
 800847a:	42a6      	cmp	r6, r4
 800847c:	d105      	bne.n	800848a <__libc_init_array+0x2e>
 800847e:	bd70      	pop	{r4, r5, r6, pc}
 8008480:	f855 3b04 	ldr.w	r3, [r5], #4
 8008484:	4798      	blx	r3
 8008486:	3601      	adds	r6, #1
 8008488:	e7ee      	b.n	8008468 <__libc_init_array+0xc>
 800848a:	f855 3b04 	ldr.w	r3, [r5], #4
 800848e:	4798      	blx	r3
 8008490:	3601      	adds	r6, #1
 8008492:	e7f2      	b.n	800847a <__libc_init_array+0x1e>
 8008494:	08008580 	.word	0x08008580
 8008498:	08008580 	.word	0x08008580
 800849c:	08008580 	.word	0x08008580
 80084a0:	08008584 	.word	0x08008584

080084a4 <memcpy>:
 80084a4:	440a      	add	r2, r1
 80084a6:	4291      	cmp	r1, r2
 80084a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80084ac:	d100      	bne.n	80084b0 <memcpy+0xc>
 80084ae:	4770      	bx	lr
 80084b0:	b510      	push	{r4, lr}
 80084b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084ba:	4291      	cmp	r1, r2
 80084bc:	d1f9      	bne.n	80084b2 <memcpy+0xe>
 80084be:	bd10      	pop	{r4, pc}

080084c0 <memset>:
 80084c0:	4402      	add	r2, r0
 80084c2:	4603      	mov	r3, r0
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d100      	bne.n	80084ca <memset+0xa>
 80084c8:	4770      	bx	lr
 80084ca:	f803 1b01 	strb.w	r1, [r3], #1
 80084ce:	e7f9      	b.n	80084c4 <memset+0x4>

080084d0 <_init>:
 80084d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084d2:	bf00      	nop
 80084d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084d6:	bc08      	pop	{r3}
 80084d8:	469e      	mov	lr, r3
 80084da:	4770      	bx	lr

080084dc <_fini>:
 80084dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084de:	bf00      	nop
 80084e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084e2:	bc08      	pop	{r3}
 80084e4:	469e      	mov	lr, r3
 80084e6:	4770      	bx	lr
