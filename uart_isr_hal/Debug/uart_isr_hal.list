
uart_isr_hal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074f0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080076f0  080076f0  000176f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077b0  080077b0  000201b4  2**0
                  CONTENTS
  4 .ARM          00000008  080077b0  080077b0  000177b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077b8  080077b8  000201b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077b8  080077b8  000177b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077bc  080077bc  000177bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080077c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000074  08007834  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000114  080078d4  00020114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000051c4  200001b4  08007974  000201b4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20005378  08007974  00025378  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001eb1c  00000000  00000000  000201e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003b41  00000000  00000000  0003ecfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001520  00000000  00000000  00042840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000013c8  00000000  00000000  00043d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00003ed3  00000000  00000000  00045128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00018abb  00000000  00000000  00048ffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00103c59  00000000  00000000  00061ab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0016570f  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005b74  00000000  00000000  00165760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001b4 	.word	0x200001b4
 800021c:	00000000 	.word	0x00000000
 8000220:	080076d8 	.word	0x080076d8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001b8 	.word	0x200001b8
 800023c:	080076d8 	.word	0x080076d8

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f000 fd05 	bl	8000f56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054c:	f000 f820 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000550:	f000 f99c 	bl	800088c <MX_GPIO_Init>
  MX_ETH_Init();
 8000554:	f000 f88e 	bl	8000674 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000558:	f000 f93a 	bl	80007d0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800055c:	f000 f968 	bl	8000830 <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 8000560:	f000 f8d6 	bl	8000710 <MX_UART4_Init>
  MX_USART2_UART_Init();
 8000564:	f000 f904 	bl	8000770 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000568:	f004 f9c4 	bl	80048f4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800056c:	4a05      	ldr	r2, [pc, #20]	; (8000584 <main+0x40>)
 800056e:	2100      	movs	r1, #0
 8000570:	4805      	ldr	r0, [pc, #20]	; (8000588 <main+0x44>)
 8000572:	f004 fa29 	bl	80049c8 <osThreadNew>
 8000576:	4603      	mov	r3, r0
 8000578:	4a04      	ldr	r2, [pc, #16]	; (800058c <main+0x48>)
 800057a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800057c:	f004 f9ee 	bl	800495c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000580:	e7fe      	b.n	8000580 <main+0x3c>
 8000582:	bf00      	nop
 8000584:	08007714 	.word	0x08007714
 8000588:	080009d1 	.word	0x080009d1
 800058c:	20000958 	.word	0x20000958

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	; 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 031c 	add.w	r3, r7, #28
 800059a:	2234      	movs	r2, #52	; 0x34
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f006 ffd0 	bl	8007544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 0308 	add.w	r3, r7, #8
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005b4:	f001 fd28 	bl	8002008 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b8:	4b2c      	ldr	r3, [pc, #176]	; (800066c <SystemClock_Config+0xdc>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	4a2b      	ldr	r2, [pc, #172]	; (800066c <SystemClock_Config+0xdc>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	; 0x40
 80005c4:	4b29      	ldr	r3, [pc, #164]	; (800066c <SystemClock_Config+0xdc>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005d0:	4b27      	ldr	r3, [pc, #156]	; (8000670 <SystemClock_Config+0xe0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005d8:	4a25      	ldr	r2, [pc, #148]	; (8000670 <SystemClock_Config+0xe0>)
 80005da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b23      	ldr	r3, [pc, #140]	; (8000670 <SystemClock_Config+0xe0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e8:	603b      	str	r3, [r7, #0]
 80005ea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ec:	2301      	movs	r3, #1
 80005ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005f0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f6:	2302      	movs	r3, #2
 80005f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000600:	2304      	movs	r3, #4
 8000602:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000604:	2360      	movs	r3, #96	; 0x60
 8000606:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000608:	2302      	movs	r3, #2
 800060a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800060c:	2304      	movs	r3, #4
 800060e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000610:	2302      	movs	r3, #2
 8000612:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000614:	f107 031c 	add.w	r3, r7, #28
 8000618:	4618      	mov	r0, r3
 800061a:	f001 fd55 	bl	80020c8 <HAL_RCC_OscConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000624:	f000 f9dc 	bl	80009e0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000628:	f001 fcfe 	bl	8002028 <HAL_PWREx_EnableOverDrive>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000632:	f000 f9d5 	bl	80009e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000636:	230f      	movs	r3, #15
 8000638:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063a:	2302      	movs	r3, #2
 800063c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800064c:	f107 0308 	add.w	r3, r7, #8
 8000650:	2103      	movs	r1, #3
 8000652:	4618      	mov	r0, r3
 8000654:	f001 ffe6 	bl	8002624 <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800065e:	f000 f9bf 	bl	80009e0 <Error_Handler>
  }
}
 8000662:	bf00      	nop
 8000664:	3750      	adds	r7, #80	; 0x50
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40023800 	.word	0x40023800
 8000670:	40007000 	.word	0x40007000

08000674 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <MX_ETH_Init+0x84>)
 800067a:	4a20      	ldr	r2, [pc, #128]	; (80006fc <MX_ETH_Init+0x88>)
 800067c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800067e:	4b20      	ldr	r3, [pc, #128]	; (8000700 <MX_ETH_Init+0x8c>)
 8000680:	2200      	movs	r2, #0
 8000682:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000684:	4b1e      	ldr	r3, [pc, #120]	; (8000700 <MX_ETH_Init+0x8c>)
 8000686:	2280      	movs	r2, #128	; 0x80
 8000688:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800068a:	4b1d      	ldr	r3, [pc, #116]	; (8000700 <MX_ETH_Init+0x8c>)
 800068c:	22e1      	movs	r2, #225	; 0xe1
 800068e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000690:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <MX_ETH_Init+0x8c>)
 8000692:	2200      	movs	r2, #0
 8000694:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000696:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <MX_ETH_Init+0x8c>)
 8000698:	2200      	movs	r2, #0
 800069a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800069c:	4b18      	ldr	r3, [pc, #96]	; (8000700 <MX_ETH_Init+0x8c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <MX_ETH_Init+0x84>)
 80006a4:	4a16      	ldr	r2, [pc, #88]	; (8000700 <MX_ETH_Init+0x8c>)
 80006a6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006a8:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <MX_ETH_Init+0x84>)
 80006aa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006ae:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_ETH_Init+0x84>)
 80006b2:	4a14      	ldr	r2, [pc, #80]	; (8000704 <MX_ETH_Init+0x90>)
 80006b4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <MX_ETH_Init+0x84>)
 80006b8:	4a13      	ldr	r2, [pc, #76]	; (8000708 <MX_ETH_Init+0x94>)
 80006ba:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006bc:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_ETH_Init+0x84>)
 80006be:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80006c2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006c4:	480c      	ldr	r0, [pc, #48]	; (80006f8 <MX_ETH_Init+0x84>)
 80006c6:	f000 fe6b 	bl	80013a0 <HAL_ETH_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80006d0:	f000 f986 	bl	80009e0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006d4:	2238      	movs	r2, #56	; 0x38
 80006d6:	2100      	movs	r1, #0
 80006d8:	480c      	ldr	r0, [pc, #48]	; (800070c <MX_ETH_Init+0x98>)
 80006da:	f006 ff33 	bl	8007544 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006de:	4b0b      	ldr	r3, [pc, #44]	; (800070c <MX_ETH_Init+0x98>)
 80006e0:	2221      	movs	r2, #33	; 0x21
 80006e2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006e4:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_ETH_Init+0x98>)
 80006e6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80006ea:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <MX_ETH_Init+0x98>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000208 	.word	0x20000208
 80006fc:	40028000 	.word	0x40028000
 8000700:	2000095c 	.word	0x2000095c
 8000704:	20000114 	.word	0x20000114
 8000708:	20000074 	.word	0x20000074
 800070c:	200001d0 	.word	0x200001d0

08000710 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_UART4_Init+0x58>)
 8000716:	4a15      	ldr	r2, [pc, #84]	; (800076c <MX_UART4_Init+0x5c>)
 8000718:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_UART4_Init+0x58>)
 800071c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000720:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_UART4_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_UART4_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_UART4_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_UART4_Init+0x58>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <MX_UART4_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_UART4_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <MX_UART4_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_UART4_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_UART4_Init+0x58>)
 8000754:	f002 fdb4 	bl	80032c0 <HAL_UART_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800075e:	f000 f93f 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200002b8 	.word	0x200002b8
 800076c:	40004c00 	.word	0x40004c00

08000770 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000774:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 8000776:	4a15      	ldr	r2, [pc, #84]	; (80007cc <MX_USART2_UART_Init+0x5c>)
 8000778:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077a:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 800077c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000780:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 80007b4:	f002 fd84 	bl	80032c0 <HAL_UART_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007be:	f000 f90f 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000340 	.word	0x20000340
 80007cc:	40004400 	.word	0x40004400

080007d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_USART3_UART_Init+0x58>)
 80007d6:	4a15      	ldr	r2, [pc, #84]	; (800082c <MX_USART3_UART_Init+0x5c>)
 80007d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007da:	4b13      	ldr	r3, [pc, #76]	; (8000828 <MX_USART3_UART_Init+0x58>)
 80007dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_USART3_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_USART3_UART_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_USART3_UART_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_USART3_UART_Init+0x58>)
 80007f6:	220c      	movs	r2, #12
 80007f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_USART3_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_USART3_UART_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_USART3_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_USART3_UART_Init+0x58>)
 800080e:	2200      	movs	r2, #0
 8000810:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_USART3_UART_Init+0x58>)
 8000814:	f002 fd54 	bl	80032c0 <HAL_UART_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800081e:	f000 f8df 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200003c8 	.word	0x200003c8
 800082c:	40004800 	.word	0x40004800

08000830 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000834:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000836:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800083a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083e:	2206      	movs	r2, #6
 8000840:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000844:	2202      	movs	r2, #2
 8000846:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000850:	2202      	movs	r2, #2
 8000852:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000856:	2201      	movs	r2, #1
 8000858:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000868:	2201      	movs	r2, #1
 800086a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086e:	2200      	movs	r2, #0
 8000870:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000874:	f001 fa7f 	bl	8001d76 <HAL_PCD_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800087e:	f000 f8af 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000450 	.word	0x20000450

0800088c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08c      	sub	sp, #48	; 0x30
 8000890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	4b47      	ldr	r3, [pc, #284]	; (80009c0 <MX_GPIO_Init+0x134>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a46      	ldr	r2, [pc, #280]	; (80009c0 <MX_GPIO_Init+0x134>)
 80008a8:	f043 0304 	orr.w	r3, r3, #4
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b44      	ldr	r3, [pc, #272]	; (80009c0 <MX_GPIO_Init+0x134>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0304 	and.w	r3, r3, #4
 80008b6:	61bb      	str	r3, [r7, #24]
 80008b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ba:	4b41      	ldr	r3, [pc, #260]	; (80009c0 <MX_GPIO_Init+0x134>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a40      	ldr	r2, [pc, #256]	; (80009c0 <MX_GPIO_Init+0x134>)
 80008c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b3e      	ldr	r3, [pc, #248]	; (80009c0 <MX_GPIO_Init+0x134>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	4b3b      	ldr	r3, [pc, #236]	; (80009c0 <MX_GPIO_Init+0x134>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a3a      	ldr	r2, [pc, #232]	; (80009c0 <MX_GPIO_Init+0x134>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b38      	ldr	r3, [pc, #224]	; (80009c0 <MX_GPIO_Init+0x134>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ea:	4b35      	ldr	r3, [pc, #212]	; (80009c0 <MX_GPIO_Init+0x134>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a34      	ldr	r2, [pc, #208]	; (80009c0 <MX_GPIO_Init+0x134>)
 80008f0:	f043 0302 	orr.w	r3, r3, #2
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b32      	ldr	r3, [pc, #200]	; (80009c0 <MX_GPIO_Init+0x134>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000902:	4b2f      	ldr	r3, [pc, #188]	; (80009c0 <MX_GPIO_Init+0x134>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a2e      	ldr	r2, [pc, #184]	; (80009c0 <MX_GPIO_Init+0x134>)
 8000908:	f043 0308 	orr.w	r3, r3, #8
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b2c      	ldr	r3, [pc, #176]	; (80009c0 <MX_GPIO_Init+0x134>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0308 	and.w	r3, r3, #8
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800091a:	4b29      	ldr	r3, [pc, #164]	; (80009c0 <MX_GPIO_Init+0x134>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a28      	ldr	r2, [pc, #160]	; (80009c0 <MX_GPIO_Init+0x134>)
 8000920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b26      	ldr	r3, [pc, #152]	; (80009c0 <MX_GPIO_Init+0x134>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	f244 0181 	movw	r1, #16513	; 0x4081
 8000938:	4822      	ldr	r0, [pc, #136]	; (80009c4 <MX_GPIO_Init+0x138>)
 800093a:	f001 fa03 	bl	8001d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	2140      	movs	r1, #64	; 0x40
 8000942:	4821      	ldr	r0, [pc, #132]	; (80009c8 <MX_GPIO_Init+0x13c>)
 8000944:	f001 f9fe 	bl	8001d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000948:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800094e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	481b      	ldr	r0, [pc, #108]	; (80009cc <MX_GPIO_Init+0x140>)
 8000960:	f001 f844 	bl	80019ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000964:	f244 0381 	movw	r3, #16513	; 0x4081
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096a:	2301      	movs	r3, #1
 800096c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4811      	ldr	r0, [pc, #68]	; (80009c4 <MX_GPIO_Init+0x138>)
 800097e:	f001 f835 	bl	80019ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000982:	2340      	movs	r3, #64	; 0x40
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	480b      	ldr	r0, [pc, #44]	; (80009c8 <MX_GPIO_Init+0x13c>)
 800099a:	f001 f827 	bl	80019ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800099e:	2380      	movs	r3, #128	; 0x80
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a2:	2300      	movs	r3, #0
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_GPIO_Init+0x13c>)
 80009b2:	f001 f81b 	bl	80019ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009b6:	bf00      	nop
 80009b8:	3730      	adds	r7, #48	; 0x30
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40020400 	.word	0x40020400
 80009c8:	40021800 	.word	0x40021800
 80009cc:	40020800 	.word	0x40020800

080009d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009d8:	2001      	movs	r0, #1
 80009da:	f004 f89b 	bl	8004b14 <osDelay>
 80009de:	e7fb      	b.n	80009d8 <StartDefaultTask+0x8>

080009e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e4:	b672      	cpsid	i
}
 80009e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <Error_Handler+0x8>
	...

080009ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <HAL_MspInit+0x4c>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	4a10      	ldr	r2, [pc, #64]	; (8000a38 <HAL_MspInit+0x4c>)
 80009f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009fc:	6413      	str	r3, [r2, #64]	; 0x40
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a14:	6453      	str	r3, [r2, #68]	; 0x44
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	210f      	movs	r1, #15
 8000a26:	f06f 0001 	mvn.w	r0, #1
 8000a2a:	f000 fbf0 	bl	800120e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800

08000a3c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08e      	sub	sp, #56	; 0x38
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a4e      	ldr	r2, [pc, #312]	; (8000b94 <HAL_ETH_MspInit+0x158>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	f040 8096 	bne.w	8000b8c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a60:	4b4d      	ldr	r3, [pc, #308]	; (8000b98 <HAL_ETH_MspInit+0x15c>)
 8000a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a64:	4a4c      	ldr	r2, [pc, #304]	; (8000b98 <HAL_ETH_MspInit+0x15c>)
 8000a66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6c:	4b4a      	ldr	r3, [pc, #296]	; (8000b98 <HAL_ETH_MspInit+0x15c>)
 8000a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a74:	623b      	str	r3, [r7, #32]
 8000a76:	6a3b      	ldr	r3, [r7, #32]
 8000a78:	4b47      	ldr	r3, [pc, #284]	; (8000b98 <HAL_ETH_MspInit+0x15c>)
 8000a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7c:	4a46      	ldr	r2, [pc, #280]	; (8000b98 <HAL_ETH_MspInit+0x15c>)
 8000a7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a82:	6313      	str	r3, [r2, #48]	; 0x30
 8000a84:	4b44      	ldr	r3, [pc, #272]	; (8000b98 <HAL_ETH_MspInit+0x15c>)
 8000a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a8c:	61fb      	str	r3, [r7, #28]
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	4b41      	ldr	r3, [pc, #260]	; (8000b98 <HAL_ETH_MspInit+0x15c>)
 8000a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a94:	4a40      	ldr	r2, [pc, #256]	; (8000b98 <HAL_ETH_MspInit+0x15c>)
 8000a96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000a9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9c:	4b3e      	ldr	r3, [pc, #248]	; (8000b98 <HAL_ETH_MspInit+0x15c>)
 8000a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000aa4:	61bb      	str	r3, [r7, #24]
 8000aa6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa8:	4b3b      	ldr	r3, [pc, #236]	; (8000b98 <HAL_ETH_MspInit+0x15c>)
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aac:	4a3a      	ldr	r2, [pc, #232]	; (8000b98 <HAL_ETH_MspInit+0x15c>)
 8000aae:	f043 0304 	orr.w	r3, r3, #4
 8000ab2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab4:	4b38      	ldr	r3, [pc, #224]	; (8000b98 <HAL_ETH_MspInit+0x15c>)
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab8:	f003 0304 	and.w	r3, r3, #4
 8000abc:	617b      	str	r3, [r7, #20]
 8000abe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac0:	4b35      	ldr	r3, [pc, #212]	; (8000b98 <HAL_ETH_MspInit+0x15c>)
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac4:	4a34      	ldr	r2, [pc, #208]	; (8000b98 <HAL_ETH_MspInit+0x15c>)
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	6313      	str	r3, [r2, #48]	; 0x30
 8000acc:	4b32      	ldr	r3, [pc, #200]	; (8000b98 <HAL_ETH_MspInit+0x15c>)
 8000ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad0:	f003 0301 	and.w	r3, r3, #1
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad8:	4b2f      	ldr	r3, [pc, #188]	; (8000b98 <HAL_ETH_MspInit+0x15c>)
 8000ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000adc:	4a2e      	ldr	r2, [pc, #184]	; (8000b98 <HAL_ETH_MspInit+0x15c>)
 8000ade:	f043 0302 	orr.w	r3, r3, #2
 8000ae2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae4:	4b2c      	ldr	r3, [pc, #176]	; (8000b98 <HAL_ETH_MspInit+0x15c>)
 8000ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae8:	f003 0302 	and.w	r3, r3, #2
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000af0:	4b29      	ldr	r3, [pc, #164]	; (8000b98 <HAL_ETH_MspInit+0x15c>)
 8000af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af4:	4a28      	ldr	r2, [pc, #160]	; (8000b98 <HAL_ETH_MspInit+0x15c>)
 8000af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000afa:	6313      	str	r3, [r2, #48]	; 0x30
 8000afc:	4b26      	ldr	r3, [pc, #152]	; (8000b98 <HAL_ETH_MspInit+0x15c>)
 8000afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b08:	2332      	movs	r3, #50	; 0x32
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b18:	230b      	movs	r3, #11
 8000b1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b20:	4619      	mov	r1, r3
 8000b22:	481e      	ldr	r0, [pc, #120]	; (8000b9c <HAL_ETH_MspInit+0x160>)
 8000b24:	f000 ff62 	bl	80019ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b28:	2386      	movs	r3, #134	; 0x86
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b34:	2303      	movs	r3, #3
 8000b36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b38:	230b      	movs	r3, #11
 8000b3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b40:	4619      	mov	r1, r3
 8000b42:	4817      	ldr	r0, [pc, #92]	; (8000ba0 <HAL_ETH_MspInit+0x164>)
 8000b44:	f000 ff52 	bl	80019ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b56:	2303      	movs	r3, #3
 8000b58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b5a:	230b      	movs	r3, #11
 8000b5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b62:	4619      	mov	r1, r3
 8000b64:	480f      	ldr	r0, [pc, #60]	; (8000ba4 <HAL_ETH_MspInit+0x168>)
 8000b66:	f000 ff41 	bl	80019ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b6a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b7c:	230b      	movs	r3, #11
 8000b7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b84:	4619      	mov	r1, r3
 8000b86:	4808      	ldr	r0, [pc, #32]	; (8000ba8 <HAL_ETH_MspInit+0x16c>)
 8000b88:	f000 ff30 	bl	80019ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000b8c:	bf00      	nop
 8000b8e:	3738      	adds	r7, #56	; 0x38
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40028000 	.word	0x40028000
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40020800 	.word	0x40020800
 8000ba0:	40020000 	.word	0x40020000
 8000ba4:	40020400 	.word	0x40020400
 8000ba8:	40021800 	.word	0x40021800

08000bac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b0b2      	sub	sp, #200	; 0xc8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc8:	2290      	movs	r2, #144	; 0x90
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f006 fcb9 	bl	8007544 <memset>
  if(huart->Instance==UART4)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a68      	ldr	r2, [pc, #416]	; (8000d78 <HAL_UART_MspInit+0x1cc>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d145      	bne.n	8000c68 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000bdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000be2:	2300      	movs	r3, #0
 8000be4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bea:	4618      	mov	r0, r3
 8000bec:	f001 ff40 	bl	8002a70 <HAL_RCCEx_PeriphCLKConfig>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000bf6:	f7ff fef3 	bl	80009e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000bfa:	4b60      	ldr	r3, [pc, #384]	; (8000d7c <HAL_UART_MspInit+0x1d0>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	4a5f      	ldr	r2, [pc, #380]	; (8000d7c <HAL_UART_MspInit+0x1d0>)
 8000c00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c04:	6413      	str	r3, [r2, #64]	; 0x40
 8000c06:	4b5d      	ldr	r3, [pc, #372]	; (8000d7c <HAL_UART_MspInit+0x1d0>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c0e:	623b      	str	r3, [r7, #32]
 8000c10:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c12:	4b5a      	ldr	r3, [pc, #360]	; (8000d7c <HAL_UART_MspInit+0x1d0>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a59      	ldr	r2, [pc, #356]	; (8000d7c <HAL_UART_MspInit+0x1d0>)
 8000c18:	f043 0304 	orr.w	r3, r3, #4
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b57      	ldr	r3, [pc, #348]	; (8000d7c <HAL_UART_MspInit+0x1d0>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0304 	and.w	r3, r3, #4
 8000c26:	61fb      	str	r3, [r7, #28]
 8000c28:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c2a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	2302      	movs	r3, #2
 8000c34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c44:	2308      	movs	r3, #8
 8000c46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c4a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000c4e:	4619      	mov	r1, r3
 8000c50:	484b      	ldr	r0, [pc, #300]	; (8000d80 <HAL_UART_MspInit+0x1d4>)
 8000c52:	f000 fecb 	bl	80019ec <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2105      	movs	r1, #5
 8000c5a:	2034      	movs	r0, #52	; 0x34
 8000c5c:	f000 fad7 	bl	800120e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000c60:	2034      	movs	r0, #52	; 0x34
 8000c62:	f000 faf0 	bl	8001246 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c66:	e082      	b.n	8000d6e <HAL_UART_MspInit+0x1c2>
  else if(huart->Instance==USART2)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a45      	ldr	r2, [pc, #276]	; (8000d84 <HAL_UART_MspInit+0x1d8>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d13b      	bne.n	8000cea <HAL_UART_MspInit+0x13e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c72:	2380      	movs	r3, #128	; 0x80
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c76:	2300      	movs	r3, #0
 8000c78:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f001 fef6 	bl	8002a70 <HAL_RCCEx_PeriphCLKConfig>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8000c8a:	f7ff fea9 	bl	80009e0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c8e:	4b3b      	ldr	r3, [pc, #236]	; (8000d7c <HAL_UART_MspInit+0x1d0>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	4a3a      	ldr	r2, [pc, #232]	; (8000d7c <HAL_UART_MspInit+0x1d0>)
 8000c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c98:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9a:	4b38      	ldr	r3, [pc, #224]	; (8000d7c <HAL_UART_MspInit+0x1d0>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca2:	61bb      	str	r3, [r7, #24]
 8000ca4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca6:	4b35      	ldr	r3, [pc, #212]	; (8000d7c <HAL_UART_MspInit+0x1d0>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a34      	ldr	r2, [pc, #208]	; (8000d7c <HAL_UART_MspInit+0x1d0>)
 8000cac:	f043 0308 	orr.w	r3, r3, #8
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b32      	ldr	r3, [pc, #200]	; (8000d7c <HAL_UART_MspInit+0x1d0>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0308 	and.w	r3, r3, #8
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000cbe:	2360      	movs	r3, #96	; 0x60
 8000cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cd6:	2307      	movs	r3, #7
 8000cd8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cdc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4829      	ldr	r0, [pc, #164]	; (8000d88 <HAL_UART_MspInit+0x1dc>)
 8000ce4:	f000 fe82 	bl	80019ec <HAL_GPIO_Init>
}
 8000ce8:	e041      	b.n	8000d6e <HAL_UART_MspInit+0x1c2>
  else if(huart->Instance==USART3)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a27      	ldr	r2, [pc, #156]	; (8000d8c <HAL_UART_MspInit+0x1e0>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d13c      	bne.n	8000d6e <HAL_UART_MspInit+0x1c2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d02:	4618      	mov	r0, r3
 8000d04:	f001 feb4 	bl	8002a70 <HAL_RCCEx_PeriphCLKConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <HAL_UART_MspInit+0x166>
      Error_Handler();
 8000d0e:	f7ff fe67 	bl	80009e0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d12:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <HAL_UART_MspInit+0x1d0>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	4a19      	ldr	r2, [pc, #100]	; (8000d7c <HAL_UART_MspInit+0x1d0>)
 8000d18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1e:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <HAL_UART_MspInit+0x1d0>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2a:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <HAL_UART_MspInit+0x1d0>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a13      	ldr	r2, [pc, #76]	; (8000d7c <HAL_UART_MspInit+0x1d0>)
 8000d30:	f043 0308 	orr.w	r3, r3, #8
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <HAL_UART_MspInit+0x1d0>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0308 	and.w	r3, r3, #8
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d56:	2303      	movs	r3, #3
 8000d58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d5c:	2307      	movs	r3, #7
 8000d5e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d62:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000d66:	4619      	mov	r1, r3
 8000d68:	4807      	ldr	r0, [pc, #28]	; (8000d88 <HAL_UART_MspInit+0x1dc>)
 8000d6a:	f000 fe3f 	bl	80019ec <HAL_GPIO_Init>
}
 8000d6e:	bf00      	nop
 8000d70:	37c8      	adds	r7, #200	; 0xc8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40004c00 	.word	0x40004c00
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020800 	.word	0x40020800
 8000d84:	40004400 	.word	0x40004400
 8000d88:	40020c00 	.word	0x40020c00
 8000d8c:	40004800 	.word	0x40004800

08000d90 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b0ae      	sub	sp, #184	; 0xb8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	2290      	movs	r2, #144	; 0x90
 8000dae:	2100      	movs	r1, #0
 8000db0:	4618      	mov	r0, r3
 8000db2:	f006 fbc7 	bl	8007544 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000dbe:	d159      	bne.n	8000e74 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000dc0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000dc4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f001 fe4d 	bl	8002a70 <HAL_RCCEx_PeriphCLKConfig>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000ddc:	f7ff fe00 	bl	80009e0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de0:	4b26      	ldr	r3, [pc, #152]	; (8000e7c <HAL_PCD_MspInit+0xec>)
 8000de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de4:	4a25      	ldr	r2, [pc, #148]	; (8000e7c <HAL_PCD_MspInit+0xec>)
 8000de6:	f043 0301 	orr.w	r3, r3, #1
 8000dea:	6313      	str	r3, [r2, #48]	; 0x30
 8000dec:	4b23      	ldr	r3, [pc, #140]	; (8000e7c <HAL_PCD_MspInit+0xec>)
 8000dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df0:	f003 0301 	and.w	r3, r3, #1
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000df8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000dfc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	2302      	movs	r3, #2
 8000e02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e12:	230a      	movs	r3, #10
 8000e14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e18:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4818      	ldr	r0, [pc, #96]	; (8000e80 <HAL_PCD_MspInit+0xf0>)
 8000e20:	f000 fde4 	bl	80019ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e38:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4810      	ldr	r0, [pc, #64]	; (8000e80 <HAL_PCD_MspInit+0xf0>)
 8000e40:	f000 fdd4 	bl	80019ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e44:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <HAL_PCD_MspInit+0xec>)
 8000e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e48:	4a0c      	ldr	r2, [pc, #48]	; (8000e7c <HAL_PCD_MspInit+0xec>)
 8000e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e4e:	6353      	str	r3, [r2, #52]	; 0x34
 8000e50:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <HAL_PCD_MspInit+0xec>)
 8000e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <HAL_PCD_MspInit+0xec>)
 8000e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e60:	4a06      	ldr	r2, [pc, #24]	; (8000e7c <HAL_PCD_MspInit+0xec>)
 8000e62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e66:	6453      	str	r3, [r2, #68]	; 0x44
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <HAL_PCD_MspInit+0xec>)
 8000e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e74:	bf00      	nop
 8000e76:	37b8      	adds	r7, #184	; 0xb8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40020000 	.word	0x40020000

08000e84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <NMI_Handler+0x4>

08000e8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <HardFault_Handler+0x4>

08000e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <MemManage_Handler+0x4>

08000e96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <BusFault_Handler+0x4>

08000e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <UsageFault_Handler+0x4>

08000ea2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb4:	f000 f88c 	bl	8000fd0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000eb8:	f005 fab4 	bl	8006424 <xTaskGetSchedulerState>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d001      	beq.n	8000ec6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000ec2:	f006 f891 	bl	8006fe8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000ed0:	4802      	ldr	r0, [pc, #8]	; (8000edc <UART4_IRQHandler+0x10>)
 8000ed2:	f002 fa43 	bl	800335c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	200002b8 	.word	0x200002b8

08000ee0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <SystemInit+0x20>)
 8000ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eea:	4a05      	ldr	r2, [pc, #20]	; (8000f00 <SystemInit+0x20>)
 8000eec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ef0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f08:	480d      	ldr	r0, [pc, #52]	; (8000f40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f0a:	490e      	ldr	r1, [pc, #56]	; (8000f44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f0c:	4a0e      	ldr	r2, [pc, #56]	; (8000f48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f10:	e002      	b.n	8000f18 <LoopCopyDataInit>

08000f12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f16:	3304      	adds	r3, #4

08000f18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f1c:	d3f9      	bcc.n	8000f12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1e:	4a0b      	ldr	r2, [pc, #44]	; (8000f4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f20:	4c0b      	ldr	r4, [pc, #44]	; (8000f50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f24:	e001      	b.n	8000f2a <LoopFillZerobss>

08000f26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f28:	3204      	adds	r2, #4

08000f2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f2c:	d3fb      	bcc.n	8000f26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f2e:	f7ff ffd7 	bl	8000ee0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f32:	f006 fad3 	bl	80074dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f36:	f7ff fb05 	bl	8000544 <main>
  bx  lr    
 8000f3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f3c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f44:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000f48:	080077c0 	.word	0x080077c0
  ldr r2, =_sbss
 8000f4c:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 8000f50:	20005378 	.word	0x20005378

08000f54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f54:	e7fe      	b.n	8000f54 <ADC_IRQHandler>

08000f56 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f5a:	2003      	movs	r0, #3
 8000f5c:	f000 f94c 	bl	80011f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f60:	200f      	movs	r0, #15
 8000f62:	f000 f805 	bl	8000f70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f66:	f7ff fd41 	bl	80009ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_InitTick+0x54>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <HAL_InitTick+0x58>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f967 	bl	8001262 <HAL_SYSTICK_Config>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e00e      	b.n	8000fbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b0f      	cmp	r3, #15
 8000fa2:	d80a      	bhi.n	8000fba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	f000 f92f 	bl	800120e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb0:	4a06      	ldr	r2, [pc, #24]	; (8000fcc <HAL_InitTick+0x5c>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e000      	b.n	8000fbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	20000008 	.word	0x20000008
 8000fcc:	20000004 	.word	0x20000004

08000fd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_IncTick+0x20>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	20000964 	.word	0x20000964

08000ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8000ffc:	4b03      	ldr	r3, [pc, #12]	; (800100c <HAL_GetTick+0x14>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000964 	.word	0x20000964

08001010 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001018:	f7ff ffee 	bl	8000ff8 <HAL_GetTick>
 800101c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001028:	d005      	beq.n	8001036 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800102a:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <HAL_Delay+0x44>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	461a      	mov	r2, r3
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4413      	add	r3, r2
 8001034:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001036:	bf00      	nop
 8001038:	f7ff ffde 	bl	8000ff8 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	429a      	cmp	r2, r3
 8001046:	d8f7      	bhi.n	8001038 <HAL_Delay+0x28>
  {
  }
}
 8001048:	bf00      	nop
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000008 	.word	0x20000008

08001058 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001068:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <__NVIC_SetPriorityGrouping+0x40>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800106e:	68ba      	ldr	r2, [r7, #8]
 8001070:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001074:	4013      	ands	r3, r2
 8001076:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <__NVIC_SetPriorityGrouping+0x44>)
 8001082:	4313      	orrs	r3, r2
 8001084:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001086:	4a04      	ldr	r2, [pc, #16]	; (8001098 <__NVIC_SetPriorityGrouping+0x40>)
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	60d3      	str	r3, [r2, #12]
}
 800108c:	bf00      	nop
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000ed00 	.word	0xe000ed00
 800109c:	05fa0000 	.word	0x05fa0000

080010a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a4:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <__NVIC_GetPriorityGrouping+0x18>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	0a1b      	lsrs	r3, r3, #8
 80010aa:	f003 0307 	and.w	r3, r3, #7
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	db0b      	blt.n	80010e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	f003 021f 	and.w	r2, r3, #31
 80010d4:	4907      	ldr	r1, [pc, #28]	; (80010f4 <__NVIC_EnableIRQ+0x38>)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	095b      	lsrs	r3, r3, #5
 80010dc:	2001      	movs	r0, #1
 80010de:	fa00 f202 	lsl.w	r2, r0, r2
 80010e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	e000e100 	.word	0xe000e100

080010f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	6039      	str	r1, [r7, #0]
 8001102:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001108:	2b00      	cmp	r3, #0
 800110a:	db0a      	blt.n	8001122 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	b2da      	uxtb	r2, r3
 8001110:	490c      	ldr	r1, [pc, #48]	; (8001144 <__NVIC_SetPriority+0x4c>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	0112      	lsls	r2, r2, #4
 8001118:	b2d2      	uxtb	r2, r2
 800111a:	440b      	add	r3, r1
 800111c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001120:	e00a      	b.n	8001138 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	b2da      	uxtb	r2, r3
 8001126:	4908      	ldr	r1, [pc, #32]	; (8001148 <__NVIC_SetPriority+0x50>)
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	f003 030f 	and.w	r3, r3, #15
 800112e:	3b04      	subs	r3, #4
 8001130:	0112      	lsls	r2, r2, #4
 8001132:	b2d2      	uxtb	r2, r2
 8001134:	440b      	add	r3, r1
 8001136:	761a      	strb	r2, [r3, #24]
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000e100 	.word	0xe000e100
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800114c:	b480      	push	{r7}
 800114e:	b089      	sub	sp, #36	; 0x24
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f1c3 0307 	rsb	r3, r3, #7
 8001166:	2b04      	cmp	r3, #4
 8001168:	bf28      	it	cs
 800116a:	2304      	movcs	r3, #4
 800116c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3304      	adds	r3, #4
 8001172:	2b06      	cmp	r3, #6
 8001174:	d902      	bls.n	800117c <NVIC_EncodePriority+0x30>
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3b03      	subs	r3, #3
 800117a:	e000      	b.n	800117e <NVIC_EncodePriority+0x32>
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001180:	f04f 32ff 	mov.w	r2, #4294967295
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43da      	mvns	r2, r3
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	401a      	ands	r2, r3
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001194:	f04f 31ff 	mov.w	r1, #4294967295
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	fa01 f303 	lsl.w	r3, r1, r3
 800119e:	43d9      	mvns	r1, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	4313      	orrs	r3, r2
         );
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3724      	adds	r7, #36	; 0x24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
	...

080011b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3b01      	subs	r3, #1
 80011c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011c4:	d301      	bcc.n	80011ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011c6:	2301      	movs	r3, #1
 80011c8:	e00f      	b.n	80011ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ca:	4a0a      	ldr	r2, [pc, #40]	; (80011f4 <SysTick_Config+0x40>)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011d2:	210f      	movs	r1, #15
 80011d4:	f04f 30ff 	mov.w	r0, #4294967295
 80011d8:	f7ff ff8e 	bl	80010f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011dc:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <SysTick_Config+0x40>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011e2:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <SysTick_Config+0x40>)
 80011e4:	2207      	movs	r2, #7
 80011e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	e000e010 	.word	0xe000e010

080011f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f7ff ff29 	bl	8001058 <__NVIC_SetPriorityGrouping>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800120e:	b580      	push	{r7, lr}
 8001210:	b086      	sub	sp, #24
 8001212:	af00      	add	r7, sp, #0
 8001214:	4603      	mov	r3, r0
 8001216:	60b9      	str	r1, [r7, #8]
 8001218:	607a      	str	r2, [r7, #4]
 800121a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001220:	f7ff ff3e 	bl	80010a0 <__NVIC_GetPriorityGrouping>
 8001224:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	68b9      	ldr	r1, [r7, #8]
 800122a:	6978      	ldr	r0, [r7, #20]
 800122c:	f7ff ff8e 	bl	800114c <NVIC_EncodePriority>
 8001230:	4602      	mov	r2, r0
 8001232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001236:	4611      	mov	r1, r2
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff5d 	bl	80010f8 <__NVIC_SetPriority>
}
 800123e:	bf00      	nop
 8001240:	3718      	adds	r7, #24
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	4603      	mov	r3, r0
 800124e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff31 	bl	80010bc <__NVIC_EnableIRQ>
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff ffa2 	bl	80011b4 <SysTick_Config>
 8001270:	4603      	mov	r3, r0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b084      	sub	sp, #16
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001286:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001288:	f7ff feb6 	bl	8000ff8 <HAL_GetTick>
 800128c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b02      	cmp	r3, #2
 8001298:	d008      	beq.n	80012ac <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2280      	movs	r2, #128	; 0x80
 800129e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e052      	b.n	8001352 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f022 0216 	bic.w	r2, r2, #22
 80012ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	695a      	ldr	r2, [r3, #20]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012ca:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d103      	bne.n	80012dc <HAL_DMA_Abort+0x62>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d007      	beq.n	80012ec <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f022 0208 	bic.w	r2, r2, #8
 80012ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f022 0201 	bic.w	r2, r2, #1
 80012fa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012fc:	e013      	b.n	8001326 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012fe:	f7ff fe7b 	bl	8000ff8 <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b05      	cmp	r3, #5
 800130a:	d90c      	bls.n	8001326 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2220      	movs	r2, #32
 8001310:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2203      	movs	r2, #3
 8001316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e015      	b.n	8001352 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	2b00      	cmp	r3, #0
 8001332:	d1e4      	bne.n	80012fe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001338:	223f      	movs	r2, #63	; 0x3f
 800133a:	409a      	lsls	r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2201      	movs	r2, #1
 8001344:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d004      	beq.n	8001378 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2280      	movs	r2, #128	; 0x80
 8001372:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e00c      	b.n	8001392 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2205      	movs	r2, #5
 800137c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f022 0201 	bic.w	r2, r2, #1
 800138e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
	...

080013a0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e06a      	b.n	8001488 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d106      	bne.n	80013ca <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2223      	movs	r2, #35	; 0x23
 80013c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff fb39 	bl	8000a3c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ca:	4b31      	ldr	r3, [pc, #196]	; (8001490 <HAL_ETH_Init+0xf0>)
 80013cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ce:	4a30      	ldr	r2, [pc, #192]	; (8001490 <HAL_ETH_Init+0xf0>)
 80013d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d4:	6453      	str	r3, [r2, #68]	; 0x44
 80013d6:	4b2e      	ldr	r3, [pc, #184]	; (8001490 <HAL_ETH_Init+0xf0>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80013e2:	4b2c      	ldr	r3, [pc, #176]	; (8001494 <HAL_ETH_Init+0xf4>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	4a2b      	ldr	r2, [pc, #172]	; (8001494 <HAL_ETH_Init+0xf4>)
 80013e8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013ec:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80013ee:	4b29      	ldr	r3, [pc, #164]	; (8001494 <HAL_ETH_Init+0xf4>)
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	4927      	ldr	r1, [pc, #156]	; (8001494 <HAL_ETH_Init+0xf4>)
 80013f8:	4313      	orrs	r3, r2
 80013fa:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80013fc:	4b25      	ldr	r3, [pc, #148]	; (8001494 <HAL_ETH_Init+0xf4>)
 80013fe:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	6812      	ldr	r2, [r2, #0]
 800140e:	f043 0301 	orr.w	r3, r3, #1
 8001412:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001416:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001418:	f7ff fdee 	bl	8000ff8 <HAL_GetTick>
 800141c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800141e:	e011      	b.n	8001444 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001420:	f7ff fdea 	bl	8000ff8 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800142e:	d909      	bls.n	8001444 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2204      	movs	r2, #4
 8001434:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	22e0      	movs	r2, #224	; 0xe0
 800143c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e021      	b.n	8001488 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1e4      	bne.n	8001420 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 f958 	bl	800170c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 f9ff 	bl	8001860 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 fa55 	bl	8001912 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	461a      	mov	r2, r3
 800146e:	2100      	movs	r1, #0
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f000 f9bd 	bl	80017f0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2210      	movs	r2, #16
 8001482:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40023800 	.word	0x40023800
 8001494:	40013800 	.word	0x40013800

08001498 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	4b51      	ldr	r3, [pc, #324]	; (80015f4 <ETH_SetMACConfig+0x15c>)
 80014ae:	4013      	ands	r3, r2
 80014b0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	7c1b      	ldrb	r3, [r3, #16]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d102      	bne.n	80014c0 <ETH_SetMACConfig+0x28>
 80014ba:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80014be:	e000      	b.n	80014c2 <ETH_SetMACConfig+0x2a>
 80014c0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	7c5b      	ldrb	r3, [r3, #17]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d102      	bne.n	80014d0 <ETH_SetMACConfig+0x38>
 80014ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014ce:	e000      	b.n	80014d2 <ETH_SetMACConfig+0x3a>
 80014d0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014d2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80014d8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	7fdb      	ldrb	r3, [r3, #31]
 80014de:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80014e0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80014e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	7f92      	ldrb	r2, [r2, #30]
 80014ec:	2a00      	cmp	r2, #0
 80014ee:	d102      	bne.n	80014f6 <ETH_SetMACConfig+0x5e>
 80014f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014f4:	e000      	b.n	80014f8 <ETH_SetMACConfig+0x60>
 80014f6:	2200      	movs	r2, #0
                        macconf->Speed |
 80014f8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	7f1b      	ldrb	r3, [r3, #28]
 80014fe:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001500:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001506:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	791b      	ldrb	r3, [r3, #4]
 800150c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800150e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001516:	2a00      	cmp	r2, #0
 8001518:	d102      	bne.n	8001520 <ETH_SetMACConfig+0x88>
 800151a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800151e:	e000      	b.n	8001522 <ETH_SetMACConfig+0x8a>
 8001520:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001522:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	7bdb      	ldrb	r3, [r3, #15]
 8001528:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800152a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001530:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001538:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800153a:	4313      	orrs	r3, r2
 800153c:	68fa      	ldr	r2, [r7, #12]
 800153e:	4313      	orrs	r3, r2
 8001540:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001552:	2001      	movs	r0, #1
 8001554:	f7ff fd5c 	bl	8001010 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800156e:	4013      	ands	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001576:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800157e:	2a00      	cmp	r2, #0
 8001580:	d101      	bne.n	8001586 <ETH_SetMACConfig+0xee>
 8001582:	2280      	movs	r2, #128	; 0x80
 8001584:	e000      	b.n	8001588 <ETH_SetMACConfig+0xf0>
 8001586:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001588:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800158e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001596:	2a01      	cmp	r2, #1
 8001598:	d101      	bne.n	800159e <ETH_SetMACConfig+0x106>
 800159a:	2208      	movs	r2, #8
 800159c:	e000      	b.n	80015a0 <ETH_SetMACConfig+0x108>
 800159e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80015a0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80015a8:	2a01      	cmp	r2, #1
 80015aa:	d101      	bne.n	80015b0 <ETH_SetMACConfig+0x118>
 80015ac:	2204      	movs	r2, #4
 80015ae:	e000      	b.n	80015b2 <ETH_SetMACConfig+0x11a>
 80015b0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80015b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80015ba:	2a01      	cmp	r2, #1
 80015bc:	d101      	bne.n	80015c2 <ETH_SetMACConfig+0x12a>
 80015be:	2202      	movs	r2, #2
 80015c0:	e000      	b.n	80015c4 <ETH_SetMACConfig+0x12c>
 80015c2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015c4:	4313      	orrs	r3, r2
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	68fa      	ldr	r2, [r7, #12]
 80015d2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015dc:	2001      	movs	r0, #1
 80015de:	f7ff fd17 	bl	8001010 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	619a      	str	r2, [r3, #24]
}
 80015ea:	bf00      	nop
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	ff20810f 	.word	0xff20810f

080015f8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	4b3d      	ldr	r3, [pc, #244]	; (8001708 <ETH_SetDMAConfig+0x110>)
 8001612:	4013      	ands	r3, r2
 8001614:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	7b1b      	ldrb	r3, [r3, #12]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d102      	bne.n	8001624 <ETH_SetDMAConfig+0x2c>
 800161e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001622:	e000      	b.n	8001626 <ETH_SetDMAConfig+0x2e>
 8001624:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	7b5b      	ldrb	r3, [r3, #13]
 800162a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800162c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	7f52      	ldrb	r2, [r2, #29]
 8001632:	2a00      	cmp	r2, #0
 8001634:	d102      	bne.n	800163c <ETH_SetDMAConfig+0x44>
 8001636:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800163a:	e000      	b.n	800163e <ETH_SetDMAConfig+0x46>
 800163c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800163e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	7b9b      	ldrb	r3, [r3, #14]
 8001644:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001646:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800164c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	7f1b      	ldrb	r3, [r3, #28]
 8001652:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001654:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	7f9b      	ldrb	r3, [r3, #30]
 800165a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800165c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001662:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800166a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800166c:	4313      	orrs	r3, r2
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	4313      	orrs	r3, r2
 8001672:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800167c:	461a      	mov	r2, r3
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800168e:	2001      	movs	r0, #1
 8001690:	f7ff fcbe 	bl	8001010 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800169c:	461a      	mov	r2, r3
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	791b      	ldrb	r3, [r3, #4]
 80016a6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016ac:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80016b2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80016b8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016c0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80016c2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80016ca:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80016d0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	6812      	ldr	r2, [r2, #0]
 80016d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016de:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016ec:	2001      	movs	r0, #1
 80016ee:	f7ff fc8f 	bl	8001010 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016fa:	461a      	mov	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	6013      	str	r3, [r2, #0]
}
 8001700:	bf00      	nop
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	f8de3f23 	.word	0xf8de3f23

0800170c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b0a6      	sub	sp, #152	; 0x98
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001714:	2301      	movs	r3, #1
 8001716:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800171a:	2301      	movs	r3, #1
 800171c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001720:	2300      	movs	r3, #0
 8001722:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001724:	2300      	movs	r3, #0
 8001726:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800172a:	2301      	movs	r3, #1
 800172c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001730:	2300      	movs	r3, #0
 8001732:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001736:	2301      	movs	r3, #1
 8001738:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800173c:	2300      	movs	r3, #0
 800173e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001742:	2300      	movs	r3, #0
 8001744:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001748:	2300      	movs	r3, #0
 800174a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800174c:	2300      	movs	r3, #0
 800174e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001752:	2300      	movs	r3, #0
 8001754:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001756:	2300      	movs	r3, #0
 8001758:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800175c:	2300      	movs	r3, #0
 800175e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001762:	2300      	movs	r3, #0
 8001764:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001768:	2300      	movs	r3, #0
 800176a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800176e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001772:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001774:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001778:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800177a:	2300      	movs	r3, #0
 800177c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001780:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001784:	4619      	mov	r1, r3
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff fe86 	bl	8001498 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800178c:	2301      	movs	r3, #1
 800178e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001790:	2301      	movs	r3, #1
 8001792:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001794:	2301      	movs	r3, #1
 8001796:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800179a:	2301      	movs	r3, #1
 800179c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80017ae:	2300      	movs	r3, #0
 80017b0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80017b2:	2301      	movs	r3, #1
 80017b4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80017b8:	2301      	movs	r3, #1
 80017ba:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80017bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017c0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80017c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017c6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80017c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017cc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80017ce:	2301      	movs	r3, #1
 80017d0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80017d8:	2300      	movs	r3, #0
 80017da:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80017dc:	f107 0308 	add.w	r3, r7, #8
 80017e0:	4619      	mov	r1, r3
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7ff ff08 	bl	80015f8 <ETH_SetDMAConfig>
}
 80017e8:	bf00      	nop
 80017ea:	3798      	adds	r7, #152	; 0x98
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b087      	sub	sp, #28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3305      	adds	r3, #5
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	021b      	lsls	r3, r3, #8
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	3204      	adds	r2, #4
 8001808:	7812      	ldrb	r2, [r2, #0]
 800180a:	4313      	orrs	r3, r2
 800180c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <ETH_MACAddressConfig+0x68>)
 8001812:	4413      	add	r3, r2
 8001814:	461a      	mov	r2, r3
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3303      	adds	r3, #3
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	061a      	lsls	r2, r3, #24
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	3302      	adds	r3, #2
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	041b      	lsls	r3, r3, #16
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3301      	adds	r3, #1
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	021b      	lsls	r3, r3, #8
 8001834:	4313      	orrs	r3, r2
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	7812      	ldrb	r2, [r2, #0]
 800183a:	4313      	orrs	r3, r2
 800183c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <ETH_MACAddressConfig+0x6c>)
 8001842:	4413      	add	r3, r2
 8001844:	461a      	mov	r2, r3
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	6013      	str	r3, [r2, #0]
}
 800184a:	bf00      	nop
 800184c:	371c      	adds	r7, #28
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	40028040 	.word	0x40028040
 800185c:	40028044 	.word	0x40028044

08001860 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001868:	2300      	movs	r3, #0
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	e03e      	b.n	80018ec <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68d9      	ldr	r1, [r3, #12]
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	4613      	mov	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	440b      	add	r3, r1
 800187e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	2200      	movs	r2, #0
 800188a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	2200      	movs	r2, #0
 8001890:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	2200      	movs	r2, #0
 8001896:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001898:	68b9      	ldr	r1, [r7, #8]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	68fa      	ldr	r2, [r7, #12]
 800189e:	3206      	adds	r2, #6
 80018a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d80c      	bhi.n	80018d0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68d9      	ldr	r1, [r3, #12]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	1c5a      	adds	r2, r3, #1
 80018be:	4613      	mov	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	440b      	add	r3, r1
 80018c8:	461a      	mov	r2, r3
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	e004      	b.n	80018da <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	461a      	mov	r2, r3
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	3301      	adds	r3, #1
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2b03      	cmp	r3, #3
 80018f0:	d9bd      	bls.n	800186e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68da      	ldr	r2, [r3, #12]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001904:	611a      	str	r2, [r3, #16]
}
 8001906:	bf00      	nop
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001912:	b480      	push	{r7}
 8001914:	b085      	sub	sp, #20
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	e046      	b.n	80019ae <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6919      	ldr	r1, [r3, #16]
 8001924:	68fa      	ldr	r2, [r7, #12]
 8001926:	4613      	mov	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	440b      	add	r3, r1
 8001930:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	2200      	movs	r2, #0
 800193c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	2200      	movs	r2, #0
 8001948:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	2200      	movs	r2, #0
 800194e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	2200      	movs	r2, #0
 8001954:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800195c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001964:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001972:	68b9      	ldr	r1, [r7, #8]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	3212      	adds	r2, #18
 800197a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2b02      	cmp	r3, #2
 8001982:	d80c      	bhi.n	800199e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6919      	ldr	r1, [r3, #16]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	1c5a      	adds	r2, r3, #1
 800198c:	4613      	mov	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	440b      	add	r3, r1
 8001996:	461a      	mov	r2, r3
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	60da      	str	r2, [r3, #12]
 800199c:	e004      	b.n	80019a8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	461a      	mov	r2, r3
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	3301      	adds	r3, #1
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2b03      	cmp	r3, #3
 80019b2:	d9b5      	bls.n	8001920 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	691a      	ldr	r2, [r3, #16]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019de:	60da      	str	r2, [r3, #12]
}
 80019e0:	bf00      	nop
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b089      	sub	sp, #36	; 0x24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80019fe:	2300      	movs	r3, #0
 8001a00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a06:	2300      	movs	r3, #0
 8001a08:	61fb      	str	r3, [r7, #28]
 8001a0a:	e175      	b.n	8001cf8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	f040 8164 	bne.w	8001cf2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f003 0303 	and.w	r3, r3, #3
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d005      	beq.n	8001a42 <HAL_GPIO_Init+0x56>
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d130      	bne.n	8001aa4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4013      	ands	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	68da      	ldr	r2, [r3, #12]
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a78:	2201      	movs	r2, #1
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	091b      	lsrs	r3, r3, #4
 8001a8e:	f003 0201 	and.w	r2, r3, #1
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 0303 	and.w	r3, r3, #3
 8001aac:	2b03      	cmp	r3, #3
 8001aae:	d017      	beq.n	8001ae0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	2203      	movs	r2, #3
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d123      	bne.n	8001b34 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	08da      	lsrs	r2, r3, #3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3208      	adds	r2, #8
 8001af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	220f      	movs	r2, #15
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	691a      	ldr	r2, [r3, #16]
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	08da      	lsrs	r2, r3, #3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3208      	adds	r2, #8
 8001b2e:	69b9      	ldr	r1, [r7, #24]
 8001b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	2203      	movs	r2, #3
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 0203 	and.w	r2, r3, #3
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 80be 	beq.w	8001cf2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b76:	4b66      	ldr	r3, [pc, #408]	; (8001d10 <HAL_GPIO_Init+0x324>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	4a65      	ldr	r2, [pc, #404]	; (8001d10 <HAL_GPIO_Init+0x324>)
 8001b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b80:	6453      	str	r3, [r2, #68]	; 0x44
 8001b82:	4b63      	ldr	r3, [pc, #396]	; (8001d10 <HAL_GPIO_Init+0x324>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b8e:	4a61      	ldr	r2, [pc, #388]	; (8001d14 <HAL_GPIO_Init+0x328>)
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	089b      	lsrs	r3, r3, #2
 8001b94:	3302      	adds	r3, #2
 8001b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	220f      	movs	r2, #15
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43db      	mvns	r3, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a58      	ldr	r2, [pc, #352]	; (8001d18 <HAL_GPIO_Init+0x32c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d037      	beq.n	8001c2a <HAL_GPIO_Init+0x23e>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a57      	ldr	r2, [pc, #348]	; (8001d1c <HAL_GPIO_Init+0x330>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d031      	beq.n	8001c26 <HAL_GPIO_Init+0x23a>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a56      	ldr	r2, [pc, #344]	; (8001d20 <HAL_GPIO_Init+0x334>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d02b      	beq.n	8001c22 <HAL_GPIO_Init+0x236>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a55      	ldr	r2, [pc, #340]	; (8001d24 <HAL_GPIO_Init+0x338>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d025      	beq.n	8001c1e <HAL_GPIO_Init+0x232>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a54      	ldr	r2, [pc, #336]	; (8001d28 <HAL_GPIO_Init+0x33c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d01f      	beq.n	8001c1a <HAL_GPIO_Init+0x22e>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a53      	ldr	r2, [pc, #332]	; (8001d2c <HAL_GPIO_Init+0x340>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d019      	beq.n	8001c16 <HAL_GPIO_Init+0x22a>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a52      	ldr	r2, [pc, #328]	; (8001d30 <HAL_GPIO_Init+0x344>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d013      	beq.n	8001c12 <HAL_GPIO_Init+0x226>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a51      	ldr	r2, [pc, #324]	; (8001d34 <HAL_GPIO_Init+0x348>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d00d      	beq.n	8001c0e <HAL_GPIO_Init+0x222>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a50      	ldr	r2, [pc, #320]	; (8001d38 <HAL_GPIO_Init+0x34c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d007      	beq.n	8001c0a <HAL_GPIO_Init+0x21e>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a4f      	ldr	r2, [pc, #316]	; (8001d3c <HAL_GPIO_Init+0x350>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d101      	bne.n	8001c06 <HAL_GPIO_Init+0x21a>
 8001c02:	2309      	movs	r3, #9
 8001c04:	e012      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c06:	230a      	movs	r3, #10
 8001c08:	e010      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c0a:	2308      	movs	r3, #8
 8001c0c:	e00e      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c0e:	2307      	movs	r3, #7
 8001c10:	e00c      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c12:	2306      	movs	r3, #6
 8001c14:	e00a      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c16:	2305      	movs	r3, #5
 8001c18:	e008      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	e006      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e004      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c22:	2302      	movs	r3, #2
 8001c24:	e002      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	69fa      	ldr	r2, [r7, #28]
 8001c2e:	f002 0203 	and.w	r2, r2, #3
 8001c32:	0092      	lsls	r2, r2, #2
 8001c34:	4093      	lsls	r3, r2
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c3c:	4935      	ldr	r1, [pc, #212]	; (8001d14 <HAL_GPIO_Init+0x328>)
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	089b      	lsrs	r3, r3, #2
 8001c42:	3302      	adds	r3, #2
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c4a:	4b3d      	ldr	r3, [pc, #244]	; (8001d40 <HAL_GPIO_Init+0x354>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	43db      	mvns	r3, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4013      	ands	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c6e:	4a34      	ldr	r2, [pc, #208]	; (8001d40 <HAL_GPIO_Init+0x354>)
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c74:	4b32      	ldr	r3, [pc, #200]	; (8001d40 <HAL_GPIO_Init+0x354>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c98:	4a29      	ldr	r2, [pc, #164]	; (8001d40 <HAL_GPIO_Init+0x354>)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c9e:	4b28      	ldr	r3, [pc, #160]	; (8001d40 <HAL_GPIO_Init+0x354>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4013      	ands	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cc2:	4a1f      	ldr	r2, [pc, #124]	; (8001d40 <HAL_GPIO_Init+0x354>)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cc8:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <HAL_GPIO_Init+0x354>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cec:	4a14      	ldr	r2, [pc, #80]	; (8001d40 <HAL_GPIO_Init+0x354>)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	61fb      	str	r3, [r7, #28]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	2b0f      	cmp	r3, #15
 8001cfc:	f67f ae86 	bls.w	8001a0c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d00:	bf00      	nop
 8001d02:	bf00      	nop
 8001d04:	3724      	adds	r7, #36	; 0x24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40013800 	.word	0x40013800
 8001d18:	40020000 	.word	0x40020000
 8001d1c:	40020400 	.word	0x40020400
 8001d20:	40020800 	.word	0x40020800
 8001d24:	40020c00 	.word	0x40020c00
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40021400 	.word	0x40021400
 8001d30:	40021800 	.word	0x40021800
 8001d34:	40021c00 	.word	0x40021c00
 8001d38:	40022000 	.word	0x40022000
 8001d3c:	40022400 	.word	0x40022400
 8001d40:	40013c00 	.word	0x40013c00

08001d44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	807b      	strh	r3, [r7, #2]
 8001d50:	4613      	mov	r3, r2
 8001d52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d54:	787b      	ldrb	r3, [r7, #1]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d5a:	887a      	ldrh	r2, [r7, #2]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001d60:	e003      	b.n	8001d6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001d62:	887b      	ldrh	r3, [r7, #2]
 8001d64:	041a      	lsls	r2, r3, #16
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	619a      	str	r2, [r3, #24]
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d78:	b08f      	sub	sp, #60	; 0x3c
 8001d7a:	af0a      	add	r7, sp, #40	; 0x28
 8001d7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e116      	b.n	8001fb6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d106      	bne.n	8001da8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7fe fff4 	bl	8000d90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2203      	movs	r2, #3
 8001dac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d102      	bne.n	8001dc2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f002 faf0 	bl	80043ac <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	603b      	str	r3, [r7, #0]
 8001dd2:	687e      	ldr	r6, [r7, #4]
 8001dd4:	466d      	mov	r5, sp
 8001dd6:	f106 0410 	add.w	r4, r6, #16
 8001dda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ddc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001de0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001de2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001de6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001dea:	1d33      	adds	r3, r6, #4
 8001dec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dee:	6838      	ldr	r0, [r7, #0]
 8001df0:	f002 fa84 	bl	80042fc <USB_CoreInit>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d005      	beq.n	8001e06 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e0d7      	b.n	8001fb6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f002 fade 	bl	80043ce <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e12:	2300      	movs	r3, #0
 8001e14:	73fb      	strb	r3, [r7, #15]
 8001e16:	e04a      	b.n	8001eae <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e18:	7bfa      	ldrb	r2, [r7, #15]
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	4413      	add	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	333d      	adds	r3, #61	; 0x3d
 8001e28:	2201      	movs	r2, #1
 8001e2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e2c:	7bfa      	ldrb	r2, [r7, #15]
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	4613      	mov	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	4413      	add	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	440b      	add	r3, r1
 8001e3a:	333c      	adds	r3, #60	; 0x3c
 8001e3c:	7bfa      	ldrb	r2, [r7, #15]
 8001e3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e40:	7bfa      	ldrb	r2, [r7, #15]
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
 8001e44:	b298      	uxth	r0, r3
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	3344      	adds	r3, #68	; 0x44
 8001e54:	4602      	mov	r2, r0
 8001e56:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e58:	7bfa      	ldrb	r2, [r7, #15]
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	4413      	add	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	3340      	adds	r3, #64	; 0x40
 8001e68:	2200      	movs	r2, #0
 8001e6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e6c:	7bfa      	ldrb	r2, [r7, #15]
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	4613      	mov	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	4413      	add	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	440b      	add	r3, r1
 8001e7a:	3348      	adds	r3, #72	; 0x48
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e80:	7bfa      	ldrb	r2, [r7, #15]
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	4613      	mov	r3, r2
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	4413      	add	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	334c      	adds	r3, #76	; 0x4c
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e94:	7bfa      	ldrb	r2, [r7, #15]
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	3354      	adds	r3, #84	; 0x54
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	73fb      	strb	r3, [r7, #15]
 8001eae:	7bfa      	ldrb	r2, [r7, #15]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d3af      	bcc.n	8001e18 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eb8:	2300      	movs	r3, #0
 8001eba:	73fb      	strb	r3, [r7, #15]
 8001ebc:	e044      	b.n	8001f48 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ebe:	7bfa      	ldrb	r2, [r7, #15]
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	4413      	add	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	440b      	add	r3, r1
 8001ecc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ed4:	7bfa      	ldrb	r2, [r7, #15]
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	4413      	add	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001ee6:	7bfa      	ldrb	r2, [r7, #15]
 8001ee8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001eea:	7bfa      	ldrb	r2, [r7, #15]
 8001eec:	6879      	ldr	r1, [r7, #4]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	4413      	add	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001efc:	2200      	movs	r2, #0
 8001efe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f00:	7bfa      	ldrb	r2, [r7, #15]
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	4613      	mov	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	4413      	add	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f16:	7bfa      	ldrb	r2, [r7, #15]
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	4413      	add	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	440b      	add	r3, r1
 8001f24:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f2c:	7bfa      	ldrb	r2, [r7, #15]
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	4413      	add	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
 8001f44:	3301      	adds	r3, #1
 8001f46:	73fb      	strb	r3, [r7, #15]
 8001f48:	7bfa      	ldrb	r2, [r7, #15]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d3b5      	bcc.n	8001ebe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	603b      	str	r3, [r7, #0]
 8001f58:	687e      	ldr	r6, [r7, #4]
 8001f5a:	466d      	mov	r5, sp
 8001f5c:	f106 0410 	add.w	r4, r6, #16
 8001f60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f6c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f70:	1d33      	adds	r3, r6, #4
 8001f72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f74:	6838      	ldr	r0, [r7, #0]
 8001f76:	f002 fa77 	bl	8004468 <USB_DevInit>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2202      	movs	r2, #2
 8001f84:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e014      	b.n	8001fb6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d102      	bne.n	8001faa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 f80b 	bl	8001fc0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f002 fc35 	bl	800481e <USB_DevDisconnect>

  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001fc0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001fee:	4b05      	ldr	r3, [pc, #20]	; (8002004 <HAL_PCDEx_ActivateLPM+0x44>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	10000003 	.word	0x10000003

08002008 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800200c:	4b05      	ldr	r3, [pc, #20]	; (8002024 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a04      	ldr	r2, [pc, #16]	; (8002024 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002016:	6013      	str	r3, [r2, #0]
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	40007000 	.word	0x40007000

08002028 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002032:	4b23      	ldr	r3, [pc, #140]	; (80020c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	4a22      	ldr	r2, [pc, #136]	; (80020c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800203c:	6413      	str	r3, [r2, #64]	; 0x40
 800203e:	4b20      	ldr	r3, [pc, #128]	; (80020c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800204a:	4b1e      	ldr	r3, [pc, #120]	; (80020c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a1d      	ldr	r2, [pc, #116]	; (80020c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002054:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002056:	f7fe ffcf 	bl	8000ff8 <HAL_GetTick>
 800205a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800205c:	e009      	b.n	8002072 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800205e:	f7fe ffcb 	bl	8000ff8 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800206c:	d901      	bls.n	8002072 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e022      	b.n	80020b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002072:	4b14      	ldr	r3, [pc, #80]	; (80020c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800207a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800207e:	d1ee      	bne.n	800205e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002080:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a0f      	ldr	r2, [pc, #60]	; (80020c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002086:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800208a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800208c:	f7fe ffb4 	bl	8000ff8 <HAL_GetTick>
 8002090:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002092:	e009      	b.n	80020a8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002094:	f7fe ffb0 	bl	8000ff8 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020a2:	d901      	bls.n	80020a8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e007      	b.n	80020b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80020a8:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80020b4:	d1ee      	bne.n	8002094 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40023800 	.word	0x40023800
 80020c4:	40007000 	.word	0x40007000

080020c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80020d0:	2300      	movs	r3, #0
 80020d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e29b      	b.n	8002616 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 8087 	beq.w	80021fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020ec:	4b96      	ldr	r3, [pc, #600]	; (8002348 <HAL_RCC_OscConfig+0x280>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 030c 	and.w	r3, r3, #12
 80020f4:	2b04      	cmp	r3, #4
 80020f6:	d00c      	beq.n	8002112 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020f8:	4b93      	ldr	r3, [pc, #588]	; (8002348 <HAL_RCC_OscConfig+0x280>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f003 030c 	and.w	r3, r3, #12
 8002100:	2b08      	cmp	r3, #8
 8002102:	d112      	bne.n	800212a <HAL_RCC_OscConfig+0x62>
 8002104:	4b90      	ldr	r3, [pc, #576]	; (8002348 <HAL_RCC_OscConfig+0x280>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800210c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002110:	d10b      	bne.n	800212a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002112:	4b8d      	ldr	r3, [pc, #564]	; (8002348 <HAL_RCC_OscConfig+0x280>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d06c      	beq.n	80021f8 <HAL_RCC_OscConfig+0x130>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d168      	bne.n	80021f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e275      	b.n	8002616 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002132:	d106      	bne.n	8002142 <HAL_RCC_OscConfig+0x7a>
 8002134:	4b84      	ldr	r3, [pc, #528]	; (8002348 <HAL_RCC_OscConfig+0x280>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a83      	ldr	r2, [pc, #524]	; (8002348 <HAL_RCC_OscConfig+0x280>)
 800213a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800213e:	6013      	str	r3, [r2, #0]
 8002140:	e02e      	b.n	80021a0 <HAL_RCC_OscConfig+0xd8>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10c      	bne.n	8002164 <HAL_RCC_OscConfig+0x9c>
 800214a:	4b7f      	ldr	r3, [pc, #508]	; (8002348 <HAL_RCC_OscConfig+0x280>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a7e      	ldr	r2, [pc, #504]	; (8002348 <HAL_RCC_OscConfig+0x280>)
 8002150:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	4b7c      	ldr	r3, [pc, #496]	; (8002348 <HAL_RCC_OscConfig+0x280>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a7b      	ldr	r2, [pc, #492]	; (8002348 <HAL_RCC_OscConfig+0x280>)
 800215c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	e01d      	b.n	80021a0 <HAL_RCC_OscConfig+0xd8>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800216c:	d10c      	bne.n	8002188 <HAL_RCC_OscConfig+0xc0>
 800216e:	4b76      	ldr	r3, [pc, #472]	; (8002348 <HAL_RCC_OscConfig+0x280>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a75      	ldr	r2, [pc, #468]	; (8002348 <HAL_RCC_OscConfig+0x280>)
 8002174:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	4b73      	ldr	r3, [pc, #460]	; (8002348 <HAL_RCC_OscConfig+0x280>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a72      	ldr	r2, [pc, #456]	; (8002348 <HAL_RCC_OscConfig+0x280>)
 8002180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	e00b      	b.n	80021a0 <HAL_RCC_OscConfig+0xd8>
 8002188:	4b6f      	ldr	r3, [pc, #444]	; (8002348 <HAL_RCC_OscConfig+0x280>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a6e      	ldr	r2, [pc, #440]	; (8002348 <HAL_RCC_OscConfig+0x280>)
 800218e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002192:	6013      	str	r3, [r2, #0]
 8002194:	4b6c      	ldr	r3, [pc, #432]	; (8002348 <HAL_RCC_OscConfig+0x280>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a6b      	ldr	r2, [pc, #428]	; (8002348 <HAL_RCC_OscConfig+0x280>)
 800219a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800219e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d013      	beq.n	80021d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a8:	f7fe ff26 	bl	8000ff8 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b0:	f7fe ff22 	bl	8000ff8 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b64      	cmp	r3, #100	; 0x64
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e229      	b.n	8002616 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c2:	4b61      	ldr	r3, [pc, #388]	; (8002348 <HAL_RCC_OscConfig+0x280>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0f0      	beq.n	80021b0 <HAL_RCC_OscConfig+0xe8>
 80021ce:	e014      	b.n	80021fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d0:	f7fe ff12 	bl	8000ff8 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d8:	f7fe ff0e 	bl	8000ff8 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b64      	cmp	r3, #100	; 0x64
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e215      	b.n	8002616 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ea:	4b57      	ldr	r3, [pc, #348]	; (8002348 <HAL_RCC_OscConfig+0x280>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f0      	bne.n	80021d8 <HAL_RCC_OscConfig+0x110>
 80021f6:	e000      	b.n	80021fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d069      	beq.n	80022da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002206:	4b50      	ldr	r3, [pc, #320]	; (8002348 <HAL_RCC_OscConfig+0x280>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 030c 	and.w	r3, r3, #12
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00b      	beq.n	800222a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002212:	4b4d      	ldr	r3, [pc, #308]	; (8002348 <HAL_RCC_OscConfig+0x280>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 030c 	and.w	r3, r3, #12
 800221a:	2b08      	cmp	r3, #8
 800221c:	d11c      	bne.n	8002258 <HAL_RCC_OscConfig+0x190>
 800221e:	4b4a      	ldr	r3, [pc, #296]	; (8002348 <HAL_RCC_OscConfig+0x280>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d116      	bne.n	8002258 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222a:	4b47      	ldr	r3, [pc, #284]	; (8002348 <HAL_RCC_OscConfig+0x280>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d005      	beq.n	8002242 <HAL_RCC_OscConfig+0x17a>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d001      	beq.n	8002242 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e1e9      	b.n	8002616 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002242:	4b41      	ldr	r3, [pc, #260]	; (8002348 <HAL_RCC_OscConfig+0x280>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	493d      	ldr	r1, [pc, #244]	; (8002348 <HAL_RCC_OscConfig+0x280>)
 8002252:	4313      	orrs	r3, r2
 8002254:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002256:	e040      	b.n	80022da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d023      	beq.n	80022a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002260:	4b39      	ldr	r3, [pc, #228]	; (8002348 <HAL_RCC_OscConfig+0x280>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a38      	ldr	r2, [pc, #224]	; (8002348 <HAL_RCC_OscConfig+0x280>)
 8002266:	f043 0301 	orr.w	r3, r3, #1
 800226a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226c:	f7fe fec4 	bl	8000ff8 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002274:	f7fe fec0 	bl	8000ff8 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e1c7      	b.n	8002616 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002286:	4b30      	ldr	r3, [pc, #192]	; (8002348 <HAL_RCC_OscConfig+0x280>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0f0      	beq.n	8002274 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002292:	4b2d      	ldr	r3, [pc, #180]	; (8002348 <HAL_RCC_OscConfig+0x280>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	4929      	ldr	r1, [pc, #164]	; (8002348 <HAL_RCC_OscConfig+0x280>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	600b      	str	r3, [r1, #0]
 80022a6:	e018      	b.n	80022da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022a8:	4b27      	ldr	r3, [pc, #156]	; (8002348 <HAL_RCC_OscConfig+0x280>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a26      	ldr	r2, [pc, #152]	; (8002348 <HAL_RCC_OscConfig+0x280>)
 80022ae:	f023 0301 	bic.w	r3, r3, #1
 80022b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b4:	f7fe fea0 	bl	8000ff8 <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022bc:	f7fe fe9c 	bl	8000ff8 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e1a3      	b.n	8002616 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ce:	4b1e      	ldr	r3, [pc, #120]	; (8002348 <HAL_RCC_OscConfig+0x280>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1f0      	bne.n	80022bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d038      	beq.n	8002358 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d019      	beq.n	8002322 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ee:	4b16      	ldr	r3, [pc, #88]	; (8002348 <HAL_RCC_OscConfig+0x280>)
 80022f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022f2:	4a15      	ldr	r2, [pc, #84]	; (8002348 <HAL_RCC_OscConfig+0x280>)
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022fa:	f7fe fe7d 	bl	8000ff8 <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002302:	f7fe fe79 	bl	8000ff8 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e180      	b.n	8002616 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002314:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <HAL_RCC_OscConfig+0x280>)
 8002316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0f0      	beq.n	8002302 <HAL_RCC_OscConfig+0x23a>
 8002320:	e01a      	b.n	8002358 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002322:	4b09      	ldr	r3, [pc, #36]	; (8002348 <HAL_RCC_OscConfig+0x280>)
 8002324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002326:	4a08      	ldr	r2, [pc, #32]	; (8002348 <HAL_RCC_OscConfig+0x280>)
 8002328:	f023 0301 	bic.w	r3, r3, #1
 800232c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800232e:	f7fe fe63 	bl	8000ff8 <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002334:	e00a      	b.n	800234c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002336:	f7fe fe5f 	bl	8000ff8 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d903      	bls.n	800234c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e166      	b.n	8002616 <HAL_RCC_OscConfig+0x54e>
 8002348:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800234c:	4b92      	ldr	r3, [pc, #584]	; (8002598 <HAL_RCC_OscConfig+0x4d0>)
 800234e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1ee      	bne.n	8002336 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 80a4 	beq.w	80024ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002366:	4b8c      	ldr	r3, [pc, #560]	; (8002598 <HAL_RCC_OscConfig+0x4d0>)
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10d      	bne.n	800238e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002372:	4b89      	ldr	r3, [pc, #548]	; (8002598 <HAL_RCC_OscConfig+0x4d0>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	4a88      	ldr	r2, [pc, #544]	; (8002598 <HAL_RCC_OscConfig+0x4d0>)
 8002378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800237c:	6413      	str	r3, [r2, #64]	; 0x40
 800237e:	4b86      	ldr	r3, [pc, #536]	; (8002598 <HAL_RCC_OscConfig+0x4d0>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800238a:	2301      	movs	r3, #1
 800238c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800238e:	4b83      	ldr	r3, [pc, #524]	; (800259c <HAL_RCC_OscConfig+0x4d4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002396:	2b00      	cmp	r3, #0
 8002398:	d118      	bne.n	80023cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800239a:	4b80      	ldr	r3, [pc, #512]	; (800259c <HAL_RCC_OscConfig+0x4d4>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a7f      	ldr	r2, [pc, #508]	; (800259c <HAL_RCC_OscConfig+0x4d4>)
 80023a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023a6:	f7fe fe27 	bl	8000ff8 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ae:	f7fe fe23 	bl	8000ff8 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b64      	cmp	r3, #100	; 0x64
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e12a      	b.n	8002616 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023c0:	4b76      	ldr	r3, [pc, #472]	; (800259c <HAL_RCC_OscConfig+0x4d4>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0f0      	beq.n	80023ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d106      	bne.n	80023e2 <HAL_RCC_OscConfig+0x31a>
 80023d4:	4b70      	ldr	r3, [pc, #448]	; (8002598 <HAL_RCC_OscConfig+0x4d0>)
 80023d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d8:	4a6f      	ldr	r2, [pc, #444]	; (8002598 <HAL_RCC_OscConfig+0x4d0>)
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	6713      	str	r3, [r2, #112]	; 0x70
 80023e0:	e02d      	b.n	800243e <HAL_RCC_OscConfig+0x376>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10c      	bne.n	8002404 <HAL_RCC_OscConfig+0x33c>
 80023ea:	4b6b      	ldr	r3, [pc, #428]	; (8002598 <HAL_RCC_OscConfig+0x4d0>)
 80023ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ee:	4a6a      	ldr	r2, [pc, #424]	; (8002598 <HAL_RCC_OscConfig+0x4d0>)
 80023f0:	f023 0301 	bic.w	r3, r3, #1
 80023f4:	6713      	str	r3, [r2, #112]	; 0x70
 80023f6:	4b68      	ldr	r3, [pc, #416]	; (8002598 <HAL_RCC_OscConfig+0x4d0>)
 80023f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fa:	4a67      	ldr	r2, [pc, #412]	; (8002598 <HAL_RCC_OscConfig+0x4d0>)
 80023fc:	f023 0304 	bic.w	r3, r3, #4
 8002400:	6713      	str	r3, [r2, #112]	; 0x70
 8002402:	e01c      	b.n	800243e <HAL_RCC_OscConfig+0x376>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	2b05      	cmp	r3, #5
 800240a:	d10c      	bne.n	8002426 <HAL_RCC_OscConfig+0x35e>
 800240c:	4b62      	ldr	r3, [pc, #392]	; (8002598 <HAL_RCC_OscConfig+0x4d0>)
 800240e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002410:	4a61      	ldr	r2, [pc, #388]	; (8002598 <HAL_RCC_OscConfig+0x4d0>)
 8002412:	f043 0304 	orr.w	r3, r3, #4
 8002416:	6713      	str	r3, [r2, #112]	; 0x70
 8002418:	4b5f      	ldr	r3, [pc, #380]	; (8002598 <HAL_RCC_OscConfig+0x4d0>)
 800241a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241c:	4a5e      	ldr	r2, [pc, #376]	; (8002598 <HAL_RCC_OscConfig+0x4d0>)
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	6713      	str	r3, [r2, #112]	; 0x70
 8002424:	e00b      	b.n	800243e <HAL_RCC_OscConfig+0x376>
 8002426:	4b5c      	ldr	r3, [pc, #368]	; (8002598 <HAL_RCC_OscConfig+0x4d0>)
 8002428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242a:	4a5b      	ldr	r2, [pc, #364]	; (8002598 <HAL_RCC_OscConfig+0x4d0>)
 800242c:	f023 0301 	bic.w	r3, r3, #1
 8002430:	6713      	str	r3, [r2, #112]	; 0x70
 8002432:	4b59      	ldr	r3, [pc, #356]	; (8002598 <HAL_RCC_OscConfig+0x4d0>)
 8002434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002436:	4a58      	ldr	r2, [pc, #352]	; (8002598 <HAL_RCC_OscConfig+0x4d0>)
 8002438:	f023 0304 	bic.w	r3, r3, #4
 800243c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d015      	beq.n	8002472 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002446:	f7fe fdd7 	bl	8000ff8 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244c:	e00a      	b.n	8002464 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244e:	f7fe fdd3 	bl	8000ff8 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	f241 3288 	movw	r2, #5000	; 0x1388
 800245c:	4293      	cmp	r3, r2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e0d8      	b.n	8002616 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002464:	4b4c      	ldr	r3, [pc, #304]	; (8002598 <HAL_RCC_OscConfig+0x4d0>)
 8002466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0ee      	beq.n	800244e <HAL_RCC_OscConfig+0x386>
 8002470:	e014      	b.n	800249c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002472:	f7fe fdc1 	bl	8000ff8 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002478:	e00a      	b.n	8002490 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800247a:	f7fe fdbd 	bl	8000ff8 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	f241 3288 	movw	r2, #5000	; 0x1388
 8002488:	4293      	cmp	r3, r2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e0c2      	b.n	8002616 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002490:	4b41      	ldr	r3, [pc, #260]	; (8002598 <HAL_RCC_OscConfig+0x4d0>)
 8002492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1ee      	bne.n	800247a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800249c:	7dfb      	ldrb	r3, [r7, #23]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d105      	bne.n	80024ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024a2:	4b3d      	ldr	r3, [pc, #244]	; (8002598 <HAL_RCC_OscConfig+0x4d0>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	4a3c      	ldr	r2, [pc, #240]	; (8002598 <HAL_RCC_OscConfig+0x4d0>)
 80024a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 80ae 	beq.w	8002614 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024b8:	4b37      	ldr	r3, [pc, #220]	; (8002598 <HAL_RCC_OscConfig+0x4d0>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 030c 	and.w	r3, r3, #12
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d06d      	beq.n	80025a0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d14b      	bne.n	8002564 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024cc:	4b32      	ldr	r3, [pc, #200]	; (8002598 <HAL_RCC_OscConfig+0x4d0>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a31      	ldr	r2, [pc, #196]	; (8002598 <HAL_RCC_OscConfig+0x4d0>)
 80024d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d8:	f7fe fd8e 	bl	8000ff8 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e0:	f7fe fd8a 	bl	8000ff8 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e091      	b.n	8002616 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024f2:	4b29      	ldr	r3, [pc, #164]	; (8002598 <HAL_RCC_OscConfig+0x4d0>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f0      	bne.n	80024e0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69da      	ldr	r2, [r3, #28]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	019b      	lsls	r3, r3, #6
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002514:	085b      	lsrs	r3, r3, #1
 8002516:	3b01      	subs	r3, #1
 8002518:	041b      	lsls	r3, r3, #16
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002520:	061b      	lsls	r3, r3, #24
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002528:	071b      	lsls	r3, r3, #28
 800252a:	491b      	ldr	r1, [pc, #108]	; (8002598 <HAL_RCC_OscConfig+0x4d0>)
 800252c:	4313      	orrs	r3, r2
 800252e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002530:	4b19      	ldr	r3, [pc, #100]	; (8002598 <HAL_RCC_OscConfig+0x4d0>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a18      	ldr	r2, [pc, #96]	; (8002598 <HAL_RCC_OscConfig+0x4d0>)
 8002536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800253a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253c:	f7fe fd5c 	bl	8000ff8 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002544:	f7fe fd58 	bl	8000ff8 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e05f      	b.n	8002616 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002556:	4b10      	ldr	r3, [pc, #64]	; (8002598 <HAL_RCC_OscConfig+0x4d0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0f0      	beq.n	8002544 <HAL_RCC_OscConfig+0x47c>
 8002562:	e057      	b.n	8002614 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002564:	4b0c      	ldr	r3, [pc, #48]	; (8002598 <HAL_RCC_OscConfig+0x4d0>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a0b      	ldr	r2, [pc, #44]	; (8002598 <HAL_RCC_OscConfig+0x4d0>)
 800256a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800256e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002570:	f7fe fd42 	bl	8000ff8 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002578:	f7fe fd3e 	bl	8000ff8 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e045      	b.n	8002616 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800258a:	4b03      	ldr	r3, [pc, #12]	; (8002598 <HAL_RCC_OscConfig+0x4d0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f0      	bne.n	8002578 <HAL_RCC_OscConfig+0x4b0>
 8002596:	e03d      	b.n	8002614 <HAL_RCC_OscConfig+0x54c>
 8002598:	40023800 	.word	0x40023800
 800259c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80025a0:	4b1f      	ldr	r3, [pc, #124]	; (8002620 <HAL_RCC_OscConfig+0x558>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d030      	beq.n	8002610 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d129      	bne.n	8002610 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d122      	bne.n	8002610 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025d0:	4013      	ands	r3, r2
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025d8:	4293      	cmp	r3, r2
 80025da:	d119      	bne.n	8002610 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e6:	085b      	lsrs	r3, r3, #1
 80025e8:	3b01      	subs	r3, #1
 80025ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d10f      	bne.n	8002610 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d107      	bne.n	8002610 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800260c:	429a      	cmp	r2, r3
 800260e:	d001      	beq.n	8002614 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e000      	b.n	8002616 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40023800 	.word	0x40023800

08002624 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800262e:	2300      	movs	r3, #0
 8002630:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e0d0      	b.n	80027de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800263c:	4b6a      	ldr	r3, [pc, #424]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 030f 	and.w	r3, r3, #15
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d910      	bls.n	800266c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264a:	4b67      	ldr	r3, [pc, #412]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f023 020f 	bic.w	r2, r3, #15
 8002652:	4965      	ldr	r1, [pc, #404]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	4313      	orrs	r3, r2
 8002658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800265a:	4b63      	ldr	r3, [pc, #396]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	d001      	beq.n	800266c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e0b8      	b.n	80027de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d020      	beq.n	80026ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	d005      	beq.n	8002690 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002684:	4b59      	ldr	r3, [pc, #356]	; (80027ec <HAL_RCC_ClockConfig+0x1c8>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	4a58      	ldr	r2, [pc, #352]	; (80027ec <HAL_RCC_ClockConfig+0x1c8>)
 800268a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800268e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0308 	and.w	r3, r3, #8
 8002698:	2b00      	cmp	r3, #0
 800269a:	d005      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800269c:	4b53      	ldr	r3, [pc, #332]	; (80027ec <HAL_RCC_ClockConfig+0x1c8>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	4a52      	ldr	r2, [pc, #328]	; (80027ec <HAL_RCC_ClockConfig+0x1c8>)
 80026a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a8:	4b50      	ldr	r3, [pc, #320]	; (80027ec <HAL_RCC_ClockConfig+0x1c8>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	494d      	ldr	r1, [pc, #308]	; (80027ec <HAL_RCC_ClockConfig+0x1c8>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d040      	beq.n	8002748 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d107      	bne.n	80026de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ce:	4b47      	ldr	r3, [pc, #284]	; (80027ec <HAL_RCC_ClockConfig+0x1c8>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d115      	bne.n	8002706 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e07f      	b.n	80027de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d107      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e6:	4b41      	ldr	r3, [pc, #260]	; (80027ec <HAL_RCC_ClockConfig+0x1c8>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d109      	bne.n	8002706 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e073      	b.n	80027de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f6:	4b3d      	ldr	r3, [pc, #244]	; (80027ec <HAL_RCC_ClockConfig+0x1c8>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e06b      	b.n	80027de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002706:	4b39      	ldr	r3, [pc, #228]	; (80027ec <HAL_RCC_ClockConfig+0x1c8>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f023 0203 	bic.w	r2, r3, #3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	4936      	ldr	r1, [pc, #216]	; (80027ec <HAL_RCC_ClockConfig+0x1c8>)
 8002714:	4313      	orrs	r3, r2
 8002716:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002718:	f7fe fc6e 	bl	8000ff8 <HAL_GetTick>
 800271c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800271e:	e00a      	b.n	8002736 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002720:	f7fe fc6a 	bl	8000ff8 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	f241 3288 	movw	r2, #5000	; 0x1388
 800272e:	4293      	cmp	r3, r2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e053      	b.n	80027de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002736:	4b2d      	ldr	r3, [pc, #180]	; (80027ec <HAL_RCC_ClockConfig+0x1c8>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 020c 	and.w	r2, r3, #12
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	429a      	cmp	r2, r3
 8002746:	d1eb      	bne.n	8002720 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002748:	4b27      	ldr	r3, [pc, #156]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 030f 	and.w	r3, r3, #15
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d210      	bcs.n	8002778 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002756:	4b24      	ldr	r3, [pc, #144]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f023 020f 	bic.w	r2, r3, #15
 800275e:	4922      	ldr	r1, [pc, #136]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	4313      	orrs	r3, r2
 8002764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002766:	4b20      	ldr	r3, [pc, #128]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	429a      	cmp	r2, r3
 8002772:	d001      	beq.n	8002778 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e032      	b.n	80027de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	2b00      	cmp	r3, #0
 8002782:	d008      	beq.n	8002796 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002784:	4b19      	ldr	r3, [pc, #100]	; (80027ec <HAL_RCC_ClockConfig+0x1c8>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	4916      	ldr	r1, [pc, #88]	; (80027ec <HAL_RCC_ClockConfig+0x1c8>)
 8002792:	4313      	orrs	r3, r2
 8002794:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d009      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027a2:	4b12      	ldr	r3, [pc, #72]	; (80027ec <HAL_RCC_ClockConfig+0x1c8>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	490e      	ldr	r1, [pc, #56]	; (80027ec <HAL_RCC_ClockConfig+0x1c8>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027b6:	f000 f821 	bl	80027fc <HAL_RCC_GetSysClockFreq>
 80027ba:	4602      	mov	r2, r0
 80027bc:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <HAL_RCC_ClockConfig+0x1c8>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	091b      	lsrs	r3, r3, #4
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	490a      	ldr	r1, [pc, #40]	; (80027f0 <HAL_RCC_ClockConfig+0x1cc>)
 80027c8:	5ccb      	ldrb	r3, [r1, r3]
 80027ca:	fa22 f303 	lsr.w	r3, r2, r3
 80027ce:	4a09      	ldr	r2, [pc, #36]	; (80027f4 <HAL_RCC_ClockConfig+0x1d0>)
 80027d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027d2:	4b09      	ldr	r3, [pc, #36]	; (80027f8 <HAL_RCC_ClockConfig+0x1d4>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fe fbca 	bl	8000f70 <HAL_InitTick>

  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40023c00 	.word	0x40023c00
 80027ec:	40023800 	.word	0x40023800
 80027f0:	08007738 	.word	0x08007738
 80027f4:	20000000 	.word	0x20000000
 80027f8:	20000004 	.word	0x20000004

080027fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002800:	b094      	sub	sp, #80	; 0x50
 8002802:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002804:	2300      	movs	r3, #0
 8002806:	647b      	str	r3, [r7, #68]	; 0x44
 8002808:	2300      	movs	r3, #0
 800280a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800280c:	2300      	movs	r3, #0
 800280e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002810:	2300      	movs	r3, #0
 8002812:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002814:	4b79      	ldr	r3, [pc, #484]	; (80029fc <HAL_RCC_GetSysClockFreq+0x200>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 030c 	and.w	r3, r3, #12
 800281c:	2b08      	cmp	r3, #8
 800281e:	d00d      	beq.n	800283c <HAL_RCC_GetSysClockFreq+0x40>
 8002820:	2b08      	cmp	r3, #8
 8002822:	f200 80e1 	bhi.w	80029e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002826:	2b00      	cmp	r3, #0
 8002828:	d002      	beq.n	8002830 <HAL_RCC_GetSysClockFreq+0x34>
 800282a:	2b04      	cmp	r3, #4
 800282c:	d003      	beq.n	8002836 <HAL_RCC_GetSysClockFreq+0x3a>
 800282e:	e0db      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002830:	4b73      	ldr	r3, [pc, #460]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x204>)
 8002832:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002834:	e0db      	b.n	80029ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002836:	4b73      	ldr	r3, [pc, #460]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x208>)
 8002838:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800283a:	e0d8      	b.n	80029ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800283c:	4b6f      	ldr	r3, [pc, #444]	; (80029fc <HAL_RCC_GetSysClockFreq+0x200>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002844:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002846:	4b6d      	ldr	r3, [pc, #436]	; (80029fc <HAL_RCC_GetSysClockFreq+0x200>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d063      	beq.n	800291a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002852:	4b6a      	ldr	r3, [pc, #424]	; (80029fc <HAL_RCC_GetSysClockFreq+0x200>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	099b      	lsrs	r3, r3, #6
 8002858:	2200      	movs	r2, #0
 800285a:	63bb      	str	r3, [r7, #56]	; 0x38
 800285c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800285e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002864:	633b      	str	r3, [r7, #48]	; 0x30
 8002866:	2300      	movs	r3, #0
 8002868:	637b      	str	r3, [r7, #52]	; 0x34
 800286a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800286e:	4622      	mov	r2, r4
 8002870:	462b      	mov	r3, r5
 8002872:	f04f 0000 	mov.w	r0, #0
 8002876:	f04f 0100 	mov.w	r1, #0
 800287a:	0159      	lsls	r1, r3, #5
 800287c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002880:	0150      	lsls	r0, r2, #5
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	4621      	mov	r1, r4
 8002888:	1a51      	subs	r1, r2, r1
 800288a:	6139      	str	r1, [r7, #16]
 800288c:	4629      	mov	r1, r5
 800288e:	eb63 0301 	sbc.w	r3, r3, r1
 8002892:	617b      	str	r3, [r7, #20]
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	f04f 0300 	mov.w	r3, #0
 800289c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028a0:	4659      	mov	r1, fp
 80028a2:	018b      	lsls	r3, r1, #6
 80028a4:	4651      	mov	r1, sl
 80028a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028aa:	4651      	mov	r1, sl
 80028ac:	018a      	lsls	r2, r1, #6
 80028ae:	4651      	mov	r1, sl
 80028b0:	ebb2 0801 	subs.w	r8, r2, r1
 80028b4:	4659      	mov	r1, fp
 80028b6:	eb63 0901 	sbc.w	r9, r3, r1
 80028ba:	f04f 0200 	mov.w	r2, #0
 80028be:	f04f 0300 	mov.w	r3, #0
 80028c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028ce:	4690      	mov	r8, r2
 80028d0:	4699      	mov	r9, r3
 80028d2:	4623      	mov	r3, r4
 80028d4:	eb18 0303 	adds.w	r3, r8, r3
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	462b      	mov	r3, r5
 80028dc:	eb49 0303 	adc.w	r3, r9, r3
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	f04f 0300 	mov.w	r3, #0
 80028ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028ee:	4629      	mov	r1, r5
 80028f0:	024b      	lsls	r3, r1, #9
 80028f2:	4621      	mov	r1, r4
 80028f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028f8:	4621      	mov	r1, r4
 80028fa:	024a      	lsls	r2, r1, #9
 80028fc:	4610      	mov	r0, r2
 80028fe:	4619      	mov	r1, r3
 8002900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002902:	2200      	movs	r2, #0
 8002904:	62bb      	str	r3, [r7, #40]	; 0x28
 8002906:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002908:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800290c:	f7fd fc98 	bl	8000240 <__aeabi_uldivmod>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4613      	mov	r3, r2
 8002916:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002918:	e058      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800291a:	4b38      	ldr	r3, [pc, #224]	; (80029fc <HAL_RCC_GetSysClockFreq+0x200>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	099b      	lsrs	r3, r3, #6
 8002920:	2200      	movs	r2, #0
 8002922:	4618      	mov	r0, r3
 8002924:	4611      	mov	r1, r2
 8002926:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800292a:	623b      	str	r3, [r7, #32]
 800292c:	2300      	movs	r3, #0
 800292e:	627b      	str	r3, [r7, #36]	; 0x24
 8002930:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002934:	4642      	mov	r2, r8
 8002936:	464b      	mov	r3, r9
 8002938:	f04f 0000 	mov.w	r0, #0
 800293c:	f04f 0100 	mov.w	r1, #0
 8002940:	0159      	lsls	r1, r3, #5
 8002942:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002946:	0150      	lsls	r0, r2, #5
 8002948:	4602      	mov	r2, r0
 800294a:	460b      	mov	r3, r1
 800294c:	4641      	mov	r1, r8
 800294e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002952:	4649      	mov	r1, r9
 8002954:	eb63 0b01 	sbc.w	fp, r3, r1
 8002958:	f04f 0200 	mov.w	r2, #0
 800295c:	f04f 0300 	mov.w	r3, #0
 8002960:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002964:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002968:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800296c:	ebb2 040a 	subs.w	r4, r2, sl
 8002970:	eb63 050b 	sbc.w	r5, r3, fp
 8002974:	f04f 0200 	mov.w	r2, #0
 8002978:	f04f 0300 	mov.w	r3, #0
 800297c:	00eb      	lsls	r3, r5, #3
 800297e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002982:	00e2      	lsls	r2, r4, #3
 8002984:	4614      	mov	r4, r2
 8002986:	461d      	mov	r5, r3
 8002988:	4643      	mov	r3, r8
 800298a:	18e3      	adds	r3, r4, r3
 800298c:	603b      	str	r3, [r7, #0]
 800298e:	464b      	mov	r3, r9
 8002990:	eb45 0303 	adc.w	r3, r5, r3
 8002994:	607b      	str	r3, [r7, #4]
 8002996:	f04f 0200 	mov.w	r2, #0
 800299a:	f04f 0300 	mov.w	r3, #0
 800299e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029a2:	4629      	mov	r1, r5
 80029a4:	028b      	lsls	r3, r1, #10
 80029a6:	4621      	mov	r1, r4
 80029a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029ac:	4621      	mov	r1, r4
 80029ae:	028a      	lsls	r2, r1, #10
 80029b0:	4610      	mov	r0, r2
 80029b2:	4619      	mov	r1, r3
 80029b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029b6:	2200      	movs	r2, #0
 80029b8:	61bb      	str	r3, [r7, #24]
 80029ba:	61fa      	str	r2, [r7, #28]
 80029bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029c0:	f7fd fc3e 	bl	8000240 <__aeabi_uldivmod>
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	4613      	mov	r3, r2
 80029ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80029cc:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <HAL_RCC_GetSysClockFreq+0x200>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	0c1b      	lsrs	r3, r3, #16
 80029d2:	f003 0303 	and.w	r3, r3, #3
 80029d6:	3301      	adds	r3, #1
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80029dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029e6:	e002      	b.n	80029ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029e8:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x204>)
 80029ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3750      	adds	r7, #80	; 0x50
 80029f4:	46bd      	mov	sp, r7
 80029f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029fa:	bf00      	nop
 80029fc:	40023800 	.word	0x40023800
 8002a00:	00f42400 	.word	0x00f42400
 8002a04:	007a1200 	.word	0x007a1200

08002a08 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a0c:	4b03      	ldr	r3, [pc, #12]	; (8002a1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	20000000 	.word	0x20000000

08002a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a24:	f7ff fff0 	bl	8002a08 <HAL_RCC_GetHCLKFreq>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	0a9b      	lsrs	r3, r3, #10
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	4903      	ldr	r1, [pc, #12]	; (8002a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a36:	5ccb      	ldrb	r3, [r1, r3]
 8002a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40023800 	.word	0x40023800
 8002a44:	08007748 	.word	0x08007748

08002a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a4c:	f7ff ffdc 	bl	8002a08 <HAL_RCC_GetHCLKFreq>
 8002a50:	4602      	mov	r2, r0
 8002a52:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	0b5b      	lsrs	r3, r3, #13
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	4903      	ldr	r1, [pc, #12]	; (8002a6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a5e:	5ccb      	ldrb	r3, [r1, r3]
 8002a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	08007748 	.word	0x08007748

08002a70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b088      	sub	sp, #32
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002a80:	2300      	movs	r3, #0
 8002a82:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d012      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a98:	4b69      	ldr	r3, [pc, #420]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	4a68      	ldr	r2, [pc, #416]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a9e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002aa2:	6093      	str	r3, [r2, #8]
 8002aa4:	4b66      	ldr	r3, [pc, #408]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aac:	4964      	ldr	r1, [pc, #400]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002aba:	2301      	movs	r3, #1
 8002abc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d017      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002aca:	4b5d      	ldr	r3, [pc, #372]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ad0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad8:	4959      	ldr	r1, [pc, #356]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ae8:	d101      	bne.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002aea:	2301      	movs	r3, #1
 8002aec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002af6:	2301      	movs	r3, #1
 8002af8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d017      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b06:	4b4e      	ldr	r3, [pc, #312]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b0c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	494a      	ldr	r1, [pc, #296]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b24:	d101      	bne.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b26:	2301      	movs	r3, #1
 8002b28:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002b32:	2301      	movs	r3, #1
 8002b34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002b42:	2301      	movs	r3, #1
 8002b44:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0320 	and.w	r3, r3, #32
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 808b 	beq.w	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b54:	4b3a      	ldr	r3, [pc, #232]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b58:	4a39      	ldr	r2, [pc, #228]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b5e:	6413      	str	r3, [r2, #64]	; 0x40
 8002b60:	4b37      	ldr	r3, [pc, #220]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b6c:	4b35      	ldr	r3, [pc, #212]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a34      	ldr	r2, [pc, #208]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b78:	f7fe fa3e 	bl	8000ff8 <HAL_GetTick>
 8002b7c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b80:	f7fe fa3a 	bl	8000ff8 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b64      	cmp	r3, #100	; 0x64
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e38f      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b92:	4b2c      	ldr	r3, [pc, #176]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0f0      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b9e:	4b28      	ldr	r3, [pc, #160]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d035      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d02e      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bbc:	4b20      	ldr	r3, [pc, #128]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bc4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bc6:	4b1e      	ldr	r3, [pc, #120]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bca:	4a1d      	ldr	r2, [pc, #116]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bd2:	4b1b      	ldr	r3, [pc, #108]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd6:	4a1a      	ldr	r2, [pc, #104]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bdc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002bde:	4a18      	ldr	r2, [pc, #96]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002be4:	4b16      	ldr	r3, [pc, #88]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d114      	bne.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7fe fa02 	bl	8000ff8 <HAL_GetTick>
 8002bf4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf6:	e00a      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bf8:	f7fe f9fe 	bl	8000ff8 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e351      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c0e:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0ee      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c26:	d111      	bne.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c28:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c34:	4b04      	ldr	r3, [pc, #16]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c36:	400b      	ands	r3, r1
 8002c38:	4901      	ldr	r1, [pc, #4]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	608b      	str	r3, [r1, #8]
 8002c3e:	e00b      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002c40:	40023800 	.word	0x40023800
 8002c44:	40007000 	.word	0x40007000
 8002c48:	0ffffcff 	.word	0x0ffffcff
 8002c4c:	4bac      	ldr	r3, [pc, #688]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	4aab      	ldr	r2, [pc, #684]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c52:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002c56:	6093      	str	r3, [r2, #8]
 8002c58:	4ba9      	ldr	r3, [pc, #676]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c64:	49a6      	ldr	r1, [pc, #664]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0310 	and.w	r3, r3, #16
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d010      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c76:	4ba2      	ldr	r3, [pc, #648]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c7c:	4aa0      	ldr	r2, [pc, #640]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c82:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002c86:	4b9e      	ldr	r3, [pc, #632]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c88:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c90:	499b      	ldr	r1, [pc, #620]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00a      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ca4:	4b96      	ldr	r3, [pc, #600]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002caa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cb2:	4993      	ldr	r1, [pc, #588]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00a      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cc6:	4b8e      	ldr	r3, [pc, #568]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ccc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cd4:	498a      	ldr	r1, [pc, #552]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00a      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ce8:	4b85      	ldr	r3, [pc, #532]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cf6:	4982      	ldr	r1, [pc, #520]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00a      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d0a:	4b7d      	ldr	r3, [pc, #500]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d18:	4979      	ldr	r1, [pc, #484]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00a      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d2c:	4b74      	ldr	r3, [pc, #464]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d32:	f023 0203 	bic.w	r2, r3, #3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3a:	4971      	ldr	r1, [pc, #452]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00a      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d4e:	4b6c      	ldr	r3, [pc, #432]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d54:	f023 020c 	bic.w	r2, r3, #12
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d5c:	4968      	ldr	r1, [pc, #416]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00a      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d70:	4b63      	ldr	r3, [pc, #396]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d76:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7e:	4960      	ldr	r1, [pc, #384]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00a      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d92:	4b5b      	ldr	r3, [pc, #364]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d98:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002da0:	4957      	ldr	r1, [pc, #348]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00a      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002db4:	4b52      	ldr	r3, [pc, #328]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc2:	494f      	ldr	r1, [pc, #316]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00a      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002dd6:	4b4a      	ldr	r3, [pc, #296]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ddc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de4:	4946      	ldr	r1, [pc, #280]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00a      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002df8:	4b41      	ldr	r3, [pc, #260]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e06:	493e      	ldr	r1, [pc, #248]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00a      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e1a:	4b39      	ldr	r3, [pc, #228]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e20:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e28:	4935      	ldr	r1, [pc, #212]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00a      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e3c:	4b30      	ldr	r3, [pc, #192]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e42:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e4a:	492d      	ldr	r1, [pc, #180]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d011      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e5e:	4b28      	ldr	r3, [pc, #160]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e64:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e6c:	4924      	ldr	r1, [pc, #144]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e7c:	d101      	bne.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e9e:	4b18      	ldr	r3, [pc, #96]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eac:	4914      	ldr	r1, [pc, #80]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00b      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ec0:	4b0f      	ldr	r3, [pc, #60]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ed0:	490b      	ldr	r1, [pc, #44]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00f      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002ee4:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eea:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ef4:	4902      	ldr	r1, [pc, #8]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002efc:	e002      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002efe:	bf00      	nop
 8002f00:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00b      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f10:	4b8a      	ldr	r3, [pc, #552]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f16:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f20:	4986      	ldr	r1, [pc, #536]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00b      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002f34:	4b81      	ldr	r3, [pc, #516]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f3a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f44:	497d      	ldr	r1, [pc, #500]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d006      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 80d6 	beq.w	800310c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f60:	4b76      	ldr	r3, [pc, #472]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a75      	ldr	r2, [pc, #468]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f6c:	f7fe f844 	bl	8000ff8 <HAL_GetTick>
 8002f70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f72:	e008      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f74:	f7fe f840 	bl	8000ff8 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b64      	cmp	r3, #100	; 0x64
 8002f80:	d901      	bls.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e195      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f86:	4b6d      	ldr	r3, [pc, #436]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1f0      	bne.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d021      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d11d      	bne.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002fa6:	4b65      	ldr	r3, [pc, #404]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fac:	0c1b      	lsrs	r3, r3, #16
 8002fae:	f003 0303 	and.w	r3, r3, #3
 8002fb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002fb4:	4b61      	ldr	r3, [pc, #388]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fba:	0e1b      	lsrs	r3, r3, #24
 8002fbc:	f003 030f 	and.w	r3, r3, #15
 8002fc0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	019a      	lsls	r2, r3, #6
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	041b      	lsls	r3, r3, #16
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	061b      	lsls	r3, r3, #24
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	071b      	lsls	r3, r3, #28
 8002fda:	4958      	ldr	r1, [pc, #352]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d004      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ff6:	d00a      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003000:	2b00      	cmp	r3, #0
 8003002:	d02e      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003008:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800300c:	d129      	bne.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800300e:	4b4b      	ldr	r3, [pc, #300]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003010:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003014:	0c1b      	lsrs	r3, r3, #16
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800301c:	4b47      	ldr	r3, [pc, #284]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800301e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003022:	0f1b      	lsrs	r3, r3, #28
 8003024:	f003 0307 	and.w	r3, r3, #7
 8003028:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	019a      	lsls	r2, r3, #6
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	041b      	lsls	r3, r3, #16
 8003034:	431a      	orrs	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	061b      	lsls	r3, r3, #24
 800303c:	431a      	orrs	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	071b      	lsls	r3, r3, #28
 8003042:	493e      	ldr	r1, [pc, #248]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003044:	4313      	orrs	r3, r2
 8003046:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800304a:	4b3c      	ldr	r3, [pc, #240]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800304c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003050:	f023 021f 	bic.w	r2, r3, #31
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003058:	3b01      	subs	r3, #1
 800305a:	4938      	ldr	r1, [pc, #224]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800305c:	4313      	orrs	r3, r2
 800305e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d01d      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800306e:	4b33      	ldr	r3, [pc, #204]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003070:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003074:	0e1b      	lsrs	r3, r3, #24
 8003076:	f003 030f 	and.w	r3, r3, #15
 800307a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800307c:	4b2f      	ldr	r3, [pc, #188]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800307e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003082:	0f1b      	lsrs	r3, r3, #28
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	019a      	lsls	r2, r3, #6
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	041b      	lsls	r3, r3, #16
 8003096:	431a      	orrs	r2, r3
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	061b      	lsls	r3, r3, #24
 800309c:	431a      	orrs	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	071b      	lsls	r3, r3, #28
 80030a2:	4926      	ldr	r1, [pc, #152]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d011      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	019a      	lsls	r2, r3, #6
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	041b      	lsls	r3, r3, #16
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	061b      	lsls	r3, r3, #24
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	071b      	lsls	r3, r3, #28
 80030d2:	491a      	ldr	r1, [pc, #104]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030da:	4b18      	ldr	r3, [pc, #96]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a17      	ldr	r2, [pc, #92]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030e6:	f7fd ff87 	bl	8000ff8 <HAL_GetTick>
 80030ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030ec:	e008      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030ee:	f7fd ff83 	bl	8000ff8 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b64      	cmp	r3, #100	; 0x64
 80030fa:	d901      	bls.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e0d8      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003100:	4b0e      	ldr	r3, [pc, #56]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0f0      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	2b01      	cmp	r3, #1
 8003110:	f040 80ce 	bne.w	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003114:	4b09      	ldr	r3, [pc, #36]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a08      	ldr	r2, [pc, #32]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800311a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800311e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003120:	f7fd ff6a 	bl	8000ff8 <HAL_GetTick>
 8003124:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003126:	e00b      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003128:	f7fd ff66 	bl	8000ff8 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b64      	cmp	r3, #100	; 0x64
 8003134:	d904      	bls.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e0bb      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800313a:	bf00      	nop
 800313c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003140:	4b5e      	ldr	r3, [pc, #376]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003148:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800314c:	d0ec      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315e:	2b00      	cmp	r3, #0
 8003160:	d009      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800316a:	2b00      	cmp	r3, #0
 800316c:	d02e      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	2b00      	cmp	r3, #0
 8003174:	d12a      	bne.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003176:	4b51      	ldr	r3, [pc, #324]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317c:	0c1b      	lsrs	r3, r3, #16
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003184:	4b4d      	ldr	r3, [pc, #308]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318a:	0f1b      	lsrs	r3, r3, #28
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	019a      	lsls	r2, r3, #6
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	041b      	lsls	r3, r3, #16
 800319c:	431a      	orrs	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	061b      	lsls	r3, r3, #24
 80031a4:	431a      	orrs	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	071b      	lsls	r3, r3, #28
 80031aa:	4944      	ldr	r1, [pc, #272]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80031b2:	4b42      	ldr	r3, [pc, #264]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031b8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c0:	3b01      	subs	r3, #1
 80031c2:	021b      	lsls	r3, r3, #8
 80031c4:	493d      	ldr	r1, [pc, #244]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d022      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031e0:	d11d      	bne.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031e2:	4b36      	ldr	r3, [pc, #216]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e8:	0e1b      	lsrs	r3, r3, #24
 80031ea:	f003 030f 	and.w	r3, r3, #15
 80031ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031f0:	4b32      	ldr	r3, [pc, #200]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f6:	0f1b      	lsrs	r3, r3, #28
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	019a      	lsls	r2, r3, #6
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	041b      	lsls	r3, r3, #16
 800320a:	431a      	orrs	r2, r3
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	061b      	lsls	r3, r3, #24
 8003210:	431a      	orrs	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	071b      	lsls	r3, r3, #28
 8003216:	4929      	ldr	r1, [pc, #164]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003218:	4313      	orrs	r3, r2
 800321a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b00      	cmp	r3, #0
 8003228:	d028      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800322a:	4b24      	ldr	r3, [pc, #144]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800322c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003230:	0e1b      	lsrs	r3, r3, #24
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003238:	4b20      	ldr	r3, [pc, #128]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800323a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323e:	0c1b      	lsrs	r3, r3, #16
 8003240:	f003 0303 	and.w	r3, r3, #3
 8003244:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	019a      	lsls	r2, r3, #6
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	041b      	lsls	r3, r3, #16
 8003250:	431a      	orrs	r2, r3
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	061b      	lsls	r3, r3, #24
 8003256:	431a      	orrs	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	69db      	ldr	r3, [r3, #28]
 800325c:	071b      	lsls	r3, r3, #28
 800325e:	4917      	ldr	r1, [pc, #92]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003260:	4313      	orrs	r3, r2
 8003262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003266:	4b15      	ldr	r3, [pc, #84]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003268:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800326c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003274:	4911      	ldr	r1, [pc, #68]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003276:	4313      	orrs	r3, r2
 8003278:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800327c:	4b0f      	ldr	r3, [pc, #60]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a0e      	ldr	r2, [pc, #56]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003286:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003288:	f7fd feb6 	bl	8000ff8 <HAL_GetTick>
 800328c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003290:	f7fd feb2 	bl	8000ff8 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b64      	cmp	r3, #100	; 0x64
 800329c:	d901      	bls.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e007      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032a2:	4b06      	ldr	r3, [pc, #24]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032ae:	d1ef      	bne.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3720      	adds	r7, #32
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40023800 	.word	0x40023800

080032c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e040      	b.n	8003354 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d106      	bne.n	80032e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7fd fc62 	bl	8000bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2224      	movs	r2, #36	; 0x24
 80032ec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0201 	bic.w	r2, r2, #1
 80032fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 fb3e 	bl	8003980 <UART_SetConfig>
 8003304:	4603      	mov	r3, r0
 8003306:	2b01      	cmp	r3, #1
 8003308:	d101      	bne.n	800330e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e022      	b.n	8003354 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	2b00      	cmp	r3, #0
 8003314:	d002      	beq.n	800331c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 fd96 	bl	8003e48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800332a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800333a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0201 	orr.w	r2, r2, #1
 800334a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 fe1d 	bl	8003f8c <UART_CheckIdleState>
 8003352:	4603      	mov	r3, r0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b0ba      	sub	sp, #232	; 0xe8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003382:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003386:	f640 030f 	movw	r3, #2063	; 0x80f
 800338a:	4013      	ands	r3, r2
 800338c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003390:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003394:	2b00      	cmp	r3, #0
 8003396:	d115      	bne.n	80033c4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800339c:	f003 0320 	and.w	r3, r3, #32
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00f      	beq.n	80033c4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80033a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033a8:	f003 0320 	and.w	r3, r3, #32
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d009      	beq.n	80033c4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 82ac 	beq.w	8003912 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	4798      	blx	r3
      }
      return;
 80033c2:	e2a6      	b.n	8003912 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80033c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 8117 	beq.w	80035fc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80033ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d106      	bne.n	80033e8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80033da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80033de:	4b85      	ldr	r3, [pc, #532]	; (80035f4 <HAL_UART_IRQHandler+0x298>)
 80033e0:	4013      	ands	r3, r2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 810a 	beq.w	80035fc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80033e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d011      	beq.n	8003418 <HAL_UART_IRQHandler+0xbc>
 80033f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00b      	beq.n	8003418 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2201      	movs	r2, #1
 8003406:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800340e:	f043 0201 	orr.w	r2, r3, #1
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d011      	beq.n	8003448 <HAL_UART_IRQHandler+0xec>
 8003424:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00b      	beq.n	8003448 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2202      	movs	r2, #2
 8003436:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800343e:	f043 0204 	orr.w	r2, r3, #4
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b00      	cmp	r3, #0
 8003452:	d011      	beq.n	8003478 <HAL_UART_IRQHandler+0x11c>
 8003454:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00b      	beq.n	8003478 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2204      	movs	r2, #4
 8003466:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800346e:	f043 0202 	orr.w	r2, r3, #2
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800347c:	f003 0308 	and.w	r3, r3, #8
 8003480:	2b00      	cmp	r3, #0
 8003482:	d017      	beq.n	80034b4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003488:	f003 0320 	and.w	r3, r3, #32
 800348c:	2b00      	cmp	r3, #0
 800348e:	d105      	bne.n	800349c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003490:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003494:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00b      	beq.n	80034b4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2208      	movs	r2, #8
 80034a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034aa:	f043 0208 	orr.w	r2, r3, #8
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80034b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d012      	beq.n	80034e6 <HAL_UART_IRQHandler+0x18a>
 80034c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00c      	beq.n	80034e6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034dc:	f043 0220 	orr.w	r2, r3, #32
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 8212 	beq.w	8003916 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80034f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034f6:	f003 0320 	and.w	r3, r3, #32
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00d      	beq.n	800351a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80034fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003502:	f003 0320 	and.w	r3, r3, #32
 8003506:	2b00      	cmp	r3, #0
 8003508:	d007      	beq.n	800351a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003520:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352e:	2b40      	cmp	r3, #64	; 0x40
 8003530:	d005      	beq.n	800353e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003532:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003536:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800353a:	2b00      	cmp	r3, #0
 800353c:	d04f      	beq.n	80035de <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 fe37 	bl	80041b2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354e:	2b40      	cmp	r3, #64	; 0x40
 8003550:	d141      	bne.n	80035d6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	3308      	adds	r3, #8
 8003558:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800355c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003560:	e853 3f00 	ldrex	r3, [r3]
 8003564:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003568:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800356c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003570:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	3308      	adds	r3, #8
 800357a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800357e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003582:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003586:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800358a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800358e:	e841 2300 	strex	r3, r2, [r1]
 8003592:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003596:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1d9      	bne.n	8003552 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d013      	beq.n	80035ce <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035aa:	4a13      	ldr	r2, [pc, #76]	; (80035f8 <HAL_UART_IRQHandler+0x29c>)
 80035ac:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7fd fed1 	bl	800135a <HAL_DMA_Abort_IT>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d017      	beq.n	80035ee <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80035c8:	4610      	mov	r0, r2
 80035ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035cc:	e00f      	b.n	80035ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f9b6 	bl	8003940 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035d4:	e00b      	b.n	80035ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f9b2 	bl	8003940 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035dc:	e007      	b.n	80035ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f9ae 	bl	8003940 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80035ec:	e193      	b.n	8003916 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ee:	bf00      	nop
    return;
 80035f0:	e191      	b.n	8003916 <HAL_UART_IRQHandler+0x5ba>
 80035f2:	bf00      	nop
 80035f4:	04000120 	.word	0x04000120
 80035f8:	0800427b 	.word	0x0800427b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003600:	2b01      	cmp	r3, #1
 8003602:	f040 814c 	bne.w	800389e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800360a:	f003 0310 	and.w	r3, r3, #16
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 8145 	beq.w	800389e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003618:	f003 0310 	and.w	r3, r3, #16
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 813e 	beq.w	800389e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2210      	movs	r2, #16
 8003628:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003634:	2b40      	cmp	r3, #64	; 0x40
 8003636:	f040 80b6 	bne.w	80037a6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003646:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800364a:	2b00      	cmp	r3, #0
 800364c:	f000 8165 	beq.w	800391a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003656:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800365a:	429a      	cmp	r2, r3
 800365c:	f080 815d 	bcs.w	800391a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003666:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003674:	f000 8086 	beq.w	8003784 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003680:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003684:	e853 3f00 	ldrex	r3, [r3]
 8003688:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800368c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003694:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	461a      	mov	r2, r3
 800369e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80036a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80036a6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80036ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80036b2:	e841 2300 	strex	r3, r2, [r1]
 80036b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80036ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1da      	bne.n	8003678 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	3308      	adds	r3, #8
 80036c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036cc:	e853 3f00 	ldrex	r3, [r3]
 80036d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80036d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036d4:	f023 0301 	bic.w	r3, r3, #1
 80036d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	3308      	adds	r3, #8
 80036e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80036e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80036ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80036ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80036f2:	e841 2300 	strex	r3, r2, [r1]
 80036f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80036f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1e1      	bne.n	80036c2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	3308      	adds	r3, #8
 8003704:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003706:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003708:	e853 3f00 	ldrex	r3, [r3]
 800370c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800370e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003710:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003714:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	3308      	adds	r3, #8
 800371e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003722:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003724:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003726:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003728:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800372a:	e841 2300 	strex	r3, r2, [r1]
 800372e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003730:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1e3      	bne.n	80036fe <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2220      	movs	r2, #32
 800373a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800374c:	e853 3f00 	ldrex	r3, [r3]
 8003750:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003754:	f023 0310 	bic.w	r3, r3, #16
 8003758:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	461a      	mov	r2, r3
 8003762:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003766:	65bb      	str	r3, [r7, #88]	; 0x58
 8003768:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800376c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800376e:	e841 2300 	strex	r3, r2, [r1]
 8003772:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003774:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1e4      	bne.n	8003744 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800377e:	4618      	mov	r0, r3
 8003780:	f7fd fd7b 	bl	800127a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2202      	movs	r2, #2
 8003788:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003796:	b29b      	uxth	r3, r3
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	b29b      	uxth	r3, r3
 800379c:	4619      	mov	r1, r3
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f8d8 	bl	8003954 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80037a4:	e0b9      	b.n	800391a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 80ab 	beq.w	800391e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80037c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 80a6 	beq.w	800391e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037da:	e853 3f00 	ldrex	r3, [r3]
 80037de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80037e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	461a      	mov	r2, r3
 80037f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80037f4:	647b      	str	r3, [r7, #68]	; 0x44
 80037f6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037fc:	e841 2300 	strex	r3, r2, [r1]
 8003800:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1e4      	bne.n	80037d2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	3308      	adds	r3, #8
 800380e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	e853 3f00 	ldrex	r3, [r3]
 8003816:	623b      	str	r3, [r7, #32]
   return(result);
 8003818:	6a3b      	ldr	r3, [r7, #32]
 800381a:	f023 0301 	bic.w	r3, r3, #1
 800381e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	3308      	adds	r3, #8
 8003828:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800382c:	633a      	str	r2, [r7, #48]	; 0x30
 800382e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003830:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003832:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003834:	e841 2300 	strex	r3, r2, [r1]
 8003838:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800383a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1e3      	bne.n	8003808 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2220      	movs	r2, #32
 8003844:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	e853 3f00 	ldrex	r3, [r3]
 8003860:	60fb      	str	r3, [r7, #12]
   return(result);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f023 0310 	bic.w	r3, r3, #16
 8003868:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	461a      	mov	r2, r3
 8003872:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003876:	61fb      	str	r3, [r7, #28]
 8003878:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387a:	69b9      	ldr	r1, [r7, #24]
 800387c:	69fa      	ldr	r2, [r7, #28]
 800387e:	e841 2300 	strex	r3, r2, [r1]
 8003882:	617b      	str	r3, [r7, #20]
   return(result);
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1e4      	bne.n	8003854 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2202      	movs	r2, #2
 800388e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003890:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003894:	4619      	mov	r1, r3
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f85c 	bl	8003954 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800389c:	e03f      	b.n	800391e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800389e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00e      	beq.n	80038c8 <HAL_UART_IRQHandler+0x56c>
 80038aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d008      	beq.n	80038c8 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80038be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 f853 	bl	800396c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80038c6:	e02d      	b.n	8003924 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80038c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00e      	beq.n	80038f2 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80038d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d008      	beq.n	80038f2 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d01c      	beq.n	8003922 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	4798      	blx	r3
    }
    return;
 80038f0:	e017      	b.n	8003922 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80038f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d012      	beq.n	8003924 <HAL_UART_IRQHandler+0x5c8>
 80038fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00c      	beq.n	8003924 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 fccb 	bl	80042a6 <UART_EndTransmit_IT>
    return;
 8003910:	e008      	b.n	8003924 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003912:	bf00      	nop
 8003914:	e006      	b.n	8003924 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003916:	bf00      	nop
 8003918:	e004      	b.n	8003924 <HAL_UART_IRQHandler+0x5c8>
      return;
 800391a:	bf00      	nop
 800391c:	e002      	b.n	8003924 <HAL_UART_IRQHandler+0x5c8>
      return;
 800391e:	bf00      	nop
 8003920:	e000      	b.n	8003924 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003922:	bf00      	nop
  }

}
 8003924:	37e8      	adds	r7, #232	; 0xe8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop

0800392c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	460b      	mov	r3, r1
 800395e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b088      	sub	sp, #32
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003988:	2300      	movs	r3, #0
 800398a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	431a      	orrs	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	4ba6      	ldr	r3, [pc, #664]	; (8003c44 <UART_SetConfig+0x2c4>)
 80039ac:	4013      	ands	r3, r2
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6812      	ldr	r2, [r2, #0]
 80039b2:	6979      	ldr	r1, [r7, #20]
 80039b4:	430b      	orrs	r3, r1
 80039b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	4313      	orrs	r3, r2
 80039dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a94      	ldr	r2, [pc, #592]	; (8003c48 <UART_SetConfig+0x2c8>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d120      	bne.n	8003a3e <UART_SetConfig+0xbe>
 80039fc:	4b93      	ldr	r3, [pc, #588]	; (8003c4c <UART_SetConfig+0x2cc>)
 80039fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a02:	f003 0303 	and.w	r3, r3, #3
 8003a06:	2b03      	cmp	r3, #3
 8003a08:	d816      	bhi.n	8003a38 <UART_SetConfig+0xb8>
 8003a0a:	a201      	add	r2, pc, #4	; (adr r2, 8003a10 <UART_SetConfig+0x90>)
 8003a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a10:	08003a21 	.word	0x08003a21
 8003a14:	08003a2d 	.word	0x08003a2d
 8003a18:	08003a27 	.word	0x08003a27
 8003a1c:	08003a33 	.word	0x08003a33
 8003a20:	2301      	movs	r3, #1
 8003a22:	77fb      	strb	r3, [r7, #31]
 8003a24:	e150      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003a26:	2302      	movs	r3, #2
 8003a28:	77fb      	strb	r3, [r7, #31]
 8003a2a:	e14d      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003a2c:	2304      	movs	r3, #4
 8003a2e:	77fb      	strb	r3, [r7, #31]
 8003a30:	e14a      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003a32:	2308      	movs	r3, #8
 8003a34:	77fb      	strb	r3, [r7, #31]
 8003a36:	e147      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003a38:	2310      	movs	r3, #16
 8003a3a:	77fb      	strb	r3, [r7, #31]
 8003a3c:	e144      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a83      	ldr	r2, [pc, #524]	; (8003c50 <UART_SetConfig+0x2d0>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d132      	bne.n	8003aae <UART_SetConfig+0x12e>
 8003a48:	4b80      	ldr	r3, [pc, #512]	; (8003c4c <UART_SetConfig+0x2cc>)
 8003a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4e:	f003 030c 	and.w	r3, r3, #12
 8003a52:	2b0c      	cmp	r3, #12
 8003a54:	d828      	bhi.n	8003aa8 <UART_SetConfig+0x128>
 8003a56:	a201      	add	r2, pc, #4	; (adr r2, 8003a5c <UART_SetConfig+0xdc>)
 8003a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5c:	08003a91 	.word	0x08003a91
 8003a60:	08003aa9 	.word	0x08003aa9
 8003a64:	08003aa9 	.word	0x08003aa9
 8003a68:	08003aa9 	.word	0x08003aa9
 8003a6c:	08003a9d 	.word	0x08003a9d
 8003a70:	08003aa9 	.word	0x08003aa9
 8003a74:	08003aa9 	.word	0x08003aa9
 8003a78:	08003aa9 	.word	0x08003aa9
 8003a7c:	08003a97 	.word	0x08003a97
 8003a80:	08003aa9 	.word	0x08003aa9
 8003a84:	08003aa9 	.word	0x08003aa9
 8003a88:	08003aa9 	.word	0x08003aa9
 8003a8c:	08003aa3 	.word	0x08003aa3
 8003a90:	2300      	movs	r3, #0
 8003a92:	77fb      	strb	r3, [r7, #31]
 8003a94:	e118      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003a96:	2302      	movs	r3, #2
 8003a98:	77fb      	strb	r3, [r7, #31]
 8003a9a:	e115      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003a9c:	2304      	movs	r3, #4
 8003a9e:	77fb      	strb	r3, [r7, #31]
 8003aa0:	e112      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003aa2:	2308      	movs	r3, #8
 8003aa4:	77fb      	strb	r3, [r7, #31]
 8003aa6:	e10f      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003aa8:	2310      	movs	r3, #16
 8003aaa:	77fb      	strb	r3, [r7, #31]
 8003aac:	e10c      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a68      	ldr	r2, [pc, #416]	; (8003c54 <UART_SetConfig+0x2d4>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d120      	bne.n	8003afa <UART_SetConfig+0x17a>
 8003ab8:	4b64      	ldr	r3, [pc, #400]	; (8003c4c <UART_SetConfig+0x2cc>)
 8003aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003abe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ac2:	2b30      	cmp	r3, #48	; 0x30
 8003ac4:	d013      	beq.n	8003aee <UART_SetConfig+0x16e>
 8003ac6:	2b30      	cmp	r3, #48	; 0x30
 8003ac8:	d814      	bhi.n	8003af4 <UART_SetConfig+0x174>
 8003aca:	2b20      	cmp	r3, #32
 8003acc:	d009      	beq.n	8003ae2 <UART_SetConfig+0x162>
 8003ace:	2b20      	cmp	r3, #32
 8003ad0:	d810      	bhi.n	8003af4 <UART_SetConfig+0x174>
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <UART_SetConfig+0x15c>
 8003ad6:	2b10      	cmp	r3, #16
 8003ad8:	d006      	beq.n	8003ae8 <UART_SetConfig+0x168>
 8003ada:	e00b      	b.n	8003af4 <UART_SetConfig+0x174>
 8003adc:	2300      	movs	r3, #0
 8003ade:	77fb      	strb	r3, [r7, #31]
 8003ae0:	e0f2      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	77fb      	strb	r3, [r7, #31]
 8003ae6:	e0ef      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003ae8:	2304      	movs	r3, #4
 8003aea:	77fb      	strb	r3, [r7, #31]
 8003aec:	e0ec      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003aee:	2308      	movs	r3, #8
 8003af0:	77fb      	strb	r3, [r7, #31]
 8003af2:	e0e9      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003af4:	2310      	movs	r3, #16
 8003af6:	77fb      	strb	r3, [r7, #31]
 8003af8:	e0e6      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a56      	ldr	r2, [pc, #344]	; (8003c58 <UART_SetConfig+0x2d8>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d120      	bne.n	8003b46 <UART_SetConfig+0x1c6>
 8003b04:	4b51      	ldr	r3, [pc, #324]	; (8003c4c <UART_SetConfig+0x2cc>)
 8003b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b0e:	2bc0      	cmp	r3, #192	; 0xc0
 8003b10:	d013      	beq.n	8003b3a <UART_SetConfig+0x1ba>
 8003b12:	2bc0      	cmp	r3, #192	; 0xc0
 8003b14:	d814      	bhi.n	8003b40 <UART_SetConfig+0x1c0>
 8003b16:	2b80      	cmp	r3, #128	; 0x80
 8003b18:	d009      	beq.n	8003b2e <UART_SetConfig+0x1ae>
 8003b1a:	2b80      	cmp	r3, #128	; 0x80
 8003b1c:	d810      	bhi.n	8003b40 <UART_SetConfig+0x1c0>
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <UART_SetConfig+0x1a8>
 8003b22:	2b40      	cmp	r3, #64	; 0x40
 8003b24:	d006      	beq.n	8003b34 <UART_SetConfig+0x1b4>
 8003b26:	e00b      	b.n	8003b40 <UART_SetConfig+0x1c0>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	77fb      	strb	r3, [r7, #31]
 8003b2c:	e0cc      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	77fb      	strb	r3, [r7, #31]
 8003b32:	e0c9      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003b34:	2304      	movs	r3, #4
 8003b36:	77fb      	strb	r3, [r7, #31]
 8003b38:	e0c6      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003b3a:	2308      	movs	r3, #8
 8003b3c:	77fb      	strb	r3, [r7, #31]
 8003b3e:	e0c3      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003b40:	2310      	movs	r3, #16
 8003b42:	77fb      	strb	r3, [r7, #31]
 8003b44:	e0c0      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a44      	ldr	r2, [pc, #272]	; (8003c5c <UART_SetConfig+0x2dc>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d125      	bne.n	8003b9c <UART_SetConfig+0x21c>
 8003b50:	4b3e      	ldr	r3, [pc, #248]	; (8003c4c <UART_SetConfig+0x2cc>)
 8003b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b5e:	d017      	beq.n	8003b90 <UART_SetConfig+0x210>
 8003b60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b64:	d817      	bhi.n	8003b96 <UART_SetConfig+0x216>
 8003b66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b6a:	d00b      	beq.n	8003b84 <UART_SetConfig+0x204>
 8003b6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b70:	d811      	bhi.n	8003b96 <UART_SetConfig+0x216>
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <UART_SetConfig+0x1fe>
 8003b76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b7a:	d006      	beq.n	8003b8a <UART_SetConfig+0x20a>
 8003b7c:	e00b      	b.n	8003b96 <UART_SetConfig+0x216>
 8003b7e:	2300      	movs	r3, #0
 8003b80:	77fb      	strb	r3, [r7, #31]
 8003b82:	e0a1      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003b84:	2302      	movs	r3, #2
 8003b86:	77fb      	strb	r3, [r7, #31]
 8003b88:	e09e      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003b8a:	2304      	movs	r3, #4
 8003b8c:	77fb      	strb	r3, [r7, #31]
 8003b8e:	e09b      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003b90:	2308      	movs	r3, #8
 8003b92:	77fb      	strb	r3, [r7, #31]
 8003b94:	e098      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003b96:	2310      	movs	r3, #16
 8003b98:	77fb      	strb	r3, [r7, #31]
 8003b9a:	e095      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a2f      	ldr	r2, [pc, #188]	; (8003c60 <UART_SetConfig+0x2e0>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d125      	bne.n	8003bf2 <UART_SetConfig+0x272>
 8003ba6:	4b29      	ldr	r3, [pc, #164]	; (8003c4c <UART_SetConfig+0x2cc>)
 8003ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003bb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bb4:	d017      	beq.n	8003be6 <UART_SetConfig+0x266>
 8003bb6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bba:	d817      	bhi.n	8003bec <UART_SetConfig+0x26c>
 8003bbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bc0:	d00b      	beq.n	8003bda <UART_SetConfig+0x25a>
 8003bc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bc6:	d811      	bhi.n	8003bec <UART_SetConfig+0x26c>
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <UART_SetConfig+0x254>
 8003bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bd0:	d006      	beq.n	8003be0 <UART_SetConfig+0x260>
 8003bd2:	e00b      	b.n	8003bec <UART_SetConfig+0x26c>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	77fb      	strb	r3, [r7, #31]
 8003bd8:	e076      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003bda:	2302      	movs	r3, #2
 8003bdc:	77fb      	strb	r3, [r7, #31]
 8003bde:	e073      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003be0:	2304      	movs	r3, #4
 8003be2:	77fb      	strb	r3, [r7, #31]
 8003be4:	e070      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003be6:	2308      	movs	r3, #8
 8003be8:	77fb      	strb	r3, [r7, #31]
 8003bea:	e06d      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003bec:	2310      	movs	r3, #16
 8003bee:	77fb      	strb	r3, [r7, #31]
 8003bf0:	e06a      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a1b      	ldr	r2, [pc, #108]	; (8003c64 <UART_SetConfig+0x2e4>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d138      	bne.n	8003c6e <UART_SetConfig+0x2ee>
 8003bfc:	4b13      	ldr	r3, [pc, #76]	; (8003c4c <UART_SetConfig+0x2cc>)
 8003bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c02:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003c06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c0a:	d017      	beq.n	8003c3c <UART_SetConfig+0x2bc>
 8003c0c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c10:	d82a      	bhi.n	8003c68 <UART_SetConfig+0x2e8>
 8003c12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c16:	d00b      	beq.n	8003c30 <UART_SetConfig+0x2b0>
 8003c18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c1c:	d824      	bhi.n	8003c68 <UART_SetConfig+0x2e8>
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d003      	beq.n	8003c2a <UART_SetConfig+0x2aa>
 8003c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c26:	d006      	beq.n	8003c36 <UART_SetConfig+0x2b6>
 8003c28:	e01e      	b.n	8003c68 <UART_SetConfig+0x2e8>
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	77fb      	strb	r3, [r7, #31]
 8003c2e:	e04b      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003c30:	2302      	movs	r3, #2
 8003c32:	77fb      	strb	r3, [r7, #31]
 8003c34:	e048      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003c36:	2304      	movs	r3, #4
 8003c38:	77fb      	strb	r3, [r7, #31]
 8003c3a:	e045      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003c3c:	2308      	movs	r3, #8
 8003c3e:	77fb      	strb	r3, [r7, #31]
 8003c40:	e042      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003c42:	bf00      	nop
 8003c44:	efff69f3 	.word	0xefff69f3
 8003c48:	40011000 	.word	0x40011000
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	40004400 	.word	0x40004400
 8003c54:	40004800 	.word	0x40004800
 8003c58:	40004c00 	.word	0x40004c00
 8003c5c:	40005000 	.word	0x40005000
 8003c60:	40011400 	.word	0x40011400
 8003c64:	40007800 	.word	0x40007800
 8003c68:	2310      	movs	r3, #16
 8003c6a:	77fb      	strb	r3, [r7, #31]
 8003c6c:	e02c      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a72      	ldr	r2, [pc, #456]	; (8003e3c <UART_SetConfig+0x4bc>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d125      	bne.n	8003cc4 <UART_SetConfig+0x344>
 8003c78:	4b71      	ldr	r3, [pc, #452]	; (8003e40 <UART_SetConfig+0x4c0>)
 8003c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003c82:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c86:	d017      	beq.n	8003cb8 <UART_SetConfig+0x338>
 8003c88:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c8c:	d817      	bhi.n	8003cbe <UART_SetConfig+0x33e>
 8003c8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c92:	d00b      	beq.n	8003cac <UART_SetConfig+0x32c>
 8003c94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c98:	d811      	bhi.n	8003cbe <UART_SetConfig+0x33e>
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d003      	beq.n	8003ca6 <UART_SetConfig+0x326>
 8003c9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ca2:	d006      	beq.n	8003cb2 <UART_SetConfig+0x332>
 8003ca4:	e00b      	b.n	8003cbe <UART_SetConfig+0x33e>
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	77fb      	strb	r3, [r7, #31]
 8003caa:	e00d      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003cac:	2302      	movs	r3, #2
 8003cae:	77fb      	strb	r3, [r7, #31]
 8003cb0:	e00a      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003cb2:	2304      	movs	r3, #4
 8003cb4:	77fb      	strb	r3, [r7, #31]
 8003cb6:	e007      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003cb8:	2308      	movs	r3, #8
 8003cba:	77fb      	strb	r3, [r7, #31]
 8003cbc:	e004      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003cbe:	2310      	movs	r3, #16
 8003cc0:	77fb      	strb	r3, [r7, #31]
 8003cc2:	e001      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003cc4:	2310      	movs	r3, #16
 8003cc6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cd0:	d15b      	bne.n	8003d8a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003cd2:	7ffb      	ldrb	r3, [r7, #31]
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d828      	bhi.n	8003d2a <UART_SetConfig+0x3aa>
 8003cd8:	a201      	add	r2, pc, #4	; (adr r2, 8003ce0 <UART_SetConfig+0x360>)
 8003cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cde:	bf00      	nop
 8003ce0:	08003d05 	.word	0x08003d05
 8003ce4:	08003d0d 	.word	0x08003d0d
 8003ce8:	08003d15 	.word	0x08003d15
 8003cec:	08003d2b 	.word	0x08003d2b
 8003cf0:	08003d1b 	.word	0x08003d1b
 8003cf4:	08003d2b 	.word	0x08003d2b
 8003cf8:	08003d2b 	.word	0x08003d2b
 8003cfc:	08003d2b 	.word	0x08003d2b
 8003d00:	08003d23 	.word	0x08003d23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d04:	f7fe fe8c 	bl	8002a20 <HAL_RCC_GetPCLK1Freq>
 8003d08:	61b8      	str	r0, [r7, #24]
        break;
 8003d0a:	e013      	b.n	8003d34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d0c:	f7fe fe9c 	bl	8002a48 <HAL_RCC_GetPCLK2Freq>
 8003d10:	61b8      	str	r0, [r7, #24]
        break;
 8003d12:	e00f      	b.n	8003d34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d14:	4b4b      	ldr	r3, [pc, #300]	; (8003e44 <UART_SetConfig+0x4c4>)
 8003d16:	61bb      	str	r3, [r7, #24]
        break;
 8003d18:	e00c      	b.n	8003d34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d1a:	f7fe fd6f 	bl	80027fc <HAL_RCC_GetSysClockFreq>
 8003d1e:	61b8      	str	r0, [r7, #24]
        break;
 8003d20:	e008      	b.n	8003d34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d26:	61bb      	str	r3, [r7, #24]
        break;
 8003d28:	e004      	b.n	8003d34 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	77bb      	strb	r3, [r7, #30]
        break;
 8003d32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d074      	beq.n	8003e24 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	005a      	lsls	r2, r3, #1
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	085b      	lsrs	r3, r3, #1
 8003d44:	441a      	add	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d4e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	2b0f      	cmp	r3, #15
 8003d54:	d916      	bls.n	8003d84 <UART_SetConfig+0x404>
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d5c:	d212      	bcs.n	8003d84 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	f023 030f 	bic.w	r3, r3, #15
 8003d66:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	085b      	lsrs	r3, r3, #1
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	f003 0307 	and.w	r3, r3, #7
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	89fb      	ldrh	r3, [r7, #14]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	89fa      	ldrh	r2, [r7, #14]
 8003d80:	60da      	str	r2, [r3, #12]
 8003d82:	e04f      	b.n	8003e24 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	77bb      	strb	r3, [r7, #30]
 8003d88:	e04c      	b.n	8003e24 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d8a:	7ffb      	ldrb	r3, [r7, #31]
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	d828      	bhi.n	8003de2 <UART_SetConfig+0x462>
 8003d90:	a201      	add	r2, pc, #4	; (adr r2, 8003d98 <UART_SetConfig+0x418>)
 8003d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d96:	bf00      	nop
 8003d98:	08003dbd 	.word	0x08003dbd
 8003d9c:	08003dc5 	.word	0x08003dc5
 8003da0:	08003dcd 	.word	0x08003dcd
 8003da4:	08003de3 	.word	0x08003de3
 8003da8:	08003dd3 	.word	0x08003dd3
 8003dac:	08003de3 	.word	0x08003de3
 8003db0:	08003de3 	.word	0x08003de3
 8003db4:	08003de3 	.word	0x08003de3
 8003db8:	08003ddb 	.word	0x08003ddb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dbc:	f7fe fe30 	bl	8002a20 <HAL_RCC_GetPCLK1Freq>
 8003dc0:	61b8      	str	r0, [r7, #24]
        break;
 8003dc2:	e013      	b.n	8003dec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dc4:	f7fe fe40 	bl	8002a48 <HAL_RCC_GetPCLK2Freq>
 8003dc8:	61b8      	str	r0, [r7, #24]
        break;
 8003dca:	e00f      	b.n	8003dec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dcc:	4b1d      	ldr	r3, [pc, #116]	; (8003e44 <UART_SetConfig+0x4c4>)
 8003dce:	61bb      	str	r3, [r7, #24]
        break;
 8003dd0:	e00c      	b.n	8003dec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dd2:	f7fe fd13 	bl	80027fc <HAL_RCC_GetSysClockFreq>
 8003dd6:	61b8      	str	r0, [r7, #24]
        break;
 8003dd8:	e008      	b.n	8003dec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dde:	61bb      	str	r3, [r7, #24]
        break;
 8003de0:	e004      	b.n	8003dec <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003de2:	2300      	movs	r3, #0
 8003de4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	77bb      	strb	r3, [r7, #30]
        break;
 8003dea:	bf00      	nop
    }

    if (pclk != 0U)
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d018      	beq.n	8003e24 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	085a      	lsrs	r2, r3, #1
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	441a      	add	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e04:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	2b0f      	cmp	r3, #15
 8003e0a:	d909      	bls.n	8003e20 <UART_SetConfig+0x4a0>
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e12:	d205      	bcs.n	8003e20 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	60da      	str	r2, [r3, #12]
 8003e1e:	e001      	b.n	8003e24 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003e30:	7fbb      	ldrb	r3, [r7, #30]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3720      	adds	r7, #32
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40007c00 	.word	0x40007c00
 8003e40:	40023800 	.word	0x40023800
 8003e44:	00f42400 	.word	0x00f42400

08003e48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00a      	beq.n	8003e72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	430a      	orrs	r2, r1
 8003e92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00a      	beq.n	8003eb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	f003 0308 	and.w	r3, r3, #8
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	f003 0310 	and.w	r3, r3, #16
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00a      	beq.n	8003efa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	f003 0320 	and.w	r3, r3, #32
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d01a      	beq.n	8003f5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f46:	d10a      	bne.n	8003f5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00a      	beq.n	8003f80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	605a      	str	r2, [r3, #4]
  }
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af02      	add	r7, sp, #8
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f9c:	f7fd f82c 	bl	8000ff8 <HAL_GetTick>
 8003fa0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0308 	and.w	r3, r3, #8
 8003fac:	2b08      	cmp	r3, #8
 8003fae:	d10e      	bne.n	8003fce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f831 	bl	8004026 <UART_WaitOnFlagUntilTimeout>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e027      	b.n	800401e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b04      	cmp	r3, #4
 8003fda:	d10e      	bne.n	8003ffa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f81b 	bl	8004026 <UART_WaitOnFlagUntilTimeout>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e011      	b.n	800401e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2220      	movs	r2, #32
 8004004:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b09c      	sub	sp, #112	; 0x70
 800402a:	af00      	add	r7, sp, #0
 800402c:	60f8      	str	r0, [r7, #12]
 800402e:	60b9      	str	r1, [r7, #8]
 8004030:	603b      	str	r3, [r7, #0]
 8004032:	4613      	mov	r3, r2
 8004034:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004036:	e0a7      	b.n	8004188 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004038:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800403a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800403e:	f000 80a3 	beq.w	8004188 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004042:	f7fc ffd9 	bl	8000ff8 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800404e:	429a      	cmp	r2, r3
 8004050:	d302      	bcc.n	8004058 <UART_WaitOnFlagUntilTimeout+0x32>
 8004052:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004054:	2b00      	cmp	r3, #0
 8004056:	d13f      	bne.n	80040d8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004060:	e853 3f00 	ldrex	r3, [r3]
 8004064:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004068:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800406c:	667b      	str	r3, [r7, #100]	; 0x64
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	461a      	mov	r2, r3
 8004074:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004076:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004078:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800407c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800407e:	e841 2300 	strex	r3, r2, [r1]
 8004082:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004084:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1e6      	bne.n	8004058 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	3308      	adds	r3, #8
 8004090:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004094:	e853 3f00 	ldrex	r3, [r3]
 8004098:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800409a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800409c:	f023 0301 	bic.w	r3, r3, #1
 80040a0:	663b      	str	r3, [r7, #96]	; 0x60
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	3308      	adds	r3, #8
 80040a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80040aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80040ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80040b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040b2:	e841 2300 	strex	r3, r2, [r1]
 80040b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80040b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1e5      	bne.n	800408a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2220      	movs	r2, #32
 80040c2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2220      	movs	r2, #32
 80040c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e068      	b.n	80041aa <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0304 	and.w	r3, r3, #4
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d050      	beq.n	8004188 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	69db      	ldr	r3, [r3, #28]
 80040ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040f4:	d148      	bne.n	8004188 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040fe:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004108:	e853 3f00 	ldrex	r3, [r3]
 800410c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004114:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	461a      	mov	r2, r3
 800411c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800411e:	637b      	str	r3, [r7, #52]	; 0x34
 8004120:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004122:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004124:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004126:	e841 2300 	strex	r3, r2, [r1]
 800412a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800412c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1e6      	bne.n	8004100 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	3308      	adds	r3, #8
 8004138:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	e853 3f00 	ldrex	r3, [r3]
 8004140:	613b      	str	r3, [r7, #16]
   return(result);
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	f023 0301 	bic.w	r3, r3, #1
 8004148:	66bb      	str	r3, [r7, #104]	; 0x68
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	3308      	adds	r3, #8
 8004150:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004152:	623a      	str	r2, [r7, #32]
 8004154:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004156:	69f9      	ldr	r1, [r7, #28]
 8004158:	6a3a      	ldr	r2, [r7, #32]
 800415a:	e841 2300 	strex	r3, r2, [r1]
 800415e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1e5      	bne.n	8004132 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2220      	movs	r2, #32
 800416a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2220      	movs	r2, #32
 8004170:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2220      	movs	r2, #32
 8004178:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e010      	b.n	80041aa <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	69da      	ldr	r2, [r3, #28]
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	4013      	ands	r3, r2
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	429a      	cmp	r2, r3
 8004196:	bf0c      	ite	eq
 8004198:	2301      	moveq	r3, #1
 800419a:	2300      	movne	r3, #0
 800419c:	b2db      	uxtb	r3, r3
 800419e:	461a      	mov	r2, r3
 80041a0:	79fb      	ldrb	r3, [r7, #7]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	f43f af48 	beq.w	8004038 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3770      	adds	r7, #112	; 0x70
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b095      	sub	sp, #84	; 0x54
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041c2:	e853 3f00 	ldrex	r3, [r3]
 80041c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	461a      	mov	r2, r3
 80041d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041d8:	643b      	str	r3, [r7, #64]	; 0x40
 80041da:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041e0:	e841 2300 	strex	r3, r2, [r1]
 80041e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1e6      	bne.n	80041ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3308      	adds	r3, #8
 80041f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f4:	6a3b      	ldr	r3, [r7, #32]
 80041f6:	e853 3f00 	ldrex	r3, [r3]
 80041fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	f023 0301 	bic.w	r3, r3, #1
 8004202:	64bb      	str	r3, [r7, #72]	; 0x48
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	3308      	adds	r3, #8
 800420a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800420c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800420e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004210:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004212:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004214:	e841 2300 	strex	r3, r2, [r1]
 8004218:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1e5      	bne.n	80041ec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004224:	2b01      	cmp	r3, #1
 8004226:	d118      	bne.n	800425a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	e853 3f00 	ldrex	r3, [r3]
 8004234:	60bb      	str	r3, [r7, #8]
   return(result);
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	f023 0310 	bic.w	r3, r3, #16
 800423c:	647b      	str	r3, [r7, #68]	; 0x44
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	461a      	mov	r2, r3
 8004244:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004246:	61bb      	str	r3, [r7, #24]
 8004248:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424a:	6979      	ldr	r1, [r7, #20]
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	e841 2300 	strex	r3, r2, [r1]
 8004252:	613b      	str	r3, [r7, #16]
   return(result);
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1e6      	bne.n	8004228 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2220      	movs	r2, #32
 800425e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800426e:	bf00      	nop
 8004270:	3754      	adds	r7, #84	; 0x54
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b084      	sub	sp, #16
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004286:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f7ff fb51 	bl	8003940 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800429e:	bf00      	nop
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b088      	sub	sp, #32
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	e853 3f00 	ldrex	r3, [r3]
 80042ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042c2:	61fb      	str	r3, [r7, #28]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	461a      	mov	r2, r3
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	61bb      	str	r3, [r7, #24]
 80042ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d0:	6979      	ldr	r1, [r7, #20]
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	e841 2300 	strex	r3, r2, [r1]
 80042d8:	613b      	str	r3, [r7, #16]
   return(result);
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1e6      	bne.n	80042ae <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2220      	movs	r2, #32
 80042e4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f7ff fb1d 	bl	800392c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042f2:	bf00      	nop
 80042f4:	3720      	adds	r7, #32
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
	...

080042fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80042fc:	b084      	sub	sp, #16
 80042fe:	b580      	push	{r7, lr}
 8004300:	b084      	sub	sp, #16
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
 8004306:	f107 001c 	add.w	r0, r7, #28
 800430a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800430e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004310:	2b01      	cmp	r3, #1
 8004312:	d120      	bne.n	8004356 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004318:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68da      	ldr	r2, [r3, #12]
 8004324:	4b20      	ldr	r3, [pc, #128]	; (80043a8 <USB_CoreInit+0xac>)
 8004326:	4013      	ands	r3, r2
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800433a:	2b01      	cmp	r3, #1
 800433c:	d105      	bne.n	800434a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 fa96 	bl	800487c <USB_CoreReset>
 8004350:	4603      	mov	r3, r0
 8004352:	73fb      	strb	r3, [r7, #15]
 8004354:	e010      	b.n	8004378 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 fa8a 	bl	800487c <USB_CoreReset>
 8004368:	4603      	mov	r3, r0
 800436a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004370:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437a:	2b01      	cmp	r3, #1
 800437c:	d10b      	bne.n	8004396 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f043 0206 	orr.w	r2, r3, #6
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f043 0220 	orr.w	r2, r3, #32
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004396:	7bfb      	ldrb	r3, [r7, #15]
}
 8004398:	4618      	mov	r0, r3
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043a2:	b004      	add	sp, #16
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	ffbdffbf 	.word	0xffbdffbf

080043ac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f023 0201 	bic.w	r2, r3, #1
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr

080043ce <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b084      	sub	sp, #16
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
 80043d6:	460b      	mov	r3, r1
 80043d8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80043da:	2300      	movs	r3, #0
 80043dc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80043ea:	78fb      	ldrb	r3, [r7, #3]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d115      	bne.n	800441c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80043fc:	2001      	movs	r0, #1
 80043fe:	f7fc fe07 	bl	8001010 <HAL_Delay>
      ms++;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	3301      	adds	r3, #1
 8004406:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 fa29 	bl	8004860 <USB_GetMode>
 800440e:	4603      	mov	r3, r0
 8004410:	2b01      	cmp	r3, #1
 8004412:	d01e      	beq.n	8004452 <USB_SetCurrentMode+0x84>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2b31      	cmp	r3, #49	; 0x31
 8004418:	d9f0      	bls.n	80043fc <USB_SetCurrentMode+0x2e>
 800441a:	e01a      	b.n	8004452 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800441c:	78fb      	ldrb	r3, [r7, #3]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d115      	bne.n	800444e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800442e:	2001      	movs	r0, #1
 8004430:	f7fc fdee 	bl	8001010 <HAL_Delay>
      ms++;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	3301      	adds	r3, #1
 8004438:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 fa10 	bl	8004860 <USB_GetMode>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d005      	beq.n	8004452 <USB_SetCurrentMode+0x84>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2b31      	cmp	r3, #49	; 0x31
 800444a:	d9f0      	bls.n	800442e <USB_SetCurrentMode+0x60>
 800444c:	e001      	b.n	8004452 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e005      	b.n	800445e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2b32      	cmp	r3, #50	; 0x32
 8004456:	d101      	bne.n	800445c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e000      	b.n	800445e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
	...

08004468 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004468:	b084      	sub	sp, #16
 800446a:	b580      	push	{r7, lr}
 800446c:	b086      	sub	sp, #24
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
 8004472:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004476:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800447a:	2300      	movs	r3, #0
 800447c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004482:	2300      	movs	r3, #0
 8004484:	613b      	str	r3, [r7, #16]
 8004486:	e009      	b.n	800449c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	3340      	adds	r3, #64	; 0x40
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	2200      	movs	r2, #0
 8004494:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	3301      	adds	r3, #1
 800449a:	613b      	str	r3, [r7, #16]
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	2b0e      	cmp	r3, #14
 80044a0:	d9f2      	bls.n	8004488 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80044a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d11c      	bne.n	80044e2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044b6:	f043 0302 	orr.w	r3, r3, #2
 80044ba:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	601a      	str	r2, [r3, #0]
 80044e0:	e005      	b.n	80044ee <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80044f4:	461a      	mov	r2, r3
 80044f6:	2300      	movs	r3, #0
 80044f8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004500:	4619      	mov	r1, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004508:	461a      	mov	r2, r3
 800450a:	680b      	ldr	r3, [r1, #0]
 800450c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800450e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004510:	2b01      	cmp	r3, #1
 8004512:	d10c      	bne.n	800452e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004516:	2b00      	cmp	r3, #0
 8004518:	d104      	bne.n	8004524 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800451a:	2100      	movs	r1, #0
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f965 	bl	80047ec <USB_SetDevSpeed>
 8004522:	e008      	b.n	8004536 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004524:	2101      	movs	r1, #1
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 f960 	bl	80047ec <USB_SetDevSpeed>
 800452c:	e003      	b.n	8004536 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800452e:	2103      	movs	r1, #3
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f95b 	bl	80047ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004536:	2110      	movs	r1, #16
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 f8f3 	bl	8004724 <USB_FlushTxFifo>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d001      	beq.n	8004548 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f91f 	bl	800478c <USB_FlushRxFifo>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800455e:	461a      	mov	r2, r3
 8004560:	2300      	movs	r3, #0
 8004562:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800456a:	461a      	mov	r2, r3
 800456c:	2300      	movs	r3, #0
 800456e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004576:	461a      	mov	r2, r3
 8004578:	2300      	movs	r3, #0
 800457a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800457c:	2300      	movs	r3, #0
 800457e:	613b      	str	r3, [r7, #16]
 8004580:	e043      	b.n	800460a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	015a      	lsls	r2, r3, #5
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	4413      	add	r3, r2
 800458a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004594:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004598:	d118      	bne.n	80045cc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10a      	bne.n	80045b6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	015a      	lsls	r2, r3, #5
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4413      	add	r3, r2
 80045a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ac:	461a      	mov	r2, r3
 80045ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80045b2:	6013      	str	r3, [r2, #0]
 80045b4:	e013      	b.n	80045de <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	015a      	lsls	r2, r3, #5
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	4413      	add	r3, r2
 80045be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c2:	461a      	mov	r2, r3
 80045c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045c8:	6013      	str	r3, [r2, #0]
 80045ca:	e008      	b.n	80045de <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	015a      	lsls	r2, r3, #5
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	4413      	add	r3, r2
 80045d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d8:	461a      	mov	r2, r3
 80045da:	2300      	movs	r3, #0
 80045dc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	015a      	lsls	r2, r3, #5
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	4413      	add	r3, r2
 80045e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ea:	461a      	mov	r2, r3
 80045ec:	2300      	movs	r3, #0
 80045ee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045fc:	461a      	mov	r2, r3
 80045fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004602:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	3301      	adds	r3, #1
 8004608:	613b      	str	r3, [r7, #16]
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	429a      	cmp	r2, r3
 8004610:	d3b7      	bcc.n	8004582 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004612:	2300      	movs	r3, #0
 8004614:	613b      	str	r3, [r7, #16]
 8004616:	e043      	b.n	80046a0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	015a      	lsls	r2, r3, #5
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	4413      	add	r3, r2
 8004620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800462a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800462e:	d118      	bne.n	8004662 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10a      	bne.n	800464c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	015a      	lsls	r2, r3, #5
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	4413      	add	r3, r2
 800463e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004642:	461a      	mov	r2, r3
 8004644:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004648:	6013      	str	r3, [r2, #0]
 800464a:	e013      	b.n	8004674 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	015a      	lsls	r2, r3, #5
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	4413      	add	r3, r2
 8004654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004658:	461a      	mov	r2, r3
 800465a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800465e:	6013      	str	r3, [r2, #0]
 8004660:	e008      	b.n	8004674 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	015a      	lsls	r2, r3, #5
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	4413      	add	r3, r2
 800466a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466e:	461a      	mov	r2, r3
 8004670:	2300      	movs	r3, #0
 8004672:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	4413      	add	r3, r2
 800467c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004680:	461a      	mov	r2, r3
 8004682:	2300      	movs	r3, #0
 8004684:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	015a      	lsls	r2, r3, #5
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	4413      	add	r3, r2
 800468e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004692:	461a      	mov	r2, r3
 8004694:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004698:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	3301      	adds	r3, #1
 800469e:	613b      	str	r3, [r7, #16]
 80046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d3b7      	bcc.n	8004618 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046ba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80046c8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80046ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d105      	bne.n	80046dc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	f043 0210 	orr.w	r2, r3, #16
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	699a      	ldr	r2, [r3, #24]
 80046e0:	4b0e      	ldr	r3, [pc, #56]	; (800471c <USB_DevInit+0x2b4>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80046e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d005      	beq.n	80046fa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	f043 0208 	orr.w	r2, r3, #8
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80046fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d105      	bne.n	800470c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	699a      	ldr	r2, [r3, #24]
 8004704:	4b06      	ldr	r3, [pc, #24]	; (8004720 <USB_DevInit+0x2b8>)
 8004706:	4313      	orrs	r3, r2
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800470c:	7dfb      	ldrb	r3, [r7, #23]
}
 800470e:	4618      	mov	r0, r3
 8004710:	3718      	adds	r7, #24
 8004712:	46bd      	mov	sp, r7
 8004714:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004718:	b004      	add	sp, #16
 800471a:	4770      	bx	lr
 800471c:	803c3800 	.word	0x803c3800
 8004720:	40000004 	.word	0x40000004

08004724 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800472e:	2300      	movs	r3, #0
 8004730:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	3301      	adds	r3, #1
 8004736:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4a13      	ldr	r2, [pc, #76]	; (8004788 <USB_FlushTxFifo+0x64>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d901      	bls.n	8004744 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e01b      	b.n	800477c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	2b00      	cmp	r3, #0
 800474a:	daf2      	bge.n	8004732 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	019b      	lsls	r3, r3, #6
 8004754:	f043 0220 	orr.w	r2, r3, #32
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	3301      	adds	r3, #1
 8004760:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	4a08      	ldr	r2, [pc, #32]	; (8004788 <USB_FlushTxFifo+0x64>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d901      	bls.n	800476e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e006      	b.n	800477c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	f003 0320 	and.w	r3, r3, #32
 8004776:	2b20      	cmp	r3, #32
 8004778:	d0f0      	beq.n	800475c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3714      	adds	r7, #20
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr
 8004788:	00030d40 	.word	0x00030d40

0800478c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004794:	2300      	movs	r3, #0
 8004796:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	3301      	adds	r3, #1
 800479c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	4a11      	ldr	r2, [pc, #68]	; (80047e8 <USB_FlushRxFifo+0x5c>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d901      	bls.n	80047aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e018      	b.n	80047dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	daf2      	bge.n	8004798 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80047b2:	2300      	movs	r3, #0
 80047b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2210      	movs	r2, #16
 80047ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	3301      	adds	r3, #1
 80047c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	4a08      	ldr	r2, [pc, #32]	; (80047e8 <USB_FlushRxFifo+0x5c>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d901      	bls.n	80047ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e006      	b.n	80047dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	f003 0310 	and.w	r3, r3, #16
 80047d6:	2b10      	cmp	r3, #16
 80047d8:	d0f0      	beq.n	80047bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3714      	adds	r7, #20
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr
 80047e8:	00030d40 	.word	0x00030d40

080047ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	460b      	mov	r3, r1
 80047f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	78fb      	ldrb	r3, [r7, #3]
 8004806:	68f9      	ldr	r1, [r7, #12]
 8004808:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800480c:	4313      	orrs	r3, r2
 800480e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3714      	adds	r7, #20
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800481e:	b480      	push	{r7}
 8004820:	b085      	sub	sp, #20
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004838:	f023 0303 	bic.w	r3, r3, #3
 800483c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800484c:	f043 0302 	orr.w	r3, r3, #2
 8004850:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3714      	adds	r7, #20
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	f003 0301 	and.w	r3, r3, #1
}
 8004870:	4618      	mov	r0, r3
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004884:	2300      	movs	r3, #0
 8004886:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	3301      	adds	r3, #1
 800488c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	4a13      	ldr	r2, [pc, #76]	; (80048e0 <USB_CoreReset+0x64>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d901      	bls.n	800489a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e01b      	b.n	80048d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	daf2      	bge.n	8004888 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80048a2:	2300      	movs	r3, #0
 80048a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	f043 0201 	orr.w	r2, r3, #1
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	3301      	adds	r3, #1
 80048b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4a09      	ldr	r2, [pc, #36]	; (80048e0 <USB_CoreReset+0x64>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d901      	bls.n	80048c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e006      	b.n	80048d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d0f0      	beq.n	80048b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	00030d40 	.word	0x00030d40

080048e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80048e4:	b480      	push	{r7}
 80048e6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80048e8:	bf00      	nop
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
	...

080048f4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048fa:	f3ef 8305 	mrs	r3, IPSR
 80048fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8004900:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10f      	bne.n	8004926 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004906:	f3ef 8310 	mrs	r3, PRIMASK
 800490a:	607b      	str	r3, [r7, #4]
  return(result);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d105      	bne.n	800491e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004912:	f3ef 8311 	mrs	r3, BASEPRI
 8004916:	603b      	str	r3, [r7, #0]
  return(result);
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d007      	beq.n	800492e <osKernelInitialize+0x3a>
 800491e:	4b0e      	ldr	r3, [pc, #56]	; (8004958 <osKernelInitialize+0x64>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2b02      	cmp	r3, #2
 8004924:	d103      	bne.n	800492e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004926:	f06f 0305 	mvn.w	r3, #5
 800492a:	60fb      	str	r3, [r7, #12]
 800492c:	e00c      	b.n	8004948 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800492e:	4b0a      	ldr	r3, [pc, #40]	; (8004958 <osKernelInitialize+0x64>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d105      	bne.n	8004942 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004936:	4b08      	ldr	r3, [pc, #32]	; (8004958 <osKernelInitialize+0x64>)
 8004938:	2201      	movs	r2, #1
 800493a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800493c:	2300      	movs	r3, #0
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	e002      	b.n	8004948 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004942:	f04f 33ff 	mov.w	r3, #4294967295
 8004946:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004948:	68fb      	ldr	r3, [r7, #12]
}
 800494a:	4618      	mov	r0, r3
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	20000968 	.word	0x20000968

0800495c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004962:	f3ef 8305 	mrs	r3, IPSR
 8004966:	60bb      	str	r3, [r7, #8]
  return(result);
 8004968:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10f      	bne.n	800498e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800496e:	f3ef 8310 	mrs	r3, PRIMASK
 8004972:	607b      	str	r3, [r7, #4]
  return(result);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d105      	bne.n	8004986 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800497a:	f3ef 8311 	mrs	r3, BASEPRI
 800497e:	603b      	str	r3, [r7, #0]
  return(result);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d007      	beq.n	8004996 <osKernelStart+0x3a>
 8004986:	4b0f      	ldr	r3, [pc, #60]	; (80049c4 <osKernelStart+0x68>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2b02      	cmp	r3, #2
 800498c:	d103      	bne.n	8004996 <osKernelStart+0x3a>
    stat = osErrorISR;
 800498e:	f06f 0305 	mvn.w	r3, #5
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	e010      	b.n	80049b8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004996:	4b0b      	ldr	r3, [pc, #44]	; (80049c4 <osKernelStart+0x68>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d109      	bne.n	80049b2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800499e:	f7ff ffa1 	bl	80048e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80049a2:	4b08      	ldr	r3, [pc, #32]	; (80049c4 <osKernelStart+0x68>)
 80049a4:	2202      	movs	r2, #2
 80049a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80049a8:	f001 f8ca 	bl	8005b40 <vTaskStartScheduler>
      stat = osOK;
 80049ac:	2300      	movs	r3, #0
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	e002      	b.n	80049b8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80049b2:	f04f 33ff 	mov.w	r3, #4294967295
 80049b6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80049b8:	68fb      	ldr	r3, [r7, #12]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	20000968 	.word	0x20000968

080049c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b090      	sub	sp, #64	; 0x40
 80049cc:	af04      	add	r7, sp, #16
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80049d4:	2300      	movs	r3, #0
 80049d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049d8:	f3ef 8305 	mrs	r3, IPSR
 80049dc:	61fb      	str	r3, [r7, #28]
  return(result);
 80049de:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f040 808f 	bne.w	8004b04 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049e6:	f3ef 8310 	mrs	r3, PRIMASK
 80049ea:	61bb      	str	r3, [r7, #24]
  return(result);
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d105      	bne.n	80049fe <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80049f2:	f3ef 8311 	mrs	r3, BASEPRI
 80049f6:	617b      	str	r3, [r7, #20]
  return(result);
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <osThreadNew+0x3e>
 80049fe:	4b44      	ldr	r3, [pc, #272]	; (8004b10 <osThreadNew+0x148>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d07e      	beq.n	8004b04 <osThreadNew+0x13c>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d07b      	beq.n	8004b04 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004a0c:	2380      	movs	r3, #128	; 0x80
 8004a0e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004a10:	2318      	movs	r3, #24
 8004a12:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004a14:	2300      	movs	r3, #0
 8004a16:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004a18:	f04f 33ff 	mov.w	r3, #4294967295
 8004a1c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d045      	beq.n	8004ab0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d002      	beq.n	8004a32 <osThreadNew+0x6a>
        name = attr->name;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d002      	beq.n	8004a40 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d008      	beq.n	8004a58 <osThreadNew+0x90>
 8004a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a48:	2b38      	cmp	r3, #56	; 0x38
 8004a4a:	d805      	bhi.n	8004a58 <osThreadNew+0x90>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f003 0301 	and.w	r3, r3, #1
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <osThreadNew+0x94>
        return (NULL);
 8004a58:	2300      	movs	r3, #0
 8004a5a:	e054      	b.n	8004b06 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d003      	beq.n	8004a6c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	089b      	lsrs	r3, r3, #2
 8004a6a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00e      	beq.n	8004a92 <osThreadNew+0xca>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	2bbb      	cmp	r3, #187	; 0xbb
 8004a7a:	d90a      	bls.n	8004a92 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d006      	beq.n	8004a92 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d002      	beq.n	8004a92 <osThreadNew+0xca>
        mem = 1;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	623b      	str	r3, [r7, #32]
 8004a90:	e010      	b.n	8004ab4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10c      	bne.n	8004ab4 <osThreadNew+0xec>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d108      	bne.n	8004ab4 <osThreadNew+0xec>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d104      	bne.n	8004ab4 <osThreadNew+0xec>
          mem = 0;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	623b      	str	r3, [r7, #32]
 8004aae:	e001      	b.n	8004ab4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004ab4:	6a3b      	ldr	r3, [r7, #32]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d110      	bne.n	8004adc <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ac2:	9202      	str	r2, [sp, #8]
 8004ac4:	9301      	str	r3, [sp, #4]
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ace:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 fe3f 	bl	8005754 <xTaskCreateStatic>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	613b      	str	r3, [r7, #16]
 8004ada:	e013      	b.n	8004b04 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004adc:	6a3b      	ldr	r3, [r7, #32]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d110      	bne.n	8004b04 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	f107 0310 	add.w	r3, r7, #16
 8004aea:	9301      	str	r3, [sp, #4]
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f000 fe90 	bl	800581a <xTaskCreate>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d001      	beq.n	8004b04 <osThreadNew+0x13c>
          hTask = NULL;
 8004b00:	2300      	movs	r3, #0
 8004b02:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004b04:	693b      	ldr	r3, [r7, #16]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3730      	adds	r7, #48	; 0x30
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	20000968 	.word	0x20000968

08004b14 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b1c:	f3ef 8305 	mrs	r3, IPSR
 8004b20:	613b      	str	r3, [r7, #16]
  return(result);
 8004b22:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10f      	bne.n	8004b48 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b28:	f3ef 8310 	mrs	r3, PRIMASK
 8004b2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d105      	bne.n	8004b40 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b34:	f3ef 8311 	mrs	r3, BASEPRI
 8004b38:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d007      	beq.n	8004b50 <osDelay+0x3c>
 8004b40:	4b0a      	ldr	r3, [pc, #40]	; (8004b6c <osDelay+0x58>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d103      	bne.n	8004b50 <osDelay+0x3c>
    stat = osErrorISR;
 8004b48:	f06f 0305 	mvn.w	r3, #5
 8004b4c:	617b      	str	r3, [r7, #20]
 8004b4e:	e007      	b.n	8004b60 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004b50:	2300      	movs	r3, #0
 8004b52:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d002      	beq.n	8004b60 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 ffba 	bl	8005ad4 <vTaskDelay>
    }
  }

  return (stat);
 8004b60:	697b      	ldr	r3, [r7, #20]
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3718      	adds	r7, #24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	20000968 	.word	0x20000968

08004b70 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4a07      	ldr	r2, [pc, #28]	; (8004b9c <vApplicationGetIdleTaskMemory+0x2c>)
 8004b80:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	4a06      	ldr	r2, [pc, #24]	; (8004ba0 <vApplicationGetIdleTaskMemory+0x30>)
 8004b86:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2280      	movs	r2, #128	; 0x80
 8004b8c:	601a      	str	r2, [r3, #0]
}
 8004b8e:	bf00      	nop
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	2000096c 	.word	0x2000096c
 8004ba0:	20000a28 	.word	0x20000a28

08004ba4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	4a07      	ldr	r2, [pc, #28]	; (8004bd0 <vApplicationGetTimerTaskMemory+0x2c>)
 8004bb4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	4a06      	ldr	r2, [pc, #24]	; (8004bd4 <vApplicationGetTimerTaskMemory+0x30>)
 8004bba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bc2:	601a      	str	r2, [r3, #0]
}
 8004bc4:	bf00      	nop
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	20000c28 	.word	0x20000c28
 8004bd4:	20000ce4 	.word	0x20000ce4

08004bd8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f103 0208 	add.w	r2, r3, #8
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f04f 32ff 	mov.w	r2, #4294967295
 8004bf0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f103 0208 	add.w	r2, r3, #8
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f103 0208 	add.w	r2, r3, #8
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004c26:	bf00      	nop
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c32:	b480      	push	{r7}
 8004c34:	b085      	sub	sp, #20
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
 8004c3a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	683a      	ldr	r2, [r7, #0]
 8004c56:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	683a      	ldr	r2, [r7, #0]
 8004c5c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	1c5a      	adds	r2, r3, #1
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	601a      	str	r2, [r3, #0]
}
 8004c6e:	bf00      	nop
 8004c70:	3714      	adds	r7, #20
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr

08004c7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	b085      	sub	sp, #20
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
 8004c82:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c90:	d103      	bne.n	8004c9a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	e00c      	b.n	8004cb4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	3308      	adds	r3, #8
 8004c9e:	60fb      	str	r3, [r7, #12]
 8004ca0:	e002      	b.n	8004ca8 <vListInsert+0x2e>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	60fb      	str	r3, [r7, #12]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d2f6      	bcs.n	8004ca2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	1c5a      	adds	r2, r3, #1
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	601a      	str	r2, [r3, #0]
}
 8004ce0:	bf00      	nop
 8004ce2:	3714      	adds	r7, #20
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	6892      	ldr	r2, [r2, #8]
 8004d02:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	6852      	ldr	r2, [r2, #4]
 8004d0c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d103      	bne.n	8004d20 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689a      	ldr	r2, [r3, #8]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	1e5a      	subs	r2, r3, #1
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3714      	adds	r7, #20
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10c      	bne.n	8004d6e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d58:	b672      	cpsid	i
 8004d5a:	f383 8811 	msr	BASEPRI, r3
 8004d5e:	f3bf 8f6f 	isb	sy
 8004d62:	f3bf 8f4f 	dsb	sy
 8004d66:	b662      	cpsie	i
 8004d68:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004d6a:	bf00      	nop
 8004d6c:	e7fe      	b.n	8004d6c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004d6e:	f002 f8a5 	bl	8006ebc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7a:	68f9      	ldr	r1, [r7, #12]
 8004d7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d7e:	fb01 f303 	mul.w	r3, r1, r3
 8004d82:	441a      	add	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	68f9      	ldr	r1, [r7, #12]
 8004da2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004da4:	fb01 f303 	mul.w	r3, r1, r3
 8004da8:	441a      	add	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	22ff      	movs	r2, #255	; 0xff
 8004db2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	22ff      	movs	r2, #255	; 0xff
 8004dba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d114      	bne.n	8004dee <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d01a      	beq.n	8004e02 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	3310      	adds	r3, #16
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f001 f95d 	bl	8006090 <xTaskRemoveFromEventList>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d012      	beq.n	8004e02 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004ddc:	4b0c      	ldr	r3, [pc, #48]	; (8004e10 <xQueueGenericReset+0xd0>)
 8004dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	f3bf 8f6f 	isb	sy
 8004dec:	e009      	b.n	8004e02 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	3310      	adds	r3, #16
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7ff fef0 	bl	8004bd8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	3324      	adds	r3, #36	; 0x24
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7ff feeb 	bl	8004bd8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004e02:	f002 f88f 	bl	8006f24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004e06:	2301      	movs	r3, #1
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	e000ed04 	.word	0xe000ed04

08004e14 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b08e      	sub	sp, #56	; 0x38
 8004e18:	af02      	add	r7, sp, #8
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
 8004e20:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10c      	bne.n	8004e42 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8004e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2c:	b672      	cpsid	i
 8004e2e:	f383 8811 	msr	BASEPRI, r3
 8004e32:	f3bf 8f6f 	isb	sy
 8004e36:	f3bf 8f4f 	dsb	sy
 8004e3a:	b662      	cpsie	i
 8004e3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004e3e:	bf00      	nop
 8004e40:	e7fe      	b.n	8004e40 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10c      	bne.n	8004e62 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8004e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4c:	b672      	cpsid	i
 8004e4e:	f383 8811 	msr	BASEPRI, r3
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	b662      	cpsie	i
 8004e5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e5e:	bf00      	nop
 8004e60:	e7fe      	b.n	8004e60 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d002      	beq.n	8004e6e <xQueueGenericCreateStatic+0x5a>
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <xQueueGenericCreateStatic+0x5e>
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e000      	b.n	8004e74 <xQueueGenericCreateStatic+0x60>
 8004e72:	2300      	movs	r3, #0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d10c      	bne.n	8004e92 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8004e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7c:	b672      	cpsid	i
 8004e7e:	f383 8811 	msr	BASEPRI, r3
 8004e82:	f3bf 8f6f 	isb	sy
 8004e86:	f3bf 8f4f 	dsb	sy
 8004e8a:	b662      	cpsie	i
 8004e8c:	623b      	str	r3, [r7, #32]
}
 8004e8e:	bf00      	nop
 8004e90:	e7fe      	b.n	8004e90 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d102      	bne.n	8004e9e <xQueueGenericCreateStatic+0x8a>
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <xQueueGenericCreateStatic+0x8e>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e000      	b.n	8004ea4 <xQueueGenericCreateStatic+0x90>
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d10c      	bne.n	8004ec2 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8004ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eac:	b672      	cpsid	i
 8004eae:	f383 8811 	msr	BASEPRI, r3
 8004eb2:	f3bf 8f6f 	isb	sy
 8004eb6:	f3bf 8f4f 	dsb	sy
 8004eba:	b662      	cpsie	i
 8004ebc:	61fb      	str	r3, [r7, #28]
}
 8004ebe:	bf00      	nop
 8004ec0:	e7fe      	b.n	8004ec0 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004ec2:	2350      	movs	r3, #80	; 0x50
 8004ec4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	2b50      	cmp	r3, #80	; 0x50
 8004eca:	d00c      	beq.n	8004ee6 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8004ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed0:	b672      	cpsid	i
 8004ed2:	f383 8811 	msr	BASEPRI, r3
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	b662      	cpsie	i
 8004ee0:	61bb      	str	r3, [r7, #24]
}
 8004ee2:	bf00      	nop
 8004ee4:	e7fe      	b.n	8004ee4 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004ee6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00d      	beq.n	8004f0e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004efa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	4613      	mov	r3, r2
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	68b9      	ldr	r1, [r7, #8]
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f000 f805 	bl	8004f18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3730      	adds	r7, #48	; 0x30
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
 8004f24:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d103      	bne.n	8004f34 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	69ba      	ldr	r2, [r7, #24]
 8004f30:	601a      	str	r2, [r3, #0]
 8004f32:	e002      	b.n	8004f3a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004f46:	2101      	movs	r1, #1
 8004f48:	69b8      	ldr	r0, [r7, #24]
 8004f4a:	f7ff fef9 	bl	8004d40 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	78fa      	ldrb	r2, [r7, #3]
 8004f52:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004f56:	bf00      	nop
 8004f58:	3710      	adds	r7, #16
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
	...

08004f60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b08e      	sub	sp, #56	; 0x38
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
 8004f6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d10c      	bne.n	8004f96 <xQueueGenericSend+0x36>
	__asm volatile
 8004f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f80:	b672      	cpsid	i
 8004f82:	f383 8811 	msr	BASEPRI, r3
 8004f86:	f3bf 8f6f 	isb	sy
 8004f8a:	f3bf 8f4f 	dsb	sy
 8004f8e:	b662      	cpsie	i
 8004f90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f92:	bf00      	nop
 8004f94:	e7fe      	b.n	8004f94 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d103      	bne.n	8004fa4 <xQueueGenericSend+0x44>
 8004f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d101      	bne.n	8004fa8 <xQueueGenericSend+0x48>
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e000      	b.n	8004faa <xQueueGenericSend+0x4a>
 8004fa8:	2300      	movs	r3, #0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10c      	bne.n	8004fc8 <xQueueGenericSend+0x68>
	__asm volatile
 8004fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb2:	b672      	cpsid	i
 8004fb4:	f383 8811 	msr	BASEPRI, r3
 8004fb8:	f3bf 8f6f 	isb	sy
 8004fbc:	f3bf 8f4f 	dsb	sy
 8004fc0:	b662      	cpsie	i
 8004fc2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004fc4:	bf00      	nop
 8004fc6:	e7fe      	b.n	8004fc6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d103      	bne.n	8004fd6 <xQueueGenericSend+0x76>
 8004fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d101      	bne.n	8004fda <xQueueGenericSend+0x7a>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e000      	b.n	8004fdc <xQueueGenericSend+0x7c>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10c      	bne.n	8004ffa <xQueueGenericSend+0x9a>
	__asm volatile
 8004fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe4:	b672      	cpsid	i
 8004fe6:	f383 8811 	msr	BASEPRI, r3
 8004fea:	f3bf 8f6f 	isb	sy
 8004fee:	f3bf 8f4f 	dsb	sy
 8004ff2:	b662      	cpsie	i
 8004ff4:	623b      	str	r3, [r7, #32]
}
 8004ff6:	bf00      	nop
 8004ff8:	e7fe      	b.n	8004ff8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ffa:	f001 fa13 	bl	8006424 <xTaskGetSchedulerState>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d102      	bne.n	800500a <xQueueGenericSend+0xaa>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <xQueueGenericSend+0xae>
 800500a:	2301      	movs	r3, #1
 800500c:	e000      	b.n	8005010 <xQueueGenericSend+0xb0>
 800500e:	2300      	movs	r3, #0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10c      	bne.n	800502e <xQueueGenericSend+0xce>
	__asm volatile
 8005014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005018:	b672      	cpsid	i
 800501a:	f383 8811 	msr	BASEPRI, r3
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f3bf 8f4f 	dsb	sy
 8005026:	b662      	cpsie	i
 8005028:	61fb      	str	r3, [r7, #28]
}
 800502a:	bf00      	nop
 800502c:	e7fe      	b.n	800502c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800502e:	f001 ff45 	bl	8006ebc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005034:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800503a:	429a      	cmp	r2, r3
 800503c:	d302      	bcc.n	8005044 <xQueueGenericSend+0xe4>
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	2b02      	cmp	r3, #2
 8005042:	d129      	bne.n	8005098 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	68b9      	ldr	r1, [r7, #8]
 8005048:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800504a:	f000 fa15 	bl	8005478 <prvCopyDataToQueue>
 800504e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005054:	2b00      	cmp	r3, #0
 8005056:	d010      	beq.n	800507a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505a:	3324      	adds	r3, #36	; 0x24
 800505c:	4618      	mov	r0, r3
 800505e:	f001 f817 	bl	8006090 <xTaskRemoveFromEventList>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d013      	beq.n	8005090 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005068:	4b3f      	ldr	r3, [pc, #252]	; (8005168 <xQueueGenericSend+0x208>)
 800506a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800506e:	601a      	str	r2, [r3, #0]
 8005070:	f3bf 8f4f 	dsb	sy
 8005074:	f3bf 8f6f 	isb	sy
 8005078:	e00a      	b.n	8005090 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800507a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507c:	2b00      	cmp	r3, #0
 800507e:	d007      	beq.n	8005090 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005080:	4b39      	ldr	r3, [pc, #228]	; (8005168 <xQueueGenericSend+0x208>)
 8005082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005086:	601a      	str	r2, [r3, #0]
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005090:	f001 ff48 	bl	8006f24 <vPortExitCritical>
				return pdPASS;
 8005094:	2301      	movs	r3, #1
 8005096:	e063      	b.n	8005160 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d103      	bne.n	80050a6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800509e:	f001 ff41 	bl	8006f24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80050a2:	2300      	movs	r3, #0
 80050a4:	e05c      	b.n	8005160 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80050a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d106      	bne.n	80050ba <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050ac:	f107 0314 	add.w	r3, r7, #20
 80050b0:	4618      	mov	r0, r3
 80050b2:	f001 f853 	bl	800615c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050b6:	2301      	movs	r3, #1
 80050b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050ba:	f001 ff33 	bl	8006f24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050be:	f000 fdb3 	bl	8005c28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050c2:	f001 fefb 	bl	8006ebc <vPortEnterCritical>
 80050c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050cc:	b25b      	sxtb	r3, r3
 80050ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d2:	d103      	bne.n	80050dc <xQueueGenericSend+0x17c>
 80050d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050e2:	b25b      	sxtb	r3, r3
 80050e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e8:	d103      	bne.n	80050f2 <xQueueGenericSend+0x192>
 80050ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050f2:	f001 ff17 	bl	8006f24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050f6:	1d3a      	adds	r2, r7, #4
 80050f8:	f107 0314 	add.w	r3, r7, #20
 80050fc:	4611      	mov	r1, r2
 80050fe:	4618      	mov	r0, r3
 8005100:	f001 f842 	bl	8006188 <xTaskCheckForTimeOut>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d124      	bne.n	8005154 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800510a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800510c:	f000 faac 	bl	8005668 <prvIsQueueFull>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d018      	beq.n	8005148 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005118:	3310      	adds	r3, #16
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	4611      	mov	r1, r2
 800511e:	4618      	mov	r0, r3
 8005120:	f000 ff62 	bl	8005fe8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005124:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005126:	f000 fa37 	bl	8005598 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800512a:	f000 fd8b 	bl	8005c44 <xTaskResumeAll>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	f47f af7c 	bne.w	800502e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8005136:	4b0c      	ldr	r3, [pc, #48]	; (8005168 <xQueueGenericSend+0x208>)
 8005138:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800513c:	601a      	str	r2, [r3, #0]
 800513e:	f3bf 8f4f 	dsb	sy
 8005142:	f3bf 8f6f 	isb	sy
 8005146:	e772      	b.n	800502e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005148:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800514a:	f000 fa25 	bl	8005598 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800514e:	f000 fd79 	bl	8005c44 <xTaskResumeAll>
 8005152:	e76c      	b.n	800502e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005154:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005156:	f000 fa1f 	bl	8005598 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800515a:	f000 fd73 	bl	8005c44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800515e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005160:	4618      	mov	r0, r3
 8005162:	3738      	adds	r7, #56	; 0x38
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	e000ed04 	.word	0xe000ed04

0800516c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b08e      	sub	sp, #56	; 0x38
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
 8005178:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800517e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005180:	2b00      	cmp	r3, #0
 8005182:	d10c      	bne.n	800519e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8005184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005188:	b672      	cpsid	i
 800518a:	f383 8811 	msr	BASEPRI, r3
 800518e:	f3bf 8f6f 	isb	sy
 8005192:	f3bf 8f4f 	dsb	sy
 8005196:	b662      	cpsie	i
 8005198:	627b      	str	r3, [r7, #36]	; 0x24
}
 800519a:	bf00      	nop
 800519c:	e7fe      	b.n	800519c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d103      	bne.n	80051ac <xQueueGenericSendFromISR+0x40>
 80051a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <xQueueGenericSendFromISR+0x44>
 80051ac:	2301      	movs	r3, #1
 80051ae:	e000      	b.n	80051b2 <xQueueGenericSendFromISR+0x46>
 80051b0:	2300      	movs	r3, #0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d10c      	bne.n	80051d0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80051b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ba:	b672      	cpsid	i
 80051bc:	f383 8811 	msr	BASEPRI, r3
 80051c0:	f3bf 8f6f 	isb	sy
 80051c4:	f3bf 8f4f 	dsb	sy
 80051c8:	b662      	cpsie	i
 80051ca:	623b      	str	r3, [r7, #32]
}
 80051cc:	bf00      	nop
 80051ce:	e7fe      	b.n	80051ce <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d103      	bne.n	80051de <xQueueGenericSendFromISR+0x72>
 80051d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d101      	bne.n	80051e2 <xQueueGenericSendFromISR+0x76>
 80051de:	2301      	movs	r3, #1
 80051e0:	e000      	b.n	80051e4 <xQueueGenericSendFromISR+0x78>
 80051e2:	2300      	movs	r3, #0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10c      	bne.n	8005202 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80051e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ec:	b672      	cpsid	i
 80051ee:	f383 8811 	msr	BASEPRI, r3
 80051f2:	f3bf 8f6f 	isb	sy
 80051f6:	f3bf 8f4f 	dsb	sy
 80051fa:	b662      	cpsie	i
 80051fc:	61fb      	str	r3, [r7, #28]
}
 80051fe:	bf00      	nop
 8005200:	e7fe      	b.n	8005200 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005202:	f001 ff43 	bl	800708c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005206:	f3ef 8211 	mrs	r2, BASEPRI
 800520a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520e:	b672      	cpsid	i
 8005210:	f383 8811 	msr	BASEPRI, r3
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	f3bf 8f4f 	dsb	sy
 800521c:	b662      	cpsie	i
 800521e:	61ba      	str	r2, [r7, #24]
 8005220:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005222:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005224:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800522a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800522e:	429a      	cmp	r2, r3
 8005230:	d302      	bcc.n	8005238 <xQueueGenericSendFromISR+0xcc>
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b02      	cmp	r3, #2
 8005236:	d12c      	bne.n	8005292 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800523e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005242:	683a      	ldr	r2, [r7, #0]
 8005244:	68b9      	ldr	r1, [r7, #8]
 8005246:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005248:	f000 f916 	bl	8005478 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800524c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005254:	d112      	bne.n	800527c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	2b00      	cmp	r3, #0
 800525c:	d016      	beq.n	800528c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800525e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005260:	3324      	adds	r3, #36	; 0x24
 8005262:	4618      	mov	r0, r3
 8005264:	f000 ff14 	bl	8006090 <xTaskRemoveFromEventList>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00e      	beq.n	800528c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00b      	beq.n	800528c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	e007      	b.n	800528c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800527c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005280:	3301      	adds	r3, #1
 8005282:	b2db      	uxtb	r3, r3
 8005284:	b25a      	sxtb	r2, r3
 8005286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800528c:	2301      	movs	r3, #1
 800528e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005290:	e001      	b.n	8005296 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005292:	2300      	movs	r3, #0
 8005294:	637b      	str	r3, [r7, #52]	; 0x34
 8005296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005298:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80052a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80052a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3738      	adds	r7, #56	; 0x38
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b08c      	sub	sp, #48	; 0x30
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80052b8:	2300      	movs	r3, #0
 80052ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80052c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10c      	bne.n	80052e0 <xQueueReceive+0x34>
	__asm volatile
 80052c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ca:	b672      	cpsid	i
 80052cc:	f383 8811 	msr	BASEPRI, r3
 80052d0:	f3bf 8f6f 	isb	sy
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	b662      	cpsie	i
 80052da:	623b      	str	r3, [r7, #32]
}
 80052dc:	bf00      	nop
 80052de:	e7fe      	b.n	80052de <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d103      	bne.n	80052ee <xQueueReceive+0x42>
 80052e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d101      	bne.n	80052f2 <xQueueReceive+0x46>
 80052ee:	2301      	movs	r3, #1
 80052f0:	e000      	b.n	80052f4 <xQueueReceive+0x48>
 80052f2:	2300      	movs	r3, #0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d10c      	bne.n	8005312 <xQueueReceive+0x66>
	__asm volatile
 80052f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fc:	b672      	cpsid	i
 80052fe:	f383 8811 	msr	BASEPRI, r3
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	b662      	cpsie	i
 800530c:	61fb      	str	r3, [r7, #28]
}
 800530e:	bf00      	nop
 8005310:	e7fe      	b.n	8005310 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005312:	f001 f887 	bl	8006424 <xTaskGetSchedulerState>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d102      	bne.n	8005322 <xQueueReceive+0x76>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <xQueueReceive+0x7a>
 8005322:	2301      	movs	r3, #1
 8005324:	e000      	b.n	8005328 <xQueueReceive+0x7c>
 8005326:	2300      	movs	r3, #0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10c      	bne.n	8005346 <xQueueReceive+0x9a>
	__asm volatile
 800532c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005330:	b672      	cpsid	i
 8005332:	f383 8811 	msr	BASEPRI, r3
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	b662      	cpsie	i
 8005340:	61bb      	str	r3, [r7, #24]
}
 8005342:	bf00      	nop
 8005344:	e7fe      	b.n	8005344 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005346:	f001 fdb9 	bl	8006ebc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800534a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	2b00      	cmp	r3, #0
 8005354:	d01f      	beq.n	8005396 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005356:	68b9      	ldr	r1, [r7, #8]
 8005358:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800535a:	f000 f8f7 	bl	800554c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800535e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005360:	1e5a      	subs	r2, r3, #1
 8005362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005364:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00f      	beq.n	800538e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800536e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005370:	3310      	adds	r3, #16
 8005372:	4618      	mov	r0, r3
 8005374:	f000 fe8c 	bl	8006090 <xTaskRemoveFromEventList>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d007      	beq.n	800538e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800537e:	4b3d      	ldr	r3, [pc, #244]	; (8005474 <xQueueReceive+0x1c8>)
 8005380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	f3bf 8f4f 	dsb	sy
 800538a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800538e:	f001 fdc9 	bl	8006f24 <vPortExitCritical>
				return pdPASS;
 8005392:	2301      	movs	r3, #1
 8005394:	e069      	b.n	800546a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d103      	bne.n	80053a4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800539c:	f001 fdc2 	bl	8006f24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80053a0:	2300      	movs	r3, #0
 80053a2:	e062      	b.n	800546a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d106      	bne.n	80053b8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053aa:	f107 0310 	add.w	r3, r7, #16
 80053ae:	4618      	mov	r0, r3
 80053b0:	f000 fed4 	bl	800615c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80053b4:	2301      	movs	r3, #1
 80053b6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80053b8:	f001 fdb4 	bl	8006f24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80053bc:	f000 fc34 	bl	8005c28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053c0:	f001 fd7c 	bl	8006ebc <vPortEnterCritical>
 80053c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053ca:	b25b      	sxtb	r3, r3
 80053cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d0:	d103      	bne.n	80053da <xQueueReceive+0x12e>
 80053d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053e0:	b25b      	sxtb	r3, r3
 80053e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e6:	d103      	bne.n	80053f0 <xQueueReceive+0x144>
 80053e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053f0:	f001 fd98 	bl	8006f24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053f4:	1d3a      	adds	r2, r7, #4
 80053f6:	f107 0310 	add.w	r3, r7, #16
 80053fa:	4611      	mov	r1, r2
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 fec3 	bl	8006188 <xTaskCheckForTimeOut>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d123      	bne.n	8005450 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005408:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800540a:	f000 f917 	bl	800563c <prvIsQueueEmpty>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d017      	beq.n	8005444 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005416:	3324      	adds	r3, #36	; 0x24
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	4611      	mov	r1, r2
 800541c:	4618      	mov	r0, r3
 800541e:	f000 fde3 	bl	8005fe8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005422:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005424:	f000 f8b8 	bl	8005598 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005428:	f000 fc0c 	bl	8005c44 <xTaskResumeAll>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d189      	bne.n	8005346 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8005432:	4b10      	ldr	r3, [pc, #64]	; (8005474 <xQueueReceive+0x1c8>)
 8005434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005438:	601a      	str	r2, [r3, #0]
 800543a:	f3bf 8f4f 	dsb	sy
 800543e:	f3bf 8f6f 	isb	sy
 8005442:	e780      	b.n	8005346 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005444:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005446:	f000 f8a7 	bl	8005598 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800544a:	f000 fbfb 	bl	8005c44 <xTaskResumeAll>
 800544e:	e77a      	b.n	8005346 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005450:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005452:	f000 f8a1 	bl	8005598 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005456:	f000 fbf5 	bl	8005c44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800545a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800545c:	f000 f8ee 	bl	800563c <prvIsQueueEmpty>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	f43f af6f 	beq.w	8005346 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005468:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800546a:	4618      	mov	r0, r3
 800546c:	3730      	adds	r7, #48	; 0x30
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	e000ed04 	.word	0xe000ed04

08005478 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005484:	2300      	movs	r3, #0
 8005486:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10d      	bne.n	80054b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d14d      	bne.n	800553a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f000 ffdc 	bl	8006460 <xTaskPriorityDisinherit>
 80054a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	609a      	str	r2, [r3, #8]
 80054b0:	e043      	b.n	800553a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d119      	bne.n	80054ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6858      	ldr	r0, [r3, #4]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c0:	461a      	mov	r2, r3
 80054c2:	68b9      	ldr	r1, [r7, #8]
 80054c4:	f002 f830 	bl	8007528 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d0:	441a      	add	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	685a      	ldr	r2, [r3, #4]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d32b      	bcc.n	800553a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	605a      	str	r2, [r3, #4]
 80054ea:	e026      	b.n	800553a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	68d8      	ldr	r0, [r3, #12]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f4:	461a      	mov	r2, r3
 80054f6:	68b9      	ldr	r1, [r7, #8]
 80054f8:	f002 f816 	bl	8007528 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	68da      	ldr	r2, [r3, #12]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005504:	425b      	negs	r3, r3
 8005506:	441a      	add	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	68da      	ldr	r2, [r3, #12]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	429a      	cmp	r2, r3
 8005516:	d207      	bcs.n	8005528 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	689a      	ldr	r2, [r3, #8]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005520:	425b      	negs	r3, r3
 8005522:	441a      	add	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b02      	cmp	r3, #2
 800552c:	d105      	bne.n	800553a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d002      	beq.n	800553a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	3b01      	subs	r3, #1
 8005538:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	1c5a      	adds	r2, r3, #1
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005542:	697b      	ldr	r3, [r7, #20]
}
 8005544:	4618      	mov	r0, r3
 8005546:	3718      	adds	r7, #24
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555a:	2b00      	cmp	r3, #0
 800555c:	d018      	beq.n	8005590 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68da      	ldr	r2, [r3, #12]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005566:	441a      	add	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	68da      	ldr	r2, [r3, #12]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	429a      	cmp	r2, r3
 8005576:	d303      	bcc.n	8005580 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	68d9      	ldr	r1, [r3, #12]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005588:	461a      	mov	r2, r3
 800558a:	6838      	ldr	r0, [r7, #0]
 800558c:	f001 ffcc 	bl	8007528 <memcpy>
	}
}
 8005590:	bf00      	nop
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80055a0:	f001 fc8c 	bl	8006ebc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80055ac:	e011      	b.n	80055d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d012      	beq.n	80055dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	3324      	adds	r3, #36	; 0x24
 80055ba:	4618      	mov	r0, r3
 80055bc:	f000 fd68 	bl	8006090 <xTaskRemoveFromEventList>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80055c6:	f000 fe45 	bl	8006254 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80055ca:	7bfb      	ldrb	r3, [r7, #15]
 80055cc:	3b01      	subs	r3, #1
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80055d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	dce9      	bgt.n	80055ae <prvUnlockQueue+0x16>
 80055da:	e000      	b.n	80055de <prvUnlockQueue+0x46>
					break;
 80055dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	22ff      	movs	r2, #255	; 0xff
 80055e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80055e6:	f001 fc9d 	bl	8006f24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80055ea:	f001 fc67 	bl	8006ebc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055f6:	e011      	b.n	800561c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d012      	beq.n	8005626 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	3310      	adds	r3, #16
 8005604:	4618      	mov	r0, r3
 8005606:	f000 fd43 	bl	8006090 <xTaskRemoveFromEventList>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d001      	beq.n	8005614 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005610:	f000 fe20 	bl	8006254 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005614:	7bbb      	ldrb	r3, [r7, #14]
 8005616:	3b01      	subs	r3, #1
 8005618:	b2db      	uxtb	r3, r3
 800561a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800561c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005620:	2b00      	cmp	r3, #0
 8005622:	dce9      	bgt.n	80055f8 <prvUnlockQueue+0x60>
 8005624:	e000      	b.n	8005628 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005626:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	22ff      	movs	r2, #255	; 0xff
 800562c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005630:	f001 fc78 	bl	8006f24 <vPortExitCritical>
}
 8005634:	bf00      	nop
 8005636:	3710      	adds	r7, #16
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005644:	f001 fc3a 	bl	8006ebc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564c:	2b00      	cmp	r3, #0
 800564e:	d102      	bne.n	8005656 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005650:	2301      	movs	r3, #1
 8005652:	60fb      	str	r3, [r7, #12]
 8005654:	e001      	b.n	800565a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005656:	2300      	movs	r3, #0
 8005658:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800565a:	f001 fc63 	bl	8006f24 <vPortExitCritical>

	return xReturn;
 800565e:	68fb      	ldr	r3, [r7, #12]
}
 8005660:	4618      	mov	r0, r3
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005670:	f001 fc24 	bl	8006ebc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800567c:	429a      	cmp	r2, r3
 800567e:	d102      	bne.n	8005686 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005680:	2301      	movs	r3, #1
 8005682:	60fb      	str	r3, [r7, #12]
 8005684:	e001      	b.n	800568a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005686:	2300      	movs	r3, #0
 8005688:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800568a:	f001 fc4b 	bl	8006f24 <vPortExitCritical>

	return xReturn;
 800568e:	68fb      	ldr	r3, [r7, #12]
}
 8005690:	4618      	mov	r0, r3
 8005692:	3710      	adds	r7, #16
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80056a2:	2300      	movs	r3, #0
 80056a4:	60fb      	str	r3, [r7, #12]
 80056a6:	e014      	b.n	80056d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80056a8:	4a0f      	ldr	r2, [pc, #60]	; (80056e8 <vQueueAddToRegistry+0x50>)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10b      	bne.n	80056cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80056b4:	490c      	ldr	r1, [pc, #48]	; (80056e8 <vQueueAddToRegistry+0x50>)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80056be:	4a0a      	ldr	r2, [pc, #40]	; (80056e8 <vQueueAddToRegistry+0x50>)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	00db      	lsls	r3, r3, #3
 80056c4:	4413      	add	r3, r2
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80056ca:	e006      	b.n	80056da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	3301      	adds	r3, #1
 80056d0:	60fb      	str	r3, [r7, #12]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2b07      	cmp	r3, #7
 80056d6:	d9e7      	bls.n	80056a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80056d8:	bf00      	nop
 80056da:	bf00      	nop
 80056dc:	3714      	adds	r7, #20
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	200010e4 	.word	0x200010e4

080056ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b086      	sub	sp, #24
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80056fc:	f001 fbde 	bl	8006ebc <vPortEnterCritical>
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005706:	b25b      	sxtb	r3, r3
 8005708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800570c:	d103      	bne.n	8005716 <vQueueWaitForMessageRestricted+0x2a>
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800571c:	b25b      	sxtb	r3, r3
 800571e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005722:	d103      	bne.n	800572c <vQueueWaitForMessageRestricted+0x40>
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800572c:	f001 fbfa 	bl	8006f24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005734:	2b00      	cmp	r3, #0
 8005736:	d106      	bne.n	8005746 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	3324      	adds	r3, #36	; 0x24
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	68b9      	ldr	r1, [r7, #8]
 8005740:	4618      	mov	r0, r3
 8005742:	f000 fc77 	bl	8006034 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005746:	6978      	ldr	r0, [r7, #20]
 8005748:	f7ff ff26 	bl	8005598 <prvUnlockQueue>
	}
 800574c:	bf00      	nop
 800574e:	3718      	adds	r7, #24
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005754:	b580      	push	{r7, lr}
 8005756:	b08e      	sub	sp, #56	; 0x38
 8005758:	af04      	add	r7, sp, #16
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
 8005760:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10c      	bne.n	8005782 <xTaskCreateStatic+0x2e>
	__asm volatile
 8005768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576c:	b672      	cpsid	i
 800576e:	f383 8811 	msr	BASEPRI, r3
 8005772:	f3bf 8f6f 	isb	sy
 8005776:	f3bf 8f4f 	dsb	sy
 800577a:	b662      	cpsie	i
 800577c:	623b      	str	r3, [r7, #32]
}
 800577e:	bf00      	nop
 8005780:	e7fe      	b.n	8005780 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10c      	bne.n	80057a2 <xTaskCreateStatic+0x4e>
	__asm volatile
 8005788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578c:	b672      	cpsid	i
 800578e:	f383 8811 	msr	BASEPRI, r3
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	f3bf 8f4f 	dsb	sy
 800579a:	b662      	cpsie	i
 800579c:	61fb      	str	r3, [r7, #28]
}
 800579e:	bf00      	nop
 80057a0:	e7fe      	b.n	80057a0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80057a2:	23bc      	movs	r3, #188	; 0xbc
 80057a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	2bbc      	cmp	r3, #188	; 0xbc
 80057aa:	d00c      	beq.n	80057c6 <xTaskCreateStatic+0x72>
	__asm volatile
 80057ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b0:	b672      	cpsid	i
 80057b2:	f383 8811 	msr	BASEPRI, r3
 80057b6:	f3bf 8f6f 	isb	sy
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	b662      	cpsie	i
 80057c0:	61bb      	str	r3, [r7, #24]
}
 80057c2:	bf00      	nop
 80057c4:	e7fe      	b.n	80057c4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80057c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80057c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d01e      	beq.n	800580c <xTaskCreateStatic+0xb8>
 80057ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d01b      	beq.n	800580c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80057d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80057de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e0:	2202      	movs	r2, #2
 80057e2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80057e6:	2300      	movs	r3, #0
 80057e8:	9303      	str	r3, [sp, #12]
 80057ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ec:	9302      	str	r3, [sp, #8]
 80057ee:	f107 0314 	add.w	r3, r7, #20
 80057f2:	9301      	str	r3, [sp, #4]
 80057f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	68b9      	ldr	r1, [r7, #8]
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f000 f850 	bl	80058a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005804:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005806:	f000 f8f5 	bl	80059f4 <prvAddNewTaskToReadyList>
 800580a:	e001      	b.n	8005810 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800580c:	2300      	movs	r3, #0
 800580e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005810:	697b      	ldr	r3, [r7, #20]
	}
 8005812:	4618      	mov	r0, r3
 8005814:	3728      	adds	r7, #40	; 0x28
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800581a:	b580      	push	{r7, lr}
 800581c:	b08c      	sub	sp, #48	; 0x30
 800581e:	af04      	add	r7, sp, #16
 8005820:	60f8      	str	r0, [r7, #12]
 8005822:	60b9      	str	r1, [r7, #8]
 8005824:	603b      	str	r3, [r7, #0]
 8005826:	4613      	mov	r3, r2
 8005828:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800582a:	88fb      	ldrh	r3, [r7, #6]
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	4618      	mov	r0, r3
 8005830:	f001 fc70 	bl	8007114 <pvPortMalloc>
 8005834:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00e      	beq.n	800585a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800583c:	20bc      	movs	r0, #188	; 0xbc
 800583e:	f001 fc69 	bl	8007114 <pvPortMalloc>
 8005842:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d003      	beq.n	8005852 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	631a      	str	r2, [r3, #48]	; 0x30
 8005850:	e005      	b.n	800585e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005852:	6978      	ldr	r0, [r7, #20]
 8005854:	f001 fd28 	bl	80072a8 <vPortFree>
 8005858:	e001      	b.n	800585e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800585a:	2300      	movs	r3, #0
 800585c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d017      	beq.n	8005894 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800586c:	88fa      	ldrh	r2, [r7, #6]
 800586e:	2300      	movs	r3, #0
 8005870:	9303      	str	r3, [sp, #12]
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	9302      	str	r3, [sp, #8]
 8005876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005878:	9301      	str	r3, [sp, #4]
 800587a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	68b9      	ldr	r1, [r7, #8]
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f000 f80e 	bl	80058a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005888:	69f8      	ldr	r0, [r7, #28]
 800588a:	f000 f8b3 	bl	80059f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800588e:	2301      	movs	r3, #1
 8005890:	61bb      	str	r3, [r7, #24]
 8005892:	e002      	b.n	800589a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005894:	f04f 33ff 	mov.w	r3, #4294967295
 8005898:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800589a:	69bb      	ldr	r3, [r7, #24]
	}
 800589c:	4618      	mov	r0, r3
 800589e:	3720      	adds	r7, #32
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b088      	sub	sp, #32
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
 80058b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80058b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	461a      	mov	r2, r3
 80058bc:	21a5      	movs	r1, #165	; 0xa5
 80058be:	f001 fe41 	bl	8007544 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80058c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058c6:	6879      	ldr	r1, [r7, #4]
 80058c8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80058cc:	440b      	add	r3, r1
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	4413      	add	r3, r2
 80058d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	f023 0307 	bic.w	r3, r3, #7
 80058da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	f003 0307 	and.w	r3, r3, #7
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00c      	beq.n	8005900 <prvInitialiseNewTask+0x5c>
	__asm volatile
 80058e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ea:	b672      	cpsid	i
 80058ec:	f383 8811 	msr	BASEPRI, r3
 80058f0:	f3bf 8f6f 	isb	sy
 80058f4:	f3bf 8f4f 	dsb	sy
 80058f8:	b662      	cpsie	i
 80058fa:	617b      	str	r3, [r7, #20]
}
 80058fc:	bf00      	nop
 80058fe:	e7fe      	b.n	80058fe <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d01f      	beq.n	8005946 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005906:	2300      	movs	r3, #0
 8005908:	61fb      	str	r3, [r7, #28]
 800590a:	e012      	b.n	8005932 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	4413      	add	r3, r2
 8005912:	7819      	ldrb	r1, [r3, #0]
 8005914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	4413      	add	r3, r2
 800591a:	3334      	adds	r3, #52	; 0x34
 800591c:	460a      	mov	r2, r1
 800591e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	4413      	add	r3, r2
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d006      	beq.n	800593a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	3301      	adds	r3, #1
 8005930:	61fb      	str	r3, [r7, #28]
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	2b0f      	cmp	r3, #15
 8005936:	d9e9      	bls.n	800590c <prvInitialiseNewTask+0x68>
 8005938:	e000      	b.n	800593c <prvInitialiseNewTask+0x98>
			{
				break;
 800593a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800593c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593e:	2200      	movs	r2, #0
 8005940:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005944:	e003      	b.n	800594e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005948:	2200      	movs	r2, #0
 800594a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800594e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005950:	2b37      	cmp	r3, #55	; 0x37
 8005952:	d901      	bls.n	8005958 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005954:	2337      	movs	r3, #55	; 0x37
 8005956:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800595c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800595e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005960:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005962:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005966:	2200      	movs	r2, #0
 8005968:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800596a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596c:	3304      	adds	r3, #4
 800596e:	4618      	mov	r0, r3
 8005970:	f7ff f952 	bl	8004c18 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005976:	3318      	adds	r3, #24
 8005978:	4618      	mov	r0, r3
 800597a:	f7ff f94d 	bl	8004c18 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800597e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005982:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005986:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800598a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800598e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005992:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005996:	2200      	movs	r2, #0
 8005998:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800599c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80059a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a6:	3354      	adds	r3, #84	; 0x54
 80059a8:	2260      	movs	r2, #96	; 0x60
 80059aa:	2100      	movs	r1, #0
 80059ac:	4618      	mov	r0, r3
 80059ae:	f001 fdc9 	bl	8007544 <memset>
 80059b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b4:	4a0c      	ldr	r2, [pc, #48]	; (80059e8 <prvInitialiseNewTask+0x144>)
 80059b6:	659a      	str	r2, [r3, #88]	; 0x58
 80059b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ba:	4a0c      	ldr	r2, [pc, #48]	; (80059ec <prvInitialiseNewTask+0x148>)
 80059bc:	65da      	str	r2, [r3, #92]	; 0x5c
 80059be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c0:	4a0b      	ldr	r2, [pc, #44]	; (80059f0 <prvInitialiseNewTask+0x14c>)
 80059c2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80059c4:	683a      	ldr	r2, [r7, #0]
 80059c6:	68f9      	ldr	r1, [r7, #12]
 80059c8:	69b8      	ldr	r0, [r7, #24]
 80059ca:	f001 f96b 	bl	8006ca4 <pxPortInitialiseStack>
 80059ce:	4602      	mov	r2, r0
 80059d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80059d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d002      	beq.n	80059e0 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80059da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059e0:	bf00      	nop
 80059e2:	3720      	adds	r7, #32
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	08007770 	.word	0x08007770
 80059ec:	08007790 	.word	0x08007790
 80059f0:	08007750 	.word	0x08007750

080059f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80059fc:	f001 fa5e 	bl	8006ebc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a00:	4b2d      	ldr	r3, [pc, #180]	; (8005ab8 <prvAddNewTaskToReadyList+0xc4>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	3301      	adds	r3, #1
 8005a06:	4a2c      	ldr	r2, [pc, #176]	; (8005ab8 <prvAddNewTaskToReadyList+0xc4>)
 8005a08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005a0a:	4b2c      	ldr	r3, [pc, #176]	; (8005abc <prvAddNewTaskToReadyList+0xc8>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d109      	bne.n	8005a26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a12:	4a2a      	ldr	r2, [pc, #168]	; (8005abc <prvAddNewTaskToReadyList+0xc8>)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a18:	4b27      	ldr	r3, [pc, #156]	; (8005ab8 <prvAddNewTaskToReadyList+0xc4>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d110      	bne.n	8005a42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a20:	f000 fc3c 	bl	800629c <prvInitialiseTaskLists>
 8005a24:	e00d      	b.n	8005a42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a26:	4b26      	ldr	r3, [pc, #152]	; (8005ac0 <prvAddNewTaskToReadyList+0xcc>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d109      	bne.n	8005a42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a2e:	4b23      	ldr	r3, [pc, #140]	; (8005abc <prvAddNewTaskToReadyList+0xc8>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d802      	bhi.n	8005a42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a3c:	4a1f      	ldr	r2, [pc, #124]	; (8005abc <prvAddNewTaskToReadyList+0xc8>)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a42:	4b20      	ldr	r3, [pc, #128]	; (8005ac4 <prvAddNewTaskToReadyList+0xd0>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	3301      	adds	r3, #1
 8005a48:	4a1e      	ldr	r2, [pc, #120]	; (8005ac4 <prvAddNewTaskToReadyList+0xd0>)
 8005a4a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005a4c:	4b1d      	ldr	r3, [pc, #116]	; (8005ac4 <prvAddNewTaskToReadyList+0xd0>)
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a58:	4b1b      	ldr	r3, [pc, #108]	; (8005ac8 <prvAddNewTaskToReadyList+0xd4>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d903      	bls.n	8005a68 <prvAddNewTaskToReadyList+0x74>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a64:	4a18      	ldr	r2, [pc, #96]	; (8005ac8 <prvAddNewTaskToReadyList+0xd4>)
 8005a66:	6013      	str	r3, [r2, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4413      	add	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	4a15      	ldr	r2, [pc, #84]	; (8005acc <prvAddNewTaskToReadyList+0xd8>)
 8005a76:	441a      	add	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	4610      	mov	r0, r2
 8005a80:	f7ff f8d7 	bl	8004c32 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a84:	f001 fa4e 	bl	8006f24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a88:	4b0d      	ldr	r3, [pc, #52]	; (8005ac0 <prvAddNewTaskToReadyList+0xcc>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00e      	beq.n	8005aae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a90:	4b0a      	ldr	r3, [pc, #40]	; (8005abc <prvAddNewTaskToReadyList+0xc8>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d207      	bcs.n	8005aae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a9e:	4b0c      	ldr	r3, [pc, #48]	; (8005ad0 <prvAddNewTaskToReadyList+0xdc>)
 8005aa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aa4:	601a      	str	r2, [r3, #0]
 8005aa6:	f3bf 8f4f 	dsb	sy
 8005aaa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005aae:	bf00      	nop
 8005ab0:	3708      	adds	r7, #8
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	200015f8 	.word	0x200015f8
 8005abc:	20001124 	.word	0x20001124
 8005ac0:	20001604 	.word	0x20001604
 8005ac4:	20001614 	.word	0x20001614
 8005ac8:	20001600 	.word	0x20001600
 8005acc:	20001128 	.word	0x20001128
 8005ad0:	e000ed04 	.word	0xe000ed04

08005ad4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005adc:	2300      	movs	r3, #0
 8005ade:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d019      	beq.n	8005b1a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005ae6:	4b14      	ldr	r3, [pc, #80]	; (8005b38 <vTaskDelay+0x64>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00c      	beq.n	8005b08 <vTaskDelay+0x34>
	__asm volatile
 8005aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af2:	b672      	cpsid	i
 8005af4:	f383 8811 	msr	BASEPRI, r3
 8005af8:	f3bf 8f6f 	isb	sy
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	b662      	cpsie	i
 8005b02:	60bb      	str	r3, [r7, #8]
}
 8005b04:	bf00      	nop
 8005b06:	e7fe      	b.n	8005b06 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005b08:	f000 f88e 	bl	8005c28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b0c:	2100      	movs	r1, #0
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 fd18 	bl	8006544 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005b14:	f000 f896 	bl	8005c44 <xTaskResumeAll>
 8005b18:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d107      	bne.n	8005b30 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005b20:	4b06      	ldr	r3, [pc, #24]	; (8005b3c <vTaskDelay+0x68>)
 8005b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b26:	601a      	str	r2, [r3, #0]
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b30:	bf00      	nop
 8005b32:	3710      	adds	r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	20001620 	.word	0x20001620
 8005b3c:	e000ed04 	.word	0xe000ed04

08005b40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b08a      	sub	sp, #40	; 0x28
 8005b44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b46:	2300      	movs	r3, #0
 8005b48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b4e:	463a      	mov	r2, r7
 8005b50:	1d39      	adds	r1, r7, #4
 8005b52:	f107 0308 	add.w	r3, r7, #8
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7ff f80a 	bl	8004b70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b5c:	6839      	ldr	r1, [r7, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	9202      	str	r2, [sp, #8]
 8005b64:	9301      	str	r3, [sp, #4]
 8005b66:	2300      	movs	r3, #0
 8005b68:	9300      	str	r3, [sp, #0]
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	460a      	mov	r2, r1
 8005b6e:	4926      	ldr	r1, [pc, #152]	; (8005c08 <vTaskStartScheduler+0xc8>)
 8005b70:	4826      	ldr	r0, [pc, #152]	; (8005c0c <vTaskStartScheduler+0xcc>)
 8005b72:	f7ff fdef 	bl	8005754 <xTaskCreateStatic>
 8005b76:	4603      	mov	r3, r0
 8005b78:	4a25      	ldr	r2, [pc, #148]	; (8005c10 <vTaskStartScheduler+0xd0>)
 8005b7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b7c:	4b24      	ldr	r3, [pc, #144]	; (8005c10 <vTaskStartScheduler+0xd0>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d002      	beq.n	8005b8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b84:	2301      	movs	r3, #1
 8005b86:	617b      	str	r3, [r7, #20]
 8005b88:	e001      	b.n	8005b8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d102      	bne.n	8005b9a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005b94:	f000 fd2a 	bl	80065ec <xTimerCreateTimerTask>
 8005b98:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d11d      	bne.n	8005bdc <vTaskStartScheduler+0x9c>
	__asm volatile
 8005ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba4:	b672      	cpsid	i
 8005ba6:	f383 8811 	msr	BASEPRI, r3
 8005baa:	f3bf 8f6f 	isb	sy
 8005bae:	f3bf 8f4f 	dsb	sy
 8005bb2:	b662      	cpsie	i
 8005bb4:	613b      	str	r3, [r7, #16]
}
 8005bb6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005bb8:	4b16      	ldr	r3, [pc, #88]	; (8005c14 <vTaskStartScheduler+0xd4>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	3354      	adds	r3, #84	; 0x54
 8005bbe:	4a16      	ldr	r2, [pc, #88]	; (8005c18 <vTaskStartScheduler+0xd8>)
 8005bc0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005bc2:	4b16      	ldr	r3, [pc, #88]	; (8005c1c <vTaskStartScheduler+0xdc>)
 8005bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8005bc8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005bca:	4b15      	ldr	r3, [pc, #84]	; (8005c20 <vTaskStartScheduler+0xe0>)
 8005bcc:	2201      	movs	r2, #1
 8005bce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005bd0:	4b14      	ldr	r3, [pc, #80]	; (8005c24 <vTaskStartScheduler+0xe4>)
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005bd6:	f001 f8f3 	bl	8006dc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005bda:	e010      	b.n	8005bfe <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be2:	d10c      	bne.n	8005bfe <vTaskStartScheduler+0xbe>
	__asm volatile
 8005be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be8:	b672      	cpsid	i
 8005bea:	f383 8811 	msr	BASEPRI, r3
 8005bee:	f3bf 8f6f 	isb	sy
 8005bf2:	f3bf 8f4f 	dsb	sy
 8005bf6:	b662      	cpsie	i
 8005bf8:	60fb      	str	r3, [r7, #12]
}
 8005bfa:	bf00      	nop
 8005bfc:	e7fe      	b.n	8005bfc <vTaskStartScheduler+0xbc>
}
 8005bfe:	bf00      	nop
 8005c00:	3718      	adds	r7, #24
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	080076fc 	.word	0x080076fc
 8005c0c:	0800626d 	.word	0x0800626d
 8005c10:	2000161c 	.word	0x2000161c
 8005c14:	20001124 	.word	0x20001124
 8005c18:	20000010 	.word	0x20000010
 8005c1c:	20001618 	.word	0x20001618
 8005c20:	20001604 	.word	0x20001604
 8005c24:	200015fc 	.word	0x200015fc

08005c28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c28:	b480      	push	{r7}
 8005c2a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005c2c:	4b04      	ldr	r3, [pc, #16]	; (8005c40 <vTaskSuspendAll+0x18>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	3301      	adds	r3, #1
 8005c32:	4a03      	ldr	r2, [pc, #12]	; (8005c40 <vTaskSuspendAll+0x18>)
 8005c34:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005c36:	bf00      	nop
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr
 8005c40:	20001620 	.word	0x20001620

08005c44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c52:	4b43      	ldr	r3, [pc, #268]	; (8005d60 <xTaskResumeAll+0x11c>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d10c      	bne.n	8005c74 <xTaskResumeAll+0x30>
	__asm volatile
 8005c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5e:	b672      	cpsid	i
 8005c60:	f383 8811 	msr	BASEPRI, r3
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	b662      	cpsie	i
 8005c6e:	603b      	str	r3, [r7, #0]
}
 8005c70:	bf00      	nop
 8005c72:	e7fe      	b.n	8005c72 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c74:	f001 f922 	bl	8006ebc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c78:	4b39      	ldr	r3, [pc, #228]	; (8005d60 <xTaskResumeAll+0x11c>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	4a38      	ldr	r2, [pc, #224]	; (8005d60 <xTaskResumeAll+0x11c>)
 8005c80:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c82:	4b37      	ldr	r3, [pc, #220]	; (8005d60 <xTaskResumeAll+0x11c>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d162      	bne.n	8005d50 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c8a:	4b36      	ldr	r3, [pc, #216]	; (8005d64 <xTaskResumeAll+0x120>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d05e      	beq.n	8005d50 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c92:	e02f      	b.n	8005cf4 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c94:	4b34      	ldr	r3, [pc, #208]	; (8005d68 <xTaskResumeAll+0x124>)
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	3318      	adds	r3, #24
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7ff f823 	bl	8004cec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	3304      	adds	r3, #4
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7ff f81e 	bl	8004cec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cb4:	4b2d      	ldr	r3, [pc, #180]	; (8005d6c <xTaskResumeAll+0x128>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d903      	bls.n	8005cc4 <xTaskResumeAll+0x80>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc0:	4a2a      	ldr	r2, [pc, #168]	; (8005d6c <xTaskResumeAll+0x128>)
 8005cc2:	6013      	str	r3, [r2, #0]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cc8:	4613      	mov	r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4413      	add	r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	4a27      	ldr	r2, [pc, #156]	; (8005d70 <xTaskResumeAll+0x12c>)
 8005cd2:	441a      	add	r2, r3
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	3304      	adds	r3, #4
 8005cd8:	4619      	mov	r1, r3
 8005cda:	4610      	mov	r0, r2
 8005cdc:	f7fe ffa9 	bl	8004c32 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce4:	4b23      	ldr	r3, [pc, #140]	; (8005d74 <xTaskResumeAll+0x130>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d302      	bcc.n	8005cf4 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005cee:	4b22      	ldr	r3, [pc, #136]	; (8005d78 <xTaskResumeAll+0x134>)
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cf4:	4b1c      	ldr	r3, [pc, #112]	; (8005d68 <xTaskResumeAll+0x124>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1cb      	bne.n	8005c94 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d001      	beq.n	8005d06 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005d02:	f000 fb6f 	bl	80063e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005d06:	4b1d      	ldr	r3, [pc, #116]	; (8005d7c <xTaskResumeAll+0x138>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d010      	beq.n	8005d34 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005d12:	f000 f847 	bl	8005da4 <xTaskIncrementTick>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d002      	beq.n	8005d22 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8005d1c:	4b16      	ldr	r3, [pc, #88]	; (8005d78 <xTaskResumeAll+0x134>)
 8005d1e:	2201      	movs	r2, #1
 8005d20:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	3b01      	subs	r3, #1
 8005d26:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1f1      	bne.n	8005d12 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8005d2e:	4b13      	ldr	r3, [pc, #76]	; (8005d7c <xTaskResumeAll+0x138>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d34:	4b10      	ldr	r3, [pc, #64]	; (8005d78 <xTaskResumeAll+0x134>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d009      	beq.n	8005d50 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d40:	4b0f      	ldr	r3, [pc, #60]	; (8005d80 <xTaskResumeAll+0x13c>)
 8005d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d46:	601a      	str	r2, [r3, #0]
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d50:	f001 f8e8 	bl	8006f24 <vPortExitCritical>

	return xAlreadyYielded;
 8005d54:	68bb      	ldr	r3, [r7, #8]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3710      	adds	r7, #16
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	20001620 	.word	0x20001620
 8005d64:	200015f8 	.word	0x200015f8
 8005d68:	200015b8 	.word	0x200015b8
 8005d6c:	20001600 	.word	0x20001600
 8005d70:	20001128 	.word	0x20001128
 8005d74:	20001124 	.word	0x20001124
 8005d78:	2000160c 	.word	0x2000160c
 8005d7c:	20001608 	.word	0x20001608
 8005d80:	e000ed04 	.word	0xe000ed04

08005d84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005d8a:	4b05      	ldr	r3, [pc, #20]	; (8005da0 <xTaskGetTickCount+0x1c>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005d90:	687b      	ldr	r3, [r7, #4]
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	200015fc 	.word	0x200015fc

08005da4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b086      	sub	sp, #24
 8005da8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005daa:	2300      	movs	r3, #0
 8005dac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dae:	4b50      	ldr	r3, [pc, #320]	; (8005ef0 <xTaskIncrementTick+0x14c>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f040 808b 	bne.w	8005ece <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005db8:	4b4e      	ldr	r3, [pc, #312]	; (8005ef4 <xTaskIncrementTick+0x150>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005dc0:	4a4c      	ldr	r2, [pc, #304]	; (8005ef4 <xTaskIncrementTick+0x150>)
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d122      	bne.n	8005e12 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005dcc:	4b4a      	ldr	r3, [pc, #296]	; (8005ef8 <xTaskIncrementTick+0x154>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00c      	beq.n	8005df0 <xTaskIncrementTick+0x4c>
	__asm volatile
 8005dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dda:	b672      	cpsid	i
 8005ddc:	f383 8811 	msr	BASEPRI, r3
 8005de0:	f3bf 8f6f 	isb	sy
 8005de4:	f3bf 8f4f 	dsb	sy
 8005de8:	b662      	cpsie	i
 8005dea:	603b      	str	r3, [r7, #0]
}
 8005dec:	bf00      	nop
 8005dee:	e7fe      	b.n	8005dee <xTaskIncrementTick+0x4a>
 8005df0:	4b41      	ldr	r3, [pc, #260]	; (8005ef8 <xTaskIncrementTick+0x154>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	60fb      	str	r3, [r7, #12]
 8005df6:	4b41      	ldr	r3, [pc, #260]	; (8005efc <xTaskIncrementTick+0x158>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a3f      	ldr	r2, [pc, #252]	; (8005ef8 <xTaskIncrementTick+0x154>)
 8005dfc:	6013      	str	r3, [r2, #0]
 8005dfe:	4a3f      	ldr	r2, [pc, #252]	; (8005efc <xTaskIncrementTick+0x158>)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6013      	str	r3, [r2, #0]
 8005e04:	4b3e      	ldr	r3, [pc, #248]	; (8005f00 <xTaskIncrementTick+0x15c>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	4a3d      	ldr	r2, [pc, #244]	; (8005f00 <xTaskIncrementTick+0x15c>)
 8005e0c:	6013      	str	r3, [r2, #0]
 8005e0e:	f000 fae9 	bl	80063e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e12:	4b3c      	ldr	r3, [pc, #240]	; (8005f04 <xTaskIncrementTick+0x160>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d349      	bcc.n	8005eb0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e1c:	4b36      	ldr	r3, [pc, #216]	; (8005ef8 <xTaskIncrementTick+0x154>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d104      	bne.n	8005e30 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e26:	4b37      	ldr	r3, [pc, #220]	; (8005f04 <xTaskIncrementTick+0x160>)
 8005e28:	f04f 32ff 	mov.w	r2, #4294967295
 8005e2c:	601a      	str	r2, [r3, #0]
					break;
 8005e2e:	e03f      	b.n	8005eb0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e30:	4b31      	ldr	r3, [pc, #196]	; (8005ef8 <xTaskIncrementTick+0x154>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d203      	bcs.n	8005e50 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e48:	4a2e      	ldr	r2, [pc, #184]	; (8005f04 <xTaskIncrementTick+0x160>)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005e4e:	e02f      	b.n	8005eb0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	3304      	adds	r3, #4
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7fe ff49 	bl	8004cec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d004      	beq.n	8005e6c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	3318      	adds	r3, #24
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7fe ff40 	bl	8004cec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e70:	4b25      	ldr	r3, [pc, #148]	; (8005f08 <xTaskIncrementTick+0x164>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d903      	bls.n	8005e80 <xTaskIncrementTick+0xdc>
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7c:	4a22      	ldr	r2, [pc, #136]	; (8005f08 <xTaskIncrementTick+0x164>)
 8005e7e:	6013      	str	r3, [r2, #0]
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e84:	4613      	mov	r3, r2
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	4413      	add	r3, r2
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	4a1f      	ldr	r2, [pc, #124]	; (8005f0c <xTaskIncrementTick+0x168>)
 8005e8e:	441a      	add	r2, r3
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	3304      	adds	r3, #4
 8005e94:	4619      	mov	r1, r3
 8005e96:	4610      	mov	r0, r2
 8005e98:	f7fe fecb 	bl	8004c32 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea0:	4b1b      	ldr	r3, [pc, #108]	; (8005f10 <xTaskIncrementTick+0x16c>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d3b8      	bcc.n	8005e1c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005eae:	e7b5      	b.n	8005e1c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005eb0:	4b17      	ldr	r3, [pc, #92]	; (8005f10 <xTaskIncrementTick+0x16c>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eb6:	4915      	ldr	r1, [pc, #84]	; (8005f0c <xTaskIncrementTick+0x168>)
 8005eb8:	4613      	mov	r3, r2
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	4413      	add	r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	440b      	add	r3, r1
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d907      	bls.n	8005ed8 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	617b      	str	r3, [r7, #20]
 8005ecc:	e004      	b.n	8005ed8 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005ece:	4b11      	ldr	r3, [pc, #68]	; (8005f14 <xTaskIncrementTick+0x170>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	4a0f      	ldr	r2, [pc, #60]	; (8005f14 <xTaskIncrementTick+0x170>)
 8005ed6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005ed8:	4b0f      	ldr	r3, [pc, #60]	; (8005f18 <xTaskIncrementTick+0x174>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d001      	beq.n	8005ee4 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005ee4:	697b      	ldr	r3, [r7, #20]
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3718      	adds	r7, #24
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	20001620 	.word	0x20001620
 8005ef4:	200015fc 	.word	0x200015fc
 8005ef8:	200015b0 	.word	0x200015b0
 8005efc:	200015b4 	.word	0x200015b4
 8005f00:	20001610 	.word	0x20001610
 8005f04:	20001618 	.word	0x20001618
 8005f08:	20001600 	.word	0x20001600
 8005f0c:	20001128 	.word	0x20001128
 8005f10:	20001124 	.word	0x20001124
 8005f14:	20001608 	.word	0x20001608
 8005f18:	2000160c 	.word	0x2000160c

08005f1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f22:	4b2b      	ldr	r3, [pc, #172]	; (8005fd0 <vTaskSwitchContext+0xb4>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005f2a:	4b2a      	ldr	r3, [pc, #168]	; (8005fd4 <vTaskSwitchContext+0xb8>)
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005f30:	e048      	b.n	8005fc4 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8005f32:	4b28      	ldr	r3, [pc, #160]	; (8005fd4 <vTaskSwitchContext+0xb8>)
 8005f34:	2200      	movs	r2, #0
 8005f36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f38:	4b27      	ldr	r3, [pc, #156]	; (8005fd8 <vTaskSwitchContext+0xbc>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	60fb      	str	r3, [r7, #12]
 8005f3e:	e012      	b.n	8005f66 <vTaskSwitchContext+0x4a>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10c      	bne.n	8005f60 <vTaskSwitchContext+0x44>
	__asm volatile
 8005f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4a:	b672      	cpsid	i
 8005f4c:	f383 8811 	msr	BASEPRI, r3
 8005f50:	f3bf 8f6f 	isb	sy
 8005f54:	f3bf 8f4f 	dsb	sy
 8005f58:	b662      	cpsie	i
 8005f5a:	607b      	str	r3, [r7, #4]
}
 8005f5c:	bf00      	nop
 8005f5e:	e7fe      	b.n	8005f5e <vTaskSwitchContext+0x42>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	3b01      	subs	r3, #1
 8005f64:	60fb      	str	r3, [r7, #12]
 8005f66:	491d      	ldr	r1, [pc, #116]	; (8005fdc <vTaskSwitchContext+0xc0>)
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	440b      	add	r3, r1
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d0e2      	beq.n	8005f40 <vTaskSwitchContext+0x24>
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	4413      	add	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4a15      	ldr	r2, [pc, #84]	; (8005fdc <vTaskSwitchContext+0xc0>)
 8005f86:	4413      	add	r3, r2
 8005f88:	60bb      	str	r3, [r7, #8]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	685a      	ldr	r2, [r3, #4]
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	605a      	str	r2, [r3, #4]
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	685a      	ldr	r2, [r3, #4]
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	3308      	adds	r3, #8
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d104      	bne.n	8005faa <vTaskSwitchContext+0x8e>
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	685a      	ldr	r2, [r3, #4]
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	605a      	str	r2, [r3, #4]
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	4a0b      	ldr	r2, [pc, #44]	; (8005fe0 <vTaskSwitchContext+0xc4>)
 8005fb2:	6013      	str	r3, [r2, #0]
 8005fb4:	4a08      	ldr	r2, [pc, #32]	; (8005fd8 <vTaskSwitchContext+0xbc>)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005fba:	4b09      	ldr	r3, [pc, #36]	; (8005fe0 <vTaskSwitchContext+0xc4>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	3354      	adds	r3, #84	; 0x54
 8005fc0:	4a08      	ldr	r2, [pc, #32]	; (8005fe4 <vTaskSwitchContext+0xc8>)
 8005fc2:	6013      	str	r3, [r2, #0]
}
 8005fc4:	bf00      	nop
 8005fc6:	3714      	adds	r7, #20
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr
 8005fd0:	20001620 	.word	0x20001620
 8005fd4:	2000160c 	.word	0x2000160c
 8005fd8:	20001600 	.word	0x20001600
 8005fdc:	20001128 	.word	0x20001128
 8005fe0:	20001124 	.word	0x20001124
 8005fe4:	20000010 	.word	0x20000010

08005fe8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10c      	bne.n	8006012 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8005ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffc:	b672      	cpsid	i
 8005ffe:	f383 8811 	msr	BASEPRI, r3
 8006002:	f3bf 8f6f 	isb	sy
 8006006:	f3bf 8f4f 	dsb	sy
 800600a:	b662      	cpsie	i
 800600c:	60fb      	str	r3, [r7, #12]
}
 800600e:	bf00      	nop
 8006010:	e7fe      	b.n	8006010 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006012:	4b07      	ldr	r3, [pc, #28]	; (8006030 <vTaskPlaceOnEventList+0x48>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	3318      	adds	r3, #24
 8006018:	4619      	mov	r1, r3
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f7fe fe2d 	bl	8004c7a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006020:	2101      	movs	r1, #1
 8006022:	6838      	ldr	r0, [r7, #0]
 8006024:	f000 fa8e 	bl	8006544 <prvAddCurrentTaskToDelayedList>
}
 8006028:	bf00      	nop
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	20001124 	.word	0x20001124

08006034 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10c      	bne.n	8006060 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8006046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604a:	b672      	cpsid	i
 800604c:	f383 8811 	msr	BASEPRI, r3
 8006050:	f3bf 8f6f 	isb	sy
 8006054:	f3bf 8f4f 	dsb	sy
 8006058:	b662      	cpsie	i
 800605a:	617b      	str	r3, [r7, #20]
}
 800605c:	bf00      	nop
 800605e:	e7fe      	b.n	800605e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006060:	4b0a      	ldr	r3, [pc, #40]	; (800608c <vTaskPlaceOnEventListRestricted+0x58>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	3318      	adds	r3, #24
 8006066:	4619      	mov	r1, r3
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f7fe fde2 	bl	8004c32 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d002      	beq.n	800607a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8006074:	f04f 33ff 	mov.w	r3, #4294967295
 8006078:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800607a:	6879      	ldr	r1, [r7, #4]
 800607c:	68b8      	ldr	r0, [r7, #8]
 800607e:	f000 fa61 	bl	8006544 <prvAddCurrentTaskToDelayedList>
	}
 8006082:	bf00      	nop
 8006084:	3718      	adds	r7, #24
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	20001124 	.word	0x20001124

08006090 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b086      	sub	sp, #24
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10c      	bne.n	80060c0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80060a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060aa:	b672      	cpsid	i
 80060ac:	f383 8811 	msr	BASEPRI, r3
 80060b0:	f3bf 8f6f 	isb	sy
 80060b4:	f3bf 8f4f 	dsb	sy
 80060b8:	b662      	cpsie	i
 80060ba:	60fb      	str	r3, [r7, #12]
}
 80060bc:	bf00      	nop
 80060be:	e7fe      	b.n	80060be <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	3318      	adds	r3, #24
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7fe fe11 	bl	8004cec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060ca:	4b1e      	ldr	r3, [pc, #120]	; (8006144 <xTaskRemoveFromEventList+0xb4>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d11d      	bne.n	800610e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	3304      	adds	r3, #4
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7fe fe08 	bl	8004cec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e0:	4b19      	ldr	r3, [pc, #100]	; (8006148 <xTaskRemoveFromEventList+0xb8>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d903      	bls.n	80060f0 <xTaskRemoveFromEventList+0x60>
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ec:	4a16      	ldr	r2, [pc, #88]	; (8006148 <xTaskRemoveFromEventList+0xb8>)
 80060ee:	6013      	str	r3, [r2, #0]
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f4:	4613      	mov	r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4413      	add	r3, r2
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	4a13      	ldr	r2, [pc, #76]	; (800614c <xTaskRemoveFromEventList+0xbc>)
 80060fe:	441a      	add	r2, r3
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	3304      	adds	r3, #4
 8006104:	4619      	mov	r1, r3
 8006106:	4610      	mov	r0, r2
 8006108:	f7fe fd93 	bl	8004c32 <vListInsertEnd>
 800610c:	e005      	b.n	800611a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	3318      	adds	r3, #24
 8006112:	4619      	mov	r1, r3
 8006114:	480e      	ldr	r0, [pc, #56]	; (8006150 <xTaskRemoveFromEventList+0xc0>)
 8006116:	f7fe fd8c 	bl	8004c32 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800611e:	4b0d      	ldr	r3, [pc, #52]	; (8006154 <xTaskRemoveFromEventList+0xc4>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006124:	429a      	cmp	r2, r3
 8006126:	d905      	bls.n	8006134 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006128:	2301      	movs	r3, #1
 800612a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800612c:	4b0a      	ldr	r3, [pc, #40]	; (8006158 <xTaskRemoveFromEventList+0xc8>)
 800612e:	2201      	movs	r2, #1
 8006130:	601a      	str	r2, [r3, #0]
 8006132:	e001      	b.n	8006138 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8006134:	2300      	movs	r3, #0
 8006136:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006138:	697b      	ldr	r3, [r7, #20]
}
 800613a:	4618      	mov	r0, r3
 800613c:	3718      	adds	r7, #24
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	20001620 	.word	0x20001620
 8006148:	20001600 	.word	0x20001600
 800614c:	20001128 	.word	0x20001128
 8006150:	200015b8 	.word	0x200015b8
 8006154:	20001124 	.word	0x20001124
 8006158:	2000160c 	.word	0x2000160c

0800615c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006164:	4b06      	ldr	r3, [pc, #24]	; (8006180 <vTaskInternalSetTimeOutState+0x24>)
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800616c:	4b05      	ldr	r3, [pc, #20]	; (8006184 <vTaskInternalSetTimeOutState+0x28>)
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	605a      	str	r2, [r3, #4]
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr
 8006180:	20001610 	.word	0x20001610
 8006184:	200015fc 	.word	0x200015fc

08006188 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b088      	sub	sp, #32
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d10c      	bne.n	80061b2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8006198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619c:	b672      	cpsid	i
 800619e:	f383 8811 	msr	BASEPRI, r3
 80061a2:	f3bf 8f6f 	isb	sy
 80061a6:	f3bf 8f4f 	dsb	sy
 80061aa:	b662      	cpsie	i
 80061ac:	613b      	str	r3, [r7, #16]
}
 80061ae:	bf00      	nop
 80061b0:	e7fe      	b.n	80061b0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d10c      	bne.n	80061d2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80061b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061bc:	b672      	cpsid	i
 80061be:	f383 8811 	msr	BASEPRI, r3
 80061c2:	f3bf 8f6f 	isb	sy
 80061c6:	f3bf 8f4f 	dsb	sy
 80061ca:	b662      	cpsie	i
 80061cc:	60fb      	str	r3, [r7, #12]
}
 80061ce:	bf00      	nop
 80061d0:	e7fe      	b.n	80061d0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80061d2:	f000 fe73 	bl	8006ebc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80061d6:	4b1d      	ldr	r3, [pc, #116]	; (800624c <xTaskCheckForTimeOut+0xc4>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	69ba      	ldr	r2, [r7, #24]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ee:	d102      	bne.n	80061f6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80061f0:	2300      	movs	r3, #0
 80061f2:	61fb      	str	r3, [r7, #28]
 80061f4:	e023      	b.n	800623e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	4b15      	ldr	r3, [pc, #84]	; (8006250 <xTaskCheckForTimeOut+0xc8>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d007      	beq.n	8006212 <xTaskCheckForTimeOut+0x8a>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	69ba      	ldr	r2, [r7, #24]
 8006208:	429a      	cmp	r2, r3
 800620a:	d302      	bcc.n	8006212 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800620c:	2301      	movs	r3, #1
 800620e:	61fb      	str	r3, [r7, #28]
 8006210:	e015      	b.n	800623e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	429a      	cmp	r2, r3
 800621a:	d20b      	bcs.n	8006234 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	1ad2      	subs	r2, r2, r3
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f7ff ff97 	bl	800615c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800622e:	2300      	movs	r3, #0
 8006230:	61fb      	str	r3, [r7, #28]
 8006232:	e004      	b.n	800623e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	2200      	movs	r2, #0
 8006238:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800623a:	2301      	movs	r3, #1
 800623c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800623e:	f000 fe71 	bl	8006f24 <vPortExitCritical>

	return xReturn;
 8006242:	69fb      	ldr	r3, [r7, #28]
}
 8006244:	4618      	mov	r0, r3
 8006246:	3720      	adds	r7, #32
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	200015fc 	.word	0x200015fc
 8006250:	20001610 	.word	0x20001610

08006254 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006254:	b480      	push	{r7}
 8006256:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006258:	4b03      	ldr	r3, [pc, #12]	; (8006268 <vTaskMissedYield+0x14>)
 800625a:	2201      	movs	r2, #1
 800625c:	601a      	str	r2, [r3, #0]
}
 800625e:	bf00      	nop
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr
 8006268:	2000160c 	.word	0x2000160c

0800626c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006274:	f000 f852 	bl	800631c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006278:	4b06      	ldr	r3, [pc, #24]	; (8006294 <prvIdleTask+0x28>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d9f9      	bls.n	8006274 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006280:	4b05      	ldr	r3, [pc, #20]	; (8006298 <prvIdleTask+0x2c>)
 8006282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006286:	601a      	str	r2, [r3, #0]
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006290:	e7f0      	b.n	8006274 <prvIdleTask+0x8>
 8006292:	bf00      	nop
 8006294:	20001128 	.word	0x20001128
 8006298:	e000ed04 	.word	0xe000ed04

0800629c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062a2:	2300      	movs	r3, #0
 80062a4:	607b      	str	r3, [r7, #4]
 80062a6:	e00c      	b.n	80062c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	4613      	mov	r3, r2
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	4413      	add	r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4a12      	ldr	r2, [pc, #72]	; (80062fc <prvInitialiseTaskLists+0x60>)
 80062b4:	4413      	add	r3, r2
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7fe fc8e 	bl	8004bd8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	3301      	adds	r3, #1
 80062c0:	607b      	str	r3, [r7, #4]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2b37      	cmp	r3, #55	; 0x37
 80062c6:	d9ef      	bls.n	80062a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80062c8:	480d      	ldr	r0, [pc, #52]	; (8006300 <prvInitialiseTaskLists+0x64>)
 80062ca:	f7fe fc85 	bl	8004bd8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80062ce:	480d      	ldr	r0, [pc, #52]	; (8006304 <prvInitialiseTaskLists+0x68>)
 80062d0:	f7fe fc82 	bl	8004bd8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80062d4:	480c      	ldr	r0, [pc, #48]	; (8006308 <prvInitialiseTaskLists+0x6c>)
 80062d6:	f7fe fc7f 	bl	8004bd8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80062da:	480c      	ldr	r0, [pc, #48]	; (800630c <prvInitialiseTaskLists+0x70>)
 80062dc:	f7fe fc7c 	bl	8004bd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80062e0:	480b      	ldr	r0, [pc, #44]	; (8006310 <prvInitialiseTaskLists+0x74>)
 80062e2:	f7fe fc79 	bl	8004bd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80062e6:	4b0b      	ldr	r3, [pc, #44]	; (8006314 <prvInitialiseTaskLists+0x78>)
 80062e8:	4a05      	ldr	r2, [pc, #20]	; (8006300 <prvInitialiseTaskLists+0x64>)
 80062ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80062ec:	4b0a      	ldr	r3, [pc, #40]	; (8006318 <prvInitialiseTaskLists+0x7c>)
 80062ee:	4a05      	ldr	r2, [pc, #20]	; (8006304 <prvInitialiseTaskLists+0x68>)
 80062f0:	601a      	str	r2, [r3, #0]
}
 80062f2:	bf00      	nop
 80062f4:	3708      	adds	r7, #8
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	20001128 	.word	0x20001128
 8006300:	20001588 	.word	0x20001588
 8006304:	2000159c 	.word	0x2000159c
 8006308:	200015b8 	.word	0x200015b8
 800630c:	200015cc 	.word	0x200015cc
 8006310:	200015e4 	.word	0x200015e4
 8006314:	200015b0 	.word	0x200015b0
 8006318:	200015b4 	.word	0x200015b4

0800631c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006322:	e019      	b.n	8006358 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006324:	f000 fdca 	bl	8006ebc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006328:	4b10      	ldr	r3, [pc, #64]	; (800636c <prvCheckTasksWaitingTermination+0x50>)
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	3304      	adds	r3, #4
 8006334:	4618      	mov	r0, r3
 8006336:	f7fe fcd9 	bl	8004cec <uxListRemove>
				--uxCurrentNumberOfTasks;
 800633a:	4b0d      	ldr	r3, [pc, #52]	; (8006370 <prvCheckTasksWaitingTermination+0x54>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	3b01      	subs	r3, #1
 8006340:	4a0b      	ldr	r2, [pc, #44]	; (8006370 <prvCheckTasksWaitingTermination+0x54>)
 8006342:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006344:	4b0b      	ldr	r3, [pc, #44]	; (8006374 <prvCheckTasksWaitingTermination+0x58>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	3b01      	subs	r3, #1
 800634a:	4a0a      	ldr	r2, [pc, #40]	; (8006374 <prvCheckTasksWaitingTermination+0x58>)
 800634c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800634e:	f000 fde9 	bl	8006f24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f810 	bl	8006378 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006358:	4b06      	ldr	r3, [pc, #24]	; (8006374 <prvCheckTasksWaitingTermination+0x58>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d1e1      	bne.n	8006324 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006360:	bf00      	nop
 8006362:	bf00      	nop
 8006364:	3708      	adds	r7, #8
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	200015cc 	.word	0x200015cc
 8006370:	200015f8 	.word	0x200015f8
 8006374:	200015e0 	.word	0x200015e0

08006378 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	3354      	adds	r3, #84	; 0x54
 8006384:	4618      	mov	r0, r3
 8006386:	f001 f8f3 	bl	8007570 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006390:	2b00      	cmp	r3, #0
 8006392:	d108      	bne.n	80063a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006398:	4618      	mov	r0, r3
 800639a:	f000 ff85 	bl	80072a8 <vPortFree>
				vPortFree( pxTCB );
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 ff82 	bl	80072a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80063a4:	e01a      	b.n	80063dc <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d103      	bne.n	80063b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 ff79 	bl	80072a8 <vPortFree>
	}
 80063b6:	e011      	b.n	80063dc <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d00c      	beq.n	80063dc <prvDeleteTCB+0x64>
	__asm volatile
 80063c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c6:	b672      	cpsid	i
 80063c8:	f383 8811 	msr	BASEPRI, r3
 80063cc:	f3bf 8f6f 	isb	sy
 80063d0:	f3bf 8f4f 	dsb	sy
 80063d4:	b662      	cpsie	i
 80063d6:	60fb      	str	r3, [r7, #12]
}
 80063d8:	bf00      	nop
 80063da:	e7fe      	b.n	80063da <prvDeleteTCB+0x62>
	}
 80063dc:	bf00      	nop
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063ea:	4b0c      	ldr	r3, [pc, #48]	; (800641c <prvResetNextTaskUnblockTime+0x38>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d104      	bne.n	80063fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80063f4:	4b0a      	ldr	r3, [pc, #40]	; (8006420 <prvResetNextTaskUnblockTime+0x3c>)
 80063f6:	f04f 32ff 	mov.w	r2, #4294967295
 80063fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80063fc:	e008      	b.n	8006410 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063fe:	4b07      	ldr	r3, [pc, #28]	; (800641c <prvResetNextTaskUnblockTime+0x38>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	4a04      	ldr	r2, [pc, #16]	; (8006420 <prvResetNextTaskUnblockTime+0x3c>)
 800640e:	6013      	str	r3, [r2, #0]
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr
 800641c:	200015b0 	.word	0x200015b0
 8006420:	20001618 	.word	0x20001618

08006424 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800642a:	4b0b      	ldr	r3, [pc, #44]	; (8006458 <xTaskGetSchedulerState+0x34>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d102      	bne.n	8006438 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006432:	2301      	movs	r3, #1
 8006434:	607b      	str	r3, [r7, #4]
 8006436:	e008      	b.n	800644a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006438:	4b08      	ldr	r3, [pc, #32]	; (800645c <xTaskGetSchedulerState+0x38>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d102      	bne.n	8006446 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006440:	2302      	movs	r3, #2
 8006442:	607b      	str	r3, [r7, #4]
 8006444:	e001      	b.n	800644a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006446:	2300      	movs	r3, #0
 8006448:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800644a:	687b      	ldr	r3, [r7, #4]
	}
 800644c:	4618      	mov	r0, r3
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr
 8006458:	20001604 	.word	0x20001604
 800645c:	20001620 	.word	0x20001620

08006460 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800646c:	2300      	movs	r3, #0
 800646e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d05a      	beq.n	800652c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006476:	4b30      	ldr	r3, [pc, #192]	; (8006538 <xTaskPriorityDisinherit+0xd8>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	429a      	cmp	r2, r3
 800647e:	d00c      	beq.n	800649a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8006480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006484:	b672      	cpsid	i
 8006486:	f383 8811 	msr	BASEPRI, r3
 800648a:	f3bf 8f6f 	isb	sy
 800648e:	f3bf 8f4f 	dsb	sy
 8006492:	b662      	cpsie	i
 8006494:	60fb      	str	r3, [r7, #12]
}
 8006496:	bf00      	nop
 8006498:	e7fe      	b.n	8006498 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10c      	bne.n	80064bc <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80064a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a6:	b672      	cpsid	i
 80064a8:	f383 8811 	msr	BASEPRI, r3
 80064ac:	f3bf 8f6f 	isb	sy
 80064b0:	f3bf 8f4f 	dsb	sy
 80064b4:	b662      	cpsie	i
 80064b6:	60bb      	str	r3, [r7, #8]
}
 80064b8:	bf00      	nop
 80064ba:	e7fe      	b.n	80064ba <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064c0:	1e5a      	subs	r2, r3, #1
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d02c      	beq.n	800652c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d128      	bne.n	800652c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	3304      	adds	r3, #4
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fe fc04 	bl	8004cec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064fc:	4b0f      	ldr	r3, [pc, #60]	; (800653c <xTaskPriorityDisinherit+0xdc>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	429a      	cmp	r2, r3
 8006502:	d903      	bls.n	800650c <xTaskPriorityDisinherit+0xac>
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006508:	4a0c      	ldr	r2, [pc, #48]	; (800653c <xTaskPriorityDisinherit+0xdc>)
 800650a:	6013      	str	r3, [r2, #0]
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006510:	4613      	mov	r3, r2
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4413      	add	r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4a09      	ldr	r2, [pc, #36]	; (8006540 <xTaskPriorityDisinherit+0xe0>)
 800651a:	441a      	add	r2, r3
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	3304      	adds	r3, #4
 8006520:	4619      	mov	r1, r3
 8006522:	4610      	mov	r0, r2
 8006524:	f7fe fb85 	bl	8004c32 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006528:	2301      	movs	r3, #1
 800652a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800652c:	697b      	ldr	r3, [r7, #20]
	}
 800652e:	4618      	mov	r0, r3
 8006530:	3718      	adds	r7, #24
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	20001124 	.word	0x20001124
 800653c:	20001600 	.word	0x20001600
 8006540:	20001128 	.word	0x20001128

08006544 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800654e:	4b21      	ldr	r3, [pc, #132]	; (80065d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006554:	4b20      	ldr	r3, [pc, #128]	; (80065d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	3304      	adds	r3, #4
 800655a:	4618      	mov	r0, r3
 800655c:	f7fe fbc6 	bl	8004cec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006566:	d10a      	bne.n	800657e <prvAddCurrentTaskToDelayedList+0x3a>
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d007      	beq.n	800657e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800656e:	4b1a      	ldr	r3, [pc, #104]	; (80065d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	3304      	adds	r3, #4
 8006574:	4619      	mov	r1, r3
 8006576:	4819      	ldr	r0, [pc, #100]	; (80065dc <prvAddCurrentTaskToDelayedList+0x98>)
 8006578:	f7fe fb5b 	bl	8004c32 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800657c:	e026      	b.n	80065cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4413      	add	r3, r2
 8006584:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006586:	4b14      	ldr	r3, [pc, #80]	; (80065d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800658e:	68ba      	ldr	r2, [r7, #8]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	429a      	cmp	r2, r3
 8006594:	d209      	bcs.n	80065aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006596:	4b12      	ldr	r3, [pc, #72]	; (80065e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	4b0f      	ldr	r3, [pc, #60]	; (80065d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	3304      	adds	r3, #4
 80065a0:	4619      	mov	r1, r3
 80065a2:	4610      	mov	r0, r2
 80065a4:	f7fe fb69 	bl	8004c7a <vListInsert>
}
 80065a8:	e010      	b.n	80065cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065aa:	4b0e      	ldr	r3, [pc, #56]	; (80065e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	4b0a      	ldr	r3, [pc, #40]	; (80065d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	3304      	adds	r3, #4
 80065b4:	4619      	mov	r1, r3
 80065b6:	4610      	mov	r0, r2
 80065b8:	f7fe fb5f 	bl	8004c7a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80065bc:	4b0a      	ldr	r3, [pc, #40]	; (80065e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68ba      	ldr	r2, [r7, #8]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d202      	bcs.n	80065cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80065c6:	4a08      	ldr	r2, [pc, #32]	; (80065e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	6013      	str	r3, [r2, #0]
}
 80065cc:	bf00      	nop
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	200015fc 	.word	0x200015fc
 80065d8:	20001124 	.word	0x20001124
 80065dc:	200015e4 	.word	0x200015e4
 80065e0:	200015b4 	.word	0x200015b4
 80065e4:	200015b0 	.word	0x200015b0
 80065e8:	20001618 	.word	0x20001618

080065ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b08a      	sub	sp, #40	; 0x28
 80065f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80065f2:	2300      	movs	r3, #0
 80065f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80065f6:	f000 fb15 	bl	8006c24 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80065fa:	4b1d      	ldr	r3, [pc, #116]	; (8006670 <xTimerCreateTimerTask+0x84>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d021      	beq.n	8006646 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006602:	2300      	movs	r3, #0
 8006604:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006606:	2300      	movs	r3, #0
 8006608:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800660a:	1d3a      	adds	r2, r7, #4
 800660c:	f107 0108 	add.w	r1, r7, #8
 8006610:	f107 030c 	add.w	r3, r7, #12
 8006614:	4618      	mov	r0, r3
 8006616:	f7fe fac5 	bl	8004ba4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800661a:	6879      	ldr	r1, [r7, #4]
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	9202      	str	r2, [sp, #8]
 8006622:	9301      	str	r3, [sp, #4]
 8006624:	2302      	movs	r3, #2
 8006626:	9300      	str	r3, [sp, #0]
 8006628:	2300      	movs	r3, #0
 800662a:	460a      	mov	r2, r1
 800662c:	4911      	ldr	r1, [pc, #68]	; (8006674 <xTimerCreateTimerTask+0x88>)
 800662e:	4812      	ldr	r0, [pc, #72]	; (8006678 <xTimerCreateTimerTask+0x8c>)
 8006630:	f7ff f890 	bl	8005754 <xTaskCreateStatic>
 8006634:	4603      	mov	r3, r0
 8006636:	4a11      	ldr	r2, [pc, #68]	; (800667c <xTimerCreateTimerTask+0x90>)
 8006638:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800663a:	4b10      	ldr	r3, [pc, #64]	; (800667c <xTimerCreateTimerTask+0x90>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d001      	beq.n	8006646 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006642:	2301      	movs	r3, #1
 8006644:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d10c      	bne.n	8006666 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800664c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006650:	b672      	cpsid	i
 8006652:	f383 8811 	msr	BASEPRI, r3
 8006656:	f3bf 8f6f 	isb	sy
 800665a:	f3bf 8f4f 	dsb	sy
 800665e:	b662      	cpsie	i
 8006660:	613b      	str	r3, [r7, #16]
}
 8006662:	bf00      	nop
 8006664:	e7fe      	b.n	8006664 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8006666:	697b      	ldr	r3, [r7, #20]
}
 8006668:	4618      	mov	r0, r3
 800666a:	3718      	adds	r7, #24
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}
 8006670:	20001654 	.word	0x20001654
 8006674:	08007704 	.word	0x08007704
 8006678:	080067bd 	.word	0x080067bd
 800667c:	20001658 	.word	0x20001658

08006680 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b08a      	sub	sp, #40	; 0x28
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
 800668c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800668e:	2300      	movs	r3, #0
 8006690:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d10c      	bne.n	80066b2 <xTimerGenericCommand+0x32>
	__asm volatile
 8006698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669c:	b672      	cpsid	i
 800669e:	f383 8811 	msr	BASEPRI, r3
 80066a2:	f3bf 8f6f 	isb	sy
 80066a6:	f3bf 8f4f 	dsb	sy
 80066aa:	b662      	cpsie	i
 80066ac:	623b      	str	r3, [r7, #32]
}
 80066ae:	bf00      	nop
 80066b0:	e7fe      	b.n	80066b0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80066b2:	4b1a      	ldr	r3, [pc, #104]	; (800671c <xTimerGenericCommand+0x9c>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d02a      	beq.n	8006710 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	2b05      	cmp	r3, #5
 80066ca:	dc18      	bgt.n	80066fe <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80066cc:	f7ff feaa 	bl	8006424 <xTaskGetSchedulerState>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	d109      	bne.n	80066ea <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80066d6:	4b11      	ldr	r3, [pc, #68]	; (800671c <xTimerGenericCommand+0x9c>)
 80066d8:	6818      	ldr	r0, [r3, #0]
 80066da:	f107 0110 	add.w	r1, r7, #16
 80066de:	2300      	movs	r3, #0
 80066e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066e2:	f7fe fc3d 	bl	8004f60 <xQueueGenericSend>
 80066e6:	6278      	str	r0, [r7, #36]	; 0x24
 80066e8:	e012      	b.n	8006710 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80066ea:	4b0c      	ldr	r3, [pc, #48]	; (800671c <xTimerGenericCommand+0x9c>)
 80066ec:	6818      	ldr	r0, [r3, #0]
 80066ee:	f107 0110 	add.w	r1, r7, #16
 80066f2:	2300      	movs	r3, #0
 80066f4:	2200      	movs	r2, #0
 80066f6:	f7fe fc33 	bl	8004f60 <xQueueGenericSend>
 80066fa:	6278      	str	r0, [r7, #36]	; 0x24
 80066fc:	e008      	b.n	8006710 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80066fe:	4b07      	ldr	r3, [pc, #28]	; (800671c <xTimerGenericCommand+0x9c>)
 8006700:	6818      	ldr	r0, [r3, #0]
 8006702:	f107 0110 	add.w	r1, r7, #16
 8006706:	2300      	movs	r3, #0
 8006708:	683a      	ldr	r2, [r7, #0]
 800670a:	f7fe fd2f 	bl	800516c <xQueueGenericSendFromISR>
 800670e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006712:	4618      	mov	r0, r3
 8006714:	3728      	adds	r7, #40	; 0x28
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	20001654 	.word	0x20001654

08006720 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b088      	sub	sp, #32
 8006724:	af02      	add	r7, sp, #8
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800672a:	4b23      	ldr	r3, [pc, #140]	; (80067b8 <prvProcessExpiredTimer+0x98>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	3304      	adds	r3, #4
 8006738:	4618      	mov	r0, r3
 800673a:	f7fe fad7 	bl	8004cec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006744:	f003 0304 	and.w	r3, r3, #4
 8006748:	2b00      	cmp	r3, #0
 800674a:	d024      	beq.n	8006796 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	699a      	ldr	r2, [r3, #24]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	18d1      	adds	r1, r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	683a      	ldr	r2, [r7, #0]
 8006758:	6978      	ldr	r0, [r7, #20]
 800675a:	f000 f8d3 	bl	8006904 <prvInsertTimerInActiveList>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d021      	beq.n	80067a8 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006764:	2300      	movs	r3, #0
 8006766:	9300      	str	r3, [sp, #0]
 8006768:	2300      	movs	r3, #0
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	2100      	movs	r1, #0
 800676e:	6978      	ldr	r0, [r7, #20]
 8006770:	f7ff ff86 	bl	8006680 <xTimerGenericCommand>
 8006774:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d115      	bne.n	80067a8 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800677c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006780:	b672      	cpsid	i
 8006782:	f383 8811 	msr	BASEPRI, r3
 8006786:	f3bf 8f6f 	isb	sy
 800678a:	f3bf 8f4f 	dsb	sy
 800678e:	b662      	cpsie	i
 8006790:	60fb      	str	r3, [r7, #12]
}
 8006792:	bf00      	nop
 8006794:	e7fe      	b.n	8006794 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800679c:	f023 0301 	bic.w	r3, r3, #1
 80067a0:	b2da      	uxtb	r2, r3
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	6a1b      	ldr	r3, [r3, #32]
 80067ac:	6978      	ldr	r0, [r7, #20]
 80067ae:	4798      	blx	r3
}
 80067b0:	bf00      	nop
 80067b2:	3718      	adds	r7, #24
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	2000164c 	.word	0x2000164c

080067bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80067c4:	f107 0308 	add.w	r3, r7, #8
 80067c8:	4618      	mov	r0, r3
 80067ca:	f000 f857 	bl	800687c <prvGetNextExpireTime>
 80067ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	4619      	mov	r1, r3
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f000 f803 	bl	80067e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80067da:	f000 f8d5 	bl	8006988 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80067de:	e7f1      	b.n	80067c4 <prvTimerTask+0x8>

080067e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80067ea:	f7ff fa1d 	bl	8005c28 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80067ee:	f107 0308 	add.w	r3, r7, #8
 80067f2:	4618      	mov	r0, r3
 80067f4:	f000 f866 	bl	80068c4 <prvSampleTimeNow>
 80067f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d130      	bne.n	8006862 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d10a      	bne.n	800681c <prvProcessTimerOrBlockTask+0x3c>
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	429a      	cmp	r2, r3
 800680c:	d806      	bhi.n	800681c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800680e:	f7ff fa19 	bl	8005c44 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006812:	68f9      	ldr	r1, [r7, #12]
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f7ff ff83 	bl	8006720 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800681a:	e024      	b.n	8006866 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d008      	beq.n	8006834 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006822:	4b13      	ldr	r3, [pc, #76]	; (8006870 <prvProcessTimerOrBlockTask+0x90>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d101      	bne.n	8006830 <prvProcessTimerOrBlockTask+0x50>
 800682c:	2301      	movs	r3, #1
 800682e:	e000      	b.n	8006832 <prvProcessTimerOrBlockTask+0x52>
 8006830:	2300      	movs	r3, #0
 8006832:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006834:	4b0f      	ldr	r3, [pc, #60]	; (8006874 <prvProcessTimerOrBlockTask+0x94>)
 8006836:	6818      	ldr	r0, [r3, #0]
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	683a      	ldr	r2, [r7, #0]
 8006840:	4619      	mov	r1, r3
 8006842:	f7fe ff53 	bl	80056ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006846:	f7ff f9fd 	bl	8005c44 <xTaskResumeAll>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d10a      	bne.n	8006866 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006850:	4b09      	ldr	r3, [pc, #36]	; (8006878 <prvProcessTimerOrBlockTask+0x98>)
 8006852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006856:	601a      	str	r2, [r3, #0]
 8006858:	f3bf 8f4f 	dsb	sy
 800685c:	f3bf 8f6f 	isb	sy
}
 8006860:	e001      	b.n	8006866 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006862:	f7ff f9ef 	bl	8005c44 <xTaskResumeAll>
}
 8006866:	bf00      	nop
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	20001650 	.word	0x20001650
 8006874:	20001654 	.word	0x20001654
 8006878:	e000ed04 	.word	0xe000ed04

0800687c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006884:	4b0e      	ldr	r3, [pc, #56]	; (80068c0 <prvGetNextExpireTime+0x44>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d101      	bne.n	8006892 <prvGetNextExpireTime+0x16>
 800688e:	2201      	movs	r2, #1
 8006890:	e000      	b.n	8006894 <prvGetNextExpireTime+0x18>
 8006892:	2200      	movs	r2, #0
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d105      	bne.n	80068ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80068a0:	4b07      	ldr	r3, [pc, #28]	; (80068c0 <prvGetNextExpireTime+0x44>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	60fb      	str	r3, [r7, #12]
 80068aa:	e001      	b.n	80068b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80068ac:	2300      	movs	r3, #0
 80068ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80068b0:	68fb      	ldr	r3, [r7, #12]
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3714      	adds	r7, #20
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	2000164c 	.word	0x2000164c

080068c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80068cc:	f7ff fa5a 	bl	8005d84 <xTaskGetTickCount>
 80068d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80068d2:	4b0b      	ldr	r3, [pc, #44]	; (8006900 <prvSampleTimeNow+0x3c>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d205      	bcs.n	80068e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80068dc:	f000 f93c 	bl	8006b58 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	601a      	str	r2, [r3, #0]
 80068e6:	e002      	b.n	80068ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80068ee:	4a04      	ldr	r2, [pc, #16]	; (8006900 <prvSampleTimeNow+0x3c>)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80068f4:	68fb      	ldr	r3, [r7, #12]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	2000165c 	.word	0x2000165c

08006904 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b086      	sub	sp, #24
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
 8006910:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006912:	2300      	movs	r3, #0
 8006914:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	429a      	cmp	r2, r3
 8006928:	d812      	bhi.n	8006950 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	1ad2      	subs	r2, r2, r3
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	699b      	ldr	r3, [r3, #24]
 8006934:	429a      	cmp	r2, r3
 8006936:	d302      	bcc.n	800693e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006938:	2301      	movs	r3, #1
 800693a:	617b      	str	r3, [r7, #20]
 800693c:	e01b      	b.n	8006976 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800693e:	4b10      	ldr	r3, [pc, #64]	; (8006980 <prvInsertTimerInActiveList+0x7c>)
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	3304      	adds	r3, #4
 8006946:	4619      	mov	r1, r3
 8006948:	4610      	mov	r0, r2
 800694a:	f7fe f996 	bl	8004c7a <vListInsert>
 800694e:	e012      	b.n	8006976 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	429a      	cmp	r2, r3
 8006956:	d206      	bcs.n	8006966 <prvInsertTimerInActiveList+0x62>
 8006958:	68ba      	ldr	r2, [r7, #8]
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	429a      	cmp	r2, r3
 800695e:	d302      	bcc.n	8006966 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006960:	2301      	movs	r3, #1
 8006962:	617b      	str	r3, [r7, #20]
 8006964:	e007      	b.n	8006976 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006966:	4b07      	ldr	r3, [pc, #28]	; (8006984 <prvInsertTimerInActiveList+0x80>)
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	3304      	adds	r3, #4
 800696e:	4619      	mov	r1, r3
 8006970:	4610      	mov	r0, r2
 8006972:	f7fe f982 	bl	8004c7a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006976:	697b      	ldr	r3, [r7, #20]
}
 8006978:	4618      	mov	r0, r3
 800697a:	3718      	adds	r7, #24
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	20001650 	.word	0x20001650
 8006984:	2000164c 	.word	0x2000164c

08006988 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b08e      	sub	sp, #56	; 0x38
 800698c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800698e:	e0d0      	b.n	8006b32 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	da1a      	bge.n	80069cc <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006996:	1d3b      	adds	r3, r7, #4
 8006998:	3304      	adds	r3, #4
 800699a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800699c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10c      	bne.n	80069bc <prvProcessReceivedCommands+0x34>
	__asm volatile
 80069a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a6:	b672      	cpsid	i
 80069a8:	f383 8811 	msr	BASEPRI, r3
 80069ac:	f3bf 8f6f 	isb	sy
 80069b0:	f3bf 8f4f 	dsb	sy
 80069b4:	b662      	cpsie	i
 80069b6:	61fb      	str	r3, [r7, #28]
}
 80069b8:	bf00      	nop
 80069ba:	e7fe      	b.n	80069ba <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80069bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069c2:	6850      	ldr	r0, [r2, #4]
 80069c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069c6:	6892      	ldr	r2, [r2, #8]
 80069c8:	4611      	mov	r1, r2
 80069ca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	f2c0 80ae 	blt.w	8006b30 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80069d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069da:	695b      	ldr	r3, [r3, #20]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d004      	beq.n	80069ea <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e2:	3304      	adds	r3, #4
 80069e4:	4618      	mov	r0, r3
 80069e6:	f7fe f981 	bl	8004cec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80069ea:	463b      	mov	r3, r7
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7ff ff69 	bl	80068c4 <prvSampleTimeNow>
 80069f2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2b09      	cmp	r3, #9
 80069f8:	f200 809b 	bhi.w	8006b32 <prvProcessReceivedCommands+0x1aa>
 80069fc:	a201      	add	r2, pc, #4	; (adr r2, 8006a04 <prvProcessReceivedCommands+0x7c>)
 80069fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a02:	bf00      	nop
 8006a04:	08006a2d 	.word	0x08006a2d
 8006a08:	08006a2d 	.word	0x08006a2d
 8006a0c:	08006a2d 	.word	0x08006a2d
 8006a10:	08006aa5 	.word	0x08006aa5
 8006a14:	08006ab9 	.word	0x08006ab9
 8006a18:	08006b07 	.word	0x08006b07
 8006a1c:	08006a2d 	.word	0x08006a2d
 8006a20:	08006a2d 	.word	0x08006a2d
 8006a24:	08006aa5 	.word	0x08006aa5
 8006a28:	08006ab9 	.word	0x08006ab9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a32:	f043 0301 	orr.w	r3, r3, #1
 8006a36:	b2da      	uxtb	r2, r3
 8006a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	18d1      	adds	r1, r2, r3
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a4c:	f7ff ff5a 	bl	8006904 <prvInsertTimerInActiveList>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d06d      	beq.n	8006b32 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a58:	6a1b      	ldr	r3, [r3, #32]
 8006a5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a64:	f003 0304 	and.w	r3, r3, #4
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d062      	beq.n	8006b32 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	441a      	add	r2, r3
 8006a74:	2300      	movs	r3, #0
 8006a76:	9300      	str	r3, [sp, #0]
 8006a78:	2300      	movs	r3, #0
 8006a7a:	2100      	movs	r1, #0
 8006a7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a7e:	f7ff fdff 	bl	8006680 <xTimerGenericCommand>
 8006a82:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006a84:	6a3b      	ldr	r3, [r7, #32]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d153      	bne.n	8006b32 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8006a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8e:	b672      	cpsid	i
 8006a90:	f383 8811 	msr	BASEPRI, r3
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	f3bf 8f4f 	dsb	sy
 8006a9c:	b662      	cpsie	i
 8006a9e:	61bb      	str	r3, [r7, #24]
}
 8006aa0:	bf00      	nop
 8006aa2:	e7fe      	b.n	8006aa2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006aaa:	f023 0301 	bic.w	r3, r3, #1
 8006aae:	b2da      	uxtb	r2, r3
 8006ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006ab6:	e03c      	b.n	8006b32 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006abe:	f043 0301 	orr.w	r3, r3, #1
 8006ac2:	b2da      	uxtb	r2, r3
 8006ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ace:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d10c      	bne.n	8006af2 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8006ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006adc:	b672      	cpsid	i
 8006ade:	f383 8811 	msr	BASEPRI, r3
 8006ae2:	f3bf 8f6f 	isb	sy
 8006ae6:	f3bf 8f4f 	dsb	sy
 8006aea:	b662      	cpsie	i
 8006aec:	617b      	str	r3, [r7, #20]
}
 8006aee:	bf00      	nop
 8006af0:	e7fe      	b.n	8006af0 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af4:	699a      	ldr	r2, [r3, #24]
 8006af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af8:	18d1      	adds	r1, r2, r3
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006afe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b00:	f7ff ff00 	bl	8006904 <prvInsertTimerInActiveList>
					break;
 8006b04:	e015      	b.n	8006b32 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b0c:	f003 0302 	and.w	r3, r3, #2
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d103      	bne.n	8006b1c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8006b14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b16:	f000 fbc7 	bl	80072a8 <vPortFree>
 8006b1a:	e00a      	b.n	8006b32 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b22:	f023 0301 	bic.w	r3, r3, #1
 8006b26:	b2da      	uxtb	r2, r3
 8006b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006b2e:	e000      	b.n	8006b32 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006b30:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b32:	4b08      	ldr	r3, [pc, #32]	; (8006b54 <prvProcessReceivedCommands+0x1cc>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	1d39      	adds	r1, r7, #4
 8006b38:	2200      	movs	r2, #0
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7fe fbb6 	bl	80052ac <xQueueReceive>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	f47f af24 	bne.w	8006990 <prvProcessReceivedCommands+0x8>
	}
}
 8006b48:	bf00      	nop
 8006b4a:	bf00      	nop
 8006b4c:	3730      	adds	r7, #48	; 0x30
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	20001654 	.word	0x20001654

08006b58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b088      	sub	sp, #32
 8006b5c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b5e:	e04a      	b.n	8006bf6 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b60:	4b2e      	ldr	r3, [pc, #184]	; (8006c1c <prvSwitchTimerLists+0xc4>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b6a:	4b2c      	ldr	r3, [pc, #176]	; (8006c1c <prvSwitchTimerLists+0xc4>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	3304      	adds	r3, #4
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7fe f8b7 	bl	8004cec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6a1b      	ldr	r3, [r3, #32]
 8006b82:	68f8      	ldr	r0, [r7, #12]
 8006b84:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b8c:	f003 0304 	and.w	r3, r3, #4
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d030      	beq.n	8006bf6 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	693a      	ldr	r2, [r7, #16]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006b9e:	68ba      	ldr	r2, [r7, #8]
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d90e      	bls.n	8006bc4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	68ba      	ldr	r2, [r7, #8]
 8006baa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006bb2:	4b1a      	ldr	r3, [pc, #104]	; (8006c1c <prvSwitchTimerLists+0xc4>)
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	3304      	adds	r3, #4
 8006bba:	4619      	mov	r1, r3
 8006bbc:	4610      	mov	r0, r2
 8006bbe:	f7fe f85c 	bl	8004c7a <vListInsert>
 8006bc2:	e018      	b.n	8006bf6 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	9300      	str	r3, [sp, #0]
 8006bc8:	2300      	movs	r3, #0
 8006bca:	693a      	ldr	r2, [r7, #16]
 8006bcc:	2100      	movs	r1, #0
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f7ff fd56 	bl	8006680 <xTimerGenericCommand>
 8006bd4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d10c      	bne.n	8006bf6 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8006bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be0:	b672      	cpsid	i
 8006be2:	f383 8811 	msr	BASEPRI, r3
 8006be6:	f3bf 8f6f 	isb	sy
 8006bea:	f3bf 8f4f 	dsb	sy
 8006bee:	b662      	cpsie	i
 8006bf0:	603b      	str	r3, [r7, #0]
}
 8006bf2:	bf00      	nop
 8006bf4:	e7fe      	b.n	8006bf4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006bf6:	4b09      	ldr	r3, [pc, #36]	; (8006c1c <prvSwitchTimerLists+0xc4>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d1af      	bne.n	8006b60 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006c00:	4b06      	ldr	r3, [pc, #24]	; (8006c1c <prvSwitchTimerLists+0xc4>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006c06:	4b06      	ldr	r3, [pc, #24]	; (8006c20 <prvSwitchTimerLists+0xc8>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a04      	ldr	r2, [pc, #16]	; (8006c1c <prvSwitchTimerLists+0xc4>)
 8006c0c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006c0e:	4a04      	ldr	r2, [pc, #16]	; (8006c20 <prvSwitchTimerLists+0xc8>)
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	6013      	str	r3, [r2, #0]
}
 8006c14:	bf00      	nop
 8006c16:	3718      	adds	r7, #24
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	2000164c 	.word	0x2000164c
 8006c20:	20001650 	.word	0x20001650

08006c24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006c2a:	f000 f947 	bl	8006ebc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006c2e:	4b15      	ldr	r3, [pc, #84]	; (8006c84 <prvCheckForValidListAndQueue+0x60>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d120      	bne.n	8006c78 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006c36:	4814      	ldr	r0, [pc, #80]	; (8006c88 <prvCheckForValidListAndQueue+0x64>)
 8006c38:	f7fd ffce 	bl	8004bd8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006c3c:	4813      	ldr	r0, [pc, #76]	; (8006c8c <prvCheckForValidListAndQueue+0x68>)
 8006c3e:	f7fd ffcb 	bl	8004bd8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006c42:	4b13      	ldr	r3, [pc, #76]	; (8006c90 <prvCheckForValidListAndQueue+0x6c>)
 8006c44:	4a10      	ldr	r2, [pc, #64]	; (8006c88 <prvCheckForValidListAndQueue+0x64>)
 8006c46:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006c48:	4b12      	ldr	r3, [pc, #72]	; (8006c94 <prvCheckForValidListAndQueue+0x70>)
 8006c4a:	4a10      	ldr	r2, [pc, #64]	; (8006c8c <prvCheckForValidListAndQueue+0x68>)
 8006c4c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006c4e:	2300      	movs	r3, #0
 8006c50:	9300      	str	r3, [sp, #0]
 8006c52:	4b11      	ldr	r3, [pc, #68]	; (8006c98 <prvCheckForValidListAndQueue+0x74>)
 8006c54:	4a11      	ldr	r2, [pc, #68]	; (8006c9c <prvCheckForValidListAndQueue+0x78>)
 8006c56:	2110      	movs	r1, #16
 8006c58:	200a      	movs	r0, #10
 8006c5a:	f7fe f8db 	bl	8004e14 <xQueueGenericCreateStatic>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	4a08      	ldr	r2, [pc, #32]	; (8006c84 <prvCheckForValidListAndQueue+0x60>)
 8006c62:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006c64:	4b07      	ldr	r3, [pc, #28]	; (8006c84 <prvCheckForValidListAndQueue+0x60>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d005      	beq.n	8006c78 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006c6c:	4b05      	ldr	r3, [pc, #20]	; (8006c84 <prvCheckForValidListAndQueue+0x60>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	490b      	ldr	r1, [pc, #44]	; (8006ca0 <prvCheckForValidListAndQueue+0x7c>)
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7fe fd10 	bl	8005698 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c78:	f000 f954 	bl	8006f24 <vPortExitCritical>
}
 8006c7c:	bf00      	nop
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	20001654 	.word	0x20001654
 8006c88:	20001624 	.word	0x20001624
 8006c8c:	20001638 	.word	0x20001638
 8006c90:	2000164c 	.word	0x2000164c
 8006c94:	20001650 	.word	0x20001650
 8006c98:	20001700 	.word	0x20001700
 8006c9c:	20001660 	.word	0x20001660
 8006ca0:	0800770c 	.word	0x0800770c

08006ca4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	3b04      	subs	r3, #4
 8006cb4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006cbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	3b04      	subs	r3, #4
 8006cc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	f023 0201 	bic.w	r2, r3, #1
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	3b04      	subs	r3, #4
 8006cd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006cd4:	4a0c      	ldr	r2, [pc, #48]	; (8006d08 <pxPortInitialiseStack+0x64>)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	3b14      	subs	r3, #20
 8006cde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	3b04      	subs	r3, #4
 8006cea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f06f 0202 	mvn.w	r2, #2
 8006cf2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	3b20      	subs	r3, #32
 8006cf8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3714      	adds	r7, #20
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr
 8006d08:	08006d0d 	.word	0x08006d0d

08006d0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006d12:	2300      	movs	r3, #0
 8006d14:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006d16:	4b14      	ldr	r3, [pc, #80]	; (8006d68 <prvTaskExitError+0x5c>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d1e:	d00c      	beq.n	8006d3a <prvTaskExitError+0x2e>
	__asm volatile
 8006d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d24:	b672      	cpsid	i
 8006d26:	f383 8811 	msr	BASEPRI, r3
 8006d2a:	f3bf 8f6f 	isb	sy
 8006d2e:	f3bf 8f4f 	dsb	sy
 8006d32:	b662      	cpsie	i
 8006d34:	60fb      	str	r3, [r7, #12]
}
 8006d36:	bf00      	nop
 8006d38:	e7fe      	b.n	8006d38 <prvTaskExitError+0x2c>
	__asm volatile
 8006d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3e:	b672      	cpsid	i
 8006d40:	f383 8811 	msr	BASEPRI, r3
 8006d44:	f3bf 8f6f 	isb	sy
 8006d48:	f3bf 8f4f 	dsb	sy
 8006d4c:	b662      	cpsie	i
 8006d4e:	60bb      	str	r3, [r7, #8]
}
 8006d50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006d52:	bf00      	nop
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d0fc      	beq.n	8006d54 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006d5a:	bf00      	nop
 8006d5c:	bf00      	nop
 8006d5e:	3714      	adds	r7, #20
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr
 8006d68:	2000000c 	.word	0x2000000c
 8006d6c:	00000000 	.word	0x00000000

08006d70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006d70:	4b07      	ldr	r3, [pc, #28]	; (8006d90 <pxCurrentTCBConst2>)
 8006d72:	6819      	ldr	r1, [r3, #0]
 8006d74:	6808      	ldr	r0, [r1, #0]
 8006d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d7a:	f380 8809 	msr	PSP, r0
 8006d7e:	f3bf 8f6f 	isb	sy
 8006d82:	f04f 0000 	mov.w	r0, #0
 8006d86:	f380 8811 	msr	BASEPRI, r0
 8006d8a:	4770      	bx	lr
 8006d8c:	f3af 8000 	nop.w

08006d90 <pxCurrentTCBConst2>:
 8006d90:	20001124 	.word	0x20001124
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006d94:	bf00      	nop
 8006d96:	bf00      	nop

08006d98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006d98:	4808      	ldr	r0, [pc, #32]	; (8006dbc <prvPortStartFirstTask+0x24>)
 8006d9a:	6800      	ldr	r0, [r0, #0]
 8006d9c:	6800      	ldr	r0, [r0, #0]
 8006d9e:	f380 8808 	msr	MSP, r0
 8006da2:	f04f 0000 	mov.w	r0, #0
 8006da6:	f380 8814 	msr	CONTROL, r0
 8006daa:	b662      	cpsie	i
 8006dac:	b661      	cpsie	f
 8006dae:	f3bf 8f4f 	dsb	sy
 8006db2:	f3bf 8f6f 	isb	sy
 8006db6:	df00      	svc	0
 8006db8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006dba:	bf00      	nop
 8006dbc:	e000ed08 	.word	0xe000ed08

08006dc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006dc6:	4b37      	ldr	r3, [pc, #220]	; (8006ea4 <xPortStartScheduler+0xe4>)
 8006dc8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	22ff      	movs	r2, #255	; 0xff
 8006dd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006de0:	78fb      	ldrb	r3, [r7, #3]
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006de8:	b2da      	uxtb	r2, r3
 8006dea:	4b2f      	ldr	r3, [pc, #188]	; (8006ea8 <xPortStartScheduler+0xe8>)
 8006dec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006dee:	4b2f      	ldr	r3, [pc, #188]	; (8006eac <xPortStartScheduler+0xec>)
 8006df0:	2207      	movs	r2, #7
 8006df2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006df4:	e009      	b.n	8006e0a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006df6:	4b2d      	ldr	r3, [pc, #180]	; (8006eac <xPortStartScheduler+0xec>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	4a2b      	ldr	r2, [pc, #172]	; (8006eac <xPortStartScheduler+0xec>)
 8006dfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006e00:	78fb      	ldrb	r3, [r7, #3]
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	005b      	lsls	r3, r3, #1
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e0a:	78fb      	ldrb	r3, [r7, #3]
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e12:	2b80      	cmp	r3, #128	; 0x80
 8006e14:	d0ef      	beq.n	8006df6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006e16:	4b25      	ldr	r3, [pc, #148]	; (8006eac <xPortStartScheduler+0xec>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f1c3 0307 	rsb	r3, r3, #7
 8006e1e:	2b04      	cmp	r3, #4
 8006e20:	d00c      	beq.n	8006e3c <xPortStartScheduler+0x7c>
	__asm volatile
 8006e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e26:	b672      	cpsid	i
 8006e28:	f383 8811 	msr	BASEPRI, r3
 8006e2c:	f3bf 8f6f 	isb	sy
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	b662      	cpsie	i
 8006e36:	60bb      	str	r3, [r7, #8]
}
 8006e38:	bf00      	nop
 8006e3a:	e7fe      	b.n	8006e3a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006e3c:	4b1b      	ldr	r3, [pc, #108]	; (8006eac <xPortStartScheduler+0xec>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	021b      	lsls	r3, r3, #8
 8006e42:	4a1a      	ldr	r2, [pc, #104]	; (8006eac <xPortStartScheduler+0xec>)
 8006e44:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006e46:	4b19      	ldr	r3, [pc, #100]	; (8006eac <xPortStartScheduler+0xec>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e4e:	4a17      	ldr	r2, [pc, #92]	; (8006eac <xPortStartScheduler+0xec>)
 8006e50:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	b2da      	uxtb	r2, r3
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006e5a:	4b15      	ldr	r3, [pc, #84]	; (8006eb0 <xPortStartScheduler+0xf0>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a14      	ldr	r2, [pc, #80]	; (8006eb0 <xPortStartScheduler+0xf0>)
 8006e60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e64:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006e66:	4b12      	ldr	r3, [pc, #72]	; (8006eb0 <xPortStartScheduler+0xf0>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a11      	ldr	r2, [pc, #68]	; (8006eb0 <xPortStartScheduler+0xf0>)
 8006e6c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006e70:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006e72:	f000 f8dd 	bl	8007030 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006e76:	4b0f      	ldr	r3, [pc, #60]	; (8006eb4 <xPortStartScheduler+0xf4>)
 8006e78:	2200      	movs	r2, #0
 8006e7a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006e7c:	f000 f8fc 	bl	8007078 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006e80:	4b0d      	ldr	r3, [pc, #52]	; (8006eb8 <xPortStartScheduler+0xf8>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a0c      	ldr	r2, [pc, #48]	; (8006eb8 <xPortStartScheduler+0xf8>)
 8006e86:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006e8a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006e8c:	f7ff ff84 	bl	8006d98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006e90:	f7ff f844 	bl	8005f1c <vTaskSwitchContext>
	prvTaskExitError();
 8006e94:	f7ff ff3a 	bl	8006d0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	e000e400 	.word	0xe000e400
 8006ea8:	20001750 	.word	0x20001750
 8006eac:	20001754 	.word	0x20001754
 8006eb0:	e000ed20 	.word	0xe000ed20
 8006eb4:	2000000c 	.word	0x2000000c
 8006eb8:	e000ef34 	.word	0xe000ef34

08006ebc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
	__asm volatile
 8006ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec6:	b672      	cpsid	i
 8006ec8:	f383 8811 	msr	BASEPRI, r3
 8006ecc:	f3bf 8f6f 	isb	sy
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	b662      	cpsie	i
 8006ed6:	607b      	str	r3, [r7, #4]
}
 8006ed8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006eda:	4b10      	ldr	r3, [pc, #64]	; (8006f1c <vPortEnterCritical+0x60>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	4a0e      	ldr	r2, [pc, #56]	; (8006f1c <vPortEnterCritical+0x60>)
 8006ee2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006ee4:	4b0d      	ldr	r3, [pc, #52]	; (8006f1c <vPortEnterCritical+0x60>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d111      	bne.n	8006f10 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006eec:	4b0c      	ldr	r3, [pc, #48]	; (8006f20 <vPortEnterCritical+0x64>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00c      	beq.n	8006f10 <vPortEnterCritical+0x54>
	__asm volatile
 8006ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efa:	b672      	cpsid	i
 8006efc:	f383 8811 	msr	BASEPRI, r3
 8006f00:	f3bf 8f6f 	isb	sy
 8006f04:	f3bf 8f4f 	dsb	sy
 8006f08:	b662      	cpsie	i
 8006f0a:	603b      	str	r3, [r7, #0]
}
 8006f0c:	bf00      	nop
 8006f0e:	e7fe      	b.n	8006f0e <vPortEnterCritical+0x52>
	}
}
 8006f10:	bf00      	nop
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr
 8006f1c:	2000000c 	.word	0x2000000c
 8006f20:	e000ed04 	.word	0xe000ed04

08006f24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006f2a:	4b13      	ldr	r3, [pc, #76]	; (8006f78 <vPortExitCritical+0x54>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d10c      	bne.n	8006f4c <vPortExitCritical+0x28>
	__asm volatile
 8006f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f36:	b672      	cpsid	i
 8006f38:	f383 8811 	msr	BASEPRI, r3
 8006f3c:	f3bf 8f6f 	isb	sy
 8006f40:	f3bf 8f4f 	dsb	sy
 8006f44:	b662      	cpsie	i
 8006f46:	607b      	str	r3, [r7, #4]
}
 8006f48:	bf00      	nop
 8006f4a:	e7fe      	b.n	8006f4a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006f4c:	4b0a      	ldr	r3, [pc, #40]	; (8006f78 <vPortExitCritical+0x54>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	3b01      	subs	r3, #1
 8006f52:	4a09      	ldr	r2, [pc, #36]	; (8006f78 <vPortExitCritical+0x54>)
 8006f54:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006f56:	4b08      	ldr	r3, [pc, #32]	; (8006f78 <vPortExitCritical+0x54>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d105      	bne.n	8006f6a <vPortExitCritical+0x46>
 8006f5e:	2300      	movs	r3, #0
 8006f60:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	f383 8811 	msr	BASEPRI, r3
}
 8006f68:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006f6a:	bf00      	nop
 8006f6c:	370c      	adds	r7, #12
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	2000000c 	.word	0x2000000c
 8006f7c:	00000000 	.word	0x00000000

08006f80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006f80:	f3ef 8009 	mrs	r0, PSP
 8006f84:	f3bf 8f6f 	isb	sy
 8006f88:	4b15      	ldr	r3, [pc, #84]	; (8006fe0 <pxCurrentTCBConst>)
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	f01e 0f10 	tst.w	lr, #16
 8006f90:	bf08      	it	eq
 8006f92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006f96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f9a:	6010      	str	r0, [r2, #0]
 8006f9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006fa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006fa4:	b672      	cpsid	i
 8006fa6:	f380 8811 	msr	BASEPRI, r0
 8006faa:	f3bf 8f4f 	dsb	sy
 8006fae:	f3bf 8f6f 	isb	sy
 8006fb2:	b662      	cpsie	i
 8006fb4:	f7fe ffb2 	bl	8005f1c <vTaskSwitchContext>
 8006fb8:	f04f 0000 	mov.w	r0, #0
 8006fbc:	f380 8811 	msr	BASEPRI, r0
 8006fc0:	bc09      	pop	{r0, r3}
 8006fc2:	6819      	ldr	r1, [r3, #0]
 8006fc4:	6808      	ldr	r0, [r1, #0]
 8006fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fca:	f01e 0f10 	tst.w	lr, #16
 8006fce:	bf08      	it	eq
 8006fd0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006fd4:	f380 8809 	msr	PSP, r0
 8006fd8:	f3bf 8f6f 	isb	sy
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop

08006fe0 <pxCurrentTCBConst>:
 8006fe0:	20001124 	.word	0x20001124
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006fe4:	bf00      	nop
 8006fe6:	bf00      	nop

08006fe8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
	__asm volatile
 8006fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff2:	b672      	cpsid	i
 8006ff4:	f383 8811 	msr	BASEPRI, r3
 8006ff8:	f3bf 8f6f 	isb	sy
 8006ffc:	f3bf 8f4f 	dsb	sy
 8007000:	b662      	cpsie	i
 8007002:	607b      	str	r3, [r7, #4]
}
 8007004:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007006:	f7fe fecd 	bl	8005da4 <xTaskIncrementTick>
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d003      	beq.n	8007018 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007010:	4b06      	ldr	r3, [pc, #24]	; (800702c <xPortSysTickHandler+0x44>)
 8007012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007016:	601a      	str	r2, [r3, #0]
 8007018:	2300      	movs	r3, #0
 800701a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	f383 8811 	msr	BASEPRI, r3
}
 8007022:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007024:	bf00      	nop
 8007026:	3708      	adds	r7, #8
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}
 800702c:	e000ed04 	.word	0xe000ed04

08007030 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007030:	b480      	push	{r7}
 8007032:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007034:	4b0b      	ldr	r3, [pc, #44]	; (8007064 <vPortSetupTimerInterrupt+0x34>)
 8007036:	2200      	movs	r2, #0
 8007038:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800703a:	4b0b      	ldr	r3, [pc, #44]	; (8007068 <vPortSetupTimerInterrupt+0x38>)
 800703c:	2200      	movs	r2, #0
 800703e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007040:	4b0a      	ldr	r3, [pc, #40]	; (800706c <vPortSetupTimerInterrupt+0x3c>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a0a      	ldr	r2, [pc, #40]	; (8007070 <vPortSetupTimerInterrupt+0x40>)
 8007046:	fba2 2303 	umull	r2, r3, r2, r3
 800704a:	099b      	lsrs	r3, r3, #6
 800704c:	4a09      	ldr	r2, [pc, #36]	; (8007074 <vPortSetupTimerInterrupt+0x44>)
 800704e:	3b01      	subs	r3, #1
 8007050:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007052:	4b04      	ldr	r3, [pc, #16]	; (8007064 <vPortSetupTimerInterrupt+0x34>)
 8007054:	2207      	movs	r2, #7
 8007056:	601a      	str	r2, [r3, #0]
}
 8007058:	bf00      	nop
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop
 8007064:	e000e010 	.word	0xe000e010
 8007068:	e000e018 	.word	0xe000e018
 800706c:	20000000 	.word	0x20000000
 8007070:	10624dd3 	.word	0x10624dd3
 8007074:	e000e014 	.word	0xe000e014

08007078 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007078:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007088 <vPortEnableVFP+0x10>
 800707c:	6801      	ldr	r1, [r0, #0]
 800707e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007082:	6001      	str	r1, [r0, #0]
 8007084:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007086:	bf00      	nop
 8007088:	e000ed88 	.word	0xe000ed88

0800708c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800708c:	b480      	push	{r7}
 800708e:	b085      	sub	sp, #20
 8007090:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007092:	f3ef 8305 	mrs	r3, IPSR
 8007096:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2b0f      	cmp	r3, #15
 800709c:	d916      	bls.n	80070cc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800709e:	4a19      	ldr	r2, [pc, #100]	; (8007104 <vPortValidateInterruptPriority+0x78>)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	4413      	add	r3, r2
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80070a8:	4b17      	ldr	r3, [pc, #92]	; (8007108 <vPortValidateInterruptPriority+0x7c>)
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	7afa      	ldrb	r2, [r7, #11]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d20c      	bcs.n	80070cc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80070b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b6:	b672      	cpsid	i
 80070b8:	f383 8811 	msr	BASEPRI, r3
 80070bc:	f3bf 8f6f 	isb	sy
 80070c0:	f3bf 8f4f 	dsb	sy
 80070c4:	b662      	cpsie	i
 80070c6:	607b      	str	r3, [r7, #4]
}
 80070c8:	bf00      	nop
 80070ca:	e7fe      	b.n	80070ca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80070cc:	4b0f      	ldr	r3, [pc, #60]	; (800710c <vPortValidateInterruptPriority+0x80>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80070d4:	4b0e      	ldr	r3, [pc, #56]	; (8007110 <vPortValidateInterruptPriority+0x84>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d90c      	bls.n	80070f6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80070dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e0:	b672      	cpsid	i
 80070e2:	f383 8811 	msr	BASEPRI, r3
 80070e6:	f3bf 8f6f 	isb	sy
 80070ea:	f3bf 8f4f 	dsb	sy
 80070ee:	b662      	cpsie	i
 80070f0:	603b      	str	r3, [r7, #0]
}
 80070f2:	bf00      	nop
 80070f4:	e7fe      	b.n	80070f4 <vPortValidateInterruptPriority+0x68>
	}
 80070f6:	bf00      	nop
 80070f8:	3714      	adds	r7, #20
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	e000e3f0 	.word	0xe000e3f0
 8007108:	20001750 	.word	0x20001750
 800710c:	e000ed0c 	.word	0xe000ed0c
 8007110:	20001754 	.word	0x20001754

08007114 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b08a      	sub	sp, #40	; 0x28
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800711c:	2300      	movs	r3, #0
 800711e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007120:	f7fe fd82 	bl	8005c28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007124:	4b5b      	ldr	r3, [pc, #364]	; (8007294 <pvPortMalloc+0x180>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d101      	bne.n	8007130 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800712c:	f000 f91a 	bl	8007364 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007130:	4b59      	ldr	r3, [pc, #356]	; (8007298 <pvPortMalloc+0x184>)
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4013      	ands	r3, r2
 8007138:	2b00      	cmp	r3, #0
 800713a:	f040 8092 	bne.w	8007262 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d01f      	beq.n	8007184 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8007144:	2208      	movs	r2, #8
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4413      	add	r3, r2
 800714a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f003 0307 	and.w	r3, r3, #7
 8007152:	2b00      	cmp	r3, #0
 8007154:	d016      	beq.n	8007184 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f023 0307 	bic.w	r3, r3, #7
 800715c:	3308      	adds	r3, #8
 800715e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f003 0307 	and.w	r3, r3, #7
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00c      	beq.n	8007184 <pvPortMalloc+0x70>
	__asm volatile
 800716a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716e:	b672      	cpsid	i
 8007170:	f383 8811 	msr	BASEPRI, r3
 8007174:	f3bf 8f6f 	isb	sy
 8007178:	f3bf 8f4f 	dsb	sy
 800717c:	b662      	cpsie	i
 800717e:	617b      	str	r3, [r7, #20]
}
 8007180:	bf00      	nop
 8007182:	e7fe      	b.n	8007182 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d06b      	beq.n	8007262 <pvPortMalloc+0x14e>
 800718a:	4b44      	ldr	r3, [pc, #272]	; (800729c <pvPortMalloc+0x188>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	429a      	cmp	r2, r3
 8007192:	d866      	bhi.n	8007262 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007194:	4b42      	ldr	r3, [pc, #264]	; (80072a0 <pvPortMalloc+0x18c>)
 8007196:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007198:	4b41      	ldr	r3, [pc, #260]	; (80072a0 <pvPortMalloc+0x18c>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800719e:	e004      	b.n	80071aa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80071a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80071a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d903      	bls.n	80071bc <pvPortMalloc+0xa8>
 80071b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1f1      	bne.n	80071a0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80071bc:	4b35      	ldr	r3, [pc, #212]	; (8007294 <pvPortMalloc+0x180>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d04d      	beq.n	8007262 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80071c6:	6a3b      	ldr	r3, [r7, #32]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2208      	movs	r2, #8
 80071cc:	4413      	add	r3, r2
 80071ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80071d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	6a3b      	ldr	r3, [r7, #32]
 80071d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80071d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071da:	685a      	ldr	r2, [r3, #4]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	1ad2      	subs	r2, r2, r3
 80071e0:	2308      	movs	r3, #8
 80071e2:	005b      	lsls	r3, r3, #1
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d921      	bls.n	800722c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80071e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4413      	add	r3, r2
 80071ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	f003 0307 	and.w	r3, r3, #7
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00c      	beq.n	8007214 <pvPortMalloc+0x100>
	__asm volatile
 80071fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fe:	b672      	cpsid	i
 8007200:	f383 8811 	msr	BASEPRI, r3
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	b662      	cpsie	i
 800720e:	613b      	str	r3, [r7, #16]
}
 8007210:	bf00      	nop
 8007212:	e7fe      	b.n	8007212 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007216:	685a      	ldr	r2, [r3, #4]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	1ad2      	subs	r2, r2, r3
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007226:	69b8      	ldr	r0, [r7, #24]
 8007228:	f000 f8fe 	bl	8007428 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800722c:	4b1b      	ldr	r3, [pc, #108]	; (800729c <pvPortMalloc+0x188>)
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	1ad3      	subs	r3, r2, r3
 8007236:	4a19      	ldr	r2, [pc, #100]	; (800729c <pvPortMalloc+0x188>)
 8007238:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800723a:	4b18      	ldr	r3, [pc, #96]	; (800729c <pvPortMalloc+0x188>)
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	4b19      	ldr	r3, [pc, #100]	; (80072a4 <pvPortMalloc+0x190>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	429a      	cmp	r2, r3
 8007244:	d203      	bcs.n	800724e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007246:	4b15      	ldr	r3, [pc, #84]	; (800729c <pvPortMalloc+0x188>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a16      	ldr	r2, [pc, #88]	; (80072a4 <pvPortMalloc+0x190>)
 800724c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800724e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007250:	685a      	ldr	r2, [r3, #4]
 8007252:	4b11      	ldr	r3, [pc, #68]	; (8007298 <pvPortMalloc+0x184>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	431a      	orrs	r2, r3
 8007258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800725c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725e:	2200      	movs	r2, #0
 8007260:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007262:	f7fe fcef 	bl	8005c44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	f003 0307 	and.w	r3, r3, #7
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00c      	beq.n	800728a <pvPortMalloc+0x176>
	__asm volatile
 8007270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007274:	b672      	cpsid	i
 8007276:	f383 8811 	msr	BASEPRI, r3
 800727a:	f3bf 8f6f 	isb	sy
 800727e:	f3bf 8f4f 	dsb	sy
 8007282:	b662      	cpsie	i
 8007284:	60fb      	str	r3, [r7, #12]
}
 8007286:	bf00      	nop
 8007288:	e7fe      	b.n	8007288 <pvPortMalloc+0x174>
	return pvReturn;
 800728a:	69fb      	ldr	r3, [r7, #28]
}
 800728c:	4618      	mov	r0, r3
 800728e:	3728      	adds	r7, #40	; 0x28
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	20005360 	.word	0x20005360
 8007298:	2000536c 	.word	0x2000536c
 800729c:	20005364 	.word	0x20005364
 80072a0:	20005358 	.word	0x20005358
 80072a4:	20005368 	.word	0x20005368

080072a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b086      	sub	sp, #24
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d04c      	beq.n	8007354 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80072ba:	2308      	movs	r3, #8
 80072bc:	425b      	negs	r3, r3
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	4413      	add	r3, r2
 80072c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	685a      	ldr	r2, [r3, #4]
 80072cc:	4b23      	ldr	r3, [pc, #140]	; (800735c <vPortFree+0xb4>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4013      	ands	r3, r2
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d10c      	bne.n	80072f0 <vPortFree+0x48>
	__asm volatile
 80072d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072da:	b672      	cpsid	i
 80072dc:	f383 8811 	msr	BASEPRI, r3
 80072e0:	f3bf 8f6f 	isb	sy
 80072e4:	f3bf 8f4f 	dsb	sy
 80072e8:	b662      	cpsie	i
 80072ea:	60fb      	str	r3, [r7, #12]
}
 80072ec:	bf00      	nop
 80072ee:	e7fe      	b.n	80072ee <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00c      	beq.n	8007312 <vPortFree+0x6a>
	__asm volatile
 80072f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fc:	b672      	cpsid	i
 80072fe:	f383 8811 	msr	BASEPRI, r3
 8007302:	f3bf 8f6f 	isb	sy
 8007306:	f3bf 8f4f 	dsb	sy
 800730a:	b662      	cpsie	i
 800730c:	60bb      	str	r3, [r7, #8]
}
 800730e:	bf00      	nop
 8007310:	e7fe      	b.n	8007310 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	685a      	ldr	r2, [r3, #4]
 8007316:	4b11      	ldr	r3, [pc, #68]	; (800735c <vPortFree+0xb4>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4013      	ands	r3, r2
 800731c:	2b00      	cmp	r3, #0
 800731e:	d019      	beq.n	8007354 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d115      	bne.n	8007354 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	685a      	ldr	r2, [r3, #4]
 800732c:	4b0b      	ldr	r3, [pc, #44]	; (800735c <vPortFree+0xb4>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	43db      	mvns	r3, r3
 8007332:	401a      	ands	r2, r3
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007338:	f7fe fc76 	bl	8005c28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	685a      	ldr	r2, [r3, #4]
 8007340:	4b07      	ldr	r3, [pc, #28]	; (8007360 <vPortFree+0xb8>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4413      	add	r3, r2
 8007346:	4a06      	ldr	r2, [pc, #24]	; (8007360 <vPortFree+0xb8>)
 8007348:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800734a:	6938      	ldr	r0, [r7, #16]
 800734c:	f000 f86c 	bl	8007428 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007350:	f7fe fc78 	bl	8005c44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007354:	bf00      	nop
 8007356:	3718      	adds	r7, #24
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}
 800735c:	2000536c 	.word	0x2000536c
 8007360:	20005364 	.word	0x20005364

08007364 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007364:	b480      	push	{r7}
 8007366:	b085      	sub	sp, #20
 8007368:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800736a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800736e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007370:	4b27      	ldr	r3, [pc, #156]	; (8007410 <prvHeapInit+0xac>)
 8007372:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f003 0307 	and.w	r3, r3, #7
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00c      	beq.n	8007398 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	3307      	adds	r3, #7
 8007382:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f023 0307 	bic.w	r3, r3, #7
 800738a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800738c:	68ba      	ldr	r2, [r7, #8]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	4a1f      	ldr	r2, [pc, #124]	; (8007410 <prvHeapInit+0xac>)
 8007394:	4413      	add	r3, r2
 8007396:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800739c:	4a1d      	ldr	r2, [pc, #116]	; (8007414 <prvHeapInit+0xb0>)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80073a2:	4b1c      	ldr	r3, [pc, #112]	; (8007414 <prvHeapInit+0xb0>)
 80073a4:	2200      	movs	r2, #0
 80073a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	68ba      	ldr	r2, [r7, #8]
 80073ac:	4413      	add	r3, r2
 80073ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80073b0:	2208      	movs	r2, #8
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	1a9b      	subs	r3, r3, r2
 80073b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f023 0307 	bic.w	r3, r3, #7
 80073be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	4a15      	ldr	r2, [pc, #84]	; (8007418 <prvHeapInit+0xb4>)
 80073c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80073c6:	4b14      	ldr	r3, [pc, #80]	; (8007418 <prvHeapInit+0xb4>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2200      	movs	r2, #0
 80073cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80073ce:	4b12      	ldr	r3, [pc, #72]	; (8007418 <prvHeapInit+0xb4>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2200      	movs	r2, #0
 80073d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	1ad2      	subs	r2, r2, r3
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80073e4:	4b0c      	ldr	r3, [pc, #48]	; (8007418 <prvHeapInit+0xb4>)
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	4a0a      	ldr	r2, [pc, #40]	; (800741c <prvHeapInit+0xb8>)
 80073f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	4a09      	ldr	r2, [pc, #36]	; (8007420 <prvHeapInit+0xbc>)
 80073fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80073fc:	4b09      	ldr	r3, [pc, #36]	; (8007424 <prvHeapInit+0xc0>)
 80073fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007402:	601a      	str	r2, [r3, #0]
}
 8007404:	bf00      	nop
 8007406:	3714      	adds	r7, #20
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr
 8007410:	20001758 	.word	0x20001758
 8007414:	20005358 	.word	0x20005358
 8007418:	20005360 	.word	0x20005360
 800741c:	20005368 	.word	0x20005368
 8007420:	20005364 	.word	0x20005364
 8007424:	2000536c 	.word	0x2000536c

08007428 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007428:	b480      	push	{r7}
 800742a:	b085      	sub	sp, #20
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007430:	4b28      	ldr	r3, [pc, #160]	; (80074d4 <prvInsertBlockIntoFreeList+0xac>)
 8007432:	60fb      	str	r3, [r7, #12]
 8007434:	e002      	b.n	800743c <prvInsertBlockIntoFreeList+0x14>
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	60fb      	str	r3, [r7, #12]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	429a      	cmp	r2, r3
 8007444:	d8f7      	bhi.n	8007436 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	68ba      	ldr	r2, [r7, #8]
 8007450:	4413      	add	r3, r2
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	429a      	cmp	r2, r3
 8007456:	d108      	bne.n	800746a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	685a      	ldr	r2, [r3, #4]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	441a      	add	r2, r3
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	68ba      	ldr	r2, [r7, #8]
 8007474:	441a      	add	r2, r3
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	429a      	cmp	r2, r3
 800747c:	d118      	bne.n	80074b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	4b15      	ldr	r3, [pc, #84]	; (80074d8 <prvInsertBlockIntoFreeList+0xb0>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	429a      	cmp	r2, r3
 8007488:	d00d      	beq.n	80074a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	685a      	ldr	r2, [r3, #4]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	441a      	add	r2, r3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	601a      	str	r2, [r3, #0]
 80074a4:	e008      	b.n	80074b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80074a6:	4b0c      	ldr	r3, [pc, #48]	; (80074d8 <prvInsertBlockIntoFreeList+0xb0>)
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	601a      	str	r2, [r3, #0]
 80074ae:	e003      	b.n	80074b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d002      	beq.n	80074c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074c6:	bf00      	nop
 80074c8:	3714      	adds	r7, #20
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	20005358 	.word	0x20005358
 80074d8:	20005360 	.word	0x20005360

080074dc <__libc_init_array>:
 80074dc:	b570      	push	{r4, r5, r6, lr}
 80074de:	4d0d      	ldr	r5, [pc, #52]	; (8007514 <__libc_init_array+0x38>)
 80074e0:	4c0d      	ldr	r4, [pc, #52]	; (8007518 <__libc_init_array+0x3c>)
 80074e2:	1b64      	subs	r4, r4, r5
 80074e4:	10a4      	asrs	r4, r4, #2
 80074e6:	2600      	movs	r6, #0
 80074e8:	42a6      	cmp	r6, r4
 80074ea:	d109      	bne.n	8007500 <__libc_init_array+0x24>
 80074ec:	4d0b      	ldr	r5, [pc, #44]	; (800751c <__libc_init_array+0x40>)
 80074ee:	4c0c      	ldr	r4, [pc, #48]	; (8007520 <__libc_init_array+0x44>)
 80074f0:	f000 f8f2 	bl	80076d8 <_init>
 80074f4:	1b64      	subs	r4, r4, r5
 80074f6:	10a4      	asrs	r4, r4, #2
 80074f8:	2600      	movs	r6, #0
 80074fa:	42a6      	cmp	r6, r4
 80074fc:	d105      	bne.n	800750a <__libc_init_array+0x2e>
 80074fe:	bd70      	pop	{r4, r5, r6, pc}
 8007500:	f855 3b04 	ldr.w	r3, [r5], #4
 8007504:	4798      	blx	r3
 8007506:	3601      	adds	r6, #1
 8007508:	e7ee      	b.n	80074e8 <__libc_init_array+0xc>
 800750a:	f855 3b04 	ldr.w	r3, [r5], #4
 800750e:	4798      	blx	r3
 8007510:	3601      	adds	r6, #1
 8007512:	e7f2      	b.n	80074fa <__libc_init_array+0x1e>
 8007514:	080077b8 	.word	0x080077b8
 8007518:	080077b8 	.word	0x080077b8
 800751c:	080077b8 	.word	0x080077b8
 8007520:	080077bc 	.word	0x080077bc

08007524 <__retarget_lock_acquire_recursive>:
 8007524:	4770      	bx	lr

08007526 <__retarget_lock_release_recursive>:
 8007526:	4770      	bx	lr

08007528 <memcpy>:
 8007528:	440a      	add	r2, r1
 800752a:	4291      	cmp	r1, r2
 800752c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007530:	d100      	bne.n	8007534 <memcpy+0xc>
 8007532:	4770      	bx	lr
 8007534:	b510      	push	{r4, lr}
 8007536:	f811 4b01 	ldrb.w	r4, [r1], #1
 800753a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800753e:	4291      	cmp	r1, r2
 8007540:	d1f9      	bne.n	8007536 <memcpy+0xe>
 8007542:	bd10      	pop	{r4, pc}

08007544 <memset>:
 8007544:	4402      	add	r2, r0
 8007546:	4603      	mov	r3, r0
 8007548:	4293      	cmp	r3, r2
 800754a:	d100      	bne.n	800754e <memset+0xa>
 800754c:	4770      	bx	lr
 800754e:	f803 1b01 	strb.w	r1, [r3], #1
 8007552:	e7f9      	b.n	8007548 <memset+0x4>

08007554 <cleanup_glue>:
 8007554:	b538      	push	{r3, r4, r5, lr}
 8007556:	460c      	mov	r4, r1
 8007558:	6809      	ldr	r1, [r1, #0]
 800755a:	4605      	mov	r5, r0
 800755c:	b109      	cbz	r1, 8007562 <cleanup_glue+0xe>
 800755e:	f7ff fff9 	bl	8007554 <cleanup_glue>
 8007562:	4621      	mov	r1, r4
 8007564:	4628      	mov	r0, r5
 8007566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800756a:	f000 b869 	b.w	8007640 <_free_r>
	...

08007570 <_reclaim_reent>:
 8007570:	4b2c      	ldr	r3, [pc, #176]	; (8007624 <_reclaim_reent+0xb4>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4283      	cmp	r3, r0
 8007576:	b570      	push	{r4, r5, r6, lr}
 8007578:	4604      	mov	r4, r0
 800757a:	d051      	beq.n	8007620 <_reclaim_reent+0xb0>
 800757c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800757e:	b143      	cbz	r3, 8007592 <_reclaim_reent+0x22>
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d14a      	bne.n	800761c <_reclaim_reent+0xac>
 8007586:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007588:	6819      	ldr	r1, [r3, #0]
 800758a:	b111      	cbz	r1, 8007592 <_reclaim_reent+0x22>
 800758c:	4620      	mov	r0, r4
 800758e:	f000 f857 	bl	8007640 <_free_r>
 8007592:	6961      	ldr	r1, [r4, #20]
 8007594:	b111      	cbz	r1, 800759c <_reclaim_reent+0x2c>
 8007596:	4620      	mov	r0, r4
 8007598:	f000 f852 	bl	8007640 <_free_r>
 800759c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800759e:	b111      	cbz	r1, 80075a6 <_reclaim_reent+0x36>
 80075a0:	4620      	mov	r0, r4
 80075a2:	f000 f84d 	bl	8007640 <_free_r>
 80075a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80075a8:	b111      	cbz	r1, 80075b0 <_reclaim_reent+0x40>
 80075aa:	4620      	mov	r0, r4
 80075ac:	f000 f848 	bl	8007640 <_free_r>
 80075b0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80075b2:	b111      	cbz	r1, 80075ba <_reclaim_reent+0x4a>
 80075b4:	4620      	mov	r0, r4
 80075b6:	f000 f843 	bl	8007640 <_free_r>
 80075ba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80075bc:	b111      	cbz	r1, 80075c4 <_reclaim_reent+0x54>
 80075be:	4620      	mov	r0, r4
 80075c0:	f000 f83e 	bl	8007640 <_free_r>
 80075c4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80075c6:	b111      	cbz	r1, 80075ce <_reclaim_reent+0x5e>
 80075c8:	4620      	mov	r0, r4
 80075ca:	f000 f839 	bl	8007640 <_free_r>
 80075ce:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80075d0:	b111      	cbz	r1, 80075d8 <_reclaim_reent+0x68>
 80075d2:	4620      	mov	r0, r4
 80075d4:	f000 f834 	bl	8007640 <_free_r>
 80075d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075da:	b111      	cbz	r1, 80075e2 <_reclaim_reent+0x72>
 80075dc:	4620      	mov	r0, r4
 80075de:	f000 f82f 	bl	8007640 <_free_r>
 80075e2:	69a3      	ldr	r3, [r4, #24]
 80075e4:	b1e3      	cbz	r3, 8007620 <_reclaim_reent+0xb0>
 80075e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80075e8:	4620      	mov	r0, r4
 80075ea:	4798      	blx	r3
 80075ec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80075ee:	b1b9      	cbz	r1, 8007620 <_reclaim_reent+0xb0>
 80075f0:	4620      	mov	r0, r4
 80075f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80075f6:	f7ff bfad 	b.w	8007554 <cleanup_glue>
 80075fa:	5949      	ldr	r1, [r1, r5]
 80075fc:	b941      	cbnz	r1, 8007610 <_reclaim_reent+0xa0>
 80075fe:	3504      	adds	r5, #4
 8007600:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007602:	2d80      	cmp	r5, #128	; 0x80
 8007604:	68d9      	ldr	r1, [r3, #12]
 8007606:	d1f8      	bne.n	80075fa <_reclaim_reent+0x8a>
 8007608:	4620      	mov	r0, r4
 800760a:	f000 f819 	bl	8007640 <_free_r>
 800760e:	e7ba      	b.n	8007586 <_reclaim_reent+0x16>
 8007610:	680e      	ldr	r6, [r1, #0]
 8007612:	4620      	mov	r0, r4
 8007614:	f000 f814 	bl	8007640 <_free_r>
 8007618:	4631      	mov	r1, r6
 800761a:	e7ef      	b.n	80075fc <_reclaim_reent+0x8c>
 800761c:	2500      	movs	r5, #0
 800761e:	e7ef      	b.n	8007600 <_reclaim_reent+0x90>
 8007620:	bd70      	pop	{r4, r5, r6, pc}
 8007622:	bf00      	nop
 8007624:	20000010 	.word	0x20000010

08007628 <__malloc_lock>:
 8007628:	4801      	ldr	r0, [pc, #4]	; (8007630 <__malloc_lock+0x8>)
 800762a:	f7ff bf7b 	b.w	8007524 <__retarget_lock_acquire_recursive>
 800762e:	bf00      	nop
 8007630:	20005370 	.word	0x20005370

08007634 <__malloc_unlock>:
 8007634:	4801      	ldr	r0, [pc, #4]	; (800763c <__malloc_unlock+0x8>)
 8007636:	f7ff bf76 	b.w	8007526 <__retarget_lock_release_recursive>
 800763a:	bf00      	nop
 800763c:	20005370 	.word	0x20005370

08007640 <_free_r>:
 8007640:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007642:	2900      	cmp	r1, #0
 8007644:	d044      	beq.n	80076d0 <_free_r+0x90>
 8007646:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800764a:	9001      	str	r0, [sp, #4]
 800764c:	2b00      	cmp	r3, #0
 800764e:	f1a1 0404 	sub.w	r4, r1, #4
 8007652:	bfb8      	it	lt
 8007654:	18e4      	addlt	r4, r4, r3
 8007656:	f7ff ffe7 	bl	8007628 <__malloc_lock>
 800765a:	4a1e      	ldr	r2, [pc, #120]	; (80076d4 <_free_r+0x94>)
 800765c:	9801      	ldr	r0, [sp, #4]
 800765e:	6813      	ldr	r3, [r2, #0]
 8007660:	b933      	cbnz	r3, 8007670 <_free_r+0x30>
 8007662:	6063      	str	r3, [r4, #4]
 8007664:	6014      	str	r4, [r2, #0]
 8007666:	b003      	add	sp, #12
 8007668:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800766c:	f7ff bfe2 	b.w	8007634 <__malloc_unlock>
 8007670:	42a3      	cmp	r3, r4
 8007672:	d908      	bls.n	8007686 <_free_r+0x46>
 8007674:	6825      	ldr	r5, [r4, #0]
 8007676:	1961      	adds	r1, r4, r5
 8007678:	428b      	cmp	r3, r1
 800767a:	bf01      	itttt	eq
 800767c:	6819      	ldreq	r1, [r3, #0]
 800767e:	685b      	ldreq	r3, [r3, #4]
 8007680:	1949      	addeq	r1, r1, r5
 8007682:	6021      	streq	r1, [r4, #0]
 8007684:	e7ed      	b.n	8007662 <_free_r+0x22>
 8007686:	461a      	mov	r2, r3
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	b10b      	cbz	r3, 8007690 <_free_r+0x50>
 800768c:	42a3      	cmp	r3, r4
 800768e:	d9fa      	bls.n	8007686 <_free_r+0x46>
 8007690:	6811      	ldr	r1, [r2, #0]
 8007692:	1855      	adds	r5, r2, r1
 8007694:	42a5      	cmp	r5, r4
 8007696:	d10b      	bne.n	80076b0 <_free_r+0x70>
 8007698:	6824      	ldr	r4, [r4, #0]
 800769a:	4421      	add	r1, r4
 800769c:	1854      	adds	r4, r2, r1
 800769e:	42a3      	cmp	r3, r4
 80076a0:	6011      	str	r1, [r2, #0]
 80076a2:	d1e0      	bne.n	8007666 <_free_r+0x26>
 80076a4:	681c      	ldr	r4, [r3, #0]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	6053      	str	r3, [r2, #4]
 80076aa:	4421      	add	r1, r4
 80076ac:	6011      	str	r1, [r2, #0]
 80076ae:	e7da      	b.n	8007666 <_free_r+0x26>
 80076b0:	d902      	bls.n	80076b8 <_free_r+0x78>
 80076b2:	230c      	movs	r3, #12
 80076b4:	6003      	str	r3, [r0, #0]
 80076b6:	e7d6      	b.n	8007666 <_free_r+0x26>
 80076b8:	6825      	ldr	r5, [r4, #0]
 80076ba:	1961      	adds	r1, r4, r5
 80076bc:	428b      	cmp	r3, r1
 80076be:	bf04      	itt	eq
 80076c0:	6819      	ldreq	r1, [r3, #0]
 80076c2:	685b      	ldreq	r3, [r3, #4]
 80076c4:	6063      	str	r3, [r4, #4]
 80076c6:	bf04      	itt	eq
 80076c8:	1949      	addeq	r1, r1, r5
 80076ca:	6021      	streq	r1, [r4, #0]
 80076cc:	6054      	str	r4, [r2, #4]
 80076ce:	e7ca      	b.n	8007666 <_free_r+0x26>
 80076d0:	b003      	add	sp, #12
 80076d2:	bd30      	pop	{r4, r5, pc}
 80076d4:	20005374 	.word	0x20005374

080076d8 <_init>:
 80076d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076da:	bf00      	nop
 80076dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076de:	bc08      	pop	{r3}
 80076e0:	469e      	mov	lr, r3
 80076e2:	4770      	bx	lr

080076e4 <_fini>:
 80076e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076e6:	bf00      	nop
 80076e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ea:	bc08      	pop	{r3}
 80076ec:	469e      	mov	lr, r3
 80076ee:	4770      	bx	lr
