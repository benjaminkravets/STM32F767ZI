
usb_led_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dda0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  0800dfa0  0800dfa0  0001dfa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e1c8  0800e1c8  000202b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e1c8  0800e1c8  0001e1c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e1d0  0800e1d0  000202b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e1d0  0800e1d0  0001e1d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e1d4  0800e1d4  0001e1d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  0800e1d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000174  0800e34c  00020174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000214  0800e3ec  00020214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00007070  200002b4  0800e48c  000202b4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20007324  0800e48c  00027324  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000202b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00030084  00000000  00000000  000202e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005a1e  00000000  00000000  00050366  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002300  00000000  00000000  00055d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002098  00000000  00000000  00058088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000ab8a  00000000  00000000  0005a120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00028f7d  00000000  00000000  00064caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00117866  00000000  00000000  0008dc27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001a548d  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000096ec  00000000  00000000  001a54e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002b4 	.word	0x200002b4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800df88 	.word	0x0800df88

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002b8 	.word	0x200002b8
 800023c:	0800df88 	.word	0x0800df88

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002d0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d332      	bcc.n	80002c2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d314      	bcc.n	8000290 <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000284:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000288:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800028a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028e:	4770      	bx	lr

08000290 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000290:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000292:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000294:	d319      	bcc.n	80002ca <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000296:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000298:	1b12      	subs	r2, r2, r4

0800029a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800029a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80002a2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a4:	d1f9      	bne.n	800029a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a8:	d005      	beq.n	80002b6 <_No2ChunkNeeded>

080002aa <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002aa:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002ae:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002b2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b4:	d1f9      	bne.n	80002aa <_LoopCopyAfterWrapAround>

080002b6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80002b6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002ba:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002bc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002be:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002c0:	4770      	bx	lr

080002c2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002c2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002c4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002c6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c8:	d2cd      	bcs.n	8000266 <_Case4>

080002ca <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002ca:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ce:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002d0:	200002d0 	.word	0x200002d0

080002d4 <__aeabi_uldivmod>:
 80002d4:	b953      	cbnz	r3, 80002ec <__aeabi_uldivmod+0x18>
 80002d6:	b94a      	cbnz	r2, 80002ec <__aeabi_uldivmod+0x18>
 80002d8:	2900      	cmp	r1, #0
 80002da:	bf08      	it	eq
 80002dc:	2800      	cmpeq	r0, #0
 80002de:	bf1c      	itt	ne
 80002e0:	f04f 31ff 	movne.w	r1, #4294967295
 80002e4:	f04f 30ff 	movne.w	r0, #4294967295
 80002e8:	f000 b974 	b.w	80005d4 <__aeabi_idiv0>
 80002ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f4:	f000 f806 	bl	8000304 <__udivmoddi4>
 80002f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000300:	b004      	add	sp, #16
 8000302:	4770      	bx	lr

08000304 <__udivmoddi4>:
 8000304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000308:	9d08      	ldr	r5, [sp, #32]
 800030a:	4604      	mov	r4, r0
 800030c:	468e      	mov	lr, r1
 800030e:	2b00      	cmp	r3, #0
 8000310:	d14d      	bne.n	80003ae <__udivmoddi4+0xaa>
 8000312:	428a      	cmp	r2, r1
 8000314:	4694      	mov	ip, r2
 8000316:	d969      	bls.n	80003ec <__udivmoddi4+0xe8>
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	b152      	cbz	r2, 8000334 <__udivmoddi4+0x30>
 800031e:	fa01 f302 	lsl.w	r3, r1, r2
 8000322:	f1c2 0120 	rsb	r1, r2, #32
 8000326:	fa20 f101 	lsr.w	r1, r0, r1
 800032a:	fa0c fc02 	lsl.w	ip, ip, r2
 800032e:	ea41 0e03 	orr.w	lr, r1, r3
 8000332:	4094      	lsls	r4, r2
 8000334:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000338:	0c21      	lsrs	r1, r4, #16
 800033a:	fbbe f6f8 	udiv	r6, lr, r8
 800033e:	fa1f f78c 	uxth.w	r7, ip
 8000342:	fb08 e316 	mls	r3, r8, r6, lr
 8000346:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034a:	fb06 f107 	mul.w	r1, r6, r7
 800034e:	4299      	cmp	r1, r3
 8000350:	d90a      	bls.n	8000368 <__udivmoddi4+0x64>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 811f 	bcs.w	800059c <__udivmoddi4+0x298>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 811c 	bls.w	800059c <__udivmoddi4+0x298>
 8000364:	3e02      	subs	r6, #2
 8000366:	4463      	add	r3, ip
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 f707 	mul.w	r7, r0, r7
 800037c:	42a7      	cmp	r7, r4
 800037e:	d90a      	bls.n	8000396 <__udivmoddi4+0x92>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f100 33ff 	add.w	r3, r0, #4294967295
 8000388:	f080 810a 	bcs.w	80005a0 <__udivmoddi4+0x29c>
 800038c:	42a7      	cmp	r7, r4
 800038e:	f240 8107 	bls.w	80005a0 <__udivmoddi4+0x29c>
 8000392:	4464      	add	r4, ip
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039a:	1be4      	subs	r4, r4, r7
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa4>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xc2>
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	f000 80ef 	beq.w	8000596 <__udivmoddi4+0x292>
 80003b8:	2600      	movs	r6, #0
 80003ba:	e9c5 0100 	strd	r0, r1, [r5]
 80003be:	4630      	mov	r0, r6
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f683 	clz	r6, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d14a      	bne.n	8000464 <__udivmoddi4+0x160>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd4>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80f9 	bhi.w	80005ca <__udivmoddi4+0x2c6>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	469e      	mov	lr, r3
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa4>
 80003e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa4>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xec>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 8092 	bne.w	800051e <__udivmoddi4+0x21a>
 80003fa:	eba1 010c 	sub.w	r1, r1, ip
 80003fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000402:	fa1f fe8c 	uxth.w	lr, ip
 8000406:	2601      	movs	r6, #1
 8000408:	0c20      	lsrs	r0, r4, #16
 800040a:	fbb1 f3f7 	udiv	r3, r1, r7
 800040e:	fb07 1113 	mls	r1, r7, r3, r1
 8000412:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000416:	fb0e f003 	mul.w	r0, lr, r3
 800041a:	4288      	cmp	r0, r1
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x12c>
 800041e:	eb1c 0101 	adds.w	r1, ip, r1
 8000422:	f103 38ff 	add.w	r8, r3, #4294967295
 8000426:	d202      	bcs.n	800042e <__udivmoddi4+0x12a>
 8000428:	4288      	cmp	r0, r1
 800042a:	f200 80cb 	bhi.w	80005c4 <__udivmoddi4+0x2c0>
 800042e:	4643      	mov	r3, r8
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1110 	mls	r1, r7, r0, r1
 800043c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000440:	fb0e fe00 	mul.w	lr, lr, r0
 8000444:	45a6      	cmp	lr, r4
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x156>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d202      	bcs.n	8000458 <__udivmoddi4+0x154>
 8000452:	45a6      	cmp	lr, r4
 8000454:	f200 80bb 	bhi.w	80005ce <__udivmoddi4+0x2ca>
 8000458:	4608      	mov	r0, r1
 800045a:	eba4 040e 	sub.w	r4, r4, lr
 800045e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000462:	e79c      	b.n	800039e <__udivmoddi4+0x9a>
 8000464:	f1c6 0720 	rsb	r7, r6, #32
 8000468:	40b3      	lsls	r3, r6
 800046a:	fa22 fc07 	lsr.w	ip, r2, r7
 800046e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000472:	fa20 f407 	lsr.w	r4, r0, r7
 8000476:	fa01 f306 	lsl.w	r3, r1, r6
 800047a:	431c      	orrs	r4, r3
 800047c:	40f9      	lsrs	r1, r7
 800047e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000482:	fa00 f306 	lsl.w	r3, r0, r6
 8000486:	fbb1 f8f9 	udiv	r8, r1, r9
 800048a:	0c20      	lsrs	r0, r4, #16
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	fb09 1118 	mls	r1, r9, r8, r1
 8000494:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000498:	fb08 f00e 	mul.w	r0, r8, lr
 800049c:	4288      	cmp	r0, r1
 800049e:	fa02 f206 	lsl.w	r2, r2, r6
 80004a2:	d90b      	bls.n	80004bc <__udivmoddi4+0x1b8>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004ac:	f080 8088 	bcs.w	80005c0 <__udivmoddi4+0x2bc>
 80004b0:	4288      	cmp	r0, r1
 80004b2:	f240 8085 	bls.w	80005c0 <__udivmoddi4+0x2bc>
 80004b6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	1a09      	subs	r1, r1, r0
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c4:	fb09 1110 	mls	r1, r9, r0, r1
 80004c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d0:	458e      	cmp	lr, r1
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x1e2>
 80004d4:	eb1c 0101 	adds.w	r1, ip, r1
 80004d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80004dc:	d26c      	bcs.n	80005b8 <__udivmoddi4+0x2b4>
 80004de:	458e      	cmp	lr, r1
 80004e0:	d96a      	bls.n	80005b8 <__udivmoddi4+0x2b4>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4461      	add	r1, ip
 80004e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ea:	fba0 9402 	umull	r9, r4, r0, r2
 80004ee:	eba1 010e 	sub.w	r1, r1, lr
 80004f2:	42a1      	cmp	r1, r4
 80004f4:	46c8      	mov	r8, r9
 80004f6:	46a6      	mov	lr, r4
 80004f8:	d356      	bcc.n	80005a8 <__udivmoddi4+0x2a4>
 80004fa:	d053      	beq.n	80005a4 <__udivmoddi4+0x2a0>
 80004fc:	b15d      	cbz	r5, 8000516 <__udivmoddi4+0x212>
 80004fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000502:	eb61 010e 	sbc.w	r1, r1, lr
 8000506:	fa01 f707 	lsl.w	r7, r1, r7
 800050a:	fa22 f306 	lsr.w	r3, r2, r6
 800050e:	40f1      	lsrs	r1, r6
 8000510:	431f      	orrs	r7, r3
 8000512:	e9c5 7100 	strd	r7, r1, [r5]
 8000516:	2600      	movs	r6, #0
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	f1c2 0320 	rsb	r3, r2, #32
 8000522:	40d8      	lsrs	r0, r3
 8000524:	fa0c fc02 	lsl.w	ip, ip, r2
 8000528:	fa21 f303 	lsr.w	r3, r1, r3
 800052c:	4091      	lsls	r1, r2
 800052e:	4301      	orrs	r1, r0
 8000530:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000534:	fa1f fe8c 	uxth.w	lr, ip
 8000538:	fbb3 f0f7 	udiv	r0, r3, r7
 800053c:	fb07 3610 	mls	r6, r7, r0, r3
 8000540:	0c0b      	lsrs	r3, r1, #16
 8000542:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000546:	fb00 f60e 	mul.w	r6, r0, lr
 800054a:	429e      	cmp	r6, r3
 800054c:	fa04 f402 	lsl.w	r4, r4, r2
 8000550:	d908      	bls.n	8000564 <__udivmoddi4+0x260>
 8000552:	eb1c 0303 	adds.w	r3, ip, r3
 8000556:	f100 38ff 	add.w	r8, r0, #4294967295
 800055a:	d22f      	bcs.n	80005bc <__udivmoddi4+0x2b8>
 800055c:	429e      	cmp	r6, r3
 800055e:	d92d      	bls.n	80005bc <__udivmoddi4+0x2b8>
 8000560:	3802      	subs	r0, #2
 8000562:	4463      	add	r3, ip
 8000564:	1b9b      	subs	r3, r3, r6
 8000566:	b289      	uxth	r1, r1
 8000568:	fbb3 f6f7 	udiv	r6, r3, r7
 800056c:	fb07 3316 	mls	r3, r7, r6, r3
 8000570:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000574:	fb06 f30e 	mul.w	r3, r6, lr
 8000578:	428b      	cmp	r3, r1
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x28a>
 800057c:	eb1c 0101 	adds.w	r1, ip, r1
 8000580:	f106 38ff 	add.w	r8, r6, #4294967295
 8000584:	d216      	bcs.n	80005b4 <__udivmoddi4+0x2b0>
 8000586:	428b      	cmp	r3, r1
 8000588:	d914      	bls.n	80005b4 <__udivmoddi4+0x2b0>
 800058a:	3e02      	subs	r6, #2
 800058c:	4461      	add	r1, ip
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000594:	e738      	b.n	8000408 <__udivmoddi4+0x104>
 8000596:	462e      	mov	r6, r5
 8000598:	4628      	mov	r0, r5
 800059a:	e705      	b.n	80003a8 <__udivmoddi4+0xa4>
 800059c:	4606      	mov	r6, r0
 800059e:	e6e3      	b.n	8000368 <__udivmoddi4+0x64>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6f8      	b.n	8000396 <__udivmoddi4+0x92>
 80005a4:	454b      	cmp	r3, r9
 80005a6:	d2a9      	bcs.n	80004fc <__udivmoddi4+0x1f8>
 80005a8:	ebb9 0802 	subs.w	r8, r9, r2
 80005ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b0:	3801      	subs	r0, #1
 80005b2:	e7a3      	b.n	80004fc <__udivmoddi4+0x1f8>
 80005b4:	4646      	mov	r6, r8
 80005b6:	e7ea      	b.n	800058e <__udivmoddi4+0x28a>
 80005b8:	4620      	mov	r0, r4
 80005ba:	e794      	b.n	80004e6 <__udivmoddi4+0x1e2>
 80005bc:	4640      	mov	r0, r8
 80005be:	e7d1      	b.n	8000564 <__udivmoddi4+0x260>
 80005c0:	46d0      	mov	r8, sl
 80005c2:	e77b      	b.n	80004bc <__udivmoddi4+0x1b8>
 80005c4:	3b02      	subs	r3, #2
 80005c6:	4461      	add	r1, ip
 80005c8:	e732      	b.n	8000430 <__udivmoddi4+0x12c>
 80005ca:	4630      	mov	r0, r6
 80005cc:	e709      	b.n	80003e2 <__udivmoddi4+0xde>
 80005ce:	4464      	add	r4, ip
 80005d0:	3802      	subs	r0, #2
 80005d2:	e742      	b.n	800045a <__udivmoddi4+0x156>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80005de:	4b26      	ldr	r3, [pc, #152]	; (8000678 <_DoInit+0xa0>)
 80005e0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80005e2:	22a8      	movs	r2, #168	; 0xa8
 80005e4:	2100      	movs	r1, #0
 80005e6:	6838      	ldr	r0, [r7, #0]
 80005e8:	f00d fb60 	bl	800dcac <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	2203      	movs	r2, #3
 80005f0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	2203      	movs	r2, #3
 80005f6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	4a20      	ldr	r2, [pc, #128]	; (800067c <_DoInit+0xa4>)
 80005fc:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	4a1f      	ldr	r2, [pc, #124]	; (8000680 <_DoInit+0xa8>)
 8000602:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800060a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	2200      	movs	r2, #0
 8000610:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	2200      	movs	r2, #0
 8000616:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	2200      	movs	r2, #0
 800061c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	4a16      	ldr	r2, [pc, #88]	; (800067c <_DoInit+0xa4>)
 8000622:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	4a17      	ldr	r2, [pc, #92]	; (8000684 <_DoInit+0xac>)
 8000628:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	2210      	movs	r2, #16
 800062e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	2200      	movs	r2, #0
 8000634:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	2200      	movs	r2, #0
 800063a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	2200      	movs	r2, #0
 8000640:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000642:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	e00c      	b.n	8000666 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f1c3 030f 	rsb	r3, r3, #15
 8000652:	4a0d      	ldr	r2, [pc, #52]	; (8000688 <_DoInit+0xb0>)
 8000654:	5cd1      	ldrb	r1, [r2, r3]
 8000656:	683a      	ldr	r2, [r7, #0]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4413      	add	r3, r2
 800065c:	460a      	mov	r2, r1
 800065e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	3301      	adds	r3, #1
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2b0f      	cmp	r3, #15
 800066a:	d9ef      	bls.n	800064c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800066c:	f3bf 8f5f 	dmb	sy
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	200002d0 	.word	0x200002d0
 800067c:	0800dfa0 	.word	0x0800dfa0
 8000680:	20000378 	.word	0x20000378
 8000684:	20000778 	.word	0x20000778
 8000688:	0800e0b8 	.word	0x0800e0b8

0800068c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b08c      	sub	sp, #48	; 0x30
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8000698:	4b3e      	ldr	r3, [pc, #248]	; (8000794 <SEGGER_RTT_ReadNoLock+0x108>)
 800069a:	623b      	str	r3, [r7, #32]
 800069c:	6a3b      	ldr	r3, [r7, #32]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d101      	bne.n	80006aa <SEGGER_RTT_ReadNoLock+0x1e>
 80006a6:	f7ff ff97 	bl	80005d8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80006aa:	68fa      	ldr	r2, [r7, #12]
 80006ac:	4613      	mov	r3, r2
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	4413      	add	r3, r2
 80006b2:	00db      	lsls	r3, r3, #3
 80006b4:	3360      	adds	r3, #96	; 0x60
 80006b6:	4a37      	ldr	r2, [pc, #220]	; (8000794 <SEGGER_RTT_ReadNoLock+0x108>)
 80006b8:	4413      	add	r3, r2
 80006ba:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	691b      	ldr	r3, [r3, #16]
 80006c4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80006c6:	69fb      	ldr	r3, [r7, #28]
 80006c8:	68db      	ldr	r3, [r3, #12]
 80006ca:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80006cc:	2300      	movs	r3, #0
 80006ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80006d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006d2:	69bb      	ldr	r3, [r7, #24]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d92b      	bls.n	8000730 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80006d8:	69fb      	ldr	r3, [r7, #28]
 80006da:	689a      	ldr	r2, [r3, #8]
 80006dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006de:	1ad3      	subs	r3, r2, r3
 80006e0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80006e2:	697a      	ldr	r2, [r7, #20]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4293      	cmp	r3, r2
 80006e8:	bf28      	it	cs
 80006ea:	4613      	movcs	r3, r2
 80006ec:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	685a      	ldr	r2, [r3, #4]
 80006f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006f4:	4413      	add	r3, r2
 80006f6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80006f8:	697a      	ldr	r2, [r7, #20]
 80006fa:	6939      	ldr	r1, [r7, #16]
 80006fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006fe:	f00d fac7 	bl	800dc90 <memcpy>
    NumBytesRead += NumBytesRem;
 8000702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	4413      	add	r3, r2
 8000708:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800070a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	4413      	add	r3, r2
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	1ad3      	subs	r3, r2, r3
 8000718:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800071a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	4413      	add	r3, r2
 8000720:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	689b      	ldr	r3, [r3, #8]
 8000726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000728:	429a      	cmp	r2, r3
 800072a:	d101      	bne.n	8000730 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800072c:	2300      	movs	r3, #0
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8000730:	69ba      	ldr	r2, [r7, #24]
 8000732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000734:	1ad3      	subs	r3, r2, r3
 8000736:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8000738:	697a      	ldr	r2, [r7, #20]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4293      	cmp	r3, r2
 800073e:	bf28      	it	cs
 8000740:	4613      	movcs	r3, r2
 8000742:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d019      	beq.n	800077e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	685a      	ldr	r2, [r3, #4]
 800074e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000750:	4413      	add	r3, r2
 8000752:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8000754:	697a      	ldr	r2, [r7, #20]
 8000756:	6939      	ldr	r1, [r7, #16]
 8000758:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800075a:	f00d fa99 	bl	800dc90 <memcpy>
    NumBytesRead += NumBytesRem;
 800075e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	4413      	add	r3, r2
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8000766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	4413      	add	r3, r2
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	1ad3      	subs	r3, r2, r3
 8000774:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8000776:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	4413      	add	r3, r2
 800077c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800077e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000780:	2b00      	cmp	r3, #0
 8000782:	d002      	beq.n	800078a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000788:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800078a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800078c:	4618      	mov	r0, r3
 800078e:	3730      	adds	r7, #48	; 0x30
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200002d0 	.word	0x200002d0

08000798 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
 80007a4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80007a6:	4b3d      	ldr	r3, [pc, #244]	; (800089c <SEGGER_RTT_AllocUpBuffer+0x104>)
 80007a8:	61bb      	str	r3, [r7, #24]
 80007aa:	69bb      	ldr	r3, [r7, #24]
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d101      	bne.n	80007b8 <SEGGER_RTT_AllocUpBuffer+0x20>
 80007b4:	f7ff ff10 	bl	80005d8 <_DoInit>
  SEGGER_RTT_LOCK();
 80007b8:	f3ef 8311 	mrs	r3, BASEPRI
 80007bc:	f04f 0120 	mov.w	r1, #32
 80007c0:	f381 8811 	msr	BASEPRI, r1
 80007c4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80007c6:	4b35      	ldr	r3, [pc, #212]	; (800089c <SEGGER_RTT_AllocUpBuffer+0x104>)
 80007c8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80007ce:	6939      	ldr	r1, [r7, #16]
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	1c5a      	adds	r2, r3, #1
 80007d4:	4613      	mov	r3, r2
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	4413      	add	r3, r2
 80007da:	00db      	lsls	r3, r3, #3
 80007dc:	440b      	add	r3, r1
 80007de:	3304      	adds	r3, #4
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d008      	beq.n	80007f8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	3301      	adds	r3, #1
 80007ea:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80007ec:	693b      	ldr	r3, [r7, #16]
 80007ee:	691b      	ldr	r3, [r3, #16]
 80007f0:	69fa      	ldr	r2, [r7, #28]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	dbeb      	blt.n	80007ce <SEGGER_RTT_AllocUpBuffer+0x36>
 80007f6:	e000      	b.n	80007fa <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80007f8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	691b      	ldr	r3, [r3, #16]
 80007fe:	69fa      	ldr	r2, [r7, #28]
 8000800:	429a      	cmp	r2, r3
 8000802:	da3f      	bge.n	8000884 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8000804:	6939      	ldr	r1, [r7, #16]
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	1c5a      	adds	r2, r3, #1
 800080a:	4613      	mov	r3, r2
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	4413      	add	r3, r2
 8000810:	00db      	lsls	r3, r3, #3
 8000812:	440b      	add	r3, r1
 8000814:	68fa      	ldr	r2, [r7, #12]
 8000816:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8000818:	6939      	ldr	r1, [r7, #16]
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	1c5a      	adds	r2, r3, #1
 800081e:	4613      	mov	r3, r2
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	4413      	add	r3, r2
 8000824:	00db      	lsls	r3, r3, #3
 8000826:	440b      	add	r3, r1
 8000828:	3304      	adds	r3, #4
 800082a:	68ba      	ldr	r2, [r7, #8]
 800082c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800082e:	6939      	ldr	r1, [r7, #16]
 8000830:	69fa      	ldr	r2, [r7, #28]
 8000832:	4613      	mov	r3, r2
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	4413      	add	r3, r2
 8000838:	00db      	lsls	r3, r3, #3
 800083a:	440b      	add	r3, r1
 800083c:	3320      	adds	r3, #32
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8000842:	6939      	ldr	r1, [r7, #16]
 8000844:	69fa      	ldr	r2, [r7, #28]
 8000846:	4613      	mov	r3, r2
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	4413      	add	r3, r2
 800084c:	00db      	lsls	r3, r3, #3
 800084e:	440b      	add	r3, r1
 8000850:	3328      	adds	r3, #40	; 0x28
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8000856:	6939      	ldr	r1, [r7, #16]
 8000858:	69fa      	ldr	r2, [r7, #28]
 800085a:	4613      	mov	r3, r2
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	4413      	add	r3, r2
 8000860:	00db      	lsls	r3, r3, #3
 8000862:	440b      	add	r3, r1
 8000864:	3324      	adds	r3, #36	; 0x24
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800086a:	6939      	ldr	r1, [r7, #16]
 800086c:	69fa      	ldr	r2, [r7, #28]
 800086e:	4613      	mov	r3, r2
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	4413      	add	r3, r2
 8000874:	00db      	lsls	r3, r3, #3
 8000876:	440b      	add	r3, r1
 8000878:	332c      	adds	r3, #44	; 0x2c
 800087a:	683a      	ldr	r2, [r7, #0]
 800087c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800087e:	f3bf 8f5f 	dmb	sy
 8000882:	e002      	b.n	800088a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8000884:	f04f 33ff 	mov.w	r3, #4294967295
 8000888:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8000890:	69fb      	ldr	r3, [r7, #28]
}
 8000892:	4618      	mov	r0, r3
 8000894:	3720      	adds	r7, #32
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200002d0 	.word	0x200002d0

080008a0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	; 0x28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
 80008ac:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80008ae:	4b21      	ldr	r3, [pc, #132]	; (8000934 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80008b0:	623b      	str	r3, [r7, #32]
 80008b2:	6a3b      	ldr	r3, [r7, #32]
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d101      	bne.n	80008c0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80008bc:	f7ff fe8c 	bl	80005d8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80008c0:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80008c2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	2b02      	cmp	r3, #2
 80008c8:	d82c      	bhi.n	8000924 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80008ca:	f3ef 8311 	mrs	r3, BASEPRI
 80008ce:	f04f 0120 	mov.w	r1, #32
 80008d2:	f381 8811 	msr	BASEPRI, r1
 80008d6:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80008d8:	68fa      	ldr	r2, [r7, #12]
 80008da:	4613      	mov	r3, r2
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	4413      	add	r3, r2
 80008e0:	00db      	lsls	r3, r3, #3
 80008e2:	3360      	adds	r3, #96	; 0x60
 80008e4:	69fa      	ldr	r2, [r7, #28]
 80008e6:	4413      	add	r3, r2
 80008e8:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d00e      	beq.n	800090e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	68ba      	ldr	r2, [r7, #8]
 80008f4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	683a      	ldr	r2, [r7, #0]
 8000900:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000912:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000914:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8000918:	69bb      	ldr	r3, [r7, #24]
 800091a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
 8000922:	e002      	b.n	800092a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8000924:	f04f 33ff 	mov.w	r3, #4294967295
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800092c:	4618      	mov	r0, r3
 800092e:	3728      	adds	r7, #40	; 0x28
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200002d0 	.word	0x200002d0

08000938 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8000938:	b480      	push	{r7}
 800093a:	b087      	sub	sp, #28
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	1c5a      	adds	r2, r3, #1
 800094c:	60fa      	str	r2, [r7, #12]
 800094e:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2b80      	cmp	r3, #128	; 0x80
 8000954:	d90a      	bls.n	800096c <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8000956:	2380      	movs	r3, #128	; 0x80
 8000958:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 800095a:	e007      	b.n	800096c <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 800095c:	68ba      	ldr	r2, [r7, #8]
 800095e:	1c53      	adds	r3, r2, #1
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	1c59      	adds	r1, r3, #1
 8000966:	60f9      	str	r1, [r7, #12]
 8000968:	7812      	ldrb	r2, [r2, #0]
 800096a:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	1e5a      	subs	r2, r3, #1
 8000970:	607a      	str	r2, [r7, #4]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d003      	beq.n	800097e <_EncodeStr+0x46>
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d1ee      	bne.n	800095c <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800097e:	68ba      	ldr	r2, [r7, #8]
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	b2da      	uxtb	r2, r3
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 800098a:	68fb      	ldr	r3, [r7, #12]
}
 800098c:	4618      	mov	r0, r3
 800098e:	371c      	adds	r7, #28
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3307      	adds	r3, #7
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80009b6:	4b35      	ldr	r3, [pc, #212]	; (8000a8c <_HandleIncomingPacket+0xdc>)
 80009b8:	7e1b      	ldrb	r3, [r3, #24]
 80009ba:	4618      	mov	r0, r3
 80009bc:	1cfb      	adds	r3, r7, #3
 80009be:	2201      	movs	r2, #1
 80009c0:	4619      	mov	r1, r3
 80009c2:	f7ff fe63 	bl	800068c <SEGGER_RTT_ReadNoLock>
 80009c6:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d052      	beq.n	8000a74 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 80009ce:	78fb      	ldrb	r3, [r7, #3]
 80009d0:	2b80      	cmp	r3, #128	; 0x80
 80009d2:	d031      	beq.n	8000a38 <_HandleIncomingPacket+0x88>
 80009d4:	2b80      	cmp	r3, #128	; 0x80
 80009d6:	dc40      	bgt.n	8000a5a <_HandleIncomingPacket+0xaa>
 80009d8:	2b07      	cmp	r3, #7
 80009da:	dc15      	bgt.n	8000a08 <_HandleIncomingPacket+0x58>
 80009dc:	2b00      	cmp	r3, #0
 80009de:	dd3c      	ble.n	8000a5a <_HandleIncomingPacket+0xaa>
 80009e0:	3b01      	subs	r3, #1
 80009e2:	2b06      	cmp	r3, #6
 80009e4:	d839      	bhi.n	8000a5a <_HandleIncomingPacket+0xaa>
 80009e6:	a201      	add	r2, pc, #4	; (adr r2, 80009ec <_HandleIncomingPacket+0x3c>)
 80009e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ec:	08000a0f 	.word	0x08000a0f
 80009f0:	08000a15 	.word	0x08000a15
 80009f4:	08000a1b 	.word	0x08000a1b
 80009f8:	08000a21 	.word	0x08000a21
 80009fc:	08000a27 	.word	0x08000a27
 8000a00:	08000a2d 	.word	0x08000a2d
 8000a04:	08000a33 	.word	0x08000a33
 8000a08:	2b7f      	cmp	r3, #127	; 0x7f
 8000a0a:	d035      	beq.n	8000a78 <_HandleIncomingPacket+0xc8>
 8000a0c:	e025      	b.n	8000a5a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8000a0e:	f000 fbe5 	bl	80011dc <SEGGER_SYSVIEW_Start>
      break;
 8000a12:	e036      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8000a14:	f000 fc9c 	bl	8001350 <SEGGER_SYSVIEW_Stop>
      break;
 8000a18:	e033      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8000a1a:	f000 fe75 	bl	8001708 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8000a1e:	e030      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8000a20:	f000 fe3a 	bl	8001698 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8000a24:	e02d      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8000a26:	f000 fcb9 	bl	800139c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8000a2a:	e02a      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8000a2c:	f000 ff46 	bl	80018bc <SEGGER_SYSVIEW_SendNumModules>
      break;
 8000a30:	e027      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8000a32:	f000 ff25 	bl	8001880 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8000a36:	e024      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <_HandleIncomingPacket+0xdc>)
 8000a3a:	7e1b      	ldrb	r3, [r3, #24]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	1cfb      	adds	r3, r7, #3
 8000a40:	2201      	movs	r2, #1
 8000a42:	4619      	mov	r1, r3
 8000a44:	f7ff fe22 	bl	800068c <SEGGER_RTT_ReadNoLock>
 8000a48:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d015      	beq.n	8000a7c <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8000a50:	78fb      	ldrb	r3, [r7, #3]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 fe8a 	bl	800176c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8000a58:	e010      	b.n	8000a7c <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8000a5a:	78fb      	ldrb	r3, [r7, #3]
 8000a5c:	b25b      	sxtb	r3, r3
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	da0e      	bge.n	8000a80 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000a62:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <_HandleIncomingPacket+0xdc>)
 8000a64:	7e1b      	ldrb	r3, [r3, #24]
 8000a66:	4618      	mov	r0, r3
 8000a68:	1cfb      	adds	r3, r7, #3
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f7ff fe0d 	bl	800068c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8000a72:	e005      	b.n	8000a80 <_HandleIncomingPacket+0xd0>
    }
  }
 8000a74:	bf00      	nop
 8000a76:	e004      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
      break;
 8000a78:	bf00      	nop
 8000a7a:	e002      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
      break;
 8000a7c:	bf00      	nop
 8000a7e:	e000      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
      break;
 8000a80:	bf00      	nop
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000b90 	.word	0x20000b90

08000a90 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08c      	sub	sp, #48	; 0x30
 8000a94:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8000a96:	2301      	movs	r3, #1
 8000a98:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000aa4:	4b31      	ldr	r3, [pc, #196]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000aa6:	695b      	ldr	r3, [r3, #20]
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000aaa:	e00b      	b.n	8000ac4 <_TrySendOverflowPacket+0x34>
 8000aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ab2:	1c59      	adds	r1, r3, #1
 8000ab4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8000ab6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000aba:	b2d2      	uxtb	r2, r2
 8000abc:	701a      	strb	r2, [r3, #0]
 8000abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac0:	09db      	lsrs	r3, r3, #7
 8000ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ac8:	d8f0      	bhi.n	8000aac <_TrySendOverflowPacket+0x1c>
 8000aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000acc:	1c5a      	adds	r2, r3, #1
 8000ace:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000ad0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ad2:	b2d2      	uxtb	r2, r2
 8000ad4:	701a      	strb	r2, [r3, #0]
 8000ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ad8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000ada:	4b25      	ldr	r3, [pc, #148]	; (8000b70 <_TrySendOverflowPacket+0xe0>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000ae0:	4b22      	ldr	r3, [pc, #136]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	1ad3      	subs	r3, r2, r3
 8000ae8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	623b      	str	r3, [r7, #32]
 8000af2:	e00b      	b.n	8000b0c <_TrySendOverflowPacket+0x7c>
 8000af4:	6a3b      	ldr	r3, [r7, #32]
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afa:	1c59      	adds	r1, r3, #1
 8000afc:	6279      	str	r1, [r7, #36]	; 0x24
 8000afe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000b02:	b2d2      	uxtb	r2, r2
 8000b04:	701a      	strb	r2, [r3, #0]
 8000b06:	6a3b      	ldr	r3, [r7, #32]
 8000b08:	09db      	lsrs	r3, r3, #7
 8000b0a:	623b      	str	r3, [r7, #32]
 8000b0c:	6a3b      	ldr	r3, [r7, #32]
 8000b0e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b10:	d8f0      	bhi.n	8000af4 <_TrySendOverflowPacket+0x64>
 8000b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b14:	1c5a      	adds	r2, r3, #1
 8000b16:	627a      	str	r2, [r7, #36]	; 0x24
 8000b18:	6a3a      	ldr	r2, [r7, #32]
 8000b1a:	b2d2      	uxtb	r2, r2
 8000b1c:	701a      	strb	r2, [r3, #0]
 8000b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b20:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8000b22:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b24:	785b      	ldrb	r3, [r3, #1]
 8000b26:	4618      	mov	r0, r3
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	69fa      	ldr	r2, [r7, #28]
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	461a      	mov	r2, r3
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	4619      	mov	r1, r3
 8000b34:	f7ff fb84 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d009      	beq.n	8000b56 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000b42:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	3b01      	subs	r3, #1
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b52:	701a      	strb	r2, [r3, #0]
 8000b54:	e004      	b.n	8000b60 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8000b56:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	4a03      	ldr	r2, [pc, #12]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b5e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8000b60:	693b      	ldr	r3, [r7, #16]
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3730      	adds	r7, #48	; 0x30
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000b90 	.word	0x20000b90
 8000b70:	e0001004 	.word	0xe0001004

08000b74 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8000b80:	4b98      	ldr	r3, [pc, #608]	; (8000de4 <_SendPacket+0x270>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d010      	beq.n	8000baa <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8000b88:	4b96      	ldr	r3, [pc, #600]	; (8000de4 <_SendPacket+0x270>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	f000 812d 	beq.w	8000dec <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8000b92:	4b94      	ldr	r3, [pc, #592]	; (8000de4 <_SendPacket+0x270>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d109      	bne.n	8000bae <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8000b9a:	f7ff ff79 	bl	8000a90 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8000b9e:	4b91      	ldr	r3, [pc, #580]	; (8000de4 <_SendPacket+0x270>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	f040 8124 	bne.w	8000df0 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8000ba8:	e001      	b.n	8000bae <_SendPacket+0x3a>
    goto Send;
 8000baa:	bf00      	nop
 8000bac:	e000      	b.n	8000bb0 <_SendPacket+0x3c>
Send:
 8000bae:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b1f      	cmp	r3, #31
 8000bb4:	d809      	bhi.n	8000bca <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8000bb6:	4b8b      	ldr	r3, [pc, #556]	; (8000de4 <_SendPacket+0x270>)
 8000bb8:	69da      	ldr	r2, [r3, #28]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8000bc0:	f003 0301 	and.w	r3, r3, #1
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	f040 8115 	bne.w	8000df4 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2b17      	cmp	r3, #23
 8000bce:	d807      	bhi.n	8000be0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	701a      	strb	r2, [r3, #0]
 8000bde:	e0c4      	b.n	8000d6a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8000be0:	68ba      	ldr	r2, [r7, #8]
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	2b7f      	cmp	r3, #127	; 0x7f
 8000bec:	d912      	bls.n	8000c14 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	09da      	lsrs	r2, r3, #7
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	3a01      	subs	r2, #1
 8000c06:	60fa      	str	r2, [r7, #12]
 8000c08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	701a      	strb	r2, [r3, #0]
 8000c12:	e006      	b.n	8000c22 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2b7e      	cmp	r3, #126	; 0x7e
 8000c26:	d807      	bhi.n	8000c38 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	701a      	strb	r2, [r3, #0]
 8000c36:	e098      	b.n	8000d6a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c3e:	d212      	bcs.n	8000c66 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	09da      	lsrs	r2, r3, #7
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	b2d2      	uxtb	r2, r2
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	3a01      	subs	r2, #1
 8000c58:	60fa      	str	r2, [r7, #12]
 8000c5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	701a      	strb	r2, [r3, #0]
 8000c64:	e081      	b.n	8000d6a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000c6c:	d21d      	bcs.n	8000caa <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	0b9a      	lsrs	r2, r3, #14
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	3b01      	subs	r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	09db      	lsrs	r3, r3, #7
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	68fa      	ldr	r2, [r7, #12]
 8000c86:	3a01      	subs	r2, #1
 8000c88:	60fa      	str	r2, [r7, #12]
 8000c8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	68fa      	ldr	r2, [r7, #12]
 8000c9a:	3a01      	subs	r2, #1
 8000c9c:	60fa      	str	r2, [r7, #12]
 8000c9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	701a      	strb	r2, [r3, #0]
 8000ca8:	e05f      	b.n	8000d6a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000cb0:	d228      	bcs.n	8000d04 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	0d5a      	lsrs	r2, r3, #21
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	b2d2      	uxtb	r2, r2
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	0b9b      	lsrs	r3, r3, #14
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	68fa      	ldr	r2, [r7, #12]
 8000cca:	3a01      	subs	r2, #1
 8000ccc:	60fa      	str	r2, [r7, #12]
 8000cce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	09db      	lsrs	r3, r3, #7
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	3a01      	subs	r2, #1
 8000ce2:	60fa      	str	r2, [r7, #12]
 8000ce4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	3a01      	subs	r2, #1
 8000cf6:	60fa      	str	r2, [r7, #12]
 8000cf8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	701a      	strb	r2, [r3, #0]
 8000d02:	e032      	b.n	8000d6a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	0f1a      	lsrs	r2, r3, #28
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	0d5b      	lsrs	r3, r3, #21
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	3a01      	subs	r2, #1
 8000d1e:	60fa      	str	r2, [r7, #12]
 8000d20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	0b9b      	lsrs	r3, r3, #14
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	68fa      	ldr	r2, [r7, #12]
 8000d32:	3a01      	subs	r2, #1
 8000d34:	60fa      	str	r2, [r7, #12]
 8000d36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	09db      	lsrs	r3, r3, #7
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	60fa      	str	r2, [r7, #12]
 8000d4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	3a01      	subs	r2, #1
 8000d5e:	60fa      	str	r2, [r7, #12]
 8000d60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000d6a:	4b1f      	ldr	r3, [pc, #124]	; (8000de8 <_SendPacket+0x274>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000d70:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <_SendPacket+0x270>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	623b      	str	r3, [r7, #32]
 8000d82:	e00b      	b.n	8000d9c <_SendPacket+0x228>
 8000d84:	6a3b      	ldr	r3, [r7, #32]
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8a:	1c59      	adds	r1, r3, #1
 8000d8c:	6279      	str	r1, [r7, #36]	; 0x24
 8000d8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	701a      	strb	r2, [r3, #0]
 8000d96:	6a3b      	ldr	r3, [r7, #32]
 8000d98:	09db      	lsrs	r3, r3, #7
 8000d9a:	623b      	str	r3, [r7, #32]
 8000d9c:	6a3b      	ldr	r3, [r7, #32]
 8000d9e:	2b7f      	cmp	r3, #127	; 0x7f
 8000da0:	d8f0      	bhi.n	8000d84 <_SendPacket+0x210>
 8000da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da4:	1c5a      	adds	r2, r3, #1
 8000da6:	627a      	str	r2, [r7, #36]	; 0x24
 8000da8:	6a3a      	ldr	r2, [r7, #32]
 8000daa:	b2d2      	uxtb	r2, r2
 8000dac:	701a      	strb	r2, [r3, #0]
 8000dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db0:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <_SendPacket+0x270>)
 8000db4:	785b      	ldrb	r3, [r3, #1]
 8000db6:	4618      	mov	r0, r3
 8000db8:	68ba      	ldr	r2, [r7, #8]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	68f9      	ldr	r1, [r7, #12]
 8000dc2:	f7ff fa3d 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000dc6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d003      	beq.n	8000dd6 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000dce:	4a05      	ldr	r2, [pc, #20]	; (8000de4 <_SendPacket+0x270>)
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	60d3      	str	r3, [r2, #12]
 8000dd4:	e00f      	b.n	8000df6 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8000dd6:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <_SendPacket+0x270>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4b01      	ldr	r3, [pc, #4]	; (8000de4 <_SendPacket+0x270>)
 8000de0:	701a      	strb	r2, [r3, #0]
 8000de2:	e008      	b.n	8000df6 <_SendPacket+0x282>
 8000de4:	20000b90 	.word	0x20000b90
 8000de8:	e0001004 	.word	0xe0001004
    goto SendDone;
 8000dec:	bf00      	nop
 8000dee:	e002      	b.n	8000df6 <_SendPacket+0x282>
      goto SendDone;
 8000df0:	bf00      	nop
 8000df2:	e000      	b.n	8000df6 <_SendPacket+0x282>
      goto SendDone;
 8000df4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <_SendPacket+0x2d4>)
 8000df8:	7e1b      	ldrb	r3, [r3, #24]
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4a13      	ldr	r2, [pc, #76]	; (8000e4c <_SendPacket+0x2d8>)
 8000dfe:	460b      	mov	r3, r1
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	440b      	add	r3, r1
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	4413      	add	r3, r2
 8000e08:	336c      	adds	r3, #108	; 0x6c
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <_SendPacket+0x2d4>)
 8000e0e:	7e1b      	ldrb	r3, [r3, #24]
 8000e10:	4618      	mov	r0, r3
 8000e12:	490e      	ldr	r1, [pc, #56]	; (8000e4c <_SendPacket+0x2d8>)
 8000e14:	4603      	mov	r3, r0
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	4403      	add	r3, r0
 8000e1a:	00db      	lsls	r3, r3, #3
 8000e1c:	440b      	add	r3, r1
 8000e1e:	3370      	adds	r3, #112	; 0x70
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d00b      	beq.n	8000e3e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8000e26:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <_SendPacket+0x2d4>)
 8000e28:	789b      	ldrb	r3, [r3, #2]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d107      	bne.n	8000e3e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <_SendPacket+0x2d4>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8000e34:	f7ff fdbc 	bl	80009b0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <_SendPacket+0x2d4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8000e3e:	bf00      	nop
 8000e40:	3728      	adds	r7, #40	; 0x28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000b90 	.word	0x20000b90
 8000e4c:	200002d0 	.word	0x200002d0

08000e50 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b0a2      	sub	sp, #136	; 0x88
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
#endif
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 8000e66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e68:	1c5a      	adds	r2, r3, #1
 8000e6a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 8000e72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d01d      	beq.n	8000eb6 <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 8000e7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000e7e:	2b25      	cmp	r3, #37	; 0x25
 8000e80:	d1f1      	bne.n	8000e66 <_VPrintHost+0x16>
      c = *p;
 8000e82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = (U32)(va_arg(*pParamList, int));
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	1d19      	adds	r1, r3, #4
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	6011      	str	r1, [r2, #0]
 8000e94:	6819      	ldr	r1, [r3, #0]
 8000e96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000e9a:	1c5a      	adds	r2, r3, #1
 8000e9c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8000ea0:	460a      	mov	r2, r1
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	3388      	adds	r3, #136	; 0x88
 8000ea6:	443b      	add	r3, r7
 8000ea8:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 8000eac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000eb0:	2b10      	cmp	r3, #16
 8000eb2:	d002      	beq.n	8000eba <_VPrintHost+0x6a>
    c = *p++;
 8000eb4:	e7d7      	b.n	8000e66 <_VPrintHost+0x16>
      break;
 8000eb6:	bf00      	nop
 8000eb8:	e000      	b.n	8000ebc <_VPrintHost+0x6c>
        break;
 8000eba:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 8000ebc:	f3ef 8311 	mrs	r3, BASEPRI
 8000ec0:	f04f 0120 	mov.w	r1, #32
 8000ec4:	f381 8811 	msr	BASEPRI, r1
 8000ec8:	65bb      	str	r3, [r7, #88]	; 0x58
 8000eca:	483f      	ldr	r0, [pc, #252]	; (8000fc8 <_VPrintHost+0x178>)
 8000ecc:	f7ff fd64 	bl	8000998 <_PreparePacket>
 8000ed0:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8000ed2:	2280      	movs	r2, #128	; 0x80
 8000ed4:	68f9      	ldr	r1, [r7, #12]
 8000ed6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000ed8:	f7ff fd2e 	bl	8000938 <_EncodeStr>
 8000edc:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 8000ede:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ee0:	677b      	str	r3, [r7, #116]	; 0x74
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	673b      	str	r3, [r7, #112]	; 0x70
 8000ee6:	e00b      	b.n	8000f00 <_VPrintHost+0xb0>
 8000ee8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000eee:	1c59      	adds	r1, r3, #1
 8000ef0:	6779      	str	r1, [r7, #116]	; 0x74
 8000ef2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	701a      	strb	r2, [r3, #0]
 8000efa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000efc:	09db      	lsrs	r3, r3, #7
 8000efe:	673b      	str	r3, [r7, #112]	; 0x70
 8000f00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f02:	2b7f      	cmp	r3, #127	; 0x7f
 8000f04:	d8f0      	bhi.n	8000ee8 <_VPrintHost+0x98>
 8000f06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f08:	1c5a      	adds	r2, r3, #1
 8000f0a:	677a      	str	r2, [r7, #116]	; 0x74
 8000f0c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	701a      	strb	r2, [r3, #0]
 8000f12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f14:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 8000f16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000f1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000f1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f20:	e00b      	b.n	8000f3a <_VPrintHost+0xea>
 8000f22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f28:	1c59      	adds	r1, r3, #1
 8000f2a:	66f9      	str	r1, [r7, #108]	; 0x6c
 8000f2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	701a      	strb	r2, [r3, #0]
 8000f34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f36:	09db      	lsrs	r3, r3, #7
 8000f38:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f3c:	2b7f      	cmp	r3, #127	; 0x7f
 8000f3e:	d8f0      	bhi.n	8000f22 <_VPrintHost+0xd2>
 8000f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f42:	1c5a      	adds	r2, r3, #1
 8000f44:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000f46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	701a      	strb	r2, [r3, #0]
 8000f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f4e:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8000f58:	e022      	b.n	8000fa0 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 8000f5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f5c:	667b      	str	r3, [r7, #100]	; 0x64
 8000f5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	663b      	str	r3, [r7, #96]	; 0x60
 8000f66:	e00b      	b.n	8000f80 <_VPrintHost+0x130>
 8000f68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f6e:	1c59      	adds	r1, r3, #1
 8000f70:	6679      	str	r1, [r7, #100]	; 0x64
 8000f72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	701a      	strb	r2, [r3, #0]
 8000f7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f7c:	09db      	lsrs	r3, r3, #7
 8000f7e:	663b      	str	r3, [r7, #96]	; 0x60
 8000f80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f82:	2b7f      	cmp	r3, #127	; 0x7f
 8000f84:	d8f0      	bhi.n	8000f68 <_VPrintHost+0x118>
 8000f86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f88:	1c5a      	adds	r2, r3, #1
 8000f8a:	667a      	str	r2, [r7, #100]	; 0x64
 8000f8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	701a      	strb	r2, [r3, #0]
 8000f92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f94:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 8000f96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f9a:	3304      	adds	r3, #4
 8000f9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8000fa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000fa4:	1e5a      	subs	r2, r3, #1
 8000fa6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d1d5      	bne.n	8000f5a <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8000fae:	221a      	movs	r2, #26
 8000fb0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000fb2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000fb4:	f7ff fdde 	bl	8000b74 <_SendPacket>
    RECORD_END();
 8000fb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000fba:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 8000fbe:	2300      	movs	r3, #0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3788      	adds	r7, #136	; 0x88
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000bc0 	.word	0x20000bc0

08000fcc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af02      	add	r7, sp, #8
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
 8000fd8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fe0:	4917      	ldr	r1, [pc, #92]	; (8001040 <SEGGER_SYSVIEW_Init+0x74>)
 8000fe2:	4818      	ldr	r0, [pc, #96]	; (8001044 <SEGGER_SYSVIEW_Init+0x78>)
 8000fe4:	f7ff fbd8 	bl	8000798 <SEGGER_RTT_AllocUpBuffer>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	4b16      	ldr	r3, [pc, #88]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8000fee:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8000ff2:	785a      	ldrb	r2, [r3, #1]
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8000ff6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8000ff8:	4b13      	ldr	r3, [pc, #76]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8000ffa:	7e1b      	ldrb	r3, [r3, #24]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	2300      	movs	r3, #0
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2308      	movs	r3, #8
 8001004:	4a11      	ldr	r2, [pc, #68]	; (800104c <SEGGER_SYSVIEW_Init+0x80>)
 8001006:	490f      	ldr	r1, [pc, #60]	; (8001044 <SEGGER_SYSVIEW_Init+0x78>)
 8001008:	f7ff fc4a 	bl	80008a0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <SEGGER_SYSVIEW_Init+0x84>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a0c      	ldr	r2, [pc, #48]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8001018:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800101a:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8001020:	4a09      	ldr	r2, [pc, #36]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8001026:	4a08      	ldr	r2, [pc, #32]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800102c:	4a06      	ldr	r2, [pc, #24]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8001032:	4b05      	ldr	r3, [pc, #20]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000788 	.word	0x20000788
 8001044:	0800dfb4 	.word	0x0800dfb4
 8001048:	20000b90 	.word	0x20000b90
 800104c:	20000b88 	.word	0x20000b88
 8001050:	e0001004 	.word	0xe0001004

08001054 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800105c:	4a04      	ldr	r2, [pc, #16]	; (8001070 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6113      	str	r3, [r2, #16]
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000b90 	.word	0x20000b90

08001074 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800107c:	f3ef 8311 	mrs	r3, BASEPRI
 8001080:	f04f 0120 	mov.w	r1, #32
 8001084:	f381 8811 	msr	BASEPRI, r1
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	4808      	ldr	r0, [pc, #32]	; (80010ac <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800108c:	f7ff fc84 	bl	8000998 <_PreparePacket>
 8001090:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	68b9      	ldr	r1, [r7, #8]
 8001096:	68b8      	ldr	r0, [r7, #8]
 8001098:	f7ff fd6c 	bl	8000b74 <_SendPacket>
  RECORD_END();
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f383 8811 	msr	BASEPRI, r3
}
 80010a2:	bf00      	nop
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000bc0 	.word	0x20000bc0

080010b0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80010ba:	f3ef 8311 	mrs	r3, BASEPRI
 80010be:	f04f 0120 	mov.w	r1, #32
 80010c2:	f381 8811 	msr	BASEPRI, r1
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	4816      	ldr	r0, [pc, #88]	; (8001124 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80010ca:	f7ff fc65 	bl	8000998 <_PreparePacket>
 80010ce:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	61fb      	str	r3, [r7, #28]
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	61bb      	str	r3, [r7, #24]
 80010dc:	e00b      	b.n	80010f6 <SEGGER_SYSVIEW_RecordU32+0x46>
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	1c59      	adds	r1, r3, #1
 80010e6:	61f9      	str	r1, [r7, #28]
 80010e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	701a      	strb	r2, [r3, #0]
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	09db      	lsrs	r3, r3, #7
 80010f4:	61bb      	str	r3, [r7, #24]
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	2b7f      	cmp	r3, #127	; 0x7f
 80010fa:	d8f0      	bhi.n	80010de <SEGGER_SYSVIEW_RecordU32+0x2e>
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	1c5a      	adds	r2, r3, #1
 8001100:	61fa      	str	r2, [r7, #28]
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	701a      	strb	r2, [r3, #0]
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	68f9      	ldr	r1, [r7, #12]
 8001110:	6938      	ldr	r0, [r7, #16]
 8001112:	f7ff fd2f 	bl	8000b74 <_SendPacket>
  RECORD_END();
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	f383 8811 	msr	BASEPRI, r3
}
 800111c:	bf00      	nop
 800111e:	3720      	adds	r7, #32
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000bc0 	.word	0x20000bc0

08001128 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b08c      	sub	sp, #48	; 0x30
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8001134:	f3ef 8311 	mrs	r3, BASEPRI
 8001138:	f04f 0120 	mov.w	r1, #32
 800113c:	f381 8811 	msr	BASEPRI, r1
 8001140:	61fb      	str	r3, [r7, #28]
 8001142:	4825      	ldr	r0, [pc, #148]	; (80011d8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8001144:	f7ff fc28 	bl	8000998 <_PreparePacket>
 8001148:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	62bb      	str	r3, [r7, #40]	; 0x28
 8001156:	e00b      	b.n	8001170 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8001158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115a:	b2da      	uxtb	r2, r3
 800115c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800115e:	1c59      	adds	r1, r3, #1
 8001160:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001162:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	701a      	strb	r2, [r3, #0]
 800116a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116c:	09db      	lsrs	r3, r3, #7
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001172:	2b7f      	cmp	r3, #127	; 0x7f
 8001174:	d8f0      	bhi.n	8001158 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8001176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001178:	1c5a      	adds	r2, r3, #1
 800117a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800117c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	701a      	strb	r2, [r3, #0]
 8001182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001184:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	623b      	str	r3, [r7, #32]
 800118e:	e00b      	b.n	80011a8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8001190:	6a3b      	ldr	r3, [r7, #32]
 8001192:	b2da      	uxtb	r2, r3
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	1c59      	adds	r1, r3, #1
 8001198:	6279      	str	r1, [r7, #36]	; 0x24
 800119a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	701a      	strb	r2, [r3, #0]
 80011a2:	6a3b      	ldr	r3, [r7, #32]
 80011a4:	09db      	lsrs	r3, r3, #7
 80011a6:	623b      	str	r3, [r7, #32]
 80011a8:	6a3b      	ldr	r3, [r7, #32]
 80011aa:	2b7f      	cmp	r3, #127	; 0x7f
 80011ac:	d8f0      	bhi.n	8001190 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	1c5a      	adds	r2, r3, #1
 80011b2:	627a      	str	r2, [r7, #36]	; 0x24
 80011b4:	6a3a      	ldr	r2, [r7, #32]
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	701a      	strb	r2, [r3, #0]
 80011ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011bc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	6979      	ldr	r1, [r7, #20]
 80011c2:	69b8      	ldr	r0, [r7, #24]
 80011c4:	f7ff fcd6 	bl	8000b74 <_SendPacket>
  RECORD_END();
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f383 8811 	msr	BASEPRI, r3
}
 80011ce:	bf00      	nop
 80011d0:	3730      	adds	r7, #48	; 0x30
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000bc0 	.word	0x20000bc0

080011dc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08c      	sub	sp, #48	; 0x30
 80011e0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80011e2:	4b58      	ldr	r3, [pc, #352]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80011e8:	f3ef 8311 	mrs	r3, BASEPRI
 80011ec:	f04f 0120 	mov.w	r1, #32
 80011f0:	f381 8811 	msr	BASEPRI, r1
 80011f4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80011f6:	4b53      	ldr	r3, [pc, #332]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 80011f8:	785b      	ldrb	r3, [r3, #1]
 80011fa:	220a      	movs	r2, #10
 80011fc:	4952      	ldr	r1, [pc, #328]	; (8001348 <SEGGER_SYSVIEW_Start+0x16c>)
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f81e 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800120a:	200a      	movs	r0, #10
 800120c:	f7ff ff32 	bl	8001074 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001210:	f3ef 8311 	mrs	r3, BASEPRI
 8001214:	f04f 0120 	mov.w	r1, #32
 8001218:	f381 8811 	msr	BASEPRI, r1
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	484b      	ldr	r0, [pc, #300]	; (800134c <SEGGER_SYSVIEW_Start+0x170>)
 8001220:	f7ff fbba 	bl	8000998 <_PreparePacket>
 8001224:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800122e:	4b45      	ldr	r3, [pc, #276]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28
 8001234:	e00b      	b.n	800124e <SEGGER_SYSVIEW_Start+0x72>
 8001236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001238:	b2da      	uxtb	r2, r3
 800123a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800123c:	1c59      	adds	r1, r3, #1
 800123e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001240:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	701a      	strb	r2, [r3, #0]
 8001248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800124a:	09db      	lsrs	r3, r3, #7
 800124c:	62bb      	str	r3, [r7, #40]	; 0x28
 800124e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001250:	2b7f      	cmp	r3, #127	; 0x7f
 8001252:	d8f0      	bhi.n	8001236 <SEGGER_SYSVIEW_Start+0x5a>
 8001254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001256:	1c5a      	adds	r2, r3, #1
 8001258:	62fa      	str	r2, [r7, #44]	; 0x2c
 800125a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	701a      	strb	r2, [r3, #0]
 8001260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001262:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
 8001268:	4b36      	ldr	r3, [pc, #216]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	623b      	str	r3, [r7, #32]
 800126e:	e00b      	b.n	8001288 <SEGGER_SYSVIEW_Start+0xac>
 8001270:	6a3b      	ldr	r3, [r7, #32]
 8001272:	b2da      	uxtb	r2, r3
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001276:	1c59      	adds	r1, r3, #1
 8001278:	6279      	str	r1, [r7, #36]	; 0x24
 800127a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800127e:	b2d2      	uxtb	r2, r2
 8001280:	701a      	strb	r2, [r3, #0]
 8001282:	6a3b      	ldr	r3, [r7, #32]
 8001284:	09db      	lsrs	r3, r3, #7
 8001286:	623b      	str	r3, [r7, #32]
 8001288:	6a3b      	ldr	r3, [r7, #32]
 800128a:	2b7f      	cmp	r3, #127	; 0x7f
 800128c:	d8f0      	bhi.n	8001270 <SEGGER_SYSVIEW_Start+0x94>
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	1c5a      	adds	r2, r3, #1
 8001292:	627a      	str	r2, [r7, #36]	; 0x24
 8001294:	6a3a      	ldr	r2, [r7, #32]
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	701a      	strb	r2, [r3, #0]
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	61fb      	str	r3, [r7, #28]
 80012a2:	4b28      	ldr	r3, [pc, #160]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 80012a4:	691b      	ldr	r3, [r3, #16]
 80012a6:	61bb      	str	r3, [r7, #24]
 80012a8:	e00b      	b.n	80012c2 <SEGGER_SYSVIEW_Start+0xe6>
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	1c59      	adds	r1, r3, #1
 80012b2:	61f9      	str	r1, [r7, #28]
 80012b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	701a      	strb	r2, [r3, #0]
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	09db      	lsrs	r3, r3, #7
 80012c0:	61bb      	str	r3, [r7, #24]
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	2b7f      	cmp	r3, #127	; 0x7f
 80012c6:	d8f0      	bhi.n	80012aa <SEGGER_SYSVIEW_Start+0xce>
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	1c5a      	adds	r2, r3, #1
 80012cc:	61fa      	str	r2, [r7, #28]
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	701a      	strb	r2, [r3, #0]
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	2300      	movs	r3, #0
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	e00b      	b.n	80012fa <SEGGER_SYSVIEW_Start+0x11e>
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	1c59      	adds	r1, r3, #1
 80012ea:	6179      	str	r1, [r7, #20]
 80012ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	701a      	strb	r2, [r3, #0]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	09db      	lsrs	r3, r3, #7
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	2b7f      	cmp	r3, #127	; 0x7f
 80012fe:	d8f0      	bhi.n	80012e2 <SEGGER_SYSVIEW_Start+0x106>
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	1c5a      	adds	r2, r3, #1
 8001304:	617a      	str	r2, [r7, #20]
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	701a      	strb	r2, [r3, #0]
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8001310:	2218      	movs	r2, #24
 8001312:	6839      	ldr	r1, [r7, #0]
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff fc2d 	bl	8000b74 <_SendPacket>
      RECORD_END();
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 8001322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001324:	2b00      	cmp	r3, #0
 8001326:	d002      	beq.n	800132e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 800132a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800132e:	f000 f9eb 	bl	8001708 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8001332:	f000 f9b1 	bl	8001698 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8001336:	f000 fac1 	bl	80018bc <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800133a:	bf00      	nop
 800133c:	3730      	adds	r7, #48	; 0x30
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000b90 	.word	0x20000b90
 8001348:	0800e0cc 	.word	0x0800e0cc
 800134c:	20000bc0 	.word	0x20000bc0

08001350 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8001356:	f3ef 8311 	mrs	r3, BASEPRI
 800135a:	f04f 0120 	mov.w	r1, #32
 800135e:	f381 8811 	msr	BASEPRI, r1
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	480b      	ldr	r0, [pc, #44]	; (8001394 <SEGGER_SYSVIEW_Stop+0x44>)
 8001366:	f7ff fb17 	bl	8000998 <_PreparePacket>
 800136a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800136c:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <SEGGER_SYSVIEW_Stop+0x48>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d007      	beq.n	8001384 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8001374:	220b      	movs	r2, #11
 8001376:	6839      	ldr	r1, [r7, #0]
 8001378:	6838      	ldr	r0, [r7, #0]
 800137a:	f7ff fbfb 	bl	8000b74 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <SEGGER_SYSVIEW_Stop+0x48>)
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f383 8811 	msr	BASEPRI, r3
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000bc0 	.word	0x20000bc0
 8001398:	20000b90 	.word	0x20000b90

0800139c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b08c      	sub	sp, #48	; 0x30
 80013a0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80013a2:	f3ef 8311 	mrs	r3, BASEPRI
 80013a6:	f04f 0120 	mov.w	r1, #32
 80013aa:	f381 8811 	msr	BASEPRI, r1
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	4845      	ldr	r0, [pc, #276]	; (80014c8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80013b2:	f7ff faf1 	bl	8000998 <_PreparePacket>
 80013b6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013c0:	4b42      	ldr	r3, [pc, #264]	; (80014cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80013c6:	e00b      	b.n	80013e0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80013c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ce:	1c59      	adds	r1, r3, #1
 80013d0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80013d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	701a      	strb	r2, [r3, #0]
 80013da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013dc:	09db      	lsrs	r3, r3, #7
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28
 80013e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e2:	2b7f      	cmp	r3, #127	; 0x7f
 80013e4:	d8f0      	bhi.n	80013c8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80013e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e8:	1c5a      	adds	r2, r3, #1
 80013ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80013ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	701a      	strb	r2, [r3, #0]
 80013f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
 80013fa:	4b34      	ldr	r3, [pc, #208]	; (80014cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	623b      	str	r3, [r7, #32]
 8001400:	e00b      	b.n	800141a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	b2da      	uxtb	r2, r3
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	1c59      	adds	r1, r3, #1
 800140a:	6279      	str	r1, [r7, #36]	; 0x24
 800140c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001410:	b2d2      	uxtb	r2, r2
 8001412:	701a      	strb	r2, [r3, #0]
 8001414:	6a3b      	ldr	r3, [r7, #32]
 8001416:	09db      	lsrs	r3, r3, #7
 8001418:	623b      	str	r3, [r7, #32]
 800141a:	6a3b      	ldr	r3, [r7, #32]
 800141c:	2b7f      	cmp	r3, #127	; 0x7f
 800141e:	d8f0      	bhi.n	8001402 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	1c5a      	adds	r2, r3, #1
 8001424:	627a      	str	r2, [r7, #36]	; 0x24
 8001426:	6a3a      	ldr	r2, [r7, #32]
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	701a      	strb	r2, [r3, #0]
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	61fb      	str	r3, [r7, #28]
 8001434:	4b25      	ldr	r3, [pc, #148]	; (80014cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	61bb      	str	r3, [r7, #24]
 800143a:	e00b      	b.n	8001454 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	b2da      	uxtb	r2, r3
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	1c59      	adds	r1, r3, #1
 8001444:	61f9      	str	r1, [r7, #28]
 8001446:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	701a      	strb	r2, [r3, #0]
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	09db      	lsrs	r3, r3, #7
 8001452:	61bb      	str	r3, [r7, #24]
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	2b7f      	cmp	r3, #127	; 0x7f
 8001458:	d8f0      	bhi.n	800143c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	1c5a      	adds	r2, r3, #1
 800145e:	61fa      	str	r2, [r7, #28]
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	701a      	strb	r2, [r3, #0]
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	617b      	str	r3, [r7, #20]
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	e00b      	b.n	800148c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	b2da      	uxtb	r2, r3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	1c59      	adds	r1, r3, #1
 800147c:	6179      	str	r1, [r7, #20]
 800147e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	701a      	strb	r2, [r3, #0]
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	09db      	lsrs	r3, r3, #7
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	2b7f      	cmp	r3, #127	; 0x7f
 8001490:	d8f0      	bhi.n	8001474 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	1c5a      	adds	r2, r3, #1
 8001496:	617a      	str	r2, [r7, #20]
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	701a      	strb	r2, [r3, #0]
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80014a2:	2218      	movs	r2, #24
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	68b8      	ldr	r0, [r7, #8]
 80014a8:	f7ff fb64 	bl	8000b74 <_SendPacket>
  RECORD_END();
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80014b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d002      	beq.n	80014c0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80014ba:	4b04      	ldr	r3, [pc, #16]	; (80014cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80014bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014be:	4798      	blx	r3
  }
}
 80014c0:	bf00      	nop
 80014c2:	3730      	adds	r7, #48	; 0x30
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000bc0 	.word	0x20000bc0
 80014cc:	20000b90 	.word	0x20000b90

080014d0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b092      	sub	sp, #72	; 0x48
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80014d8:	f3ef 8311 	mrs	r3, BASEPRI
 80014dc:	f04f 0120 	mov.w	r1, #32
 80014e0:	f381 8811 	msr	BASEPRI, r1
 80014e4:	617b      	str	r3, [r7, #20]
 80014e6:	486a      	ldr	r0, [pc, #424]	; (8001690 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80014e8:	f7ff fa56 	bl	8000998 <_PreparePacket>
 80014ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	647b      	str	r3, [r7, #68]	; 0x44
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	4b66      	ldr	r3, [pc, #408]	; (8001694 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	643b      	str	r3, [r7, #64]	; 0x40
 8001502:	e00b      	b.n	800151c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8001504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001506:	b2da      	uxtb	r2, r3
 8001508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800150a:	1c59      	adds	r1, r3, #1
 800150c:	6479      	str	r1, [r7, #68]	; 0x44
 800150e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	701a      	strb	r2, [r3, #0]
 8001516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001518:	09db      	lsrs	r3, r3, #7
 800151a:	643b      	str	r3, [r7, #64]	; 0x40
 800151c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800151e:	2b7f      	cmp	r3, #127	; 0x7f
 8001520:	d8f0      	bhi.n	8001504 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8001522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	647a      	str	r2, [r7, #68]	; 0x44
 8001528:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	701a      	strb	r2, [r3, #0]
 800152e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001530:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	63bb      	str	r3, [r7, #56]	; 0x38
 800153c:	e00b      	b.n	8001556 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800153e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001540:	b2da      	uxtb	r2, r3
 8001542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001544:	1c59      	adds	r1, r3, #1
 8001546:	63f9      	str	r1, [r7, #60]	; 0x3c
 8001548:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	701a      	strb	r2, [r3, #0]
 8001550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001552:	09db      	lsrs	r3, r3, #7
 8001554:	63bb      	str	r3, [r7, #56]	; 0x38
 8001556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001558:	2b7f      	cmp	r3, #127	; 0x7f
 800155a:	d8f0      	bhi.n	800153e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800155c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001562:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	701a      	strb	r2, [r3, #0]
 8001568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800156a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2220      	movs	r2, #32
 8001572:	4619      	mov	r1, r3
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	f7ff f9df 	bl	8000938 <_EncodeStr>
 800157a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800157c:	2209      	movs	r2, #9
 800157e:	68f9      	ldr	r1, [r7, #12]
 8001580:	6938      	ldr	r0, [r7, #16]
 8001582:	f7ff faf7 	bl	8000b74 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	637b      	str	r3, [r7, #52]	; 0x34
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	4b40      	ldr	r3, [pc, #256]	; (8001694 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	633b      	str	r3, [r7, #48]	; 0x30
 800159a:	e00b      	b.n	80015b4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800159c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015a2:	1c59      	adds	r1, r3, #1
 80015a4:	6379      	str	r1, [r7, #52]	; 0x34
 80015a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	701a      	strb	r2, [r3, #0]
 80015ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b0:	09db      	lsrs	r3, r3, #7
 80015b2:	633b      	str	r3, [r7, #48]	; 0x30
 80015b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b6:	2b7f      	cmp	r3, #127	; 0x7f
 80015b8:	d8f0      	bhi.n	800159c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80015ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015bc:	1c5a      	adds	r2, r3, #1
 80015be:	637a      	str	r2, [r7, #52]	; 0x34
 80015c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	701a      	strb	r2, [r3, #0]
 80015c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80015d4:	e00b      	b.n	80015ee <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80015d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015dc:	1c59      	adds	r1, r3, #1
 80015de:	62f9      	str	r1, [r7, #44]	; 0x2c
 80015e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	701a      	strb	r2, [r3, #0]
 80015e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ea:	09db      	lsrs	r3, r3, #7
 80015ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80015ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f0:	2b7f      	cmp	r3, #127	; 0x7f
 80015f2:	d8f0      	bhi.n	80015d6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80015f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f6:	1c5a      	adds	r2, r3, #1
 80015f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80015fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	701a      	strb	r2, [r3, #0]
 8001600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001602:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	623b      	str	r3, [r7, #32]
 800160e:	e00b      	b.n	8001628 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8001610:	6a3b      	ldr	r3, [r7, #32]
 8001612:	b2da      	uxtb	r2, r3
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	1c59      	adds	r1, r3, #1
 8001618:	6279      	str	r1, [r7, #36]	; 0x24
 800161a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	701a      	strb	r2, [r3, #0]
 8001622:	6a3b      	ldr	r3, [r7, #32]
 8001624:	09db      	lsrs	r3, r3, #7
 8001626:	623b      	str	r3, [r7, #32]
 8001628:	6a3b      	ldr	r3, [r7, #32]
 800162a:	2b7f      	cmp	r3, #127	; 0x7f
 800162c:	d8f0      	bhi.n	8001610 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	1c5a      	adds	r2, r3, #1
 8001632:	627a      	str	r2, [r7, #36]	; 0x24
 8001634:	6a3a      	ldr	r2, [r7, #32]
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	701a      	strb	r2, [r3, #0]
 800163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	61fb      	str	r3, [r7, #28]
 8001642:	2300      	movs	r3, #0
 8001644:	61bb      	str	r3, [r7, #24]
 8001646:	e00b      	b.n	8001660 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	b2da      	uxtb	r2, r3
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	1c59      	adds	r1, r3, #1
 8001650:	61f9      	str	r1, [r7, #28]
 8001652:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	701a      	strb	r2, [r3, #0]
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	09db      	lsrs	r3, r3, #7
 800165e:	61bb      	str	r3, [r7, #24]
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	2b7f      	cmp	r3, #127	; 0x7f
 8001664:	d8f0      	bhi.n	8001648 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	1c5a      	adds	r2, r3, #1
 800166a:	61fa      	str	r2, [r7, #28]
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	701a      	strb	r2, [r3, #0]
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8001676:	2215      	movs	r2, #21
 8001678:	68f9      	ldr	r1, [r7, #12]
 800167a:	6938      	ldr	r0, [r7, #16]
 800167c:	f7ff fa7a 	bl	8000b74 <_SendPacket>
  RECORD_END();
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	f383 8811 	msr	BASEPRI, r3
}
 8001686:	bf00      	nop
 8001688:	3748      	adds	r7, #72	; 0x48
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000bc0 	.word	0x20000bc0
 8001694:	20000b90 	.word	0x20000b90

08001698 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800169c:	4b07      	ldr	r3, [pc, #28]	; (80016bc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d008      	beq.n	80016b6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80016a4:	4b05      	ldr	r3, [pc, #20]	; (80016bc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80016ae:	4b03      	ldr	r3, [pc, #12]	; (80016bc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	4798      	blx	r3
  }
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000b90 	.word	0x20000b90

080016c0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80016c8:	f3ef 8311 	mrs	r3, BASEPRI
 80016cc:	f04f 0120 	mov.w	r1, #32
 80016d0:	f381 8811 	msr	BASEPRI, r1
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	480b      	ldr	r0, [pc, #44]	; (8001704 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80016d8:	f7ff f95e 	bl	8000998 <_PreparePacket>
 80016dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80016de:	2280      	movs	r2, #128	; 0x80
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	6938      	ldr	r0, [r7, #16]
 80016e4:	f7ff f928 	bl	8000938 <_EncodeStr>
 80016e8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80016ea:	220e      	movs	r2, #14
 80016ec:	68f9      	ldr	r1, [r7, #12]
 80016ee:	6938      	ldr	r0, [r7, #16]
 80016f0:	f7ff fa40 	bl	8000b74 <_SendPacket>
  RECORD_END();
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	f383 8811 	msr	BASEPRI, r3
}
 80016fa:	bf00      	nop
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000bc0 	.word	0x20000bc0

08001708 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d01a      	beq.n	800174c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8001716:	4b13      	ldr	r3, [pc, #76]	; (8001764 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d015      	beq.n	800174c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8001720:	4b10      	ldr	r3, [pc, #64]	; (8001764 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4798      	blx	r3
 8001728:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800172c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800172e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	000a      	movs	r2, r1
 800173c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800173e:	4613      	mov	r3, r2
 8001740:	461a      	mov	r2, r3
 8001742:	4621      	mov	r1, r4
 8001744:	200d      	movs	r0, #13
 8001746:	f7ff fcef 	bl	8001128 <SEGGER_SYSVIEW_RecordU32x2>
 800174a:	e006      	b.n	800175a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4619      	mov	r1, r3
 8001752:	200c      	movs	r0, #12
 8001754:	f7ff fcac 	bl	80010b0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8001758:	bf00      	nop
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	bd90      	pop	{r4, r7, pc}
 8001762:	bf00      	nop
 8001764:	20000b90 	.word	0x20000b90
 8001768:	e0001004 	.word	0xe0001004

0800176c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b08c      	sub	sp, #48	; 0x30
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8001776:	4b40      	ldr	r3, [pc, #256]	; (8001878 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d077      	beq.n	800186e <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800177e:	4b3e      	ldr	r3, [pc, #248]	; (8001878 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8001784:	2300      	movs	r3, #0
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
 8001788:	e008      	b.n	800179c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800178a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8001790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001792:	2b00      	cmp	r3, #0
 8001794:	d007      	beq.n	80017a6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8001796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001798:	3301      	adds	r3, #1
 800179a:	62bb      	str	r3, [r7, #40]	; 0x28
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d3f2      	bcc.n	800178a <SEGGER_SYSVIEW_SendModule+0x1e>
 80017a4:	e000      	b.n	80017a8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80017a6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80017a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d055      	beq.n	800185a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80017ae:	f3ef 8311 	mrs	r3, BASEPRI
 80017b2:	f04f 0120 	mov.w	r1, #32
 80017b6:	f381 8811 	msr	BASEPRI, r1
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	482f      	ldr	r0, [pc, #188]	; (800187c <SEGGER_SYSVIEW_SendModule+0x110>)
 80017be:	f7ff f8eb 	bl	8000998 <_PreparePacket>
 80017c2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	623b      	str	r3, [r7, #32]
 80017d0:	e00b      	b.n	80017ea <SEGGER_SYSVIEW_SendModule+0x7e>
 80017d2:	6a3b      	ldr	r3, [r7, #32]
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	1c59      	adds	r1, r3, #1
 80017da:	6279      	str	r1, [r7, #36]	; 0x24
 80017dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	701a      	strb	r2, [r3, #0]
 80017e4:	6a3b      	ldr	r3, [r7, #32]
 80017e6:	09db      	lsrs	r3, r3, #7
 80017e8:	623b      	str	r3, [r7, #32]
 80017ea:	6a3b      	ldr	r3, [r7, #32]
 80017ec:	2b7f      	cmp	r3, #127	; 0x7f
 80017ee:	d8f0      	bhi.n	80017d2 <SEGGER_SYSVIEW_SendModule+0x66>
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	1c5a      	adds	r2, r3, #1
 80017f4:	627a      	str	r2, [r7, #36]	; 0x24
 80017f6:	6a3a      	ldr	r2, [r7, #32]
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	701a      	strb	r2, [r3, #0]
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	61fb      	str	r3, [r7, #28]
 8001804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	61bb      	str	r3, [r7, #24]
 800180a:	e00b      	b.n	8001824 <SEGGER_SYSVIEW_SendModule+0xb8>
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	b2da      	uxtb	r2, r3
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	1c59      	adds	r1, r3, #1
 8001814:	61f9      	str	r1, [r7, #28]
 8001816:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	701a      	strb	r2, [r3, #0]
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	09db      	lsrs	r3, r3, #7
 8001822:	61bb      	str	r3, [r7, #24]
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	2b7f      	cmp	r3, #127	; 0x7f
 8001828:	d8f0      	bhi.n	800180c <SEGGER_SYSVIEW_SendModule+0xa0>
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	1c5a      	adds	r2, r3, #1
 800182e:	61fa      	str	r2, [r7, #28]
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	701a      	strb	r2, [r3, #0]
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800183a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2280      	movs	r2, #128	; 0x80
 8001840:	4619      	mov	r1, r3
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f7ff f878 	bl	8000938 <_EncodeStr>
 8001848:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800184a:	2216      	movs	r2, #22
 800184c:	68f9      	ldr	r1, [r7, #12]
 800184e:	6938      	ldr	r0, [r7, #16]
 8001850:	f7ff f990 	bl	8000b74 <_SendPacket>
      RECORD_END();
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800185a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185c:	2b00      	cmp	r3, #0
 800185e:	d006      	beq.n	800186e <SEGGER_SYSVIEW_SendModule+0x102>
 8001860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d002      	beq.n	800186e <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8001868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	4798      	blx	r3
    }
  }
}
 800186e:	bf00      	nop
 8001870:	3730      	adds	r7, #48	; 0x30
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000bb8 	.word	0x20000bb8
 800187c:	20000bc0 	.word	0x20000bc0

08001880 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8001886:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00f      	beq.n	80018ae <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800188e:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d002      	beq.n	80018a2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f2      	bne.n	8001894 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000bb8 	.word	0x20000bb8

080018bc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80018c2:	f3ef 8311 	mrs	r3, BASEPRI
 80018c6:	f04f 0120 	mov.w	r1, #32
 80018ca:	f381 8811 	msr	BASEPRI, r1
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	4817      	ldr	r0, [pc, #92]	; (8001930 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80018d2:	f7ff f861 	bl	8000998 <_PreparePacket>
 80018d6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	4b14      	ldr	r3, [pc, #80]	; (8001934 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	e00b      	b.n	8001900 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	1c59      	adds	r1, r3, #1
 80018f0:	6179      	str	r1, [r7, #20]
 80018f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	701a      	strb	r2, [r3, #0]
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	09db      	lsrs	r3, r3, #7
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	2b7f      	cmp	r3, #127	; 0x7f
 8001904:	d8f0      	bhi.n	80018e8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	1c5a      	adds	r2, r3, #1
 800190a:	617a      	str	r2, [r7, #20]
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	701a      	strb	r2, [r3, #0]
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8001916:	221b      	movs	r2, #27
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	68b8      	ldr	r0, [r7, #8]
 800191c:	f7ff f92a 	bl	8000b74 <_SendPacket>
  RECORD_END();
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f383 8811 	msr	BASEPRI, r3
}
 8001926:	bf00      	nop
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000bc0 	.word	0x20000bc0
 8001934:	20000bbc 	.word	0x20000bbc

08001938 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 8001938:	b40f      	push	{r0, r1, r2, r3}
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 8001940:	f107 0314 	add.w	r3, r7, #20
 8001944:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	461a      	mov	r2, r3
 800194a:	2100      	movs	r1, #0
 800194c:	6938      	ldr	r0, [r7, #16]
 800194e:	f7ff fa7f 	bl	8000e50 <_VPrintHost>
  va_end(ParamList);
#endif
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800195c:	b004      	add	sp, #16
 800195e:	4770      	bx	lr

08001960 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001964:	4803      	ldr	r0, [pc, #12]	; (8001974 <_cbSendSystemDesc+0x14>)
 8001966:	f7ff feab 	bl	80016c0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800196a:	4803      	ldr	r0, [pc, #12]	; (8001978 <_cbSendSystemDesc+0x18>)
 800196c:	f7ff fea8 	bl	80016c0 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}
 8001974:	0800dfbc 	.word	0x0800dfbc
 8001978:	0800dff0 	.word	0x0800dff0

0800197c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <SEGGER_SYSVIEW_Conf+0x20>)
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	4b05      	ldr	r3, [pc, #20]	; (800199c <SEGGER_SYSVIEW_Conf+0x20>)
 8001986:	6819      	ldr	r1, [r3, #0]
 8001988:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <SEGGER_SYSVIEW_Conf+0x24>)
 800198a:	4a06      	ldr	r2, [pc, #24]	; (80019a4 <SEGGER_SYSVIEW_Conf+0x28>)
 800198c:	f7ff fb1e 	bl	8000fcc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001990:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001994:	f7ff fb5e 	bl	8001054 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000000 	.word	0x20000000
 80019a0:	08001961 	.word	0x08001961
 80019a4:	0800e0d8 	.word	0x0800e0d8

080019a8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80019a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80019ae:	2300      	movs	r3, #0
 80019b0:	607b      	str	r3, [r7, #4]
 80019b2:	e048      	b.n	8001a46 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 80019b4:	4929      	ldr	r1, [pc, #164]	; (8001a5c <_cbSendTaskList+0xb4>)
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	4613      	mov	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	440b      	add	r3, r1
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f00a f9fd 	bl	800bdc4 <uxTaskGetStackHighWaterMark>
 80019ca:	4601      	mov	r1, r0
 80019cc:	4823      	ldr	r0, [pc, #140]	; (8001a5c <_cbSendTaskList+0xb4>)
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	4613      	mov	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4403      	add	r3, r0
 80019da:	3310      	adds	r3, #16
 80019dc:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80019de:	491f      	ldr	r1, [pc, #124]	; (8001a5c <_cbSendTaskList+0xb4>)
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	4613      	mov	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	440b      	add	r3, r1
 80019ec:	6818      	ldr	r0, [r3, #0]
 80019ee:	491b      	ldr	r1, [pc, #108]	; (8001a5c <_cbSendTaskList+0xb4>)
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	4613      	mov	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4413      	add	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	440b      	add	r3, r1
 80019fc:	3304      	adds	r3, #4
 80019fe:	6819      	ldr	r1, [r3, #0]
 8001a00:	4c16      	ldr	r4, [pc, #88]	; (8001a5c <_cbSendTaskList+0xb4>)
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	4613      	mov	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4423      	add	r3, r4
 8001a0e:	3308      	adds	r3, #8
 8001a10:	681c      	ldr	r4, [r3, #0]
 8001a12:	4d12      	ldr	r5, [pc, #72]	; (8001a5c <_cbSendTaskList+0xb4>)
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	4613      	mov	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	442b      	add	r3, r5
 8001a20:	330c      	adds	r3, #12
 8001a22:	681d      	ldr	r5, [r3, #0]
 8001a24:	4e0d      	ldr	r6, [pc, #52]	; (8001a5c <_cbSendTaskList+0xb4>)
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4433      	add	r3, r6
 8001a32:	3310      	adds	r3, #16
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	462b      	mov	r3, r5
 8001a3a:	4622      	mov	r2, r4
 8001a3c:	f000 f855 	bl	8001aea <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3301      	adds	r3, #1
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <_cbSendTaskList+0xb8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d3b1      	bcc.n	80019b4 <_cbSendTaskList+0xc>
  }
}
 8001a50:	bf00      	nop
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000ca4 	.word	0x20000ca4
 8001a60:	20000d44 	.word	0x20000d44

08001a64 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001a6c:	f009 fe92 	bl	800b794 <xTaskGetTickCountFromISR>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2200      	movs	r2, #0
 8001a74:	469a      	mov	sl, r3
 8001a76:	4693      	mov	fp, r2
 8001a78:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001a7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	f04f 0a00 	mov.w	sl, #0
 8001a88:	f04f 0b00 	mov.w	fp, #0
 8001a8c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8001a90:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8001a94:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8001a98:	4652      	mov	r2, sl
 8001a9a:	465b      	mov	r3, fp
 8001a9c:	1a14      	subs	r4, r2, r0
 8001a9e:	eb63 0501 	sbc.w	r5, r3, r1
 8001aa2:	f04f 0200 	mov.w	r2, #0
 8001aa6:	f04f 0300 	mov.w	r3, #0
 8001aaa:	00ab      	lsls	r3, r5, #2
 8001aac:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8001ab0:	00a2      	lsls	r2, r4, #2
 8001ab2:	4614      	mov	r4, r2
 8001ab4:	461d      	mov	r5, r3
 8001ab6:	eb14 0800 	adds.w	r8, r4, r0
 8001aba:	eb45 0901 	adc.w	r9, r5, r1
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	f04f 0300 	mov.w	r3, #0
 8001ac6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001aca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ace:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ad2:	4690      	mov	r8, r2
 8001ad4:	4699      	mov	r9, r3
 8001ad6:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8001ada:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001ade:	4610      	mov	r0, r2
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001aea <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b08a      	sub	sp, #40	; 0x28
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	60f8      	str	r0, [r7, #12]
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
 8001af6:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	2214      	movs	r2, #20
 8001afe:	2100      	movs	r1, #0
 8001b00:	4618      	mov	r0, r3
 8001b02:	f00c f8d3 	bl	800dcac <memset>
  TaskInfo.TaskID     = TaskID;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001b1a:	f107 0314 	add.w	r3, r7, #20
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff fcd6 	bl	80014d0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001b24:	bf00      	nop
 8001b26:	3728      	adds	r7, #40	; 0x28
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b2c:	b590      	push	{r4, r7, lr}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b32:	f000 fc88 	bl	8002446 <HAL_Init>

  /* USER CODE BEGIN Init */
  SEGGER_SYSVIEW_Conf();
 8001b36:	f7ff ff21 	bl	800197c <SEGGER_SYSVIEW_Conf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b3a:	f000 f84f 	bl	8001bdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b3e:	f000 f93d 	bl	8001dbc <MX_GPIO_Init>
  MX_ETH_Init();
 8001b42:	f000 f8bd 	bl	8001cc0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001b46:	f000 f909 	bl	8001d5c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001b4a:	f008 fa69 	bl	800a020 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of testCommandTimer */
  testCommandTimerHandle = osTimerNew(testCommandTimerEntry, osTimerPeriodic, NULL, &testCommandTimer_attributes);
 8001b4e:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <main+0x84>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	2101      	movs	r1, #1
 8001b54:	4817      	ldr	r0, [pc, #92]	; (8001bb4 <main+0x88>)
 8001b56:	f008 fbb7 	bl	800a2c8 <osTimerNew>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	4a16      	ldr	r2, [pc, #88]	; (8001bb8 <main+0x8c>)
 8001b5e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  xTimerStart(testCommandTimerHandle, 10000 / portTICK_PERIOD_MS);
 8001b60:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <main+0x8c>)
 8001b62:	681c      	ldr	r4, [r3, #0]
 8001b64:	f009 fe06 	bl	800b774 <xTaskGetTickCount>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	f242 7310 	movw	r3, #10000	; 0x2710
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	2300      	movs	r3, #0
 8001b72:	2101      	movs	r1, #1
 8001b74:	4620      	mov	r0, r4
 8001b76:	f00a fb65 	bl	800c244 <xTimerGenericCommand>
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of commandQueue */
  commandQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &commandQueue_attributes);
 8001b7a:	4a10      	ldr	r2, [pc, #64]	; (8001bbc <main+0x90>)
 8001b7c:	2102      	movs	r1, #2
 8001b7e:	2010      	movs	r0, #16
 8001b80:	f008 fc26 	bl	800a3d0 <osMessageQueueNew>
 8001b84:	4603      	mov	r3, r0
 8001b86:	4a0e      	ldr	r2, [pc, #56]	; (8001bc0 <main+0x94>)
 8001b88:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001b8a:	4a0e      	ldr	r2, [pc, #56]	; (8001bc4 <main+0x98>)
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	480e      	ldr	r0, [pc, #56]	; (8001bc8 <main+0x9c>)
 8001b90:	f008 fab0 	bl	800a0f4 <osThreadNew>
 8001b94:	4603      	mov	r3, r0
 8001b96:	4a0d      	ldr	r2, [pc, #52]	; (8001bcc <main+0xa0>)
 8001b98:	6013      	str	r3, [r2, #0]

  /* creation of commandReader */
  commandReaderHandle = osThreadNew(commandReaderEntry, NULL, &commandReader_attributes);
 8001b9a:	4a0d      	ldr	r2, [pc, #52]	; (8001bd0 <main+0xa4>)
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	480d      	ldr	r0, [pc, #52]	; (8001bd4 <main+0xa8>)
 8001ba0:	f008 faa8 	bl	800a0f4 <osThreadNew>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	4a0c      	ldr	r2, [pc, #48]	; (8001bd8 <main+0xac>)
 8001ba8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001baa:	f008 fa6d 	bl	800a088 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001bae:	e7fe      	b.n	8001bae <main+0x82>
 8001bb0:	0800e140 	.word	0x0800e140
 8001bb4:	08001f51 	.word	0x08001f51
 8001bb8:	20000ec4 	.word	0x20000ec4
 8001bbc:	0800e128 	.word	0x0800e128
 8001bc0:	20000ec0 	.word	0x20000ec0
 8001bc4:	0800e0e0 	.word	0x0800e0e0
 8001bc8:	08001f01 	.word	0x08001f01
 8001bcc:	20000eb8 	.word	0x20000eb8
 8001bd0:	0800e104 	.word	0x0800e104
 8001bd4:	08001f21 	.word	0x08001f21
 8001bd8:	20000ebc 	.word	0x20000ebc

08001bdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b094      	sub	sp, #80	; 0x50
 8001be0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001be2:	f107 031c 	add.w	r3, r7, #28
 8001be6:	2234      	movs	r2, #52	; 0x34
 8001be8:	2100      	movs	r1, #0
 8001bea:	4618      	mov	r0, r3
 8001bec:	f00c f85e 	bl	800dcac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bf0:	f107 0308 	add.w	r3, r7, #8
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001c00:	f002 fcf8 	bl	80045f4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c04:	4b2c      	ldr	r3, [pc, #176]	; (8001cb8 <SystemClock_Config+0xdc>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	4a2b      	ldr	r2, [pc, #172]	; (8001cb8 <SystemClock_Config+0xdc>)
 8001c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c10:	4b29      	ldr	r3, [pc, #164]	; (8001cb8 <SystemClock_Config+0xdc>)
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c18:	607b      	str	r3, [r7, #4]
 8001c1a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c1c:	4b27      	ldr	r3, [pc, #156]	; (8001cbc <SystemClock_Config+0xe0>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c24:	4a25      	ldr	r2, [pc, #148]	; (8001cbc <SystemClock_Config+0xe0>)
 8001c26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c2a:	6013      	str	r3, [r2, #0]
 8001c2c:	4b23      	ldr	r3, [pc, #140]	; (8001cbc <SystemClock_Config+0xe0>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c34:	603b      	str	r3, [r7, #0]
 8001c36:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001c3c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001c40:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c42:	2302      	movs	r3, #2
 8001c44:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c4c:	2304      	movs	r3, #4
 8001c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001c50:	2360      	movs	r3, #96	; 0x60
 8001c52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c54:	2302      	movs	r3, #2
 8001c56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c58:	2304      	movs	r3, #4
 8001c5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c60:	f107 031c 	add.w	r3, r7, #28
 8001c64:	4618      	mov	r0, r3
 8001c66:	f002 fd25 	bl	80046b4 <HAL_RCC_OscConfig>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c70:	f000 f98e 	bl	8001f90 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c74:	f002 fcce 	bl	8004614 <HAL_PWREx_EnableOverDrive>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001c7e:	f000 f987 	bl	8001f90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c82:	230f      	movs	r3, #15
 8001c84:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c86:	2302      	movs	r3, #2
 8001c88:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c98:	f107 0308 	add.w	r3, r7, #8
 8001c9c:	2103      	movs	r1, #3
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f002 ffb6 	bl	8004c10 <HAL_RCC_ClockConfig>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001caa:	f000 f971 	bl	8001f90 <Error_Handler>
  }
}
 8001cae:	bf00      	nop
 8001cb0:	3750      	adds	r7, #80	; 0x50
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40007000 	.word	0x40007000

08001cc0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001cc4:	4b1f      	ldr	r3, [pc, #124]	; (8001d44 <MX_ETH_Init+0x84>)
 8001cc6:	4a20      	ldr	r2, [pc, #128]	; (8001d48 <MX_ETH_Init+0x88>)
 8001cc8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001cca:	4b20      	ldr	r3, [pc, #128]	; (8001d4c <MX_ETH_Init+0x8c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001cd0:	4b1e      	ldr	r3, [pc, #120]	; (8001d4c <MX_ETH_Init+0x8c>)
 8001cd2:	2280      	movs	r2, #128	; 0x80
 8001cd4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001cd6:	4b1d      	ldr	r3, [pc, #116]	; (8001d4c <MX_ETH_Init+0x8c>)
 8001cd8:	22e1      	movs	r2, #225	; 0xe1
 8001cda:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001cdc:	4b1b      	ldr	r3, [pc, #108]	; (8001d4c <MX_ETH_Init+0x8c>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001ce2:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <MX_ETH_Init+0x8c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001ce8:	4b18      	ldr	r3, [pc, #96]	; (8001d4c <MX_ETH_Init+0x8c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001cee:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <MX_ETH_Init+0x84>)
 8001cf0:	4a16      	ldr	r2, [pc, #88]	; (8001d4c <MX_ETH_Init+0x8c>)
 8001cf2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001cf4:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <MX_ETH_Init+0x84>)
 8001cf6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001cfa:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001cfc:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <MX_ETH_Init+0x84>)
 8001cfe:	4a14      	ldr	r2, [pc, #80]	; (8001d50 <MX_ETH_Init+0x90>)
 8001d00:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001d02:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <MX_ETH_Init+0x84>)
 8001d04:	4a13      	ldr	r2, [pc, #76]	; (8001d54 <MX_ETH_Init+0x94>)
 8001d06:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001d08:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <MX_ETH_Init+0x84>)
 8001d0a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001d0e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001d10:	480c      	ldr	r0, [pc, #48]	; (8001d44 <MX_ETH_Init+0x84>)
 8001d12:	f000 fccb 	bl	80026ac <HAL_ETH_Init>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001d1c:	f000 f938 	bl	8001f90 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001d20:	2238      	movs	r2, #56	; 0x38
 8001d22:	2100      	movs	r1, #0
 8001d24:	480c      	ldr	r0, [pc, #48]	; (8001d58 <MX_ETH_Init+0x98>)
 8001d26:	f00b ffc1 	bl	800dcac <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001d2a:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <MX_ETH_Init+0x98>)
 8001d2c:	2221      	movs	r2, #33	; 0x21
 8001d2e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001d30:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <MX_ETH_Init+0x98>)
 8001d32:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001d36:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001d38:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <MX_ETH_Init+0x98>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000d80 	.word	0x20000d80
 8001d48:	40028000 	.word	0x40028000
 8001d4c:	20000ec8 	.word	0x20000ec8
 8001d50:	20000214 	.word	0x20000214
 8001d54:	20000174 	.word	0x20000174
 8001d58:	20000d48 	.word	0x20000d48

08001d5c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d60:	4b14      	ldr	r3, [pc, #80]	; (8001db4 <MX_USART3_UART_Init+0x58>)
 8001d62:	4a15      	ldr	r2, [pc, #84]	; (8001db8 <MX_USART3_UART_Init+0x5c>)
 8001d64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d66:	4b13      	ldr	r3, [pc, #76]	; (8001db4 <MX_USART3_UART_Init+0x58>)
 8001d68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d6e:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <MX_USART3_UART_Init+0x58>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d74:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <MX_USART3_UART_Init+0x58>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <MX_USART3_UART_Init+0x58>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <MX_USART3_UART_Init+0x58>)
 8001d82:	220c      	movs	r2, #12
 8001d84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d86:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <MX_USART3_UART_Init+0x58>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d8c:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <MX_USART3_UART_Init+0x58>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d92:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <MX_USART3_UART_Init+0x58>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d98:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <MX_USART3_UART_Init+0x58>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d9e:	4805      	ldr	r0, [pc, #20]	; (8001db4 <MX_USART3_UART_Init+0x58>)
 8001da0:	f004 f896 	bl	8005ed0 <HAL_UART_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001daa:	f000 f8f1 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000e30 	.word	0x20000e30
 8001db8:	40004800 	.word	0x40004800

08001dbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08c      	sub	sp, #48	; 0x30
 8001dc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc2:	f107 031c 	add.w	r3, r7, #28
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	605a      	str	r2, [r3, #4]
 8001dcc:	609a      	str	r2, [r3, #8]
 8001dce:	60da      	str	r2, [r3, #12]
 8001dd0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dd2:	4b47      	ldr	r3, [pc, #284]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	4a46      	ldr	r2, [pc, #280]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001dd8:	f043 0304 	orr.w	r3, r3, #4
 8001ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dde:	4b44      	ldr	r3, [pc, #272]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	f003 0304 	and.w	r3, r3, #4
 8001de6:	61bb      	str	r3, [r7, #24]
 8001de8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dea:	4b41      	ldr	r3, [pc, #260]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a40      	ldr	r2, [pc, #256]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b3e      	ldr	r3, [pc, #248]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e02:	4b3b      	ldr	r3, [pc, #236]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	4a3a      	ldr	r2, [pc, #232]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0e:	4b38      	ldr	r3, [pc, #224]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1a:	4b35      	ldr	r3, [pc, #212]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a34      	ldr	r2, [pc, #208]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001e20:	f043 0302 	orr.w	r3, r3, #2
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b32      	ldr	r3, [pc, #200]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e32:	4b2f      	ldr	r3, [pc, #188]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	4a2e      	ldr	r2, [pc, #184]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001e38:	f043 0308 	orr.w	r3, r3, #8
 8001e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3e:	4b2c      	ldr	r3, [pc, #176]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e4a:	4b29      	ldr	r3, [pc, #164]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	4a28      	ldr	r2, [pc, #160]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e54:	6313      	str	r3, [r2, #48]	; 0x30
 8001e56:	4b26      	ldr	r3, [pc, #152]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5e:	607b      	str	r3, [r7, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001e62:	2200      	movs	r2, #0
 8001e64:	f244 0181 	movw	r1, #16513	; 0x4081
 8001e68:	4822      	ldr	r0, [pc, #136]	; (8001ef4 <MX_GPIO_Init+0x138>)
 8001e6a:	f001 f8f1 	bl	8003050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2140      	movs	r1, #64	; 0x40
 8001e72:	4821      	ldr	r0, [pc, #132]	; (8001ef8 <MX_GPIO_Init+0x13c>)
 8001e74:	f001 f8ec 	bl	8003050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001e78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e7e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001e88:	f107 031c 	add.w	r3, r7, #28
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	481b      	ldr	r0, [pc, #108]	; (8001efc <MX_GPIO_Init+0x140>)
 8001e90:	f000 ff32 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001e94:	f244 0381 	movw	r3, #16513	; 0x4081
 8001e98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea6:	f107 031c 	add.w	r3, r7, #28
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4811      	ldr	r0, [pc, #68]	; (8001ef4 <MX_GPIO_Init+0x138>)
 8001eae:	f000 ff23 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001eb2:	2340      	movs	r3, #64	; 0x40
 8001eb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001ec2:	f107 031c 	add.w	r3, r7, #28
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	480b      	ldr	r0, [pc, #44]	; (8001ef8 <MX_GPIO_Init+0x13c>)
 8001eca:	f000 ff15 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001ece:	2380      	movs	r3, #128	; 0x80
 8001ed0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001eda:	f107 031c 	add.w	r3, r7, #28
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4805      	ldr	r0, [pc, #20]	; (8001ef8 <MX_GPIO_Init+0x13c>)
 8001ee2:	f000 ff09 	bl	8002cf8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ee6:	bf00      	nop
 8001ee8:	3730      	adds	r7, #48	; 0x30
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40020400 	.word	0x40020400
 8001ef8:	40021800 	.word	0x40021800
 8001efc:	40020800 	.word	0x40020800

08001f00 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001f08:	f00b f8f0 	bl	800d0ec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	f008 f997 	bl	800a240 <osDelay>
    CDC_Transmit_FS((uint8_t*)"test", 4);
 8001f12:	2104      	movs	r1, #4
 8001f14:	4801      	ldr	r0, [pc, #4]	; (8001f1c <StartDefaultTask+0x1c>)
 8001f16:	f00b f9a7 	bl	800d268 <CDC_Transmit_FS>
    osDelay(1);
 8001f1a:	e7f7      	b.n	8001f0c <StartDefaultTask+0xc>
 8001f1c:	0800e040 	.word	0x0800e040

08001f20 <commandReaderEntry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_commandReaderEntry */
void commandReaderEntry(void *argument)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b088      	sub	sp, #32
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN commandReaderEntry */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f28:	2001      	movs	r0, #1
 8001f2a:	f008 f989 	bl	800a240 <osDelay>
    char command[20];
    xQueueReceive(commandQueueHandle, command, 100);
 8001f2e:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <commandReaderEntry+0x28>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f107 010c 	add.w	r1, r7, #12
 8001f36:	2264      	movs	r2, #100	; 0x64
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f008 feaf 	bl	800ac9c <xQueueReceive>

    SEGGER_SYSVIEW_PrintfHost("reader");
 8001f3e:	4803      	ldr	r0, [pc, #12]	; (8001f4c <commandReaderEntry+0x2c>)
 8001f40:	f7ff fcfa 	bl	8001938 <SEGGER_SYSVIEW_PrintfHost>
  {
 8001f44:	e7f0      	b.n	8001f28 <commandReaderEntry+0x8>
 8001f46:	bf00      	nop
 8001f48:	20000ec0 	.word	0x20000ec0
 8001f4c:	0800e048 	.word	0x0800e048

08001f50 <testCommandTimerEntry>:
  /* USER CODE END commandReaderEntry */
}

/* testCommandTimerEntry function */
void testCommandTimerEntry(void *argument)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN testCommandTimerEntry */
  SEGGER_SYSVIEW_PrintfHost("sender");
 8001f58:	4803      	ldr	r0, [pc, #12]	; (8001f68 <testCommandTimerEntry+0x18>)
 8001f5a:	f7ff fced 	bl	8001938 <SEGGER_SYSVIEW_PrintfHost>
  /* USER CODE END testCommandTimerEntry */
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	0800e050 	.word	0x0800e050

08001f6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a04      	ldr	r2, [pc, #16]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d101      	bne.n	8001f82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f7e:	f000 fa6f 	bl	8002460 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40001000 	.word	0x40001000

08001f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f94:	b672      	cpsid	i
}
 8001f96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f98:	e7fe      	b.n	8001f98 <Error_Handler+0x8>
	...

08001f9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fa2:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <HAL_MspInit+0x4c>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	4a10      	ldr	r2, [pc, #64]	; (8001fe8 <HAL_MspInit+0x4c>)
 8001fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fac:	6413      	str	r3, [r2, #64]	; 0x40
 8001fae:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <HAL_MspInit+0x4c>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb6:	607b      	str	r3, [r7, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fba:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <HAL_MspInit+0x4c>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <HAL_MspInit+0x4c>)
 8001fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc6:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <HAL_MspInit+0x4c>)
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fce:	603b      	str	r3, [r7, #0]
 8001fd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	210f      	movs	r1, #15
 8001fd6:	f06f 0001 	mvn.w	r0, #1
 8001fda:	f000 fb3d 	bl	8002658 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40023800 	.word	0x40023800

08001fec <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08e      	sub	sp, #56	; 0x38
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a4e      	ldr	r2, [pc, #312]	; (8002144 <HAL_ETH_MspInit+0x158>)
 800200a:	4293      	cmp	r3, r2
 800200c:	f040 8096 	bne.w	800213c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002010:	4b4d      	ldr	r3, [pc, #308]	; (8002148 <HAL_ETH_MspInit+0x15c>)
 8002012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002014:	4a4c      	ldr	r2, [pc, #304]	; (8002148 <HAL_ETH_MspInit+0x15c>)
 8002016:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800201a:	6313      	str	r3, [r2, #48]	; 0x30
 800201c:	4b4a      	ldr	r3, [pc, #296]	; (8002148 <HAL_ETH_MspInit+0x15c>)
 800201e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002024:	623b      	str	r3, [r7, #32]
 8002026:	6a3b      	ldr	r3, [r7, #32]
 8002028:	4b47      	ldr	r3, [pc, #284]	; (8002148 <HAL_ETH_MspInit+0x15c>)
 800202a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202c:	4a46      	ldr	r2, [pc, #280]	; (8002148 <HAL_ETH_MspInit+0x15c>)
 800202e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002032:	6313      	str	r3, [r2, #48]	; 0x30
 8002034:	4b44      	ldr	r3, [pc, #272]	; (8002148 <HAL_ETH_MspInit+0x15c>)
 8002036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002038:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800203c:	61fb      	str	r3, [r7, #28]
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	4b41      	ldr	r3, [pc, #260]	; (8002148 <HAL_ETH_MspInit+0x15c>)
 8002042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002044:	4a40      	ldr	r2, [pc, #256]	; (8002148 <HAL_ETH_MspInit+0x15c>)
 8002046:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800204a:	6313      	str	r3, [r2, #48]	; 0x30
 800204c:	4b3e      	ldr	r3, [pc, #248]	; (8002148 <HAL_ETH_MspInit+0x15c>)
 800204e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002050:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002054:	61bb      	str	r3, [r7, #24]
 8002056:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002058:	4b3b      	ldr	r3, [pc, #236]	; (8002148 <HAL_ETH_MspInit+0x15c>)
 800205a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205c:	4a3a      	ldr	r2, [pc, #232]	; (8002148 <HAL_ETH_MspInit+0x15c>)
 800205e:	f043 0304 	orr.w	r3, r3, #4
 8002062:	6313      	str	r3, [r2, #48]	; 0x30
 8002064:	4b38      	ldr	r3, [pc, #224]	; (8002148 <HAL_ETH_MspInit+0x15c>)
 8002066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	617b      	str	r3, [r7, #20]
 800206e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002070:	4b35      	ldr	r3, [pc, #212]	; (8002148 <HAL_ETH_MspInit+0x15c>)
 8002072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002074:	4a34      	ldr	r2, [pc, #208]	; (8002148 <HAL_ETH_MspInit+0x15c>)
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	6313      	str	r3, [r2, #48]	; 0x30
 800207c:	4b32      	ldr	r3, [pc, #200]	; (8002148 <HAL_ETH_MspInit+0x15c>)
 800207e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	613b      	str	r3, [r7, #16]
 8002086:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002088:	4b2f      	ldr	r3, [pc, #188]	; (8002148 <HAL_ETH_MspInit+0x15c>)
 800208a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208c:	4a2e      	ldr	r2, [pc, #184]	; (8002148 <HAL_ETH_MspInit+0x15c>)
 800208e:	f043 0302 	orr.w	r3, r3, #2
 8002092:	6313      	str	r3, [r2, #48]	; 0x30
 8002094:	4b2c      	ldr	r3, [pc, #176]	; (8002148 <HAL_ETH_MspInit+0x15c>)
 8002096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80020a0:	4b29      	ldr	r3, [pc, #164]	; (8002148 <HAL_ETH_MspInit+0x15c>)
 80020a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a4:	4a28      	ldr	r2, [pc, #160]	; (8002148 <HAL_ETH_MspInit+0x15c>)
 80020a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020aa:	6313      	str	r3, [r2, #48]	; 0x30
 80020ac:	4b26      	ldr	r3, [pc, #152]	; (8002148 <HAL_ETH_MspInit+0x15c>)
 80020ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80020b8:	2332      	movs	r3, #50	; 0x32
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020bc:	2302      	movs	r3, #2
 80020be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c4:	2303      	movs	r3, #3
 80020c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020c8:	230b      	movs	r3, #11
 80020ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d0:	4619      	mov	r1, r3
 80020d2:	481e      	ldr	r0, [pc, #120]	; (800214c <HAL_ETH_MspInit+0x160>)
 80020d4:	f000 fe10 	bl	8002cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80020d8:	2386      	movs	r3, #134	; 0x86
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020dc:	2302      	movs	r3, #2
 80020de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e4:	2303      	movs	r3, #3
 80020e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020e8:	230b      	movs	r3, #11
 80020ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020f0:	4619      	mov	r1, r3
 80020f2:	4817      	ldr	r0, [pc, #92]	; (8002150 <HAL_ETH_MspInit+0x164>)
 80020f4:	f000 fe00 	bl	8002cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80020f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fe:	2302      	movs	r3, #2
 8002100:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	2300      	movs	r3, #0
 8002104:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002106:	2303      	movs	r3, #3
 8002108:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800210a:	230b      	movs	r3, #11
 800210c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800210e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002112:	4619      	mov	r1, r3
 8002114:	480f      	ldr	r0, [pc, #60]	; (8002154 <HAL_ETH_MspInit+0x168>)
 8002116:	f000 fdef 	bl	8002cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800211a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002120:	2302      	movs	r3, #2
 8002122:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002128:	2303      	movs	r3, #3
 800212a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800212c:	230b      	movs	r3, #11
 800212e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002134:	4619      	mov	r1, r3
 8002136:	4808      	ldr	r0, [pc, #32]	; (8002158 <HAL_ETH_MspInit+0x16c>)
 8002138:	f000 fdde 	bl	8002cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800213c:	bf00      	nop
 800213e:	3738      	adds	r7, #56	; 0x38
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40028000 	.word	0x40028000
 8002148:	40023800 	.word	0x40023800
 800214c:	40020800 	.word	0x40020800
 8002150:	40020000 	.word	0x40020000
 8002154:	40020400 	.word	0x40020400
 8002158:	40021800 	.word	0x40021800

0800215c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b0ae      	sub	sp, #184	; 0xb8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002164:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002174:	f107 0314 	add.w	r3, r7, #20
 8002178:	2290      	movs	r2, #144	; 0x90
 800217a:	2100      	movs	r1, #0
 800217c:	4618      	mov	r0, r3
 800217e:	f00b fd95 	bl	800dcac <memset>
  if(huart->Instance==USART3)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a22      	ldr	r2, [pc, #136]	; (8002210 <HAL_UART_MspInit+0xb4>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d13c      	bne.n	8002206 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800218c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002190:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002192:	2300      	movs	r3, #0
 8002194:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002196:	f107 0314 	add.w	r3, r7, #20
 800219a:	4618      	mov	r0, r3
 800219c:	f002 ff90 	bl	80050c0 <HAL_RCCEx_PeriphCLKConfig>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80021a6:	f7ff fef3 	bl	8001f90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80021aa:	4b1a      	ldr	r3, [pc, #104]	; (8002214 <HAL_UART_MspInit+0xb8>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	4a19      	ldr	r2, [pc, #100]	; (8002214 <HAL_UART_MspInit+0xb8>)
 80021b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021b4:	6413      	str	r3, [r2, #64]	; 0x40
 80021b6:	4b17      	ldr	r3, [pc, #92]	; (8002214 <HAL_UART_MspInit+0xb8>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021be:	613b      	str	r3, [r7, #16]
 80021c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021c2:	4b14      	ldr	r3, [pc, #80]	; (8002214 <HAL_UART_MspInit+0xb8>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	4a13      	ldr	r2, [pc, #76]	; (8002214 <HAL_UART_MspInit+0xb8>)
 80021c8:	f043 0308 	orr.w	r3, r3, #8
 80021cc:	6313      	str	r3, [r2, #48]	; 0x30
 80021ce:	4b11      	ldr	r3, [pc, #68]	; (8002214 <HAL_UART_MspInit+0xb8>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80021da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e2:	2302      	movs	r3, #2
 80021e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ee:	2303      	movs	r3, #3
 80021f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80021f4:	2307      	movs	r3, #7
 80021f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021fa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80021fe:	4619      	mov	r1, r3
 8002200:	4805      	ldr	r0, [pc, #20]	; (8002218 <HAL_UART_MspInit+0xbc>)
 8002202:	f000 fd79 	bl	8002cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002206:	bf00      	nop
 8002208:	37b8      	adds	r7, #184	; 0xb8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40004800 	.word	0x40004800
 8002214:	40023800 	.word	0x40023800
 8002218:	40020c00 	.word	0x40020c00

0800221c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b08e      	sub	sp, #56	; 0x38
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002224:	2300      	movs	r3, #0
 8002226:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800222c:	4b33      	ldr	r3, [pc, #204]	; (80022fc <HAL_InitTick+0xe0>)
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	4a32      	ldr	r2, [pc, #200]	; (80022fc <HAL_InitTick+0xe0>)
 8002232:	f043 0310 	orr.w	r3, r3, #16
 8002236:	6413      	str	r3, [r2, #64]	; 0x40
 8002238:	4b30      	ldr	r3, [pc, #192]	; (80022fc <HAL_InitTick+0xe0>)
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	f003 0310 	and.w	r3, r3, #16
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002244:	f107 0210 	add.w	r2, r7, #16
 8002248:	f107 0314 	add.w	r3, r7, #20
 800224c:	4611      	mov	r1, r2
 800224e:	4618      	mov	r0, r3
 8002250:	f002 ff04 	bl	800505c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002254:	6a3b      	ldr	r3, [r7, #32]
 8002256:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800225a:	2b00      	cmp	r3, #0
 800225c:	d103      	bne.n	8002266 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800225e:	f002 fed5 	bl	800500c <HAL_RCC_GetPCLK1Freq>
 8002262:	6378      	str	r0, [r7, #52]	; 0x34
 8002264:	e004      	b.n	8002270 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002266:	f002 fed1 	bl	800500c <HAL_RCC_GetPCLK1Freq>
 800226a:	4603      	mov	r3, r0
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002272:	4a23      	ldr	r2, [pc, #140]	; (8002300 <HAL_InitTick+0xe4>)
 8002274:	fba2 2303 	umull	r2, r3, r2, r3
 8002278:	0c9b      	lsrs	r3, r3, #18
 800227a:	3b01      	subs	r3, #1
 800227c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800227e:	4b21      	ldr	r3, [pc, #132]	; (8002304 <HAL_InitTick+0xe8>)
 8002280:	4a21      	ldr	r2, [pc, #132]	; (8002308 <HAL_InitTick+0xec>)
 8002282:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002284:	4b1f      	ldr	r3, [pc, #124]	; (8002304 <HAL_InitTick+0xe8>)
 8002286:	f240 32e7 	movw	r2, #999	; 0x3e7
 800228a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800228c:	4a1d      	ldr	r2, [pc, #116]	; (8002304 <HAL_InitTick+0xe8>)
 800228e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002290:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002292:	4b1c      	ldr	r3, [pc, #112]	; (8002304 <HAL_InitTick+0xe8>)
 8002294:	2200      	movs	r2, #0
 8002296:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002298:	4b1a      	ldr	r3, [pc, #104]	; (8002304 <HAL_InitTick+0xe8>)
 800229a:	2200      	movs	r2, #0
 800229c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800229e:	4b19      	ldr	r3, [pc, #100]	; (8002304 <HAL_InitTick+0xe8>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80022a4:	4817      	ldr	r0, [pc, #92]	; (8002304 <HAL_InitTick+0xe8>)
 80022a6:	f003 fb33 	bl	8005910 <HAL_TIM_Base_Init>
 80022aa:	4603      	mov	r3, r0
 80022ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80022b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d11b      	bne.n	80022f0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80022b8:	4812      	ldr	r0, [pc, #72]	; (8002304 <HAL_InitTick+0xe8>)
 80022ba:	f003 fb8b 	bl	80059d4 <HAL_TIM_Base_Start_IT>
 80022be:	4603      	mov	r3, r0
 80022c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80022c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d111      	bne.n	80022f0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022cc:	2036      	movs	r0, #54	; 0x36
 80022ce:	f000 f9df 	bl	8002690 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b0f      	cmp	r3, #15
 80022d6:	d808      	bhi.n	80022ea <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80022d8:	2200      	movs	r2, #0
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	2036      	movs	r0, #54	; 0x36
 80022de:	f000 f9bb 	bl	8002658 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022e2:	4a0a      	ldr	r2, [pc, #40]	; (800230c <HAL_InitTick+0xf0>)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	e002      	b.n	80022f0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80022f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3738      	adds	r7, #56	; 0x38
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40023800 	.word	0x40023800
 8002300:	431bde83 	.word	0x431bde83
 8002304:	20000ed0 	.word	0x20000ed0
 8002308:	40001000 	.word	0x40001000
 800230c:	20000004 	.word	0x20000004

08002310 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002314:	e7fe      	b.n	8002314 <NMI_Handler+0x4>

08002316 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002316:	b480      	push	{r7}
 8002318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800231a:	e7fe      	b.n	800231a <HardFault_Handler+0x4>

0800231c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002320:	e7fe      	b.n	8002320 <MemManage_Handler+0x4>

08002322 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002322:	b480      	push	{r7}
 8002324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002326:	e7fe      	b.n	8002326 <BusFault_Handler+0x4>

08002328 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800232c:	e7fe      	b.n	800232c <UsageFault_Handler+0x4>

0800232e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800232e:	b480      	push	{r7}
 8002330:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002340:	4802      	ldr	r0, [pc, #8]	; (800234c <TIM6_DAC_IRQHandler+0x10>)
 8002342:	f003 fbbf 	bl	8005ac4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20000ed0 	.word	0x20000ed0

08002350 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002354:	4802      	ldr	r0, [pc, #8]	; (8002360 <OTG_FS_IRQHandler+0x10>)
 8002356:	f000 ffda 	bl	800330e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20006e0c 	.word	0x20006e0c

08002364 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800236c:	4a14      	ldr	r2, [pc, #80]	; (80023c0 <_sbrk+0x5c>)
 800236e:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <_sbrk+0x60>)
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002378:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <_sbrk+0x64>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d102      	bne.n	8002386 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002380:	4b11      	ldr	r3, [pc, #68]	; (80023c8 <_sbrk+0x64>)
 8002382:	4a12      	ldr	r2, [pc, #72]	; (80023cc <_sbrk+0x68>)
 8002384:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002386:	4b10      	ldr	r3, [pc, #64]	; (80023c8 <_sbrk+0x64>)
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4413      	add	r3, r2
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	429a      	cmp	r2, r3
 8002392:	d207      	bcs.n	80023a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002394:	f00b fc40 	bl	800dc18 <__errno>
 8002398:	4603      	mov	r3, r0
 800239a:	220c      	movs	r2, #12
 800239c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800239e:	f04f 33ff 	mov.w	r3, #4294967295
 80023a2:	e009      	b.n	80023b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023a4:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <_sbrk+0x64>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023aa:	4b07      	ldr	r3, [pc, #28]	; (80023c8 <_sbrk+0x64>)
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4413      	add	r3, r2
 80023b2:	4a05      	ldr	r2, [pc, #20]	; (80023c8 <_sbrk+0x64>)
 80023b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023b6:	68fb      	ldr	r3, [r7, #12]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20080000 	.word	0x20080000
 80023c4:	00000400 	.word	0x00000400
 80023c8:	20000f1c 	.word	0x20000f1c
 80023cc:	20007328 	.word	0x20007328

080023d0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <SystemInit+0x20>)
 80023d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023da:	4a05      	ldr	r2, [pc, #20]	; (80023f0 <SystemInit+0x20>)
 80023dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800242c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023f8:	480d      	ldr	r0, [pc, #52]	; (8002430 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023fa:	490e      	ldr	r1, [pc, #56]	; (8002434 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023fc:	4a0e      	ldr	r2, [pc, #56]	; (8002438 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002400:	e002      	b.n	8002408 <LoopCopyDataInit>

08002402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002406:	3304      	adds	r3, #4

08002408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800240a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800240c:	d3f9      	bcc.n	8002402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800240e:	4a0b      	ldr	r2, [pc, #44]	; (800243c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002410:	4c0b      	ldr	r4, [pc, #44]	; (8002440 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002414:	e001      	b.n	800241a <LoopFillZerobss>

08002416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002418:	3204      	adds	r2, #4

0800241a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800241a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800241c:	d3fb      	bcc.n	8002416 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800241e:	f7ff ffd7 	bl	80023d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002422:	f00b fbff 	bl	800dc24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002426:	f7ff fb81 	bl	8001b2c <main>
  bx  lr    
 800242a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800242c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002434:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8002438:	0800e1d8 	.word	0x0800e1d8
  ldr r2, =_sbss
 800243c:	200002b4 	.word	0x200002b4
  ldr r4, =_ebss
 8002440:	20007324 	.word	0x20007324

08002444 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002444:	e7fe      	b.n	8002444 <ADC_IRQHandler>

08002446 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800244a:	2003      	movs	r0, #3
 800244c:	f000 f8f9 	bl	8002642 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002450:	200f      	movs	r0, #15
 8002452:	f7ff fee3 	bl	800221c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002456:	f7ff fda1 	bl	8001f9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002464:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_IncTick+0x20>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	461a      	mov	r2, r3
 800246a:	4b06      	ldr	r3, [pc, #24]	; (8002484 <HAL_IncTick+0x24>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4413      	add	r3, r2
 8002470:	4a04      	ldr	r2, [pc, #16]	; (8002484 <HAL_IncTick+0x24>)
 8002472:	6013      	str	r3, [r2, #0]
}
 8002474:	bf00      	nop
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	20000008 	.word	0x20000008
 8002484:	20000f20 	.word	0x20000f20

08002488 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return uwTick;
 800248c:	4b03      	ldr	r3, [pc, #12]	; (800249c <HAL_GetTick+0x14>)
 800248e:	681b      	ldr	r3, [r3, #0]
}
 8002490:	4618      	mov	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	20000f20 	.word	0x20000f20

080024a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024a8:	f7ff ffee 	bl	8002488 <HAL_GetTick>
 80024ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b8:	d005      	beq.n	80024c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ba:	4b0a      	ldr	r3, [pc, #40]	; (80024e4 <HAL_Delay+0x44>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4413      	add	r3, r2
 80024c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024c6:	bf00      	nop
 80024c8:	f7ff ffde 	bl	8002488 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d8f7      	bhi.n	80024c8 <HAL_Delay+0x28>
  {
  }
}
 80024d8:	bf00      	nop
 80024da:	bf00      	nop
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000008 	.word	0x20000008

080024e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024f8:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <__NVIC_SetPriorityGrouping+0x40>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002504:	4013      	ands	r3, r2
 8002506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002510:	4b06      	ldr	r3, [pc, #24]	; (800252c <__NVIC_SetPriorityGrouping+0x44>)
 8002512:	4313      	orrs	r3, r2
 8002514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002516:	4a04      	ldr	r2, [pc, #16]	; (8002528 <__NVIC_SetPriorityGrouping+0x40>)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	60d3      	str	r3, [r2, #12]
}
 800251c:	bf00      	nop
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	e000ed00 	.word	0xe000ed00
 800252c:	05fa0000 	.word	0x05fa0000

08002530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002534:	4b04      	ldr	r3, [pc, #16]	; (8002548 <__NVIC_GetPriorityGrouping+0x18>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	0a1b      	lsrs	r3, r3, #8
 800253a:	f003 0307 	and.w	r3, r3, #7
}
 800253e:	4618      	mov	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255a:	2b00      	cmp	r3, #0
 800255c:	db0b      	blt.n	8002576 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800255e:	79fb      	ldrb	r3, [r7, #7]
 8002560:	f003 021f 	and.w	r2, r3, #31
 8002564:	4907      	ldr	r1, [pc, #28]	; (8002584 <__NVIC_EnableIRQ+0x38>)
 8002566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256a:	095b      	lsrs	r3, r3, #5
 800256c:	2001      	movs	r0, #1
 800256e:	fa00 f202 	lsl.w	r2, r0, r2
 8002572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	e000e100 	.word	0xe000e100

08002588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	6039      	str	r1, [r7, #0]
 8002592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002598:	2b00      	cmp	r3, #0
 800259a:	db0a      	blt.n	80025b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	490c      	ldr	r1, [pc, #48]	; (80025d4 <__NVIC_SetPriority+0x4c>)
 80025a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a6:	0112      	lsls	r2, r2, #4
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	440b      	add	r3, r1
 80025ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025b0:	e00a      	b.n	80025c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	4908      	ldr	r1, [pc, #32]	; (80025d8 <__NVIC_SetPriority+0x50>)
 80025b8:	79fb      	ldrb	r3, [r7, #7]
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	3b04      	subs	r3, #4
 80025c0:	0112      	lsls	r2, r2, #4
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	440b      	add	r3, r1
 80025c6:	761a      	strb	r2, [r3, #24]
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	e000e100 	.word	0xe000e100
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025dc:	b480      	push	{r7}
 80025de:	b089      	sub	sp, #36	; 0x24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	f1c3 0307 	rsb	r3, r3, #7
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	bf28      	it	cs
 80025fa:	2304      	movcs	r3, #4
 80025fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	3304      	adds	r3, #4
 8002602:	2b06      	cmp	r3, #6
 8002604:	d902      	bls.n	800260c <NVIC_EncodePriority+0x30>
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	3b03      	subs	r3, #3
 800260a:	e000      	b.n	800260e <NVIC_EncodePriority+0x32>
 800260c:	2300      	movs	r3, #0
 800260e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002610:	f04f 32ff 	mov.w	r2, #4294967295
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	43da      	mvns	r2, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	401a      	ands	r2, r3
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002624:	f04f 31ff 	mov.w	r1, #4294967295
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	fa01 f303 	lsl.w	r3, r1, r3
 800262e:	43d9      	mvns	r1, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002634:	4313      	orrs	r3, r2
         );
}
 8002636:	4618      	mov	r0, r3
 8002638:	3724      	adds	r7, #36	; 0x24
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b082      	sub	sp, #8
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7ff ff4c 	bl	80024e8 <__NVIC_SetPriorityGrouping>
}
 8002650:	bf00      	nop
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
 8002664:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002666:	2300      	movs	r3, #0
 8002668:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800266a:	f7ff ff61 	bl	8002530 <__NVIC_GetPriorityGrouping>
 800266e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	68b9      	ldr	r1, [r7, #8]
 8002674:	6978      	ldr	r0, [r7, #20]
 8002676:	f7ff ffb1 	bl	80025dc <NVIC_EncodePriority>
 800267a:	4602      	mov	r2, r0
 800267c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002680:	4611      	mov	r1, r2
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff ff80 	bl	8002588 <__NVIC_SetPriority>
}
 8002688:	bf00      	nop
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800269a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff ff54 	bl	800254c <__NVIC_EnableIRQ>
}
 80026a4:	bf00      	nop
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e06a      	b.n	8002794 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d106      	bne.n	80026d6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2223      	movs	r2, #35	; 0x23
 80026cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7ff fc8b 	bl	8001fec <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d6:	4b31      	ldr	r3, [pc, #196]	; (800279c <HAL_ETH_Init+0xf0>)
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	4a30      	ldr	r2, [pc, #192]	; (800279c <HAL_ETH_Init+0xf0>)
 80026dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e0:	6453      	str	r3, [r2, #68]	; 0x44
 80026e2:	4b2e      	ldr	r3, [pc, #184]	; (800279c <HAL_ETH_Init+0xf0>)
 80026e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ea:	60bb      	str	r3, [r7, #8]
 80026ec:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80026ee:	4b2c      	ldr	r3, [pc, #176]	; (80027a0 <HAL_ETH_Init+0xf4>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	4a2b      	ldr	r2, [pc, #172]	; (80027a0 <HAL_ETH_Init+0xf4>)
 80026f4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80026f8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80026fa:	4b29      	ldr	r3, [pc, #164]	; (80027a0 <HAL_ETH_Init+0xf4>)
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	4927      	ldr	r1, [pc, #156]	; (80027a0 <HAL_ETH_Init+0xf4>)
 8002704:	4313      	orrs	r3, r2
 8002706:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002708:	4b25      	ldr	r3, [pc, #148]	; (80027a0 <HAL_ETH_Init+0xf4>)
 800270a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6812      	ldr	r2, [r2, #0]
 800271a:	f043 0301 	orr.w	r3, r3, #1
 800271e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002722:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002724:	f7ff feb0 	bl	8002488 <HAL_GetTick>
 8002728:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800272a:	e011      	b.n	8002750 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800272c:	f7ff feac 	bl	8002488 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800273a:	d909      	bls.n	8002750 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2204      	movs	r2, #4
 8002740:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	22e0      	movs	r2, #224	; 0xe0
 8002748:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e021      	b.n	8002794 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1e4      	bne.n	800272c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f958 	bl	8002a18 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f9ff 	bl	8002b6c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 fa55 	bl	8002c1e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	461a      	mov	r2, r3
 800277a:	2100      	movs	r1, #0
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 f9bd 	bl	8002afc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2210      	movs	r2, #16
 800278e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40023800 	.word	0x40023800
 80027a0:	40013800 	.word	0x40013800

080027a4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	4b51      	ldr	r3, [pc, #324]	; (8002900 <ETH_SetMACConfig+0x15c>)
 80027ba:	4013      	ands	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	7c1b      	ldrb	r3, [r3, #16]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d102      	bne.n	80027cc <ETH_SetMACConfig+0x28>
 80027c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80027ca:	e000      	b.n	80027ce <ETH_SetMACConfig+0x2a>
 80027cc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	7c5b      	ldrb	r3, [r3, #17]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d102      	bne.n	80027dc <ETH_SetMACConfig+0x38>
 80027d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027da:	e000      	b.n	80027de <ETH_SetMACConfig+0x3a>
 80027dc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80027de:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80027e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	7fdb      	ldrb	r3, [r3, #31]
 80027ea:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80027ec:	431a      	orrs	r2, r3
                        macconf->Speed |
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80027f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	7f92      	ldrb	r2, [r2, #30]
 80027f8:	2a00      	cmp	r2, #0
 80027fa:	d102      	bne.n	8002802 <ETH_SetMACConfig+0x5e>
 80027fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002800:	e000      	b.n	8002804 <ETH_SetMACConfig+0x60>
 8002802:	2200      	movs	r2, #0
                        macconf->Speed |
 8002804:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	7f1b      	ldrb	r3, [r3, #28]
 800280a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800280c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002812:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	791b      	ldrb	r3, [r3, #4]
 8002818:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800281a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002822:	2a00      	cmp	r2, #0
 8002824:	d102      	bne.n	800282c <ETH_SetMACConfig+0x88>
 8002826:	f44f 7200 	mov.w	r2, #512	; 0x200
 800282a:	e000      	b.n	800282e <ETH_SetMACConfig+0x8a>
 800282c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800282e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	7bdb      	ldrb	r3, [r3, #15]
 8002834:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002836:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800283c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002844:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002846:	4313      	orrs	r3, r2
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	4313      	orrs	r3, r2
 800284c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800285e:	2001      	movs	r0, #1
 8002860:	f7ff fe1e 	bl	80024a0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	f64f 7341 	movw	r3, #65345	; 0xff41
 800287a:	4013      	ands	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002882:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800288a:	2a00      	cmp	r2, #0
 800288c:	d101      	bne.n	8002892 <ETH_SetMACConfig+0xee>
 800288e:	2280      	movs	r2, #128	; 0x80
 8002890:	e000      	b.n	8002894 <ETH_SetMACConfig+0xf0>
 8002892:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002894:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800289a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80028a2:	2a01      	cmp	r2, #1
 80028a4:	d101      	bne.n	80028aa <ETH_SetMACConfig+0x106>
 80028a6:	2208      	movs	r2, #8
 80028a8:	e000      	b.n	80028ac <ETH_SetMACConfig+0x108>
 80028aa:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80028ac:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80028b4:	2a01      	cmp	r2, #1
 80028b6:	d101      	bne.n	80028bc <ETH_SetMACConfig+0x118>
 80028b8:	2204      	movs	r2, #4
 80028ba:	e000      	b.n	80028be <ETH_SetMACConfig+0x11a>
 80028bc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80028be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80028c6:	2a01      	cmp	r2, #1
 80028c8:	d101      	bne.n	80028ce <ETH_SetMACConfig+0x12a>
 80028ca:	2202      	movs	r2, #2
 80028cc:	e000      	b.n	80028d0 <ETH_SetMACConfig+0x12c>
 80028ce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80028d0:	4313      	orrs	r3, r2
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028e8:	2001      	movs	r0, #1
 80028ea:	f7ff fdd9 	bl	80024a0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	619a      	str	r2, [r3, #24]
}
 80028f6:	bf00      	nop
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	ff20810f 	.word	0xff20810f

08002904 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	4b3d      	ldr	r3, [pc, #244]	; (8002a14 <ETH_SetDMAConfig+0x110>)
 800291e:	4013      	ands	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	7b1b      	ldrb	r3, [r3, #12]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d102      	bne.n	8002930 <ETH_SetDMAConfig+0x2c>
 800292a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800292e:	e000      	b.n	8002932 <ETH_SetDMAConfig+0x2e>
 8002930:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	7b5b      	ldrb	r3, [r3, #13]
 8002936:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002938:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	7f52      	ldrb	r2, [r2, #29]
 800293e:	2a00      	cmp	r2, #0
 8002940:	d102      	bne.n	8002948 <ETH_SetDMAConfig+0x44>
 8002942:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002946:	e000      	b.n	800294a <ETH_SetDMAConfig+0x46>
 8002948:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800294a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	7b9b      	ldrb	r3, [r3, #14]
 8002950:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002952:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002958:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	7f1b      	ldrb	r3, [r3, #28]
 800295e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002960:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	7f9b      	ldrb	r3, [r3, #30]
 8002966:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002968:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800296e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002976:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002978:	4313      	orrs	r3, r2
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	4313      	orrs	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002988:	461a      	mov	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800299a:	2001      	movs	r0, #1
 800299c:	f7ff fd80 	bl	80024a0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029a8:	461a      	mov	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	791b      	ldrb	r3, [r3, #4]
 80029b2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80029b8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80029be:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80029c4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029cc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80029ce:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80029d6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80029dc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6812      	ldr	r2, [r2, #0]
 80029e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80029ea:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029f8:	2001      	movs	r0, #1
 80029fa:	f7ff fd51 	bl	80024a0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a06:	461a      	mov	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6013      	str	r3, [r2, #0]
}
 8002a0c:	bf00      	nop
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	f8de3f23 	.word	0xf8de3f23

08002a18 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b0a6      	sub	sp, #152	; 0x98
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002a20:	2301      	movs	r3, #1
 8002a22:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002a26:	2301      	movs	r3, #1
 8002a28:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002a30:	2300      	movs	r3, #0
 8002a32:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002a36:	2301      	movs	r3, #1
 8002a38:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002a42:	2301      	movs	r3, #1
 8002a44:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002a54:	2300      	movs	r3, #0
 8002a56:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002a62:	2300      	movs	r3, #0
 8002a64:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002a74:	2300      	movs	r3, #0
 8002a76:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002a7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a7e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002a80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a84:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002a86:	2300      	movs	r3, #0
 8002a88:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002a8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a90:	4619      	mov	r1, r3
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7ff fe86 	bl	80027a4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002aba:	2300      	movs	r3, #0
 8002abc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002ac8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002acc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002ace:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ad2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002ad4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ad8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002ada:	2301      	movs	r3, #1
 8002adc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002ae8:	f107 0308 	add.w	r3, r7, #8
 8002aec:	4619      	mov	r1, r3
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7ff ff08 	bl	8002904 <ETH_SetDMAConfig>
}
 8002af4:	bf00      	nop
 8002af6:	3798      	adds	r7, #152	; 0x98
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b087      	sub	sp, #28
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3305      	adds	r3, #5
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	021b      	lsls	r3, r3, #8
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	3204      	adds	r2, #4
 8002b14:	7812      	ldrb	r2, [r2, #0]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <ETH_MACAddressConfig+0x68>)
 8002b1e:	4413      	add	r3, r2
 8002b20:	461a      	mov	r2, r3
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3303      	adds	r3, #3
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	061a      	lsls	r2, r3, #24
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3302      	adds	r3, #2
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	041b      	lsls	r3, r3, #16
 8002b36:	431a      	orrs	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	021b      	lsls	r3, r3, #8
 8002b40:	4313      	orrs	r3, r2
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	7812      	ldrb	r2, [r2, #0]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <ETH_MACAddressConfig+0x6c>)
 8002b4e:	4413      	add	r3, r2
 8002b50:	461a      	mov	r2, r3
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	6013      	str	r3, [r2, #0]
}
 8002b56:	bf00      	nop
 8002b58:	371c      	adds	r7, #28
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	40028040 	.word	0x40028040
 8002b68:	40028044 	.word	0x40028044

08002b6c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b74:	2300      	movs	r3, #0
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	e03e      	b.n	8002bf8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68d9      	ldr	r1, [r3, #12]
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	4613      	mov	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4413      	add	r3, r2
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	440b      	add	r3, r1
 8002b8a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	2200      	movs	r2, #0
 8002b96:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002ba4:	68b9      	ldr	r1, [r7, #8]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	3206      	adds	r2, #6
 8002bac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d80c      	bhi.n	8002bdc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68d9      	ldr	r1, [r3, #12]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	1c5a      	adds	r2, r3, #1
 8002bca:	4613      	mov	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	440b      	add	r3, r1
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	60da      	str	r2, [r3, #12]
 8002bda:	e004      	b.n	8002be6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	461a      	mov	r2, r3
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2b03      	cmp	r3, #3
 8002bfc:	d9bd      	bls.n	8002b7a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68da      	ldr	r2, [r3, #12]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c10:	611a      	str	r2, [r3, #16]
}
 8002c12:	bf00      	nop
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b085      	sub	sp, #20
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	e046      	b.n	8002cba <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6919      	ldr	r1, [r3, #16]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	4613      	mov	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	440b      	add	r3, r1
 8002c3c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2200      	movs	r2, #0
 8002c48:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	2200      	movs	r2, #0
 8002c54:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002c68:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002c70:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002c7e:	68b9      	ldr	r1, [r7, #8]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	3212      	adds	r2, #18
 8002c86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d80c      	bhi.n	8002caa <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6919      	ldr	r1, [r3, #16]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	1c5a      	adds	r2, r3, #1
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	440b      	add	r3, r1
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	60da      	str	r2, [r3, #12]
 8002ca8:	e004      	b.n	8002cb4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2b03      	cmp	r3, #3
 8002cbe:	d9b5      	bls.n	8002c2c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691a      	ldr	r2, [r3, #16]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cea:	60da      	str	r2, [r3, #12]
}
 8002cec:	bf00      	nop
 8002cee:	3714      	adds	r7, #20
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b089      	sub	sp, #36	; 0x24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002d02:	2300      	movs	r3, #0
 8002d04:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002d06:	2300      	movs	r3, #0
 8002d08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d12:	2300      	movs	r3, #0
 8002d14:	61fb      	str	r3, [r7, #28]
 8002d16:	e175      	b.n	8003004 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d18:	2201      	movs	r2, #1
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	f040 8164 	bne.w	8002ffe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f003 0303 	and.w	r3, r3, #3
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d005      	beq.n	8002d4e <HAL_GPIO_Init+0x56>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d130      	bne.n	8002db0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	2203      	movs	r2, #3
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4013      	ands	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d84:	2201      	movs	r2, #1
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4013      	ands	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	091b      	lsrs	r3, r3, #4
 8002d9a:	f003 0201 	and.w	r2, r3, #1
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f003 0303 	and.w	r3, r3, #3
 8002db8:	2b03      	cmp	r3, #3
 8002dba:	d017      	beq.n	8002dec <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	2203      	movs	r2, #3
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f003 0303 	and.w	r3, r3, #3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d123      	bne.n	8002e40 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	08da      	lsrs	r2, r3, #3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3208      	adds	r2, #8
 8002e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	220f      	movs	r2, #15
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	43db      	mvns	r3, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	691a      	ldr	r2, [r3, #16]
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	08da      	lsrs	r2, r3, #3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	3208      	adds	r2, #8
 8002e3a:	69b9      	ldr	r1, [r7, #24]
 8002e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	2203      	movs	r2, #3
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	43db      	mvns	r3, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4013      	ands	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 0203 	and.w	r2, r3, #3
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 80be 	beq.w	8002ffe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e82:	4b66      	ldr	r3, [pc, #408]	; (800301c <HAL_GPIO_Init+0x324>)
 8002e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e86:	4a65      	ldr	r2, [pc, #404]	; (800301c <HAL_GPIO_Init+0x324>)
 8002e88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e8e:	4b63      	ldr	r3, [pc, #396]	; (800301c <HAL_GPIO_Init+0x324>)
 8002e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002e9a:	4a61      	ldr	r2, [pc, #388]	; (8003020 <HAL_GPIO_Init+0x328>)
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	089b      	lsrs	r3, r3, #2
 8002ea0:	3302      	adds	r3, #2
 8002ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	f003 0303 	and.w	r3, r3, #3
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	220f      	movs	r2, #15
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a58      	ldr	r2, [pc, #352]	; (8003024 <HAL_GPIO_Init+0x32c>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d037      	beq.n	8002f36 <HAL_GPIO_Init+0x23e>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a57      	ldr	r2, [pc, #348]	; (8003028 <HAL_GPIO_Init+0x330>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d031      	beq.n	8002f32 <HAL_GPIO_Init+0x23a>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a56      	ldr	r2, [pc, #344]	; (800302c <HAL_GPIO_Init+0x334>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d02b      	beq.n	8002f2e <HAL_GPIO_Init+0x236>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a55      	ldr	r2, [pc, #340]	; (8003030 <HAL_GPIO_Init+0x338>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d025      	beq.n	8002f2a <HAL_GPIO_Init+0x232>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a54      	ldr	r2, [pc, #336]	; (8003034 <HAL_GPIO_Init+0x33c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d01f      	beq.n	8002f26 <HAL_GPIO_Init+0x22e>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a53      	ldr	r2, [pc, #332]	; (8003038 <HAL_GPIO_Init+0x340>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d019      	beq.n	8002f22 <HAL_GPIO_Init+0x22a>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a52      	ldr	r2, [pc, #328]	; (800303c <HAL_GPIO_Init+0x344>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d013      	beq.n	8002f1e <HAL_GPIO_Init+0x226>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a51      	ldr	r2, [pc, #324]	; (8003040 <HAL_GPIO_Init+0x348>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d00d      	beq.n	8002f1a <HAL_GPIO_Init+0x222>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a50      	ldr	r2, [pc, #320]	; (8003044 <HAL_GPIO_Init+0x34c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d007      	beq.n	8002f16 <HAL_GPIO_Init+0x21e>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a4f      	ldr	r2, [pc, #316]	; (8003048 <HAL_GPIO_Init+0x350>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d101      	bne.n	8002f12 <HAL_GPIO_Init+0x21a>
 8002f0e:	2309      	movs	r3, #9
 8002f10:	e012      	b.n	8002f38 <HAL_GPIO_Init+0x240>
 8002f12:	230a      	movs	r3, #10
 8002f14:	e010      	b.n	8002f38 <HAL_GPIO_Init+0x240>
 8002f16:	2308      	movs	r3, #8
 8002f18:	e00e      	b.n	8002f38 <HAL_GPIO_Init+0x240>
 8002f1a:	2307      	movs	r3, #7
 8002f1c:	e00c      	b.n	8002f38 <HAL_GPIO_Init+0x240>
 8002f1e:	2306      	movs	r3, #6
 8002f20:	e00a      	b.n	8002f38 <HAL_GPIO_Init+0x240>
 8002f22:	2305      	movs	r3, #5
 8002f24:	e008      	b.n	8002f38 <HAL_GPIO_Init+0x240>
 8002f26:	2304      	movs	r3, #4
 8002f28:	e006      	b.n	8002f38 <HAL_GPIO_Init+0x240>
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e004      	b.n	8002f38 <HAL_GPIO_Init+0x240>
 8002f2e:	2302      	movs	r3, #2
 8002f30:	e002      	b.n	8002f38 <HAL_GPIO_Init+0x240>
 8002f32:	2301      	movs	r3, #1
 8002f34:	e000      	b.n	8002f38 <HAL_GPIO_Init+0x240>
 8002f36:	2300      	movs	r3, #0
 8002f38:	69fa      	ldr	r2, [r7, #28]
 8002f3a:	f002 0203 	and.w	r2, r2, #3
 8002f3e:	0092      	lsls	r2, r2, #2
 8002f40:	4093      	lsls	r3, r2
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f48:	4935      	ldr	r1, [pc, #212]	; (8003020 <HAL_GPIO_Init+0x328>)
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	089b      	lsrs	r3, r3, #2
 8002f4e:	3302      	adds	r3, #2
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f56:	4b3d      	ldr	r3, [pc, #244]	; (800304c <HAL_GPIO_Init+0x354>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4013      	ands	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f7a:	4a34      	ldr	r2, [pc, #208]	; (800304c <HAL_GPIO_Init+0x354>)
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f80:	4b32      	ldr	r3, [pc, #200]	; (800304c <HAL_GPIO_Init+0x354>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fa4:	4a29      	ldr	r2, [pc, #164]	; (800304c <HAL_GPIO_Init+0x354>)
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002faa:	4b28      	ldr	r3, [pc, #160]	; (800304c <HAL_GPIO_Init+0x354>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fce:	4a1f      	ldr	r2, [pc, #124]	; (800304c <HAL_GPIO_Init+0x354>)
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fd4:	4b1d      	ldr	r3, [pc, #116]	; (800304c <HAL_GPIO_Init+0x354>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ff8:	4a14      	ldr	r2, [pc, #80]	; (800304c <HAL_GPIO_Init+0x354>)
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	3301      	adds	r3, #1
 8003002:	61fb      	str	r3, [r7, #28]
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	2b0f      	cmp	r3, #15
 8003008:	f67f ae86 	bls.w	8002d18 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800300c:	bf00      	nop
 800300e:	bf00      	nop
 8003010:	3724      	adds	r7, #36	; 0x24
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	40023800 	.word	0x40023800
 8003020:	40013800 	.word	0x40013800
 8003024:	40020000 	.word	0x40020000
 8003028:	40020400 	.word	0x40020400
 800302c:	40020800 	.word	0x40020800
 8003030:	40020c00 	.word	0x40020c00
 8003034:	40021000 	.word	0x40021000
 8003038:	40021400 	.word	0x40021400
 800303c:	40021800 	.word	0x40021800
 8003040:	40021c00 	.word	0x40021c00
 8003044:	40022000 	.word	0x40022000
 8003048:	40022400 	.word	0x40022400
 800304c:	40013c00 	.word	0x40013c00

08003050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	460b      	mov	r3, r1
 800305a:	807b      	strh	r3, [r7, #2]
 800305c:	4613      	mov	r3, r2
 800305e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003060:	787b      	ldrb	r3, [r7, #1]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003066:	887a      	ldrh	r2, [r7, #2]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800306c:	e003      	b.n	8003076 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800306e:	887b      	ldrh	r3, [r7, #2]
 8003070:	041a      	lsls	r2, r3, #16
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	619a      	str	r2, [r3, #24]
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003082:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003084:	b08f      	sub	sp, #60	; 0x3c
 8003086:	af0a      	add	r7, sp, #40	; 0x28
 8003088:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e116      	b.n	80032c2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d106      	bne.n	80030b4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f00a fa34 	bl	800d51c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2203      	movs	r2, #3
 80030b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d102      	bne.n	80030ce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f003 fc6f 	bl	80069b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	603b      	str	r3, [r7, #0]
 80030de:	687e      	ldr	r6, [r7, #4]
 80030e0:	466d      	mov	r5, sp
 80030e2:	f106 0410 	add.w	r4, r6, #16
 80030e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80030f6:	1d33      	adds	r3, r6, #4
 80030f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030fa:	6838      	ldr	r0, [r7, #0]
 80030fc:	f003 fb50 	bl	80067a0 <USB_CoreInit>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d005      	beq.n	8003112 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2202      	movs	r2, #2
 800310a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e0d7      	b.n	80032c2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2100      	movs	r1, #0
 8003118:	4618      	mov	r0, r3
 800311a:	f003 fc5d 	bl	80069d8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800311e:	2300      	movs	r3, #0
 8003120:	73fb      	strb	r3, [r7, #15]
 8003122:	e04a      	b.n	80031ba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003124:	7bfa      	ldrb	r2, [r7, #15]
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	4413      	add	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	333d      	adds	r3, #61	; 0x3d
 8003134:	2201      	movs	r2, #1
 8003136:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003138:	7bfa      	ldrb	r2, [r7, #15]
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	4413      	add	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	333c      	adds	r3, #60	; 0x3c
 8003148:	7bfa      	ldrb	r2, [r7, #15]
 800314a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800314c:	7bfa      	ldrb	r2, [r7, #15]
 800314e:	7bfb      	ldrb	r3, [r7, #15]
 8003150:	b298      	uxth	r0, r3
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	4413      	add	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	3344      	adds	r3, #68	; 0x44
 8003160:	4602      	mov	r2, r0
 8003162:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003164:	7bfa      	ldrb	r2, [r7, #15]
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	4413      	add	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	3340      	adds	r3, #64	; 0x40
 8003174:	2200      	movs	r2, #0
 8003176:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003178:	7bfa      	ldrb	r2, [r7, #15]
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	4413      	add	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	3348      	adds	r3, #72	; 0x48
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800318c:	7bfa      	ldrb	r2, [r7, #15]
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	4413      	add	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	334c      	adds	r3, #76	; 0x4c
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031a0:	7bfa      	ldrb	r2, [r7, #15]
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	4413      	add	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	3354      	adds	r3, #84	; 0x54
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
 80031b6:	3301      	adds	r3, #1
 80031b8:	73fb      	strb	r3, [r7, #15]
 80031ba:	7bfa      	ldrb	r2, [r7, #15]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d3af      	bcc.n	8003124 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031c4:	2300      	movs	r3, #0
 80031c6:	73fb      	strb	r3, [r7, #15]
 80031c8:	e044      	b.n	8003254 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031ca:	7bfa      	ldrb	r2, [r7, #15]
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	4613      	mov	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	4413      	add	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	440b      	add	r3, r1
 80031d8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80031dc:	2200      	movs	r2, #0
 80031de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031e0:	7bfa      	ldrb	r2, [r7, #15]
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	4413      	add	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80031f2:	7bfa      	ldrb	r2, [r7, #15]
 80031f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031f6:	7bfa      	ldrb	r2, [r7, #15]
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	4613      	mov	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	4413      	add	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	440b      	add	r3, r1
 8003204:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003208:	2200      	movs	r2, #0
 800320a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800320c:	7bfa      	ldrb	r2, [r7, #15]
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	4413      	add	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800321e:	2200      	movs	r2, #0
 8003220:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003222:	7bfa      	ldrb	r2, [r7, #15]
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	4613      	mov	r3, r2
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	4413      	add	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	440b      	add	r3, r1
 8003230:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003238:	7bfa      	ldrb	r2, [r7, #15]
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	4613      	mov	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	4413      	add	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800324a:	2200      	movs	r2, #0
 800324c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800324e:	7bfb      	ldrb	r3, [r7, #15]
 8003250:	3301      	adds	r3, #1
 8003252:	73fb      	strb	r3, [r7, #15]
 8003254:	7bfa      	ldrb	r2, [r7, #15]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	429a      	cmp	r2, r3
 800325c:	d3b5      	bcc.n	80031ca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	603b      	str	r3, [r7, #0]
 8003264:	687e      	ldr	r6, [r7, #4]
 8003266:	466d      	mov	r5, sp
 8003268:	f106 0410 	add.w	r4, r6, #16
 800326c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800326e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003270:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003272:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003274:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003278:	e885 0003 	stmia.w	r5, {r0, r1}
 800327c:	1d33      	adds	r3, r6, #4
 800327e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003280:	6838      	ldr	r0, [r7, #0]
 8003282:	f003 fbf5 	bl	8006a70 <USB_DevInit>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d005      	beq.n	8003298 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e014      	b.n	80032c2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d102      	bne.n	80032b6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f001 f97b 	bl	80045ac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f004 fd43 	bl	8007d46 <USB_DevDisconnect>

  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3714      	adds	r7, #20
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032ca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b082      	sub	sp, #8
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d101      	bne.n	80032e0 <HAL_PCD_Start+0x16>
 80032dc:	2302      	movs	r3, #2
 80032de:	e012      	b.n	8003306 <HAL_PCD_Start+0x3c>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f003 fb51 	bl	8006994 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f004 fd04 	bl	8007d04 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800330e:	b590      	push	{r4, r7, lr}
 8003310:	b08d      	sub	sp, #52	; 0x34
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f004 fdc2 	bl	8007eae <USB_GetMode>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	f040 84b7 	bne.w	8003ca0 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f004 fd26 	bl	8007d88 <USB_ReadInterrupts>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 84ad 	beq.w	8003c9e <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	0a1b      	lsrs	r3, r3, #8
 800334e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f004 fd13 	bl	8007d88 <USB_ReadInterrupts>
 8003362:	4603      	mov	r3, r0
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b02      	cmp	r3, #2
 800336a:	d107      	bne.n	800337c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	695a      	ldr	r2, [r3, #20]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f002 0202 	and.w	r2, r2, #2
 800337a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f004 fd01 	bl	8007d88 <USB_ReadInterrupts>
 8003386:	4603      	mov	r3, r0
 8003388:	f003 0310 	and.w	r3, r3, #16
 800338c:	2b10      	cmp	r3, #16
 800338e:	d161      	bne.n	8003454 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	699a      	ldr	r2, [r3, #24]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0210 	bic.w	r2, r2, #16
 800339e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80033a0:	6a3b      	ldr	r3, [r7, #32]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	f003 020f 	and.w	r2, r3, #15
 80033ac:	4613      	mov	r3, r2
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	4413      	add	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	4413      	add	r3, r2
 80033bc:	3304      	adds	r3, #4
 80033be:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	0c5b      	lsrs	r3, r3, #17
 80033c4:	f003 030f 	and.w	r3, r3, #15
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d124      	bne.n	8003416 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80033d2:	4013      	ands	r3, r2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d035      	beq.n	8003444 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	091b      	lsrs	r3, r3, #4
 80033e0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	461a      	mov	r2, r3
 80033ea:	6a38      	ldr	r0, [r7, #32]
 80033ec:	f004 fb38 	bl	8007a60 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	691a      	ldr	r2, [r3, #16]
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	091b      	lsrs	r3, r3, #4
 80033f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033fc:	441a      	add	r2, r3
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	6a1a      	ldr	r2, [r3, #32]
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	091b      	lsrs	r3, r3, #4
 800340a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800340e:	441a      	add	r2, r3
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	621a      	str	r2, [r3, #32]
 8003414:	e016      	b.n	8003444 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	0c5b      	lsrs	r3, r3, #17
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	2b06      	cmp	r3, #6
 8003420:	d110      	bne.n	8003444 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003428:	2208      	movs	r2, #8
 800342a:	4619      	mov	r1, r3
 800342c:	6a38      	ldr	r0, [r7, #32]
 800342e:	f004 fb17 	bl	8007a60 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	6a1a      	ldr	r2, [r3, #32]
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	091b      	lsrs	r3, r3, #4
 800343a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800343e:	441a      	add	r2, r3
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	699a      	ldr	r2, [r3, #24]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0210 	orr.w	r2, r2, #16
 8003452:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f004 fc95 	bl	8007d88 <USB_ReadInterrupts>
 800345e:	4603      	mov	r3, r0
 8003460:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003464:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003468:	f040 80a7 	bne.w	80035ba <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800346c:	2300      	movs	r3, #0
 800346e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f004 fc9a 	bl	8007dae <USB_ReadDevAllOutEpInterrupt>
 800347a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800347c:	e099      	b.n	80035b2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800347e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 808e 	beq.w	80035a6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003490:	b2d2      	uxtb	r2, r2
 8003492:	4611      	mov	r1, r2
 8003494:	4618      	mov	r0, r3
 8003496:	f004 fcbe 	bl	8007e16 <USB_ReadDevOutEPInterrupt>
 800349a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00c      	beq.n	80034c0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80034a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a8:	015a      	lsls	r2, r3, #5
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	4413      	add	r3, r2
 80034ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034b2:	461a      	mov	r2, r3
 80034b4:	2301      	movs	r3, #1
 80034b6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80034b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 fef0 	bl	80042a0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00c      	beq.n	80034e4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	015a      	lsls	r2, r3, #5
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	4413      	add	r3, r2
 80034d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d6:	461a      	mov	r2, r3
 80034d8:	2308      	movs	r3, #8
 80034da:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80034dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 ffc6 	bl	8004470 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	f003 0310 	and.w	r3, r3, #16
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d008      	beq.n	8003500 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f0:	015a      	lsls	r2, r3, #5
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	4413      	add	r3, r2
 80034f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034fa:	461a      	mov	r2, r3
 80034fc:	2310      	movs	r3, #16
 80034fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d030      	beq.n	800356c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003512:	2b80      	cmp	r3, #128	; 0x80
 8003514:	d109      	bne.n	800352a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	69fa      	ldr	r2, [r7, #28]
 8003520:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003524:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003528:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800352a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800352c:	4613      	mov	r3, r2
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	4413      	add	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	4413      	add	r3, r2
 800353c:	3304      	adds	r3, #4
 800353e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	78db      	ldrb	r3, [r3, #3]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d108      	bne.n	800355a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	2200      	movs	r2, #0
 800354c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	b2db      	uxtb	r3, r3
 8003552:	4619      	mov	r1, r3
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f00a f915 	bl	800d784 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	015a      	lsls	r2, r3, #5
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	4413      	add	r3, r2
 8003562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003566:	461a      	mov	r2, r3
 8003568:	2302      	movs	r3, #2
 800356a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f003 0320 	and.w	r3, r3, #32
 8003572:	2b00      	cmp	r3, #0
 8003574:	d008      	beq.n	8003588 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	015a      	lsls	r2, r3, #5
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	4413      	add	r3, r2
 800357e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003582:	461a      	mov	r2, r3
 8003584:	2320      	movs	r3, #32
 8003586:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d009      	beq.n	80035a6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	015a      	lsls	r2, r3, #5
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	4413      	add	r3, r2
 800359a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800359e:	461a      	mov	r2, r3
 80035a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035a4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	3301      	adds	r3, #1
 80035aa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80035ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ae:	085b      	lsrs	r3, r3, #1
 80035b0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80035b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f47f af62 	bne.w	800347e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4618      	mov	r0, r3
 80035c0:	f004 fbe2 	bl	8007d88 <USB_ReadInterrupts>
 80035c4:	4603      	mov	r3, r0
 80035c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035ce:	f040 80db 	bne.w	8003788 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f004 fc03 	bl	8007de2 <USB_ReadDevAllInEpInterrupt>
 80035dc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80035de:	2300      	movs	r3, #0
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80035e2:	e0cd      	b.n	8003780 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80035e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 80c2 	beq.w	8003774 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f6:	b2d2      	uxtb	r2, r2
 80035f8:	4611      	mov	r1, r2
 80035fa:	4618      	mov	r0, r3
 80035fc:	f004 fc29 	bl	8007e52 <USB_ReadDevInEPInterrupt>
 8003600:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b00      	cmp	r3, #0
 800360a:	d057      	beq.n	80036bc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	f003 030f 	and.w	r3, r3, #15
 8003612:	2201      	movs	r2, #1
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003620:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	43db      	mvns	r3, r3
 8003626:	69f9      	ldr	r1, [r7, #28]
 8003628:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800362c:	4013      	ands	r3, r2
 800362e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003632:	015a      	lsls	r2, r3, #5
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	4413      	add	r3, r2
 8003638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800363c:	461a      	mov	r2, r3
 800363e:	2301      	movs	r3, #1
 8003640:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d132      	bne.n	80036b0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800364e:	4613      	mov	r3, r2
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	4413      	add	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	440b      	add	r3, r1
 8003658:	334c      	adds	r3, #76	; 0x4c
 800365a:	6819      	ldr	r1, [r3, #0]
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003660:	4613      	mov	r3, r2
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	4413      	add	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4403      	add	r3, r0
 800366a:	3348      	adds	r3, #72	; 0x48
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4419      	add	r1, r3
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003674:	4613      	mov	r3, r2
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	4413      	add	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4403      	add	r3, r0
 800367e:	334c      	adds	r3, #76	; 0x4c
 8003680:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	2b00      	cmp	r3, #0
 8003686:	d113      	bne.n	80036b0 <HAL_PCD_IRQHandler+0x3a2>
 8003688:	6879      	ldr	r1, [r7, #4]
 800368a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800368c:	4613      	mov	r3, r2
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	4413      	add	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	440b      	add	r3, r1
 8003696:	3354      	adds	r3, #84	; 0x54
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d108      	bne.n	80036b0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6818      	ldr	r0, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80036a8:	461a      	mov	r2, r3
 80036aa:	2101      	movs	r1, #1
 80036ac:	f004 fc32 	bl	8007f14 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	4619      	mov	r1, r3
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f009 ffdf 	bl	800d67a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	f003 0308 	and.w	r3, r3, #8
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d008      	beq.n	80036d8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	015a      	lsls	r2, r3, #5
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	4413      	add	r3, r2
 80036ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036d2:	461a      	mov	r2, r3
 80036d4:	2308      	movs	r3, #8
 80036d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	f003 0310 	and.w	r3, r3, #16
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d008      	beq.n	80036f4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	015a      	lsls	r2, r3, #5
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	4413      	add	r3, r2
 80036ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036ee:	461a      	mov	r2, r3
 80036f0:	2310      	movs	r3, #16
 80036f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d008      	beq.n	8003710 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80036fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003700:	015a      	lsls	r2, r3, #5
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	4413      	add	r3, r2
 8003706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800370a:	461a      	mov	r2, r3
 800370c:	2340      	movs	r3, #64	; 0x40
 800370e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d023      	beq.n	8003762 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800371a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800371c:	6a38      	ldr	r0, [r7, #32]
 800371e:	f003 fb05 	bl	8006d2c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003724:	4613      	mov	r3, r2
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	4413      	add	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	3338      	adds	r3, #56	; 0x38
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	4413      	add	r3, r2
 8003732:	3304      	adds	r3, #4
 8003734:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	78db      	ldrb	r3, [r3, #3]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d108      	bne.n	8003750 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	2200      	movs	r2, #0
 8003742:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003746:	b2db      	uxtb	r3, r3
 8003748:	4619      	mov	r1, r3
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f00a f82c 	bl	800d7a8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	015a      	lsls	r2, r3, #5
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	4413      	add	r3, r2
 8003758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800375c:	461a      	mov	r2, r3
 800375e:	2302      	movs	r3, #2
 8003760:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800376c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 fd08 	bl	8004184 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003776:	3301      	adds	r3, #1
 8003778:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800377a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377c:	085b      	lsrs	r3, r3, #1
 800377e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003782:	2b00      	cmp	r3, #0
 8003784:	f47f af2e 	bne.w	80035e4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4618      	mov	r0, r3
 800378e:	f004 fafb 	bl	8007d88 <USB_ReadInterrupts>
 8003792:	4603      	mov	r3, r0
 8003794:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003798:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800379c:	d122      	bne.n	80037e4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	69fa      	ldr	r2, [r7, #28]
 80037a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037ac:	f023 0301 	bic.w	r3, r3, #1
 80037b0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d108      	bne.n	80037ce <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80037c4:	2100      	movs	r1, #0
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f00a f9a6 	bl	800db18 <HAL_PCDEx_LPM_Callback>
 80037cc:	e002      	b.n	80037d4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f009 ffca 	bl	800d768 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695a      	ldr	r2, [r3, #20]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80037e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f004 facd 	bl	8007d88 <USB_ReadInterrupts>
 80037ee:	4603      	mov	r3, r0
 80037f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037f8:	d112      	bne.n	8003820 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b01      	cmp	r3, #1
 8003808:	d102      	bne.n	8003810 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f009 ff86 	bl	800d71c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	695a      	ldr	r2, [r3, #20]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800381e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4618      	mov	r0, r3
 8003826:	f004 faaf 	bl	8007d88 <USB_ReadInterrupts>
 800382a:	4603      	mov	r3, r0
 800382c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003830:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003834:	d121      	bne.n	800387a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	695a      	ldr	r2, [r3, #20]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003844:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800384c:	2b00      	cmp	r3, #0
 800384e:	d111      	bne.n	8003874 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385e:	089b      	lsrs	r3, r3, #2
 8003860:	f003 020f 	and.w	r2, r3, #15
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800386a:	2101      	movs	r1, #1
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f00a f953 	bl	800db18 <HAL_PCDEx_LPM_Callback>
 8003872:	e002      	b.n	800387a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f009 ff51 	bl	800d71c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4618      	mov	r0, r3
 8003880:	f004 fa82 	bl	8007d88 <USB_ReadInterrupts>
 8003884:	4603      	mov	r3, r0
 8003886:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800388a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800388e:	f040 80b7 	bne.w	8003a00 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	69fa      	ldr	r2, [r7, #28]
 800389c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038a0:	f023 0301 	bic.w	r3, r3, #1
 80038a4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2110      	movs	r1, #16
 80038ac:	4618      	mov	r0, r3
 80038ae:	f003 fa3d 	bl	8006d2c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038b2:	2300      	movs	r3, #0
 80038b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038b6:	e046      	b.n	8003946 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80038b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038c4:	461a      	mov	r2, r3
 80038c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038ca:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80038cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ce:	015a      	lsls	r2, r3, #5
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	4413      	add	r3, r2
 80038d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038dc:	0151      	lsls	r1, r2, #5
 80038de:	69fa      	ldr	r2, [r7, #28]
 80038e0:	440a      	add	r2, r1
 80038e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80038ea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80038ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ee:	015a      	lsls	r2, r3, #5
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	4413      	add	r3, r2
 80038f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038f8:	461a      	mov	r2, r3
 80038fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038fe:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	4413      	add	r3, r2
 8003908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003910:	0151      	lsls	r1, r2, #5
 8003912:	69fa      	ldr	r2, [r7, #28]
 8003914:	440a      	add	r2, r1
 8003916:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800391a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800391e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003922:	015a      	lsls	r2, r3, #5
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	4413      	add	r3, r2
 8003928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003930:	0151      	lsls	r1, r2, #5
 8003932:	69fa      	ldr	r2, [r7, #28]
 8003934:	440a      	add	r2, r1
 8003936:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800393a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800393e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003942:	3301      	adds	r3, #1
 8003944:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800394c:	429a      	cmp	r2, r3
 800394e:	d3b3      	bcc.n	80038b8 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003956:	69db      	ldr	r3, [r3, #28]
 8003958:	69fa      	ldr	r2, [r7, #28]
 800395a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800395e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003962:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003968:	2b00      	cmp	r3, #0
 800396a:	d016      	beq.n	800399a <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003972:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003976:	69fa      	ldr	r2, [r7, #28]
 8003978:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800397c:	f043 030b 	orr.w	r3, r3, #11
 8003980:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800398a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398c:	69fa      	ldr	r2, [r7, #28]
 800398e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003992:	f043 030b 	orr.w	r3, r3, #11
 8003996:	6453      	str	r3, [r2, #68]	; 0x44
 8003998:	e015      	b.n	80039c6 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a0:	695a      	ldr	r2, [r3, #20]
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a8:	4619      	mov	r1, r3
 80039aa:	f242 032b 	movw	r3, #8235	; 0x202b
 80039ae:	4313      	orrs	r3, r2
 80039b0:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	69fa      	ldr	r2, [r7, #28]
 80039bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039c0:	f043 030b 	orr.w	r3, r3, #11
 80039c4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	69fa      	ldr	r2, [r7, #28]
 80039d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039d4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80039d8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6818      	ldr	r0, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80039ea:	461a      	mov	r2, r3
 80039ec:	f004 fa92 	bl	8007f14 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	695a      	ldr	r2, [r3, #20]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80039fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f004 f9bf 	bl	8007d88 <USB_ReadInterrupts>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a14:	d124      	bne.n	8003a60 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f004 fa56 	bl	8007ecc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f003 f9fe 	bl	8006e26 <USB_GetDevSpeed>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681c      	ldr	r4, [r3, #0]
 8003a36:	f001 fadd 	bl	8004ff4 <HAL_RCC_GetHCLKFreq>
 8003a3a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	461a      	mov	r2, r3
 8003a44:	4620      	mov	r0, r4
 8003a46:	f002 ff03 	bl	8006850 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f009 fe3d 	bl	800d6ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	695a      	ldr	r2, [r3, #20]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003a5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f004 f98f 	bl	8007d88 <USB_ReadInterrupts>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	f003 0308 	and.w	r3, r3, #8
 8003a70:	2b08      	cmp	r3, #8
 8003a72:	d10a      	bne.n	8003a8a <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f009 fe1a 	bl	800d6ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695a      	ldr	r2, [r3, #20]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f002 0208 	and.w	r2, r2, #8
 8003a88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f004 f97a 	bl	8007d88 <USB_ReadInterrupts>
 8003a94:	4603      	mov	r3, r0
 8003a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9a:	2b80      	cmp	r3, #128	; 0x80
 8003a9c:	d122      	bne.n	8003ae4 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003aa6:	6a3b      	ldr	r3, [r7, #32]
 8003aa8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003aaa:	2301      	movs	r3, #1
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24
 8003aae:	e014      	b.n	8003ada <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003ab0:	6879      	ldr	r1, [r7, #4]
 8003ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	4413      	add	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	440b      	add	r3, r1
 8003abe:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d105      	bne.n	8003ad4 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	4619      	mov	r1, r3
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fb27 	bl	8004122 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d3e5      	bcc.n	8003ab0 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f004 f94d 	bl	8007d88 <USB_ReadInterrupts>
 8003aee:	4603      	mov	r3, r0
 8003af0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003af4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003af8:	d13b      	bne.n	8003b72 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003afa:	2301      	movs	r3, #1
 8003afc:	627b      	str	r3, [r7, #36]	; 0x24
 8003afe:	e02b      	b.n	8003b58 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	015a      	lsls	r2, r3, #5
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	4413      	add	r3, r2
 8003b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b10:	6879      	ldr	r1, [r7, #4]
 8003b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b14:	4613      	mov	r3, r2
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	4413      	add	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	3340      	adds	r3, #64	; 0x40
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d115      	bne.n	8003b52 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003b26:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	da12      	bge.n	8003b52 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003b2c:	6879      	ldr	r1, [r7, #4]
 8003b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b30:	4613      	mov	r3, r2
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	4413      	add	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	440b      	add	r3, r1
 8003b3a:	333f      	adds	r3, #63	; 0x3f
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 fae8 	bl	8004122 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b54:	3301      	adds	r3, #1
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d3ce      	bcc.n	8003b00 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	695a      	ldr	r2, [r3, #20]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003b70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f004 f906 	bl	8007d88 <USB_ReadInterrupts>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b86:	d155      	bne.n	8003c34 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b88:	2301      	movs	r3, #1
 8003b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b8c:	e045      	b.n	8003c1a <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	015a      	lsls	r2, r3, #5
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	4413      	add	r3, r2
 8003b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	4413      	add	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	440b      	add	r3, r1
 8003bac:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d12e      	bne.n	8003c14 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003bb6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	da2b      	bge.n	8003c14 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003bc8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d121      	bne.n	8003c14 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003bd0:	6879      	ldr	r1, [r7, #4]
 8003bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	4413      	add	r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	440b      	add	r3, r1
 8003bde:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003be2:	2201      	movs	r2, #1
 8003be4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003be6:	6a3b      	ldr	r3, [r7, #32]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003bee:	6a3b      	ldr	r3, [r7, #32]
 8003bf0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003bf2:	6a3b      	ldr	r3, [r7, #32]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10a      	bne.n	8003c14 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	69fa      	ldr	r2, [r7, #28]
 8003c08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c10:	6053      	str	r3, [r2, #4]
            break;
 8003c12:	e007      	b.n	8003c24 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c16:	3301      	adds	r3, #1
 8003c18:	627b      	str	r3, [r7, #36]	; 0x24
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d3b4      	bcc.n	8003b8e <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	695a      	ldr	r2, [r3, #20]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003c32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f004 f8a5 	bl	8007d88 <USB_ReadInterrupts>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c48:	d10a      	bne.n	8003c60 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f009 fdbe 	bl	800d7cc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	695a      	ldr	r2, [r3, #20]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003c5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f004 f88f 	bl	8007d88 <USB_ReadInterrupts>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	2b04      	cmp	r3, #4
 8003c72:	d115      	bne.n	8003ca0 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	f003 0304 	and.w	r3, r3, #4
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d002      	beq.n	8003c8c <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f009 fdae 	bl	800d7e8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6859      	ldr	r1, [r3, #4]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	605a      	str	r2, [r3, #4]
 8003c9c:	e000      	b.n	8003ca0 <HAL_PCD_IRQHandler+0x992>
      return;
 8003c9e:	bf00      	nop
    }
  }
}
 8003ca0:	3734      	adds	r7, #52	; 0x34
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd90      	pop	{r4, r7, pc}

08003ca6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b082      	sub	sp, #8
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
 8003cae:	460b      	mov	r3, r1
 8003cb0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d101      	bne.n	8003cc0 <HAL_PCD_SetAddress+0x1a>
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	e013      	b.n	8003ce8 <HAL_PCD_SetAddress+0x42>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	78fa      	ldrb	r2, [r7, #3]
 8003ccc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	78fa      	ldrb	r2, [r7, #3]
 8003cd6:	4611      	mov	r1, r2
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f003 ffed 	bl	8007cb8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	4608      	mov	r0, r1
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	4603      	mov	r3, r0
 8003d00:	70fb      	strb	r3, [r7, #3]
 8003d02:	460b      	mov	r3, r1
 8003d04:	803b      	strh	r3, [r7, #0]
 8003d06:	4613      	mov	r3, r2
 8003d08:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	da0f      	bge.n	8003d36 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d16:	78fb      	ldrb	r3, [r7, #3]
 8003d18:	f003 020f 	and.w	r2, r3, #15
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	4413      	add	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	3338      	adds	r3, #56	; 0x38
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	4413      	add	r3, r2
 8003d2a:	3304      	adds	r3, #4
 8003d2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2201      	movs	r2, #1
 8003d32:	705a      	strb	r2, [r3, #1]
 8003d34:	e00f      	b.n	8003d56 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d36:	78fb      	ldrb	r3, [r7, #3]
 8003d38:	f003 020f 	and.w	r2, r3, #15
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	4413      	add	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	3304      	adds	r3, #4
 8003d4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003d56:	78fb      	ldrb	r3, [r7, #3]
 8003d58:	f003 030f 	and.w	r3, r3, #15
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003d62:	883a      	ldrh	r2, [r7, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	78ba      	ldrb	r2, [r7, #2]
 8003d6c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	785b      	ldrb	r3, [r3, #1]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d004      	beq.n	8003d80 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003d80:	78bb      	ldrb	r3, [r7, #2]
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d102      	bne.n	8003d8c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d101      	bne.n	8003d9a <HAL_PCD_EP_Open+0xaa>
 8003d96:	2302      	movs	r3, #2
 8003d98:	e00e      	b.n	8003db8 <HAL_PCD_EP_Open+0xc8>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68f9      	ldr	r1, [r7, #12]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f003 f861 	bl	8006e70 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003db6:	7afb      	ldrb	r3, [r7, #11]
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	460b      	mov	r3, r1
 8003dca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003dcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	da0f      	bge.n	8003df4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dd4:	78fb      	ldrb	r3, [r7, #3]
 8003dd6:	f003 020f 	and.w	r2, r3, #15
 8003dda:	4613      	mov	r3, r2
 8003ddc:	00db      	lsls	r3, r3, #3
 8003dde:	4413      	add	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	3338      	adds	r3, #56	; 0x38
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	4413      	add	r3, r2
 8003de8:	3304      	adds	r3, #4
 8003dea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2201      	movs	r2, #1
 8003df0:	705a      	strb	r2, [r3, #1]
 8003df2:	e00f      	b.n	8003e14 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003df4:	78fb      	ldrb	r3, [r7, #3]
 8003df6:	f003 020f 	and.w	r2, r3, #15
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	4413      	add	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	4413      	add	r3, r2
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003e14:	78fb      	ldrb	r3, [r7, #3]
 8003e16:	f003 030f 	and.w	r3, r3, #15
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d101      	bne.n	8003e2e <HAL_PCD_EP_Close+0x6e>
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	e00e      	b.n	8003e4c <HAL_PCD_EP_Close+0x8c>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68f9      	ldr	r1, [r7, #12]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f003 f89f 	bl	8006f80 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3710      	adds	r7, #16
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	607a      	str	r2, [r7, #4]
 8003e5e:	603b      	str	r3, [r7, #0]
 8003e60:	460b      	mov	r3, r1
 8003e62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e64:	7afb      	ldrb	r3, [r7, #11]
 8003e66:	f003 020f 	and.w	r2, r3, #15
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	4413      	add	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	4413      	add	r3, r2
 8003e7a:	3304      	adds	r3, #4
 8003e7c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	2200      	movs	r2, #0
 8003e94:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e96:	7afb      	ldrb	r3, [r7, #11]
 8003e98:	f003 030f 	and.w	r3, r3, #15
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d102      	bne.n	8003eb0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003eb0:	7afb      	ldrb	r3, [r7, #11]
 8003eb2:	f003 030f 	and.w	r3, r3, #15
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d109      	bne.n	8003ece <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6818      	ldr	r0, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	6979      	ldr	r1, [r7, #20]
 8003ec8:	f003 fb86 	bl	80075d8 <USB_EP0StartXfer>
 8003ecc:	e008      	b.n	8003ee0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6818      	ldr	r0, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	461a      	mov	r2, r3
 8003eda:	6979      	ldr	r1, [r7, #20]
 8003edc:	f003 f92c 	bl	8007138 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3718      	adds	r7, #24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003ef6:	78fb      	ldrb	r3, [r7, #3]
 8003ef8:	f003 020f 	and.w	r2, r3, #15
 8003efc:	6879      	ldr	r1, [r7, #4]
 8003efe:	4613      	mov	r3, r2
 8003f00:	00db      	lsls	r3, r3, #3
 8003f02:	4413      	add	r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	440b      	add	r3, r1
 8003f08:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003f0c:	681b      	ldr	r3, [r3, #0]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b086      	sub	sp, #24
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	60f8      	str	r0, [r7, #12]
 8003f22:	607a      	str	r2, [r7, #4]
 8003f24:	603b      	str	r3, [r7, #0]
 8003f26:	460b      	mov	r3, r1
 8003f28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f2a:	7afb      	ldrb	r3, [r7, #11]
 8003f2c:	f003 020f 	and.w	r2, r3, #15
 8003f30:	4613      	mov	r3, r2
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	4413      	add	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	3338      	adds	r3, #56	; 0x38
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	3304      	adds	r3, #4
 8003f40:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	2200      	movs	r2, #0
 8003f52:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	2201      	movs	r2, #1
 8003f58:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f5a:	7afb      	ldrb	r3, [r7, #11]
 8003f5c:	f003 030f 	and.w	r3, r3, #15
 8003f60:	b2da      	uxtb	r2, r3
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d102      	bne.n	8003f74 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f74:	7afb      	ldrb	r3, [r7, #11]
 8003f76:	f003 030f 	and.w	r3, r3, #15
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d109      	bne.n	8003f92 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6818      	ldr	r0, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	461a      	mov	r2, r3
 8003f8a:	6979      	ldr	r1, [r7, #20]
 8003f8c:	f003 fb24 	bl	80075d8 <USB_EP0StartXfer>
 8003f90:	e008      	b.n	8003fa4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6818      	ldr	r0, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	6979      	ldr	r1, [r7, #20]
 8003fa0:	f003 f8ca 	bl	8007138 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3718      	adds	r7, #24
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b084      	sub	sp, #16
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003fba:	78fb      	ldrb	r3, [r7, #3]
 8003fbc:	f003 020f 	and.w	r2, r3, #15
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d901      	bls.n	8003fcc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e050      	b.n	800406e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	da0f      	bge.n	8003ff4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fd4:	78fb      	ldrb	r3, [r7, #3]
 8003fd6:	f003 020f 	and.w	r2, r3, #15
 8003fda:	4613      	mov	r3, r2
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	4413      	add	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	3338      	adds	r3, #56	; 0x38
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	3304      	adds	r3, #4
 8003fea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	705a      	strb	r2, [r3, #1]
 8003ff2:	e00d      	b.n	8004010 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ff4:	78fa      	ldrb	r2, [r7, #3]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	4413      	add	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	4413      	add	r3, r2
 8004006:	3304      	adds	r3, #4
 8004008:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2201      	movs	r2, #1
 8004014:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004016:	78fb      	ldrb	r3, [r7, #3]
 8004018:	f003 030f 	and.w	r3, r3, #15
 800401c:	b2da      	uxtb	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004028:	2b01      	cmp	r3, #1
 800402a:	d101      	bne.n	8004030 <HAL_PCD_EP_SetStall+0x82>
 800402c:	2302      	movs	r3, #2
 800402e:	e01e      	b.n	800406e <HAL_PCD_EP_SetStall+0xc0>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68f9      	ldr	r1, [r7, #12]
 800403e:	4618      	mov	r0, r3
 8004040:	f003 fd66 	bl	8007b10 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004044:	78fb      	ldrb	r3, [r7, #3]
 8004046:	f003 030f 	and.w	r3, r3, #15
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10a      	bne.n	8004064 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6818      	ldr	r0, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	b2d9      	uxtb	r1, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800405e:	461a      	mov	r2, r3
 8004060:	f003 ff58 	bl	8007f14 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b084      	sub	sp, #16
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
 800407e:	460b      	mov	r3, r1
 8004080:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004082:	78fb      	ldrb	r3, [r7, #3]
 8004084:	f003 020f 	and.w	r2, r3, #15
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	429a      	cmp	r2, r3
 800408e:	d901      	bls.n	8004094 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e042      	b.n	800411a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004094:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004098:	2b00      	cmp	r3, #0
 800409a:	da0f      	bge.n	80040bc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800409c:	78fb      	ldrb	r3, [r7, #3]
 800409e:	f003 020f 	and.w	r2, r3, #15
 80040a2:	4613      	mov	r3, r2
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	4413      	add	r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	3338      	adds	r3, #56	; 0x38
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	4413      	add	r3, r2
 80040b0:	3304      	adds	r3, #4
 80040b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2201      	movs	r2, #1
 80040b8:	705a      	strb	r2, [r3, #1]
 80040ba:	e00f      	b.n	80040dc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040bc:	78fb      	ldrb	r3, [r7, #3]
 80040be:	f003 020f 	and.w	r2, r3, #15
 80040c2:	4613      	mov	r3, r2
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	4413      	add	r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	4413      	add	r3, r2
 80040d2:	3304      	adds	r3, #4
 80040d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040e2:	78fb      	ldrb	r3, [r7, #3]
 80040e4:	f003 030f 	and.w	r3, r3, #15
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d101      	bne.n	80040fc <HAL_PCD_EP_ClrStall+0x86>
 80040f8:	2302      	movs	r3, #2
 80040fa:	e00e      	b.n	800411a <HAL_PCD_EP_ClrStall+0xa4>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68f9      	ldr	r1, [r7, #12]
 800410a:	4618      	mov	r0, r3
 800410c:	f003 fd6e 	bl	8007bec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004122:	b580      	push	{r7, lr}
 8004124:	b084      	sub	sp, #16
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
 800412a:	460b      	mov	r3, r1
 800412c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800412e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004132:	2b00      	cmp	r3, #0
 8004134:	da0c      	bge.n	8004150 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004136:	78fb      	ldrb	r3, [r7, #3]
 8004138:	f003 020f 	and.w	r2, r3, #15
 800413c:	4613      	mov	r3, r2
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	4413      	add	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	3338      	adds	r3, #56	; 0x38
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	4413      	add	r3, r2
 800414a:	3304      	adds	r3, #4
 800414c:	60fb      	str	r3, [r7, #12]
 800414e:	e00c      	b.n	800416a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004150:	78fb      	ldrb	r3, [r7, #3]
 8004152:	f003 020f 	and.w	r2, r3, #15
 8004156:	4613      	mov	r3, r2
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	4413      	add	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	4413      	add	r3, r2
 8004166:	3304      	adds	r3, #4
 8004168:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68f9      	ldr	r1, [r7, #12]
 8004170:	4618      	mov	r0, r3
 8004172:	f003 fb8d 	bl	8007890 <USB_EPStopXfer>
 8004176:	4603      	mov	r3, r0
 8004178:	72fb      	strb	r3, [r7, #11]

  return ret;
 800417a:	7afb      	ldrb	r3, [r7, #11]
}
 800417c:	4618      	mov	r0, r3
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b08a      	sub	sp, #40	; 0x28
 8004188:	af02      	add	r7, sp, #8
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	4613      	mov	r3, r2
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	4413      	add	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	3338      	adds	r3, #56	; 0x38
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	4413      	add	r3, r2
 80041a8:	3304      	adds	r3, #4
 80041aa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6a1a      	ldr	r2, [r3, #32]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d901      	bls.n	80041bc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e06c      	b.n	8004296 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	699a      	ldr	r2, [r3, #24]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	69fa      	ldr	r2, [r7, #28]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d902      	bls.n	80041d8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	3303      	adds	r3, #3
 80041dc:	089b      	lsrs	r3, r3, #2
 80041de:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041e0:	e02b      	b.n	800423a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	699a      	ldr	r2, [r3, #24]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	69fa      	ldr	r2, [r7, #28]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d902      	bls.n	80041fe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	3303      	adds	r3, #3
 8004202:	089b      	lsrs	r3, r3, #2
 8004204:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6919      	ldr	r1, [r3, #16]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	b2da      	uxtb	r2, r3
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004216:	b2db      	uxtb	r3, r3
 8004218:	9300      	str	r3, [sp, #0]
 800421a:	4603      	mov	r3, r0
 800421c:	6978      	ldr	r0, [r7, #20]
 800421e:	f003 fbe1 	bl	80079e4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	691a      	ldr	r2, [r3, #16]
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	441a      	add	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6a1a      	ldr	r2, [r3, #32]
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	441a      	add	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	015a      	lsls	r2, r3, #5
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	4413      	add	r3, r2
 8004242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	b29b      	uxth	r3, r3
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	429a      	cmp	r2, r3
 800424e:	d809      	bhi.n	8004264 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6a1a      	ldr	r2, [r3, #32]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004258:	429a      	cmp	r2, r3
 800425a:	d203      	bcs.n	8004264 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1be      	bne.n	80041e2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	699a      	ldr	r2, [r3, #24]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	429a      	cmp	r2, r3
 800426e:	d811      	bhi.n	8004294 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	2201      	movs	r2, #1
 8004278:	fa02 f303 	lsl.w	r3, r2, r3
 800427c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004284:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	43db      	mvns	r3, r3
 800428a:	6939      	ldr	r1, [r7, #16]
 800428c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004290:	4013      	ands	r3, r2
 8004292:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3720      	adds	r7, #32
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
	...

080042a0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b088      	sub	sp, #32
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	333c      	adds	r3, #60	; 0x3c
 80042b8:	3304      	adds	r3, #4
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	015a      	lsls	r2, r3, #5
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	4413      	add	r3, r2
 80042c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d17b      	bne.n	80043ce <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	f003 0308 	and.w	r3, r3, #8
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d015      	beq.n	800430c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	4a61      	ldr	r2, [pc, #388]	; (8004468 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	f240 80b9 	bls.w	800445c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 80b3 	beq.w	800445c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	015a      	lsls	r2, r3, #5
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	4413      	add	r3, r2
 80042fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004302:	461a      	mov	r2, r3
 8004304:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004308:	6093      	str	r3, [r2, #8]
 800430a:	e0a7      	b.n	800445c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	f003 0320 	and.w	r3, r3, #32
 8004312:	2b00      	cmp	r3, #0
 8004314:	d009      	beq.n	800432a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	015a      	lsls	r2, r3, #5
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	4413      	add	r3, r2
 800431e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004322:	461a      	mov	r2, r3
 8004324:	2320      	movs	r3, #32
 8004326:	6093      	str	r3, [r2, #8]
 8004328:	e098      	b.n	800445c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004330:	2b00      	cmp	r3, #0
 8004332:	f040 8093 	bne.w	800445c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	4a4b      	ldr	r2, [pc, #300]	; (8004468 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d90f      	bls.n	800435e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00a      	beq.n	800435e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	015a      	lsls	r2, r3, #5
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	4413      	add	r3, r2
 8004350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004354:	461a      	mov	r2, r3
 8004356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800435a:	6093      	str	r3, [r2, #8]
 800435c:	e07e      	b.n	800445c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	4613      	mov	r3, r2
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	4413      	add	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	4413      	add	r3, r2
 8004370:	3304      	adds	r3, #4
 8004372:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	69da      	ldr	r2, [r3, #28]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	0159      	lsls	r1, r3, #5
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	440b      	add	r3, r1
 8004380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800438a:	1ad2      	subs	r2, r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d114      	bne.n	80043c0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d109      	bne.n	80043b2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6818      	ldr	r0, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80043a8:	461a      	mov	r2, r3
 80043aa:	2101      	movs	r1, #1
 80043ac:	f003 fdb2 	bl	8007f14 <USB_EP0_OutStart>
 80043b0:	e006      	b.n	80043c0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	691a      	ldr	r2, [r3, #16]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	441a      	add	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	4619      	mov	r1, r3
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f009 f93c 	bl	800d644 <HAL_PCD_DataOutStageCallback>
 80043cc:	e046      	b.n	800445c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	4a26      	ldr	r2, [pc, #152]	; (800446c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d124      	bne.n	8004420 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00a      	beq.n	80043f6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	015a      	lsls	r2, r3, #5
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	4413      	add	r3, r2
 80043e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ec:	461a      	mov	r2, r3
 80043ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043f2:	6093      	str	r3, [r2, #8]
 80043f4:	e032      	b.n	800445c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	f003 0320 	and.w	r3, r3, #32
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d008      	beq.n	8004412 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	015a      	lsls	r2, r3, #5
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	4413      	add	r3, r2
 8004408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800440c:	461a      	mov	r2, r3
 800440e:	2320      	movs	r3, #32
 8004410:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	b2db      	uxtb	r3, r3
 8004416:	4619      	mov	r1, r3
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f009 f913 	bl	800d644 <HAL_PCD_DataOutStageCallback>
 800441e:	e01d      	b.n	800445c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d114      	bne.n	8004450 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004426:	6879      	ldr	r1, [r7, #4]
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	4613      	mov	r3, r2
 800442c:	00db      	lsls	r3, r3, #3
 800442e:	4413      	add	r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	440b      	add	r3, r1
 8004434:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d108      	bne.n	8004450 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6818      	ldr	r0, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004448:	461a      	mov	r2, r3
 800444a:	2100      	movs	r1, #0
 800444c:	f003 fd62 	bl	8007f14 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	b2db      	uxtb	r3, r3
 8004454:	4619      	mov	r1, r3
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f009 f8f4 	bl	800d644 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3720      	adds	r7, #32
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	4f54300a 	.word	0x4f54300a
 800446c:	4f54310a 	.word	0x4f54310a

08004470 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	333c      	adds	r3, #60	; 0x3c
 8004488:	3304      	adds	r3, #4
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	015a      	lsls	r2, r3, #5
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	4413      	add	r3, r2
 8004496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	4a15      	ldr	r2, [pc, #84]	; (80044f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d90e      	bls.n	80044c4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d009      	beq.n	80044c4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	015a      	lsls	r2, r3, #5
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	4413      	add	r3, r2
 80044b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044bc:	461a      	mov	r2, r3
 80044be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044c2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f009 f8ab 	bl	800d620 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	4a0a      	ldr	r2, [pc, #40]	; (80044f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d90c      	bls.n	80044ec <PCD_EP_OutSetupPacket_int+0x7c>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d108      	bne.n	80044ec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6818      	ldr	r0, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80044e4:	461a      	mov	r2, r3
 80044e6:	2101      	movs	r1, #1
 80044e8:	f003 fd14 	bl	8007f14 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3718      	adds	r7, #24
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	4f54300a 	.word	0x4f54300a

080044fc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	460b      	mov	r3, r1
 8004506:	70fb      	strb	r3, [r7, #3]
 8004508:	4613      	mov	r3, r2
 800450a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004514:	78fb      	ldrb	r3, [r7, #3]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d107      	bne.n	800452a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800451a:	883b      	ldrh	r3, [r7, #0]
 800451c:	0419      	lsls	r1, r3, #16
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	430a      	orrs	r2, r1
 8004526:	629a      	str	r2, [r3, #40]	; 0x28
 8004528:	e028      	b.n	800457c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004530:	0c1b      	lsrs	r3, r3, #16
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	4413      	add	r3, r2
 8004536:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004538:	2300      	movs	r3, #0
 800453a:	73fb      	strb	r3, [r7, #15]
 800453c:	e00d      	b.n	800455a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	7bfb      	ldrb	r3, [r7, #15]
 8004544:	3340      	adds	r3, #64	; 0x40
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	0c1b      	lsrs	r3, r3, #16
 800454e:	68ba      	ldr	r2, [r7, #8]
 8004550:	4413      	add	r3, r2
 8004552:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004554:	7bfb      	ldrb	r3, [r7, #15]
 8004556:	3301      	adds	r3, #1
 8004558:	73fb      	strb	r3, [r7, #15]
 800455a:	7bfa      	ldrb	r2, [r7, #15]
 800455c:	78fb      	ldrb	r3, [r7, #3]
 800455e:	3b01      	subs	r3, #1
 8004560:	429a      	cmp	r2, r3
 8004562:	d3ec      	bcc.n	800453e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004564:	883b      	ldrh	r3, [r7, #0]
 8004566:	0418      	lsls	r0, r3, #16
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6819      	ldr	r1, [r3, #0]
 800456c:	78fb      	ldrb	r3, [r7, #3]
 800456e:	3b01      	subs	r3, #1
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	4302      	orrs	r2, r0
 8004574:	3340      	adds	r3, #64	; 0x40
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	440b      	add	r3, r1
 800457a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800458a:	b480      	push	{r7}
 800458c:	b083      	sub	sp, #12
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
 8004592:	460b      	mov	r3, r1
 8004594:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	887a      	ldrh	r2, [r7, #2]
 800459c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045da:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <HAL_PCDEx_ActivateLPM+0x44>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	10000003 	.word	0x10000003

080045f4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80045f4:	b480      	push	{r7}
 80045f6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045f8:	4b05      	ldr	r3, [pc, #20]	; (8004610 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a04      	ldr	r2, [pc, #16]	; (8004610 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80045fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004602:	6013      	str	r3, [r2, #0]
}
 8004604:	bf00      	nop
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	40007000 	.word	0x40007000

08004614 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800461a:	2300      	movs	r3, #0
 800461c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800461e:	4b23      	ldr	r3, [pc, #140]	; (80046ac <HAL_PWREx_EnableOverDrive+0x98>)
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	4a22      	ldr	r2, [pc, #136]	; (80046ac <HAL_PWREx_EnableOverDrive+0x98>)
 8004624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004628:	6413      	str	r3, [r2, #64]	; 0x40
 800462a:	4b20      	ldr	r3, [pc, #128]	; (80046ac <HAL_PWREx_EnableOverDrive+0x98>)
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004632:	603b      	str	r3, [r7, #0]
 8004634:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004636:	4b1e      	ldr	r3, [pc, #120]	; (80046b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a1d      	ldr	r2, [pc, #116]	; (80046b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800463c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004640:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004642:	f7fd ff21 	bl	8002488 <HAL_GetTick>
 8004646:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004648:	e009      	b.n	800465e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800464a:	f7fd ff1d 	bl	8002488 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004658:	d901      	bls.n	800465e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e022      	b.n	80046a4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800465e:	4b14      	ldr	r3, [pc, #80]	; (80046b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800466a:	d1ee      	bne.n	800464a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800466c:	4b10      	ldr	r3, [pc, #64]	; (80046b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a0f      	ldr	r2, [pc, #60]	; (80046b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004672:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004676:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004678:	f7fd ff06 	bl	8002488 <HAL_GetTick>
 800467c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800467e:	e009      	b.n	8004694 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004680:	f7fd ff02 	bl	8002488 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800468e:	d901      	bls.n	8004694 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e007      	b.n	80046a4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004694:	4b06      	ldr	r3, [pc, #24]	; (80046b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800469c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046a0:	d1ee      	bne.n	8004680 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3708      	adds	r7, #8
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40023800 	.word	0x40023800
 80046b0:	40007000 	.word	0x40007000

080046b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b086      	sub	sp, #24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80046bc:	2300      	movs	r3, #0
 80046be:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e29b      	b.n	8004c02 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 8087 	beq.w	80047e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046d8:	4b96      	ldr	r3, [pc, #600]	; (8004934 <HAL_RCC_OscConfig+0x280>)
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f003 030c 	and.w	r3, r3, #12
 80046e0:	2b04      	cmp	r3, #4
 80046e2:	d00c      	beq.n	80046fe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046e4:	4b93      	ldr	r3, [pc, #588]	; (8004934 <HAL_RCC_OscConfig+0x280>)
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f003 030c 	and.w	r3, r3, #12
 80046ec:	2b08      	cmp	r3, #8
 80046ee:	d112      	bne.n	8004716 <HAL_RCC_OscConfig+0x62>
 80046f0:	4b90      	ldr	r3, [pc, #576]	; (8004934 <HAL_RCC_OscConfig+0x280>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046fc:	d10b      	bne.n	8004716 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046fe:	4b8d      	ldr	r3, [pc, #564]	; (8004934 <HAL_RCC_OscConfig+0x280>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d06c      	beq.n	80047e4 <HAL_RCC_OscConfig+0x130>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d168      	bne.n	80047e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e275      	b.n	8004c02 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800471e:	d106      	bne.n	800472e <HAL_RCC_OscConfig+0x7a>
 8004720:	4b84      	ldr	r3, [pc, #528]	; (8004934 <HAL_RCC_OscConfig+0x280>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a83      	ldr	r2, [pc, #524]	; (8004934 <HAL_RCC_OscConfig+0x280>)
 8004726:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800472a:	6013      	str	r3, [r2, #0]
 800472c:	e02e      	b.n	800478c <HAL_RCC_OscConfig+0xd8>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10c      	bne.n	8004750 <HAL_RCC_OscConfig+0x9c>
 8004736:	4b7f      	ldr	r3, [pc, #508]	; (8004934 <HAL_RCC_OscConfig+0x280>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a7e      	ldr	r2, [pc, #504]	; (8004934 <HAL_RCC_OscConfig+0x280>)
 800473c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004740:	6013      	str	r3, [r2, #0]
 8004742:	4b7c      	ldr	r3, [pc, #496]	; (8004934 <HAL_RCC_OscConfig+0x280>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a7b      	ldr	r2, [pc, #492]	; (8004934 <HAL_RCC_OscConfig+0x280>)
 8004748:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	e01d      	b.n	800478c <HAL_RCC_OscConfig+0xd8>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004758:	d10c      	bne.n	8004774 <HAL_RCC_OscConfig+0xc0>
 800475a:	4b76      	ldr	r3, [pc, #472]	; (8004934 <HAL_RCC_OscConfig+0x280>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a75      	ldr	r2, [pc, #468]	; (8004934 <HAL_RCC_OscConfig+0x280>)
 8004760:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	4b73      	ldr	r3, [pc, #460]	; (8004934 <HAL_RCC_OscConfig+0x280>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a72      	ldr	r2, [pc, #456]	; (8004934 <HAL_RCC_OscConfig+0x280>)
 800476c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	e00b      	b.n	800478c <HAL_RCC_OscConfig+0xd8>
 8004774:	4b6f      	ldr	r3, [pc, #444]	; (8004934 <HAL_RCC_OscConfig+0x280>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a6e      	ldr	r2, [pc, #440]	; (8004934 <HAL_RCC_OscConfig+0x280>)
 800477a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	4b6c      	ldr	r3, [pc, #432]	; (8004934 <HAL_RCC_OscConfig+0x280>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a6b      	ldr	r2, [pc, #428]	; (8004934 <HAL_RCC_OscConfig+0x280>)
 8004786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800478a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d013      	beq.n	80047bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004794:	f7fd fe78 	bl	8002488 <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800479c:	f7fd fe74 	bl	8002488 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b64      	cmp	r3, #100	; 0x64
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e229      	b.n	8004c02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ae:	4b61      	ldr	r3, [pc, #388]	; (8004934 <HAL_RCC_OscConfig+0x280>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0f0      	beq.n	800479c <HAL_RCC_OscConfig+0xe8>
 80047ba:	e014      	b.n	80047e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047bc:	f7fd fe64 	bl	8002488 <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047c4:	f7fd fe60 	bl	8002488 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b64      	cmp	r3, #100	; 0x64
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e215      	b.n	8004c02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047d6:	4b57      	ldr	r3, [pc, #348]	; (8004934 <HAL_RCC_OscConfig+0x280>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1f0      	bne.n	80047c4 <HAL_RCC_OscConfig+0x110>
 80047e2:	e000      	b.n	80047e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d069      	beq.n	80048c6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047f2:	4b50      	ldr	r3, [pc, #320]	; (8004934 <HAL_RCC_OscConfig+0x280>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 030c 	and.w	r3, r3, #12
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00b      	beq.n	8004816 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047fe:	4b4d      	ldr	r3, [pc, #308]	; (8004934 <HAL_RCC_OscConfig+0x280>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f003 030c 	and.w	r3, r3, #12
 8004806:	2b08      	cmp	r3, #8
 8004808:	d11c      	bne.n	8004844 <HAL_RCC_OscConfig+0x190>
 800480a:	4b4a      	ldr	r3, [pc, #296]	; (8004934 <HAL_RCC_OscConfig+0x280>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d116      	bne.n	8004844 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004816:	4b47      	ldr	r3, [pc, #284]	; (8004934 <HAL_RCC_OscConfig+0x280>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d005      	beq.n	800482e <HAL_RCC_OscConfig+0x17a>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d001      	beq.n	800482e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e1e9      	b.n	8004c02 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800482e:	4b41      	ldr	r3, [pc, #260]	; (8004934 <HAL_RCC_OscConfig+0x280>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	493d      	ldr	r1, [pc, #244]	; (8004934 <HAL_RCC_OscConfig+0x280>)
 800483e:	4313      	orrs	r3, r2
 8004840:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004842:	e040      	b.n	80048c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d023      	beq.n	8004894 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800484c:	4b39      	ldr	r3, [pc, #228]	; (8004934 <HAL_RCC_OscConfig+0x280>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a38      	ldr	r2, [pc, #224]	; (8004934 <HAL_RCC_OscConfig+0x280>)
 8004852:	f043 0301 	orr.w	r3, r3, #1
 8004856:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004858:	f7fd fe16 	bl	8002488 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004860:	f7fd fe12 	bl	8002488 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e1c7      	b.n	8004c02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004872:	4b30      	ldr	r3, [pc, #192]	; (8004934 <HAL_RCC_OscConfig+0x280>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d0f0      	beq.n	8004860 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800487e:	4b2d      	ldr	r3, [pc, #180]	; (8004934 <HAL_RCC_OscConfig+0x280>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	4929      	ldr	r1, [pc, #164]	; (8004934 <HAL_RCC_OscConfig+0x280>)
 800488e:	4313      	orrs	r3, r2
 8004890:	600b      	str	r3, [r1, #0]
 8004892:	e018      	b.n	80048c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004894:	4b27      	ldr	r3, [pc, #156]	; (8004934 <HAL_RCC_OscConfig+0x280>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a26      	ldr	r2, [pc, #152]	; (8004934 <HAL_RCC_OscConfig+0x280>)
 800489a:	f023 0301 	bic.w	r3, r3, #1
 800489e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a0:	f7fd fdf2 	bl	8002488 <HAL_GetTick>
 80048a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048a6:	e008      	b.n	80048ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048a8:	f7fd fdee 	bl	8002488 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e1a3      	b.n	8004c02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ba:	4b1e      	ldr	r3, [pc, #120]	; (8004934 <HAL_RCC_OscConfig+0x280>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1f0      	bne.n	80048a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0308 	and.w	r3, r3, #8
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d038      	beq.n	8004944 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d019      	beq.n	800490e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048da:	4b16      	ldr	r3, [pc, #88]	; (8004934 <HAL_RCC_OscConfig+0x280>)
 80048dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048de:	4a15      	ldr	r2, [pc, #84]	; (8004934 <HAL_RCC_OscConfig+0x280>)
 80048e0:	f043 0301 	orr.w	r3, r3, #1
 80048e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e6:	f7fd fdcf 	bl	8002488 <HAL_GetTick>
 80048ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ec:	e008      	b.n	8004900 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048ee:	f7fd fdcb 	bl	8002488 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d901      	bls.n	8004900 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e180      	b.n	8004c02 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004900:	4b0c      	ldr	r3, [pc, #48]	; (8004934 <HAL_RCC_OscConfig+0x280>)
 8004902:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	2b00      	cmp	r3, #0
 800490a:	d0f0      	beq.n	80048ee <HAL_RCC_OscConfig+0x23a>
 800490c:	e01a      	b.n	8004944 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800490e:	4b09      	ldr	r3, [pc, #36]	; (8004934 <HAL_RCC_OscConfig+0x280>)
 8004910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004912:	4a08      	ldr	r2, [pc, #32]	; (8004934 <HAL_RCC_OscConfig+0x280>)
 8004914:	f023 0301 	bic.w	r3, r3, #1
 8004918:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800491a:	f7fd fdb5 	bl	8002488 <HAL_GetTick>
 800491e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004920:	e00a      	b.n	8004938 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004922:	f7fd fdb1 	bl	8002488 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d903      	bls.n	8004938 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e166      	b.n	8004c02 <HAL_RCC_OscConfig+0x54e>
 8004934:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004938:	4b92      	ldr	r3, [pc, #584]	; (8004b84 <HAL_RCC_OscConfig+0x4d0>)
 800493a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1ee      	bne.n	8004922 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b00      	cmp	r3, #0
 800494e:	f000 80a4 	beq.w	8004a9a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004952:	4b8c      	ldr	r3, [pc, #560]	; (8004b84 <HAL_RCC_OscConfig+0x4d0>)
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10d      	bne.n	800497a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800495e:	4b89      	ldr	r3, [pc, #548]	; (8004b84 <HAL_RCC_OscConfig+0x4d0>)
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	4a88      	ldr	r2, [pc, #544]	; (8004b84 <HAL_RCC_OscConfig+0x4d0>)
 8004964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004968:	6413      	str	r3, [r2, #64]	; 0x40
 800496a:	4b86      	ldr	r3, [pc, #536]	; (8004b84 <HAL_RCC_OscConfig+0x4d0>)
 800496c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004972:	60bb      	str	r3, [r7, #8]
 8004974:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004976:	2301      	movs	r3, #1
 8004978:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800497a:	4b83      	ldr	r3, [pc, #524]	; (8004b88 <HAL_RCC_OscConfig+0x4d4>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004982:	2b00      	cmp	r3, #0
 8004984:	d118      	bne.n	80049b8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004986:	4b80      	ldr	r3, [pc, #512]	; (8004b88 <HAL_RCC_OscConfig+0x4d4>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a7f      	ldr	r2, [pc, #508]	; (8004b88 <HAL_RCC_OscConfig+0x4d4>)
 800498c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004990:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004992:	f7fd fd79 	bl	8002488 <HAL_GetTick>
 8004996:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004998:	e008      	b.n	80049ac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800499a:	f7fd fd75 	bl	8002488 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b64      	cmp	r3, #100	; 0x64
 80049a6:	d901      	bls.n	80049ac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e12a      	b.n	8004c02 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049ac:	4b76      	ldr	r3, [pc, #472]	; (8004b88 <HAL_RCC_OscConfig+0x4d4>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d0f0      	beq.n	800499a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d106      	bne.n	80049ce <HAL_RCC_OscConfig+0x31a>
 80049c0:	4b70      	ldr	r3, [pc, #448]	; (8004b84 <HAL_RCC_OscConfig+0x4d0>)
 80049c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c4:	4a6f      	ldr	r2, [pc, #444]	; (8004b84 <HAL_RCC_OscConfig+0x4d0>)
 80049c6:	f043 0301 	orr.w	r3, r3, #1
 80049ca:	6713      	str	r3, [r2, #112]	; 0x70
 80049cc:	e02d      	b.n	8004a2a <HAL_RCC_OscConfig+0x376>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10c      	bne.n	80049f0 <HAL_RCC_OscConfig+0x33c>
 80049d6:	4b6b      	ldr	r3, [pc, #428]	; (8004b84 <HAL_RCC_OscConfig+0x4d0>)
 80049d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049da:	4a6a      	ldr	r2, [pc, #424]	; (8004b84 <HAL_RCC_OscConfig+0x4d0>)
 80049dc:	f023 0301 	bic.w	r3, r3, #1
 80049e0:	6713      	str	r3, [r2, #112]	; 0x70
 80049e2:	4b68      	ldr	r3, [pc, #416]	; (8004b84 <HAL_RCC_OscConfig+0x4d0>)
 80049e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e6:	4a67      	ldr	r2, [pc, #412]	; (8004b84 <HAL_RCC_OscConfig+0x4d0>)
 80049e8:	f023 0304 	bic.w	r3, r3, #4
 80049ec:	6713      	str	r3, [r2, #112]	; 0x70
 80049ee:	e01c      	b.n	8004a2a <HAL_RCC_OscConfig+0x376>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	2b05      	cmp	r3, #5
 80049f6:	d10c      	bne.n	8004a12 <HAL_RCC_OscConfig+0x35e>
 80049f8:	4b62      	ldr	r3, [pc, #392]	; (8004b84 <HAL_RCC_OscConfig+0x4d0>)
 80049fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fc:	4a61      	ldr	r2, [pc, #388]	; (8004b84 <HAL_RCC_OscConfig+0x4d0>)
 80049fe:	f043 0304 	orr.w	r3, r3, #4
 8004a02:	6713      	str	r3, [r2, #112]	; 0x70
 8004a04:	4b5f      	ldr	r3, [pc, #380]	; (8004b84 <HAL_RCC_OscConfig+0x4d0>)
 8004a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a08:	4a5e      	ldr	r2, [pc, #376]	; (8004b84 <HAL_RCC_OscConfig+0x4d0>)
 8004a0a:	f043 0301 	orr.w	r3, r3, #1
 8004a0e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a10:	e00b      	b.n	8004a2a <HAL_RCC_OscConfig+0x376>
 8004a12:	4b5c      	ldr	r3, [pc, #368]	; (8004b84 <HAL_RCC_OscConfig+0x4d0>)
 8004a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a16:	4a5b      	ldr	r2, [pc, #364]	; (8004b84 <HAL_RCC_OscConfig+0x4d0>)
 8004a18:	f023 0301 	bic.w	r3, r3, #1
 8004a1c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a1e:	4b59      	ldr	r3, [pc, #356]	; (8004b84 <HAL_RCC_OscConfig+0x4d0>)
 8004a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a22:	4a58      	ldr	r2, [pc, #352]	; (8004b84 <HAL_RCC_OscConfig+0x4d0>)
 8004a24:	f023 0304 	bic.w	r3, r3, #4
 8004a28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d015      	beq.n	8004a5e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a32:	f7fd fd29 	bl	8002488 <HAL_GetTick>
 8004a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a38:	e00a      	b.n	8004a50 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a3a:	f7fd fd25 	bl	8002488 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e0d8      	b.n	8004c02 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a50:	4b4c      	ldr	r3, [pc, #304]	; (8004b84 <HAL_RCC_OscConfig+0x4d0>)
 8004a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0ee      	beq.n	8004a3a <HAL_RCC_OscConfig+0x386>
 8004a5c:	e014      	b.n	8004a88 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a5e:	f7fd fd13 	bl	8002488 <HAL_GetTick>
 8004a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a64:	e00a      	b.n	8004a7c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a66:	f7fd fd0f 	bl	8002488 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d901      	bls.n	8004a7c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e0c2      	b.n	8004c02 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a7c:	4b41      	ldr	r3, [pc, #260]	; (8004b84 <HAL_RCC_OscConfig+0x4d0>)
 8004a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1ee      	bne.n	8004a66 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a88:	7dfb      	ldrb	r3, [r7, #23]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d105      	bne.n	8004a9a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a8e:	4b3d      	ldr	r3, [pc, #244]	; (8004b84 <HAL_RCC_OscConfig+0x4d0>)
 8004a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a92:	4a3c      	ldr	r2, [pc, #240]	; (8004b84 <HAL_RCC_OscConfig+0x4d0>)
 8004a94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a98:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 80ae 	beq.w	8004c00 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004aa4:	4b37      	ldr	r3, [pc, #220]	; (8004b84 <HAL_RCC_OscConfig+0x4d0>)
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f003 030c 	and.w	r3, r3, #12
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	d06d      	beq.n	8004b8c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d14b      	bne.n	8004b50 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ab8:	4b32      	ldr	r3, [pc, #200]	; (8004b84 <HAL_RCC_OscConfig+0x4d0>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a31      	ldr	r2, [pc, #196]	; (8004b84 <HAL_RCC_OscConfig+0x4d0>)
 8004abe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ac2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac4:	f7fd fce0 	bl	8002488 <HAL_GetTick>
 8004ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aca:	e008      	b.n	8004ade <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004acc:	f7fd fcdc 	bl	8002488 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e091      	b.n	8004c02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ade:	4b29      	ldr	r3, [pc, #164]	; (8004b84 <HAL_RCC_OscConfig+0x4d0>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1f0      	bne.n	8004acc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	69da      	ldr	r2, [r3, #28]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	431a      	orrs	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af8:	019b      	lsls	r3, r3, #6
 8004afa:	431a      	orrs	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b00:	085b      	lsrs	r3, r3, #1
 8004b02:	3b01      	subs	r3, #1
 8004b04:	041b      	lsls	r3, r3, #16
 8004b06:	431a      	orrs	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0c:	061b      	lsls	r3, r3, #24
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b14:	071b      	lsls	r3, r3, #28
 8004b16:	491b      	ldr	r1, [pc, #108]	; (8004b84 <HAL_RCC_OscConfig+0x4d0>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b1c:	4b19      	ldr	r3, [pc, #100]	; (8004b84 <HAL_RCC_OscConfig+0x4d0>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a18      	ldr	r2, [pc, #96]	; (8004b84 <HAL_RCC_OscConfig+0x4d0>)
 8004b22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b28:	f7fd fcae 	bl	8002488 <HAL_GetTick>
 8004b2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b2e:	e008      	b.n	8004b42 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b30:	f7fd fcaa 	bl	8002488 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e05f      	b.n	8004c02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b42:	4b10      	ldr	r3, [pc, #64]	; (8004b84 <HAL_RCC_OscConfig+0x4d0>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d0f0      	beq.n	8004b30 <HAL_RCC_OscConfig+0x47c>
 8004b4e:	e057      	b.n	8004c00 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b50:	4b0c      	ldr	r3, [pc, #48]	; (8004b84 <HAL_RCC_OscConfig+0x4d0>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a0b      	ldr	r2, [pc, #44]	; (8004b84 <HAL_RCC_OscConfig+0x4d0>)
 8004b56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b5c:	f7fd fc94 	bl	8002488 <HAL_GetTick>
 8004b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b62:	e008      	b.n	8004b76 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b64:	f7fd fc90 	bl	8002488 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d901      	bls.n	8004b76 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e045      	b.n	8004c02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b76:	4b03      	ldr	r3, [pc, #12]	; (8004b84 <HAL_RCC_OscConfig+0x4d0>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1f0      	bne.n	8004b64 <HAL_RCC_OscConfig+0x4b0>
 8004b82:	e03d      	b.n	8004c00 <HAL_RCC_OscConfig+0x54c>
 8004b84:	40023800 	.word	0x40023800
 8004b88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004b8c:	4b1f      	ldr	r3, [pc, #124]	; (8004c0c <HAL_RCC_OscConfig+0x558>)
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d030      	beq.n	8004bfc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d129      	bne.n	8004bfc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d122      	bne.n	8004bfc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004bc2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d119      	bne.n	8004bfc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd2:	085b      	lsrs	r3, r3, #1
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d10f      	bne.n	8004bfc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d107      	bne.n	8004bfc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d001      	beq.n	8004c00 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e000      	b.n	8004c02 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3718      	adds	r7, #24
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	40023800 	.word	0x40023800

08004c10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e0d0      	b.n	8004dca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c28:	4b6a      	ldr	r3, [pc, #424]	; (8004dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 030f 	and.w	r3, r3, #15
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d910      	bls.n	8004c58 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c36:	4b67      	ldr	r3, [pc, #412]	; (8004dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f023 020f 	bic.w	r2, r3, #15
 8004c3e:	4965      	ldr	r1, [pc, #404]	; (8004dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c46:	4b63      	ldr	r3, [pc, #396]	; (8004dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 030f 	and.w	r3, r3, #15
 8004c4e:	683a      	ldr	r2, [r7, #0]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d001      	beq.n	8004c58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e0b8      	b.n	8004dca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d020      	beq.n	8004ca6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d005      	beq.n	8004c7c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c70:	4b59      	ldr	r3, [pc, #356]	; (8004dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	4a58      	ldr	r2, [pc, #352]	; (8004dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0308 	and.w	r3, r3, #8
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d005      	beq.n	8004c94 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c88:	4b53      	ldr	r3, [pc, #332]	; (8004dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	4a52      	ldr	r2, [pc, #328]	; (8004dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c92:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c94:	4b50      	ldr	r3, [pc, #320]	; (8004dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	494d      	ldr	r1, [pc, #308]	; (8004dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d040      	beq.n	8004d34 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d107      	bne.n	8004cca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cba:	4b47      	ldr	r3, [pc, #284]	; (8004dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d115      	bne.n	8004cf2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e07f      	b.n	8004dca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d107      	bne.n	8004ce2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cd2:	4b41      	ldr	r3, [pc, #260]	; (8004dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d109      	bne.n	8004cf2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e073      	b.n	8004dca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ce2:	4b3d      	ldr	r3, [pc, #244]	; (8004dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e06b      	b.n	8004dca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cf2:	4b39      	ldr	r3, [pc, #228]	; (8004dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f023 0203 	bic.w	r2, r3, #3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	4936      	ldr	r1, [pc, #216]	; (8004dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d04:	f7fd fbc0 	bl	8002488 <HAL_GetTick>
 8004d08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d0a:	e00a      	b.n	8004d22 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d0c:	f7fd fbbc 	bl	8002488 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e053      	b.n	8004dca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d22:	4b2d      	ldr	r3, [pc, #180]	; (8004dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f003 020c 	and.w	r2, r3, #12
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d1eb      	bne.n	8004d0c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d34:	4b27      	ldr	r3, [pc, #156]	; (8004dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 030f 	and.w	r3, r3, #15
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d210      	bcs.n	8004d64 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d42:	4b24      	ldr	r3, [pc, #144]	; (8004dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f023 020f 	bic.w	r2, r3, #15
 8004d4a:	4922      	ldr	r1, [pc, #136]	; (8004dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d52:	4b20      	ldr	r3, [pc, #128]	; (8004dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 030f 	and.w	r3, r3, #15
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d001      	beq.n	8004d64 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e032      	b.n	8004dca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0304 	and.w	r3, r3, #4
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d008      	beq.n	8004d82 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d70:	4b19      	ldr	r3, [pc, #100]	; (8004dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	4916      	ldr	r1, [pc, #88]	; (8004dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0308 	and.w	r3, r3, #8
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d009      	beq.n	8004da2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d8e:	4b12      	ldr	r3, [pc, #72]	; (8004dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	490e      	ldr	r1, [pc, #56]	; (8004dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004da2:	f000 f821 	bl	8004de8 <HAL_RCC_GetSysClockFreq>
 8004da6:	4602      	mov	r2, r0
 8004da8:	4b0b      	ldr	r3, [pc, #44]	; (8004dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	091b      	lsrs	r3, r3, #4
 8004dae:	f003 030f 	and.w	r3, r3, #15
 8004db2:	490a      	ldr	r1, [pc, #40]	; (8004ddc <HAL_RCC_ClockConfig+0x1cc>)
 8004db4:	5ccb      	ldrb	r3, [r1, r3]
 8004db6:	fa22 f303 	lsr.w	r3, r2, r3
 8004dba:	4a09      	ldr	r2, [pc, #36]	; (8004de0 <HAL_RCC_ClockConfig+0x1d0>)
 8004dbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004dbe:	4b09      	ldr	r3, [pc, #36]	; (8004de4 <HAL_RCC_ClockConfig+0x1d4>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7fd fa2a 	bl	800221c <HAL_InitTick>

  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	40023c00 	.word	0x40023c00
 8004dd8:	40023800 	.word	0x40023800
 8004ddc:	0800e150 	.word	0x0800e150
 8004de0:	20000000 	.word	0x20000000
 8004de4:	20000004 	.word	0x20000004

08004de8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dec:	b094      	sub	sp, #80	; 0x50
 8004dee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004df0:	2300      	movs	r3, #0
 8004df2:	647b      	str	r3, [r7, #68]	; 0x44
 8004df4:	2300      	movs	r3, #0
 8004df6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004df8:	2300      	movs	r3, #0
 8004dfa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e00:	4b79      	ldr	r3, [pc, #484]	; (8004fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f003 030c 	and.w	r3, r3, #12
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	d00d      	beq.n	8004e28 <HAL_RCC_GetSysClockFreq+0x40>
 8004e0c:	2b08      	cmp	r3, #8
 8004e0e:	f200 80e1 	bhi.w	8004fd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d002      	beq.n	8004e1c <HAL_RCC_GetSysClockFreq+0x34>
 8004e16:	2b04      	cmp	r3, #4
 8004e18:	d003      	beq.n	8004e22 <HAL_RCC_GetSysClockFreq+0x3a>
 8004e1a:	e0db      	b.n	8004fd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e1c:	4b73      	ldr	r3, [pc, #460]	; (8004fec <HAL_RCC_GetSysClockFreq+0x204>)
 8004e1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e20:	e0db      	b.n	8004fda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e22:	4b73      	ldr	r3, [pc, #460]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004e24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e26:	e0d8      	b.n	8004fda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e28:	4b6f      	ldr	r3, [pc, #444]	; (8004fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e30:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004e32:	4b6d      	ldr	r3, [pc, #436]	; (8004fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d063      	beq.n	8004f06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e3e:	4b6a      	ldr	r3, [pc, #424]	; (8004fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	099b      	lsrs	r3, r3, #6
 8004e44:	2200      	movs	r2, #0
 8004e46:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e50:	633b      	str	r3, [r7, #48]	; 0x30
 8004e52:	2300      	movs	r3, #0
 8004e54:	637b      	str	r3, [r7, #52]	; 0x34
 8004e56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004e5a:	4622      	mov	r2, r4
 8004e5c:	462b      	mov	r3, r5
 8004e5e:	f04f 0000 	mov.w	r0, #0
 8004e62:	f04f 0100 	mov.w	r1, #0
 8004e66:	0159      	lsls	r1, r3, #5
 8004e68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e6c:	0150      	lsls	r0, r2, #5
 8004e6e:	4602      	mov	r2, r0
 8004e70:	460b      	mov	r3, r1
 8004e72:	4621      	mov	r1, r4
 8004e74:	1a51      	subs	r1, r2, r1
 8004e76:	6139      	str	r1, [r7, #16]
 8004e78:	4629      	mov	r1, r5
 8004e7a:	eb63 0301 	sbc.w	r3, r3, r1
 8004e7e:	617b      	str	r3, [r7, #20]
 8004e80:	f04f 0200 	mov.w	r2, #0
 8004e84:	f04f 0300 	mov.w	r3, #0
 8004e88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e8c:	4659      	mov	r1, fp
 8004e8e:	018b      	lsls	r3, r1, #6
 8004e90:	4651      	mov	r1, sl
 8004e92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e96:	4651      	mov	r1, sl
 8004e98:	018a      	lsls	r2, r1, #6
 8004e9a:	4651      	mov	r1, sl
 8004e9c:	ebb2 0801 	subs.w	r8, r2, r1
 8004ea0:	4659      	mov	r1, fp
 8004ea2:	eb63 0901 	sbc.w	r9, r3, r1
 8004ea6:	f04f 0200 	mov.w	r2, #0
 8004eaa:	f04f 0300 	mov.w	r3, #0
 8004eae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004eb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004eb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004eba:	4690      	mov	r8, r2
 8004ebc:	4699      	mov	r9, r3
 8004ebe:	4623      	mov	r3, r4
 8004ec0:	eb18 0303 	adds.w	r3, r8, r3
 8004ec4:	60bb      	str	r3, [r7, #8]
 8004ec6:	462b      	mov	r3, r5
 8004ec8:	eb49 0303 	adc.w	r3, r9, r3
 8004ecc:	60fb      	str	r3, [r7, #12]
 8004ece:	f04f 0200 	mov.w	r2, #0
 8004ed2:	f04f 0300 	mov.w	r3, #0
 8004ed6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004eda:	4629      	mov	r1, r5
 8004edc:	024b      	lsls	r3, r1, #9
 8004ede:	4621      	mov	r1, r4
 8004ee0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ee4:	4621      	mov	r1, r4
 8004ee6:	024a      	lsls	r2, r1, #9
 8004ee8:	4610      	mov	r0, r2
 8004eea:	4619      	mov	r1, r3
 8004eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eee:	2200      	movs	r2, #0
 8004ef0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ef2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ef4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ef8:	f7fb f9ec 	bl	80002d4 <__aeabi_uldivmod>
 8004efc:	4602      	mov	r2, r0
 8004efe:	460b      	mov	r3, r1
 8004f00:	4613      	mov	r3, r2
 8004f02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f04:	e058      	b.n	8004fb8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f06:	4b38      	ldr	r3, [pc, #224]	; (8004fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	099b      	lsrs	r3, r3, #6
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	4618      	mov	r0, r3
 8004f10:	4611      	mov	r1, r2
 8004f12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f16:	623b      	str	r3, [r7, #32]
 8004f18:	2300      	movs	r3, #0
 8004f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f20:	4642      	mov	r2, r8
 8004f22:	464b      	mov	r3, r9
 8004f24:	f04f 0000 	mov.w	r0, #0
 8004f28:	f04f 0100 	mov.w	r1, #0
 8004f2c:	0159      	lsls	r1, r3, #5
 8004f2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f32:	0150      	lsls	r0, r2, #5
 8004f34:	4602      	mov	r2, r0
 8004f36:	460b      	mov	r3, r1
 8004f38:	4641      	mov	r1, r8
 8004f3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f3e:	4649      	mov	r1, r9
 8004f40:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f44:	f04f 0200 	mov.w	r2, #0
 8004f48:	f04f 0300 	mov.w	r3, #0
 8004f4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f58:	ebb2 040a 	subs.w	r4, r2, sl
 8004f5c:	eb63 050b 	sbc.w	r5, r3, fp
 8004f60:	f04f 0200 	mov.w	r2, #0
 8004f64:	f04f 0300 	mov.w	r3, #0
 8004f68:	00eb      	lsls	r3, r5, #3
 8004f6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f6e:	00e2      	lsls	r2, r4, #3
 8004f70:	4614      	mov	r4, r2
 8004f72:	461d      	mov	r5, r3
 8004f74:	4643      	mov	r3, r8
 8004f76:	18e3      	adds	r3, r4, r3
 8004f78:	603b      	str	r3, [r7, #0]
 8004f7a:	464b      	mov	r3, r9
 8004f7c:	eb45 0303 	adc.w	r3, r5, r3
 8004f80:	607b      	str	r3, [r7, #4]
 8004f82:	f04f 0200 	mov.w	r2, #0
 8004f86:	f04f 0300 	mov.w	r3, #0
 8004f8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f8e:	4629      	mov	r1, r5
 8004f90:	028b      	lsls	r3, r1, #10
 8004f92:	4621      	mov	r1, r4
 8004f94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f98:	4621      	mov	r1, r4
 8004f9a:	028a      	lsls	r2, r1, #10
 8004f9c:	4610      	mov	r0, r2
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	61bb      	str	r3, [r7, #24]
 8004fa6:	61fa      	str	r2, [r7, #28]
 8004fa8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fac:	f7fb f992 	bl	80002d4 <__aeabi_uldivmod>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004fb8:	4b0b      	ldr	r3, [pc, #44]	; (8004fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	0c1b      	lsrs	r3, r3, #16
 8004fbe:	f003 0303 	and.w	r3, r3, #3
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004fc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004fca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fd2:	e002      	b.n	8004fda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fd4:	4b05      	ldr	r3, [pc, #20]	; (8004fec <HAL_RCC_GetSysClockFreq+0x204>)
 8004fd6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3750      	adds	r7, #80	; 0x50
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fe6:	bf00      	nop
 8004fe8:	40023800 	.word	0x40023800
 8004fec:	00f42400 	.word	0x00f42400
 8004ff0:	007a1200 	.word	0x007a1200

08004ff4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ff8:	4b03      	ldr	r3, [pc, #12]	; (8005008 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	20000000 	.word	0x20000000

0800500c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005010:	f7ff fff0 	bl	8004ff4 <HAL_RCC_GetHCLKFreq>
 8005014:	4602      	mov	r2, r0
 8005016:	4b05      	ldr	r3, [pc, #20]	; (800502c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	0a9b      	lsrs	r3, r3, #10
 800501c:	f003 0307 	and.w	r3, r3, #7
 8005020:	4903      	ldr	r1, [pc, #12]	; (8005030 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005022:	5ccb      	ldrb	r3, [r1, r3]
 8005024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005028:	4618      	mov	r0, r3
 800502a:	bd80      	pop	{r7, pc}
 800502c:	40023800 	.word	0x40023800
 8005030:	0800e160 	.word	0x0800e160

08005034 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005038:	f7ff ffdc 	bl	8004ff4 <HAL_RCC_GetHCLKFreq>
 800503c:	4602      	mov	r2, r0
 800503e:	4b05      	ldr	r3, [pc, #20]	; (8005054 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	0b5b      	lsrs	r3, r3, #13
 8005044:	f003 0307 	and.w	r3, r3, #7
 8005048:	4903      	ldr	r1, [pc, #12]	; (8005058 <HAL_RCC_GetPCLK2Freq+0x24>)
 800504a:	5ccb      	ldrb	r3, [r1, r3]
 800504c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005050:	4618      	mov	r0, r3
 8005052:	bd80      	pop	{r7, pc}
 8005054:	40023800 	.word	0x40023800
 8005058:	0800e160 	.word	0x0800e160

0800505c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	220f      	movs	r2, #15
 800506a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800506c:	4b12      	ldr	r3, [pc, #72]	; (80050b8 <HAL_RCC_GetClockConfig+0x5c>)
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f003 0203 	and.w	r2, r3, #3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005078:	4b0f      	ldr	r3, [pc, #60]	; (80050b8 <HAL_RCC_GetClockConfig+0x5c>)
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005084:	4b0c      	ldr	r3, [pc, #48]	; (80050b8 <HAL_RCC_GetClockConfig+0x5c>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005090:	4b09      	ldr	r3, [pc, #36]	; (80050b8 <HAL_RCC_GetClockConfig+0x5c>)
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	08db      	lsrs	r3, r3, #3
 8005096:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800509e:	4b07      	ldr	r3, [pc, #28]	; (80050bc <HAL_RCC_GetClockConfig+0x60>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 020f 	and.w	r2, r3, #15
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	601a      	str	r2, [r3, #0]
}
 80050aa:	bf00      	nop
 80050ac:	370c      	adds	r7, #12
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	40023800 	.word	0x40023800
 80050bc:	40023c00 	.word	0x40023c00

080050c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b088      	sub	sp, #32
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80050c8:	2300      	movs	r3, #0
 80050ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80050cc:	2300      	movs	r3, #0
 80050ce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80050d0:	2300      	movs	r3, #0
 80050d2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80050d4:	2300      	movs	r3, #0
 80050d6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80050d8:	2300      	movs	r3, #0
 80050da:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0301 	and.w	r3, r3, #1
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d012      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80050e8:	4b69      	ldr	r3, [pc, #420]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	4a68      	ldr	r2, [pc, #416]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80050f2:	6093      	str	r3, [r2, #8]
 80050f4:	4b66      	ldr	r3, [pc, #408]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050f6:	689a      	ldr	r2, [r3, #8]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050fc:	4964      	ldr	r1, [pc, #400]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800510a:	2301      	movs	r3, #1
 800510c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d017      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800511a:	4b5d      	ldr	r3, [pc, #372]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800511c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005120:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005128:	4959      	ldr	r1, [pc, #356]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800512a:	4313      	orrs	r3, r2
 800512c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005134:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005138:	d101      	bne.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800513a:	2301      	movs	r3, #1
 800513c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005142:	2b00      	cmp	r3, #0
 8005144:	d101      	bne.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005146:	2301      	movs	r3, #1
 8005148:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d017      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005156:	4b4e      	ldr	r3, [pc, #312]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005158:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800515c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005164:	494a      	ldr	r1, [pc, #296]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005166:	4313      	orrs	r3, r2
 8005168:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005170:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005174:	d101      	bne.n	800517a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005176:	2301      	movs	r3, #1
 8005178:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517e:	2b00      	cmp	r3, #0
 8005180:	d101      	bne.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005182:	2301      	movs	r3, #1
 8005184:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d001      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005192:	2301      	movs	r3, #1
 8005194:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0320 	and.w	r3, r3, #32
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f000 808b 	beq.w	80052ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80051a4:	4b3a      	ldr	r3, [pc, #232]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a8:	4a39      	ldr	r2, [pc, #228]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ae:	6413      	str	r3, [r2, #64]	; 0x40
 80051b0:	4b37      	ldr	r3, [pc, #220]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051b8:	60bb      	str	r3, [r7, #8]
 80051ba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80051bc:	4b35      	ldr	r3, [pc, #212]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a34      	ldr	r2, [pc, #208]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051c8:	f7fd f95e 	bl	8002488 <HAL_GetTick>
 80051cc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80051ce:	e008      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051d0:	f7fd f95a 	bl	8002488 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b64      	cmp	r3, #100	; 0x64
 80051dc:	d901      	bls.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e38f      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80051e2:	4b2c      	ldr	r3, [pc, #176]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d0f0      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051ee:	4b28      	ldr	r3, [pc, #160]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051f6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d035      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	429a      	cmp	r2, r3
 800520a:	d02e      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800520c:	4b20      	ldr	r3, [pc, #128]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800520e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005210:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005214:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005216:	4b1e      	ldr	r3, [pc, #120]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521a:	4a1d      	ldr	r2, [pc, #116]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800521c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005220:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005222:	4b1b      	ldr	r3, [pc, #108]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005226:	4a1a      	ldr	r2, [pc, #104]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005228:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800522c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800522e:	4a18      	ldr	r2, [pc, #96]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005234:	4b16      	ldr	r3, [pc, #88]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	2b01      	cmp	r3, #1
 800523e:	d114      	bne.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005240:	f7fd f922 	bl	8002488 <HAL_GetTick>
 8005244:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005246:	e00a      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005248:	f7fd f91e 	bl	8002488 <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	f241 3288 	movw	r2, #5000	; 0x1388
 8005256:	4293      	cmp	r3, r2
 8005258:	d901      	bls.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e351      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800525e:	4b0c      	ldr	r3, [pc, #48]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005262:	f003 0302 	and.w	r3, r3, #2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d0ee      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005272:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005276:	d111      	bne.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005278:	4b05      	ldr	r3, [pc, #20]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005284:	4b04      	ldr	r3, [pc, #16]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005286:	400b      	ands	r3, r1
 8005288:	4901      	ldr	r1, [pc, #4]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800528a:	4313      	orrs	r3, r2
 800528c:	608b      	str	r3, [r1, #8]
 800528e:	e00b      	b.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005290:	40023800 	.word	0x40023800
 8005294:	40007000 	.word	0x40007000
 8005298:	0ffffcff 	.word	0x0ffffcff
 800529c:	4bac      	ldr	r3, [pc, #688]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	4aab      	ldr	r2, [pc, #684]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052a2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80052a6:	6093      	str	r3, [r2, #8]
 80052a8:	4ba9      	ldr	r3, [pc, #676]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052b4:	49a6      	ldr	r1, [pc, #664]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0310 	and.w	r3, r3, #16
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d010      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80052c6:	4ba2      	ldr	r3, [pc, #648]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052cc:	4aa0      	ldr	r2, [pc, #640]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80052d6:	4b9e      	ldr	r3, [pc, #632]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052d8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e0:	499b      	ldr	r1, [pc, #620]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00a      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052f4:	4b96      	ldr	r3, [pc, #600]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005302:	4993      	ldr	r1, [pc, #588]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005304:	4313      	orrs	r3, r2
 8005306:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00a      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005316:	4b8e      	ldr	r3, [pc, #568]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800531c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005324:	498a      	ldr	r1, [pc, #552]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005326:	4313      	orrs	r3, r2
 8005328:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00a      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005338:	4b85      	ldr	r3, [pc, #532]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800533a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800533e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005346:	4982      	ldr	r1, [pc, #520]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005348:	4313      	orrs	r3, r2
 800534a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00a      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800535a:	4b7d      	ldr	r3, [pc, #500]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800535c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005360:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005368:	4979      	ldr	r1, [pc, #484]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800536a:	4313      	orrs	r3, r2
 800536c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00a      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800537c:	4b74      	ldr	r3, [pc, #464]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800537e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005382:	f023 0203 	bic.w	r2, r3, #3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538a:	4971      	ldr	r1, [pc, #452]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800538c:	4313      	orrs	r3, r2
 800538e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00a      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800539e:	4b6c      	ldr	r3, [pc, #432]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a4:	f023 020c 	bic.w	r2, r3, #12
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053ac:	4968      	ldr	r1, [pc, #416]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00a      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053c0:	4b63      	ldr	r3, [pc, #396]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ce:	4960      	ldr	r1, [pc, #384]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00a      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053e2:	4b5b      	ldr	r3, [pc, #364]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053f0:	4957      	ldr	r1, [pc, #348]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00a      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005404:	4b52      	ldr	r3, [pc, #328]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005412:	494f      	ldr	r1, [pc, #316]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005414:	4313      	orrs	r3, r2
 8005416:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00a      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005426:	4b4a      	ldr	r3, [pc, #296]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800542c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005434:	4946      	ldr	r1, [pc, #280]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005436:	4313      	orrs	r3, r2
 8005438:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00a      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005448:	4b41      	ldr	r3, [pc, #260]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800544a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800544e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005456:	493e      	ldr	r1, [pc, #248]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005458:	4313      	orrs	r3, r2
 800545a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00a      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800546a:	4b39      	ldr	r3, [pc, #228]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800546c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005470:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005478:	4935      	ldr	r1, [pc, #212]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800547a:	4313      	orrs	r3, r2
 800547c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00a      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800548c:	4b30      	ldr	r3, [pc, #192]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800548e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005492:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800549a:	492d      	ldr	r1, [pc, #180]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800549c:	4313      	orrs	r3, r2
 800549e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d011      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80054ae:	4b28      	ldr	r3, [pc, #160]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054b4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054bc:	4924      	ldr	r1, [pc, #144]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054cc:	d101      	bne.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80054ce:	2301      	movs	r3, #1
 80054d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0308 	and.w	r3, r3, #8
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80054de:	2301      	movs	r3, #1
 80054e0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00a      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054ee:	4b18      	ldr	r3, [pc, #96]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054fc:	4914      	ldr	r1, [pc, #80]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00b      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005510:	4b0f      	ldr	r3, [pc, #60]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005516:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005520:	490b      	ldr	r1, [pc, #44]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005522:	4313      	orrs	r3, r2
 8005524:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00f      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005534:	4b06      	ldr	r3, [pc, #24]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800553a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005544:	4902      	ldr	r1, [pc, #8]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005546:	4313      	orrs	r3, r2
 8005548:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800554c:	e002      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800554e:	bf00      	nop
 8005550:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00b      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005560:	4b8a      	ldr	r3, [pc, #552]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005562:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005566:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005570:	4986      	ldr	r1, [pc, #536]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005572:	4313      	orrs	r3, r2
 8005574:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00b      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005584:	4b81      	ldr	r3, [pc, #516]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005586:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800558a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005594:	497d      	ldr	r1, [pc, #500]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005596:	4313      	orrs	r3, r2
 8005598:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d006      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 80d6 	beq.w	800575c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80055b0:	4b76      	ldr	r3, [pc, #472]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a75      	ldr	r2, [pc, #468]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80055ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055bc:	f7fc ff64 	bl	8002488 <HAL_GetTick>
 80055c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055c2:	e008      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80055c4:	f7fc ff60 	bl	8002488 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b64      	cmp	r3, #100	; 0x64
 80055d0:	d901      	bls.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e195      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055d6:	4b6d      	ldr	r3, [pc, #436]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1f0      	bne.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d021      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d11d      	bne.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80055f6:	4b65      	ldr	r3, [pc, #404]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055fc:	0c1b      	lsrs	r3, r3, #16
 80055fe:	f003 0303 	and.w	r3, r3, #3
 8005602:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005604:	4b61      	ldr	r3, [pc, #388]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005606:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800560a:	0e1b      	lsrs	r3, r3, #24
 800560c:	f003 030f 	and.w	r3, r3, #15
 8005610:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	019a      	lsls	r2, r3, #6
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	041b      	lsls	r3, r3, #16
 800561c:	431a      	orrs	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	061b      	lsls	r3, r3, #24
 8005622:	431a      	orrs	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	071b      	lsls	r3, r3, #28
 800562a:	4958      	ldr	r1, [pc, #352]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800562c:	4313      	orrs	r3, r2
 800562e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d004      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005642:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005646:	d00a      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005650:	2b00      	cmp	r3, #0
 8005652:	d02e      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005658:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800565c:	d129      	bne.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800565e:	4b4b      	ldr	r3, [pc, #300]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005660:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005664:	0c1b      	lsrs	r3, r3, #16
 8005666:	f003 0303 	and.w	r3, r3, #3
 800566a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800566c:	4b47      	ldr	r3, [pc, #284]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800566e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005672:	0f1b      	lsrs	r3, r3, #28
 8005674:	f003 0307 	and.w	r3, r3, #7
 8005678:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	019a      	lsls	r2, r3, #6
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	041b      	lsls	r3, r3, #16
 8005684:	431a      	orrs	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	061b      	lsls	r3, r3, #24
 800568c:	431a      	orrs	r2, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	071b      	lsls	r3, r3, #28
 8005692:	493e      	ldr	r1, [pc, #248]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005694:	4313      	orrs	r3, r2
 8005696:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800569a:	4b3c      	ldr	r3, [pc, #240]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800569c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056a0:	f023 021f 	bic.w	r2, r3, #31
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a8:	3b01      	subs	r3, #1
 80056aa:	4938      	ldr	r1, [pc, #224]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d01d      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80056be:	4b33      	ldr	r3, [pc, #204]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056c4:	0e1b      	lsrs	r3, r3, #24
 80056c6:	f003 030f 	and.w	r3, r3, #15
 80056ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056cc:	4b2f      	ldr	r3, [pc, #188]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056d2:	0f1b      	lsrs	r3, r3, #28
 80056d4:	f003 0307 	and.w	r3, r3, #7
 80056d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	019a      	lsls	r2, r3, #6
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	041b      	lsls	r3, r3, #16
 80056e6:	431a      	orrs	r2, r3
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	061b      	lsls	r3, r3, #24
 80056ec:	431a      	orrs	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	071b      	lsls	r3, r3, #28
 80056f2:	4926      	ldr	r1, [pc, #152]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d011      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	019a      	lsls	r2, r3, #6
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	041b      	lsls	r3, r3, #16
 8005712:	431a      	orrs	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	061b      	lsls	r3, r3, #24
 800571a:	431a      	orrs	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	071b      	lsls	r3, r3, #28
 8005722:	491a      	ldr	r1, [pc, #104]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005724:	4313      	orrs	r3, r2
 8005726:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800572a:	4b18      	ldr	r3, [pc, #96]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a17      	ldr	r2, [pc, #92]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005730:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005734:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005736:	f7fc fea7 	bl	8002488 <HAL_GetTick>
 800573a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800573c:	e008      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800573e:	f7fc fea3 	bl	8002488 <HAL_GetTick>
 8005742:	4602      	mov	r2, r0
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	2b64      	cmp	r3, #100	; 0x64
 800574a:	d901      	bls.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e0d8      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005750:	4b0e      	ldr	r3, [pc, #56]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d0f0      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	2b01      	cmp	r3, #1
 8005760:	f040 80ce 	bne.w	8005900 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005764:	4b09      	ldr	r3, [pc, #36]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a08      	ldr	r2, [pc, #32]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800576a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800576e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005770:	f7fc fe8a 	bl	8002488 <HAL_GetTick>
 8005774:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005776:	e00b      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005778:	f7fc fe86 	bl	8002488 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	2b64      	cmp	r3, #100	; 0x64
 8005784:	d904      	bls.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e0bb      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800578a:	bf00      	nop
 800578c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005790:	4b5e      	ldr	r3, [pc, #376]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005798:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800579c:	d0ec      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d009      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d02e      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d12a      	bne.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80057c6:	4b51      	ldr	r3, [pc, #324]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057cc:	0c1b      	lsrs	r3, r3, #16
 80057ce:	f003 0303 	and.w	r3, r3, #3
 80057d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80057d4:	4b4d      	ldr	r3, [pc, #308]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057da:	0f1b      	lsrs	r3, r3, #28
 80057dc:	f003 0307 	and.w	r3, r3, #7
 80057e0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	019a      	lsls	r2, r3, #6
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	041b      	lsls	r3, r3, #16
 80057ec:	431a      	orrs	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	061b      	lsls	r3, r3, #24
 80057f4:	431a      	orrs	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	071b      	lsls	r3, r3, #28
 80057fa:	4944      	ldr	r1, [pc, #272]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005802:	4b42      	ldr	r3, [pc, #264]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005804:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005808:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005810:	3b01      	subs	r3, #1
 8005812:	021b      	lsls	r3, r3, #8
 8005814:	493d      	ldr	r1, [pc, #244]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005816:	4313      	orrs	r3, r2
 8005818:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d022      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800582c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005830:	d11d      	bne.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005832:	4b36      	ldr	r3, [pc, #216]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005838:	0e1b      	lsrs	r3, r3, #24
 800583a:	f003 030f 	and.w	r3, r3, #15
 800583e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005840:	4b32      	ldr	r3, [pc, #200]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005846:	0f1b      	lsrs	r3, r3, #28
 8005848:	f003 0307 	and.w	r3, r3, #7
 800584c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	019a      	lsls	r2, r3, #6
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a1b      	ldr	r3, [r3, #32]
 8005858:	041b      	lsls	r3, r3, #16
 800585a:	431a      	orrs	r2, r3
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	061b      	lsls	r3, r3, #24
 8005860:	431a      	orrs	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	071b      	lsls	r3, r3, #28
 8005866:	4929      	ldr	r1, [pc, #164]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005868:	4313      	orrs	r3, r2
 800586a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0308 	and.w	r3, r3, #8
 8005876:	2b00      	cmp	r3, #0
 8005878:	d028      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800587a:	4b24      	ldr	r3, [pc, #144]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800587c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005880:	0e1b      	lsrs	r3, r3, #24
 8005882:	f003 030f 	and.w	r3, r3, #15
 8005886:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005888:	4b20      	ldr	r3, [pc, #128]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800588a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800588e:	0c1b      	lsrs	r3, r3, #16
 8005890:	f003 0303 	and.w	r3, r3, #3
 8005894:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	019a      	lsls	r2, r3, #6
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	041b      	lsls	r3, r3, #16
 80058a0:	431a      	orrs	r2, r3
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	061b      	lsls	r3, r3, #24
 80058a6:	431a      	orrs	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	69db      	ldr	r3, [r3, #28]
 80058ac:	071b      	lsls	r3, r3, #28
 80058ae:	4917      	ldr	r1, [pc, #92]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80058b6:	4b15      	ldr	r3, [pc, #84]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c4:	4911      	ldr	r1, [pc, #68]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80058cc:	4b0f      	ldr	r3, [pc, #60]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a0e      	ldr	r2, [pc, #56]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058d8:	f7fc fdd6 	bl	8002488 <HAL_GetTick>
 80058dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058de:	e008      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80058e0:	f7fc fdd2 	bl	8002488 <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	2b64      	cmp	r3, #100	; 0x64
 80058ec:	d901      	bls.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e007      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058f2:	4b06      	ldr	r3, [pc, #24]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058fe:	d1ef      	bne.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3720      	adds	r7, #32
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	40023800 	.word	0x40023800

08005910 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e049      	b.n	80059b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d106      	bne.n	800593c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 f841 	bl	80059be <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	3304      	adds	r3, #4
 800594c:	4619      	mov	r1, r3
 800594e:	4610      	mov	r0, r2
 8005950:	f000 fa00 	bl	8005d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3708      	adds	r7, #8
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80059be:	b480      	push	{r7}
 80059c0:	b083      	sub	sp, #12
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80059c6:	bf00      	nop
 80059c8:	370c      	adds	r7, #12
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
	...

080059d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d001      	beq.n	80059ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e054      	b.n	8005a96 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2202      	movs	r2, #2
 80059f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68da      	ldr	r2, [r3, #12]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f042 0201 	orr.w	r2, r2, #1
 8005a02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a26      	ldr	r2, [pc, #152]	; (8005aa4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d022      	beq.n	8005a54 <HAL_TIM_Base_Start_IT+0x80>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a16:	d01d      	beq.n	8005a54 <HAL_TIM_Base_Start_IT+0x80>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a22      	ldr	r2, [pc, #136]	; (8005aa8 <HAL_TIM_Base_Start_IT+0xd4>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d018      	beq.n	8005a54 <HAL_TIM_Base_Start_IT+0x80>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a21      	ldr	r2, [pc, #132]	; (8005aac <HAL_TIM_Base_Start_IT+0xd8>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d013      	beq.n	8005a54 <HAL_TIM_Base_Start_IT+0x80>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a1f      	ldr	r2, [pc, #124]	; (8005ab0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d00e      	beq.n	8005a54 <HAL_TIM_Base_Start_IT+0x80>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a1e      	ldr	r2, [pc, #120]	; (8005ab4 <HAL_TIM_Base_Start_IT+0xe0>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d009      	beq.n	8005a54 <HAL_TIM_Base_Start_IT+0x80>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a1c      	ldr	r2, [pc, #112]	; (8005ab8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d004      	beq.n	8005a54 <HAL_TIM_Base_Start_IT+0x80>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a1b      	ldr	r2, [pc, #108]	; (8005abc <HAL_TIM_Base_Start_IT+0xe8>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d115      	bne.n	8005a80 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689a      	ldr	r2, [r3, #8]
 8005a5a:	4b19      	ldr	r3, [pc, #100]	; (8005ac0 <HAL_TIM_Base_Start_IT+0xec>)
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2b06      	cmp	r3, #6
 8005a64:	d015      	beq.n	8005a92 <HAL_TIM_Base_Start_IT+0xbe>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a6c:	d011      	beq.n	8005a92 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f042 0201 	orr.w	r2, r2, #1
 8005a7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a7e:	e008      	b.n	8005a92 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f042 0201 	orr.w	r2, r2, #1
 8005a8e:	601a      	str	r2, [r3, #0]
 8005a90:	e000      	b.n	8005a94 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	40010000 	.word	0x40010000
 8005aa8:	40000400 	.word	0x40000400
 8005aac:	40000800 	.word	0x40000800
 8005ab0:	40000c00 	.word	0x40000c00
 8005ab4:	40010400 	.word	0x40010400
 8005ab8:	40014000 	.word	0x40014000
 8005abc:	40001800 	.word	0x40001800
 8005ac0:	00010007 	.word	0x00010007

08005ac4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	f003 0302 	and.w	r3, r3, #2
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d122      	bne.n	8005b20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	f003 0302 	and.w	r3, r3, #2
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d11b      	bne.n	8005b20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f06f 0202 	mvn.w	r2, #2
 8005af0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2201      	movs	r2, #1
 8005af6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	f003 0303 	and.w	r3, r3, #3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d003      	beq.n	8005b0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 f905 	bl	8005d16 <HAL_TIM_IC_CaptureCallback>
 8005b0c:	e005      	b.n	8005b1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 f8f7 	bl	8005d02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 f908 	bl	8005d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	f003 0304 	and.w	r3, r3, #4
 8005b2a:	2b04      	cmp	r3, #4
 8005b2c:	d122      	bne.n	8005b74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	f003 0304 	and.w	r3, r3, #4
 8005b38:	2b04      	cmp	r3, #4
 8005b3a:	d11b      	bne.n	8005b74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f06f 0204 	mvn.w	r2, #4
 8005b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2202      	movs	r2, #2
 8005b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d003      	beq.n	8005b62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f8db 	bl	8005d16 <HAL_TIM_IC_CaptureCallback>
 8005b60:	e005      	b.n	8005b6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 f8cd 	bl	8005d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 f8de 	bl	8005d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	f003 0308 	and.w	r3, r3, #8
 8005b7e:	2b08      	cmp	r3, #8
 8005b80:	d122      	bne.n	8005bc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	f003 0308 	and.w	r3, r3, #8
 8005b8c:	2b08      	cmp	r3, #8
 8005b8e:	d11b      	bne.n	8005bc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f06f 0208 	mvn.w	r2, #8
 8005b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2204      	movs	r2, #4
 8005b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	69db      	ldr	r3, [r3, #28]
 8005ba6:	f003 0303 	and.w	r3, r3, #3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f8b1 	bl	8005d16 <HAL_TIM_IC_CaptureCallback>
 8005bb4:	e005      	b.n	8005bc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f8a3 	bl	8005d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 f8b4 	bl	8005d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	f003 0310 	and.w	r3, r3, #16
 8005bd2:	2b10      	cmp	r3, #16
 8005bd4:	d122      	bne.n	8005c1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	f003 0310 	and.w	r3, r3, #16
 8005be0:	2b10      	cmp	r3, #16
 8005be2:	d11b      	bne.n	8005c1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f06f 0210 	mvn.w	r2, #16
 8005bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2208      	movs	r2, #8
 8005bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	69db      	ldr	r3, [r3, #28]
 8005bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d003      	beq.n	8005c0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 f887 	bl	8005d16 <HAL_TIM_IC_CaptureCallback>
 8005c08:	e005      	b.n	8005c16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f879 	bl	8005d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 f88a 	bl	8005d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d10e      	bne.n	8005c48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d107      	bne.n	8005c48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f06f 0201 	mvn.w	r2, #1
 8005c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f7fc f992 	bl	8001f6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c52:	2b80      	cmp	r3, #128	; 0x80
 8005c54:	d10e      	bne.n	8005c74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c60:	2b80      	cmp	r3, #128	; 0x80
 8005c62:	d107      	bne.n	8005c74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f91a 	bl	8005ea8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c82:	d10e      	bne.n	8005ca2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c8e:	2b80      	cmp	r3, #128	; 0x80
 8005c90:	d107      	bne.n	8005ca2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 f90d 	bl	8005ebc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cac:	2b40      	cmp	r3, #64	; 0x40
 8005cae:	d10e      	bne.n	8005cce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cba:	2b40      	cmp	r3, #64	; 0x40
 8005cbc:	d107      	bne.n	8005cce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 f838 	bl	8005d3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	f003 0320 	and.w	r3, r3, #32
 8005cd8:	2b20      	cmp	r3, #32
 8005cda:	d10e      	bne.n	8005cfa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	f003 0320 	and.w	r3, r3, #32
 8005ce6:	2b20      	cmp	r3, #32
 8005ce8:	d107      	bne.n	8005cfa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f06f 0220 	mvn.w	r2, #32
 8005cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 f8cd 	bl	8005e94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cfa:	bf00      	nop
 8005cfc:	3708      	adds	r7, #8
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d02:	b480      	push	{r7}
 8005d04:	b083      	sub	sp, #12
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d0a:	bf00      	nop
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b083      	sub	sp, #12
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d1e:	bf00      	nop
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b083      	sub	sp, #12
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d32:	bf00      	nop
 8005d34:	370c      	adds	r7, #12
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b083      	sub	sp, #12
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d46:	bf00      	nop
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
	...

08005d54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a40      	ldr	r2, [pc, #256]	; (8005e68 <TIM_Base_SetConfig+0x114>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d013      	beq.n	8005d94 <TIM_Base_SetConfig+0x40>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d72:	d00f      	beq.n	8005d94 <TIM_Base_SetConfig+0x40>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a3d      	ldr	r2, [pc, #244]	; (8005e6c <TIM_Base_SetConfig+0x118>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d00b      	beq.n	8005d94 <TIM_Base_SetConfig+0x40>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a3c      	ldr	r2, [pc, #240]	; (8005e70 <TIM_Base_SetConfig+0x11c>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d007      	beq.n	8005d94 <TIM_Base_SetConfig+0x40>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a3b      	ldr	r2, [pc, #236]	; (8005e74 <TIM_Base_SetConfig+0x120>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d003      	beq.n	8005d94 <TIM_Base_SetConfig+0x40>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a3a      	ldr	r2, [pc, #232]	; (8005e78 <TIM_Base_SetConfig+0x124>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d108      	bne.n	8005da6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a2f      	ldr	r2, [pc, #188]	; (8005e68 <TIM_Base_SetConfig+0x114>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d02b      	beq.n	8005e06 <TIM_Base_SetConfig+0xb2>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db4:	d027      	beq.n	8005e06 <TIM_Base_SetConfig+0xb2>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a2c      	ldr	r2, [pc, #176]	; (8005e6c <TIM_Base_SetConfig+0x118>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d023      	beq.n	8005e06 <TIM_Base_SetConfig+0xb2>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a2b      	ldr	r2, [pc, #172]	; (8005e70 <TIM_Base_SetConfig+0x11c>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d01f      	beq.n	8005e06 <TIM_Base_SetConfig+0xb2>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a2a      	ldr	r2, [pc, #168]	; (8005e74 <TIM_Base_SetConfig+0x120>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d01b      	beq.n	8005e06 <TIM_Base_SetConfig+0xb2>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a29      	ldr	r2, [pc, #164]	; (8005e78 <TIM_Base_SetConfig+0x124>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d017      	beq.n	8005e06 <TIM_Base_SetConfig+0xb2>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a28      	ldr	r2, [pc, #160]	; (8005e7c <TIM_Base_SetConfig+0x128>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d013      	beq.n	8005e06 <TIM_Base_SetConfig+0xb2>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a27      	ldr	r2, [pc, #156]	; (8005e80 <TIM_Base_SetConfig+0x12c>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d00f      	beq.n	8005e06 <TIM_Base_SetConfig+0xb2>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a26      	ldr	r2, [pc, #152]	; (8005e84 <TIM_Base_SetConfig+0x130>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d00b      	beq.n	8005e06 <TIM_Base_SetConfig+0xb2>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a25      	ldr	r2, [pc, #148]	; (8005e88 <TIM_Base_SetConfig+0x134>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d007      	beq.n	8005e06 <TIM_Base_SetConfig+0xb2>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a24      	ldr	r2, [pc, #144]	; (8005e8c <TIM_Base_SetConfig+0x138>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d003      	beq.n	8005e06 <TIM_Base_SetConfig+0xb2>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a23      	ldr	r2, [pc, #140]	; (8005e90 <TIM_Base_SetConfig+0x13c>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d108      	bne.n	8005e18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	689a      	ldr	r2, [r3, #8]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a0a      	ldr	r2, [pc, #40]	; (8005e68 <TIM_Base_SetConfig+0x114>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d003      	beq.n	8005e4c <TIM_Base_SetConfig+0xf8>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a0c      	ldr	r2, [pc, #48]	; (8005e78 <TIM_Base_SetConfig+0x124>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d103      	bne.n	8005e54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	691a      	ldr	r2, [r3, #16]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	615a      	str	r2, [r3, #20]
}
 8005e5a:	bf00      	nop
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	40010000 	.word	0x40010000
 8005e6c:	40000400 	.word	0x40000400
 8005e70:	40000800 	.word	0x40000800
 8005e74:	40000c00 	.word	0x40000c00
 8005e78:	40010400 	.word	0x40010400
 8005e7c:	40014000 	.word	0x40014000
 8005e80:	40014400 	.word	0x40014400
 8005e84:	40014800 	.word	0x40014800
 8005e88:	40001800 	.word	0x40001800
 8005e8c:	40001c00 	.word	0x40001c00
 8005e90:	40002000 	.word	0x40002000

08005e94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e9c:	bf00      	nop
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ec4:	bf00      	nop
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e040      	b.n	8005f64 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d106      	bne.n	8005ef8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f7fc f932 	bl	800215c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2224      	movs	r2, #36	; 0x24
 8005efc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f022 0201 	bic.w	r2, r2, #1
 8005f0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 f82c 	bl	8005f6c <UART_SetConfig>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d101      	bne.n	8005f1e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e022      	b.n	8005f64 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d002      	beq.n	8005f2c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 fa84 	bl	8006434 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	689a      	ldr	r2, [r3, #8]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f042 0201 	orr.w	r2, r2, #1
 8005f5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 fb0b 	bl	8006578 <UART_CheckIdleState>
 8005f62:	4603      	mov	r3, r0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3708      	adds	r7, #8
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b088      	sub	sp, #32
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f74:	2300      	movs	r3, #0
 8005f76:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	689a      	ldr	r2, [r3, #8]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	431a      	orrs	r2, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	431a      	orrs	r2, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	69db      	ldr	r3, [r3, #28]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	4ba6      	ldr	r3, [pc, #664]	; (8006230 <UART_SetConfig+0x2c4>)
 8005f98:	4013      	ands	r3, r2
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	6812      	ldr	r2, [r2, #0]
 8005f9e:	6979      	ldr	r1, [r7, #20]
 8005fa0:	430b      	orrs	r3, r1
 8005fa2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	68da      	ldr	r2, [r3, #12]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a1b      	ldr	r3, [r3, #32]
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a94      	ldr	r2, [pc, #592]	; (8006234 <UART_SetConfig+0x2c8>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d120      	bne.n	800602a <UART_SetConfig+0xbe>
 8005fe8:	4b93      	ldr	r3, [pc, #588]	; (8006238 <UART_SetConfig+0x2cc>)
 8005fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fee:	f003 0303 	and.w	r3, r3, #3
 8005ff2:	2b03      	cmp	r3, #3
 8005ff4:	d816      	bhi.n	8006024 <UART_SetConfig+0xb8>
 8005ff6:	a201      	add	r2, pc, #4	; (adr r2, 8005ffc <UART_SetConfig+0x90>)
 8005ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ffc:	0800600d 	.word	0x0800600d
 8006000:	08006019 	.word	0x08006019
 8006004:	08006013 	.word	0x08006013
 8006008:	0800601f 	.word	0x0800601f
 800600c:	2301      	movs	r3, #1
 800600e:	77fb      	strb	r3, [r7, #31]
 8006010:	e150      	b.n	80062b4 <UART_SetConfig+0x348>
 8006012:	2302      	movs	r3, #2
 8006014:	77fb      	strb	r3, [r7, #31]
 8006016:	e14d      	b.n	80062b4 <UART_SetConfig+0x348>
 8006018:	2304      	movs	r3, #4
 800601a:	77fb      	strb	r3, [r7, #31]
 800601c:	e14a      	b.n	80062b4 <UART_SetConfig+0x348>
 800601e:	2308      	movs	r3, #8
 8006020:	77fb      	strb	r3, [r7, #31]
 8006022:	e147      	b.n	80062b4 <UART_SetConfig+0x348>
 8006024:	2310      	movs	r3, #16
 8006026:	77fb      	strb	r3, [r7, #31]
 8006028:	e144      	b.n	80062b4 <UART_SetConfig+0x348>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a83      	ldr	r2, [pc, #524]	; (800623c <UART_SetConfig+0x2d0>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d132      	bne.n	800609a <UART_SetConfig+0x12e>
 8006034:	4b80      	ldr	r3, [pc, #512]	; (8006238 <UART_SetConfig+0x2cc>)
 8006036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800603a:	f003 030c 	and.w	r3, r3, #12
 800603e:	2b0c      	cmp	r3, #12
 8006040:	d828      	bhi.n	8006094 <UART_SetConfig+0x128>
 8006042:	a201      	add	r2, pc, #4	; (adr r2, 8006048 <UART_SetConfig+0xdc>)
 8006044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006048:	0800607d 	.word	0x0800607d
 800604c:	08006095 	.word	0x08006095
 8006050:	08006095 	.word	0x08006095
 8006054:	08006095 	.word	0x08006095
 8006058:	08006089 	.word	0x08006089
 800605c:	08006095 	.word	0x08006095
 8006060:	08006095 	.word	0x08006095
 8006064:	08006095 	.word	0x08006095
 8006068:	08006083 	.word	0x08006083
 800606c:	08006095 	.word	0x08006095
 8006070:	08006095 	.word	0x08006095
 8006074:	08006095 	.word	0x08006095
 8006078:	0800608f 	.word	0x0800608f
 800607c:	2300      	movs	r3, #0
 800607e:	77fb      	strb	r3, [r7, #31]
 8006080:	e118      	b.n	80062b4 <UART_SetConfig+0x348>
 8006082:	2302      	movs	r3, #2
 8006084:	77fb      	strb	r3, [r7, #31]
 8006086:	e115      	b.n	80062b4 <UART_SetConfig+0x348>
 8006088:	2304      	movs	r3, #4
 800608a:	77fb      	strb	r3, [r7, #31]
 800608c:	e112      	b.n	80062b4 <UART_SetConfig+0x348>
 800608e:	2308      	movs	r3, #8
 8006090:	77fb      	strb	r3, [r7, #31]
 8006092:	e10f      	b.n	80062b4 <UART_SetConfig+0x348>
 8006094:	2310      	movs	r3, #16
 8006096:	77fb      	strb	r3, [r7, #31]
 8006098:	e10c      	b.n	80062b4 <UART_SetConfig+0x348>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a68      	ldr	r2, [pc, #416]	; (8006240 <UART_SetConfig+0x2d4>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d120      	bne.n	80060e6 <UART_SetConfig+0x17a>
 80060a4:	4b64      	ldr	r3, [pc, #400]	; (8006238 <UART_SetConfig+0x2cc>)
 80060a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80060ae:	2b30      	cmp	r3, #48	; 0x30
 80060b0:	d013      	beq.n	80060da <UART_SetConfig+0x16e>
 80060b2:	2b30      	cmp	r3, #48	; 0x30
 80060b4:	d814      	bhi.n	80060e0 <UART_SetConfig+0x174>
 80060b6:	2b20      	cmp	r3, #32
 80060b8:	d009      	beq.n	80060ce <UART_SetConfig+0x162>
 80060ba:	2b20      	cmp	r3, #32
 80060bc:	d810      	bhi.n	80060e0 <UART_SetConfig+0x174>
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d002      	beq.n	80060c8 <UART_SetConfig+0x15c>
 80060c2:	2b10      	cmp	r3, #16
 80060c4:	d006      	beq.n	80060d4 <UART_SetConfig+0x168>
 80060c6:	e00b      	b.n	80060e0 <UART_SetConfig+0x174>
 80060c8:	2300      	movs	r3, #0
 80060ca:	77fb      	strb	r3, [r7, #31]
 80060cc:	e0f2      	b.n	80062b4 <UART_SetConfig+0x348>
 80060ce:	2302      	movs	r3, #2
 80060d0:	77fb      	strb	r3, [r7, #31]
 80060d2:	e0ef      	b.n	80062b4 <UART_SetConfig+0x348>
 80060d4:	2304      	movs	r3, #4
 80060d6:	77fb      	strb	r3, [r7, #31]
 80060d8:	e0ec      	b.n	80062b4 <UART_SetConfig+0x348>
 80060da:	2308      	movs	r3, #8
 80060dc:	77fb      	strb	r3, [r7, #31]
 80060de:	e0e9      	b.n	80062b4 <UART_SetConfig+0x348>
 80060e0:	2310      	movs	r3, #16
 80060e2:	77fb      	strb	r3, [r7, #31]
 80060e4:	e0e6      	b.n	80062b4 <UART_SetConfig+0x348>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a56      	ldr	r2, [pc, #344]	; (8006244 <UART_SetConfig+0x2d8>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d120      	bne.n	8006132 <UART_SetConfig+0x1c6>
 80060f0:	4b51      	ldr	r3, [pc, #324]	; (8006238 <UART_SetConfig+0x2cc>)
 80060f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80060fa:	2bc0      	cmp	r3, #192	; 0xc0
 80060fc:	d013      	beq.n	8006126 <UART_SetConfig+0x1ba>
 80060fe:	2bc0      	cmp	r3, #192	; 0xc0
 8006100:	d814      	bhi.n	800612c <UART_SetConfig+0x1c0>
 8006102:	2b80      	cmp	r3, #128	; 0x80
 8006104:	d009      	beq.n	800611a <UART_SetConfig+0x1ae>
 8006106:	2b80      	cmp	r3, #128	; 0x80
 8006108:	d810      	bhi.n	800612c <UART_SetConfig+0x1c0>
 800610a:	2b00      	cmp	r3, #0
 800610c:	d002      	beq.n	8006114 <UART_SetConfig+0x1a8>
 800610e:	2b40      	cmp	r3, #64	; 0x40
 8006110:	d006      	beq.n	8006120 <UART_SetConfig+0x1b4>
 8006112:	e00b      	b.n	800612c <UART_SetConfig+0x1c0>
 8006114:	2300      	movs	r3, #0
 8006116:	77fb      	strb	r3, [r7, #31]
 8006118:	e0cc      	b.n	80062b4 <UART_SetConfig+0x348>
 800611a:	2302      	movs	r3, #2
 800611c:	77fb      	strb	r3, [r7, #31]
 800611e:	e0c9      	b.n	80062b4 <UART_SetConfig+0x348>
 8006120:	2304      	movs	r3, #4
 8006122:	77fb      	strb	r3, [r7, #31]
 8006124:	e0c6      	b.n	80062b4 <UART_SetConfig+0x348>
 8006126:	2308      	movs	r3, #8
 8006128:	77fb      	strb	r3, [r7, #31]
 800612a:	e0c3      	b.n	80062b4 <UART_SetConfig+0x348>
 800612c:	2310      	movs	r3, #16
 800612e:	77fb      	strb	r3, [r7, #31]
 8006130:	e0c0      	b.n	80062b4 <UART_SetConfig+0x348>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a44      	ldr	r2, [pc, #272]	; (8006248 <UART_SetConfig+0x2dc>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d125      	bne.n	8006188 <UART_SetConfig+0x21c>
 800613c:	4b3e      	ldr	r3, [pc, #248]	; (8006238 <UART_SetConfig+0x2cc>)
 800613e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006146:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800614a:	d017      	beq.n	800617c <UART_SetConfig+0x210>
 800614c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006150:	d817      	bhi.n	8006182 <UART_SetConfig+0x216>
 8006152:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006156:	d00b      	beq.n	8006170 <UART_SetConfig+0x204>
 8006158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800615c:	d811      	bhi.n	8006182 <UART_SetConfig+0x216>
 800615e:	2b00      	cmp	r3, #0
 8006160:	d003      	beq.n	800616a <UART_SetConfig+0x1fe>
 8006162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006166:	d006      	beq.n	8006176 <UART_SetConfig+0x20a>
 8006168:	e00b      	b.n	8006182 <UART_SetConfig+0x216>
 800616a:	2300      	movs	r3, #0
 800616c:	77fb      	strb	r3, [r7, #31]
 800616e:	e0a1      	b.n	80062b4 <UART_SetConfig+0x348>
 8006170:	2302      	movs	r3, #2
 8006172:	77fb      	strb	r3, [r7, #31]
 8006174:	e09e      	b.n	80062b4 <UART_SetConfig+0x348>
 8006176:	2304      	movs	r3, #4
 8006178:	77fb      	strb	r3, [r7, #31]
 800617a:	e09b      	b.n	80062b4 <UART_SetConfig+0x348>
 800617c:	2308      	movs	r3, #8
 800617e:	77fb      	strb	r3, [r7, #31]
 8006180:	e098      	b.n	80062b4 <UART_SetConfig+0x348>
 8006182:	2310      	movs	r3, #16
 8006184:	77fb      	strb	r3, [r7, #31]
 8006186:	e095      	b.n	80062b4 <UART_SetConfig+0x348>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a2f      	ldr	r2, [pc, #188]	; (800624c <UART_SetConfig+0x2e0>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d125      	bne.n	80061de <UART_SetConfig+0x272>
 8006192:	4b29      	ldr	r3, [pc, #164]	; (8006238 <UART_SetConfig+0x2cc>)
 8006194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006198:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800619c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061a0:	d017      	beq.n	80061d2 <UART_SetConfig+0x266>
 80061a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061a6:	d817      	bhi.n	80061d8 <UART_SetConfig+0x26c>
 80061a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061ac:	d00b      	beq.n	80061c6 <UART_SetConfig+0x25a>
 80061ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061b2:	d811      	bhi.n	80061d8 <UART_SetConfig+0x26c>
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d003      	beq.n	80061c0 <UART_SetConfig+0x254>
 80061b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061bc:	d006      	beq.n	80061cc <UART_SetConfig+0x260>
 80061be:	e00b      	b.n	80061d8 <UART_SetConfig+0x26c>
 80061c0:	2301      	movs	r3, #1
 80061c2:	77fb      	strb	r3, [r7, #31]
 80061c4:	e076      	b.n	80062b4 <UART_SetConfig+0x348>
 80061c6:	2302      	movs	r3, #2
 80061c8:	77fb      	strb	r3, [r7, #31]
 80061ca:	e073      	b.n	80062b4 <UART_SetConfig+0x348>
 80061cc:	2304      	movs	r3, #4
 80061ce:	77fb      	strb	r3, [r7, #31]
 80061d0:	e070      	b.n	80062b4 <UART_SetConfig+0x348>
 80061d2:	2308      	movs	r3, #8
 80061d4:	77fb      	strb	r3, [r7, #31]
 80061d6:	e06d      	b.n	80062b4 <UART_SetConfig+0x348>
 80061d8:	2310      	movs	r3, #16
 80061da:	77fb      	strb	r3, [r7, #31]
 80061dc:	e06a      	b.n	80062b4 <UART_SetConfig+0x348>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a1b      	ldr	r2, [pc, #108]	; (8006250 <UART_SetConfig+0x2e4>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d138      	bne.n	800625a <UART_SetConfig+0x2ee>
 80061e8:	4b13      	ldr	r3, [pc, #76]	; (8006238 <UART_SetConfig+0x2cc>)
 80061ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80061f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80061f6:	d017      	beq.n	8006228 <UART_SetConfig+0x2bc>
 80061f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80061fc:	d82a      	bhi.n	8006254 <UART_SetConfig+0x2e8>
 80061fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006202:	d00b      	beq.n	800621c <UART_SetConfig+0x2b0>
 8006204:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006208:	d824      	bhi.n	8006254 <UART_SetConfig+0x2e8>
 800620a:	2b00      	cmp	r3, #0
 800620c:	d003      	beq.n	8006216 <UART_SetConfig+0x2aa>
 800620e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006212:	d006      	beq.n	8006222 <UART_SetConfig+0x2b6>
 8006214:	e01e      	b.n	8006254 <UART_SetConfig+0x2e8>
 8006216:	2300      	movs	r3, #0
 8006218:	77fb      	strb	r3, [r7, #31]
 800621a:	e04b      	b.n	80062b4 <UART_SetConfig+0x348>
 800621c:	2302      	movs	r3, #2
 800621e:	77fb      	strb	r3, [r7, #31]
 8006220:	e048      	b.n	80062b4 <UART_SetConfig+0x348>
 8006222:	2304      	movs	r3, #4
 8006224:	77fb      	strb	r3, [r7, #31]
 8006226:	e045      	b.n	80062b4 <UART_SetConfig+0x348>
 8006228:	2308      	movs	r3, #8
 800622a:	77fb      	strb	r3, [r7, #31]
 800622c:	e042      	b.n	80062b4 <UART_SetConfig+0x348>
 800622e:	bf00      	nop
 8006230:	efff69f3 	.word	0xefff69f3
 8006234:	40011000 	.word	0x40011000
 8006238:	40023800 	.word	0x40023800
 800623c:	40004400 	.word	0x40004400
 8006240:	40004800 	.word	0x40004800
 8006244:	40004c00 	.word	0x40004c00
 8006248:	40005000 	.word	0x40005000
 800624c:	40011400 	.word	0x40011400
 8006250:	40007800 	.word	0x40007800
 8006254:	2310      	movs	r3, #16
 8006256:	77fb      	strb	r3, [r7, #31]
 8006258:	e02c      	b.n	80062b4 <UART_SetConfig+0x348>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a72      	ldr	r2, [pc, #456]	; (8006428 <UART_SetConfig+0x4bc>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d125      	bne.n	80062b0 <UART_SetConfig+0x344>
 8006264:	4b71      	ldr	r3, [pc, #452]	; (800642c <UART_SetConfig+0x4c0>)
 8006266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800626a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800626e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006272:	d017      	beq.n	80062a4 <UART_SetConfig+0x338>
 8006274:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006278:	d817      	bhi.n	80062aa <UART_SetConfig+0x33e>
 800627a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800627e:	d00b      	beq.n	8006298 <UART_SetConfig+0x32c>
 8006280:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006284:	d811      	bhi.n	80062aa <UART_SetConfig+0x33e>
 8006286:	2b00      	cmp	r3, #0
 8006288:	d003      	beq.n	8006292 <UART_SetConfig+0x326>
 800628a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800628e:	d006      	beq.n	800629e <UART_SetConfig+0x332>
 8006290:	e00b      	b.n	80062aa <UART_SetConfig+0x33e>
 8006292:	2300      	movs	r3, #0
 8006294:	77fb      	strb	r3, [r7, #31]
 8006296:	e00d      	b.n	80062b4 <UART_SetConfig+0x348>
 8006298:	2302      	movs	r3, #2
 800629a:	77fb      	strb	r3, [r7, #31]
 800629c:	e00a      	b.n	80062b4 <UART_SetConfig+0x348>
 800629e:	2304      	movs	r3, #4
 80062a0:	77fb      	strb	r3, [r7, #31]
 80062a2:	e007      	b.n	80062b4 <UART_SetConfig+0x348>
 80062a4:	2308      	movs	r3, #8
 80062a6:	77fb      	strb	r3, [r7, #31]
 80062a8:	e004      	b.n	80062b4 <UART_SetConfig+0x348>
 80062aa:	2310      	movs	r3, #16
 80062ac:	77fb      	strb	r3, [r7, #31]
 80062ae:	e001      	b.n	80062b4 <UART_SetConfig+0x348>
 80062b0:	2310      	movs	r3, #16
 80062b2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	69db      	ldr	r3, [r3, #28]
 80062b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062bc:	d15b      	bne.n	8006376 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80062be:	7ffb      	ldrb	r3, [r7, #31]
 80062c0:	2b08      	cmp	r3, #8
 80062c2:	d828      	bhi.n	8006316 <UART_SetConfig+0x3aa>
 80062c4:	a201      	add	r2, pc, #4	; (adr r2, 80062cc <UART_SetConfig+0x360>)
 80062c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ca:	bf00      	nop
 80062cc:	080062f1 	.word	0x080062f1
 80062d0:	080062f9 	.word	0x080062f9
 80062d4:	08006301 	.word	0x08006301
 80062d8:	08006317 	.word	0x08006317
 80062dc:	08006307 	.word	0x08006307
 80062e0:	08006317 	.word	0x08006317
 80062e4:	08006317 	.word	0x08006317
 80062e8:	08006317 	.word	0x08006317
 80062ec:	0800630f 	.word	0x0800630f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062f0:	f7fe fe8c 	bl	800500c <HAL_RCC_GetPCLK1Freq>
 80062f4:	61b8      	str	r0, [r7, #24]
        break;
 80062f6:	e013      	b.n	8006320 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062f8:	f7fe fe9c 	bl	8005034 <HAL_RCC_GetPCLK2Freq>
 80062fc:	61b8      	str	r0, [r7, #24]
        break;
 80062fe:	e00f      	b.n	8006320 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006300:	4b4b      	ldr	r3, [pc, #300]	; (8006430 <UART_SetConfig+0x4c4>)
 8006302:	61bb      	str	r3, [r7, #24]
        break;
 8006304:	e00c      	b.n	8006320 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006306:	f7fe fd6f 	bl	8004de8 <HAL_RCC_GetSysClockFreq>
 800630a:	61b8      	str	r0, [r7, #24]
        break;
 800630c:	e008      	b.n	8006320 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800630e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006312:	61bb      	str	r3, [r7, #24]
        break;
 8006314:	e004      	b.n	8006320 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006316:	2300      	movs	r3, #0
 8006318:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	77bb      	strb	r3, [r7, #30]
        break;
 800631e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d074      	beq.n	8006410 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	005a      	lsls	r2, r3, #1
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	085b      	lsrs	r3, r3, #1
 8006330:	441a      	add	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	fbb2 f3f3 	udiv	r3, r2, r3
 800633a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	2b0f      	cmp	r3, #15
 8006340:	d916      	bls.n	8006370 <UART_SetConfig+0x404>
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006348:	d212      	bcs.n	8006370 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	b29b      	uxth	r3, r3
 800634e:	f023 030f 	bic.w	r3, r3, #15
 8006352:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	085b      	lsrs	r3, r3, #1
 8006358:	b29b      	uxth	r3, r3
 800635a:	f003 0307 	and.w	r3, r3, #7
 800635e:	b29a      	uxth	r2, r3
 8006360:	89fb      	ldrh	r3, [r7, #14]
 8006362:	4313      	orrs	r3, r2
 8006364:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	89fa      	ldrh	r2, [r7, #14]
 800636c:	60da      	str	r2, [r3, #12]
 800636e:	e04f      	b.n	8006410 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	77bb      	strb	r3, [r7, #30]
 8006374:	e04c      	b.n	8006410 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006376:	7ffb      	ldrb	r3, [r7, #31]
 8006378:	2b08      	cmp	r3, #8
 800637a:	d828      	bhi.n	80063ce <UART_SetConfig+0x462>
 800637c:	a201      	add	r2, pc, #4	; (adr r2, 8006384 <UART_SetConfig+0x418>)
 800637e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006382:	bf00      	nop
 8006384:	080063a9 	.word	0x080063a9
 8006388:	080063b1 	.word	0x080063b1
 800638c:	080063b9 	.word	0x080063b9
 8006390:	080063cf 	.word	0x080063cf
 8006394:	080063bf 	.word	0x080063bf
 8006398:	080063cf 	.word	0x080063cf
 800639c:	080063cf 	.word	0x080063cf
 80063a0:	080063cf 	.word	0x080063cf
 80063a4:	080063c7 	.word	0x080063c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063a8:	f7fe fe30 	bl	800500c <HAL_RCC_GetPCLK1Freq>
 80063ac:	61b8      	str	r0, [r7, #24]
        break;
 80063ae:	e013      	b.n	80063d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063b0:	f7fe fe40 	bl	8005034 <HAL_RCC_GetPCLK2Freq>
 80063b4:	61b8      	str	r0, [r7, #24]
        break;
 80063b6:	e00f      	b.n	80063d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063b8:	4b1d      	ldr	r3, [pc, #116]	; (8006430 <UART_SetConfig+0x4c4>)
 80063ba:	61bb      	str	r3, [r7, #24]
        break;
 80063bc:	e00c      	b.n	80063d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063be:	f7fe fd13 	bl	8004de8 <HAL_RCC_GetSysClockFreq>
 80063c2:	61b8      	str	r0, [r7, #24]
        break;
 80063c4:	e008      	b.n	80063d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063ca:	61bb      	str	r3, [r7, #24]
        break;
 80063cc:	e004      	b.n	80063d8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80063ce:	2300      	movs	r3, #0
 80063d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	77bb      	strb	r3, [r7, #30]
        break;
 80063d6:	bf00      	nop
    }

    if (pclk != 0U)
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d018      	beq.n	8006410 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	085a      	lsrs	r2, r3, #1
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	441a      	add	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	2b0f      	cmp	r3, #15
 80063f6:	d909      	bls.n	800640c <UART_SetConfig+0x4a0>
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063fe:	d205      	bcs.n	800640c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	b29a      	uxth	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	60da      	str	r2, [r3, #12]
 800640a:	e001      	b.n	8006410 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800641c:	7fbb      	ldrb	r3, [r7, #30]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3720      	adds	r7, #32
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	40007c00 	.word	0x40007c00
 800642c:	40023800 	.word	0x40023800
 8006430:	00f42400 	.word	0x00f42400

08006434 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00a      	beq.n	800645e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	430a      	orrs	r2, r1
 800645c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00a      	beq.n	8006480 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	430a      	orrs	r2, r1
 800647e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006484:	f003 0304 	and.w	r3, r3, #4
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00a      	beq.n	80064a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	430a      	orrs	r2, r1
 80064a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a6:	f003 0308 	and.w	r3, r3, #8
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00a      	beq.n	80064c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	430a      	orrs	r2, r1
 80064c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c8:	f003 0310 	and.w	r3, r3, #16
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00a      	beq.n	80064e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	430a      	orrs	r2, r1
 80064e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ea:	f003 0320 	and.w	r3, r3, #32
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00a      	beq.n	8006508 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	430a      	orrs	r2, r1
 8006506:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006510:	2b00      	cmp	r3, #0
 8006512:	d01a      	beq.n	800654a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	430a      	orrs	r2, r1
 8006528:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006532:	d10a      	bne.n	800654a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	430a      	orrs	r2, r1
 8006548:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00a      	beq.n	800656c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	430a      	orrs	r2, r1
 800656a:	605a      	str	r2, [r3, #4]
  }
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b086      	sub	sp, #24
 800657c:	af02      	add	r7, sp, #8
 800657e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006588:	f7fb ff7e 	bl	8002488 <HAL_GetTick>
 800658c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 0308 	and.w	r3, r3, #8
 8006598:	2b08      	cmp	r3, #8
 800659a:	d10e      	bne.n	80065ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800659c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f831 	bl	8006612 <UART_WaitOnFlagUntilTimeout>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d001      	beq.n	80065ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e027      	b.n	800660a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0304 	and.w	r3, r3, #4
 80065c4:	2b04      	cmp	r3, #4
 80065c6:	d10e      	bne.n	80065e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065cc:	9300      	str	r3, [sp, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f81b 	bl	8006612 <UART_WaitOnFlagUntilTimeout>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d001      	beq.n	80065e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e011      	b.n	800660a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2220      	movs	r2, #32
 80065ea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2220      	movs	r2, #32
 80065f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006612:	b580      	push	{r7, lr}
 8006614:	b09c      	sub	sp, #112	; 0x70
 8006616:	af00      	add	r7, sp, #0
 8006618:	60f8      	str	r0, [r7, #12]
 800661a:	60b9      	str	r1, [r7, #8]
 800661c:	603b      	str	r3, [r7, #0]
 800661e:	4613      	mov	r3, r2
 8006620:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006622:	e0a7      	b.n	8006774 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006624:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800662a:	f000 80a3 	beq.w	8006774 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800662e:	f7fb ff2b 	bl	8002488 <HAL_GetTick>
 8006632:	4602      	mov	r2, r0
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800663a:	429a      	cmp	r2, r3
 800663c:	d302      	bcc.n	8006644 <UART_WaitOnFlagUntilTimeout+0x32>
 800663e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006640:	2b00      	cmp	r3, #0
 8006642:	d13f      	bne.n	80066c4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800664c:	e853 3f00 	ldrex	r3, [r3]
 8006650:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006654:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006658:	667b      	str	r3, [r7, #100]	; 0x64
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	461a      	mov	r2, r3
 8006660:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006662:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006664:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006666:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006668:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800666a:	e841 2300 	strex	r3, r2, [r1]
 800666e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1e6      	bne.n	8006644 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	3308      	adds	r3, #8
 800667c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006680:	e853 3f00 	ldrex	r3, [r3]
 8006684:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006688:	f023 0301 	bic.w	r3, r3, #1
 800668c:	663b      	str	r3, [r7, #96]	; 0x60
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	3308      	adds	r3, #8
 8006694:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006696:	64ba      	str	r2, [r7, #72]	; 0x48
 8006698:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800669c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800669e:	e841 2300 	strex	r3, r2, [r1]
 80066a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80066a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1e5      	bne.n	8006676 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2220      	movs	r2, #32
 80066ae:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2220      	movs	r2, #32
 80066b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80066c0:	2303      	movs	r3, #3
 80066c2:	e068      	b.n	8006796 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0304 	and.w	r3, r3, #4
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d050      	beq.n	8006774 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	69db      	ldr	r3, [r3, #28]
 80066d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066e0:	d148      	bne.n	8006774 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066ea:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f4:	e853 3f00 	ldrex	r3, [r3]
 80066f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006700:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	461a      	mov	r2, r3
 8006708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800670a:	637b      	str	r3, [r7, #52]	; 0x34
 800670c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006710:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006712:	e841 2300 	strex	r3, r2, [r1]
 8006716:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1e6      	bne.n	80066ec <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	3308      	adds	r3, #8
 8006724:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	e853 3f00 	ldrex	r3, [r3]
 800672c:	613b      	str	r3, [r7, #16]
   return(result);
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	f023 0301 	bic.w	r3, r3, #1
 8006734:	66bb      	str	r3, [r7, #104]	; 0x68
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	3308      	adds	r3, #8
 800673c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800673e:	623a      	str	r2, [r7, #32]
 8006740:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006742:	69f9      	ldr	r1, [r7, #28]
 8006744:	6a3a      	ldr	r2, [r7, #32]
 8006746:	e841 2300 	strex	r3, r2, [r1]
 800674a:	61bb      	str	r3, [r7, #24]
   return(result);
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1e5      	bne.n	800671e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2220      	movs	r2, #32
 8006756:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2220      	movs	r2, #32
 800675c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2220      	movs	r2, #32
 8006764:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	e010      	b.n	8006796 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	69da      	ldr	r2, [r3, #28]
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	4013      	ands	r3, r2
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	429a      	cmp	r2, r3
 8006782:	bf0c      	ite	eq
 8006784:	2301      	moveq	r3, #1
 8006786:	2300      	movne	r3, #0
 8006788:	b2db      	uxtb	r3, r3
 800678a:	461a      	mov	r2, r3
 800678c:	79fb      	ldrb	r3, [r7, #7]
 800678e:	429a      	cmp	r2, r3
 8006790:	f43f af48 	beq.w	8006624 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3770      	adds	r7, #112	; 0x70
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
	...

080067a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067a0:	b084      	sub	sp, #16
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b084      	sub	sp, #16
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
 80067aa:	f107 001c 	add.w	r0, r7, #28
 80067ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d120      	bne.n	80067fa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	68da      	ldr	r2, [r3, #12]
 80067c8:	4b20      	ldr	r3, [pc, #128]	; (800684c <USB_CoreInit+0xac>)
 80067ca:	4013      	ands	r3, r2
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80067dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d105      	bne.n	80067ee <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f001 fbee 	bl	8007fd0 <USB_CoreReset>
 80067f4:	4603      	mov	r3, r0
 80067f6:	73fb      	strb	r3, [r7, #15]
 80067f8:	e010      	b.n	800681c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f001 fbe2 	bl	8007fd0 <USB_CoreReset>
 800680c:	4603      	mov	r3, r0
 800680e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006814:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800681c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681e:	2b01      	cmp	r3, #1
 8006820:	d10b      	bne.n	800683a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f043 0206 	orr.w	r2, r3, #6
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	f043 0220 	orr.w	r2, r3, #32
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800683a:	7bfb      	ldrb	r3, [r7, #15]
}
 800683c:	4618      	mov	r0, r3
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006846:	b004      	add	sp, #16
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	ffbdffbf 	.word	0xffbdffbf

08006850 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006850:	b480      	push	{r7}
 8006852:	b087      	sub	sp, #28
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	4613      	mov	r3, r2
 800685c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800685e:	79fb      	ldrb	r3, [r7, #7]
 8006860:	2b02      	cmp	r3, #2
 8006862:	d165      	bne.n	8006930 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	4a41      	ldr	r2, [pc, #260]	; (800696c <USB_SetTurnaroundTime+0x11c>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d906      	bls.n	800687a <USB_SetTurnaroundTime+0x2a>
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	4a40      	ldr	r2, [pc, #256]	; (8006970 <USB_SetTurnaroundTime+0x120>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d202      	bcs.n	800687a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006874:	230f      	movs	r3, #15
 8006876:	617b      	str	r3, [r7, #20]
 8006878:	e062      	b.n	8006940 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	4a3c      	ldr	r2, [pc, #240]	; (8006970 <USB_SetTurnaroundTime+0x120>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d306      	bcc.n	8006890 <USB_SetTurnaroundTime+0x40>
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	4a3b      	ldr	r2, [pc, #236]	; (8006974 <USB_SetTurnaroundTime+0x124>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d202      	bcs.n	8006890 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800688a:	230e      	movs	r3, #14
 800688c:	617b      	str	r3, [r7, #20]
 800688e:	e057      	b.n	8006940 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	4a38      	ldr	r2, [pc, #224]	; (8006974 <USB_SetTurnaroundTime+0x124>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d306      	bcc.n	80068a6 <USB_SetTurnaroundTime+0x56>
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	4a37      	ldr	r2, [pc, #220]	; (8006978 <USB_SetTurnaroundTime+0x128>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d202      	bcs.n	80068a6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80068a0:	230d      	movs	r3, #13
 80068a2:	617b      	str	r3, [r7, #20]
 80068a4:	e04c      	b.n	8006940 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	4a33      	ldr	r2, [pc, #204]	; (8006978 <USB_SetTurnaroundTime+0x128>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d306      	bcc.n	80068bc <USB_SetTurnaroundTime+0x6c>
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	4a32      	ldr	r2, [pc, #200]	; (800697c <USB_SetTurnaroundTime+0x12c>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d802      	bhi.n	80068bc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80068b6:	230c      	movs	r3, #12
 80068b8:	617b      	str	r3, [r7, #20]
 80068ba:	e041      	b.n	8006940 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	4a2f      	ldr	r2, [pc, #188]	; (800697c <USB_SetTurnaroundTime+0x12c>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d906      	bls.n	80068d2 <USB_SetTurnaroundTime+0x82>
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	4a2e      	ldr	r2, [pc, #184]	; (8006980 <USB_SetTurnaroundTime+0x130>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d802      	bhi.n	80068d2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80068cc:	230b      	movs	r3, #11
 80068ce:	617b      	str	r3, [r7, #20]
 80068d0:	e036      	b.n	8006940 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	4a2a      	ldr	r2, [pc, #168]	; (8006980 <USB_SetTurnaroundTime+0x130>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d906      	bls.n	80068e8 <USB_SetTurnaroundTime+0x98>
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	4a29      	ldr	r2, [pc, #164]	; (8006984 <USB_SetTurnaroundTime+0x134>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d802      	bhi.n	80068e8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80068e2:	230a      	movs	r3, #10
 80068e4:	617b      	str	r3, [r7, #20]
 80068e6:	e02b      	b.n	8006940 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	4a26      	ldr	r2, [pc, #152]	; (8006984 <USB_SetTurnaroundTime+0x134>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d906      	bls.n	80068fe <USB_SetTurnaroundTime+0xae>
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	4a25      	ldr	r2, [pc, #148]	; (8006988 <USB_SetTurnaroundTime+0x138>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d202      	bcs.n	80068fe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80068f8:	2309      	movs	r3, #9
 80068fa:	617b      	str	r3, [r7, #20]
 80068fc:	e020      	b.n	8006940 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	4a21      	ldr	r2, [pc, #132]	; (8006988 <USB_SetTurnaroundTime+0x138>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d306      	bcc.n	8006914 <USB_SetTurnaroundTime+0xc4>
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	4a20      	ldr	r2, [pc, #128]	; (800698c <USB_SetTurnaroundTime+0x13c>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d802      	bhi.n	8006914 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800690e:	2308      	movs	r3, #8
 8006910:	617b      	str	r3, [r7, #20]
 8006912:	e015      	b.n	8006940 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	4a1d      	ldr	r2, [pc, #116]	; (800698c <USB_SetTurnaroundTime+0x13c>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d906      	bls.n	800692a <USB_SetTurnaroundTime+0xda>
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	4a1c      	ldr	r2, [pc, #112]	; (8006990 <USB_SetTurnaroundTime+0x140>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d202      	bcs.n	800692a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006924:	2307      	movs	r3, #7
 8006926:	617b      	str	r3, [r7, #20]
 8006928:	e00a      	b.n	8006940 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800692a:	2306      	movs	r3, #6
 800692c:	617b      	str	r3, [r7, #20]
 800692e:	e007      	b.n	8006940 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006930:	79fb      	ldrb	r3, [r7, #7]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d102      	bne.n	800693c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006936:	2309      	movs	r3, #9
 8006938:	617b      	str	r3, [r7, #20]
 800693a:	e001      	b.n	8006940 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800693c:	2309      	movs	r3, #9
 800693e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	68da      	ldr	r2, [r3, #12]
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	029b      	lsls	r3, r3, #10
 8006954:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006958:	431a      	orrs	r2, r3
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	371c      	adds	r7, #28
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr
 800696c:	00d8acbf 	.word	0x00d8acbf
 8006970:	00e4e1c0 	.word	0x00e4e1c0
 8006974:	00f42400 	.word	0x00f42400
 8006978:	01067380 	.word	0x01067380
 800697c:	011a499f 	.word	0x011a499f
 8006980:	01312cff 	.word	0x01312cff
 8006984:	014ca43f 	.word	0x014ca43f
 8006988:	016e3600 	.word	0x016e3600
 800698c:	01a6ab1f 	.word	0x01a6ab1f
 8006990:	01e84800 	.word	0x01e84800

08006994 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f043 0201 	orr.w	r2, r3, #1
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	370c      	adds	r7, #12
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80069b6:	b480      	push	{r7}
 80069b8:	b083      	sub	sp, #12
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	f023 0201 	bic.w	r2, r3, #1
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	460b      	mov	r3, r1
 80069e2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80069e4:	2300      	movs	r3, #0
 80069e6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80069f4:	78fb      	ldrb	r3, [r7, #3]
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d115      	bne.n	8006a26 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a06:	2001      	movs	r0, #1
 8006a08:	f7fb fd4a 	bl	80024a0 <HAL_Delay>
      ms++;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f001 fa4b 	bl	8007eae <USB_GetMode>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d01e      	beq.n	8006a5c <USB_SetCurrentMode+0x84>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2b31      	cmp	r3, #49	; 0x31
 8006a22:	d9f0      	bls.n	8006a06 <USB_SetCurrentMode+0x2e>
 8006a24:	e01a      	b.n	8006a5c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006a26:	78fb      	ldrb	r3, [r7, #3]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d115      	bne.n	8006a58 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a38:	2001      	movs	r0, #1
 8006a3a:	f7fb fd31 	bl	80024a0 <HAL_Delay>
      ms++;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	3301      	adds	r3, #1
 8006a42:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f001 fa32 	bl	8007eae <USB_GetMode>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d005      	beq.n	8006a5c <USB_SetCurrentMode+0x84>
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2b31      	cmp	r3, #49	; 0x31
 8006a54:	d9f0      	bls.n	8006a38 <USB_SetCurrentMode+0x60>
 8006a56:	e001      	b.n	8006a5c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e005      	b.n	8006a68 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2b32      	cmp	r3, #50	; 0x32
 8006a60:	d101      	bne.n	8006a66 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e000      	b.n	8006a68 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3710      	adds	r7, #16
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a70:	b084      	sub	sp, #16
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b086      	sub	sp, #24
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
 8006a7a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006a7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006a82:	2300      	movs	r3, #0
 8006a84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	613b      	str	r3, [r7, #16]
 8006a8e:	e009      	b.n	8006aa4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	3340      	adds	r3, #64	; 0x40
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	4413      	add	r3, r2
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	613b      	str	r3, [r7, #16]
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	2b0e      	cmp	r3, #14
 8006aa8:	d9f2      	bls.n	8006a90 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d11c      	bne.n	8006aea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006abe:	f043 0302 	orr.w	r3, r3, #2
 8006ac2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	601a      	str	r2, [r3, #0]
 8006ae8:	e005      	b.n	8006af6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006afc:	461a      	mov	r2, r3
 8006afe:	2300      	movs	r3, #0
 8006b00:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b08:	4619      	mov	r1, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b10:	461a      	mov	r2, r3
 8006b12:	680b      	ldr	r3, [r1, #0]
 8006b14:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d10c      	bne.n	8006b36 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d104      	bne.n	8006b2c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006b22:	2100      	movs	r1, #0
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 f965 	bl	8006df4 <USB_SetDevSpeed>
 8006b2a:	e008      	b.n	8006b3e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006b2c:	2101      	movs	r1, #1
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f960 	bl	8006df4 <USB_SetDevSpeed>
 8006b34:	e003      	b.n	8006b3e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006b36:	2103      	movs	r1, #3
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 f95b 	bl	8006df4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b3e:	2110      	movs	r1, #16
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 f8f3 	bl	8006d2c <USB_FlushTxFifo>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d001      	beq.n	8006b50 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 f91f 	bl	8006d94 <USB_FlushRxFifo>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d001      	beq.n	8006b60 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b66:	461a      	mov	r2, r3
 8006b68:	2300      	movs	r3, #0
 8006b6a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b72:	461a      	mov	r2, r3
 8006b74:	2300      	movs	r3, #0
 8006b76:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b7e:	461a      	mov	r2, r3
 8006b80:	2300      	movs	r3, #0
 8006b82:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b84:	2300      	movs	r3, #0
 8006b86:	613b      	str	r3, [r7, #16]
 8006b88:	e043      	b.n	8006c12 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	015a      	lsls	r2, r3, #5
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	4413      	add	r3, r2
 8006b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ba0:	d118      	bne.n	8006bd4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10a      	bne.n	8006bbe <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	015a      	lsls	r2, r3, #5
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	4413      	add	r3, r2
 8006bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006bba:	6013      	str	r3, [r2, #0]
 8006bbc:	e013      	b.n	8006be6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	015a      	lsls	r2, r3, #5
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bca:	461a      	mov	r2, r3
 8006bcc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006bd0:	6013      	str	r3, [r2, #0]
 8006bd2:	e008      	b.n	8006be6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	015a      	lsls	r2, r3, #5
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be0:	461a      	mov	r2, r3
 8006be2:	2300      	movs	r3, #0
 8006be4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	015a      	lsls	r2, r3, #5
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	4413      	add	r3, r2
 8006bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	015a      	lsls	r2, r3, #5
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	4413      	add	r3, r2
 8006c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c04:	461a      	mov	r2, r3
 8006c06:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c0a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	3301      	adds	r3, #1
 8006c10:	613b      	str	r3, [r7, #16]
 8006c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c14:	693a      	ldr	r2, [r7, #16]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d3b7      	bcc.n	8006b8a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	613b      	str	r3, [r7, #16]
 8006c1e:	e043      	b.n	8006ca8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	015a      	lsls	r2, r3, #5
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	4413      	add	r3, r2
 8006c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c36:	d118      	bne.n	8006c6a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d10a      	bne.n	8006c54 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	015a      	lsls	r2, r3, #5
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c50:	6013      	str	r3, [r2, #0]
 8006c52:	e013      	b.n	8006c7c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	015a      	lsls	r2, r3, #5
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c60:	461a      	mov	r2, r3
 8006c62:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c66:	6013      	str	r3, [r2, #0]
 8006c68:	e008      	b.n	8006c7c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	015a      	lsls	r2, r3, #5
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	4413      	add	r3, r2
 8006c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c76:	461a      	mov	r2, r3
 8006c78:	2300      	movs	r3, #0
 8006c7a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	015a      	lsls	r2, r3, #5
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	4413      	add	r3, r2
 8006c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c88:	461a      	mov	r2, r3
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	015a      	lsls	r2, r3, #5
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	4413      	add	r3, r2
 8006c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ca0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	613b      	str	r3, [r7, #16]
 8006ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006caa:	693a      	ldr	r2, [r7, #16]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d3b7      	bcc.n	8006c20 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cc2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006cd0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d105      	bne.n	8006ce4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	699b      	ldr	r3, [r3, #24]
 8006cdc:	f043 0210 	orr.w	r2, r3, #16
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	699a      	ldr	r2, [r3, #24]
 8006ce8:	4b0e      	ldr	r3, [pc, #56]	; (8006d24 <USB_DevInit+0x2b4>)
 8006cea:	4313      	orrs	r3, r2
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d005      	beq.n	8006d02 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	699b      	ldr	r3, [r3, #24]
 8006cfa:	f043 0208 	orr.w	r2, r3, #8
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d105      	bne.n	8006d14 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	699a      	ldr	r2, [r3, #24]
 8006d0c:	4b06      	ldr	r3, [pc, #24]	; (8006d28 <USB_DevInit+0x2b8>)
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3718      	adds	r7, #24
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d20:	b004      	add	sp, #16
 8006d22:	4770      	bx	lr
 8006d24:	803c3800 	.word	0x803c3800
 8006d28:	40000004 	.word	0x40000004

08006d2c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b085      	sub	sp, #20
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d36:	2300      	movs	r3, #0
 8006d38:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	4a13      	ldr	r2, [pc, #76]	; (8006d90 <USB_FlushTxFifo+0x64>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d901      	bls.n	8006d4c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	e01b      	b.n	8006d84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	daf2      	bge.n	8006d3a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006d54:	2300      	movs	r3, #0
 8006d56:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	019b      	lsls	r3, r3, #6
 8006d5c:	f043 0220 	orr.w	r2, r3, #32
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	3301      	adds	r3, #1
 8006d68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	4a08      	ldr	r2, [pc, #32]	; (8006d90 <USB_FlushTxFifo+0x64>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d901      	bls.n	8006d76 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006d72:	2303      	movs	r3, #3
 8006d74:	e006      	b.n	8006d84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	f003 0320 	and.w	r3, r3, #32
 8006d7e:	2b20      	cmp	r3, #32
 8006d80:	d0f0      	beq.n	8006d64 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3714      	adds	r7, #20
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr
 8006d90:	00030d40 	.word	0x00030d40

08006d94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b085      	sub	sp, #20
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	3301      	adds	r3, #1
 8006da4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	4a11      	ldr	r2, [pc, #68]	; (8006df0 <USB_FlushRxFifo+0x5c>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d901      	bls.n	8006db2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e018      	b.n	8006de4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	daf2      	bge.n	8006da0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2210      	movs	r2, #16
 8006dc2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	4a08      	ldr	r2, [pc, #32]	; (8006df0 <USB_FlushRxFifo+0x5c>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d901      	bls.n	8006dd6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	e006      	b.n	8006de4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	f003 0310 	and.w	r3, r3, #16
 8006dde:	2b10      	cmp	r3, #16
 8006de0:	d0f0      	beq.n	8006dc4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3714      	adds	r7, #20
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr
 8006df0:	00030d40 	.word	0x00030d40

08006df4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	78fb      	ldrb	r3, [r7, #3]
 8006e0e:	68f9      	ldr	r1, [r7, #12]
 8006e10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e14:	4313      	orrs	r3, r2
 8006e16:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3714      	adds	r7, #20
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr

08006e26 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006e26:	b480      	push	{r7}
 8006e28:	b087      	sub	sp, #28
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	f003 0306 	and.w	r3, r3, #6
 8006e3e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d102      	bne.n	8006e4c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006e46:	2300      	movs	r3, #0
 8006e48:	75fb      	strb	r3, [r7, #23]
 8006e4a:	e00a      	b.n	8006e62 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d002      	beq.n	8006e58 <USB_GetDevSpeed+0x32>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2b06      	cmp	r3, #6
 8006e56:	d102      	bne.n	8006e5e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006e58:	2302      	movs	r3, #2
 8006e5a:	75fb      	strb	r3, [r7, #23]
 8006e5c:	e001      	b.n	8006e62 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006e5e:	230f      	movs	r3, #15
 8006e60:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	371c      	adds	r7, #28
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	785b      	ldrb	r3, [r3, #1]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d139      	bne.n	8006f00 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e92:	69da      	ldr	r2, [r3, #28]
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	f003 030f 	and.w	r3, r3, #15
 8006e9c:	2101      	movs	r1, #1
 8006e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	68f9      	ldr	r1, [r7, #12]
 8006ea6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	015a      	lsls	r2, r3, #5
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d153      	bne.n	8006f6c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	015a      	lsls	r2, r3, #5
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	4413      	add	r3, r2
 8006ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	791b      	ldrb	r3, [r3, #4]
 8006ede:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ee0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	059b      	lsls	r3, r3, #22
 8006ee6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ee8:	431a      	orrs	r2, r3
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	0159      	lsls	r1, r3, #5
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	440b      	add	r3, r1
 8006ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	4b20      	ldr	r3, [pc, #128]	; (8006f7c <USB_ActivateEndpoint+0x10c>)
 8006efa:	4313      	orrs	r3, r2
 8006efc:	600b      	str	r3, [r1, #0]
 8006efe:	e035      	b.n	8006f6c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f06:	69da      	ldr	r2, [r3, #28]
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	f003 030f 	and.w	r3, r3, #15
 8006f10:	2101      	movs	r1, #1
 8006f12:	fa01 f303 	lsl.w	r3, r1, r3
 8006f16:	041b      	lsls	r3, r3, #16
 8006f18:	68f9      	ldr	r1, [r7, #12]
 8006f1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	015a      	lsls	r2, r3, #5
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	4413      	add	r3, r2
 8006f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d119      	bne.n	8006f6c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	015a      	lsls	r2, r3, #5
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	4413      	add	r3, r2
 8006f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	791b      	ldrb	r3, [r3, #4]
 8006f52:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006f54:	430b      	orrs	r3, r1
 8006f56:	431a      	orrs	r2, r3
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	0159      	lsls	r1, r3, #5
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	440b      	add	r3, r1
 8006f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f64:	4619      	mov	r1, r3
 8006f66:	4b05      	ldr	r3, [pc, #20]	; (8006f7c <USB_ActivateEndpoint+0x10c>)
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3714      	adds	r7, #20
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	10008000 	.word	0x10008000

08006f80 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	785b      	ldrb	r3, [r3, #1]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d161      	bne.n	8007060 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	015a      	lsls	r2, r3, #5
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fb2:	d11f      	bne.n	8006ff4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	015a      	lsls	r2, r3, #5
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	4413      	add	r3, r2
 8006fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68ba      	ldr	r2, [r7, #8]
 8006fc4:	0151      	lsls	r1, r2, #5
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	440a      	add	r2, r1
 8006fca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006fd2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	015a      	lsls	r2, r3, #5
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	4413      	add	r3, r2
 8006fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	0151      	lsls	r1, r2, #5
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	440a      	add	r2, r1
 8006fea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ff2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ffa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	f003 030f 	and.w	r3, r3, #15
 8007004:	2101      	movs	r1, #1
 8007006:	fa01 f303 	lsl.w	r3, r1, r3
 800700a:	b29b      	uxth	r3, r3
 800700c:	43db      	mvns	r3, r3
 800700e:	68f9      	ldr	r1, [r7, #12]
 8007010:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007014:	4013      	ands	r3, r2
 8007016:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800701e:	69da      	ldr	r2, [r3, #28]
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	f003 030f 	and.w	r3, r3, #15
 8007028:	2101      	movs	r1, #1
 800702a:	fa01 f303 	lsl.w	r3, r1, r3
 800702e:	b29b      	uxth	r3, r3
 8007030:	43db      	mvns	r3, r3
 8007032:	68f9      	ldr	r1, [r7, #12]
 8007034:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007038:	4013      	ands	r3, r2
 800703a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	015a      	lsls	r2, r3, #5
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	4413      	add	r3, r2
 8007044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	0159      	lsls	r1, r3, #5
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	440b      	add	r3, r1
 8007052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007056:	4619      	mov	r1, r3
 8007058:	4b35      	ldr	r3, [pc, #212]	; (8007130 <USB_DeactivateEndpoint+0x1b0>)
 800705a:	4013      	ands	r3, r2
 800705c:	600b      	str	r3, [r1, #0]
 800705e:	e060      	b.n	8007122 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	015a      	lsls	r2, r3, #5
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	4413      	add	r3, r2
 8007068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007072:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007076:	d11f      	bne.n	80070b8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	015a      	lsls	r2, r3, #5
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	4413      	add	r3, r2
 8007080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	0151      	lsls	r1, r2, #5
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	440a      	add	r2, r1
 800708e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007092:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007096:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	015a      	lsls	r2, r3, #5
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	4413      	add	r3, r2
 80070a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68ba      	ldr	r2, [r7, #8]
 80070a8:	0151      	lsls	r1, r2, #5
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	440a      	add	r2, r1
 80070ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	f003 030f 	and.w	r3, r3, #15
 80070c8:	2101      	movs	r1, #1
 80070ca:	fa01 f303 	lsl.w	r3, r1, r3
 80070ce:	041b      	lsls	r3, r3, #16
 80070d0:	43db      	mvns	r3, r3
 80070d2:	68f9      	ldr	r1, [r7, #12]
 80070d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070d8:	4013      	ands	r3, r2
 80070da:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070e2:	69da      	ldr	r2, [r3, #28]
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	f003 030f 	and.w	r3, r3, #15
 80070ec:	2101      	movs	r1, #1
 80070ee:	fa01 f303 	lsl.w	r3, r1, r3
 80070f2:	041b      	lsls	r3, r3, #16
 80070f4:	43db      	mvns	r3, r3
 80070f6:	68f9      	ldr	r1, [r7, #12]
 80070f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070fc:	4013      	ands	r3, r2
 80070fe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	015a      	lsls	r2, r3, #5
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	4413      	add	r3, r2
 8007108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	0159      	lsls	r1, r3, #5
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	440b      	add	r3, r1
 8007116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800711a:	4619      	mov	r1, r3
 800711c:	4b05      	ldr	r3, [pc, #20]	; (8007134 <USB_DeactivateEndpoint+0x1b4>)
 800711e:	4013      	ands	r3, r2
 8007120:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3714      	adds	r7, #20
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr
 8007130:	ec337800 	.word	0xec337800
 8007134:	eff37800 	.word	0xeff37800

08007138 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b08a      	sub	sp, #40	; 0x28
 800713c:	af02      	add	r7, sp, #8
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	4613      	mov	r3, r2
 8007144:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	785b      	ldrb	r3, [r3, #1]
 8007154:	2b01      	cmp	r3, #1
 8007156:	f040 8163 	bne.w	8007420 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	699b      	ldr	r3, [r3, #24]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d132      	bne.n	80071c8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	015a      	lsls	r2, r3, #5
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	4413      	add	r3, r2
 800716a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800716e:	691a      	ldr	r2, [r3, #16]
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	0159      	lsls	r1, r3, #5
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	440b      	add	r3, r1
 8007178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800717c:	4619      	mov	r1, r3
 800717e:	4ba5      	ldr	r3, [pc, #660]	; (8007414 <USB_EPStartXfer+0x2dc>)
 8007180:	4013      	ands	r3, r2
 8007182:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	015a      	lsls	r2, r3, #5
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	4413      	add	r3, r2
 800718c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	69ba      	ldr	r2, [r7, #24]
 8007194:	0151      	lsls	r1, r2, #5
 8007196:	69fa      	ldr	r2, [r7, #28]
 8007198:	440a      	add	r2, r1
 800719a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800719e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	015a      	lsls	r2, r3, #5
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	4413      	add	r3, r2
 80071ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071b0:	691a      	ldr	r2, [r3, #16]
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	0159      	lsls	r1, r3, #5
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	440b      	add	r3, r1
 80071ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071be:	4619      	mov	r1, r3
 80071c0:	4b95      	ldr	r3, [pc, #596]	; (8007418 <USB_EPStartXfer+0x2e0>)
 80071c2:	4013      	ands	r3, r2
 80071c4:	610b      	str	r3, [r1, #16]
 80071c6:	e074      	b.n	80072b2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	015a      	lsls	r2, r3, #5
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	4413      	add	r3, r2
 80071d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071d4:	691a      	ldr	r2, [r3, #16]
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	0159      	lsls	r1, r3, #5
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	440b      	add	r3, r1
 80071de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071e2:	4619      	mov	r1, r3
 80071e4:	4b8c      	ldr	r3, [pc, #560]	; (8007418 <USB_EPStartXfer+0x2e0>)
 80071e6:	4013      	ands	r3, r2
 80071e8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	015a      	lsls	r2, r3, #5
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	4413      	add	r3, r2
 80071f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071f6:	691a      	ldr	r2, [r3, #16]
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	0159      	lsls	r1, r3, #5
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	440b      	add	r3, r1
 8007200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007204:	4619      	mov	r1, r3
 8007206:	4b83      	ldr	r3, [pc, #524]	; (8007414 <USB_EPStartXfer+0x2dc>)
 8007208:	4013      	ands	r3, r2
 800720a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	015a      	lsls	r2, r3, #5
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	4413      	add	r3, r2
 8007214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007218:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	6999      	ldr	r1, [r3, #24]
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	440b      	add	r3, r1
 8007224:	1e59      	subs	r1, r3, #1
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	fbb1 f3f3 	udiv	r3, r1, r3
 800722e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007230:	4b7a      	ldr	r3, [pc, #488]	; (800741c <USB_EPStartXfer+0x2e4>)
 8007232:	400b      	ands	r3, r1
 8007234:	69b9      	ldr	r1, [r7, #24]
 8007236:	0148      	lsls	r0, r1, #5
 8007238:	69f9      	ldr	r1, [r7, #28]
 800723a:	4401      	add	r1, r0
 800723c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007240:	4313      	orrs	r3, r2
 8007242:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	4413      	add	r3, r2
 800724c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007250:	691a      	ldr	r2, [r3, #16]
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	699b      	ldr	r3, [r3, #24]
 8007256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800725a:	69b9      	ldr	r1, [r7, #24]
 800725c:	0148      	lsls	r0, r1, #5
 800725e:	69f9      	ldr	r1, [r7, #28]
 8007260:	4401      	add	r1, r0
 8007262:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007266:	4313      	orrs	r3, r2
 8007268:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	791b      	ldrb	r3, [r3, #4]
 800726e:	2b01      	cmp	r3, #1
 8007270:	d11f      	bne.n	80072b2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	015a      	lsls	r2, r3, #5
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	4413      	add	r3, r2
 800727a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	69ba      	ldr	r2, [r7, #24]
 8007282:	0151      	lsls	r1, r2, #5
 8007284:	69fa      	ldr	r2, [r7, #28]
 8007286:	440a      	add	r2, r1
 8007288:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800728c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007290:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	015a      	lsls	r2, r3, #5
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	4413      	add	r3, r2
 800729a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	69ba      	ldr	r2, [r7, #24]
 80072a2:	0151      	lsls	r1, r2, #5
 80072a4:	69fa      	ldr	r2, [r7, #28]
 80072a6:	440a      	add	r2, r1
 80072a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80072b0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80072b2:	79fb      	ldrb	r3, [r7, #7]
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d14b      	bne.n	8007350 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	695b      	ldr	r3, [r3, #20]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d009      	beq.n	80072d4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	015a      	lsls	r2, r3, #5
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	4413      	add	r3, r2
 80072c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072cc:	461a      	mov	r2, r3
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	695b      	ldr	r3, [r3, #20]
 80072d2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	791b      	ldrb	r3, [r3, #4]
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d128      	bne.n	800732e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d110      	bne.n	800730e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	015a      	lsls	r2, r3, #5
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	4413      	add	r3, r2
 80072f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	69ba      	ldr	r2, [r7, #24]
 80072fc:	0151      	lsls	r1, r2, #5
 80072fe:	69fa      	ldr	r2, [r7, #28]
 8007300:	440a      	add	r2, r1
 8007302:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007306:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800730a:	6013      	str	r3, [r2, #0]
 800730c:	e00f      	b.n	800732e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	015a      	lsls	r2, r3, #5
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	4413      	add	r3, r2
 8007316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	69ba      	ldr	r2, [r7, #24]
 800731e:	0151      	lsls	r1, r2, #5
 8007320:	69fa      	ldr	r2, [r7, #28]
 8007322:	440a      	add	r2, r1
 8007324:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800732c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	015a      	lsls	r2, r3, #5
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	4413      	add	r3, r2
 8007336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	69ba      	ldr	r2, [r7, #24]
 800733e:	0151      	lsls	r1, r2, #5
 8007340:	69fa      	ldr	r2, [r7, #28]
 8007342:	440a      	add	r2, r1
 8007344:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007348:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800734c:	6013      	str	r3, [r2, #0]
 800734e:	e137      	b.n	80075c0 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	015a      	lsls	r2, r3, #5
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	4413      	add	r3, r2
 8007358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	69ba      	ldr	r2, [r7, #24]
 8007360:	0151      	lsls	r1, r2, #5
 8007362:	69fa      	ldr	r2, [r7, #28]
 8007364:	440a      	add	r2, r1
 8007366:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800736a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800736e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	791b      	ldrb	r3, [r3, #4]
 8007374:	2b01      	cmp	r3, #1
 8007376:	d015      	beq.n	80073a4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	699b      	ldr	r3, [r3, #24]
 800737c:	2b00      	cmp	r3, #0
 800737e:	f000 811f 	beq.w	80075c0 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007388:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	f003 030f 	and.w	r3, r3, #15
 8007392:	2101      	movs	r1, #1
 8007394:	fa01 f303 	lsl.w	r3, r1, r3
 8007398:	69f9      	ldr	r1, [r7, #28]
 800739a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800739e:	4313      	orrs	r3, r2
 80073a0:	634b      	str	r3, [r1, #52]	; 0x34
 80073a2:	e10d      	b.n	80075c0 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d110      	bne.n	80073d6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	015a      	lsls	r2, r3, #5
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	4413      	add	r3, r2
 80073bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	69ba      	ldr	r2, [r7, #24]
 80073c4:	0151      	lsls	r1, r2, #5
 80073c6:	69fa      	ldr	r2, [r7, #28]
 80073c8:	440a      	add	r2, r1
 80073ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80073d2:	6013      	str	r3, [r2, #0]
 80073d4:	e00f      	b.n	80073f6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	015a      	lsls	r2, r3, #5
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	4413      	add	r3, r2
 80073de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	69ba      	ldr	r2, [r7, #24]
 80073e6:	0151      	lsls	r1, r2, #5
 80073e8:	69fa      	ldr	r2, [r7, #28]
 80073ea:	440a      	add	r2, r1
 80073ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073f4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	6919      	ldr	r1, [r3, #16]
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	781a      	ldrb	r2, [r3, #0]
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	699b      	ldr	r3, [r3, #24]
 8007402:	b298      	uxth	r0, r3
 8007404:	79fb      	ldrb	r3, [r7, #7]
 8007406:	9300      	str	r3, [sp, #0]
 8007408:	4603      	mov	r3, r0
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f000 faea 	bl	80079e4 <USB_WritePacket>
 8007410:	e0d6      	b.n	80075c0 <USB_EPStartXfer+0x488>
 8007412:	bf00      	nop
 8007414:	e007ffff 	.word	0xe007ffff
 8007418:	fff80000 	.word	0xfff80000
 800741c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	015a      	lsls	r2, r3, #5
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	4413      	add	r3, r2
 8007428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800742c:	691a      	ldr	r2, [r3, #16]
 800742e:	69bb      	ldr	r3, [r7, #24]
 8007430:	0159      	lsls	r1, r3, #5
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	440b      	add	r3, r1
 8007436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800743a:	4619      	mov	r1, r3
 800743c:	4b63      	ldr	r3, [pc, #396]	; (80075cc <USB_EPStartXfer+0x494>)
 800743e:	4013      	ands	r3, r2
 8007440:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	015a      	lsls	r2, r3, #5
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	4413      	add	r3, r2
 800744a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800744e:	691a      	ldr	r2, [r3, #16]
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	0159      	lsls	r1, r3, #5
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	440b      	add	r3, r1
 8007458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800745c:	4619      	mov	r1, r3
 800745e:	4b5c      	ldr	r3, [pc, #368]	; (80075d0 <USB_EPStartXfer+0x498>)
 8007460:	4013      	ands	r3, r2
 8007462:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d123      	bne.n	80074b4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	015a      	lsls	r2, r3, #5
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	4413      	add	r3, r2
 8007474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007478:	691a      	ldr	r2, [r3, #16]
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007482:	69b9      	ldr	r1, [r7, #24]
 8007484:	0148      	lsls	r0, r1, #5
 8007486:	69f9      	ldr	r1, [r7, #28]
 8007488:	4401      	add	r1, r0
 800748a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800748e:	4313      	orrs	r3, r2
 8007490:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	015a      	lsls	r2, r3, #5
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	4413      	add	r3, r2
 800749a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	69ba      	ldr	r2, [r7, #24]
 80074a2:	0151      	lsls	r1, r2, #5
 80074a4:	69fa      	ldr	r2, [r7, #28]
 80074a6:	440a      	add	r2, r1
 80074a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074b0:	6113      	str	r3, [r2, #16]
 80074b2:	e037      	b.n	8007524 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	699a      	ldr	r2, [r3, #24]
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	4413      	add	r3, r2
 80074be:	1e5a      	subs	r2, r3, #1
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80074c8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	8afa      	ldrh	r2, [r7, #22]
 80074d0:	fb03 f202 	mul.w	r2, r3, r2
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	015a      	lsls	r2, r3, #5
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	4413      	add	r3, r2
 80074e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074e4:	691a      	ldr	r2, [r3, #16]
 80074e6:	8afb      	ldrh	r3, [r7, #22]
 80074e8:	04d9      	lsls	r1, r3, #19
 80074ea:	4b3a      	ldr	r3, [pc, #232]	; (80075d4 <USB_EPStartXfer+0x49c>)
 80074ec:	400b      	ands	r3, r1
 80074ee:	69b9      	ldr	r1, [r7, #24]
 80074f0:	0148      	lsls	r0, r1, #5
 80074f2:	69f9      	ldr	r1, [r7, #28]
 80074f4:	4401      	add	r1, r0
 80074f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80074fa:	4313      	orrs	r3, r2
 80074fc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	015a      	lsls	r2, r3, #5
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	4413      	add	r3, r2
 8007506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800750a:	691a      	ldr	r2, [r3, #16]
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	69db      	ldr	r3, [r3, #28]
 8007510:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007514:	69b9      	ldr	r1, [r7, #24]
 8007516:	0148      	lsls	r0, r1, #5
 8007518:	69f9      	ldr	r1, [r7, #28]
 800751a:	4401      	add	r1, r0
 800751c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007520:	4313      	orrs	r3, r2
 8007522:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007524:	79fb      	ldrb	r3, [r7, #7]
 8007526:	2b01      	cmp	r3, #1
 8007528:	d10d      	bne.n	8007546 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d009      	beq.n	8007546 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	6919      	ldr	r1, [r3, #16]
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	015a      	lsls	r2, r3, #5
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	4413      	add	r3, r2
 800753e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007542:	460a      	mov	r2, r1
 8007544:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	791b      	ldrb	r3, [r3, #4]
 800754a:	2b01      	cmp	r3, #1
 800754c:	d128      	bne.n	80075a0 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800755a:	2b00      	cmp	r3, #0
 800755c:	d110      	bne.n	8007580 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	015a      	lsls	r2, r3, #5
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	4413      	add	r3, r2
 8007566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	69ba      	ldr	r2, [r7, #24]
 800756e:	0151      	lsls	r1, r2, #5
 8007570:	69fa      	ldr	r2, [r7, #28]
 8007572:	440a      	add	r2, r1
 8007574:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007578:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800757c:	6013      	str	r3, [r2, #0]
 800757e:	e00f      	b.n	80075a0 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	015a      	lsls	r2, r3, #5
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	4413      	add	r3, r2
 8007588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	69ba      	ldr	r2, [r7, #24]
 8007590:	0151      	lsls	r1, r2, #5
 8007592:	69fa      	ldr	r2, [r7, #28]
 8007594:	440a      	add	r2, r1
 8007596:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800759a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800759e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	015a      	lsls	r2, r3, #5
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	4413      	add	r3, r2
 80075a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	69ba      	ldr	r2, [r7, #24]
 80075b0:	0151      	lsls	r1, r2, #5
 80075b2:	69fa      	ldr	r2, [r7, #28]
 80075b4:	440a      	add	r2, r1
 80075b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3720      	adds	r7, #32
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop
 80075cc:	fff80000 	.word	0xfff80000
 80075d0:	e007ffff 	.word	0xe007ffff
 80075d4:	1ff80000 	.word	0x1ff80000

080075d8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80075d8:	b480      	push	{r7}
 80075da:	b087      	sub	sp, #28
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	4613      	mov	r3, r2
 80075e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	785b      	ldrb	r3, [r3, #1]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	f040 80ce 	bne.w	8007796 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	699b      	ldr	r3, [r3, #24]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d132      	bne.n	8007668 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	015a      	lsls	r2, r3, #5
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	4413      	add	r3, r2
 800760a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800760e:	691a      	ldr	r2, [r3, #16]
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	0159      	lsls	r1, r3, #5
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	440b      	add	r3, r1
 8007618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800761c:	4619      	mov	r1, r3
 800761e:	4b9a      	ldr	r3, [pc, #616]	; (8007888 <USB_EP0StartXfer+0x2b0>)
 8007620:	4013      	ands	r3, r2
 8007622:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	015a      	lsls	r2, r3, #5
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	4413      	add	r3, r2
 800762c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	693a      	ldr	r2, [r7, #16]
 8007634:	0151      	lsls	r1, r2, #5
 8007636:	697a      	ldr	r2, [r7, #20]
 8007638:	440a      	add	r2, r1
 800763a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800763e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007642:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	015a      	lsls	r2, r3, #5
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	4413      	add	r3, r2
 800764c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007650:	691a      	ldr	r2, [r3, #16]
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	0159      	lsls	r1, r3, #5
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	440b      	add	r3, r1
 800765a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800765e:	4619      	mov	r1, r3
 8007660:	4b8a      	ldr	r3, [pc, #552]	; (800788c <USB_EP0StartXfer+0x2b4>)
 8007662:	4013      	ands	r3, r2
 8007664:	610b      	str	r3, [r1, #16]
 8007666:	e04e      	b.n	8007706 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	015a      	lsls	r2, r3, #5
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	4413      	add	r3, r2
 8007670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007674:	691a      	ldr	r2, [r3, #16]
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	0159      	lsls	r1, r3, #5
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	440b      	add	r3, r1
 800767e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007682:	4619      	mov	r1, r3
 8007684:	4b81      	ldr	r3, [pc, #516]	; (800788c <USB_EP0StartXfer+0x2b4>)
 8007686:	4013      	ands	r3, r2
 8007688:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	015a      	lsls	r2, r3, #5
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	4413      	add	r3, r2
 8007692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007696:	691a      	ldr	r2, [r3, #16]
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	0159      	lsls	r1, r3, #5
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	440b      	add	r3, r1
 80076a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076a4:	4619      	mov	r1, r3
 80076a6:	4b78      	ldr	r3, [pc, #480]	; (8007888 <USB_EP0StartXfer+0x2b0>)
 80076a8:	4013      	ands	r3, r2
 80076aa:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	699a      	ldr	r2, [r3, #24]
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d903      	bls.n	80076c0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	68da      	ldr	r2, [r3, #12]
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	015a      	lsls	r2, r3, #5
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	4413      	add	r3, r2
 80076c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	0151      	lsls	r1, r2, #5
 80076d2:	697a      	ldr	r2, [r7, #20]
 80076d4:	440a      	add	r2, r1
 80076d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	015a      	lsls	r2, r3, #5
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	4413      	add	r3, r2
 80076e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ec:	691a      	ldr	r2, [r3, #16]
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	699b      	ldr	r3, [r3, #24]
 80076f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076f6:	6939      	ldr	r1, [r7, #16]
 80076f8:	0148      	lsls	r0, r1, #5
 80076fa:	6979      	ldr	r1, [r7, #20]
 80076fc:	4401      	add	r1, r0
 80076fe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007702:	4313      	orrs	r3, r2
 8007704:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007706:	79fb      	ldrb	r3, [r7, #7]
 8007708:	2b01      	cmp	r3, #1
 800770a:	d11e      	bne.n	800774a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	695b      	ldr	r3, [r3, #20]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d009      	beq.n	8007728 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	015a      	lsls	r2, r3, #5
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	4413      	add	r3, r2
 800771c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007720:	461a      	mov	r2, r3
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	695b      	ldr	r3, [r3, #20]
 8007726:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	015a      	lsls	r2, r3, #5
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	4413      	add	r3, r2
 8007730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	693a      	ldr	r2, [r7, #16]
 8007738:	0151      	lsls	r1, r2, #5
 800773a:	697a      	ldr	r2, [r7, #20]
 800773c:	440a      	add	r2, r1
 800773e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007742:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007746:	6013      	str	r3, [r2, #0]
 8007748:	e097      	b.n	800787a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	015a      	lsls	r2, r3, #5
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	4413      	add	r3, r2
 8007752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	693a      	ldr	r2, [r7, #16]
 800775a:	0151      	lsls	r1, r2, #5
 800775c:	697a      	ldr	r2, [r7, #20]
 800775e:	440a      	add	r2, r1
 8007760:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007764:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007768:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	699b      	ldr	r3, [r3, #24]
 800776e:	2b00      	cmp	r3, #0
 8007770:	f000 8083 	beq.w	800787a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800777a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	f003 030f 	and.w	r3, r3, #15
 8007784:	2101      	movs	r1, #1
 8007786:	fa01 f303 	lsl.w	r3, r1, r3
 800778a:	6979      	ldr	r1, [r7, #20]
 800778c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007790:	4313      	orrs	r3, r2
 8007792:	634b      	str	r3, [r1, #52]	; 0x34
 8007794:	e071      	b.n	800787a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	015a      	lsls	r2, r3, #5
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	4413      	add	r3, r2
 800779e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077a2:	691a      	ldr	r2, [r3, #16]
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	0159      	lsls	r1, r3, #5
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	440b      	add	r3, r1
 80077ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077b0:	4619      	mov	r1, r3
 80077b2:	4b36      	ldr	r3, [pc, #216]	; (800788c <USB_EP0StartXfer+0x2b4>)
 80077b4:	4013      	ands	r3, r2
 80077b6:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	015a      	lsls	r2, r3, #5
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	4413      	add	r3, r2
 80077c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077c4:	691a      	ldr	r2, [r3, #16]
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	0159      	lsls	r1, r3, #5
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	440b      	add	r3, r1
 80077ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077d2:	4619      	mov	r1, r3
 80077d4:	4b2c      	ldr	r3, [pc, #176]	; (8007888 <USB_EP0StartXfer+0x2b0>)
 80077d6:	4013      	ands	r3, r2
 80077d8:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	699b      	ldr	r3, [r3, #24]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d003      	beq.n	80077ea <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	68da      	ldr	r2, [r3, #12]
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	68da      	ldr	r2, [r3, #12]
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	015a      	lsls	r2, r3, #5
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	4413      	add	r3, r2
 80077fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	693a      	ldr	r2, [r7, #16]
 8007802:	0151      	lsls	r1, r2, #5
 8007804:	697a      	ldr	r2, [r7, #20]
 8007806:	440a      	add	r2, r1
 8007808:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800780c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007810:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	015a      	lsls	r2, r3, #5
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	4413      	add	r3, r2
 800781a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800781e:	691a      	ldr	r2, [r3, #16]
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	69db      	ldr	r3, [r3, #28]
 8007824:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007828:	6939      	ldr	r1, [r7, #16]
 800782a:	0148      	lsls	r0, r1, #5
 800782c:	6979      	ldr	r1, [r7, #20]
 800782e:	4401      	add	r1, r0
 8007830:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007834:	4313      	orrs	r3, r2
 8007836:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007838:	79fb      	ldrb	r3, [r7, #7]
 800783a:	2b01      	cmp	r3, #1
 800783c:	d10d      	bne.n	800785a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d009      	beq.n	800785a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	6919      	ldr	r1, [r3, #16]
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	015a      	lsls	r2, r3, #5
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	4413      	add	r3, r2
 8007852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007856:	460a      	mov	r2, r1
 8007858:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	015a      	lsls	r2, r3, #5
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	4413      	add	r3, r2
 8007862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	693a      	ldr	r2, [r7, #16]
 800786a:	0151      	lsls	r1, r2, #5
 800786c:	697a      	ldr	r2, [r7, #20]
 800786e:	440a      	add	r2, r1
 8007870:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007874:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007878:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	371c      	adds	r7, #28
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr
 8007888:	e007ffff 	.word	0xe007ffff
 800788c:	fff80000 	.word	0xfff80000

08007890 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007890:	b480      	push	{r7}
 8007892:	b087      	sub	sp, #28
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800789a:	2300      	movs	r3, #0
 800789c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800789e:	2300      	movs	r3, #0
 80078a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	785b      	ldrb	r3, [r3, #1]
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d14a      	bne.n	8007944 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	015a      	lsls	r2, r3, #5
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	4413      	add	r3, r2
 80078b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078c6:	f040 8086 	bne.w	80079d6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	015a      	lsls	r2, r3, #5
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	4413      	add	r3, r2
 80078d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	683a      	ldr	r2, [r7, #0]
 80078dc:	7812      	ldrb	r2, [r2, #0]
 80078de:	0151      	lsls	r1, r2, #5
 80078e0:	693a      	ldr	r2, [r7, #16]
 80078e2:	440a      	add	r2, r1
 80078e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80078ec:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	015a      	lsls	r2, r3, #5
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	4413      	add	r3, r2
 80078f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	683a      	ldr	r2, [r7, #0]
 8007900:	7812      	ldrb	r2, [r2, #0]
 8007902:	0151      	lsls	r1, r2, #5
 8007904:	693a      	ldr	r2, [r7, #16]
 8007906:	440a      	add	r2, r1
 8007908:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800790c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007910:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	3301      	adds	r3, #1
 8007916:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f242 7210 	movw	r2, #10000	; 0x2710
 800791e:	4293      	cmp	r3, r2
 8007920:	d902      	bls.n	8007928 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	75fb      	strb	r3, [r7, #23]
          break;
 8007926:	e056      	b.n	80079d6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	015a      	lsls	r2, r3, #5
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	4413      	add	r3, r2
 8007932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800793c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007940:	d0e7      	beq.n	8007912 <USB_EPStopXfer+0x82>
 8007942:	e048      	b.n	80079d6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	015a      	lsls	r2, r3, #5
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	4413      	add	r3, r2
 800794e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007958:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800795c:	d13b      	bne.n	80079d6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	015a      	lsls	r2, r3, #5
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	4413      	add	r3, r2
 8007968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	683a      	ldr	r2, [r7, #0]
 8007970:	7812      	ldrb	r2, [r2, #0]
 8007972:	0151      	lsls	r1, r2, #5
 8007974:	693a      	ldr	r2, [r7, #16]
 8007976:	440a      	add	r2, r1
 8007978:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800797c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007980:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	015a      	lsls	r2, r3, #5
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	4413      	add	r3, r2
 800798c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	683a      	ldr	r2, [r7, #0]
 8007994:	7812      	ldrb	r2, [r2, #0]
 8007996:	0151      	lsls	r1, r2, #5
 8007998:	693a      	ldr	r2, [r7, #16]
 800799a:	440a      	add	r2, r1
 800799c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80079a4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	3301      	adds	r3, #1
 80079aa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f242 7210 	movw	r2, #10000	; 0x2710
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d902      	bls.n	80079bc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	75fb      	strb	r3, [r7, #23]
          break;
 80079ba:	e00c      	b.n	80079d6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	015a      	lsls	r2, r3, #5
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	4413      	add	r3, r2
 80079c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079d4:	d0e7      	beq.n	80079a6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80079d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80079d8:	4618      	mov	r0, r3
 80079da:	371c      	adds	r7, #28
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b089      	sub	sp, #36	; 0x24
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	4611      	mov	r1, r2
 80079f0:	461a      	mov	r2, r3
 80079f2:	460b      	mov	r3, r1
 80079f4:	71fb      	strb	r3, [r7, #7]
 80079f6:	4613      	mov	r3, r2
 80079f8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007a02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d123      	bne.n	8007a52 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007a0a:	88bb      	ldrh	r3, [r7, #4]
 8007a0c:	3303      	adds	r3, #3
 8007a0e:	089b      	lsrs	r3, r3, #2
 8007a10:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007a12:	2300      	movs	r3, #0
 8007a14:	61bb      	str	r3, [r7, #24]
 8007a16:	e018      	b.n	8007a4a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007a18:	79fb      	ldrb	r3, [r7, #7]
 8007a1a:	031a      	lsls	r2, r3, #12
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	4413      	add	r3, r2
 8007a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a24:	461a      	mov	r2, r3
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	3301      	adds	r3, #1
 8007a36:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	3301      	adds	r3, #1
 8007a42:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007a44:	69bb      	ldr	r3, [r7, #24]
 8007a46:	3301      	adds	r3, #1
 8007a48:	61bb      	str	r3, [r7, #24]
 8007a4a:	69ba      	ldr	r2, [r7, #24]
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d3e2      	bcc.n	8007a18 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007a52:	2300      	movs	r3, #0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3724      	adds	r7, #36	; 0x24
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b08b      	sub	sp, #44	; 0x2c
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007a76:	88fb      	ldrh	r3, [r7, #6]
 8007a78:	089b      	lsrs	r3, r3, #2
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007a7e:	88fb      	ldrh	r3, [r7, #6]
 8007a80:	f003 0303 	and.w	r3, r3, #3
 8007a84:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007a86:	2300      	movs	r3, #0
 8007a88:	623b      	str	r3, [r7, #32]
 8007a8a:	e014      	b.n	8007ab6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007a8c:	69bb      	ldr	r3, [r7, #24]
 8007a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a96:	601a      	str	r2, [r3, #0]
    pDest++;
 8007a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aac:	3301      	adds	r3, #1
 8007aae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007ab0:	6a3b      	ldr	r3, [r7, #32]
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	623b      	str	r3, [r7, #32]
 8007ab6:	6a3a      	ldr	r2, [r7, #32]
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d3e6      	bcc.n	8007a8c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007abe:	8bfb      	ldrh	r3, [r7, #30]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d01e      	beq.n	8007b02 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ace:	461a      	mov	r2, r3
 8007ad0:	f107 0310 	add.w	r3, r7, #16
 8007ad4:	6812      	ldr	r2, [r2, #0]
 8007ad6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007ad8:	693a      	ldr	r2, [r7, #16]
 8007ada:	6a3b      	ldr	r3, [r7, #32]
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	00db      	lsls	r3, r3, #3
 8007ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ae4:	b2da      	uxtb	r2, r3
 8007ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae8:	701a      	strb	r2, [r3, #0]
      i++;
 8007aea:	6a3b      	ldr	r3, [r7, #32]
 8007aec:	3301      	adds	r3, #1
 8007aee:	623b      	str	r3, [r7, #32]
      pDest++;
 8007af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af2:	3301      	adds	r3, #1
 8007af4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007af6:	8bfb      	ldrh	r3, [r7, #30]
 8007af8:	3b01      	subs	r3, #1
 8007afa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007afc:	8bfb      	ldrh	r3, [r7, #30]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d1ea      	bne.n	8007ad8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	372c      	adds	r7, #44	; 0x2c
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b085      	sub	sp, #20
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	785b      	ldrb	r3, [r3, #1]
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d12c      	bne.n	8007b86 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	015a      	lsls	r2, r3, #5
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	4413      	add	r3, r2
 8007b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	db12      	blt.n	8007b64 <USB_EPSetStall+0x54>
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00f      	beq.n	8007b64 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	015a      	lsls	r2, r3, #5
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	68ba      	ldr	r2, [r7, #8]
 8007b54:	0151      	lsls	r1, r2, #5
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	440a      	add	r2, r1
 8007b5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b62:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	015a      	lsls	r2, r3, #5
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	0151      	lsls	r1, r2, #5
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	440a      	add	r2, r1
 8007b7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b82:	6013      	str	r3, [r2, #0]
 8007b84:	e02b      	b.n	8007bde <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	015a      	lsls	r2, r3, #5
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	db12      	blt.n	8007bbe <USB_EPSetStall+0xae>
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00f      	beq.n	8007bbe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	015a      	lsls	r2, r3, #5
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68ba      	ldr	r2, [r7, #8]
 8007bae:	0151      	lsls	r1, r2, #5
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	440a      	add	r2, r1
 8007bb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bb8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007bbc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	015a      	lsls	r2, r3, #5
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	68ba      	ldr	r2, [r7, #8]
 8007bce:	0151      	lsls	r1, r2, #5
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	440a      	add	r2, r1
 8007bd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007bdc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3714      	adds	r7, #20
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b085      	sub	sp, #20
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	785b      	ldrb	r3, [r3, #1]
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d128      	bne.n	8007c5a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	015a      	lsls	r2, r3, #5
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	4413      	add	r3, r2
 8007c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	0151      	lsls	r1, r2, #5
 8007c1a:	68fa      	ldr	r2, [r7, #12]
 8007c1c:	440a      	add	r2, r1
 8007c1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c26:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	791b      	ldrb	r3, [r3, #4]
 8007c2c:	2b03      	cmp	r3, #3
 8007c2e:	d003      	beq.n	8007c38 <USB_EPClearStall+0x4c>
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	791b      	ldrb	r3, [r3, #4]
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d138      	bne.n	8007caa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	015a      	lsls	r2, r3, #5
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	4413      	add	r3, r2
 8007c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	68ba      	ldr	r2, [r7, #8]
 8007c48:	0151      	lsls	r1, r2, #5
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	440a      	add	r2, r1
 8007c4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c56:	6013      	str	r3, [r2, #0]
 8007c58:	e027      	b.n	8007caa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	015a      	lsls	r2, r3, #5
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	4413      	add	r3, r2
 8007c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	68ba      	ldr	r2, [r7, #8]
 8007c6a:	0151      	lsls	r1, r2, #5
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	440a      	add	r2, r1
 8007c70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c78:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	791b      	ldrb	r3, [r3, #4]
 8007c7e:	2b03      	cmp	r3, #3
 8007c80:	d003      	beq.n	8007c8a <USB_EPClearStall+0x9e>
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	791b      	ldrb	r3, [r3, #4]
 8007c86:	2b02      	cmp	r3, #2
 8007c88:	d10f      	bne.n	8007caa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	015a      	lsls	r2, r3, #5
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	4413      	add	r3, r2
 8007c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	68ba      	ldr	r2, [r7, #8]
 8007c9a:	0151      	lsls	r1, r2, #5
 8007c9c:	68fa      	ldr	r2, [r7, #12]
 8007c9e:	440a      	add	r2, r1
 8007ca0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ca8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3714      	adds	r7, #20
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cd6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007cda:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	78fb      	ldrb	r3, [r7, #3]
 8007ce6:	011b      	lsls	r3, r3, #4
 8007ce8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007cec:	68f9      	ldr	r1, [r7, #12]
 8007cee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3714      	adds	r7, #20
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b085      	sub	sp, #20
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007d1e:	f023 0303 	bic.w	r3, r3, #3
 8007d22:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d32:	f023 0302 	bic.w	r3, r3, #2
 8007d36:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3714      	adds	r7, #20
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr

08007d46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007d46:	b480      	push	{r7}
 8007d48:	b085      	sub	sp, #20
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007d60:	f023 0303 	bic.w	r3, r3, #3
 8007d64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	68fa      	ldr	r2, [r7, #12]
 8007d70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d74:	f043 0302 	orr.w	r3, r3, #2
 8007d78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3714      	adds	r7, #20
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b085      	sub	sp, #20
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	695b      	ldr	r3, [r3, #20]
 8007d94:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	699b      	ldr	r3, [r3, #24]
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007da0:	68fb      	ldr	r3, [r7, #12]
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3714      	adds	r7, #20
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr

08007dae <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007dae:	b480      	push	{r7}
 8007db0:	b085      	sub	sp, #20
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dc0:	699b      	ldr	r3, [r3, #24]
 8007dc2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dca:	69db      	ldr	r3, [r3, #28]
 8007dcc:	68ba      	ldr	r2, [r7, #8]
 8007dce:	4013      	ands	r3, r2
 8007dd0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	0c1b      	lsrs	r3, r3, #16
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3714      	adds	r7, #20
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr

08007de2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007de2:	b480      	push	{r7}
 8007de4:	b085      	sub	sp, #20
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007df4:	699b      	ldr	r3, [r3, #24]
 8007df6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dfe:	69db      	ldr	r3, [r3, #28]
 8007e00:	68ba      	ldr	r2, [r7, #8]
 8007e02:	4013      	ands	r3, r2
 8007e04:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	b29b      	uxth	r3, r3
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3714      	adds	r7, #20
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr

08007e16 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007e16:	b480      	push	{r7}
 8007e18:	b085      	sub	sp, #20
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
 8007e1e:	460b      	mov	r3, r1
 8007e20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007e26:	78fb      	ldrb	r3, [r7, #3]
 8007e28:	015a      	lsls	r2, r3, #5
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e3c:	695b      	ldr	r3, [r3, #20]
 8007e3e:	68ba      	ldr	r2, [r7, #8]
 8007e40:	4013      	ands	r3, r2
 8007e42:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e44:	68bb      	ldr	r3, [r7, #8]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3714      	adds	r7, #20
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr

08007e52 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007e52:	b480      	push	{r7}
 8007e54:	b087      	sub	sp, #28
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e74:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007e76:	78fb      	ldrb	r3, [r7, #3]
 8007e78:	f003 030f 	and.w	r3, r3, #15
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e82:	01db      	lsls	r3, r3, #7
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	693a      	ldr	r2, [r7, #16]
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007e8c:	78fb      	ldrb	r3, [r7, #3]
 8007e8e:	015a      	lsls	r2, r3, #5
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	4413      	add	r3, r2
 8007e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	693a      	ldr	r2, [r7, #16]
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007ea0:	68bb      	ldr	r3, [r7, #8]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	371c      	adds	r7, #28
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr

08007eae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007eae:	b480      	push	{r7}
 8007eb0:	b083      	sub	sp, #12
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	695b      	ldr	r3, [r3, #20]
 8007eba:	f003 0301 	and.w	r3, r3, #1
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	370c      	adds	r7, #12
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr
	...

08007ecc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b085      	sub	sp, #20
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	4b09      	ldr	r3, [pc, #36]	; (8007f10 <USB_ActivateSetup+0x44>)
 8007eea:	4013      	ands	r3, r2
 8007eec:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	68fa      	ldr	r2, [r7, #12]
 8007ef8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f02:	2300      	movs	r3, #0
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3714      	adds	r7, #20
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr
 8007f10:	fffff800 	.word	0xfffff800

08007f14 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b087      	sub	sp, #28
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	607a      	str	r2, [r7, #4]
 8007f20:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	333c      	adds	r3, #60	; 0x3c
 8007f2a:	3304      	adds	r3, #4
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	4a26      	ldr	r2, [pc, #152]	; (8007fcc <USB_EP0_OutStart+0xb8>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d90a      	bls.n	8007f4e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f48:	d101      	bne.n	8007f4e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	e037      	b.n	8007fbe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f54:	461a      	mov	r2, r3
 8007f56:	2300      	movs	r3, #0
 8007f58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	697a      	ldr	r2, [r7, #20]
 8007f64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f74:	691b      	ldr	r3, [r3, #16]
 8007f76:	697a      	ldr	r2, [r7, #20]
 8007f78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f7c:	f043 0318 	orr.w	r3, r3, #24
 8007f80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	697a      	ldr	r2, [r7, #20]
 8007f8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f90:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007f94:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007f96:	7afb      	ldrb	r3, [r7, #11]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d10f      	bne.n	8007fbc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	697a      	ldr	r2, [r7, #20]
 8007fb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fb6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007fba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	371c      	adds	r7, #28
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr
 8007fca:	bf00      	nop
 8007fcc:	4f54300a 	.word	0x4f54300a

08007fd0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	4a13      	ldr	r2, [pc, #76]	; (8008034 <USB_CoreReset+0x64>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d901      	bls.n	8007fee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007fea:	2303      	movs	r3, #3
 8007fec:	e01b      	b.n	8008026 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	daf2      	bge.n	8007fdc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	691b      	ldr	r3, [r3, #16]
 8007ffe:	f043 0201 	orr.w	r2, r3, #1
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	3301      	adds	r3, #1
 800800a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	4a09      	ldr	r2, [pc, #36]	; (8008034 <USB_CoreReset+0x64>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d901      	bls.n	8008018 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008014:	2303      	movs	r3, #3
 8008016:	e006      	b.n	8008026 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	f003 0301 	and.w	r3, r3, #1
 8008020:	2b01      	cmp	r3, #1
 8008022:	d0f0      	beq.n	8008006 <USB_CoreReset+0x36>

  return HAL_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3714      	adds	r7, #20
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop
 8008034:	00030d40 	.word	0x00030d40

08008038 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	460b      	mov	r3, r1
 8008042:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008044:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008048:	f005 fe12 	bl	800dc70 <malloc>
 800804c:	4603      	mov	r3, r0
 800804e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d109      	bne.n	800806a <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	32b0      	adds	r2, #176	; 0xb0
 8008060:	2100      	movs	r1, #0
 8008062:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008066:	2302      	movs	r3, #2
 8008068:	e0d4      	b.n	8008214 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800806a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800806e:	2100      	movs	r1, #0
 8008070:	68f8      	ldr	r0, [r7, #12]
 8008072:	f005 fe1b 	bl	800dcac <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	32b0      	adds	r2, #176	; 0xb0
 8008080:	68f9      	ldr	r1, [r7, #12]
 8008082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	32b0      	adds	r2, #176	; 0xb0
 8008090:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	7c1b      	ldrb	r3, [r3, #16]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d138      	bne.n	8008114 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80080a2:	4b5e      	ldr	r3, [pc, #376]	; (800821c <USBD_CDC_Init+0x1e4>)
 80080a4:	7819      	ldrb	r1, [r3, #0]
 80080a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080aa:	2202      	movs	r2, #2
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f005 fc10 	bl	800d8d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80080b2:	4b5a      	ldr	r3, [pc, #360]	; (800821c <USBD_CDC_Init+0x1e4>)
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	f003 020f 	and.w	r2, r3, #15
 80080ba:	6879      	ldr	r1, [r7, #4]
 80080bc:	4613      	mov	r3, r2
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	4413      	add	r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	440b      	add	r3, r1
 80080c6:	3324      	adds	r3, #36	; 0x24
 80080c8:	2201      	movs	r2, #1
 80080ca:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80080cc:	4b54      	ldr	r3, [pc, #336]	; (8008220 <USBD_CDC_Init+0x1e8>)
 80080ce:	7819      	ldrb	r1, [r3, #0]
 80080d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080d4:	2202      	movs	r2, #2
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f005 fbfb 	bl	800d8d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80080dc:	4b50      	ldr	r3, [pc, #320]	; (8008220 <USBD_CDC_Init+0x1e8>)
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	f003 020f 	and.w	r2, r3, #15
 80080e4:	6879      	ldr	r1, [r7, #4]
 80080e6:	4613      	mov	r3, r2
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	4413      	add	r3, r2
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	440b      	add	r3, r1
 80080f0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80080f4:	2201      	movs	r2, #1
 80080f6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80080f8:	4b4a      	ldr	r3, [pc, #296]	; (8008224 <USBD_CDC_Init+0x1ec>)
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	f003 020f 	and.w	r2, r3, #15
 8008100:	6879      	ldr	r1, [r7, #4]
 8008102:	4613      	mov	r3, r2
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	4413      	add	r3, r2
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	440b      	add	r3, r1
 800810c:	3326      	adds	r3, #38	; 0x26
 800810e:	2210      	movs	r2, #16
 8008110:	801a      	strh	r2, [r3, #0]
 8008112:	e035      	b.n	8008180 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008114:	4b41      	ldr	r3, [pc, #260]	; (800821c <USBD_CDC_Init+0x1e4>)
 8008116:	7819      	ldrb	r1, [r3, #0]
 8008118:	2340      	movs	r3, #64	; 0x40
 800811a:	2202      	movs	r2, #2
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f005 fbd8 	bl	800d8d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008122:	4b3e      	ldr	r3, [pc, #248]	; (800821c <USBD_CDC_Init+0x1e4>)
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	f003 020f 	and.w	r2, r3, #15
 800812a:	6879      	ldr	r1, [r7, #4]
 800812c:	4613      	mov	r3, r2
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	4413      	add	r3, r2
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	440b      	add	r3, r1
 8008136:	3324      	adds	r3, #36	; 0x24
 8008138:	2201      	movs	r2, #1
 800813a:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800813c:	4b38      	ldr	r3, [pc, #224]	; (8008220 <USBD_CDC_Init+0x1e8>)
 800813e:	7819      	ldrb	r1, [r3, #0]
 8008140:	2340      	movs	r3, #64	; 0x40
 8008142:	2202      	movs	r2, #2
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f005 fbc4 	bl	800d8d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800814a:	4b35      	ldr	r3, [pc, #212]	; (8008220 <USBD_CDC_Init+0x1e8>)
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	f003 020f 	and.w	r2, r3, #15
 8008152:	6879      	ldr	r1, [r7, #4]
 8008154:	4613      	mov	r3, r2
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	4413      	add	r3, r2
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	440b      	add	r3, r1
 800815e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008162:	2201      	movs	r2, #1
 8008164:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008166:	4b2f      	ldr	r3, [pc, #188]	; (8008224 <USBD_CDC_Init+0x1ec>)
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	f003 020f 	and.w	r2, r3, #15
 800816e:	6879      	ldr	r1, [r7, #4]
 8008170:	4613      	mov	r3, r2
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	4413      	add	r3, r2
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	440b      	add	r3, r1
 800817a:	3326      	adds	r3, #38	; 0x26
 800817c:	2210      	movs	r2, #16
 800817e:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008180:	4b28      	ldr	r3, [pc, #160]	; (8008224 <USBD_CDC_Init+0x1ec>)
 8008182:	7819      	ldrb	r1, [r3, #0]
 8008184:	2308      	movs	r3, #8
 8008186:	2203      	movs	r2, #3
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f005 fba2 	bl	800d8d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800818e:	4b25      	ldr	r3, [pc, #148]	; (8008224 <USBD_CDC_Init+0x1ec>)
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	f003 020f 	and.w	r2, r3, #15
 8008196:	6879      	ldr	r1, [r7, #4]
 8008198:	4613      	mov	r3, r2
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	4413      	add	r3, r2
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	440b      	add	r3, r1
 80081a2:	3324      	adds	r3, #36	; 0x24
 80081a4:	2201      	movs	r2, #1
 80081a6:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	33b0      	adds	r3, #176	; 0xb0
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	4413      	add	r3, r2
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d101      	bne.n	80081e2 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 80081de:	2302      	movs	r3, #2
 80081e0:	e018      	b.n	8008214 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	7c1b      	ldrb	r3, [r3, #16]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10a      	bne.n	8008200 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80081ea:	4b0d      	ldr	r3, [pc, #52]	; (8008220 <USBD_CDC_Init+0x1e8>)
 80081ec:	7819      	ldrb	r1, [r3, #0]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f005 fc59 	bl	800dab0 <USBD_LL_PrepareReceive>
 80081fe:	e008      	b.n	8008212 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008200:	4b07      	ldr	r3, [pc, #28]	; (8008220 <USBD_CDC_Init+0x1e8>)
 8008202:	7819      	ldrb	r1, [r3, #0]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800820a:	2340      	movs	r3, #64	; 0x40
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f005 fc4f 	bl	800dab0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	3710      	adds	r7, #16
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}
 800821c:	20000093 	.word	0x20000093
 8008220:	20000094 	.word	0x20000094
 8008224:	20000095 	.word	0x20000095

08008228 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	460b      	mov	r3, r1
 8008232:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008234:	4b3a      	ldr	r3, [pc, #232]	; (8008320 <USBD_CDC_DeInit+0xf8>)
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	4619      	mov	r1, r3
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f005 fb6f 	bl	800d91e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008240:	4b37      	ldr	r3, [pc, #220]	; (8008320 <USBD_CDC_DeInit+0xf8>)
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	f003 020f 	and.w	r2, r3, #15
 8008248:	6879      	ldr	r1, [r7, #4]
 800824a:	4613      	mov	r3, r2
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	4413      	add	r3, r2
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	440b      	add	r3, r1
 8008254:	3324      	adds	r3, #36	; 0x24
 8008256:	2200      	movs	r2, #0
 8008258:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800825a:	4b32      	ldr	r3, [pc, #200]	; (8008324 <USBD_CDC_DeInit+0xfc>)
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	4619      	mov	r1, r3
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f005 fb5c 	bl	800d91e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008266:	4b2f      	ldr	r3, [pc, #188]	; (8008324 <USBD_CDC_DeInit+0xfc>)
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	f003 020f 	and.w	r2, r3, #15
 800826e:	6879      	ldr	r1, [r7, #4]
 8008270:	4613      	mov	r3, r2
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	4413      	add	r3, r2
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	440b      	add	r3, r1
 800827a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800827e:	2200      	movs	r2, #0
 8008280:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008282:	4b29      	ldr	r3, [pc, #164]	; (8008328 <USBD_CDC_DeInit+0x100>)
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	4619      	mov	r1, r3
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f005 fb48 	bl	800d91e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800828e:	4b26      	ldr	r3, [pc, #152]	; (8008328 <USBD_CDC_DeInit+0x100>)
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	f003 020f 	and.w	r2, r3, #15
 8008296:	6879      	ldr	r1, [r7, #4]
 8008298:	4613      	mov	r3, r2
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	4413      	add	r3, r2
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	440b      	add	r3, r1
 80082a2:	3324      	adds	r3, #36	; 0x24
 80082a4:	2200      	movs	r2, #0
 80082a6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80082a8:	4b1f      	ldr	r3, [pc, #124]	; (8008328 <USBD_CDC_DeInit+0x100>)
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	f003 020f 	and.w	r2, r3, #15
 80082b0:	6879      	ldr	r1, [r7, #4]
 80082b2:	4613      	mov	r3, r2
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	4413      	add	r3, r2
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	440b      	add	r3, r1
 80082bc:	3326      	adds	r3, #38	; 0x26
 80082be:	2200      	movs	r2, #0
 80082c0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	32b0      	adds	r2, #176	; 0xb0
 80082cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d01f      	beq.n	8008314 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	33b0      	adds	r3, #176	; 0xb0
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	4413      	add	r3, r2
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	32b0      	adds	r2, #176	; 0xb0
 80082f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082f6:	4618      	mov	r0, r3
 80082f8:	f005 fcc2 	bl	800dc80 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	32b0      	adds	r2, #176	; 0xb0
 8008306:	2100      	movs	r1, #0
 8008308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3708      	adds	r7, #8
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	20000093 	.word	0x20000093
 8008324:	20000094 	.word	0x20000094
 8008328:	20000095 	.word	0x20000095

0800832c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b086      	sub	sp, #24
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	32b0      	adds	r2, #176	; 0xb0
 8008340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008344:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008346:	2300      	movs	r3, #0
 8008348:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800834a:	2300      	movs	r3, #0
 800834c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800834e:	2300      	movs	r3, #0
 8008350:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d101      	bne.n	800835c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008358:	2303      	movs	r3, #3
 800835a:	e0bf      	b.n	80084dc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008364:	2b00      	cmp	r3, #0
 8008366:	d050      	beq.n	800840a <USBD_CDC_Setup+0xde>
 8008368:	2b20      	cmp	r3, #32
 800836a:	f040 80af 	bne.w	80084cc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	88db      	ldrh	r3, [r3, #6]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d03a      	beq.n	80083ec <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	b25b      	sxtb	r3, r3
 800837c:	2b00      	cmp	r3, #0
 800837e:	da1b      	bge.n	80083b8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	33b0      	adds	r3, #176	; 0xb0
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	4413      	add	r3, r2
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	683a      	ldr	r2, [r7, #0]
 8008394:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008396:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008398:	683a      	ldr	r2, [r7, #0]
 800839a:	88d2      	ldrh	r2, [r2, #6]
 800839c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	88db      	ldrh	r3, [r3, #6]
 80083a2:	2b07      	cmp	r3, #7
 80083a4:	bf28      	it	cs
 80083a6:	2307      	movcs	r3, #7
 80083a8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	89fa      	ldrh	r2, [r7, #14]
 80083ae:	4619      	mov	r1, r3
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f001 fdad 	bl	8009f10 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80083b6:	e090      	b.n	80084da <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	785a      	ldrb	r2, [r3, #1]
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	88db      	ldrh	r3, [r3, #6]
 80083c6:	2b3f      	cmp	r3, #63	; 0x3f
 80083c8:	d803      	bhi.n	80083d2 <USBD_CDC_Setup+0xa6>
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	88db      	ldrh	r3, [r3, #6]
 80083ce:	b2da      	uxtb	r2, r3
 80083d0:	e000      	b.n	80083d4 <USBD_CDC_Setup+0xa8>
 80083d2:	2240      	movs	r2, #64	; 0x40
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80083da:	6939      	ldr	r1, [r7, #16]
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80083e2:	461a      	mov	r2, r3
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f001 fdbf 	bl	8009f68 <USBD_CtlPrepareRx>
      break;
 80083ea:	e076      	b.n	80084da <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	33b0      	adds	r3, #176	; 0xb0
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	4413      	add	r3, r2
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	683a      	ldr	r2, [r7, #0]
 8008400:	7850      	ldrb	r0, [r2, #1]
 8008402:	2200      	movs	r2, #0
 8008404:	6839      	ldr	r1, [r7, #0]
 8008406:	4798      	blx	r3
      break;
 8008408:	e067      	b.n	80084da <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	785b      	ldrb	r3, [r3, #1]
 800840e:	2b0b      	cmp	r3, #11
 8008410:	d851      	bhi.n	80084b6 <USBD_CDC_Setup+0x18a>
 8008412:	a201      	add	r2, pc, #4	; (adr r2, 8008418 <USBD_CDC_Setup+0xec>)
 8008414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008418:	08008449 	.word	0x08008449
 800841c:	080084c5 	.word	0x080084c5
 8008420:	080084b7 	.word	0x080084b7
 8008424:	080084b7 	.word	0x080084b7
 8008428:	080084b7 	.word	0x080084b7
 800842c:	080084b7 	.word	0x080084b7
 8008430:	080084b7 	.word	0x080084b7
 8008434:	080084b7 	.word	0x080084b7
 8008438:	080084b7 	.word	0x080084b7
 800843c:	080084b7 	.word	0x080084b7
 8008440:	08008473 	.word	0x08008473
 8008444:	0800849d 	.word	0x0800849d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800844e:	b2db      	uxtb	r3, r3
 8008450:	2b03      	cmp	r3, #3
 8008452:	d107      	bne.n	8008464 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008454:	f107 030a 	add.w	r3, r7, #10
 8008458:	2202      	movs	r2, #2
 800845a:	4619      	mov	r1, r3
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f001 fd57 	bl	8009f10 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008462:	e032      	b.n	80084ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008464:	6839      	ldr	r1, [r7, #0]
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f001 fce1 	bl	8009e2e <USBD_CtlError>
            ret = USBD_FAIL;
 800846c:	2303      	movs	r3, #3
 800846e:	75fb      	strb	r3, [r7, #23]
          break;
 8008470:	e02b      	b.n	80084ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008478:	b2db      	uxtb	r3, r3
 800847a:	2b03      	cmp	r3, #3
 800847c:	d107      	bne.n	800848e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800847e:	f107 030d 	add.w	r3, r7, #13
 8008482:	2201      	movs	r2, #1
 8008484:	4619      	mov	r1, r3
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f001 fd42 	bl	8009f10 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800848c:	e01d      	b.n	80084ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800848e:	6839      	ldr	r1, [r7, #0]
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f001 fccc 	bl	8009e2e <USBD_CtlError>
            ret = USBD_FAIL;
 8008496:	2303      	movs	r3, #3
 8008498:	75fb      	strb	r3, [r7, #23]
          break;
 800849a:	e016      	b.n	80084ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	2b03      	cmp	r3, #3
 80084a6:	d00f      	beq.n	80084c8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80084a8:	6839      	ldr	r1, [r7, #0]
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f001 fcbf 	bl	8009e2e <USBD_CtlError>
            ret = USBD_FAIL;
 80084b0:	2303      	movs	r3, #3
 80084b2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80084b4:	e008      	b.n	80084c8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80084b6:	6839      	ldr	r1, [r7, #0]
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f001 fcb8 	bl	8009e2e <USBD_CtlError>
          ret = USBD_FAIL;
 80084be:	2303      	movs	r3, #3
 80084c0:	75fb      	strb	r3, [r7, #23]
          break;
 80084c2:	e002      	b.n	80084ca <USBD_CDC_Setup+0x19e>
          break;
 80084c4:	bf00      	nop
 80084c6:	e008      	b.n	80084da <USBD_CDC_Setup+0x1ae>
          break;
 80084c8:	bf00      	nop
      }
      break;
 80084ca:	e006      	b.n	80084da <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80084cc:	6839      	ldr	r1, [r7, #0]
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f001 fcad 	bl	8009e2e <USBD_CtlError>
      ret = USBD_FAIL;
 80084d4:	2303      	movs	r3, #3
 80084d6:	75fb      	strb	r3, [r7, #23]
      break;
 80084d8:	bf00      	nop
  }

  return (uint8_t)ret;
 80084da:	7dfb      	ldrb	r3, [r7, #23]
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3718      	adds	r7, #24
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	460b      	mov	r3, r1
 80084ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80084f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	32b0      	adds	r2, #176	; 0xb0
 8008502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d101      	bne.n	800850e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800850a:	2303      	movs	r3, #3
 800850c:	e065      	b.n	80085da <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	32b0      	adds	r2, #176	; 0xb0
 8008518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800851c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800851e:	78fb      	ldrb	r3, [r7, #3]
 8008520:	f003 020f 	and.w	r2, r3, #15
 8008524:	6879      	ldr	r1, [r7, #4]
 8008526:	4613      	mov	r3, r2
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	4413      	add	r3, r2
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	440b      	add	r3, r1
 8008530:	3318      	adds	r3, #24
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d02f      	beq.n	8008598 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008538:	78fb      	ldrb	r3, [r7, #3]
 800853a:	f003 020f 	and.w	r2, r3, #15
 800853e:	6879      	ldr	r1, [r7, #4]
 8008540:	4613      	mov	r3, r2
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	4413      	add	r3, r2
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	440b      	add	r3, r1
 800854a:	3318      	adds	r3, #24
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	78fb      	ldrb	r3, [r7, #3]
 8008550:	f003 010f 	and.w	r1, r3, #15
 8008554:	68f8      	ldr	r0, [r7, #12]
 8008556:	460b      	mov	r3, r1
 8008558:	00db      	lsls	r3, r3, #3
 800855a:	440b      	add	r3, r1
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	4403      	add	r3, r0
 8008560:	3348      	adds	r3, #72	; 0x48
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	fbb2 f1f3 	udiv	r1, r2, r3
 8008568:	fb01 f303 	mul.w	r3, r1, r3
 800856c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800856e:	2b00      	cmp	r3, #0
 8008570:	d112      	bne.n	8008598 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008572:	78fb      	ldrb	r3, [r7, #3]
 8008574:	f003 020f 	and.w	r2, r3, #15
 8008578:	6879      	ldr	r1, [r7, #4]
 800857a:	4613      	mov	r3, r2
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	4413      	add	r3, r2
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	440b      	add	r3, r1
 8008584:	3318      	adds	r3, #24
 8008586:	2200      	movs	r2, #0
 8008588:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800858a:	78f9      	ldrb	r1, [r7, #3]
 800858c:	2300      	movs	r3, #0
 800858e:	2200      	movs	r2, #0
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f005 fa6c 	bl	800da6e <USBD_LL_Transmit>
 8008596:	e01f      	b.n	80085d8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	2200      	movs	r2, #0
 800859c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	33b0      	adds	r3, #176	; 0xb0
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	4413      	add	r3, r2
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d010      	beq.n	80085d8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	33b0      	adds	r3, #176	; 0xb0
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	4413      	add	r3, r2
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	68ba      	ldr	r2, [r7, #8]
 80085ca:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80085ce:	68ba      	ldr	r2, [r7, #8]
 80085d0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80085d4:	78fa      	ldrb	r2, [r7, #3]
 80085d6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80085d8:	2300      	movs	r3, #0
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3710      	adds	r7, #16
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}

080085e2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80085e2:	b580      	push	{r7, lr}
 80085e4:	b084      	sub	sp, #16
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
 80085ea:	460b      	mov	r3, r1
 80085ec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	32b0      	adds	r2, #176	; 0xb0
 80085f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085fc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	32b0      	adds	r2, #176	; 0xb0
 8008608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d101      	bne.n	8008614 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008610:	2303      	movs	r3, #3
 8008612:	e01a      	b.n	800864a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008614:	78fb      	ldrb	r3, [r7, #3]
 8008616:	4619      	mov	r1, r3
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f005 fa6a 	bl	800daf2 <USBD_LL_GetRxDataSize>
 800861e:	4602      	mov	r2, r0
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	33b0      	adds	r3, #176	; 0xb0
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	4413      	add	r3, r2
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	68fa      	ldr	r2, [r7, #12]
 800863a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008644:	4611      	mov	r1, r2
 8008646:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}

08008652 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008652:	b580      	push	{r7, lr}
 8008654:	b084      	sub	sp, #16
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	32b0      	adds	r2, #176	; 0xb0
 8008664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008668:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d101      	bne.n	8008674 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008670:	2303      	movs	r3, #3
 8008672:	e025      	b.n	80086c0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	33b0      	adds	r3, #176	; 0xb0
 800867e:	009b      	lsls	r3, r3, #2
 8008680:	4413      	add	r3, r2
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d01a      	beq.n	80086be <USBD_CDC_EP0_RxReady+0x6c>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800868e:	2bff      	cmp	r3, #255	; 0xff
 8008690:	d015      	beq.n	80086be <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	33b0      	adds	r3, #176	; 0xb0
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	4413      	add	r3, r2
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80086aa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80086ac:	68fa      	ldr	r2, [r7, #12]
 80086ae:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80086b2:	b292      	uxth	r2, r2
 80086b4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	22ff      	movs	r2, #255	; 0xff
 80086ba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80086be:	2300      	movs	r3, #0
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3710      	adds	r7, #16
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b086      	sub	sp, #24
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80086d0:	2182      	movs	r1, #130	; 0x82
 80086d2:	4818      	ldr	r0, [pc, #96]	; (8008734 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80086d4:	f000 fd49 	bl	800916a <USBD_GetEpDesc>
 80086d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80086da:	2101      	movs	r1, #1
 80086dc:	4815      	ldr	r0, [pc, #84]	; (8008734 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80086de:	f000 fd44 	bl	800916a <USBD_GetEpDesc>
 80086e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80086e4:	2181      	movs	r1, #129	; 0x81
 80086e6:	4813      	ldr	r0, [pc, #76]	; (8008734 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80086e8:	f000 fd3f 	bl	800916a <USBD_GetEpDesc>
 80086ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d002      	beq.n	80086fa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	2210      	movs	r2, #16
 80086f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d006      	beq.n	800870e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	2200      	movs	r2, #0
 8008704:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008708:	711a      	strb	r2, [r3, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d006      	beq.n	8008722 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2200      	movs	r2, #0
 8008718:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800871c:	711a      	strb	r2, [r3, #4]
 800871e:	2200      	movs	r2, #0
 8008720:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2243      	movs	r2, #67	; 0x43
 8008726:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008728:	4b02      	ldr	r3, [pc, #8]	; (8008734 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800872a:	4618      	mov	r0, r3
 800872c:	3718      	adds	r7, #24
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	20000050 	.word	0x20000050

08008738 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b086      	sub	sp, #24
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008740:	2182      	movs	r1, #130	; 0x82
 8008742:	4818      	ldr	r0, [pc, #96]	; (80087a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008744:	f000 fd11 	bl	800916a <USBD_GetEpDesc>
 8008748:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800874a:	2101      	movs	r1, #1
 800874c:	4815      	ldr	r0, [pc, #84]	; (80087a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800874e:	f000 fd0c 	bl	800916a <USBD_GetEpDesc>
 8008752:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008754:	2181      	movs	r1, #129	; 0x81
 8008756:	4813      	ldr	r0, [pc, #76]	; (80087a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008758:	f000 fd07 	bl	800916a <USBD_GetEpDesc>
 800875c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d002      	beq.n	800876a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	2210      	movs	r2, #16
 8008768:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d006      	beq.n	800877e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	2200      	movs	r2, #0
 8008774:	711a      	strb	r2, [r3, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	f042 0202 	orr.w	r2, r2, #2
 800877c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d006      	beq.n	8008792 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2200      	movs	r2, #0
 8008788:	711a      	strb	r2, [r3, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	f042 0202 	orr.w	r2, r2, #2
 8008790:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2243      	movs	r2, #67	; 0x43
 8008796:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008798:	4b02      	ldr	r3, [pc, #8]	; (80087a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800879a:	4618      	mov	r0, r3
 800879c:	3718      	adds	r7, #24
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	20000050 	.word	0x20000050

080087a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b086      	sub	sp, #24
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80087b0:	2182      	movs	r1, #130	; 0x82
 80087b2:	4818      	ldr	r0, [pc, #96]	; (8008814 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80087b4:	f000 fcd9 	bl	800916a <USBD_GetEpDesc>
 80087b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80087ba:	2101      	movs	r1, #1
 80087bc:	4815      	ldr	r0, [pc, #84]	; (8008814 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80087be:	f000 fcd4 	bl	800916a <USBD_GetEpDesc>
 80087c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80087c4:	2181      	movs	r1, #129	; 0x81
 80087c6:	4813      	ldr	r0, [pc, #76]	; (8008814 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80087c8:	f000 fccf 	bl	800916a <USBD_GetEpDesc>
 80087cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d002      	beq.n	80087da <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	2210      	movs	r2, #16
 80087d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d006      	beq.n	80087ee <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087e8:	711a      	strb	r2, [r3, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d006      	beq.n	8008802 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087fc:	711a      	strb	r2, [r3, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2243      	movs	r2, #67	; 0x43
 8008806:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008808:	4b02      	ldr	r3, [pc, #8]	; (8008814 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800880a:	4618      	mov	r0, r3
 800880c:	3718      	adds	r7, #24
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	20000050 	.word	0x20000050

08008818 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	220a      	movs	r2, #10
 8008824:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008826:	4b03      	ldr	r3, [pc, #12]	; (8008834 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008828:	4618      	mov	r0, r3
 800882a:	370c      	adds	r7, #12
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr
 8008834:	2000000c 	.word	0x2000000c

08008838 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d101      	bne.n	800884c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008848:	2303      	movs	r3, #3
 800884a:	e009      	b.n	8008860 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	33b0      	adds	r3, #176	; 0xb0
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	4413      	add	r3, r2
 800885a:	683a      	ldr	r2, [r7, #0]
 800885c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800886c:	b480      	push	{r7}
 800886e:	b087      	sub	sp, #28
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	32b0      	adds	r2, #176	; 0xb0
 8008882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008886:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d101      	bne.n	8008892 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800888e:	2303      	movs	r3, #3
 8008890:	e008      	b.n	80088a4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	68ba      	ldr	r2, [r7, #8]
 8008896:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	371c      	adds	r7, #28
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr

080088b0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b085      	sub	sp, #20
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	32b0      	adds	r2, #176	; 0xb0
 80088c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088c8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d101      	bne.n	80088d4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80088d0:	2303      	movs	r3, #3
 80088d2:	e004      	b.n	80088de <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	683a      	ldr	r2, [r7, #0]
 80088d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80088dc:	2300      	movs	r3, #0
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3714      	adds	r7, #20
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr
	...

080088ec <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	32b0      	adds	r2, #176	; 0xb0
 80088fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008902:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008904:	2301      	movs	r3, #1
 8008906:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d101      	bne.n	8008912 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800890e:	2303      	movs	r3, #3
 8008910:	e025      	b.n	800895e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008918:	2b00      	cmp	r3, #0
 800891a:	d11f      	bne.n	800895c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	2201      	movs	r2, #1
 8008920:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008924:	4b10      	ldr	r3, [pc, #64]	; (8008968 <USBD_CDC_TransmitPacket+0x7c>)
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	f003 020f 	and.w	r2, r3, #15
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	4613      	mov	r3, r2
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	4413      	add	r3, r2
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	4403      	add	r3, r0
 800893e:	3318      	adds	r3, #24
 8008940:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008942:	4b09      	ldr	r3, [pc, #36]	; (8008968 <USBD_CDC_TransmitPacket+0x7c>)
 8008944:	7819      	ldrb	r1, [r3, #0]
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f005 f88b 	bl	800da6e <USBD_LL_Transmit>

    ret = USBD_OK;
 8008958:	2300      	movs	r3, #0
 800895a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800895c:	7bfb      	ldrb	r3, [r7, #15]
}
 800895e:	4618      	mov	r0, r3
 8008960:	3710      	adds	r7, #16
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	20000093 	.word	0x20000093

0800896c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	32b0      	adds	r2, #176	; 0xb0
 800897e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008982:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	32b0      	adds	r2, #176	; 0xb0
 800898e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d101      	bne.n	800899a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008996:	2303      	movs	r3, #3
 8008998:	e018      	b.n	80089cc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	7c1b      	ldrb	r3, [r3, #16]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d10a      	bne.n	80089b8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80089a2:	4b0c      	ldr	r3, [pc, #48]	; (80089d4 <USBD_CDC_ReceivePacket+0x68>)
 80089a4:	7819      	ldrb	r1, [r3, #0]
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80089ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f005 f87d 	bl	800dab0 <USBD_LL_PrepareReceive>
 80089b6:	e008      	b.n	80089ca <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80089b8:	4b06      	ldr	r3, [pc, #24]	; (80089d4 <USBD_CDC_ReceivePacket+0x68>)
 80089ba:	7819      	ldrb	r1, [r3, #0]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80089c2:	2340      	movs	r3, #64	; 0x40
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f005 f873 	bl	800dab0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80089ca:	2300      	movs	r3, #0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3710      	adds	r7, #16
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	20000094 	.word	0x20000094

080089d8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b086      	sub	sp, #24
 80089dc:	af00      	add	r7, sp, #0
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	4613      	mov	r3, r2
 80089e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d101      	bne.n	80089f0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80089ec:	2303      	movs	r3, #3
 80089ee:	e01f      	b.n	8008a30 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2200      	movs	r2, #0
 80089f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2200      	movs	r2, #0
 80089fc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d003      	beq.n	8008a16 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	68ba      	ldr	r2, [r7, #8]
 8008a12:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2201      	movs	r2, #1
 8008a1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	79fa      	ldrb	r2, [r7, #7]
 8008a22:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	f004 feed 	bl	800d804 <USBD_LL_Init>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3718      	adds	r7, #24
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008a42:	2300      	movs	r3, #0
 8008a44:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d101      	bne.n	8008a50 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008a4c:	2303      	movs	r3, #3
 8008a4e:	e025      	b.n	8008a9c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	683a      	ldr	r2, [r7, #0]
 8008a54:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	32ae      	adds	r2, #174	; 0xae
 8008a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d00f      	beq.n	8008a8c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	32ae      	adds	r2, #174	; 0xae
 8008a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a7c:	f107 020e 	add.w	r2, r7, #14
 8008a80:	4610      	mov	r0, r2
 8008a82:	4798      	blx	r3
 8008a84:	4602      	mov	r2, r0
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008a92:	1c5a      	adds	r2, r3, #1
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3710      	adds	r7, #16
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f004 fef5 	bl	800d89c <USBD_LL_Start>
 8008ab2:	4603      	mov	r3, r0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3708      	adds	r7, #8
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008ac4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	370c      	adds	r7, #12
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr

08008ad2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ad2:	b580      	push	{r7, lr}
 8008ad4:	b084      	sub	sp, #16
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
 8008ada:	460b      	mov	r3, r1
 8008adc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d009      	beq.n	8008b00 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	78fa      	ldrb	r2, [r7, #3]
 8008af6:	4611      	mov	r1, r2
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	4798      	blx	r3
 8008afc:	4603      	mov	r3, r0
 8008afe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3710      	adds	r7, #16
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b084      	sub	sp, #16
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
 8008b12:	460b      	mov	r3, r1
 8008b14:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b16:	2300      	movs	r3, #0
 8008b18:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	78fa      	ldrb	r2, [r7, #3]
 8008b24:	4611      	mov	r1, r2
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	4798      	blx	r3
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d001      	beq.n	8008b34 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008b30:	2303      	movs	r3, #3
 8008b32:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3710      	adds	r7, #16
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}

08008b3e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b084      	sub	sp, #16
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
 8008b46:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b4e:	6839      	ldr	r1, [r7, #0]
 8008b50:	4618      	mov	r0, r3
 8008b52:	f001 f932 	bl	8009dba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008b64:	461a      	mov	r2, r3
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008b72:	f003 031f 	and.w	r3, r3, #31
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	d01a      	beq.n	8008bb0 <USBD_LL_SetupStage+0x72>
 8008b7a:	2b02      	cmp	r3, #2
 8008b7c:	d822      	bhi.n	8008bc4 <USBD_LL_SetupStage+0x86>
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d002      	beq.n	8008b88 <USBD_LL_SetupStage+0x4a>
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d00a      	beq.n	8008b9c <USBD_LL_SetupStage+0x5e>
 8008b86:	e01d      	b.n	8008bc4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b8e:	4619      	mov	r1, r3
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 fb5f 	bl	8009254 <USBD_StdDevReq>
 8008b96:	4603      	mov	r3, r0
 8008b98:	73fb      	strb	r3, [r7, #15]
      break;
 8008b9a:	e020      	b.n	8008bde <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 fbc7 	bl	8009338 <USBD_StdItfReq>
 8008baa:	4603      	mov	r3, r0
 8008bac:	73fb      	strb	r3, [r7, #15]
      break;
 8008bae:	e016      	b.n	8008bde <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 fc29 	bl	8009410 <USBD_StdEPReq>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	73fb      	strb	r3, [r7, #15]
      break;
 8008bc2:	e00c      	b.n	8008bde <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008bca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f004 fec2 	bl	800d95c <USBD_LL_StallEP>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	73fb      	strb	r3, [r7, #15]
      break;
 8008bdc:	bf00      	nop
  }

  return ret;
 8008bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3710      	adds	r7, #16
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b086      	sub	sp, #24
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	60f8      	str	r0, [r7, #12]
 8008bf0:	460b      	mov	r3, r1
 8008bf2:	607a      	str	r2, [r7, #4]
 8008bf4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008bfa:	7afb      	ldrb	r3, [r7, #11]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d16e      	bne.n	8008cde <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008c06:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c0e:	2b03      	cmp	r3, #3
 8008c10:	f040 8098 	bne.w	8008d44 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	689a      	ldr	r2, [r3, #8]
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d913      	bls.n	8008c48 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	689a      	ldr	r2, [r3, #8]
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	1ad2      	subs	r2, r2, r3
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	68da      	ldr	r2, [r3, #12]
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	4293      	cmp	r3, r2
 8008c38:	bf28      	it	cs
 8008c3a:	4613      	movcs	r3, r2
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	6879      	ldr	r1, [r7, #4]
 8008c40:	68f8      	ldr	r0, [r7, #12]
 8008c42:	f001 f9ae 	bl	8009fa2 <USBD_CtlContinueRx>
 8008c46:	e07d      	b.n	8008d44 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008c4e:	f003 031f 	and.w	r3, r3, #31
 8008c52:	2b02      	cmp	r3, #2
 8008c54:	d014      	beq.n	8008c80 <USBD_LL_DataOutStage+0x98>
 8008c56:	2b02      	cmp	r3, #2
 8008c58:	d81d      	bhi.n	8008c96 <USBD_LL_DataOutStage+0xae>
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d002      	beq.n	8008c64 <USBD_LL_DataOutStage+0x7c>
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d003      	beq.n	8008c6a <USBD_LL_DataOutStage+0x82>
 8008c62:	e018      	b.n	8008c96 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008c64:	2300      	movs	r3, #0
 8008c66:	75bb      	strb	r3, [r7, #22]
            break;
 8008c68:	e018      	b.n	8008c9c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	4619      	mov	r1, r3
 8008c74:	68f8      	ldr	r0, [r7, #12]
 8008c76:	f000 fa5e 	bl	8009136 <USBD_CoreFindIF>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	75bb      	strb	r3, [r7, #22]
            break;
 8008c7e:	e00d      	b.n	8008c9c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	4619      	mov	r1, r3
 8008c8a:	68f8      	ldr	r0, [r7, #12]
 8008c8c:	f000 fa60 	bl	8009150 <USBD_CoreFindEP>
 8008c90:	4603      	mov	r3, r0
 8008c92:	75bb      	strb	r3, [r7, #22]
            break;
 8008c94:	e002      	b.n	8008c9c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008c96:	2300      	movs	r3, #0
 8008c98:	75bb      	strb	r3, [r7, #22]
            break;
 8008c9a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008c9c:	7dbb      	ldrb	r3, [r7, #22]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d119      	bne.n	8008cd6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	2b03      	cmp	r3, #3
 8008cac:	d113      	bne.n	8008cd6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008cae:	7dba      	ldrb	r2, [r7, #22]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	32ae      	adds	r2, #174	; 0xae
 8008cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cb8:	691b      	ldr	r3, [r3, #16]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d00b      	beq.n	8008cd6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008cbe:	7dba      	ldrb	r2, [r7, #22]
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008cc6:	7dba      	ldrb	r2, [r7, #22]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	32ae      	adds	r2, #174	; 0xae
 8008ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cd0:	691b      	ldr	r3, [r3, #16]
 8008cd2:	68f8      	ldr	r0, [r7, #12]
 8008cd4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008cd6:	68f8      	ldr	r0, [r7, #12]
 8008cd8:	f001 f974 	bl	8009fc4 <USBD_CtlSendStatus>
 8008cdc:	e032      	b.n	8008d44 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008cde:	7afb      	ldrb	r3, [r7, #11]
 8008ce0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	68f8      	ldr	r0, [r7, #12]
 8008cea:	f000 fa31 	bl	8009150 <USBD_CoreFindEP>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008cf2:	7dbb      	ldrb	r3, [r7, #22]
 8008cf4:	2bff      	cmp	r3, #255	; 0xff
 8008cf6:	d025      	beq.n	8008d44 <USBD_LL_DataOutStage+0x15c>
 8008cf8:	7dbb      	ldrb	r3, [r7, #22]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d122      	bne.n	8008d44 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d04:	b2db      	uxtb	r3, r3
 8008d06:	2b03      	cmp	r3, #3
 8008d08:	d117      	bne.n	8008d3a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008d0a:	7dba      	ldrb	r2, [r7, #22]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	32ae      	adds	r2, #174	; 0xae
 8008d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d14:	699b      	ldr	r3, [r3, #24]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d00f      	beq.n	8008d3a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008d1a:	7dba      	ldrb	r2, [r7, #22]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008d22:	7dba      	ldrb	r2, [r7, #22]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	32ae      	adds	r2, #174	; 0xae
 8008d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d2c:	699b      	ldr	r3, [r3, #24]
 8008d2e:	7afa      	ldrb	r2, [r7, #11]
 8008d30:	4611      	mov	r1, r2
 8008d32:	68f8      	ldr	r0, [r7, #12]
 8008d34:	4798      	blx	r3
 8008d36:	4603      	mov	r3, r0
 8008d38:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008d3a:	7dfb      	ldrb	r3, [r7, #23]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d001      	beq.n	8008d44 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008d40:	7dfb      	ldrb	r3, [r7, #23]
 8008d42:	e000      	b.n	8008d46 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008d44:	2300      	movs	r3, #0
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3718      	adds	r7, #24
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b086      	sub	sp, #24
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	60f8      	str	r0, [r7, #12]
 8008d56:	460b      	mov	r3, r1
 8008d58:	607a      	str	r2, [r7, #4]
 8008d5a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008d5c:	7afb      	ldrb	r3, [r7, #11]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d16f      	bne.n	8008e42 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	3314      	adds	r3, #20
 8008d66:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	d15a      	bne.n	8008e28 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	689a      	ldr	r2, [r3, #8]
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	68db      	ldr	r3, [r3, #12]
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d914      	bls.n	8008da8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	689a      	ldr	r2, [r3, #8]
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	68db      	ldr	r3, [r3, #12]
 8008d86:	1ad2      	subs	r2, r2, r3
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	461a      	mov	r2, r3
 8008d92:	6879      	ldr	r1, [r7, #4]
 8008d94:	68f8      	ldr	r0, [r7, #12]
 8008d96:	f001 f8d6 	bl	8009f46 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	2100      	movs	r1, #0
 8008da0:	68f8      	ldr	r0, [r7, #12]
 8008da2:	f004 fe85 	bl	800dab0 <USBD_LL_PrepareReceive>
 8008da6:	e03f      	b.n	8008e28 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	68da      	ldr	r2, [r3, #12]
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d11c      	bne.n	8008dee <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	685a      	ldr	r2, [r3, #4]
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d316      	bcc.n	8008dee <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	685a      	ldr	r2, [r3, #4]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d20f      	bcs.n	8008dee <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008dce:	2200      	movs	r2, #0
 8008dd0:	2100      	movs	r1, #0
 8008dd2:	68f8      	ldr	r0, [r7, #12]
 8008dd4:	f001 f8b7 	bl	8009f46 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008de0:	2300      	movs	r3, #0
 8008de2:	2200      	movs	r2, #0
 8008de4:	2100      	movs	r1, #0
 8008de6:	68f8      	ldr	r0, [r7, #12]
 8008de8:	f004 fe62 	bl	800dab0 <USBD_LL_PrepareReceive>
 8008dec:	e01c      	b.n	8008e28 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	2b03      	cmp	r3, #3
 8008df8:	d10f      	bne.n	8008e1a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d009      	beq.n	8008e1a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e14:	68db      	ldr	r3, [r3, #12]
 8008e16:	68f8      	ldr	r0, [r7, #12]
 8008e18:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e1a:	2180      	movs	r1, #128	; 0x80
 8008e1c:	68f8      	ldr	r0, [r7, #12]
 8008e1e:	f004 fd9d 	bl	800d95c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008e22:	68f8      	ldr	r0, [r7, #12]
 8008e24:	f001 f8e1 	bl	8009fea <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d03a      	beq.n	8008ea8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008e32:	68f8      	ldr	r0, [r7, #12]
 8008e34:	f7ff fe42 	bl	8008abc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008e40:	e032      	b.n	8008ea8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008e42:	7afb      	ldrb	r3, [r7, #11]
 8008e44:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	68f8      	ldr	r0, [r7, #12]
 8008e4e:	f000 f97f 	bl	8009150 <USBD_CoreFindEP>
 8008e52:	4603      	mov	r3, r0
 8008e54:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e56:	7dfb      	ldrb	r3, [r7, #23]
 8008e58:	2bff      	cmp	r3, #255	; 0xff
 8008e5a:	d025      	beq.n	8008ea8 <USBD_LL_DataInStage+0x15a>
 8008e5c:	7dfb      	ldrb	r3, [r7, #23]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d122      	bne.n	8008ea8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	2b03      	cmp	r3, #3
 8008e6c:	d11c      	bne.n	8008ea8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008e6e:	7dfa      	ldrb	r2, [r7, #23]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	32ae      	adds	r2, #174	; 0xae
 8008e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e78:	695b      	ldr	r3, [r3, #20]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d014      	beq.n	8008ea8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008e7e:	7dfa      	ldrb	r2, [r7, #23]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008e86:	7dfa      	ldrb	r2, [r7, #23]
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	32ae      	adds	r2, #174	; 0xae
 8008e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e90:	695b      	ldr	r3, [r3, #20]
 8008e92:	7afa      	ldrb	r2, [r7, #11]
 8008e94:	4611      	mov	r1, r2
 8008e96:	68f8      	ldr	r0, [r7, #12]
 8008e98:	4798      	blx	r3
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008e9e:	7dbb      	ldrb	r3, [r7, #22]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d001      	beq.n	8008ea8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008ea4:	7dbb      	ldrb	r3, [r7, #22]
 8008ea6:	e000      	b.n	8008eaa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008ea8:	2300      	movs	r3, #0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3718      	adds	r7, #24
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}

08008eb2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008eb2:	b580      	push	{r7, lr}
 8008eb4:	b084      	sub	sp, #16
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d014      	beq.n	8008f18 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d00e      	beq.n	8008f18 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	687a      	ldr	r2, [r7, #4]
 8008f04:	6852      	ldr	r2, [r2, #4]
 8008f06:	b2d2      	uxtb	r2, r2
 8008f08:	4611      	mov	r1, r2
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	4798      	blx	r3
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d001      	beq.n	8008f18 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008f14:	2303      	movs	r3, #3
 8008f16:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f18:	2340      	movs	r3, #64	; 0x40
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	2100      	movs	r1, #0
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f004 fcd7 	bl	800d8d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2201      	movs	r2, #1
 8008f28:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2240      	movs	r2, #64	; 0x40
 8008f30:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f34:	2340      	movs	r3, #64	; 0x40
 8008f36:	2200      	movs	r2, #0
 8008f38:	2180      	movs	r1, #128	; 0x80
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f004 fcc9 	bl	800d8d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2201      	movs	r2, #1
 8008f44:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2240      	movs	r2, #64	; 0x40
 8008f4a:	621a      	str	r2, [r3, #32]

  return ret;
 8008f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008f56:	b480      	push	{r7}
 8008f58:	b083      	sub	sp, #12
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
 8008f5e:	460b      	mov	r3, r1
 8008f60:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	78fa      	ldrb	r2, [r7, #3]
 8008f66:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	370c      	adds	r7, #12
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr

08008f76 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008f76:	b480      	push	{r7}
 8008f78:	b083      	sub	sp, #12
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f84:	b2da      	uxtb	r2, r3
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2204      	movs	r2, #4
 8008f90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008f94:	2300      	movs	r3, #0
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	370c      	adds	r7, #12
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr

08008fa2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008fa2:	b480      	push	{r7}
 8008fa4:	b083      	sub	sp, #12
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	2b04      	cmp	r3, #4
 8008fb4:	d106      	bne.n	8008fc4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008fbc:	b2da      	uxtb	r2, r3
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	370c      	adds	r7, #12
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr

08008fd2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b082      	sub	sp, #8
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	2b03      	cmp	r3, #3
 8008fe4:	d110      	bne.n	8009008 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00b      	beq.n	8009008 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ff6:	69db      	ldr	r3, [r3, #28]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d005      	beq.n	8009008 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009002:	69db      	ldr	r3, [r3, #28]
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	3708      	adds	r7, #8
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009012:	b580      	push	{r7, lr}
 8009014:	b082      	sub	sp, #8
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
 800901a:	460b      	mov	r3, r1
 800901c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	32ae      	adds	r2, #174	; 0xae
 8009028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d101      	bne.n	8009034 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009030:	2303      	movs	r3, #3
 8009032:	e01c      	b.n	800906e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800903a:	b2db      	uxtb	r3, r3
 800903c:	2b03      	cmp	r3, #3
 800903e:	d115      	bne.n	800906c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	32ae      	adds	r2, #174	; 0xae
 800904a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800904e:	6a1b      	ldr	r3, [r3, #32]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d00b      	beq.n	800906c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	32ae      	adds	r2, #174	; 0xae
 800905e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009062:	6a1b      	ldr	r3, [r3, #32]
 8009064:	78fa      	ldrb	r2, [r7, #3]
 8009066:	4611      	mov	r1, r2
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3708      	adds	r7, #8
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}

08009076 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009076:	b580      	push	{r7, lr}
 8009078:	b082      	sub	sp, #8
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
 800907e:	460b      	mov	r3, r1
 8009080:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	32ae      	adds	r2, #174	; 0xae
 800908c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d101      	bne.n	8009098 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009094:	2303      	movs	r3, #3
 8009096:	e01c      	b.n	80090d2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	2b03      	cmp	r3, #3
 80090a2:	d115      	bne.n	80090d0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	32ae      	adds	r2, #174	; 0xae
 80090ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d00b      	beq.n	80090d0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	32ae      	adds	r2, #174	; 0xae
 80090c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c8:	78fa      	ldrb	r2, [r7, #3]
 80090ca:	4611      	mov	r1, r2
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80090d0:	2300      	movs	r3, #0
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3708      	adds	r7, #8
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}

080090da <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80090da:	b480      	push	{r7}
 80090dc:	b083      	sub	sp, #12
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80090e2:	2300      	movs	r3, #0
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	370c      	adds	r7, #12
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80090f8:	2300      	movs	r3, #0
 80090fa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2201      	movs	r2, #1
 8009100:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800910a:	2b00      	cmp	r3, #0
 800910c:	d00e      	beq.n	800912c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	6852      	ldr	r2, [r2, #4]
 800911a:	b2d2      	uxtb	r2, r2
 800911c:	4611      	mov	r1, r2
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	4798      	blx	r3
 8009122:	4603      	mov	r3, r0
 8009124:	2b00      	cmp	r3, #0
 8009126:	d001      	beq.n	800912c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009128:	2303      	movs	r3, #3
 800912a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800912c:	7bfb      	ldrb	r3, [r7, #15]
}
 800912e:	4618      	mov	r0, r3
 8009130:	3710      	adds	r7, #16
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009136:	b480      	push	{r7}
 8009138:	b083      	sub	sp, #12
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
 800913e:	460b      	mov	r3, r1
 8009140:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009142:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009144:	4618      	mov	r0, r3
 8009146:	370c      	adds	r7, #12
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009150:	b480      	push	{r7}
 8009152:	b083      	sub	sp, #12
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	460b      	mov	r3, r1
 800915a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800915c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800915e:	4618      	mov	r0, r3
 8009160:	370c      	adds	r7, #12
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr

0800916a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800916a:	b580      	push	{r7, lr}
 800916c:	b086      	sub	sp, #24
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
 8009172:	460b      	mov	r3, r1
 8009174:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800917e:	2300      	movs	r3, #0
 8009180:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	885b      	ldrh	r3, [r3, #2]
 8009186:	b29a      	uxth	r2, r3
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	781b      	ldrb	r3, [r3, #0]
 800918c:	b29b      	uxth	r3, r3
 800918e:	429a      	cmp	r2, r3
 8009190:	d920      	bls.n	80091d4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	b29b      	uxth	r3, r3
 8009198:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800919a:	e013      	b.n	80091c4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800919c:	f107 030a 	add.w	r3, r7, #10
 80091a0:	4619      	mov	r1, r3
 80091a2:	6978      	ldr	r0, [r7, #20]
 80091a4:	f000 f81b 	bl	80091de <USBD_GetNextDesc>
 80091a8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	785b      	ldrb	r3, [r3, #1]
 80091ae:	2b05      	cmp	r3, #5
 80091b0:	d108      	bne.n	80091c4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	789b      	ldrb	r3, [r3, #2]
 80091ba:	78fa      	ldrb	r2, [r7, #3]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d008      	beq.n	80091d2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80091c0:	2300      	movs	r3, #0
 80091c2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	885b      	ldrh	r3, [r3, #2]
 80091c8:	b29a      	uxth	r2, r3
 80091ca:	897b      	ldrh	r3, [r7, #10]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d8e5      	bhi.n	800919c <USBD_GetEpDesc+0x32>
 80091d0:	e000      	b.n	80091d4 <USBD_GetEpDesc+0x6a>
          break;
 80091d2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80091d4:	693b      	ldr	r3, [r7, #16]
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3718      	adds	r7, #24
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}

080091de <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80091de:	b480      	push	{r7}
 80091e0:	b085      	sub	sp, #20
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
 80091e6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	881a      	ldrh	r2, [r3, #0]
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	4413      	add	r3, r2
 80091f8:	b29a      	uxth	r2, r3
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	461a      	mov	r2, r3
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	4413      	add	r3, r2
 8009208:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800920a:	68fb      	ldr	r3, [r7, #12]
}
 800920c:	4618      	mov	r0, r3
 800920e:	3714      	adds	r7, #20
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009218:	b480      	push	{r7}
 800921a:	b087      	sub	sp, #28
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	3301      	adds	r3, #1
 800922e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009236:	8a3b      	ldrh	r3, [r7, #16]
 8009238:	021b      	lsls	r3, r3, #8
 800923a:	b21a      	sxth	r2, r3
 800923c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009240:	4313      	orrs	r3, r2
 8009242:	b21b      	sxth	r3, r3
 8009244:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009246:	89fb      	ldrh	r3, [r7, #14]
}
 8009248:	4618      	mov	r0, r3
 800924a:	371c      	adds	r7, #28
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr

08009254 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800925e:	2300      	movs	r3, #0
 8009260:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800926a:	2b40      	cmp	r3, #64	; 0x40
 800926c:	d005      	beq.n	800927a <USBD_StdDevReq+0x26>
 800926e:	2b40      	cmp	r3, #64	; 0x40
 8009270:	d857      	bhi.n	8009322 <USBD_StdDevReq+0xce>
 8009272:	2b00      	cmp	r3, #0
 8009274:	d00f      	beq.n	8009296 <USBD_StdDevReq+0x42>
 8009276:	2b20      	cmp	r3, #32
 8009278:	d153      	bne.n	8009322 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	32ae      	adds	r2, #174	; 0xae
 8009284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009288:	689b      	ldr	r3, [r3, #8]
 800928a:	6839      	ldr	r1, [r7, #0]
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	4798      	blx	r3
 8009290:	4603      	mov	r3, r0
 8009292:	73fb      	strb	r3, [r7, #15]
      break;
 8009294:	e04a      	b.n	800932c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	785b      	ldrb	r3, [r3, #1]
 800929a:	2b09      	cmp	r3, #9
 800929c:	d83b      	bhi.n	8009316 <USBD_StdDevReq+0xc2>
 800929e:	a201      	add	r2, pc, #4	; (adr r2, 80092a4 <USBD_StdDevReq+0x50>)
 80092a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a4:	080092f9 	.word	0x080092f9
 80092a8:	0800930d 	.word	0x0800930d
 80092ac:	08009317 	.word	0x08009317
 80092b0:	08009303 	.word	0x08009303
 80092b4:	08009317 	.word	0x08009317
 80092b8:	080092d7 	.word	0x080092d7
 80092bc:	080092cd 	.word	0x080092cd
 80092c0:	08009317 	.word	0x08009317
 80092c4:	080092ef 	.word	0x080092ef
 80092c8:	080092e1 	.word	0x080092e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80092cc:	6839      	ldr	r1, [r7, #0]
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 fa3c 	bl	800974c <USBD_GetDescriptor>
          break;
 80092d4:	e024      	b.n	8009320 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80092d6:	6839      	ldr	r1, [r7, #0]
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 fbcb 	bl	8009a74 <USBD_SetAddress>
          break;
 80092de:	e01f      	b.n	8009320 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80092e0:	6839      	ldr	r1, [r7, #0]
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 fc0a 	bl	8009afc <USBD_SetConfig>
 80092e8:	4603      	mov	r3, r0
 80092ea:	73fb      	strb	r3, [r7, #15]
          break;
 80092ec:	e018      	b.n	8009320 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80092ee:	6839      	ldr	r1, [r7, #0]
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 fcad 	bl	8009c50 <USBD_GetConfig>
          break;
 80092f6:	e013      	b.n	8009320 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80092f8:	6839      	ldr	r1, [r7, #0]
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 fcde 	bl	8009cbc <USBD_GetStatus>
          break;
 8009300:	e00e      	b.n	8009320 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009302:	6839      	ldr	r1, [r7, #0]
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 fd0d 	bl	8009d24 <USBD_SetFeature>
          break;
 800930a:	e009      	b.n	8009320 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800930c:	6839      	ldr	r1, [r7, #0]
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 fd31 	bl	8009d76 <USBD_ClrFeature>
          break;
 8009314:	e004      	b.n	8009320 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009316:	6839      	ldr	r1, [r7, #0]
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 fd88 	bl	8009e2e <USBD_CtlError>
          break;
 800931e:	bf00      	nop
      }
      break;
 8009320:	e004      	b.n	800932c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009322:	6839      	ldr	r1, [r7, #0]
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 fd82 	bl	8009e2e <USBD_CtlError>
      break;
 800932a:	bf00      	nop
  }

  return ret;
 800932c:	7bfb      	ldrb	r3, [r7, #15]
}
 800932e:	4618      	mov	r0, r3
 8009330:	3710      	adds	r7, #16
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop

08009338 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009342:	2300      	movs	r3, #0
 8009344:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800934e:	2b40      	cmp	r3, #64	; 0x40
 8009350:	d005      	beq.n	800935e <USBD_StdItfReq+0x26>
 8009352:	2b40      	cmp	r3, #64	; 0x40
 8009354:	d852      	bhi.n	80093fc <USBD_StdItfReq+0xc4>
 8009356:	2b00      	cmp	r3, #0
 8009358:	d001      	beq.n	800935e <USBD_StdItfReq+0x26>
 800935a:	2b20      	cmp	r3, #32
 800935c:	d14e      	bne.n	80093fc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009364:	b2db      	uxtb	r3, r3
 8009366:	3b01      	subs	r3, #1
 8009368:	2b02      	cmp	r3, #2
 800936a:	d840      	bhi.n	80093ee <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	889b      	ldrh	r3, [r3, #4]
 8009370:	b2db      	uxtb	r3, r3
 8009372:	2b01      	cmp	r3, #1
 8009374:	d836      	bhi.n	80093e4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	889b      	ldrh	r3, [r3, #4]
 800937a:	b2db      	uxtb	r3, r3
 800937c:	4619      	mov	r1, r3
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f7ff fed9 	bl	8009136 <USBD_CoreFindIF>
 8009384:	4603      	mov	r3, r0
 8009386:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009388:	7bbb      	ldrb	r3, [r7, #14]
 800938a:	2bff      	cmp	r3, #255	; 0xff
 800938c:	d01d      	beq.n	80093ca <USBD_StdItfReq+0x92>
 800938e:	7bbb      	ldrb	r3, [r7, #14]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d11a      	bne.n	80093ca <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009394:	7bba      	ldrb	r2, [r7, #14]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	32ae      	adds	r2, #174	; 0xae
 800939a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d00f      	beq.n	80093c4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80093a4:	7bba      	ldrb	r2, [r7, #14]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80093ac:	7bba      	ldrb	r2, [r7, #14]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	32ae      	adds	r2, #174	; 0xae
 80093b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093b6:	689b      	ldr	r3, [r3, #8]
 80093b8:	6839      	ldr	r1, [r7, #0]
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	4798      	blx	r3
 80093be:	4603      	mov	r3, r0
 80093c0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80093c2:	e004      	b.n	80093ce <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80093c4:	2303      	movs	r3, #3
 80093c6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80093c8:	e001      	b.n	80093ce <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80093ca:	2303      	movs	r3, #3
 80093cc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	88db      	ldrh	r3, [r3, #6]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d110      	bne.n	80093f8 <USBD_StdItfReq+0xc0>
 80093d6:	7bfb      	ldrb	r3, [r7, #15]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d10d      	bne.n	80093f8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 fdf1 	bl	8009fc4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80093e2:	e009      	b.n	80093f8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80093e4:	6839      	ldr	r1, [r7, #0]
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 fd21 	bl	8009e2e <USBD_CtlError>
          break;
 80093ec:	e004      	b.n	80093f8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80093ee:	6839      	ldr	r1, [r7, #0]
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 fd1c 	bl	8009e2e <USBD_CtlError>
          break;
 80093f6:	e000      	b.n	80093fa <USBD_StdItfReq+0xc2>
          break;
 80093f8:	bf00      	nop
      }
      break;
 80093fa:	e004      	b.n	8009406 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80093fc:	6839      	ldr	r1, [r7, #0]
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 fd15 	bl	8009e2e <USBD_CtlError>
      break;
 8009404:	bf00      	nop
  }

  return ret;
 8009406:	7bfb      	ldrb	r3, [r7, #15]
}
 8009408:	4618      	mov	r0, r3
 800940a:	3710      	adds	r7, #16
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800941a:	2300      	movs	r3, #0
 800941c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	889b      	ldrh	r3, [r3, #4]
 8009422:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800942c:	2b40      	cmp	r3, #64	; 0x40
 800942e:	d007      	beq.n	8009440 <USBD_StdEPReq+0x30>
 8009430:	2b40      	cmp	r3, #64	; 0x40
 8009432:	f200 817f 	bhi.w	8009734 <USBD_StdEPReq+0x324>
 8009436:	2b00      	cmp	r3, #0
 8009438:	d02a      	beq.n	8009490 <USBD_StdEPReq+0x80>
 800943a:	2b20      	cmp	r3, #32
 800943c:	f040 817a 	bne.w	8009734 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009440:	7bbb      	ldrb	r3, [r7, #14]
 8009442:	4619      	mov	r1, r3
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f7ff fe83 	bl	8009150 <USBD_CoreFindEP>
 800944a:	4603      	mov	r3, r0
 800944c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800944e:	7b7b      	ldrb	r3, [r7, #13]
 8009450:	2bff      	cmp	r3, #255	; 0xff
 8009452:	f000 8174 	beq.w	800973e <USBD_StdEPReq+0x32e>
 8009456:	7b7b      	ldrb	r3, [r7, #13]
 8009458:	2b00      	cmp	r3, #0
 800945a:	f040 8170 	bne.w	800973e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800945e:	7b7a      	ldrb	r2, [r7, #13]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009466:	7b7a      	ldrb	r2, [r7, #13]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	32ae      	adds	r2, #174	; 0xae
 800946c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	2b00      	cmp	r3, #0
 8009474:	f000 8163 	beq.w	800973e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009478:	7b7a      	ldrb	r2, [r7, #13]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	32ae      	adds	r2, #174	; 0xae
 800947e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	6839      	ldr	r1, [r7, #0]
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	4798      	blx	r3
 800948a:	4603      	mov	r3, r0
 800948c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800948e:	e156      	b.n	800973e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	785b      	ldrb	r3, [r3, #1]
 8009494:	2b03      	cmp	r3, #3
 8009496:	d008      	beq.n	80094aa <USBD_StdEPReq+0x9a>
 8009498:	2b03      	cmp	r3, #3
 800949a:	f300 8145 	bgt.w	8009728 <USBD_StdEPReq+0x318>
 800949e:	2b00      	cmp	r3, #0
 80094a0:	f000 809b 	beq.w	80095da <USBD_StdEPReq+0x1ca>
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d03c      	beq.n	8009522 <USBD_StdEPReq+0x112>
 80094a8:	e13e      	b.n	8009728 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	2b02      	cmp	r3, #2
 80094b4:	d002      	beq.n	80094bc <USBD_StdEPReq+0xac>
 80094b6:	2b03      	cmp	r3, #3
 80094b8:	d016      	beq.n	80094e8 <USBD_StdEPReq+0xd8>
 80094ba:	e02c      	b.n	8009516 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094bc:	7bbb      	ldrb	r3, [r7, #14]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d00d      	beq.n	80094de <USBD_StdEPReq+0xce>
 80094c2:	7bbb      	ldrb	r3, [r7, #14]
 80094c4:	2b80      	cmp	r3, #128	; 0x80
 80094c6:	d00a      	beq.n	80094de <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80094c8:	7bbb      	ldrb	r3, [r7, #14]
 80094ca:	4619      	mov	r1, r3
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f004 fa45 	bl	800d95c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80094d2:	2180      	movs	r1, #128	; 0x80
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f004 fa41 	bl	800d95c <USBD_LL_StallEP>
 80094da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80094dc:	e020      	b.n	8009520 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80094de:	6839      	ldr	r1, [r7, #0]
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 fca4 	bl	8009e2e <USBD_CtlError>
              break;
 80094e6:	e01b      	b.n	8009520 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	885b      	ldrh	r3, [r3, #2]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d10e      	bne.n	800950e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80094f0:	7bbb      	ldrb	r3, [r7, #14]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d00b      	beq.n	800950e <USBD_StdEPReq+0xfe>
 80094f6:	7bbb      	ldrb	r3, [r7, #14]
 80094f8:	2b80      	cmp	r3, #128	; 0x80
 80094fa:	d008      	beq.n	800950e <USBD_StdEPReq+0xfe>
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	88db      	ldrh	r3, [r3, #6]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d104      	bne.n	800950e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009504:	7bbb      	ldrb	r3, [r7, #14]
 8009506:	4619      	mov	r1, r3
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f004 fa27 	bl	800d95c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 fd58 	bl	8009fc4 <USBD_CtlSendStatus>

              break;
 8009514:	e004      	b.n	8009520 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009516:	6839      	ldr	r1, [r7, #0]
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 fc88 	bl	8009e2e <USBD_CtlError>
              break;
 800951e:	bf00      	nop
          }
          break;
 8009520:	e107      	b.n	8009732 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009528:	b2db      	uxtb	r3, r3
 800952a:	2b02      	cmp	r3, #2
 800952c:	d002      	beq.n	8009534 <USBD_StdEPReq+0x124>
 800952e:	2b03      	cmp	r3, #3
 8009530:	d016      	beq.n	8009560 <USBD_StdEPReq+0x150>
 8009532:	e04b      	b.n	80095cc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009534:	7bbb      	ldrb	r3, [r7, #14]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d00d      	beq.n	8009556 <USBD_StdEPReq+0x146>
 800953a:	7bbb      	ldrb	r3, [r7, #14]
 800953c:	2b80      	cmp	r3, #128	; 0x80
 800953e:	d00a      	beq.n	8009556 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009540:	7bbb      	ldrb	r3, [r7, #14]
 8009542:	4619      	mov	r1, r3
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f004 fa09 	bl	800d95c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800954a:	2180      	movs	r1, #128	; 0x80
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f004 fa05 	bl	800d95c <USBD_LL_StallEP>
 8009552:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009554:	e040      	b.n	80095d8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009556:	6839      	ldr	r1, [r7, #0]
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 fc68 	bl	8009e2e <USBD_CtlError>
              break;
 800955e:	e03b      	b.n	80095d8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	885b      	ldrh	r3, [r3, #2]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d136      	bne.n	80095d6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009568:	7bbb      	ldrb	r3, [r7, #14]
 800956a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800956e:	2b00      	cmp	r3, #0
 8009570:	d004      	beq.n	800957c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009572:	7bbb      	ldrb	r3, [r7, #14]
 8009574:	4619      	mov	r1, r3
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f004 fa0f 	bl	800d99a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 fd21 	bl	8009fc4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009582:	7bbb      	ldrb	r3, [r7, #14]
 8009584:	4619      	mov	r1, r3
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f7ff fde2 	bl	8009150 <USBD_CoreFindEP>
 800958c:	4603      	mov	r3, r0
 800958e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009590:	7b7b      	ldrb	r3, [r7, #13]
 8009592:	2bff      	cmp	r3, #255	; 0xff
 8009594:	d01f      	beq.n	80095d6 <USBD_StdEPReq+0x1c6>
 8009596:	7b7b      	ldrb	r3, [r7, #13]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d11c      	bne.n	80095d6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800959c:	7b7a      	ldrb	r2, [r7, #13]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80095a4:	7b7a      	ldrb	r2, [r7, #13]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	32ae      	adds	r2, #174	; 0xae
 80095aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d010      	beq.n	80095d6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80095b4:	7b7a      	ldrb	r2, [r7, #13]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	32ae      	adds	r2, #174	; 0xae
 80095ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	6839      	ldr	r1, [r7, #0]
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	4798      	blx	r3
 80095c6:	4603      	mov	r3, r0
 80095c8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80095ca:	e004      	b.n	80095d6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80095cc:	6839      	ldr	r1, [r7, #0]
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 fc2d 	bl	8009e2e <USBD_CtlError>
              break;
 80095d4:	e000      	b.n	80095d8 <USBD_StdEPReq+0x1c8>
              break;
 80095d6:	bf00      	nop
          }
          break;
 80095d8:	e0ab      	b.n	8009732 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	2b02      	cmp	r3, #2
 80095e4:	d002      	beq.n	80095ec <USBD_StdEPReq+0x1dc>
 80095e6:	2b03      	cmp	r3, #3
 80095e8:	d032      	beq.n	8009650 <USBD_StdEPReq+0x240>
 80095ea:	e097      	b.n	800971c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095ec:	7bbb      	ldrb	r3, [r7, #14]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d007      	beq.n	8009602 <USBD_StdEPReq+0x1f2>
 80095f2:	7bbb      	ldrb	r3, [r7, #14]
 80095f4:	2b80      	cmp	r3, #128	; 0x80
 80095f6:	d004      	beq.n	8009602 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80095f8:	6839      	ldr	r1, [r7, #0]
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f000 fc17 	bl	8009e2e <USBD_CtlError>
                break;
 8009600:	e091      	b.n	8009726 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009602:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009606:	2b00      	cmp	r3, #0
 8009608:	da0b      	bge.n	8009622 <USBD_StdEPReq+0x212>
 800960a:	7bbb      	ldrb	r3, [r7, #14]
 800960c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009610:	4613      	mov	r3, r2
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	4413      	add	r3, r2
 8009616:	009b      	lsls	r3, r3, #2
 8009618:	3310      	adds	r3, #16
 800961a:	687a      	ldr	r2, [r7, #4]
 800961c:	4413      	add	r3, r2
 800961e:	3304      	adds	r3, #4
 8009620:	e00b      	b.n	800963a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009622:	7bbb      	ldrb	r3, [r7, #14]
 8009624:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009628:	4613      	mov	r3, r2
 800962a:	009b      	lsls	r3, r3, #2
 800962c:	4413      	add	r3, r2
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	4413      	add	r3, r2
 8009638:	3304      	adds	r3, #4
 800963a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	2200      	movs	r2, #0
 8009640:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	2202      	movs	r2, #2
 8009646:	4619      	mov	r1, r3
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 fc61 	bl	8009f10 <USBD_CtlSendData>
              break;
 800964e:	e06a      	b.n	8009726 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009650:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009654:	2b00      	cmp	r3, #0
 8009656:	da11      	bge.n	800967c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009658:	7bbb      	ldrb	r3, [r7, #14]
 800965a:	f003 020f 	and.w	r2, r3, #15
 800965e:	6879      	ldr	r1, [r7, #4]
 8009660:	4613      	mov	r3, r2
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	4413      	add	r3, r2
 8009666:	009b      	lsls	r3, r3, #2
 8009668:	440b      	add	r3, r1
 800966a:	3324      	adds	r3, #36	; 0x24
 800966c:	881b      	ldrh	r3, [r3, #0]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d117      	bne.n	80096a2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009672:	6839      	ldr	r1, [r7, #0]
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 fbda 	bl	8009e2e <USBD_CtlError>
                  break;
 800967a:	e054      	b.n	8009726 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800967c:	7bbb      	ldrb	r3, [r7, #14]
 800967e:	f003 020f 	and.w	r2, r3, #15
 8009682:	6879      	ldr	r1, [r7, #4]
 8009684:	4613      	mov	r3, r2
 8009686:	009b      	lsls	r3, r3, #2
 8009688:	4413      	add	r3, r2
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	440b      	add	r3, r1
 800968e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009692:	881b      	ldrh	r3, [r3, #0]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d104      	bne.n	80096a2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009698:	6839      	ldr	r1, [r7, #0]
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 fbc7 	bl	8009e2e <USBD_CtlError>
                  break;
 80096a0:	e041      	b.n	8009726 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	da0b      	bge.n	80096c2 <USBD_StdEPReq+0x2b2>
 80096aa:	7bbb      	ldrb	r3, [r7, #14]
 80096ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80096b0:	4613      	mov	r3, r2
 80096b2:	009b      	lsls	r3, r3, #2
 80096b4:	4413      	add	r3, r2
 80096b6:	009b      	lsls	r3, r3, #2
 80096b8:	3310      	adds	r3, #16
 80096ba:	687a      	ldr	r2, [r7, #4]
 80096bc:	4413      	add	r3, r2
 80096be:	3304      	adds	r3, #4
 80096c0:	e00b      	b.n	80096da <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80096c2:	7bbb      	ldrb	r3, [r7, #14]
 80096c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096c8:	4613      	mov	r3, r2
 80096ca:	009b      	lsls	r3, r3, #2
 80096cc:	4413      	add	r3, r2
 80096ce:	009b      	lsls	r3, r3, #2
 80096d0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80096d4:	687a      	ldr	r2, [r7, #4]
 80096d6:	4413      	add	r3, r2
 80096d8:	3304      	adds	r3, #4
 80096da:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80096dc:	7bbb      	ldrb	r3, [r7, #14]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d002      	beq.n	80096e8 <USBD_StdEPReq+0x2d8>
 80096e2:	7bbb      	ldrb	r3, [r7, #14]
 80096e4:	2b80      	cmp	r3, #128	; 0x80
 80096e6:	d103      	bne.n	80096f0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	2200      	movs	r2, #0
 80096ec:	601a      	str	r2, [r3, #0]
 80096ee:	e00e      	b.n	800970e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80096f0:	7bbb      	ldrb	r3, [r7, #14]
 80096f2:	4619      	mov	r1, r3
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f004 f96f 	bl	800d9d8 <USBD_LL_IsStallEP>
 80096fa:	4603      	mov	r3, r0
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d003      	beq.n	8009708 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	2201      	movs	r2, #1
 8009704:	601a      	str	r2, [r3, #0]
 8009706:	e002      	b.n	800970e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	2200      	movs	r2, #0
 800970c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	2202      	movs	r2, #2
 8009712:	4619      	mov	r1, r3
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 fbfb 	bl	8009f10 <USBD_CtlSendData>
              break;
 800971a:	e004      	b.n	8009726 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800971c:	6839      	ldr	r1, [r7, #0]
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 fb85 	bl	8009e2e <USBD_CtlError>
              break;
 8009724:	bf00      	nop
          }
          break;
 8009726:	e004      	b.n	8009732 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009728:	6839      	ldr	r1, [r7, #0]
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 fb7f 	bl	8009e2e <USBD_CtlError>
          break;
 8009730:	bf00      	nop
      }
      break;
 8009732:	e005      	b.n	8009740 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009734:	6839      	ldr	r1, [r7, #0]
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 fb79 	bl	8009e2e <USBD_CtlError>
      break;
 800973c:	e000      	b.n	8009740 <USBD_StdEPReq+0x330>
      break;
 800973e:	bf00      	nop
  }

  return ret;
 8009740:	7bfb      	ldrb	r3, [r7, #15]
}
 8009742:	4618      	mov	r0, r3
 8009744:	3710      	adds	r7, #16
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
	...

0800974c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009756:	2300      	movs	r3, #0
 8009758:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800975a:	2300      	movs	r3, #0
 800975c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800975e:	2300      	movs	r3, #0
 8009760:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	885b      	ldrh	r3, [r3, #2]
 8009766:	0a1b      	lsrs	r3, r3, #8
 8009768:	b29b      	uxth	r3, r3
 800976a:	3b01      	subs	r3, #1
 800976c:	2b0e      	cmp	r3, #14
 800976e:	f200 8152 	bhi.w	8009a16 <USBD_GetDescriptor+0x2ca>
 8009772:	a201      	add	r2, pc, #4	; (adr r2, 8009778 <USBD_GetDescriptor+0x2c>)
 8009774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009778:	080097e9 	.word	0x080097e9
 800977c:	08009801 	.word	0x08009801
 8009780:	08009841 	.word	0x08009841
 8009784:	08009a17 	.word	0x08009a17
 8009788:	08009a17 	.word	0x08009a17
 800978c:	080099b7 	.word	0x080099b7
 8009790:	080099e3 	.word	0x080099e3
 8009794:	08009a17 	.word	0x08009a17
 8009798:	08009a17 	.word	0x08009a17
 800979c:	08009a17 	.word	0x08009a17
 80097a0:	08009a17 	.word	0x08009a17
 80097a4:	08009a17 	.word	0x08009a17
 80097a8:	08009a17 	.word	0x08009a17
 80097ac:	08009a17 	.word	0x08009a17
 80097b0:	080097b5 	.word	0x080097b5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097ba:	69db      	ldr	r3, [r3, #28]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d00b      	beq.n	80097d8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097c6:	69db      	ldr	r3, [r3, #28]
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	7c12      	ldrb	r2, [r2, #16]
 80097cc:	f107 0108 	add.w	r1, r7, #8
 80097d0:	4610      	mov	r0, r2
 80097d2:	4798      	blx	r3
 80097d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80097d6:	e126      	b.n	8009a26 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80097d8:	6839      	ldr	r1, [r7, #0]
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 fb27 	bl	8009e2e <USBD_CtlError>
        err++;
 80097e0:	7afb      	ldrb	r3, [r7, #11]
 80097e2:	3301      	adds	r3, #1
 80097e4:	72fb      	strb	r3, [r7, #11]
      break;
 80097e6:	e11e      	b.n	8009a26 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	7c12      	ldrb	r2, [r2, #16]
 80097f4:	f107 0108 	add.w	r1, r7, #8
 80097f8:	4610      	mov	r0, r2
 80097fa:	4798      	blx	r3
 80097fc:	60f8      	str	r0, [r7, #12]
      break;
 80097fe:	e112      	b.n	8009a26 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	7c1b      	ldrb	r3, [r3, #16]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d10d      	bne.n	8009824 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800980e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009810:	f107 0208 	add.w	r2, r7, #8
 8009814:	4610      	mov	r0, r2
 8009816:	4798      	blx	r3
 8009818:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	3301      	adds	r3, #1
 800981e:	2202      	movs	r2, #2
 8009820:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009822:	e100      	b.n	8009a26 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800982a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800982c:	f107 0208 	add.w	r2, r7, #8
 8009830:	4610      	mov	r0, r2
 8009832:	4798      	blx	r3
 8009834:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	3301      	adds	r3, #1
 800983a:	2202      	movs	r2, #2
 800983c:	701a      	strb	r2, [r3, #0]
      break;
 800983e:	e0f2      	b.n	8009a26 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	885b      	ldrh	r3, [r3, #2]
 8009844:	b2db      	uxtb	r3, r3
 8009846:	2b05      	cmp	r3, #5
 8009848:	f200 80ac 	bhi.w	80099a4 <USBD_GetDescriptor+0x258>
 800984c:	a201      	add	r2, pc, #4	; (adr r2, 8009854 <USBD_GetDescriptor+0x108>)
 800984e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009852:	bf00      	nop
 8009854:	0800986d 	.word	0x0800986d
 8009858:	080098a1 	.word	0x080098a1
 800985c:	080098d5 	.word	0x080098d5
 8009860:	08009909 	.word	0x08009909
 8009864:	0800993d 	.word	0x0800993d
 8009868:	08009971 	.word	0x08009971
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d00b      	beq.n	8009890 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	7c12      	ldrb	r2, [r2, #16]
 8009884:	f107 0108 	add.w	r1, r7, #8
 8009888:	4610      	mov	r0, r2
 800988a:	4798      	blx	r3
 800988c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800988e:	e091      	b.n	80099b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009890:	6839      	ldr	r1, [r7, #0]
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 facb 	bl	8009e2e <USBD_CtlError>
            err++;
 8009898:	7afb      	ldrb	r3, [r7, #11]
 800989a:	3301      	adds	r3, #1
 800989c:	72fb      	strb	r3, [r7, #11]
          break;
 800989e:	e089      	b.n	80099b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098a6:	689b      	ldr	r3, [r3, #8]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d00b      	beq.n	80098c4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098b2:	689b      	ldr	r3, [r3, #8]
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	7c12      	ldrb	r2, [r2, #16]
 80098b8:	f107 0108 	add.w	r1, r7, #8
 80098bc:	4610      	mov	r0, r2
 80098be:	4798      	blx	r3
 80098c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098c2:	e077      	b.n	80099b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80098c4:	6839      	ldr	r1, [r7, #0]
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 fab1 	bl	8009e2e <USBD_CtlError>
            err++;
 80098cc:	7afb      	ldrb	r3, [r7, #11]
 80098ce:	3301      	adds	r3, #1
 80098d0:	72fb      	strb	r3, [r7, #11]
          break;
 80098d2:	e06f      	b.n	80099b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098da:	68db      	ldr	r3, [r3, #12]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d00b      	beq.n	80098f8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098e6:	68db      	ldr	r3, [r3, #12]
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	7c12      	ldrb	r2, [r2, #16]
 80098ec:	f107 0108 	add.w	r1, r7, #8
 80098f0:	4610      	mov	r0, r2
 80098f2:	4798      	blx	r3
 80098f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098f6:	e05d      	b.n	80099b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80098f8:	6839      	ldr	r1, [r7, #0]
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 fa97 	bl	8009e2e <USBD_CtlError>
            err++;
 8009900:	7afb      	ldrb	r3, [r7, #11]
 8009902:	3301      	adds	r3, #1
 8009904:	72fb      	strb	r3, [r7, #11]
          break;
 8009906:	e055      	b.n	80099b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800990e:	691b      	ldr	r3, [r3, #16]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d00b      	beq.n	800992c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800991a:	691b      	ldr	r3, [r3, #16]
 800991c:	687a      	ldr	r2, [r7, #4]
 800991e:	7c12      	ldrb	r2, [r2, #16]
 8009920:	f107 0108 	add.w	r1, r7, #8
 8009924:	4610      	mov	r0, r2
 8009926:	4798      	blx	r3
 8009928:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800992a:	e043      	b.n	80099b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800992c:	6839      	ldr	r1, [r7, #0]
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 fa7d 	bl	8009e2e <USBD_CtlError>
            err++;
 8009934:	7afb      	ldrb	r3, [r7, #11]
 8009936:	3301      	adds	r3, #1
 8009938:	72fb      	strb	r3, [r7, #11]
          break;
 800993a:	e03b      	b.n	80099b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009942:	695b      	ldr	r3, [r3, #20]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d00b      	beq.n	8009960 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800994e:	695b      	ldr	r3, [r3, #20]
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	7c12      	ldrb	r2, [r2, #16]
 8009954:	f107 0108 	add.w	r1, r7, #8
 8009958:	4610      	mov	r0, r2
 800995a:	4798      	blx	r3
 800995c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800995e:	e029      	b.n	80099b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009960:	6839      	ldr	r1, [r7, #0]
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 fa63 	bl	8009e2e <USBD_CtlError>
            err++;
 8009968:	7afb      	ldrb	r3, [r7, #11]
 800996a:	3301      	adds	r3, #1
 800996c:	72fb      	strb	r3, [r7, #11]
          break;
 800996e:	e021      	b.n	80099b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009976:	699b      	ldr	r3, [r3, #24]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d00b      	beq.n	8009994 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009982:	699b      	ldr	r3, [r3, #24]
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	7c12      	ldrb	r2, [r2, #16]
 8009988:	f107 0108 	add.w	r1, r7, #8
 800998c:	4610      	mov	r0, r2
 800998e:	4798      	blx	r3
 8009990:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009992:	e00f      	b.n	80099b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009994:	6839      	ldr	r1, [r7, #0]
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 fa49 	bl	8009e2e <USBD_CtlError>
            err++;
 800999c:	7afb      	ldrb	r3, [r7, #11]
 800999e:	3301      	adds	r3, #1
 80099a0:	72fb      	strb	r3, [r7, #11]
          break;
 80099a2:	e007      	b.n	80099b4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80099a4:	6839      	ldr	r1, [r7, #0]
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 fa41 	bl	8009e2e <USBD_CtlError>
          err++;
 80099ac:	7afb      	ldrb	r3, [r7, #11]
 80099ae:	3301      	adds	r3, #1
 80099b0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80099b2:	bf00      	nop
      }
      break;
 80099b4:	e037      	b.n	8009a26 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	7c1b      	ldrb	r3, [r3, #16]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d109      	bne.n	80099d2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099c6:	f107 0208 	add.w	r2, r7, #8
 80099ca:	4610      	mov	r0, r2
 80099cc:	4798      	blx	r3
 80099ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80099d0:	e029      	b.n	8009a26 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80099d2:	6839      	ldr	r1, [r7, #0]
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 fa2a 	bl	8009e2e <USBD_CtlError>
        err++;
 80099da:	7afb      	ldrb	r3, [r7, #11]
 80099dc:	3301      	adds	r3, #1
 80099de:	72fb      	strb	r3, [r7, #11]
      break;
 80099e0:	e021      	b.n	8009a26 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	7c1b      	ldrb	r3, [r3, #16]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d10d      	bne.n	8009a06 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099f2:	f107 0208 	add.w	r2, r7, #8
 80099f6:	4610      	mov	r0, r2
 80099f8:	4798      	blx	r3
 80099fa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	3301      	adds	r3, #1
 8009a00:	2207      	movs	r2, #7
 8009a02:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a04:	e00f      	b.n	8009a26 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009a06:	6839      	ldr	r1, [r7, #0]
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f000 fa10 	bl	8009e2e <USBD_CtlError>
        err++;
 8009a0e:	7afb      	ldrb	r3, [r7, #11]
 8009a10:	3301      	adds	r3, #1
 8009a12:	72fb      	strb	r3, [r7, #11]
      break;
 8009a14:	e007      	b.n	8009a26 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009a16:	6839      	ldr	r1, [r7, #0]
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f000 fa08 	bl	8009e2e <USBD_CtlError>
      err++;
 8009a1e:	7afb      	ldrb	r3, [r7, #11]
 8009a20:	3301      	adds	r3, #1
 8009a22:	72fb      	strb	r3, [r7, #11]
      break;
 8009a24:	bf00      	nop
  }

  if (err != 0U)
 8009a26:	7afb      	ldrb	r3, [r7, #11]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d11e      	bne.n	8009a6a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	88db      	ldrh	r3, [r3, #6]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d016      	beq.n	8009a62 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009a34:	893b      	ldrh	r3, [r7, #8]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d00e      	beq.n	8009a58 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	88da      	ldrh	r2, [r3, #6]
 8009a3e:	893b      	ldrh	r3, [r7, #8]
 8009a40:	4293      	cmp	r3, r2
 8009a42:	bf28      	it	cs
 8009a44:	4613      	movcs	r3, r2
 8009a46:	b29b      	uxth	r3, r3
 8009a48:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009a4a:	893b      	ldrh	r3, [r7, #8]
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	68f9      	ldr	r1, [r7, #12]
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f000 fa5d 	bl	8009f10 <USBD_CtlSendData>
 8009a56:	e009      	b.n	8009a6c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009a58:	6839      	ldr	r1, [r7, #0]
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 f9e7 	bl	8009e2e <USBD_CtlError>
 8009a60:	e004      	b.n	8009a6c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 faae 	bl	8009fc4 <USBD_CtlSendStatus>
 8009a68:	e000      	b.n	8009a6c <USBD_GetDescriptor+0x320>
    return;
 8009a6a:	bf00      	nop
  }
}
 8009a6c:	3710      	adds	r7, #16
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}
 8009a72:	bf00      	nop

08009a74 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	889b      	ldrh	r3, [r3, #4]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d131      	bne.n	8009aea <USBD_SetAddress+0x76>
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	88db      	ldrh	r3, [r3, #6]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d12d      	bne.n	8009aea <USBD_SetAddress+0x76>
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	885b      	ldrh	r3, [r3, #2]
 8009a92:	2b7f      	cmp	r3, #127	; 0x7f
 8009a94:	d829      	bhi.n	8009aea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	885b      	ldrh	r3, [r3, #2]
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009aa0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aa8:	b2db      	uxtb	r3, r3
 8009aaa:	2b03      	cmp	r3, #3
 8009aac:	d104      	bne.n	8009ab8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009aae:	6839      	ldr	r1, [r7, #0]
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 f9bc 	bl	8009e2e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ab6:	e01d      	b.n	8009af4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	7bfa      	ldrb	r2, [r7, #15]
 8009abc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009ac0:	7bfb      	ldrb	r3, [r7, #15]
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f003 ffb3 	bl	800da30 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 fa7a 	bl	8009fc4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009ad0:	7bfb      	ldrb	r3, [r7, #15]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d004      	beq.n	8009ae0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2202      	movs	r2, #2
 8009ada:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ade:	e009      	b.n	8009af4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ae8:	e004      	b.n	8009af4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009aea:	6839      	ldr	r1, [r7, #0]
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f000 f99e 	bl	8009e2e <USBD_CtlError>
  }
}
 8009af2:	bf00      	nop
 8009af4:	bf00      	nop
 8009af6:	3710      	adds	r7, #16
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b06:	2300      	movs	r3, #0
 8009b08:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	885b      	ldrh	r3, [r3, #2]
 8009b0e:	b2da      	uxtb	r2, r3
 8009b10:	4b4e      	ldr	r3, [pc, #312]	; (8009c4c <USBD_SetConfig+0x150>)
 8009b12:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009b14:	4b4d      	ldr	r3, [pc, #308]	; (8009c4c <USBD_SetConfig+0x150>)
 8009b16:	781b      	ldrb	r3, [r3, #0]
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d905      	bls.n	8009b28 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009b1c:	6839      	ldr	r1, [r7, #0]
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 f985 	bl	8009e2e <USBD_CtlError>
    return USBD_FAIL;
 8009b24:	2303      	movs	r3, #3
 8009b26:	e08c      	b.n	8009c42 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	2b02      	cmp	r3, #2
 8009b32:	d002      	beq.n	8009b3a <USBD_SetConfig+0x3e>
 8009b34:	2b03      	cmp	r3, #3
 8009b36:	d029      	beq.n	8009b8c <USBD_SetConfig+0x90>
 8009b38:	e075      	b.n	8009c26 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009b3a:	4b44      	ldr	r3, [pc, #272]	; (8009c4c <USBD_SetConfig+0x150>)
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d020      	beq.n	8009b84 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009b42:	4b42      	ldr	r3, [pc, #264]	; (8009c4c <USBD_SetConfig+0x150>)
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	461a      	mov	r2, r3
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009b4c:	4b3f      	ldr	r3, [pc, #252]	; (8009c4c <USBD_SetConfig+0x150>)
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	4619      	mov	r1, r3
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f7fe ffbd 	bl	8008ad2 <USBD_SetClassConfig>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009b5c:	7bfb      	ldrb	r3, [r7, #15]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d008      	beq.n	8009b74 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009b62:	6839      	ldr	r1, [r7, #0]
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 f962 	bl	8009e2e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2202      	movs	r2, #2
 8009b6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009b72:	e065      	b.n	8009c40 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f000 fa25 	bl	8009fc4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2203      	movs	r2, #3
 8009b7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009b82:	e05d      	b.n	8009c40 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 fa1d 	bl	8009fc4 <USBD_CtlSendStatus>
      break;
 8009b8a:	e059      	b.n	8009c40 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009b8c:	4b2f      	ldr	r3, [pc, #188]	; (8009c4c <USBD_SetConfig+0x150>)
 8009b8e:	781b      	ldrb	r3, [r3, #0]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d112      	bne.n	8009bba <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2202      	movs	r2, #2
 8009b98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009b9c:	4b2b      	ldr	r3, [pc, #172]	; (8009c4c <USBD_SetConfig+0x150>)
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009ba6:	4b29      	ldr	r3, [pc, #164]	; (8009c4c <USBD_SetConfig+0x150>)
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	4619      	mov	r1, r3
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f7fe ffac 	bl	8008b0a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 fa06 	bl	8009fc4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009bb8:	e042      	b.n	8009c40 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009bba:	4b24      	ldr	r3, [pc, #144]	; (8009c4c <USBD_SetConfig+0x150>)
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d02a      	beq.n	8009c1e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	b2db      	uxtb	r3, r3
 8009bce:	4619      	mov	r1, r3
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f7fe ff9a 	bl	8008b0a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009bd6:	4b1d      	ldr	r3, [pc, #116]	; (8009c4c <USBD_SetConfig+0x150>)
 8009bd8:	781b      	ldrb	r3, [r3, #0]
 8009bda:	461a      	mov	r2, r3
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009be0:	4b1a      	ldr	r3, [pc, #104]	; (8009c4c <USBD_SetConfig+0x150>)
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	4619      	mov	r1, r3
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f7fe ff73 	bl	8008ad2 <USBD_SetClassConfig>
 8009bec:	4603      	mov	r3, r0
 8009bee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009bf0:	7bfb      	ldrb	r3, [r7, #15]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d00f      	beq.n	8009c16 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009bf6:	6839      	ldr	r1, [r7, #0]
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 f918 	bl	8009e2e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	4619      	mov	r1, r3
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f7fe ff7f 	bl	8008b0a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2202      	movs	r2, #2
 8009c10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009c14:	e014      	b.n	8009c40 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 f9d4 	bl	8009fc4 <USBD_CtlSendStatus>
      break;
 8009c1c:	e010      	b.n	8009c40 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f000 f9d0 	bl	8009fc4 <USBD_CtlSendStatus>
      break;
 8009c24:	e00c      	b.n	8009c40 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009c26:	6839      	ldr	r1, [r7, #0]
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f000 f900 	bl	8009e2e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009c2e:	4b07      	ldr	r3, [pc, #28]	; (8009c4c <USBD_SetConfig+0x150>)
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	4619      	mov	r1, r3
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f7fe ff68 	bl	8008b0a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009c3a:	2303      	movs	r3, #3
 8009c3c:	73fb      	strb	r3, [r7, #15]
      break;
 8009c3e:	bf00      	nop
  }

  return ret;
 8009c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3710      	adds	r7, #16
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop
 8009c4c:	20000f24 	.word	0x20000f24

08009c50 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b082      	sub	sp, #8
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	88db      	ldrh	r3, [r3, #6]
 8009c5e:	2b01      	cmp	r3, #1
 8009c60:	d004      	beq.n	8009c6c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009c62:	6839      	ldr	r1, [r7, #0]
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 f8e2 	bl	8009e2e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009c6a:	e023      	b.n	8009cb4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c72:	b2db      	uxtb	r3, r3
 8009c74:	2b02      	cmp	r3, #2
 8009c76:	dc02      	bgt.n	8009c7e <USBD_GetConfig+0x2e>
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	dc03      	bgt.n	8009c84 <USBD_GetConfig+0x34>
 8009c7c:	e015      	b.n	8009caa <USBD_GetConfig+0x5a>
 8009c7e:	2b03      	cmp	r3, #3
 8009c80:	d00b      	beq.n	8009c9a <USBD_GetConfig+0x4a>
 8009c82:	e012      	b.n	8009caa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2200      	movs	r2, #0
 8009c88:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	3308      	adds	r3, #8
 8009c8e:	2201      	movs	r2, #1
 8009c90:	4619      	mov	r1, r3
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 f93c 	bl	8009f10 <USBD_CtlSendData>
        break;
 8009c98:	e00c      	b.n	8009cb4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	3304      	adds	r3, #4
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 f934 	bl	8009f10 <USBD_CtlSendData>
        break;
 8009ca8:	e004      	b.n	8009cb4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009caa:	6839      	ldr	r1, [r7, #0]
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f000 f8be 	bl	8009e2e <USBD_CtlError>
        break;
 8009cb2:	bf00      	nop
}
 8009cb4:	bf00      	nop
 8009cb6:	3708      	adds	r7, #8
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b082      	sub	sp, #8
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ccc:	b2db      	uxtb	r3, r3
 8009cce:	3b01      	subs	r3, #1
 8009cd0:	2b02      	cmp	r3, #2
 8009cd2:	d81e      	bhi.n	8009d12 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	88db      	ldrh	r3, [r3, #6]
 8009cd8:	2b02      	cmp	r3, #2
 8009cda:	d004      	beq.n	8009ce6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009cdc:	6839      	ldr	r1, [r7, #0]
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 f8a5 	bl	8009e2e <USBD_CtlError>
        break;
 8009ce4:	e01a      	b.n	8009d1c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2201      	movs	r2, #1
 8009cea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d005      	beq.n	8009d02 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	68db      	ldr	r3, [r3, #12]
 8009cfa:	f043 0202 	orr.w	r2, r3, #2
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	330c      	adds	r3, #12
 8009d06:	2202      	movs	r2, #2
 8009d08:	4619      	mov	r1, r3
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 f900 	bl	8009f10 <USBD_CtlSendData>
      break;
 8009d10:	e004      	b.n	8009d1c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009d12:	6839      	ldr	r1, [r7, #0]
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 f88a 	bl	8009e2e <USBD_CtlError>
      break;
 8009d1a:	bf00      	nop
  }
}
 8009d1c:	bf00      	nop
 8009d1e:	3708      	adds	r7, #8
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b082      	sub	sp, #8
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	885b      	ldrh	r3, [r3, #2]
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	d107      	bne.n	8009d46 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2201      	movs	r2, #1
 8009d3a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 f940 	bl	8009fc4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009d44:	e013      	b.n	8009d6e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	885b      	ldrh	r3, [r3, #2]
 8009d4a:	2b02      	cmp	r3, #2
 8009d4c:	d10b      	bne.n	8009d66 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	889b      	ldrh	r3, [r3, #4]
 8009d52:	0a1b      	lsrs	r3, r3, #8
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	b2da      	uxtb	r2, r3
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 f930 	bl	8009fc4 <USBD_CtlSendStatus>
}
 8009d64:	e003      	b.n	8009d6e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009d66:	6839      	ldr	r1, [r7, #0]
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 f860 	bl	8009e2e <USBD_CtlError>
}
 8009d6e:	bf00      	nop
 8009d70:	3708      	adds	r7, #8
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}

08009d76 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b082      	sub	sp, #8
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
 8009d7e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d86:	b2db      	uxtb	r3, r3
 8009d88:	3b01      	subs	r3, #1
 8009d8a:	2b02      	cmp	r3, #2
 8009d8c:	d80b      	bhi.n	8009da6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	885b      	ldrh	r3, [r3, #2]
 8009d92:	2b01      	cmp	r3, #1
 8009d94:	d10c      	bne.n	8009db0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 f910 	bl	8009fc4 <USBD_CtlSendStatus>
      }
      break;
 8009da4:	e004      	b.n	8009db0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009da6:	6839      	ldr	r1, [r7, #0]
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 f840 	bl	8009e2e <USBD_CtlError>
      break;
 8009dae:	e000      	b.n	8009db2 <USBD_ClrFeature+0x3c>
      break;
 8009db0:	bf00      	nop
  }
}
 8009db2:	bf00      	nop
 8009db4:	3708      	adds	r7, #8
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}

08009dba <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009dba:	b580      	push	{r7, lr}
 8009dbc:	b084      	sub	sp, #16
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	6078      	str	r0, [r7, #4]
 8009dc2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	781a      	ldrb	r2, [r3, #0]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	781a      	ldrb	r2, [r3, #0]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	3301      	adds	r3, #1
 8009de2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009de4:	68f8      	ldr	r0, [r7, #12]
 8009de6:	f7ff fa17 	bl	8009218 <SWAPBYTE>
 8009dea:	4603      	mov	r3, r0
 8009dec:	461a      	mov	r2, r3
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	3301      	adds	r3, #1
 8009df6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009dfe:	68f8      	ldr	r0, [r7, #12]
 8009e00:	f7ff fa0a 	bl	8009218 <SWAPBYTE>
 8009e04:	4603      	mov	r3, r0
 8009e06:	461a      	mov	r2, r3
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	3301      	adds	r3, #1
 8009e10:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	3301      	adds	r3, #1
 8009e16:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009e18:	68f8      	ldr	r0, [r7, #12]
 8009e1a:	f7ff f9fd 	bl	8009218 <SWAPBYTE>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	461a      	mov	r2, r3
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	80da      	strh	r2, [r3, #6]
}
 8009e26:	bf00      	nop
 8009e28:	3710      	adds	r7, #16
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}

08009e2e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e2e:	b580      	push	{r7, lr}
 8009e30:	b082      	sub	sp, #8
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	6078      	str	r0, [r7, #4]
 8009e36:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e38:	2180      	movs	r1, #128	; 0x80
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f003 fd8e 	bl	800d95c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009e40:	2100      	movs	r1, #0
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f003 fd8a 	bl	800d95c <USBD_LL_StallEP>
}
 8009e48:	bf00      	nop
 8009e4a:	3708      	adds	r7, #8
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b086      	sub	sp, #24
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	60f8      	str	r0, [r7, #12]
 8009e58:	60b9      	str	r1, [r7, #8]
 8009e5a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d036      	beq.n	8009ed4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009e6a:	6938      	ldr	r0, [r7, #16]
 8009e6c:	f000 f836 	bl	8009edc <USBD_GetLen>
 8009e70:	4603      	mov	r3, r0
 8009e72:	3301      	adds	r3, #1
 8009e74:	b29b      	uxth	r3, r3
 8009e76:	005b      	lsls	r3, r3, #1
 8009e78:	b29a      	uxth	r2, r3
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009e7e:	7dfb      	ldrb	r3, [r7, #23]
 8009e80:	68ba      	ldr	r2, [r7, #8]
 8009e82:	4413      	add	r3, r2
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	7812      	ldrb	r2, [r2, #0]
 8009e88:	701a      	strb	r2, [r3, #0]
  idx++;
 8009e8a:	7dfb      	ldrb	r3, [r7, #23]
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009e90:	7dfb      	ldrb	r3, [r7, #23]
 8009e92:	68ba      	ldr	r2, [r7, #8]
 8009e94:	4413      	add	r3, r2
 8009e96:	2203      	movs	r2, #3
 8009e98:	701a      	strb	r2, [r3, #0]
  idx++;
 8009e9a:	7dfb      	ldrb	r3, [r7, #23]
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009ea0:	e013      	b.n	8009eca <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009ea2:	7dfb      	ldrb	r3, [r7, #23]
 8009ea4:	68ba      	ldr	r2, [r7, #8]
 8009ea6:	4413      	add	r3, r2
 8009ea8:	693a      	ldr	r2, [r7, #16]
 8009eaa:	7812      	ldrb	r2, [r2, #0]
 8009eac:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	613b      	str	r3, [r7, #16]
    idx++;
 8009eb4:	7dfb      	ldrb	r3, [r7, #23]
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009eba:	7dfb      	ldrb	r3, [r7, #23]
 8009ebc:	68ba      	ldr	r2, [r7, #8]
 8009ebe:	4413      	add	r3, r2
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	701a      	strb	r2, [r3, #0]
    idx++;
 8009ec4:	7dfb      	ldrb	r3, [r7, #23]
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	781b      	ldrb	r3, [r3, #0]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d1e7      	bne.n	8009ea2 <USBD_GetString+0x52>
 8009ed2:	e000      	b.n	8009ed6 <USBD_GetString+0x86>
    return;
 8009ed4:	bf00      	nop
  }
}
 8009ed6:	3718      	adds	r7, #24
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b085      	sub	sp, #20
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009eec:	e005      	b.n	8009efa <USBD_GetLen+0x1e>
  {
    len++;
 8009eee:	7bfb      	ldrb	r3, [r7, #15]
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d1f5      	bne.n	8009eee <USBD_GetLen+0x12>
  }

  return len;
 8009f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3714      	adds	r7, #20
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr

08009f10 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	60f8      	str	r0, [r7, #12]
 8009f18:	60b9      	str	r1, [r7, #8]
 8009f1a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	2202      	movs	r2, #2
 8009f20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	687a      	ldr	r2, [r7, #4]
 8009f2e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	68ba      	ldr	r2, [r7, #8]
 8009f34:	2100      	movs	r1, #0
 8009f36:	68f8      	ldr	r0, [r7, #12]
 8009f38:	f003 fd99 	bl	800da6e <USBD_LL_Transmit>

  return USBD_OK;
 8009f3c:	2300      	movs	r3, #0
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3710      	adds	r7, #16
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}

08009f46 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009f46:	b580      	push	{r7, lr}
 8009f48:	b084      	sub	sp, #16
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	60f8      	str	r0, [r7, #12]
 8009f4e:	60b9      	str	r1, [r7, #8]
 8009f50:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	68ba      	ldr	r2, [r7, #8]
 8009f56:	2100      	movs	r1, #0
 8009f58:	68f8      	ldr	r0, [r7, #12]
 8009f5a:	f003 fd88 	bl	800da6e <USBD_LL_Transmit>

  return USBD_OK;
 8009f5e:	2300      	movs	r3, #0
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3710      	adds	r7, #16
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	60b9      	str	r1, [r7, #8]
 8009f72:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2203      	movs	r2, #3
 8009f78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	68ba      	ldr	r2, [r7, #8]
 8009f90:	2100      	movs	r1, #0
 8009f92:	68f8      	ldr	r0, [r7, #12]
 8009f94:	f003 fd8c 	bl	800dab0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f98:	2300      	movs	r3, #0
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3710      	adds	r7, #16
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}

08009fa2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009fa2:	b580      	push	{r7, lr}
 8009fa4:	b084      	sub	sp, #16
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	60f8      	str	r0, [r7, #12]
 8009faa:	60b9      	str	r1, [r7, #8]
 8009fac:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	68ba      	ldr	r2, [r7, #8]
 8009fb2:	2100      	movs	r1, #0
 8009fb4:	68f8      	ldr	r0, [r7, #12]
 8009fb6:	f003 fd7b 	bl	800dab0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3710      	adds	r7, #16
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b082      	sub	sp, #8
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2204      	movs	r2, #4
 8009fd0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	2100      	movs	r1, #0
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f003 fd47 	bl	800da6e <USBD_LL_Transmit>

  return USBD_OK;
 8009fe0:	2300      	movs	r3, #0
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3708      	adds	r7, #8
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b082      	sub	sp, #8
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2205      	movs	r2, #5
 8009ff6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	2100      	movs	r1, #0
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f003 fd55 	bl	800dab0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a006:	2300      	movs	r3, #0
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3708      	adds	r7, #8
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a010:	b480      	push	{r7}
 800a012:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800a014:	bf00      	nop
 800a016:	46bd      	mov	sp, r7
 800a018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01c:	4770      	bx	lr
	...

0800a020 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a020:	b480      	push	{r7}
 800a022:	b085      	sub	sp, #20
 800a024:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a026:	f3ef 8305 	mrs	r3, IPSR
 800a02a:	60bb      	str	r3, [r7, #8]
  return(result);
 800a02c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d10f      	bne.n	800a052 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a032:	f3ef 8310 	mrs	r3, PRIMASK
 800a036:	607b      	str	r3, [r7, #4]
  return(result);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d105      	bne.n	800a04a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a03e:	f3ef 8311 	mrs	r3, BASEPRI
 800a042:	603b      	str	r3, [r7, #0]
  return(result);
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d007      	beq.n	800a05a <osKernelInitialize+0x3a>
 800a04a:	4b0e      	ldr	r3, [pc, #56]	; (800a084 <osKernelInitialize+0x64>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	2b02      	cmp	r3, #2
 800a050:	d103      	bne.n	800a05a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800a052:	f06f 0305 	mvn.w	r3, #5
 800a056:	60fb      	str	r3, [r7, #12]
 800a058:	e00c      	b.n	800a074 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a05a:	4b0a      	ldr	r3, [pc, #40]	; (800a084 <osKernelInitialize+0x64>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d105      	bne.n	800a06e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a062:	4b08      	ldr	r3, [pc, #32]	; (800a084 <osKernelInitialize+0x64>)
 800a064:	2201      	movs	r2, #1
 800a066:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a068:	2300      	movs	r3, #0
 800a06a:	60fb      	str	r3, [r7, #12]
 800a06c:	e002      	b.n	800a074 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a06e:	f04f 33ff 	mov.w	r3, #4294967295
 800a072:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a074:	68fb      	ldr	r3, [r7, #12]
}
 800a076:	4618      	mov	r0, r3
 800a078:	3714      	adds	r7, #20
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr
 800a082:	bf00      	nop
 800a084:	20000f28 	.word	0x20000f28

0800a088 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a088:	b580      	push	{r7, lr}
 800a08a:	b084      	sub	sp, #16
 800a08c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a08e:	f3ef 8305 	mrs	r3, IPSR
 800a092:	60bb      	str	r3, [r7, #8]
  return(result);
 800a094:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a096:	2b00      	cmp	r3, #0
 800a098:	d10f      	bne.n	800a0ba <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a09a:	f3ef 8310 	mrs	r3, PRIMASK
 800a09e:	607b      	str	r3, [r7, #4]
  return(result);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d105      	bne.n	800a0b2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a0a6:	f3ef 8311 	mrs	r3, BASEPRI
 800a0aa:	603b      	str	r3, [r7, #0]
  return(result);
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d007      	beq.n	800a0c2 <osKernelStart+0x3a>
 800a0b2:	4b0f      	ldr	r3, [pc, #60]	; (800a0f0 <osKernelStart+0x68>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	2b02      	cmp	r3, #2
 800a0b8:	d103      	bne.n	800a0c2 <osKernelStart+0x3a>
    stat = osErrorISR;
 800a0ba:	f06f 0305 	mvn.w	r3, #5
 800a0be:	60fb      	str	r3, [r7, #12]
 800a0c0:	e010      	b.n	800a0e4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a0c2:	4b0b      	ldr	r3, [pc, #44]	; (800a0f0 <osKernelStart+0x68>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	2b01      	cmp	r3, #1
 800a0c8:	d109      	bne.n	800a0de <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a0ca:	f7ff ffa1 	bl	800a010 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a0ce:	4b08      	ldr	r3, [pc, #32]	; (800a0f0 <osKernelStart+0x68>)
 800a0d0:	2202      	movs	r2, #2
 800a0d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a0d4:	f001 fa2c 	bl	800b530 <vTaskStartScheduler>
      stat = osOK;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	60fb      	str	r3, [r7, #12]
 800a0dc:	e002      	b.n	800a0e4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800a0de:	f04f 33ff 	mov.w	r3, #4294967295
 800a0e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3710      	adds	r7, #16
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	20000f28 	.word	0x20000f28

0800a0f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b090      	sub	sp, #64	; 0x40
 800a0f8:	af04      	add	r7, sp, #16
 800a0fa:	60f8      	str	r0, [r7, #12]
 800a0fc:	60b9      	str	r1, [r7, #8]
 800a0fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a100:	2300      	movs	r3, #0
 800a102:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a104:	f3ef 8305 	mrs	r3, IPSR
 800a108:	61fb      	str	r3, [r7, #28]
  return(result);
 800a10a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	f040 808f 	bne.w	800a230 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a112:	f3ef 8310 	mrs	r3, PRIMASK
 800a116:	61bb      	str	r3, [r7, #24]
  return(result);
 800a118:	69bb      	ldr	r3, [r7, #24]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d105      	bne.n	800a12a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a11e:	f3ef 8311 	mrs	r3, BASEPRI
 800a122:	617b      	str	r3, [r7, #20]
  return(result);
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d003      	beq.n	800a132 <osThreadNew+0x3e>
 800a12a:	4b44      	ldr	r3, [pc, #272]	; (800a23c <osThreadNew+0x148>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	2b02      	cmp	r3, #2
 800a130:	d07e      	beq.n	800a230 <osThreadNew+0x13c>
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d07b      	beq.n	800a230 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800a138:	2380      	movs	r3, #128	; 0x80
 800a13a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800a13c:	2318      	movs	r3, #24
 800a13e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800a140:	2300      	movs	r3, #0
 800a142:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800a144:	f04f 33ff 	mov.w	r3, #4294967295
 800a148:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d045      	beq.n	800a1dc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d002      	beq.n	800a15e <osThreadNew+0x6a>
        name = attr->name;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	699b      	ldr	r3, [r3, #24]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d002      	beq.n	800a16c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	699b      	ldr	r3, [r3, #24]
 800a16a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d008      	beq.n	800a184 <osThreadNew+0x90>
 800a172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a174:	2b38      	cmp	r3, #56	; 0x38
 800a176:	d805      	bhi.n	800a184 <osThreadNew+0x90>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	f003 0301 	and.w	r3, r3, #1
 800a180:	2b00      	cmp	r3, #0
 800a182:	d001      	beq.n	800a188 <osThreadNew+0x94>
        return (NULL);
 800a184:	2300      	movs	r3, #0
 800a186:	e054      	b.n	800a232 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	695b      	ldr	r3, [r3, #20]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d003      	beq.n	800a198 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	695b      	ldr	r3, [r3, #20]
 800a194:	089b      	lsrs	r3, r3, #2
 800a196:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	689b      	ldr	r3, [r3, #8]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d00e      	beq.n	800a1be <osThreadNew+0xca>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	2bbb      	cmp	r3, #187	; 0xbb
 800a1a6:	d90a      	bls.n	800a1be <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d006      	beq.n	800a1be <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	695b      	ldr	r3, [r3, #20]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d002      	beq.n	800a1be <osThreadNew+0xca>
        mem = 1;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	623b      	str	r3, [r7, #32]
 800a1bc:	e010      	b.n	800a1e0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	689b      	ldr	r3, [r3, #8]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d10c      	bne.n	800a1e0 <osThreadNew+0xec>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	68db      	ldr	r3, [r3, #12]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d108      	bne.n	800a1e0 <osThreadNew+0xec>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	691b      	ldr	r3, [r3, #16]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d104      	bne.n	800a1e0 <osThreadNew+0xec>
          mem = 0;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	623b      	str	r3, [r7, #32]
 800a1da:	e001      	b.n	800a1e0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a1e0:	6a3b      	ldr	r3, [r7, #32]
 800a1e2:	2b01      	cmp	r3, #1
 800a1e4:	d110      	bne.n	800a208 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a1ea:	687a      	ldr	r2, [r7, #4]
 800a1ec:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a1ee:	9202      	str	r2, [sp, #8]
 800a1f0:	9301      	str	r3, [sp, #4]
 800a1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f4:	9300      	str	r3, [sp, #0]
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a1fc:	68f8      	ldr	r0, [r7, #12]
 800a1fe:	f000 ffa1 	bl	800b144 <xTaskCreateStatic>
 800a202:	4603      	mov	r3, r0
 800a204:	613b      	str	r3, [r7, #16]
 800a206:	e013      	b.n	800a230 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800a208:	6a3b      	ldr	r3, [r7, #32]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d110      	bne.n	800a230 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a210:	b29a      	uxth	r2, r3
 800a212:	f107 0310 	add.w	r3, r7, #16
 800a216:	9301      	str	r3, [sp, #4]
 800a218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21a:	9300      	str	r3, [sp, #0]
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a220:	68f8      	ldr	r0, [r7, #12]
 800a222:	f000 fff2 	bl	800b20a <xTaskCreate>
 800a226:	4603      	mov	r3, r0
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d001      	beq.n	800a230 <osThreadNew+0x13c>
          hTask = NULL;
 800a22c:	2300      	movs	r3, #0
 800a22e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a230:	693b      	ldr	r3, [r7, #16]
}
 800a232:	4618      	mov	r0, r3
 800a234:	3730      	adds	r7, #48	; 0x30
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	20000f28 	.word	0x20000f28

0800a240 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800a240:	b580      	push	{r7, lr}
 800a242:	b086      	sub	sp, #24
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a248:	f3ef 8305 	mrs	r3, IPSR
 800a24c:	613b      	str	r3, [r7, #16]
  return(result);
 800a24e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a250:	2b00      	cmp	r3, #0
 800a252:	d10f      	bne.n	800a274 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a254:	f3ef 8310 	mrs	r3, PRIMASK
 800a258:	60fb      	str	r3, [r7, #12]
  return(result);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d105      	bne.n	800a26c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a260:	f3ef 8311 	mrs	r3, BASEPRI
 800a264:	60bb      	str	r3, [r7, #8]
  return(result);
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d007      	beq.n	800a27c <osDelay+0x3c>
 800a26c:	4b0a      	ldr	r3, [pc, #40]	; (800a298 <osDelay+0x58>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	2b02      	cmp	r3, #2
 800a272:	d103      	bne.n	800a27c <osDelay+0x3c>
    stat = osErrorISR;
 800a274:	f06f 0305 	mvn.w	r3, #5
 800a278:	617b      	str	r3, [r7, #20]
 800a27a:	e007      	b.n	800a28c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a27c:	2300      	movs	r3, #0
 800a27e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d002      	beq.n	800a28c <osDelay+0x4c>
      vTaskDelay(ticks);
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f001 f91c 	bl	800b4c4 <vTaskDelay>
    }
  }

  return (stat);
 800a28c:	697b      	ldr	r3, [r7, #20]
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3718      	adds	r7, #24
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}
 800a296:	bf00      	nop
 800a298:	20000f28 	.word	0x20000f28

0800a29c <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b084      	sub	sp, #16
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f002 fadf 	bl	800c868 <pvTimerGetTimerID>
 800a2aa:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d005      	beq.n	800a2be <TimerCallback+0x22>
    callb->func (callb->arg);
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	68fa      	ldr	r2, [r7, #12]
 800a2b8:	6852      	ldr	r2, [r2, #4]
 800a2ba:	4610      	mov	r0, r2
 800a2bc:	4798      	blx	r3
  }
}
 800a2be:	bf00      	nop
 800a2c0:	3710      	adds	r7, #16
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}
	...

0800a2c8 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b08e      	sub	sp, #56	; 0x38
 800a2cc:	af02      	add	r7, sp, #8
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	607a      	str	r2, [r7, #4]
 800a2d2:	603b      	str	r3, [r7, #0]
 800a2d4:	460b      	mov	r3, r1
 800a2d6:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2dc:	f3ef 8305 	mrs	r3, IPSR
 800a2e0:	61bb      	str	r3, [r7, #24]
  return(result);
 800a2e2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d16a      	bne.n	800a3be <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2e8:	f3ef 8310 	mrs	r3, PRIMASK
 800a2ec:	617b      	str	r3, [r7, #20]
  return(result);
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d105      	bne.n	800a300 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a2f4:	f3ef 8311 	mrs	r3, BASEPRI
 800a2f8:	613b      	str	r3, [r7, #16]
  return(result);
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d003      	beq.n	800a308 <osTimerNew+0x40>
 800a300:	4b31      	ldr	r3, [pc, #196]	; (800a3c8 <osTimerNew+0x100>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	2b02      	cmp	r3, #2
 800a306:	d05a      	beq.n	800a3be <osTimerNew+0xf6>
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d057      	beq.n	800a3be <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800a30e:	2008      	movs	r0, #8
 800a310:	f002 fd08 	bl	800cd24 <pvPortMalloc>
 800a314:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 800a316:	69fb      	ldr	r3, [r7, #28]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d050      	beq.n	800a3be <osTimerNew+0xf6>
      callb->func = func;
 800a31c:	69fb      	ldr	r3, [r7, #28]
 800a31e:	68fa      	ldr	r2, [r7, #12]
 800a320:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	687a      	ldr	r2, [r7, #4]
 800a326:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800a328:	7afb      	ldrb	r3, [r7, #11]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d102      	bne.n	800a334 <osTimerNew+0x6c>
        reload = pdFALSE;
 800a32e:	2300      	movs	r3, #0
 800a330:	627b      	str	r3, [r7, #36]	; 0x24
 800a332:	e001      	b.n	800a338 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 800a334:	2301      	movs	r3, #1
 800a336:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 800a338:	f04f 33ff 	mov.w	r3, #4294967295
 800a33c:	623b      	str	r3, [r7, #32]
      name = NULL;
 800a33e:	2300      	movs	r3, #0
 800a340:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d01c      	beq.n	800a382 <osTimerNew+0xba>
        if (attr->name != NULL) {
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d002      	beq.n	800a356 <osTimerNew+0x8e>
          name = attr->name;
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	689b      	ldr	r3, [r3, #8]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d006      	beq.n	800a36c <osTimerNew+0xa4>
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	68db      	ldr	r3, [r3, #12]
 800a362:	2b2b      	cmp	r3, #43	; 0x2b
 800a364:	d902      	bls.n	800a36c <osTimerNew+0xa4>
          mem = 1;
 800a366:	2301      	movs	r3, #1
 800a368:	623b      	str	r3, [r7, #32]
 800a36a:	e00c      	b.n	800a386 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	689b      	ldr	r3, [r3, #8]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d108      	bne.n	800a386 <osTimerNew+0xbe>
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	68db      	ldr	r3, [r3, #12]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d104      	bne.n	800a386 <osTimerNew+0xbe>
            mem = 0;
 800a37c:	2300      	movs	r3, #0
 800a37e:	623b      	str	r3, [r7, #32]
 800a380:	e001      	b.n	800a386 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800a382:	2300      	movs	r3, #0
 800a384:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800a386:	6a3b      	ldr	r3, [r7, #32]
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d10c      	bne.n	800a3a6 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	689b      	ldr	r3, [r3, #8]
 800a390:	9301      	str	r3, [sp, #4]
 800a392:	4b0e      	ldr	r3, [pc, #56]	; (800a3cc <osTimerNew+0x104>)
 800a394:	9300      	str	r3, [sp, #0]
 800a396:	69fb      	ldr	r3, [r7, #28]
 800a398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a39a:	2101      	movs	r1, #1
 800a39c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a39e:	f001 fed2 	bl	800c146 <xTimerCreateStatic>
 800a3a2:	62b8      	str	r0, [r7, #40]	; 0x28
 800a3a4:	e00b      	b.n	800a3be <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 800a3a6:	6a3b      	ldr	r3, [r7, #32]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d108      	bne.n	800a3be <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800a3ac:	4b07      	ldr	r3, [pc, #28]	; (800a3cc <osTimerNew+0x104>)
 800a3ae:	9300      	str	r3, [sp, #0]
 800a3b0:	69fb      	ldr	r3, [r7, #28]
 800a3b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3b4:	2101      	movs	r1, #1
 800a3b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3b8:	f001 fea4 	bl	800c104 <xTimerCreate>
 800a3bc:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800a3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3730      	adds	r7, #48	; 0x30
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	20000f28 	.word	0x20000f28
 800a3cc:	0800a29d 	.word	0x0800a29d

0800a3d0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b08c      	sub	sp, #48	; 0x30
 800a3d4:	af02      	add	r7, sp, #8
 800a3d6:	60f8      	str	r0, [r7, #12]
 800a3d8:	60b9      	str	r1, [r7, #8]
 800a3da:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3e0:	f3ef 8305 	mrs	r3, IPSR
 800a3e4:	61bb      	str	r3, [r7, #24]
  return(result);
 800a3e6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d16f      	bne.n	800a4cc <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3ec:	f3ef 8310 	mrs	r3, PRIMASK
 800a3f0:	617b      	str	r3, [r7, #20]
  return(result);
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d105      	bne.n	800a404 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a3f8:	f3ef 8311 	mrs	r3, BASEPRI
 800a3fc:	613b      	str	r3, [r7, #16]
  return(result);
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d003      	beq.n	800a40c <osMessageQueueNew+0x3c>
 800a404:	4b34      	ldr	r3, [pc, #208]	; (800a4d8 <osMessageQueueNew+0x108>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	2b02      	cmp	r3, #2
 800a40a:	d05f      	beq.n	800a4cc <osMessageQueueNew+0xfc>
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d05c      	beq.n	800a4cc <osMessageQueueNew+0xfc>
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d059      	beq.n	800a4cc <osMessageQueueNew+0xfc>
    mem = -1;
 800a418:	f04f 33ff 	mov.w	r3, #4294967295
 800a41c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d029      	beq.n	800a478 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	689b      	ldr	r3, [r3, #8]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d012      	beq.n	800a452 <osMessageQueueNew+0x82>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	68db      	ldr	r3, [r3, #12]
 800a430:	2b4f      	cmp	r3, #79	; 0x4f
 800a432:	d90e      	bls.n	800a452 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d00a      	beq.n	800a452 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	695a      	ldr	r2, [r3, #20]
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	68b9      	ldr	r1, [r7, #8]
 800a444:	fb01 f303 	mul.w	r3, r1, r3
 800a448:	429a      	cmp	r2, r3
 800a44a:	d302      	bcc.n	800a452 <osMessageQueueNew+0x82>
        mem = 1;
 800a44c:	2301      	movs	r3, #1
 800a44e:	623b      	str	r3, [r7, #32]
 800a450:	e014      	b.n	800a47c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	689b      	ldr	r3, [r3, #8]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d110      	bne.n	800a47c <osMessageQueueNew+0xac>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	68db      	ldr	r3, [r3, #12]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d10c      	bne.n	800a47c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a466:	2b00      	cmp	r3, #0
 800a468:	d108      	bne.n	800a47c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	695b      	ldr	r3, [r3, #20]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d104      	bne.n	800a47c <osMessageQueueNew+0xac>
          mem = 0;
 800a472:	2300      	movs	r3, #0
 800a474:	623b      	str	r3, [r7, #32]
 800a476:	e001      	b.n	800a47c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800a478:	2300      	movs	r3, #0
 800a47a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a47c:	6a3b      	ldr	r3, [r7, #32]
 800a47e:	2b01      	cmp	r3, #1
 800a480:	d10b      	bne.n	800a49a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	691a      	ldr	r2, [r3, #16]
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	689b      	ldr	r3, [r3, #8]
 800a48a:	2100      	movs	r1, #0
 800a48c:	9100      	str	r1, [sp, #0]
 800a48e:	68b9      	ldr	r1, [r7, #8]
 800a490:	68f8      	ldr	r0, [r7, #12]
 800a492:	f000 f975 	bl	800a780 <xQueueGenericCreateStatic>
 800a496:	6278      	str	r0, [r7, #36]	; 0x24
 800a498:	e008      	b.n	800a4ac <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800a49a:	6a3b      	ldr	r3, [r7, #32]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d105      	bne.n	800a4ac <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	68b9      	ldr	r1, [r7, #8]
 800a4a4:	68f8      	ldr	r0, [r7, #12]
 800a4a6:	f000 f9ed 	bl	800a884 <xQueueGenericCreate>
 800a4aa:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d00c      	beq.n	800a4cc <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d003      	beq.n	800a4c0 <osMessageQueueNew+0xf0>
        name = attr->name;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	61fb      	str	r3, [r7, #28]
 800a4be:	e001      	b.n	800a4c4 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800a4c4:	69f9      	ldr	r1, [r7, #28]
 800a4c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a4c8:	f000 fdde 	bl	800b088 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3728      	adds	r7, #40	; 0x28
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}
 800a4d6:	bf00      	nop
 800a4d8:	20000f28 	.word	0x20000f28

0800a4dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a4dc:	b480      	push	{r7}
 800a4de:	b085      	sub	sp, #20
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	60f8      	str	r0, [r7, #12]
 800a4e4:	60b9      	str	r1, [r7, #8]
 800a4e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	4a07      	ldr	r2, [pc, #28]	; (800a508 <vApplicationGetIdleTaskMemory+0x2c>)
 800a4ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	4a06      	ldr	r2, [pc, #24]	; (800a50c <vApplicationGetIdleTaskMemory+0x30>)
 800a4f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2280      	movs	r2, #128	; 0x80
 800a4f8:	601a      	str	r2, [r3, #0]
}
 800a4fa:	bf00      	nop
 800a4fc:	3714      	adds	r7, #20
 800a4fe:	46bd      	mov	sp, r7
 800a500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a504:	4770      	bx	lr
 800a506:	bf00      	nop
 800a508:	20000f2c 	.word	0x20000f2c
 800a50c:	20000fe8 	.word	0x20000fe8

0800a510 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a510:	b480      	push	{r7}
 800a512:	b085      	sub	sp, #20
 800a514:	af00      	add	r7, sp, #0
 800a516:	60f8      	str	r0, [r7, #12]
 800a518:	60b9      	str	r1, [r7, #8]
 800a51a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	4a07      	ldr	r2, [pc, #28]	; (800a53c <vApplicationGetTimerTaskMemory+0x2c>)
 800a520:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	4a06      	ldr	r2, [pc, #24]	; (800a540 <vApplicationGetTimerTaskMemory+0x30>)
 800a526:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a52e:	601a      	str	r2, [r3, #0]
}
 800a530:	bf00      	nop
 800a532:	3714      	adds	r7, #20
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr
 800a53c:	200011e8 	.word	0x200011e8
 800a540:	200012a4 	.word	0x200012a4

0800a544 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a544:	b480      	push	{r7}
 800a546:	b083      	sub	sp, #12
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f103 0208 	add.w	r2, r3, #8
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f04f 32ff 	mov.w	r2, #4294967295
 800a55c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f103 0208 	add.w	r2, r3, #8
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f103 0208 	add.w	r2, r3, #8
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2200      	movs	r2, #0
 800a576:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a578:	bf00      	nop
 800a57a:	370c      	adds	r7, #12
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a584:	b480      	push	{r7}
 800a586:	b083      	sub	sp, #12
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2200      	movs	r2, #0
 800a590:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a592:	bf00      	nop
 800a594:	370c      	adds	r7, #12
 800a596:	46bd      	mov	sp, r7
 800a598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59c:	4770      	bx	lr

0800a59e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a59e:	b480      	push	{r7}
 800a5a0:	b085      	sub	sp, #20
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]
 800a5a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	68fa      	ldr	r2, [r7, #12]
 800a5b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	689a      	ldr	r2, [r3, #8]
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	689b      	ldr	r3, [r3, #8]
 800a5c0:	683a      	ldr	r2, [r7, #0]
 800a5c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	683a      	ldr	r2, [r7, #0]
 800a5c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	1c5a      	adds	r2, r3, #1
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	601a      	str	r2, [r3, #0]
}
 800a5da:	bf00      	nop
 800a5dc:	3714      	adds	r7, #20
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e4:	4770      	bx	lr

0800a5e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a5e6:	b480      	push	{r7}
 800a5e8:	b085      	sub	sp, #20
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6078      	str	r0, [r7, #4]
 800a5ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5fc:	d103      	bne.n	800a606 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	691b      	ldr	r3, [r3, #16]
 800a602:	60fb      	str	r3, [r7, #12]
 800a604:	e00c      	b.n	800a620 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	3308      	adds	r3, #8
 800a60a:	60fb      	str	r3, [r7, #12]
 800a60c:	e002      	b.n	800a614 <vListInsert+0x2e>
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	685b      	ldr	r3, [r3, #4]
 800a612:	60fb      	str	r3, [r7, #12]
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	68ba      	ldr	r2, [r7, #8]
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d2f6      	bcs.n	800a60e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	685a      	ldr	r2, [r3, #4]
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	683a      	ldr	r2, [r7, #0]
 800a62e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	68fa      	ldr	r2, [r7, #12]
 800a634:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	683a      	ldr	r2, [r7, #0]
 800a63a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	1c5a      	adds	r2, r3, #1
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	601a      	str	r2, [r3, #0]
}
 800a64c:	bf00      	nop
 800a64e:	3714      	adds	r7, #20
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr

0800a658 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a658:	b480      	push	{r7}
 800a65a:	b085      	sub	sp, #20
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	691b      	ldr	r3, [r3, #16]
 800a664:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	685b      	ldr	r3, [r3, #4]
 800a66a:	687a      	ldr	r2, [r7, #4]
 800a66c:	6892      	ldr	r2, [r2, #8]
 800a66e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	689b      	ldr	r3, [r3, #8]
 800a674:	687a      	ldr	r2, [r7, #4]
 800a676:	6852      	ldr	r2, [r2, #4]
 800a678:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	429a      	cmp	r2, r3
 800a682:	d103      	bne.n	800a68c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	689a      	ldr	r2, [r3, #8]
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2200      	movs	r2, #0
 800a690:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	1e5a      	subs	r2, r3, #1
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3714      	adds	r7, #20
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr

0800a6ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b084      	sub	sp, #16
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d10c      	bne.n	800a6da <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c4:	b672      	cpsid	i
 800a6c6:	f383 8811 	msr	BASEPRI, r3
 800a6ca:	f3bf 8f6f 	isb	sy
 800a6ce:	f3bf 8f4f 	dsb	sy
 800a6d2:	b662      	cpsie	i
 800a6d4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a6d6:	bf00      	nop
 800a6d8:	e7fe      	b.n	800a6d8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800a6da:	f002 f9f7 	bl	800cacc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681a      	ldr	r2, [r3, #0]
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6e6:	68f9      	ldr	r1, [r7, #12]
 800a6e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a6ea:	fb01 f303 	mul.w	r3, r1, r3
 800a6ee:	441a      	add	r2, r3
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681a      	ldr	r2, [r3, #0]
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681a      	ldr	r2, [r3, #0]
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a70a:	3b01      	subs	r3, #1
 800a70c:	68f9      	ldr	r1, [r7, #12]
 800a70e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a710:	fb01 f303 	mul.w	r3, r1, r3
 800a714:	441a      	add	r2, r3
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	22ff      	movs	r2, #255	; 0xff
 800a71e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	22ff      	movs	r2, #255	; 0xff
 800a726:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d114      	bne.n	800a75a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	691b      	ldr	r3, [r3, #16]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d01a      	beq.n	800a76e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	3310      	adds	r3, #16
 800a73c:	4618      	mov	r0, r3
 800a73e:	f001 f9b1 	bl	800baa4 <xTaskRemoveFromEventList>
 800a742:	4603      	mov	r3, r0
 800a744:	2b00      	cmp	r3, #0
 800a746:	d012      	beq.n	800a76e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a748:	4b0c      	ldr	r3, [pc, #48]	; (800a77c <xQueueGenericReset+0xd0>)
 800a74a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a74e:	601a      	str	r2, [r3, #0]
 800a750:	f3bf 8f4f 	dsb	sy
 800a754:	f3bf 8f6f 	isb	sy
 800a758:	e009      	b.n	800a76e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	3310      	adds	r3, #16
 800a75e:	4618      	mov	r0, r3
 800a760:	f7ff fef0 	bl	800a544 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	3324      	adds	r3, #36	; 0x24
 800a768:	4618      	mov	r0, r3
 800a76a:	f7ff feeb 	bl	800a544 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a76e:	f002 f9e1 	bl	800cb34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a772:	2301      	movs	r3, #1
}
 800a774:	4618      	mov	r0, r3
 800a776:	3710      	adds	r7, #16
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}
 800a77c:	e000ed04 	.word	0xe000ed04

0800a780 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a780:	b580      	push	{r7, lr}
 800a782:	b08e      	sub	sp, #56	; 0x38
 800a784:	af02      	add	r7, sp, #8
 800a786:	60f8      	str	r0, [r7, #12]
 800a788:	60b9      	str	r1, [r7, #8]
 800a78a:	607a      	str	r2, [r7, #4]
 800a78c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d10c      	bne.n	800a7ae <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800a794:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a798:	b672      	cpsid	i
 800a79a:	f383 8811 	msr	BASEPRI, r3
 800a79e:	f3bf 8f6f 	isb	sy
 800a7a2:	f3bf 8f4f 	dsb	sy
 800a7a6:	b662      	cpsie	i
 800a7a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a7aa:	bf00      	nop
 800a7ac:	e7fe      	b.n	800a7ac <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d10c      	bne.n	800a7ce <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800a7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b8:	b672      	cpsid	i
 800a7ba:	f383 8811 	msr	BASEPRI, r3
 800a7be:	f3bf 8f6f 	isb	sy
 800a7c2:	f3bf 8f4f 	dsb	sy
 800a7c6:	b662      	cpsie	i
 800a7c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a7ca:	bf00      	nop
 800a7cc:	e7fe      	b.n	800a7cc <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d002      	beq.n	800a7da <xQueueGenericCreateStatic+0x5a>
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d001      	beq.n	800a7de <xQueueGenericCreateStatic+0x5e>
 800a7da:	2301      	movs	r3, #1
 800a7dc:	e000      	b.n	800a7e0 <xQueueGenericCreateStatic+0x60>
 800a7de:	2300      	movs	r3, #0
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d10c      	bne.n	800a7fe <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800a7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e8:	b672      	cpsid	i
 800a7ea:	f383 8811 	msr	BASEPRI, r3
 800a7ee:	f3bf 8f6f 	isb	sy
 800a7f2:	f3bf 8f4f 	dsb	sy
 800a7f6:	b662      	cpsie	i
 800a7f8:	623b      	str	r3, [r7, #32]
}
 800a7fa:	bf00      	nop
 800a7fc:	e7fe      	b.n	800a7fc <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d102      	bne.n	800a80a <xQueueGenericCreateStatic+0x8a>
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d101      	bne.n	800a80e <xQueueGenericCreateStatic+0x8e>
 800a80a:	2301      	movs	r3, #1
 800a80c:	e000      	b.n	800a810 <xQueueGenericCreateStatic+0x90>
 800a80e:	2300      	movs	r3, #0
 800a810:	2b00      	cmp	r3, #0
 800a812:	d10c      	bne.n	800a82e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800a814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a818:	b672      	cpsid	i
 800a81a:	f383 8811 	msr	BASEPRI, r3
 800a81e:	f3bf 8f6f 	isb	sy
 800a822:	f3bf 8f4f 	dsb	sy
 800a826:	b662      	cpsie	i
 800a828:	61fb      	str	r3, [r7, #28]
}
 800a82a:	bf00      	nop
 800a82c:	e7fe      	b.n	800a82c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a82e:	2350      	movs	r3, #80	; 0x50
 800a830:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	2b50      	cmp	r3, #80	; 0x50
 800a836:	d00c      	beq.n	800a852 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800a838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83c:	b672      	cpsid	i
 800a83e:	f383 8811 	msr	BASEPRI, r3
 800a842:	f3bf 8f6f 	isb	sy
 800a846:	f3bf 8f4f 	dsb	sy
 800a84a:	b662      	cpsie	i
 800a84c:	61bb      	str	r3, [r7, #24]
}
 800a84e:	bf00      	nop
 800a850:	e7fe      	b.n	800a850 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a852:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d00d      	beq.n	800a87a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a860:	2201      	movs	r2, #1
 800a862:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a866:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a86c:	9300      	str	r3, [sp, #0]
 800a86e:	4613      	mov	r3, r2
 800a870:	687a      	ldr	r2, [r7, #4]
 800a872:	68b9      	ldr	r1, [r7, #8]
 800a874:	68f8      	ldr	r0, [r7, #12]
 800a876:	f000 f847 	bl	800a908 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3730      	adds	r7, #48	; 0x30
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a884:	b580      	push	{r7, lr}
 800a886:	b08a      	sub	sp, #40	; 0x28
 800a888:	af02      	add	r7, sp, #8
 800a88a:	60f8      	str	r0, [r7, #12]
 800a88c:	60b9      	str	r1, [r7, #8]
 800a88e:	4613      	mov	r3, r2
 800a890:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d10c      	bne.n	800a8b2 <xQueueGenericCreate+0x2e>
	__asm volatile
 800a898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a89c:	b672      	cpsid	i
 800a89e:	f383 8811 	msr	BASEPRI, r3
 800a8a2:	f3bf 8f6f 	isb	sy
 800a8a6:	f3bf 8f4f 	dsb	sy
 800a8aa:	b662      	cpsie	i
 800a8ac:	613b      	str	r3, [r7, #16]
}
 800a8ae:	bf00      	nop
 800a8b0:	e7fe      	b.n	800a8b0 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d102      	bne.n	800a8be <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	61fb      	str	r3, [r7, #28]
 800a8bc:	e004      	b.n	800a8c8 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	68ba      	ldr	r2, [r7, #8]
 800a8c2:	fb02 f303 	mul.w	r3, r2, r3
 800a8c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a8c8:	69fb      	ldr	r3, [r7, #28]
 800a8ca:	3350      	adds	r3, #80	; 0x50
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f002 fa29 	bl	800cd24 <pvPortMalloc>
 800a8d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a8d4:	69bb      	ldr	r3, [r7, #24]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d011      	beq.n	800a8fe <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a8da:	69bb      	ldr	r3, [r7, #24]
 800a8dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	3350      	adds	r3, #80	; 0x50
 800a8e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a8e4:	69bb      	ldr	r3, [r7, #24]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a8ec:	79fa      	ldrb	r2, [r7, #7]
 800a8ee:	69bb      	ldr	r3, [r7, #24]
 800a8f0:	9300      	str	r3, [sp, #0]
 800a8f2:	4613      	mov	r3, r2
 800a8f4:	697a      	ldr	r2, [r7, #20]
 800a8f6:	68b9      	ldr	r1, [r7, #8]
 800a8f8:	68f8      	ldr	r0, [r7, #12]
 800a8fa:	f000 f805 	bl	800a908 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a8fe:	69bb      	ldr	r3, [r7, #24]
	}
 800a900:	4618      	mov	r0, r3
 800a902:	3720      	adds	r7, #32
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	60f8      	str	r0, [r7, #12]
 800a910:	60b9      	str	r1, [r7, #8]
 800a912:	607a      	str	r2, [r7, #4]
 800a914:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d103      	bne.n	800a924 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a91c:	69bb      	ldr	r3, [r7, #24]
 800a91e:	69ba      	ldr	r2, [r7, #24]
 800a920:	601a      	str	r2, [r3, #0]
 800a922:	e002      	b.n	800a92a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a924:	69bb      	ldr	r3, [r7, #24]
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a92a:	69bb      	ldr	r3, [r7, #24]
 800a92c:	68fa      	ldr	r2, [r7, #12]
 800a92e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a930:	69bb      	ldr	r3, [r7, #24]
 800a932:	68ba      	ldr	r2, [r7, #8]
 800a934:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a936:	2101      	movs	r1, #1
 800a938:	69b8      	ldr	r0, [r7, #24]
 800a93a:	f7ff feb7 	bl	800a6ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a93e:	69bb      	ldr	r3, [r7, #24]
 800a940:	78fa      	ldrb	r2, [r7, #3]
 800a942:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a946:	bf00      	nop
 800a948:	3710      	adds	r7, #16
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}
	...

0800a950 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b08e      	sub	sp, #56	; 0x38
 800a954:	af00      	add	r7, sp, #0
 800a956:	60f8      	str	r0, [r7, #12]
 800a958:	60b9      	str	r1, [r7, #8]
 800a95a:	607a      	str	r2, [r7, #4]
 800a95c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a95e:	2300      	movs	r3, #0
 800a960:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d10c      	bne.n	800a986 <xQueueGenericSend+0x36>
	__asm volatile
 800a96c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a970:	b672      	cpsid	i
 800a972:	f383 8811 	msr	BASEPRI, r3
 800a976:	f3bf 8f6f 	isb	sy
 800a97a:	f3bf 8f4f 	dsb	sy
 800a97e:	b662      	cpsie	i
 800a980:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a982:	bf00      	nop
 800a984:	e7fe      	b.n	800a984 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d103      	bne.n	800a994 <xQueueGenericSend+0x44>
 800a98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a98e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a990:	2b00      	cmp	r3, #0
 800a992:	d101      	bne.n	800a998 <xQueueGenericSend+0x48>
 800a994:	2301      	movs	r3, #1
 800a996:	e000      	b.n	800a99a <xQueueGenericSend+0x4a>
 800a998:	2300      	movs	r3, #0
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d10c      	bne.n	800a9b8 <xQueueGenericSend+0x68>
	__asm volatile
 800a99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a2:	b672      	cpsid	i
 800a9a4:	f383 8811 	msr	BASEPRI, r3
 800a9a8:	f3bf 8f6f 	isb	sy
 800a9ac:	f3bf 8f4f 	dsb	sy
 800a9b0:	b662      	cpsie	i
 800a9b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a9b4:	bf00      	nop
 800a9b6:	e7fe      	b.n	800a9b6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	2b02      	cmp	r3, #2
 800a9bc:	d103      	bne.n	800a9c6 <xQueueGenericSend+0x76>
 800a9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	d101      	bne.n	800a9ca <xQueueGenericSend+0x7a>
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	e000      	b.n	800a9cc <xQueueGenericSend+0x7c>
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d10c      	bne.n	800a9ea <xQueueGenericSend+0x9a>
	__asm volatile
 800a9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d4:	b672      	cpsid	i
 800a9d6:	f383 8811 	msr	BASEPRI, r3
 800a9da:	f3bf 8f6f 	isb	sy
 800a9de:	f3bf 8f4f 	dsb	sy
 800a9e2:	b662      	cpsie	i
 800a9e4:	623b      	str	r3, [r7, #32]
}
 800a9e6:	bf00      	nop
 800a9e8:	e7fe      	b.n	800a9e8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a9ea:	f001 fa5d 	bl	800bea8 <xTaskGetSchedulerState>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d102      	bne.n	800a9fa <xQueueGenericSend+0xaa>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d101      	bne.n	800a9fe <xQueueGenericSend+0xae>
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	e000      	b.n	800aa00 <xQueueGenericSend+0xb0>
 800a9fe:	2300      	movs	r3, #0
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d10c      	bne.n	800aa1e <xQueueGenericSend+0xce>
	__asm volatile
 800aa04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa08:	b672      	cpsid	i
 800aa0a:	f383 8811 	msr	BASEPRI, r3
 800aa0e:	f3bf 8f6f 	isb	sy
 800aa12:	f3bf 8f4f 	dsb	sy
 800aa16:	b662      	cpsie	i
 800aa18:	61fb      	str	r3, [r7, #28]
}
 800aa1a:	bf00      	nop
 800aa1c:	e7fe      	b.n	800aa1c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa1e:	f002 f855 	bl	800cacc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aa22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d302      	bcc.n	800aa34 <xQueueGenericSend+0xe4>
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	2b02      	cmp	r3, #2
 800aa32:	d129      	bne.n	800aa88 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aa34:	683a      	ldr	r2, [r7, #0]
 800aa36:	68b9      	ldr	r1, [r7, #8]
 800aa38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa3a:	f000 fa15 	bl	800ae68 <prvCopyDataToQueue>
 800aa3e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d010      	beq.n	800aa6a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa4a:	3324      	adds	r3, #36	; 0x24
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f001 f829 	bl	800baa4 <xTaskRemoveFromEventList>
 800aa52:	4603      	mov	r3, r0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d013      	beq.n	800aa80 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800aa58:	4b3f      	ldr	r3, [pc, #252]	; (800ab58 <xQueueGenericSend+0x208>)
 800aa5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa5e:	601a      	str	r2, [r3, #0]
 800aa60:	f3bf 8f4f 	dsb	sy
 800aa64:	f3bf 8f6f 	isb	sy
 800aa68:	e00a      	b.n	800aa80 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800aa6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d007      	beq.n	800aa80 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800aa70:	4b39      	ldr	r3, [pc, #228]	; (800ab58 <xQueueGenericSend+0x208>)
 800aa72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa76:	601a      	str	r2, [r3, #0]
 800aa78:	f3bf 8f4f 	dsb	sy
 800aa7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800aa80:	f002 f858 	bl	800cb34 <vPortExitCritical>
				return pdPASS;
 800aa84:	2301      	movs	r3, #1
 800aa86:	e063      	b.n	800ab50 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d103      	bne.n	800aa96 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aa8e:	f002 f851 	bl	800cb34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800aa92:	2300      	movs	r3, #0
 800aa94:	e05c      	b.n	800ab50 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d106      	bne.n	800aaaa <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa9c:	f107 0314 	add.w	r3, r7, #20
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f001 f865 	bl	800bb70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aaaa:	f002 f843 	bl	800cb34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aaae:	f000 fdb3 	bl	800b618 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aab2:	f002 f80b 	bl	800cacc <vPortEnterCritical>
 800aab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aabc:	b25b      	sxtb	r3, r3
 800aabe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aac2:	d103      	bne.n	800aacc <xQueueGenericSend+0x17c>
 800aac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac6:	2200      	movs	r2, #0
 800aac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aace:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aad2:	b25b      	sxtb	r3, r3
 800aad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aad8:	d103      	bne.n	800aae2 <xQueueGenericSend+0x192>
 800aada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aadc:	2200      	movs	r2, #0
 800aade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aae2:	f002 f827 	bl	800cb34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aae6:	1d3a      	adds	r2, r7, #4
 800aae8:	f107 0314 	add.w	r3, r7, #20
 800aaec:	4611      	mov	r1, r2
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f001 f854 	bl	800bb9c <xTaskCheckForTimeOut>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d124      	bne.n	800ab44 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aafa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aafc:	f000 faac 	bl	800b058 <prvIsQueueFull>
 800ab00:	4603      	mov	r3, r0
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d018      	beq.n	800ab38 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ab06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab08:	3310      	adds	r3, #16
 800ab0a:	687a      	ldr	r2, [r7, #4]
 800ab0c:	4611      	mov	r1, r2
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f000 ff74 	bl	800b9fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ab14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab16:	f000 fa37 	bl	800af88 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ab1a:	f000 fd8b 	bl	800b634 <xTaskResumeAll>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	f47f af7c 	bne.w	800aa1e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800ab26:	4b0c      	ldr	r3, [pc, #48]	; (800ab58 <xQueueGenericSend+0x208>)
 800ab28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab2c:	601a      	str	r2, [r3, #0]
 800ab2e:	f3bf 8f4f 	dsb	sy
 800ab32:	f3bf 8f6f 	isb	sy
 800ab36:	e772      	b.n	800aa1e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ab38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab3a:	f000 fa25 	bl	800af88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab3e:	f000 fd79 	bl	800b634 <xTaskResumeAll>
 800ab42:	e76c      	b.n	800aa1e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ab44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab46:	f000 fa1f 	bl	800af88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab4a:	f000 fd73 	bl	800b634 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ab4e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3738      	adds	r7, #56	; 0x38
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}
 800ab58:	e000ed04 	.word	0xe000ed04

0800ab5c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b08e      	sub	sp, #56	; 0x38
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	60f8      	str	r0, [r7, #12]
 800ab64:	60b9      	str	r1, [r7, #8]
 800ab66:	607a      	str	r2, [r7, #4]
 800ab68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ab6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d10c      	bne.n	800ab8e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800ab74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab78:	b672      	cpsid	i
 800ab7a:	f383 8811 	msr	BASEPRI, r3
 800ab7e:	f3bf 8f6f 	isb	sy
 800ab82:	f3bf 8f4f 	dsb	sy
 800ab86:	b662      	cpsie	i
 800ab88:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ab8a:	bf00      	nop
 800ab8c:	e7fe      	b.n	800ab8c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d103      	bne.n	800ab9c <xQueueGenericSendFromISR+0x40>
 800ab94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d101      	bne.n	800aba0 <xQueueGenericSendFromISR+0x44>
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	e000      	b.n	800aba2 <xQueueGenericSendFromISR+0x46>
 800aba0:	2300      	movs	r3, #0
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d10c      	bne.n	800abc0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800aba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abaa:	b672      	cpsid	i
 800abac:	f383 8811 	msr	BASEPRI, r3
 800abb0:	f3bf 8f6f 	isb	sy
 800abb4:	f3bf 8f4f 	dsb	sy
 800abb8:	b662      	cpsie	i
 800abba:	623b      	str	r3, [r7, #32]
}
 800abbc:	bf00      	nop
 800abbe:	e7fe      	b.n	800abbe <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	2b02      	cmp	r3, #2
 800abc4:	d103      	bne.n	800abce <xQueueGenericSendFromISR+0x72>
 800abc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abca:	2b01      	cmp	r3, #1
 800abcc:	d101      	bne.n	800abd2 <xQueueGenericSendFromISR+0x76>
 800abce:	2301      	movs	r3, #1
 800abd0:	e000      	b.n	800abd4 <xQueueGenericSendFromISR+0x78>
 800abd2:	2300      	movs	r3, #0
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d10c      	bne.n	800abf2 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800abd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abdc:	b672      	cpsid	i
 800abde:	f383 8811 	msr	BASEPRI, r3
 800abe2:	f3bf 8f6f 	isb	sy
 800abe6:	f3bf 8f4f 	dsb	sy
 800abea:	b662      	cpsie	i
 800abec:	61fb      	str	r3, [r7, #28]
}
 800abee:	bf00      	nop
 800abf0:	e7fe      	b.n	800abf0 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800abf2:	f002 f853 	bl	800cc9c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800abf6:	f3ef 8211 	mrs	r2, BASEPRI
 800abfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abfe:	b672      	cpsid	i
 800ac00:	f383 8811 	msr	BASEPRI, r3
 800ac04:	f3bf 8f6f 	isb	sy
 800ac08:	f3bf 8f4f 	dsb	sy
 800ac0c:	b662      	cpsie	i
 800ac0e:	61ba      	str	r2, [r7, #24]
 800ac10:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ac12:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ac14:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ac16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d302      	bcc.n	800ac28 <xQueueGenericSendFromISR+0xcc>
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	2b02      	cmp	r3, #2
 800ac26:	d12c      	bne.n	800ac82 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ac28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ac32:	683a      	ldr	r2, [r7, #0]
 800ac34:	68b9      	ldr	r1, [r7, #8]
 800ac36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac38:	f000 f916 	bl	800ae68 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ac3c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ac40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac44:	d112      	bne.n	800ac6c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d016      	beq.n	800ac7c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac50:	3324      	adds	r3, #36	; 0x24
 800ac52:	4618      	mov	r0, r3
 800ac54:	f000 ff26 	bl	800baa4 <xTaskRemoveFromEventList>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d00e      	beq.n	800ac7c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d00b      	beq.n	800ac7c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2201      	movs	r2, #1
 800ac68:	601a      	str	r2, [r3, #0]
 800ac6a:	e007      	b.n	800ac7c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ac6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ac70:	3301      	adds	r3, #1
 800ac72:	b2db      	uxtb	r3, r3
 800ac74:	b25a      	sxtb	r2, r3
 800ac76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800ac80:	e001      	b.n	800ac86 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ac82:	2300      	movs	r3, #0
 800ac84:	637b      	str	r3, [r7, #52]	; 0x34
 800ac86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac88:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ac90:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ac92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3738      	adds	r7, #56	; 0x38
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b08c      	sub	sp, #48	; 0x30
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	60b9      	str	r1, [r7, #8]
 800aca6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aca8:	2300      	movs	r3, #0
 800acaa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800acb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d10c      	bne.n	800acd0 <xQueueReceive+0x34>
	__asm volatile
 800acb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acba:	b672      	cpsid	i
 800acbc:	f383 8811 	msr	BASEPRI, r3
 800acc0:	f3bf 8f6f 	isb	sy
 800acc4:	f3bf 8f4f 	dsb	sy
 800acc8:	b662      	cpsie	i
 800acca:	623b      	str	r3, [r7, #32]
}
 800accc:	bf00      	nop
 800acce:	e7fe      	b.n	800acce <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d103      	bne.n	800acde <xQueueReceive+0x42>
 800acd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d101      	bne.n	800ace2 <xQueueReceive+0x46>
 800acde:	2301      	movs	r3, #1
 800ace0:	e000      	b.n	800ace4 <xQueueReceive+0x48>
 800ace2:	2300      	movs	r3, #0
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d10c      	bne.n	800ad02 <xQueueReceive+0x66>
	__asm volatile
 800ace8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acec:	b672      	cpsid	i
 800acee:	f383 8811 	msr	BASEPRI, r3
 800acf2:	f3bf 8f6f 	isb	sy
 800acf6:	f3bf 8f4f 	dsb	sy
 800acfa:	b662      	cpsie	i
 800acfc:	61fb      	str	r3, [r7, #28]
}
 800acfe:	bf00      	nop
 800ad00:	e7fe      	b.n	800ad00 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad02:	f001 f8d1 	bl	800bea8 <xTaskGetSchedulerState>
 800ad06:	4603      	mov	r3, r0
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d102      	bne.n	800ad12 <xQueueReceive+0x76>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d101      	bne.n	800ad16 <xQueueReceive+0x7a>
 800ad12:	2301      	movs	r3, #1
 800ad14:	e000      	b.n	800ad18 <xQueueReceive+0x7c>
 800ad16:	2300      	movs	r3, #0
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d10c      	bne.n	800ad36 <xQueueReceive+0x9a>
	__asm volatile
 800ad1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad20:	b672      	cpsid	i
 800ad22:	f383 8811 	msr	BASEPRI, r3
 800ad26:	f3bf 8f6f 	isb	sy
 800ad2a:	f3bf 8f4f 	dsb	sy
 800ad2e:	b662      	cpsie	i
 800ad30:	61bb      	str	r3, [r7, #24]
}
 800ad32:	bf00      	nop
 800ad34:	e7fe      	b.n	800ad34 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ad36:	f001 fec9 	bl	800cacc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad3e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d01f      	beq.n	800ad86 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ad46:	68b9      	ldr	r1, [r7, #8]
 800ad48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad4a:	f000 f8f7 	bl	800af3c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ad4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad50:	1e5a      	subs	r2, r3, #1
 800ad52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad54:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad58:	691b      	ldr	r3, [r3, #16]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d00f      	beq.n	800ad7e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad60:	3310      	adds	r3, #16
 800ad62:	4618      	mov	r0, r3
 800ad64:	f000 fe9e 	bl	800baa4 <xTaskRemoveFromEventList>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d007      	beq.n	800ad7e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ad6e:	4b3d      	ldr	r3, [pc, #244]	; (800ae64 <xQueueReceive+0x1c8>)
 800ad70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad74:	601a      	str	r2, [r3, #0]
 800ad76:	f3bf 8f4f 	dsb	sy
 800ad7a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ad7e:	f001 fed9 	bl	800cb34 <vPortExitCritical>
				return pdPASS;
 800ad82:	2301      	movs	r3, #1
 800ad84:	e069      	b.n	800ae5a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d103      	bne.n	800ad94 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ad8c:	f001 fed2 	bl	800cb34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ad90:	2300      	movs	r3, #0
 800ad92:	e062      	b.n	800ae5a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d106      	bne.n	800ada8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad9a:	f107 0310 	add.w	r3, r7, #16
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f000 fee6 	bl	800bb70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ada4:	2301      	movs	r3, #1
 800ada6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ada8:	f001 fec4 	bl	800cb34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800adac:	f000 fc34 	bl	800b618 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800adb0:	f001 fe8c 	bl	800cacc <vPortEnterCritical>
 800adb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800adba:	b25b      	sxtb	r3, r3
 800adbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adc0:	d103      	bne.n	800adca <xQueueReceive+0x12e>
 800adc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adc4:	2200      	movs	r2, #0
 800adc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800adca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800add0:	b25b      	sxtb	r3, r3
 800add2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800add6:	d103      	bne.n	800ade0 <xQueueReceive+0x144>
 800add8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adda:	2200      	movs	r2, #0
 800addc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ade0:	f001 fea8 	bl	800cb34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ade4:	1d3a      	adds	r2, r7, #4
 800ade6:	f107 0310 	add.w	r3, r7, #16
 800adea:	4611      	mov	r1, r2
 800adec:	4618      	mov	r0, r3
 800adee:	f000 fed5 	bl	800bb9c <xTaskCheckForTimeOut>
 800adf2:	4603      	mov	r3, r0
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d123      	bne.n	800ae40 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800adf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adfa:	f000 f917 	bl	800b02c <prvIsQueueEmpty>
 800adfe:	4603      	mov	r3, r0
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d017      	beq.n	800ae34 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ae04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae06:	3324      	adds	r3, #36	; 0x24
 800ae08:	687a      	ldr	r2, [r7, #4]
 800ae0a:	4611      	mov	r1, r2
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f000 fdf5 	bl	800b9fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ae12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae14:	f000 f8b8 	bl	800af88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ae18:	f000 fc0c 	bl	800b634 <xTaskResumeAll>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d189      	bne.n	800ad36 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800ae22:	4b10      	ldr	r3, [pc, #64]	; (800ae64 <xQueueReceive+0x1c8>)
 800ae24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae28:	601a      	str	r2, [r3, #0]
 800ae2a:	f3bf 8f4f 	dsb	sy
 800ae2e:	f3bf 8f6f 	isb	sy
 800ae32:	e780      	b.n	800ad36 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ae34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae36:	f000 f8a7 	bl	800af88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae3a:	f000 fbfb 	bl	800b634 <xTaskResumeAll>
 800ae3e:	e77a      	b.n	800ad36 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ae40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae42:	f000 f8a1 	bl	800af88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae46:	f000 fbf5 	bl	800b634 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae4c:	f000 f8ee 	bl	800b02c <prvIsQueueEmpty>
 800ae50:	4603      	mov	r3, r0
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	f43f af6f 	beq.w	800ad36 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ae58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3730      	adds	r7, #48	; 0x30
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
 800ae62:	bf00      	nop
 800ae64:	e000ed04 	.word	0xe000ed04

0800ae68 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b086      	sub	sp, #24
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	60f8      	str	r0, [r7, #12]
 800ae70:	60b9      	str	r1, [r7, #8]
 800ae72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ae74:	2300      	movs	r3, #0
 800ae76:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae7c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d10d      	bne.n	800aea2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d14d      	bne.n	800af2a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	689b      	ldr	r3, [r3, #8]
 800ae92:	4618      	mov	r0, r3
 800ae94:	f001 f826 	bl	800bee4 <xTaskPriorityDisinherit>
 800ae98:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	609a      	str	r2, [r3, #8]
 800aea0:	e043      	b.n	800af2a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d119      	bne.n	800aedc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	6858      	ldr	r0, [r3, #4]
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeb0:	461a      	mov	r2, r3
 800aeb2:	68b9      	ldr	r1, [r7, #8]
 800aeb4:	f002 feec 	bl	800dc90 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	685a      	ldr	r2, [r3, #4]
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aec0:	441a      	add	r2, r3
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	685a      	ldr	r2, [r3, #4]
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	689b      	ldr	r3, [r3, #8]
 800aece:	429a      	cmp	r2, r3
 800aed0:	d32b      	bcc.n	800af2a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681a      	ldr	r2, [r3, #0]
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	605a      	str	r2, [r3, #4]
 800aeda:	e026      	b.n	800af2a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	68d8      	ldr	r0, [r3, #12]
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aee4:	461a      	mov	r2, r3
 800aee6:	68b9      	ldr	r1, [r7, #8]
 800aee8:	f002 fed2 	bl	800dc90 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	68da      	ldr	r2, [r3, #12]
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aef4:	425b      	negs	r3, r3
 800aef6:	441a      	add	r2, r3
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	68da      	ldr	r2, [r3, #12]
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	429a      	cmp	r2, r3
 800af06:	d207      	bcs.n	800af18 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	689a      	ldr	r2, [r3, #8]
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af10:	425b      	negs	r3, r3
 800af12:	441a      	add	r2, r3
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2b02      	cmp	r3, #2
 800af1c:	d105      	bne.n	800af2a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800af1e:	693b      	ldr	r3, [r7, #16]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d002      	beq.n	800af2a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	3b01      	subs	r3, #1
 800af28:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	1c5a      	adds	r2, r3, #1
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800af32:	697b      	ldr	r3, [r7, #20]
}
 800af34:	4618      	mov	r0, r3
 800af36:	3718      	adds	r7, #24
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d018      	beq.n	800af80 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	68da      	ldr	r2, [r3, #12]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af56:	441a      	add	r2, r3
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	68da      	ldr	r2, [r3, #12]
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	689b      	ldr	r3, [r3, #8]
 800af64:	429a      	cmp	r2, r3
 800af66:	d303      	bcc.n	800af70 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681a      	ldr	r2, [r3, #0]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	68d9      	ldr	r1, [r3, #12]
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af78:	461a      	mov	r2, r3
 800af7a:	6838      	ldr	r0, [r7, #0]
 800af7c:	f002 fe88 	bl	800dc90 <memcpy>
	}
}
 800af80:	bf00      	nop
 800af82:	3708      	adds	r7, #8
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b084      	sub	sp, #16
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800af90:	f001 fd9c 	bl	800cacc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af9a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af9c:	e011      	b.n	800afc2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d012      	beq.n	800afcc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	3324      	adds	r3, #36	; 0x24
 800afaa:	4618      	mov	r0, r3
 800afac:	f000 fd7a 	bl	800baa4 <xTaskRemoveFromEventList>
 800afb0:	4603      	mov	r3, r0
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d001      	beq.n	800afba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800afb6:	f000 fe57 	bl	800bc68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800afba:	7bfb      	ldrb	r3, [r7, #15]
 800afbc:	3b01      	subs	r3, #1
 800afbe:	b2db      	uxtb	r3, r3
 800afc0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800afc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	dce9      	bgt.n	800af9e <prvUnlockQueue+0x16>
 800afca:	e000      	b.n	800afce <prvUnlockQueue+0x46>
					break;
 800afcc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	22ff      	movs	r2, #255	; 0xff
 800afd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800afd6:	f001 fdad 	bl	800cb34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800afda:	f001 fd77 	bl	800cacc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800afe4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800afe6:	e011      	b.n	800b00c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	691b      	ldr	r3, [r3, #16]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d012      	beq.n	800b016 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	3310      	adds	r3, #16
 800aff4:	4618      	mov	r0, r3
 800aff6:	f000 fd55 	bl	800baa4 <xTaskRemoveFromEventList>
 800affa:	4603      	mov	r3, r0
 800affc:	2b00      	cmp	r3, #0
 800affe:	d001      	beq.n	800b004 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b000:	f000 fe32 	bl	800bc68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b004:	7bbb      	ldrb	r3, [r7, #14]
 800b006:	3b01      	subs	r3, #1
 800b008:	b2db      	uxtb	r3, r3
 800b00a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b00c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b010:	2b00      	cmp	r3, #0
 800b012:	dce9      	bgt.n	800afe8 <prvUnlockQueue+0x60>
 800b014:	e000      	b.n	800b018 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b016:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	22ff      	movs	r2, #255	; 0xff
 800b01c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b020:	f001 fd88 	bl	800cb34 <vPortExitCritical>
}
 800b024:	bf00      	nop
 800b026:	3710      	adds	r7, #16
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}

0800b02c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b084      	sub	sp, #16
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b034:	f001 fd4a 	bl	800cacc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d102      	bne.n	800b046 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b040:	2301      	movs	r3, #1
 800b042:	60fb      	str	r3, [r7, #12]
 800b044:	e001      	b.n	800b04a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b046:	2300      	movs	r3, #0
 800b048:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b04a:	f001 fd73 	bl	800cb34 <vPortExitCritical>

	return xReturn;
 800b04e:	68fb      	ldr	r3, [r7, #12]
}
 800b050:	4618      	mov	r0, r3
 800b052:	3710      	adds	r7, #16
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b084      	sub	sp, #16
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b060:	f001 fd34 	bl	800cacc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d102      	bne.n	800b076 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b070:	2301      	movs	r3, #1
 800b072:	60fb      	str	r3, [r7, #12]
 800b074:	e001      	b.n	800b07a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b076:	2300      	movs	r3, #0
 800b078:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b07a:	f001 fd5b 	bl	800cb34 <vPortExitCritical>

	return xReturn;
 800b07e:	68fb      	ldr	r3, [r7, #12]
}
 800b080:	4618      	mov	r0, r3
 800b082:	3710      	adds	r7, #16
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b088:	b480      	push	{r7}
 800b08a:	b085      	sub	sp, #20
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b092:	2300      	movs	r3, #0
 800b094:	60fb      	str	r3, [r7, #12]
 800b096:	e014      	b.n	800b0c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b098:	4a0f      	ldr	r2, [pc, #60]	; (800b0d8 <vQueueAddToRegistry+0x50>)
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d10b      	bne.n	800b0bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b0a4:	490c      	ldr	r1, [pc, #48]	; (800b0d8 <vQueueAddToRegistry+0x50>)
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	683a      	ldr	r2, [r7, #0]
 800b0aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b0ae:	4a0a      	ldr	r2, [pc, #40]	; (800b0d8 <vQueueAddToRegistry+0x50>)
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	00db      	lsls	r3, r3, #3
 800b0b4:	4413      	add	r3, r2
 800b0b6:	687a      	ldr	r2, [r7, #4]
 800b0b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b0ba:	e006      	b.n	800b0ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	3301      	adds	r3, #1
 800b0c0:	60fb      	str	r3, [r7, #12]
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	2b07      	cmp	r3, #7
 800b0c6:	d9e7      	bls.n	800b098 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b0c8:	bf00      	nop
 800b0ca:	bf00      	nop
 800b0cc:	3714      	adds	r7, #20
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d4:	4770      	bx	lr
 800b0d6:	bf00      	nop
 800b0d8:	200016a4 	.word	0x200016a4

0800b0dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b086      	sub	sp, #24
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	60f8      	str	r0, [r7, #12]
 800b0e4:	60b9      	str	r1, [r7, #8]
 800b0e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b0ec:	f001 fcee 	bl	800cacc <vPortEnterCritical>
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0f6:	b25b      	sxtb	r3, r3
 800b0f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0fc:	d103      	bne.n	800b106 <vQueueWaitForMessageRestricted+0x2a>
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	2200      	movs	r2, #0
 800b102:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b10c:	b25b      	sxtb	r3, r3
 800b10e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b112:	d103      	bne.n	800b11c <vQueueWaitForMessageRestricted+0x40>
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	2200      	movs	r2, #0
 800b118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b11c:	f001 fd0a 	bl	800cb34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b120:	697b      	ldr	r3, [r7, #20]
 800b122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b124:	2b00      	cmp	r3, #0
 800b126:	d106      	bne.n	800b136 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	3324      	adds	r3, #36	; 0x24
 800b12c:	687a      	ldr	r2, [r7, #4]
 800b12e:	68b9      	ldr	r1, [r7, #8]
 800b130:	4618      	mov	r0, r3
 800b132:	f000 fc89 	bl	800ba48 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b136:	6978      	ldr	r0, [r7, #20]
 800b138:	f7ff ff26 	bl	800af88 <prvUnlockQueue>
	}
 800b13c:	bf00      	nop
 800b13e:	3718      	adds	r7, #24
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}

0800b144 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b144:	b580      	push	{r7, lr}
 800b146:	b08e      	sub	sp, #56	; 0x38
 800b148:	af04      	add	r7, sp, #16
 800b14a:	60f8      	str	r0, [r7, #12]
 800b14c:	60b9      	str	r1, [r7, #8]
 800b14e:	607a      	str	r2, [r7, #4]
 800b150:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b154:	2b00      	cmp	r3, #0
 800b156:	d10c      	bne.n	800b172 <xTaskCreateStatic+0x2e>
	__asm volatile
 800b158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b15c:	b672      	cpsid	i
 800b15e:	f383 8811 	msr	BASEPRI, r3
 800b162:	f3bf 8f6f 	isb	sy
 800b166:	f3bf 8f4f 	dsb	sy
 800b16a:	b662      	cpsie	i
 800b16c:	623b      	str	r3, [r7, #32]
}
 800b16e:	bf00      	nop
 800b170:	e7fe      	b.n	800b170 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800b172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b174:	2b00      	cmp	r3, #0
 800b176:	d10c      	bne.n	800b192 <xTaskCreateStatic+0x4e>
	__asm volatile
 800b178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b17c:	b672      	cpsid	i
 800b17e:	f383 8811 	msr	BASEPRI, r3
 800b182:	f3bf 8f6f 	isb	sy
 800b186:	f3bf 8f4f 	dsb	sy
 800b18a:	b662      	cpsie	i
 800b18c:	61fb      	str	r3, [r7, #28]
}
 800b18e:	bf00      	nop
 800b190:	e7fe      	b.n	800b190 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b192:	23bc      	movs	r3, #188	; 0xbc
 800b194:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	2bbc      	cmp	r3, #188	; 0xbc
 800b19a:	d00c      	beq.n	800b1b6 <xTaskCreateStatic+0x72>
	__asm volatile
 800b19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a0:	b672      	cpsid	i
 800b1a2:	f383 8811 	msr	BASEPRI, r3
 800b1a6:	f3bf 8f6f 	isb	sy
 800b1aa:	f3bf 8f4f 	dsb	sy
 800b1ae:	b662      	cpsie	i
 800b1b0:	61bb      	str	r3, [r7, #24]
}
 800b1b2:	bf00      	nop
 800b1b4:	e7fe      	b.n	800b1b4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b1b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d01e      	beq.n	800b1fc <xTaskCreateStatic+0xb8>
 800b1be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d01b      	beq.n	800b1fc <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b1cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d0:	2202      	movs	r2, #2
 800b1d2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	9303      	str	r3, [sp, #12]
 800b1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1dc:	9302      	str	r3, [sp, #8]
 800b1de:	f107 0314 	add.w	r3, r7, #20
 800b1e2:	9301      	str	r3, [sp, #4]
 800b1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e6:	9300      	str	r3, [sp, #0]
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	687a      	ldr	r2, [r7, #4]
 800b1ec:	68b9      	ldr	r1, [r7, #8]
 800b1ee:	68f8      	ldr	r0, [r7, #12]
 800b1f0:	f000 f850 	bl	800b294 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b1f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b1f6:	f000 f8f5 	bl	800b3e4 <prvAddNewTaskToReadyList>
 800b1fa:	e001      	b.n	800b200 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b200:	697b      	ldr	r3, [r7, #20]
	}
 800b202:	4618      	mov	r0, r3
 800b204:	3728      	adds	r7, #40	; 0x28
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}

0800b20a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b20a:	b580      	push	{r7, lr}
 800b20c:	b08c      	sub	sp, #48	; 0x30
 800b20e:	af04      	add	r7, sp, #16
 800b210:	60f8      	str	r0, [r7, #12]
 800b212:	60b9      	str	r1, [r7, #8]
 800b214:	603b      	str	r3, [r7, #0]
 800b216:	4613      	mov	r3, r2
 800b218:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b21a:	88fb      	ldrh	r3, [r7, #6]
 800b21c:	009b      	lsls	r3, r3, #2
 800b21e:	4618      	mov	r0, r3
 800b220:	f001 fd80 	bl	800cd24 <pvPortMalloc>
 800b224:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d00e      	beq.n	800b24a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b22c:	20bc      	movs	r0, #188	; 0xbc
 800b22e:	f001 fd79 	bl	800cd24 <pvPortMalloc>
 800b232:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b234:	69fb      	ldr	r3, [r7, #28]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d003      	beq.n	800b242 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b23a:	69fb      	ldr	r3, [r7, #28]
 800b23c:	697a      	ldr	r2, [r7, #20]
 800b23e:	631a      	str	r2, [r3, #48]	; 0x30
 800b240:	e005      	b.n	800b24e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b242:	6978      	ldr	r0, [r7, #20]
 800b244:	f001 fe38 	bl	800ceb8 <vPortFree>
 800b248:	e001      	b.n	800b24e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b24a:	2300      	movs	r3, #0
 800b24c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b24e:	69fb      	ldr	r3, [r7, #28]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d017      	beq.n	800b284 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b254:	69fb      	ldr	r3, [r7, #28]
 800b256:	2200      	movs	r2, #0
 800b258:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b25c:	88fa      	ldrh	r2, [r7, #6]
 800b25e:	2300      	movs	r3, #0
 800b260:	9303      	str	r3, [sp, #12]
 800b262:	69fb      	ldr	r3, [r7, #28]
 800b264:	9302      	str	r3, [sp, #8]
 800b266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b268:	9301      	str	r3, [sp, #4]
 800b26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b26c:	9300      	str	r3, [sp, #0]
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	68b9      	ldr	r1, [r7, #8]
 800b272:	68f8      	ldr	r0, [r7, #12]
 800b274:	f000 f80e 	bl	800b294 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b278:	69f8      	ldr	r0, [r7, #28]
 800b27a:	f000 f8b3 	bl	800b3e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b27e:	2301      	movs	r3, #1
 800b280:	61bb      	str	r3, [r7, #24]
 800b282:	e002      	b.n	800b28a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b284:	f04f 33ff 	mov.w	r3, #4294967295
 800b288:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b28a:	69bb      	ldr	r3, [r7, #24]
	}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3720      	adds	r7, #32
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}

0800b294 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b088      	sub	sp, #32
 800b298:	af00      	add	r7, sp, #0
 800b29a:	60f8      	str	r0, [r7, #12]
 800b29c:	60b9      	str	r1, [r7, #8]
 800b29e:	607a      	str	r2, [r7, #4]
 800b2a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	009b      	lsls	r3, r3, #2
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	21a5      	movs	r1, #165	; 0xa5
 800b2ae:	f002 fcfd 	bl	800dcac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b2b6:	6879      	ldr	r1, [r7, #4]
 800b2b8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b2bc:	440b      	add	r3, r1
 800b2be:	009b      	lsls	r3, r3, #2
 800b2c0:	4413      	add	r3, r2
 800b2c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b2c4:	69bb      	ldr	r3, [r7, #24]
 800b2c6:	f023 0307 	bic.w	r3, r3, #7
 800b2ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b2cc:	69bb      	ldr	r3, [r7, #24]
 800b2ce:	f003 0307 	and.w	r3, r3, #7
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d00c      	beq.n	800b2f0 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800b2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2da:	b672      	cpsid	i
 800b2dc:	f383 8811 	msr	BASEPRI, r3
 800b2e0:	f3bf 8f6f 	isb	sy
 800b2e4:	f3bf 8f4f 	dsb	sy
 800b2e8:	b662      	cpsie	i
 800b2ea:	617b      	str	r3, [r7, #20]
}
 800b2ec:	bf00      	nop
 800b2ee:	e7fe      	b.n	800b2ee <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d01f      	beq.n	800b336 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	61fb      	str	r3, [r7, #28]
 800b2fa:	e012      	b.n	800b322 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b2fc:	68ba      	ldr	r2, [r7, #8]
 800b2fe:	69fb      	ldr	r3, [r7, #28]
 800b300:	4413      	add	r3, r2
 800b302:	7819      	ldrb	r1, [r3, #0]
 800b304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b306:	69fb      	ldr	r3, [r7, #28]
 800b308:	4413      	add	r3, r2
 800b30a:	3334      	adds	r3, #52	; 0x34
 800b30c:	460a      	mov	r2, r1
 800b30e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b310:	68ba      	ldr	r2, [r7, #8]
 800b312:	69fb      	ldr	r3, [r7, #28]
 800b314:	4413      	add	r3, r2
 800b316:	781b      	ldrb	r3, [r3, #0]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d006      	beq.n	800b32a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b31c:	69fb      	ldr	r3, [r7, #28]
 800b31e:	3301      	adds	r3, #1
 800b320:	61fb      	str	r3, [r7, #28]
 800b322:	69fb      	ldr	r3, [r7, #28]
 800b324:	2b0f      	cmp	r3, #15
 800b326:	d9e9      	bls.n	800b2fc <prvInitialiseNewTask+0x68>
 800b328:	e000      	b.n	800b32c <prvInitialiseNewTask+0x98>
			{
				break;
 800b32a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b32e:	2200      	movs	r2, #0
 800b330:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b334:	e003      	b.n	800b33e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b338:	2200      	movs	r2, #0
 800b33a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b340:	2b37      	cmp	r3, #55	; 0x37
 800b342:	d901      	bls.n	800b348 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b344:	2337      	movs	r3, #55	; 0x37
 800b346:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b34a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b34c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b350:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b352:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b356:	2200      	movs	r2, #0
 800b358:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b35c:	3304      	adds	r3, #4
 800b35e:	4618      	mov	r0, r3
 800b360:	f7ff f910 	bl	800a584 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b366:	3318      	adds	r3, #24
 800b368:	4618      	mov	r0, r3
 800b36a:	f7ff f90b 	bl	800a584 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b372:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b376:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b37c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b382:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b386:	2200      	movs	r2, #0
 800b388:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b38e:	2200      	movs	r2, #0
 800b390:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b396:	3354      	adds	r3, #84	; 0x54
 800b398:	2260      	movs	r2, #96	; 0x60
 800b39a:	2100      	movs	r1, #0
 800b39c:	4618      	mov	r0, r3
 800b39e:	f002 fc85 	bl	800dcac <memset>
 800b3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a4:	4a0c      	ldr	r2, [pc, #48]	; (800b3d8 <prvInitialiseNewTask+0x144>)
 800b3a6:	659a      	str	r2, [r3, #88]	; 0x58
 800b3a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3aa:	4a0c      	ldr	r2, [pc, #48]	; (800b3dc <prvInitialiseNewTask+0x148>)
 800b3ac:	65da      	str	r2, [r3, #92]	; 0x5c
 800b3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b0:	4a0b      	ldr	r2, [pc, #44]	; (800b3e0 <prvInitialiseNewTask+0x14c>)
 800b3b2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b3b4:	683a      	ldr	r2, [r7, #0]
 800b3b6:	68f9      	ldr	r1, [r7, #12]
 800b3b8:	69b8      	ldr	r0, [r7, #24]
 800b3ba:	f001 fa77 	bl	800c8ac <pxPortInitialiseStack>
 800b3be:	4602      	mov	r2, r0
 800b3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d002      	beq.n	800b3d0 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3ce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3d0:	bf00      	nop
 800b3d2:	3720      	adds	r7, #32
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}
 800b3d8:	0800e188 	.word	0x0800e188
 800b3dc:	0800e1a8 	.word	0x0800e1a8
 800b3e0:	0800e168 	.word	0x0800e168

0800b3e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b082      	sub	sp, #8
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b3ec:	f001 fb6e 	bl	800cacc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b3f0:	4b2d      	ldr	r3, [pc, #180]	; (800b4a8 <prvAddNewTaskToReadyList+0xc4>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	3301      	adds	r3, #1
 800b3f6:	4a2c      	ldr	r2, [pc, #176]	; (800b4a8 <prvAddNewTaskToReadyList+0xc4>)
 800b3f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b3fa:	4b2c      	ldr	r3, [pc, #176]	; (800b4ac <prvAddNewTaskToReadyList+0xc8>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d109      	bne.n	800b416 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b402:	4a2a      	ldr	r2, [pc, #168]	; (800b4ac <prvAddNewTaskToReadyList+0xc8>)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b408:	4b27      	ldr	r3, [pc, #156]	; (800b4a8 <prvAddNewTaskToReadyList+0xc4>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	2b01      	cmp	r3, #1
 800b40e:	d110      	bne.n	800b432 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b410:	f000 fc4e 	bl	800bcb0 <prvInitialiseTaskLists>
 800b414:	e00d      	b.n	800b432 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b416:	4b26      	ldr	r3, [pc, #152]	; (800b4b0 <prvAddNewTaskToReadyList+0xcc>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d109      	bne.n	800b432 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b41e:	4b23      	ldr	r3, [pc, #140]	; (800b4ac <prvAddNewTaskToReadyList+0xc8>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b428:	429a      	cmp	r2, r3
 800b42a:	d802      	bhi.n	800b432 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b42c:	4a1f      	ldr	r2, [pc, #124]	; (800b4ac <prvAddNewTaskToReadyList+0xc8>)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b432:	4b20      	ldr	r3, [pc, #128]	; (800b4b4 <prvAddNewTaskToReadyList+0xd0>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	3301      	adds	r3, #1
 800b438:	4a1e      	ldr	r2, [pc, #120]	; (800b4b4 <prvAddNewTaskToReadyList+0xd0>)
 800b43a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b43c:	4b1d      	ldr	r3, [pc, #116]	; (800b4b4 <prvAddNewTaskToReadyList+0xd0>)
 800b43e:	681a      	ldr	r2, [r3, #0]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b448:	4b1b      	ldr	r3, [pc, #108]	; (800b4b8 <prvAddNewTaskToReadyList+0xd4>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d903      	bls.n	800b458 <prvAddNewTaskToReadyList+0x74>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b454:	4a18      	ldr	r2, [pc, #96]	; (800b4b8 <prvAddNewTaskToReadyList+0xd4>)
 800b456:	6013      	str	r3, [r2, #0]
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b45c:	4613      	mov	r3, r2
 800b45e:	009b      	lsls	r3, r3, #2
 800b460:	4413      	add	r3, r2
 800b462:	009b      	lsls	r3, r3, #2
 800b464:	4a15      	ldr	r2, [pc, #84]	; (800b4bc <prvAddNewTaskToReadyList+0xd8>)
 800b466:	441a      	add	r2, r3
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	3304      	adds	r3, #4
 800b46c:	4619      	mov	r1, r3
 800b46e:	4610      	mov	r0, r2
 800b470:	f7ff f895 	bl	800a59e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b474:	f001 fb5e 	bl	800cb34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b478:	4b0d      	ldr	r3, [pc, #52]	; (800b4b0 <prvAddNewTaskToReadyList+0xcc>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d00e      	beq.n	800b49e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b480:	4b0a      	ldr	r3, [pc, #40]	; (800b4ac <prvAddNewTaskToReadyList+0xc8>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b48a:	429a      	cmp	r2, r3
 800b48c:	d207      	bcs.n	800b49e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b48e:	4b0c      	ldr	r3, [pc, #48]	; (800b4c0 <prvAddNewTaskToReadyList+0xdc>)
 800b490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b494:	601a      	str	r2, [r3, #0]
 800b496:	f3bf 8f4f 	dsb	sy
 800b49a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b49e:	bf00      	nop
 800b4a0:	3708      	adds	r7, #8
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}
 800b4a6:	bf00      	nop
 800b4a8:	20001bb8 	.word	0x20001bb8
 800b4ac:	200016e4 	.word	0x200016e4
 800b4b0:	20001bc4 	.word	0x20001bc4
 800b4b4:	20001bd4 	.word	0x20001bd4
 800b4b8:	20001bc0 	.word	0x20001bc0
 800b4bc:	200016e8 	.word	0x200016e8
 800b4c0:	e000ed04 	.word	0xe000ed04

0800b4c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b084      	sub	sp, #16
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d019      	beq.n	800b50a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b4d6:	4b14      	ldr	r3, [pc, #80]	; (800b528 <vTaskDelay+0x64>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d00c      	beq.n	800b4f8 <vTaskDelay+0x34>
	__asm volatile
 800b4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e2:	b672      	cpsid	i
 800b4e4:	f383 8811 	msr	BASEPRI, r3
 800b4e8:	f3bf 8f6f 	isb	sy
 800b4ec:	f3bf 8f4f 	dsb	sy
 800b4f0:	b662      	cpsie	i
 800b4f2:	60bb      	str	r3, [r7, #8]
}
 800b4f4:	bf00      	nop
 800b4f6:	e7fe      	b.n	800b4f6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800b4f8:	f000 f88e 	bl	800b618 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b4fc:	2100      	movs	r1, #0
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f000 fd62 	bl	800bfc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b504:	f000 f896 	bl	800b634 <xTaskResumeAll>
 800b508:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d107      	bne.n	800b520 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800b510:	4b06      	ldr	r3, [pc, #24]	; (800b52c <vTaskDelay+0x68>)
 800b512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b516:	601a      	str	r2, [r3, #0]
 800b518:	f3bf 8f4f 	dsb	sy
 800b51c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b520:	bf00      	nop
 800b522:	3710      	adds	r7, #16
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}
 800b528:	20001be0 	.word	0x20001be0
 800b52c:	e000ed04 	.word	0xe000ed04

0800b530 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b08a      	sub	sp, #40	; 0x28
 800b534:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b536:	2300      	movs	r3, #0
 800b538:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b53a:	2300      	movs	r3, #0
 800b53c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b53e:	463a      	mov	r2, r7
 800b540:	1d39      	adds	r1, r7, #4
 800b542:	f107 0308 	add.w	r3, r7, #8
 800b546:	4618      	mov	r0, r3
 800b548:	f7fe ffc8 	bl	800a4dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b54c:	6839      	ldr	r1, [r7, #0]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	68ba      	ldr	r2, [r7, #8]
 800b552:	9202      	str	r2, [sp, #8]
 800b554:	9301      	str	r3, [sp, #4]
 800b556:	2300      	movs	r3, #0
 800b558:	9300      	str	r3, [sp, #0]
 800b55a:	2300      	movs	r3, #0
 800b55c:	460a      	mov	r2, r1
 800b55e:	4926      	ldr	r1, [pc, #152]	; (800b5f8 <vTaskStartScheduler+0xc8>)
 800b560:	4826      	ldr	r0, [pc, #152]	; (800b5fc <vTaskStartScheduler+0xcc>)
 800b562:	f7ff fdef 	bl	800b144 <xTaskCreateStatic>
 800b566:	4603      	mov	r3, r0
 800b568:	4a25      	ldr	r2, [pc, #148]	; (800b600 <vTaskStartScheduler+0xd0>)
 800b56a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b56c:	4b24      	ldr	r3, [pc, #144]	; (800b600 <vTaskStartScheduler+0xd0>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d002      	beq.n	800b57a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b574:	2301      	movs	r3, #1
 800b576:	617b      	str	r3, [r7, #20]
 800b578:	e001      	b.n	800b57e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b57a:	2300      	movs	r3, #0
 800b57c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	2b01      	cmp	r3, #1
 800b582:	d102      	bne.n	800b58a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b584:	f000 fd74 	bl	800c070 <xTimerCreateTimerTask>
 800b588:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	2b01      	cmp	r3, #1
 800b58e:	d11d      	bne.n	800b5cc <vTaskStartScheduler+0x9c>
	__asm volatile
 800b590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b594:	b672      	cpsid	i
 800b596:	f383 8811 	msr	BASEPRI, r3
 800b59a:	f3bf 8f6f 	isb	sy
 800b59e:	f3bf 8f4f 	dsb	sy
 800b5a2:	b662      	cpsie	i
 800b5a4:	613b      	str	r3, [r7, #16]
}
 800b5a6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b5a8:	4b16      	ldr	r3, [pc, #88]	; (800b604 <vTaskStartScheduler+0xd4>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	3354      	adds	r3, #84	; 0x54
 800b5ae:	4a16      	ldr	r2, [pc, #88]	; (800b608 <vTaskStartScheduler+0xd8>)
 800b5b0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b5b2:	4b16      	ldr	r3, [pc, #88]	; (800b60c <vTaskStartScheduler+0xdc>)
 800b5b4:	f04f 32ff 	mov.w	r2, #4294967295
 800b5b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b5ba:	4b15      	ldr	r3, [pc, #84]	; (800b610 <vTaskStartScheduler+0xe0>)
 800b5bc:	2201      	movs	r2, #1
 800b5be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b5c0:	4b14      	ldr	r3, [pc, #80]	; (800b614 <vTaskStartScheduler+0xe4>)
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b5c6:	f001 fa03 	bl	800c9d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b5ca:	e010      	b.n	800b5ee <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b5cc:	697b      	ldr	r3, [r7, #20]
 800b5ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5d2:	d10c      	bne.n	800b5ee <vTaskStartScheduler+0xbe>
	__asm volatile
 800b5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d8:	b672      	cpsid	i
 800b5da:	f383 8811 	msr	BASEPRI, r3
 800b5de:	f3bf 8f6f 	isb	sy
 800b5e2:	f3bf 8f4f 	dsb	sy
 800b5e6:	b662      	cpsie	i
 800b5e8:	60fb      	str	r3, [r7, #12]
}
 800b5ea:	bf00      	nop
 800b5ec:	e7fe      	b.n	800b5ec <vTaskStartScheduler+0xbc>
}
 800b5ee:	bf00      	nop
 800b5f0:	3718      	adds	r7, #24
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}
 800b5f6:	bf00      	nop
 800b5f8:	0800e058 	.word	0x0800e058
 800b5fc:	0800bc81 	.word	0x0800bc81
 800b600:	20001bdc 	.word	0x20001bdc
 800b604:	200016e4 	.word	0x200016e4
 800b608:	20000110 	.word	0x20000110
 800b60c:	20001bd8 	.word	0x20001bd8
 800b610:	20001bc4 	.word	0x20001bc4
 800b614:	20001bbc 	.word	0x20001bbc

0800b618 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b618:	b480      	push	{r7}
 800b61a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b61c:	4b04      	ldr	r3, [pc, #16]	; (800b630 <vTaskSuspendAll+0x18>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	3301      	adds	r3, #1
 800b622:	4a03      	ldr	r2, [pc, #12]	; (800b630 <vTaskSuspendAll+0x18>)
 800b624:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b626:	bf00      	nop
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr
 800b630:	20001be0 	.word	0x20001be0

0800b634 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b084      	sub	sp, #16
 800b638:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b63a:	2300      	movs	r3, #0
 800b63c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b63e:	2300      	movs	r3, #0
 800b640:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b642:	4b43      	ldr	r3, [pc, #268]	; (800b750 <xTaskResumeAll+0x11c>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d10c      	bne.n	800b664 <xTaskResumeAll+0x30>
	__asm volatile
 800b64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b64e:	b672      	cpsid	i
 800b650:	f383 8811 	msr	BASEPRI, r3
 800b654:	f3bf 8f6f 	isb	sy
 800b658:	f3bf 8f4f 	dsb	sy
 800b65c:	b662      	cpsie	i
 800b65e:	603b      	str	r3, [r7, #0]
}
 800b660:	bf00      	nop
 800b662:	e7fe      	b.n	800b662 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b664:	f001 fa32 	bl	800cacc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b668:	4b39      	ldr	r3, [pc, #228]	; (800b750 <xTaskResumeAll+0x11c>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	3b01      	subs	r3, #1
 800b66e:	4a38      	ldr	r2, [pc, #224]	; (800b750 <xTaskResumeAll+0x11c>)
 800b670:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b672:	4b37      	ldr	r3, [pc, #220]	; (800b750 <xTaskResumeAll+0x11c>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d162      	bne.n	800b740 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b67a:	4b36      	ldr	r3, [pc, #216]	; (800b754 <xTaskResumeAll+0x120>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d05e      	beq.n	800b740 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b682:	e02f      	b.n	800b6e4 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b684:	4b34      	ldr	r3, [pc, #208]	; (800b758 <xTaskResumeAll+0x124>)
 800b686:	68db      	ldr	r3, [r3, #12]
 800b688:	68db      	ldr	r3, [r3, #12]
 800b68a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	3318      	adds	r3, #24
 800b690:	4618      	mov	r0, r3
 800b692:	f7fe ffe1 	bl	800a658 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	3304      	adds	r3, #4
 800b69a:	4618      	mov	r0, r3
 800b69c:	f7fe ffdc 	bl	800a658 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6a4:	4b2d      	ldr	r3, [pc, #180]	; (800b75c <xTaskResumeAll+0x128>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	429a      	cmp	r2, r3
 800b6aa:	d903      	bls.n	800b6b4 <xTaskResumeAll+0x80>
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6b0:	4a2a      	ldr	r2, [pc, #168]	; (800b75c <xTaskResumeAll+0x128>)
 800b6b2:	6013      	str	r3, [r2, #0]
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6b8:	4613      	mov	r3, r2
 800b6ba:	009b      	lsls	r3, r3, #2
 800b6bc:	4413      	add	r3, r2
 800b6be:	009b      	lsls	r3, r3, #2
 800b6c0:	4a27      	ldr	r2, [pc, #156]	; (800b760 <xTaskResumeAll+0x12c>)
 800b6c2:	441a      	add	r2, r3
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	3304      	adds	r3, #4
 800b6c8:	4619      	mov	r1, r3
 800b6ca:	4610      	mov	r0, r2
 800b6cc:	f7fe ff67 	bl	800a59e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6d4:	4b23      	ldr	r3, [pc, #140]	; (800b764 <xTaskResumeAll+0x130>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d302      	bcc.n	800b6e4 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800b6de:	4b22      	ldr	r3, [pc, #136]	; (800b768 <xTaskResumeAll+0x134>)
 800b6e0:	2201      	movs	r2, #1
 800b6e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b6e4:	4b1c      	ldr	r3, [pc, #112]	; (800b758 <xTaskResumeAll+0x124>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d1cb      	bne.n	800b684 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d001      	beq.n	800b6f6 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b6f2:	f000 fbb9 	bl	800be68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b6f6:	4b1d      	ldr	r3, [pc, #116]	; (800b76c <xTaskResumeAll+0x138>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d010      	beq.n	800b724 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b702:	f000 f859 	bl	800b7b8 <xTaskIncrementTick>
 800b706:	4603      	mov	r3, r0
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d002      	beq.n	800b712 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800b70c:	4b16      	ldr	r3, [pc, #88]	; (800b768 <xTaskResumeAll+0x134>)
 800b70e:	2201      	movs	r2, #1
 800b710:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	3b01      	subs	r3, #1
 800b716:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d1f1      	bne.n	800b702 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800b71e:	4b13      	ldr	r3, [pc, #76]	; (800b76c <xTaskResumeAll+0x138>)
 800b720:	2200      	movs	r2, #0
 800b722:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b724:	4b10      	ldr	r3, [pc, #64]	; (800b768 <xTaskResumeAll+0x134>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d009      	beq.n	800b740 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b72c:	2301      	movs	r3, #1
 800b72e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b730:	4b0f      	ldr	r3, [pc, #60]	; (800b770 <xTaskResumeAll+0x13c>)
 800b732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b736:	601a      	str	r2, [r3, #0]
 800b738:	f3bf 8f4f 	dsb	sy
 800b73c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b740:	f001 f9f8 	bl	800cb34 <vPortExitCritical>

	return xAlreadyYielded;
 800b744:	68bb      	ldr	r3, [r7, #8]
}
 800b746:	4618      	mov	r0, r3
 800b748:	3710      	adds	r7, #16
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
 800b74e:	bf00      	nop
 800b750:	20001be0 	.word	0x20001be0
 800b754:	20001bb8 	.word	0x20001bb8
 800b758:	20001b78 	.word	0x20001b78
 800b75c:	20001bc0 	.word	0x20001bc0
 800b760:	200016e8 	.word	0x200016e8
 800b764:	200016e4 	.word	0x200016e4
 800b768:	20001bcc 	.word	0x20001bcc
 800b76c:	20001bc8 	.word	0x20001bc8
 800b770:	e000ed04 	.word	0xe000ed04

0800b774 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b774:	b480      	push	{r7}
 800b776:	b083      	sub	sp, #12
 800b778:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b77a:	4b05      	ldr	r3, [pc, #20]	; (800b790 <xTaskGetTickCount+0x1c>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b780:	687b      	ldr	r3, [r7, #4]
}
 800b782:	4618      	mov	r0, r3
 800b784:	370c      	adds	r7, #12
 800b786:	46bd      	mov	sp, r7
 800b788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78c:	4770      	bx	lr
 800b78e:	bf00      	nop
 800b790:	20001bbc 	.word	0x20001bbc

0800b794 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b082      	sub	sp, #8
 800b798:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b79a:	f001 fa7f 	bl	800cc9c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b79e:	2300      	movs	r3, #0
 800b7a0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b7a2:	4b04      	ldr	r3, [pc, #16]	; (800b7b4 <xTaskGetTickCountFromISR+0x20>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b7a8:	683b      	ldr	r3, [r7, #0]
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3708      	adds	r7, #8
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}
 800b7b2:	bf00      	nop
 800b7b4:	20001bbc 	.word	0x20001bbc

0800b7b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b086      	sub	sp, #24
 800b7bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b7c2:	4b50      	ldr	r3, [pc, #320]	; (800b904 <xTaskIncrementTick+0x14c>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	f040 808b 	bne.w	800b8e2 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b7cc:	4b4e      	ldr	r3, [pc, #312]	; (800b908 <xTaskIncrementTick+0x150>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	3301      	adds	r3, #1
 800b7d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b7d4:	4a4c      	ldr	r2, [pc, #304]	; (800b908 <xTaskIncrementTick+0x150>)
 800b7d6:	693b      	ldr	r3, [r7, #16]
 800b7d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b7da:	693b      	ldr	r3, [r7, #16]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d122      	bne.n	800b826 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800b7e0:	4b4a      	ldr	r3, [pc, #296]	; (800b90c <xTaskIncrementTick+0x154>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d00c      	beq.n	800b804 <xTaskIncrementTick+0x4c>
	__asm volatile
 800b7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ee:	b672      	cpsid	i
 800b7f0:	f383 8811 	msr	BASEPRI, r3
 800b7f4:	f3bf 8f6f 	isb	sy
 800b7f8:	f3bf 8f4f 	dsb	sy
 800b7fc:	b662      	cpsie	i
 800b7fe:	603b      	str	r3, [r7, #0]
}
 800b800:	bf00      	nop
 800b802:	e7fe      	b.n	800b802 <xTaskIncrementTick+0x4a>
 800b804:	4b41      	ldr	r3, [pc, #260]	; (800b90c <xTaskIncrementTick+0x154>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	60fb      	str	r3, [r7, #12]
 800b80a:	4b41      	ldr	r3, [pc, #260]	; (800b910 <xTaskIncrementTick+0x158>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	4a3f      	ldr	r2, [pc, #252]	; (800b90c <xTaskIncrementTick+0x154>)
 800b810:	6013      	str	r3, [r2, #0]
 800b812:	4a3f      	ldr	r2, [pc, #252]	; (800b910 <xTaskIncrementTick+0x158>)
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	6013      	str	r3, [r2, #0]
 800b818:	4b3e      	ldr	r3, [pc, #248]	; (800b914 <xTaskIncrementTick+0x15c>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	3301      	adds	r3, #1
 800b81e:	4a3d      	ldr	r2, [pc, #244]	; (800b914 <xTaskIncrementTick+0x15c>)
 800b820:	6013      	str	r3, [r2, #0]
 800b822:	f000 fb21 	bl	800be68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b826:	4b3c      	ldr	r3, [pc, #240]	; (800b918 <xTaskIncrementTick+0x160>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	693a      	ldr	r2, [r7, #16]
 800b82c:	429a      	cmp	r2, r3
 800b82e:	d349      	bcc.n	800b8c4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b830:	4b36      	ldr	r3, [pc, #216]	; (800b90c <xTaskIncrementTick+0x154>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d104      	bne.n	800b844 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b83a:	4b37      	ldr	r3, [pc, #220]	; (800b918 <xTaskIncrementTick+0x160>)
 800b83c:	f04f 32ff 	mov.w	r2, #4294967295
 800b840:	601a      	str	r2, [r3, #0]
					break;
 800b842:	e03f      	b.n	800b8c4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b844:	4b31      	ldr	r3, [pc, #196]	; (800b90c <xTaskIncrementTick+0x154>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	68db      	ldr	r3, [r3, #12]
 800b84a:	68db      	ldr	r3, [r3, #12]
 800b84c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	685b      	ldr	r3, [r3, #4]
 800b852:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b854:	693a      	ldr	r2, [r7, #16]
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	429a      	cmp	r2, r3
 800b85a:	d203      	bcs.n	800b864 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b85c:	4a2e      	ldr	r2, [pc, #184]	; (800b918 <xTaskIncrementTick+0x160>)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b862:	e02f      	b.n	800b8c4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	3304      	adds	r3, #4
 800b868:	4618      	mov	r0, r3
 800b86a:	f7fe fef5 	bl	800a658 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b872:	2b00      	cmp	r3, #0
 800b874:	d004      	beq.n	800b880 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	3318      	adds	r3, #24
 800b87a:	4618      	mov	r0, r3
 800b87c:	f7fe feec 	bl	800a658 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b884:	4b25      	ldr	r3, [pc, #148]	; (800b91c <xTaskIncrementTick+0x164>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	429a      	cmp	r2, r3
 800b88a:	d903      	bls.n	800b894 <xTaskIncrementTick+0xdc>
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b890:	4a22      	ldr	r2, [pc, #136]	; (800b91c <xTaskIncrementTick+0x164>)
 800b892:	6013      	str	r3, [r2, #0]
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b898:	4613      	mov	r3, r2
 800b89a:	009b      	lsls	r3, r3, #2
 800b89c:	4413      	add	r3, r2
 800b89e:	009b      	lsls	r3, r3, #2
 800b8a0:	4a1f      	ldr	r2, [pc, #124]	; (800b920 <xTaskIncrementTick+0x168>)
 800b8a2:	441a      	add	r2, r3
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	3304      	adds	r3, #4
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	4610      	mov	r0, r2
 800b8ac:	f7fe fe77 	bl	800a59e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8b4:	4b1b      	ldr	r3, [pc, #108]	; (800b924 <xTaskIncrementTick+0x16c>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d3b8      	bcc.n	800b830 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800b8be:	2301      	movs	r3, #1
 800b8c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8c2:	e7b5      	b.n	800b830 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b8c4:	4b17      	ldr	r3, [pc, #92]	; (800b924 <xTaskIncrementTick+0x16c>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8ca:	4915      	ldr	r1, [pc, #84]	; (800b920 <xTaskIncrementTick+0x168>)
 800b8cc:	4613      	mov	r3, r2
 800b8ce:	009b      	lsls	r3, r3, #2
 800b8d0:	4413      	add	r3, r2
 800b8d2:	009b      	lsls	r3, r3, #2
 800b8d4:	440b      	add	r3, r1
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d907      	bls.n	800b8ec <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800b8dc:	2301      	movs	r3, #1
 800b8de:	617b      	str	r3, [r7, #20]
 800b8e0:	e004      	b.n	800b8ec <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b8e2:	4b11      	ldr	r3, [pc, #68]	; (800b928 <xTaskIncrementTick+0x170>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	3301      	adds	r3, #1
 800b8e8:	4a0f      	ldr	r2, [pc, #60]	; (800b928 <xTaskIncrementTick+0x170>)
 800b8ea:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b8ec:	4b0f      	ldr	r3, [pc, #60]	; (800b92c <xTaskIncrementTick+0x174>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d001      	beq.n	800b8f8 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b8f8:	697b      	ldr	r3, [r7, #20]
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3718      	adds	r7, #24
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}
 800b902:	bf00      	nop
 800b904:	20001be0 	.word	0x20001be0
 800b908:	20001bbc 	.word	0x20001bbc
 800b90c:	20001b70 	.word	0x20001b70
 800b910:	20001b74 	.word	0x20001b74
 800b914:	20001bd0 	.word	0x20001bd0
 800b918:	20001bd8 	.word	0x20001bd8
 800b91c:	20001bc0 	.word	0x20001bc0
 800b920:	200016e8 	.word	0x200016e8
 800b924:	200016e4 	.word	0x200016e4
 800b928:	20001bc8 	.word	0x20001bc8
 800b92c:	20001bcc 	.word	0x20001bcc

0800b930 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b930:	b480      	push	{r7}
 800b932:	b085      	sub	sp, #20
 800b934:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b936:	4b2b      	ldr	r3, [pc, #172]	; (800b9e4 <vTaskSwitchContext+0xb4>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d003      	beq.n	800b946 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b93e:	4b2a      	ldr	r3, [pc, #168]	; (800b9e8 <vTaskSwitchContext+0xb8>)
 800b940:	2201      	movs	r2, #1
 800b942:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b944:	e048      	b.n	800b9d8 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800b946:	4b28      	ldr	r3, [pc, #160]	; (800b9e8 <vTaskSwitchContext+0xb8>)
 800b948:	2200      	movs	r2, #0
 800b94a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b94c:	4b27      	ldr	r3, [pc, #156]	; (800b9ec <vTaskSwitchContext+0xbc>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	60fb      	str	r3, [r7, #12]
 800b952:	e012      	b.n	800b97a <vTaskSwitchContext+0x4a>
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d10c      	bne.n	800b974 <vTaskSwitchContext+0x44>
	__asm volatile
 800b95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b95e:	b672      	cpsid	i
 800b960:	f383 8811 	msr	BASEPRI, r3
 800b964:	f3bf 8f6f 	isb	sy
 800b968:	f3bf 8f4f 	dsb	sy
 800b96c:	b662      	cpsie	i
 800b96e:	607b      	str	r3, [r7, #4]
}
 800b970:	bf00      	nop
 800b972:	e7fe      	b.n	800b972 <vTaskSwitchContext+0x42>
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	3b01      	subs	r3, #1
 800b978:	60fb      	str	r3, [r7, #12]
 800b97a:	491d      	ldr	r1, [pc, #116]	; (800b9f0 <vTaskSwitchContext+0xc0>)
 800b97c:	68fa      	ldr	r2, [r7, #12]
 800b97e:	4613      	mov	r3, r2
 800b980:	009b      	lsls	r3, r3, #2
 800b982:	4413      	add	r3, r2
 800b984:	009b      	lsls	r3, r3, #2
 800b986:	440b      	add	r3, r1
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d0e2      	beq.n	800b954 <vTaskSwitchContext+0x24>
 800b98e:	68fa      	ldr	r2, [r7, #12]
 800b990:	4613      	mov	r3, r2
 800b992:	009b      	lsls	r3, r3, #2
 800b994:	4413      	add	r3, r2
 800b996:	009b      	lsls	r3, r3, #2
 800b998:	4a15      	ldr	r2, [pc, #84]	; (800b9f0 <vTaskSwitchContext+0xc0>)
 800b99a:	4413      	add	r3, r2
 800b99c:	60bb      	str	r3, [r7, #8]
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	685a      	ldr	r2, [r3, #4]
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	605a      	str	r2, [r3, #4]
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	685a      	ldr	r2, [r3, #4]
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	3308      	adds	r3, #8
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d104      	bne.n	800b9be <vTaskSwitchContext+0x8e>
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	685b      	ldr	r3, [r3, #4]
 800b9b8:	685a      	ldr	r2, [r3, #4]
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	605a      	str	r2, [r3, #4]
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	68db      	ldr	r3, [r3, #12]
 800b9c4:	4a0b      	ldr	r2, [pc, #44]	; (800b9f4 <vTaskSwitchContext+0xc4>)
 800b9c6:	6013      	str	r3, [r2, #0]
 800b9c8:	4a08      	ldr	r2, [pc, #32]	; (800b9ec <vTaskSwitchContext+0xbc>)
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b9ce:	4b09      	ldr	r3, [pc, #36]	; (800b9f4 <vTaskSwitchContext+0xc4>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	3354      	adds	r3, #84	; 0x54
 800b9d4:	4a08      	ldr	r2, [pc, #32]	; (800b9f8 <vTaskSwitchContext+0xc8>)
 800b9d6:	6013      	str	r3, [r2, #0]
}
 800b9d8:	bf00      	nop
 800b9da:	3714      	adds	r7, #20
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e2:	4770      	bx	lr
 800b9e4:	20001be0 	.word	0x20001be0
 800b9e8:	20001bcc 	.word	0x20001bcc
 800b9ec:	20001bc0 	.word	0x20001bc0
 800b9f0:	200016e8 	.word	0x200016e8
 800b9f4:	200016e4 	.word	0x200016e4
 800b9f8:	20000110 	.word	0x20000110

0800b9fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b084      	sub	sp, #16
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
 800ba04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d10c      	bne.n	800ba26 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800ba0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba10:	b672      	cpsid	i
 800ba12:	f383 8811 	msr	BASEPRI, r3
 800ba16:	f3bf 8f6f 	isb	sy
 800ba1a:	f3bf 8f4f 	dsb	sy
 800ba1e:	b662      	cpsie	i
 800ba20:	60fb      	str	r3, [r7, #12]
}
 800ba22:	bf00      	nop
 800ba24:	e7fe      	b.n	800ba24 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ba26:	4b07      	ldr	r3, [pc, #28]	; (800ba44 <vTaskPlaceOnEventList+0x48>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	3318      	adds	r3, #24
 800ba2c:	4619      	mov	r1, r3
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f7fe fdd9 	bl	800a5e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ba34:	2101      	movs	r1, #1
 800ba36:	6838      	ldr	r0, [r7, #0]
 800ba38:	f000 fac6 	bl	800bfc8 <prvAddCurrentTaskToDelayedList>
}
 800ba3c:	bf00      	nop
 800ba3e:	3710      	adds	r7, #16
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}
 800ba44:	200016e4 	.word	0x200016e4

0800ba48 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b086      	sub	sp, #24
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	60f8      	str	r0, [r7, #12]
 800ba50:	60b9      	str	r1, [r7, #8]
 800ba52:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d10c      	bne.n	800ba74 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800ba5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba5e:	b672      	cpsid	i
 800ba60:	f383 8811 	msr	BASEPRI, r3
 800ba64:	f3bf 8f6f 	isb	sy
 800ba68:	f3bf 8f4f 	dsb	sy
 800ba6c:	b662      	cpsie	i
 800ba6e:	617b      	str	r3, [r7, #20]
}
 800ba70:	bf00      	nop
 800ba72:	e7fe      	b.n	800ba72 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ba74:	4b0a      	ldr	r3, [pc, #40]	; (800baa0 <vTaskPlaceOnEventListRestricted+0x58>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	3318      	adds	r3, #24
 800ba7a:	4619      	mov	r1, r3
 800ba7c:	68f8      	ldr	r0, [r7, #12]
 800ba7e:	f7fe fd8e 	bl	800a59e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d002      	beq.n	800ba8e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800ba88:	f04f 33ff 	mov.w	r3, #4294967295
 800ba8c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ba8e:	6879      	ldr	r1, [r7, #4]
 800ba90:	68b8      	ldr	r0, [r7, #8]
 800ba92:	f000 fa99 	bl	800bfc8 <prvAddCurrentTaskToDelayedList>
	}
 800ba96:	bf00      	nop
 800ba98:	3718      	adds	r7, #24
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}
 800ba9e:	bf00      	nop
 800baa0:	200016e4 	.word	0x200016e4

0800baa4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b086      	sub	sp, #24
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	68db      	ldr	r3, [r3, #12]
 800bab0:	68db      	ldr	r3, [r3, #12]
 800bab2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d10c      	bne.n	800bad4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800baba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800babe:	b672      	cpsid	i
 800bac0:	f383 8811 	msr	BASEPRI, r3
 800bac4:	f3bf 8f6f 	isb	sy
 800bac8:	f3bf 8f4f 	dsb	sy
 800bacc:	b662      	cpsie	i
 800bace:	60fb      	str	r3, [r7, #12]
}
 800bad0:	bf00      	nop
 800bad2:	e7fe      	b.n	800bad2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	3318      	adds	r3, #24
 800bad8:	4618      	mov	r0, r3
 800bada:	f7fe fdbd 	bl	800a658 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bade:	4b1e      	ldr	r3, [pc, #120]	; (800bb58 <xTaskRemoveFromEventList+0xb4>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d11d      	bne.n	800bb22 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	3304      	adds	r3, #4
 800baea:	4618      	mov	r0, r3
 800baec:	f7fe fdb4 	bl	800a658 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baf4:	4b19      	ldr	r3, [pc, #100]	; (800bb5c <xTaskRemoveFromEventList+0xb8>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	429a      	cmp	r2, r3
 800bafa:	d903      	bls.n	800bb04 <xTaskRemoveFromEventList+0x60>
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb00:	4a16      	ldr	r2, [pc, #88]	; (800bb5c <xTaskRemoveFromEventList+0xb8>)
 800bb02:	6013      	str	r3, [r2, #0]
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb08:	4613      	mov	r3, r2
 800bb0a:	009b      	lsls	r3, r3, #2
 800bb0c:	4413      	add	r3, r2
 800bb0e:	009b      	lsls	r3, r3, #2
 800bb10:	4a13      	ldr	r2, [pc, #76]	; (800bb60 <xTaskRemoveFromEventList+0xbc>)
 800bb12:	441a      	add	r2, r3
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	3304      	adds	r3, #4
 800bb18:	4619      	mov	r1, r3
 800bb1a:	4610      	mov	r0, r2
 800bb1c:	f7fe fd3f 	bl	800a59e <vListInsertEnd>
 800bb20:	e005      	b.n	800bb2e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	3318      	adds	r3, #24
 800bb26:	4619      	mov	r1, r3
 800bb28:	480e      	ldr	r0, [pc, #56]	; (800bb64 <xTaskRemoveFromEventList+0xc0>)
 800bb2a:	f7fe fd38 	bl	800a59e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb32:	4b0d      	ldr	r3, [pc, #52]	; (800bb68 <xTaskRemoveFromEventList+0xc4>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d905      	bls.n	800bb48 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bb40:	4b0a      	ldr	r3, [pc, #40]	; (800bb6c <xTaskRemoveFromEventList+0xc8>)
 800bb42:	2201      	movs	r2, #1
 800bb44:	601a      	str	r2, [r3, #0]
 800bb46:	e001      	b.n	800bb4c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bb4c:	697b      	ldr	r3, [r7, #20]
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3718      	adds	r7, #24
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
 800bb56:	bf00      	nop
 800bb58:	20001be0 	.word	0x20001be0
 800bb5c:	20001bc0 	.word	0x20001bc0
 800bb60:	200016e8 	.word	0x200016e8
 800bb64:	20001b78 	.word	0x20001b78
 800bb68:	200016e4 	.word	0x200016e4
 800bb6c:	20001bcc 	.word	0x20001bcc

0800bb70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bb70:	b480      	push	{r7}
 800bb72:	b083      	sub	sp, #12
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bb78:	4b06      	ldr	r3, [pc, #24]	; (800bb94 <vTaskInternalSetTimeOutState+0x24>)
 800bb7a:	681a      	ldr	r2, [r3, #0]
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bb80:	4b05      	ldr	r3, [pc, #20]	; (800bb98 <vTaskInternalSetTimeOutState+0x28>)
 800bb82:	681a      	ldr	r2, [r3, #0]
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	605a      	str	r2, [r3, #4]
}
 800bb88:	bf00      	nop
 800bb8a:	370c      	adds	r7, #12
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr
 800bb94:	20001bd0 	.word	0x20001bd0
 800bb98:	20001bbc 	.word	0x20001bbc

0800bb9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b088      	sub	sp, #32
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
 800bba4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d10c      	bne.n	800bbc6 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800bbac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb0:	b672      	cpsid	i
 800bbb2:	f383 8811 	msr	BASEPRI, r3
 800bbb6:	f3bf 8f6f 	isb	sy
 800bbba:	f3bf 8f4f 	dsb	sy
 800bbbe:	b662      	cpsie	i
 800bbc0:	613b      	str	r3, [r7, #16]
}
 800bbc2:	bf00      	nop
 800bbc4:	e7fe      	b.n	800bbc4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d10c      	bne.n	800bbe6 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800bbcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd0:	b672      	cpsid	i
 800bbd2:	f383 8811 	msr	BASEPRI, r3
 800bbd6:	f3bf 8f6f 	isb	sy
 800bbda:	f3bf 8f4f 	dsb	sy
 800bbde:	b662      	cpsie	i
 800bbe0:	60fb      	str	r3, [r7, #12]
}
 800bbe2:	bf00      	nop
 800bbe4:	e7fe      	b.n	800bbe4 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800bbe6:	f000 ff71 	bl	800cacc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bbea:	4b1d      	ldr	r3, [pc, #116]	; (800bc60 <xTaskCheckForTimeOut+0xc4>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	685b      	ldr	r3, [r3, #4]
 800bbf4:	69ba      	ldr	r2, [r7, #24]
 800bbf6:	1ad3      	subs	r3, r2, r3
 800bbf8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc02:	d102      	bne.n	800bc0a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bc04:	2300      	movs	r3, #0
 800bc06:	61fb      	str	r3, [r7, #28]
 800bc08:	e023      	b.n	800bc52 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681a      	ldr	r2, [r3, #0]
 800bc0e:	4b15      	ldr	r3, [pc, #84]	; (800bc64 <xTaskCheckForTimeOut+0xc8>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	429a      	cmp	r2, r3
 800bc14:	d007      	beq.n	800bc26 <xTaskCheckForTimeOut+0x8a>
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	69ba      	ldr	r2, [r7, #24]
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	d302      	bcc.n	800bc26 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bc20:	2301      	movs	r3, #1
 800bc22:	61fb      	str	r3, [r7, #28]
 800bc24:	e015      	b.n	800bc52 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	697a      	ldr	r2, [r7, #20]
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	d20b      	bcs.n	800bc48 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	681a      	ldr	r2, [r3, #0]
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	1ad2      	subs	r2, r2, r3
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f7ff ff97 	bl	800bb70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bc42:	2300      	movs	r3, #0
 800bc44:	61fb      	str	r3, [r7, #28]
 800bc46:	e004      	b.n	800bc52 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bc4e:	2301      	movs	r3, #1
 800bc50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bc52:	f000 ff6f 	bl	800cb34 <vPortExitCritical>

	return xReturn;
 800bc56:	69fb      	ldr	r3, [r7, #28]
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3720      	adds	r7, #32
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}
 800bc60:	20001bbc 	.word	0x20001bbc
 800bc64:	20001bd0 	.word	0x20001bd0

0800bc68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bc68:	b480      	push	{r7}
 800bc6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bc6c:	4b03      	ldr	r3, [pc, #12]	; (800bc7c <vTaskMissedYield+0x14>)
 800bc6e:	2201      	movs	r2, #1
 800bc70:	601a      	str	r2, [r3, #0]
}
 800bc72:	bf00      	nop
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr
 800bc7c:	20001bcc 	.word	0x20001bcc

0800bc80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b082      	sub	sp, #8
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bc88:	f000 f852 	bl	800bd30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bc8c:	4b06      	ldr	r3, [pc, #24]	; (800bca8 <prvIdleTask+0x28>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	2b01      	cmp	r3, #1
 800bc92:	d9f9      	bls.n	800bc88 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bc94:	4b05      	ldr	r3, [pc, #20]	; (800bcac <prvIdleTask+0x2c>)
 800bc96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc9a:	601a      	str	r2, [r3, #0]
 800bc9c:	f3bf 8f4f 	dsb	sy
 800bca0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bca4:	e7f0      	b.n	800bc88 <prvIdleTask+0x8>
 800bca6:	bf00      	nop
 800bca8:	200016e8 	.word	0x200016e8
 800bcac:	e000ed04 	.word	0xe000ed04

0800bcb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b082      	sub	sp, #8
 800bcb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	607b      	str	r3, [r7, #4]
 800bcba:	e00c      	b.n	800bcd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bcbc:	687a      	ldr	r2, [r7, #4]
 800bcbe:	4613      	mov	r3, r2
 800bcc0:	009b      	lsls	r3, r3, #2
 800bcc2:	4413      	add	r3, r2
 800bcc4:	009b      	lsls	r3, r3, #2
 800bcc6:	4a12      	ldr	r2, [pc, #72]	; (800bd10 <prvInitialiseTaskLists+0x60>)
 800bcc8:	4413      	add	r3, r2
 800bcca:	4618      	mov	r0, r3
 800bccc:	f7fe fc3a 	bl	800a544 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	3301      	adds	r3, #1
 800bcd4:	607b      	str	r3, [r7, #4]
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2b37      	cmp	r3, #55	; 0x37
 800bcda:	d9ef      	bls.n	800bcbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bcdc:	480d      	ldr	r0, [pc, #52]	; (800bd14 <prvInitialiseTaskLists+0x64>)
 800bcde:	f7fe fc31 	bl	800a544 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bce2:	480d      	ldr	r0, [pc, #52]	; (800bd18 <prvInitialiseTaskLists+0x68>)
 800bce4:	f7fe fc2e 	bl	800a544 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bce8:	480c      	ldr	r0, [pc, #48]	; (800bd1c <prvInitialiseTaskLists+0x6c>)
 800bcea:	f7fe fc2b 	bl	800a544 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bcee:	480c      	ldr	r0, [pc, #48]	; (800bd20 <prvInitialiseTaskLists+0x70>)
 800bcf0:	f7fe fc28 	bl	800a544 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bcf4:	480b      	ldr	r0, [pc, #44]	; (800bd24 <prvInitialiseTaskLists+0x74>)
 800bcf6:	f7fe fc25 	bl	800a544 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bcfa:	4b0b      	ldr	r3, [pc, #44]	; (800bd28 <prvInitialiseTaskLists+0x78>)
 800bcfc:	4a05      	ldr	r2, [pc, #20]	; (800bd14 <prvInitialiseTaskLists+0x64>)
 800bcfe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bd00:	4b0a      	ldr	r3, [pc, #40]	; (800bd2c <prvInitialiseTaskLists+0x7c>)
 800bd02:	4a05      	ldr	r2, [pc, #20]	; (800bd18 <prvInitialiseTaskLists+0x68>)
 800bd04:	601a      	str	r2, [r3, #0]
}
 800bd06:	bf00      	nop
 800bd08:	3708      	adds	r7, #8
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}
 800bd0e:	bf00      	nop
 800bd10:	200016e8 	.word	0x200016e8
 800bd14:	20001b48 	.word	0x20001b48
 800bd18:	20001b5c 	.word	0x20001b5c
 800bd1c:	20001b78 	.word	0x20001b78
 800bd20:	20001b8c 	.word	0x20001b8c
 800bd24:	20001ba4 	.word	0x20001ba4
 800bd28:	20001b70 	.word	0x20001b70
 800bd2c:	20001b74 	.word	0x20001b74

0800bd30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b082      	sub	sp, #8
 800bd34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bd36:	e019      	b.n	800bd6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bd38:	f000 fec8 	bl	800cacc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd3c:	4b10      	ldr	r3, [pc, #64]	; (800bd80 <prvCheckTasksWaitingTermination+0x50>)
 800bd3e:	68db      	ldr	r3, [r3, #12]
 800bd40:	68db      	ldr	r3, [r3, #12]
 800bd42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	3304      	adds	r3, #4
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f7fe fc85 	bl	800a658 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bd4e:	4b0d      	ldr	r3, [pc, #52]	; (800bd84 <prvCheckTasksWaitingTermination+0x54>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	3b01      	subs	r3, #1
 800bd54:	4a0b      	ldr	r2, [pc, #44]	; (800bd84 <prvCheckTasksWaitingTermination+0x54>)
 800bd56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bd58:	4b0b      	ldr	r3, [pc, #44]	; (800bd88 <prvCheckTasksWaitingTermination+0x58>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	3b01      	subs	r3, #1
 800bd5e:	4a0a      	ldr	r2, [pc, #40]	; (800bd88 <prvCheckTasksWaitingTermination+0x58>)
 800bd60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bd62:	f000 fee7 	bl	800cb34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f000 f848 	bl	800bdfc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bd6c:	4b06      	ldr	r3, [pc, #24]	; (800bd88 <prvCheckTasksWaitingTermination+0x58>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d1e1      	bne.n	800bd38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bd74:	bf00      	nop
 800bd76:	bf00      	nop
 800bd78:	3708      	adds	r7, #8
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}
 800bd7e:	bf00      	nop
 800bd80:	20001b8c 	.word	0x20001b8c
 800bd84:	20001bb8 	.word	0x20001bb8
 800bd88:	20001ba0 	.word	0x20001ba0

0800bd8c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b085      	sub	sp, #20
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800bd94:	2300      	movs	r3, #0
 800bd96:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800bd98:	e005      	b.n	800bda6 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	3301      	adds	r3, #1
 800bd9e:	607b      	str	r3, [r7, #4]
			ulCount++;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	3301      	adds	r3, #1
 800bda4:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	781b      	ldrb	r3, [r3, #0]
 800bdaa:	2ba5      	cmp	r3, #165	; 0xa5
 800bdac:	d0f5      	beq.n	800bd9a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	089b      	lsrs	r3, r3, #2
 800bdb2:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	b29b      	uxth	r3, r3
	}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3714      	adds	r7, #20
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc2:	4770      	bx	lr

0800bdc4 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b086      	sub	sp, #24
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d102      	bne.n	800bdd8 <uxTaskGetStackHighWaterMark+0x14>
 800bdd2:	4b09      	ldr	r3, [pc, #36]	; (800bdf8 <uxTaskGetStackHighWaterMark+0x34>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	e000      	b.n	800bdda <uxTaskGetStackHighWaterMark+0x16>
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bde0:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800bde2:	6938      	ldr	r0, [r7, #16]
 800bde4:	f7ff ffd2 	bl	800bd8c <prvTaskCheckFreeStackSpace>
 800bde8:	4603      	mov	r3, r0
 800bdea:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800bdec:	68fb      	ldr	r3, [r7, #12]
	}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3718      	adds	r7, #24
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
 800bdf6:	bf00      	nop
 800bdf8:	200016e4 	.word	0x200016e4

0800bdfc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b084      	sub	sp, #16
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	3354      	adds	r3, #84	; 0x54
 800be08:	4618      	mov	r0, r3
 800be0a:	f002 f845 	bl	800de98 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800be14:	2b00      	cmp	r3, #0
 800be16:	d108      	bne.n	800be2a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be1c:	4618      	mov	r0, r3
 800be1e:	f001 f84b 	bl	800ceb8 <vPortFree>
				vPortFree( pxTCB );
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f001 f848 	bl	800ceb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800be28:	e01a      	b.n	800be60 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800be30:	2b01      	cmp	r3, #1
 800be32:	d103      	bne.n	800be3c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f001 f83f 	bl	800ceb8 <vPortFree>
	}
 800be3a:	e011      	b.n	800be60 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800be42:	2b02      	cmp	r3, #2
 800be44:	d00c      	beq.n	800be60 <prvDeleteTCB+0x64>
	__asm volatile
 800be46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be4a:	b672      	cpsid	i
 800be4c:	f383 8811 	msr	BASEPRI, r3
 800be50:	f3bf 8f6f 	isb	sy
 800be54:	f3bf 8f4f 	dsb	sy
 800be58:	b662      	cpsie	i
 800be5a:	60fb      	str	r3, [r7, #12]
}
 800be5c:	bf00      	nop
 800be5e:	e7fe      	b.n	800be5e <prvDeleteTCB+0x62>
	}
 800be60:	bf00      	nop
 800be62:	3710      	adds	r7, #16
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}

0800be68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800be68:	b480      	push	{r7}
 800be6a:	b083      	sub	sp, #12
 800be6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be6e:	4b0c      	ldr	r3, [pc, #48]	; (800bea0 <prvResetNextTaskUnblockTime+0x38>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d104      	bne.n	800be82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800be78:	4b0a      	ldr	r3, [pc, #40]	; (800bea4 <prvResetNextTaskUnblockTime+0x3c>)
 800be7a:	f04f 32ff 	mov.w	r2, #4294967295
 800be7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800be80:	e008      	b.n	800be94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be82:	4b07      	ldr	r3, [pc, #28]	; (800bea0 <prvResetNextTaskUnblockTime+0x38>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	68db      	ldr	r3, [r3, #12]
 800be88:	68db      	ldr	r3, [r3, #12]
 800be8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	685b      	ldr	r3, [r3, #4]
 800be90:	4a04      	ldr	r2, [pc, #16]	; (800bea4 <prvResetNextTaskUnblockTime+0x3c>)
 800be92:	6013      	str	r3, [r2, #0]
}
 800be94:	bf00      	nop
 800be96:	370c      	adds	r7, #12
 800be98:	46bd      	mov	sp, r7
 800be9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9e:	4770      	bx	lr
 800bea0:	20001b70 	.word	0x20001b70
 800bea4:	20001bd8 	.word	0x20001bd8

0800bea8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bea8:	b480      	push	{r7}
 800beaa:	b083      	sub	sp, #12
 800beac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800beae:	4b0b      	ldr	r3, [pc, #44]	; (800bedc <xTaskGetSchedulerState+0x34>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d102      	bne.n	800bebc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800beb6:	2301      	movs	r3, #1
 800beb8:	607b      	str	r3, [r7, #4]
 800beba:	e008      	b.n	800bece <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bebc:	4b08      	ldr	r3, [pc, #32]	; (800bee0 <xTaskGetSchedulerState+0x38>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d102      	bne.n	800beca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bec4:	2302      	movs	r3, #2
 800bec6:	607b      	str	r3, [r7, #4]
 800bec8:	e001      	b.n	800bece <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800beca:	2300      	movs	r3, #0
 800becc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bece:	687b      	ldr	r3, [r7, #4]
	}
 800bed0:	4618      	mov	r0, r3
 800bed2:	370c      	adds	r7, #12
 800bed4:	46bd      	mov	sp, r7
 800bed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beda:	4770      	bx	lr
 800bedc:	20001bc4 	.word	0x20001bc4
 800bee0:	20001be0 	.word	0x20001be0

0800bee4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b086      	sub	sp, #24
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bef0:	2300      	movs	r3, #0
 800bef2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d05a      	beq.n	800bfb0 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800befa:	4b30      	ldr	r3, [pc, #192]	; (800bfbc <xTaskPriorityDisinherit+0xd8>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	693a      	ldr	r2, [r7, #16]
 800bf00:	429a      	cmp	r2, r3
 800bf02:	d00c      	beq.n	800bf1e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800bf04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf08:	b672      	cpsid	i
 800bf0a:	f383 8811 	msr	BASEPRI, r3
 800bf0e:	f3bf 8f6f 	isb	sy
 800bf12:	f3bf 8f4f 	dsb	sy
 800bf16:	b662      	cpsie	i
 800bf18:	60fb      	str	r3, [r7, #12]
}
 800bf1a:	bf00      	nop
 800bf1c:	e7fe      	b.n	800bf1c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d10c      	bne.n	800bf40 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800bf26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf2a:	b672      	cpsid	i
 800bf2c:	f383 8811 	msr	BASEPRI, r3
 800bf30:	f3bf 8f6f 	isb	sy
 800bf34:	f3bf 8f4f 	dsb	sy
 800bf38:	b662      	cpsie	i
 800bf3a:	60bb      	str	r3, [r7, #8]
}
 800bf3c:	bf00      	nop
 800bf3e:	e7fe      	b.n	800bf3e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800bf40:	693b      	ldr	r3, [r7, #16]
 800bf42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf44:	1e5a      	subs	r2, r3, #1
 800bf46:	693b      	ldr	r3, [r7, #16]
 800bf48:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf4e:	693b      	ldr	r3, [r7, #16]
 800bf50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf52:	429a      	cmp	r2, r3
 800bf54:	d02c      	beq.n	800bfb0 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bf56:	693b      	ldr	r3, [r7, #16]
 800bf58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d128      	bne.n	800bfb0 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	3304      	adds	r3, #4
 800bf62:	4618      	mov	r0, r3
 800bf64:	f7fe fb78 	bl	800a658 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bf68:	693b      	ldr	r3, [r7, #16]
 800bf6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bf6c:	693b      	ldr	r3, [r7, #16]
 800bf6e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf74:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bf7c:	693b      	ldr	r3, [r7, #16]
 800bf7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf80:	4b0f      	ldr	r3, [pc, #60]	; (800bfc0 <xTaskPriorityDisinherit+0xdc>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d903      	bls.n	800bf90 <xTaskPriorityDisinherit+0xac>
 800bf88:	693b      	ldr	r3, [r7, #16]
 800bf8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf8c:	4a0c      	ldr	r2, [pc, #48]	; (800bfc0 <xTaskPriorityDisinherit+0xdc>)
 800bf8e:	6013      	str	r3, [r2, #0]
 800bf90:	693b      	ldr	r3, [r7, #16]
 800bf92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf94:	4613      	mov	r3, r2
 800bf96:	009b      	lsls	r3, r3, #2
 800bf98:	4413      	add	r3, r2
 800bf9a:	009b      	lsls	r3, r3, #2
 800bf9c:	4a09      	ldr	r2, [pc, #36]	; (800bfc4 <xTaskPriorityDisinherit+0xe0>)
 800bf9e:	441a      	add	r2, r3
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	3304      	adds	r3, #4
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	4610      	mov	r0, r2
 800bfa8:	f7fe faf9 	bl	800a59e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bfac:	2301      	movs	r3, #1
 800bfae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bfb0:	697b      	ldr	r3, [r7, #20]
	}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3718      	adds	r7, #24
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}
 800bfba:	bf00      	nop
 800bfbc:	200016e4 	.word	0x200016e4
 800bfc0:	20001bc0 	.word	0x20001bc0
 800bfc4:	200016e8 	.word	0x200016e8

0800bfc8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b084      	sub	sp, #16
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
 800bfd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bfd2:	4b21      	ldr	r3, [pc, #132]	; (800c058 <prvAddCurrentTaskToDelayedList+0x90>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bfd8:	4b20      	ldr	r3, [pc, #128]	; (800c05c <prvAddCurrentTaskToDelayedList+0x94>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	3304      	adds	r3, #4
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f7fe fb3a 	bl	800a658 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfea:	d10a      	bne.n	800c002 <prvAddCurrentTaskToDelayedList+0x3a>
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d007      	beq.n	800c002 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bff2:	4b1a      	ldr	r3, [pc, #104]	; (800c05c <prvAddCurrentTaskToDelayedList+0x94>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	3304      	adds	r3, #4
 800bff8:	4619      	mov	r1, r3
 800bffa:	4819      	ldr	r0, [pc, #100]	; (800c060 <prvAddCurrentTaskToDelayedList+0x98>)
 800bffc:	f7fe facf 	bl	800a59e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c000:	e026      	b.n	800c050 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c002:	68fa      	ldr	r2, [r7, #12]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	4413      	add	r3, r2
 800c008:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c00a:	4b14      	ldr	r3, [pc, #80]	; (800c05c <prvAddCurrentTaskToDelayedList+0x94>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	68ba      	ldr	r2, [r7, #8]
 800c010:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c012:	68ba      	ldr	r2, [r7, #8]
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	429a      	cmp	r2, r3
 800c018:	d209      	bcs.n	800c02e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c01a:	4b12      	ldr	r3, [pc, #72]	; (800c064 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c01c:	681a      	ldr	r2, [r3, #0]
 800c01e:	4b0f      	ldr	r3, [pc, #60]	; (800c05c <prvAddCurrentTaskToDelayedList+0x94>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	3304      	adds	r3, #4
 800c024:	4619      	mov	r1, r3
 800c026:	4610      	mov	r0, r2
 800c028:	f7fe fadd 	bl	800a5e6 <vListInsert>
}
 800c02c:	e010      	b.n	800c050 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c02e:	4b0e      	ldr	r3, [pc, #56]	; (800c068 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c030:	681a      	ldr	r2, [r3, #0]
 800c032:	4b0a      	ldr	r3, [pc, #40]	; (800c05c <prvAddCurrentTaskToDelayedList+0x94>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	3304      	adds	r3, #4
 800c038:	4619      	mov	r1, r3
 800c03a:	4610      	mov	r0, r2
 800c03c:	f7fe fad3 	bl	800a5e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c040:	4b0a      	ldr	r3, [pc, #40]	; (800c06c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	68ba      	ldr	r2, [r7, #8]
 800c046:	429a      	cmp	r2, r3
 800c048:	d202      	bcs.n	800c050 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c04a:	4a08      	ldr	r2, [pc, #32]	; (800c06c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	6013      	str	r3, [r2, #0]
}
 800c050:	bf00      	nop
 800c052:	3710      	adds	r7, #16
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}
 800c058:	20001bbc 	.word	0x20001bbc
 800c05c:	200016e4 	.word	0x200016e4
 800c060:	20001ba4 	.word	0x20001ba4
 800c064:	20001b74 	.word	0x20001b74
 800c068:	20001b70 	.word	0x20001b70
 800c06c:	20001bd8 	.word	0x20001bd8

0800c070 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b08a      	sub	sp, #40	; 0x28
 800c074:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c076:	2300      	movs	r3, #0
 800c078:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c07a:	f000 fbb5 	bl	800c7e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c07e:	4b1d      	ldr	r3, [pc, #116]	; (800c0f4 <xTimerCreateTimerTask+0x84>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d021      	beq.n	800c0ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c086:	2300      	movs	r3, #0
 800c088:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c08a:	2300      	movs	r3, #0
 800c08c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c08e:	1d3a      	adds	r2, r7, #4
 800c090:	f107 0108 	add.w	r1, r7, #8
 800c094:	f107 030c 	add.w	r3, r7, #12
 800c098:	4618      	mov	r0, r3
 800c09a:	f7fe fa39 	bl	800a510 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c09e:	6879      	ldr	r1, [r7, #4]
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	68fa      	ldr	r2, [r7, #12]
 800c0a4:	9202      	str	r2, [sp, #8]
 800c0a6:	9301      	str	r3, [sp, #4]
 800c0a8:	2302      	movs	r3, #2
 800c0aa:	9300      	str	r3, [sp, #0]
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	460a      	mov	r2, r1
 800c0b0:	4911      	ldr	r1, [pc, #68]	; (800c0f8 <xTimerCreateTimerTask+0x88>)
 800c0b2:	4812      	ldr	r0, [pc, #72]	; (800c0fc <xTimerCreateTimerTask+0x8c>)
 800c0b4:	f7ff f846 	bl	800b144 <xTaskCreateStatic>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	4a11      	ldr	r2, [pc, #68]	; (800c100 <xTimerCreateTimerTask+0x90>)
 800c0bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c0be:	4b10      	ldr	r3, [pc, #64]	; (800c100 <xTimerCreateTimerTask+0x90>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d001      	beq.n	800c0ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c0ca:	697b      	ldr	r3, [r7, #20]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d10c      	bne.n	800c0ea <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800c0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d4:	b672      	cpsid	i
 800c0d6:	f383 8811 	msr	BASEPRI, r3
 800c0da:	f3bf 8f6f 	isb	sy
 800c0de:	f3bf 8f4f 	dsb	sy
 800c0e2:	b662      	cpsie	i
 800c0e4:	613b      	str	r3, [r7, #16]
}
 800c0e6:	bf00      	nop
 800c0e8:	e7fe      	b.n	800c0e8 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800c0ea:	697b      	ldr	r3, [r7, #20]
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3718      	adds	r7, #24
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}
 800c0f4:	20001c14 	.word	0x20001c14
 800c0f8:	0800e060 	.word	0x0800e060
 800c0fc:	0800c381 	.word	0x0800c381
 800c100:	20001c18 	.word	0x20001c18

0800c104 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800c104:	b580      	push	{r7, lr}
 800c106:	b088      	sub	sp, #32
 800c108:	af02      	add	r7, sp, #8
 800c10a:	60f8      	str	r0, [r7, #12]
 800c10c:	60b9      	str	r1, [r7, #8]
 800c10e:	607a      	str	r2, [r7, #4]
 800c110:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800c112:	202c      	movs	r0, #44	; 0x2c
 800c114:	f000 fe06 	bl	800cd24 <pvPortMalloc>
 800c118:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d00d      	beq.n	800c13c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	2200      	movs	r2, #0
 800c124:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	9301      	str	r3, [sp, #4]
 800c12c:	6a3b      	ldr	r3, [r7, #32]
 800c12e:	9300      	str	r3, [sp, #0]
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	687a      	ldr	r2, [r7, #4]
 800c134:	68b9      	ldr	r1, [r7, #8]
 800c136:	68f8      	ldr	r0, [r7, #12]
 800c138:	f000 f847 	bl	800c1ca <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c13c:	697b      	ldr	r3, [r7, #20]
	}
 800c13e:	4618      	mov	r0, r3
 800c140:	3718      	adds	r7, #24
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}

0800c146 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800c146:	b580      	push	{r7, lr}
 800c148:	b08a      	sub	sp, #40	; 0x28
 800c14a:	af02      	add	r7, sp, #8
 800c14c:	60f8      	str	r0, [r7, #12]
 800c14e:	60b9      	str	r1, [r7, #8]
 800c150:	607a      	str	r2, [r7, #4]
 800c152:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800c154:	232c      	movs	r3, #44	; 0x2c
 800c156:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	2b2c      	cmp	r3, #44	; 0x2c
 800c15c:	d00c      	beq.n	800c178 <xTimerCreateStatic+0x32>
	__asm volatile
 800c15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c162:	b672      	cpsid	i
 800c164:	f383 8811 	msr	BASEPRI, r3
 800c168:	f3bf 8f6f 	isb	sy
 800c16c:	f3bf 8f4f 	dsb	sy
 800c170:	b662      	cpsie	i
 800c172:	61bb      	str	r3, [r7, #24]
}
 800c174:	bf00      	nop
 800c176:	e7fe      	b.n	800c176 <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c178:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800c17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d10c      	bne.n	800c19a <xTimerCreateStatic+0x54>
	__asm volatile
 800c180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c184:	b672      	cpsid	i
 800c186:	f383 8811 	msr	BASEPRI, r3
 800c18a:	f3bf 8f6f 	isb	sy
 800c18e:	f3bf 8f4f 	dsb	sy
 800c192:	b662      	cpsie	i
 800c194:	617b      	str	r3, [r7, #20]
}
 800c196:	bf00      	nop
 800c198:	e7fe      	b.n	800c198 <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800c19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c19c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800c19e:	69fb      	ldr	r3, [r7, #28]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d00d      	beq.n	800c1c0 <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800c1a4:	69fb      	ldr	r3, [r7, #28]
 800c1a6:	2202      	movs	r2, #2
 800c1a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c1ac:	69fb      	ldr	r3, [r7, #28]
 800c1ae:	9301      	str	r3, [sp, #4]
 800c1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b2:	9300      	str	r3, [sp, #0]
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	687a      	ldr	r2, [r7, #4]
 800c1b8:	68b9      	ldr	r1, [r7, #8]
 800c1ba:	68f8      	ldr	r0, [r7, #12]
 800c1bc:	f000 f805 	bl	800c1ca <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c1c0:	69fb      	ldr	r3, [r7, #28]
	}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3720      	adds	r7, #32
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}

0800c1ca <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800c1ca:	b580      	push	{r7, lr}
 800c1cc:	b086      	sub	sp, #24
 800c1ce:	af00      	add	r7, sp, #0
 800c1d0:	60f8      	str	r0, [r7, #12]
 800c1d2:	60b9      	str	r1, [r7, #8]
 800c1d4:	607a      	str	r2, [r7, #4]
 800c1d6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d10c      	bne.n	800c1f8 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 800c1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e2:	b672      	cpsid	i
 800c1e4:	f383 8811 	msr	BASEPRI, r3
 800c1e8:	f3bf 8f6f 	isb	sy
 800c1ec:	f3bf 8f4f 	dsb	sy
 800c1f0:	b662      	cpsie	i
 800c1f2:	617b      	str	r3, [r7, #20]
}
 800c1f4:	bf00      	nop
 800c1f6:	e7fe      	b.n	800c1f6 <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 800c1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d01e      	beq.n	800c23c <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800c1fe:	f000 faf3 	bl	800c7e8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800c202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c204:	68fa      	ldr	r2, [r7, #12]
 800c206:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c20a:	68ba      	ldr	r2, [r7, #8]
 800c20c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800c20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c210:	683a      	ldr	r2, [r7, #0]
 800c212:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c216:	6a3a      	ldr	r2, [r7, #32]
 800c218:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c21c:	3304      	adds	r3, #4
 800c21e:	4618      	mov	r0, r3
 800c220:	f7fe f9b0 	bl	800a584 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d008      	beq.n	800c23c <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800c22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c230:	f043 0304 	orr.w	r3, r3, #4
 800c234:	b2da      	uxtb	r2, r3
 800c236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c238:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800c23c:	bf00      	nop
 800c23e:	3718      	adds	r7, #24
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}

0800c244 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b08a      	sub	sp, #40	; 0x28
 800c248:	af00      	add	r7, sp, #0
 800c24a:	60f8      	str	r0, [r7, #12]
 800c24c:	60b9      	str	r1, [r7, #8]
 800c24e:	607a      	str	r2, [r7, #4]
 800c250:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c252:	2300      	movs	r3, #0
 800c254:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d10c      	bne.n	800c276 <xTimerGenericCommand+0x32>
	__asm volatile
 800c25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c260:	b672      	cpsid	i
 800c262:	f383 8811 	msr	BASEPRI, r3
 800c266:	f3bf 8f6f 	isb	sy
 800c26a:	f3bf 8f4f 	dsb	sy
 800c26e:	b662      	cpsie	i
 800c270:	623b      	str	r3, [r7, #32]
}
 800c272:	bf00      	nop
 800c274:	e7fe      	b.n	800c274 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c276:	4b1a      	ldr	r3, [pc, #104]	; (800c2e0 <xTimerGenericCommand+0x9c>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d02a      	beq.n	800c2d4 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	2b05      	cmp	r3, #5
 800c28e:	dc18      	bgt.n	800c2c2 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c290:	f7ff fe0a 	bl	800bea8 <xTaskGetSchedulerState>
 800c294:	4603      	mov	r3, r0
 800c296:	2b02      	cmp	r3, #2
 800c298:	d109      	bne.n	800c2ae <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c29a:	4b11      	ldr	r3, [pc, #68]	; (800c2e0 <xTimerGenericCommand+0x9c>)
 800c29c:	6818      	ldr	r0, [r3, #0]
 800c29e:	f107 0110 	add.w	r1, r7, #16
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2a6:	f7fe fb53 	bl	800a950 <xQueueGenericSend>
 800c2aa:	6278      	str	r0, [r7, #36]	; 0x24
 800c2ac:	e012      	b.n	800c2d4 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c2ae:	4b0c      	ldr	r3, [pc, #48]	; (800c2e0 <xTimerGenericCommand+0x9c>)
 800c2b0:	6818      	ldr	r0, [r3, #0]
 800c2b2:	f107 0110 	add.w	r1, r7, #16
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	f7fe fb49 	bl	800a950 <xQueueGenericSend>
 800c2be:	6278      	str	r0, [r7, #36]	; 0x24
 800c2c0:	e008      	b.n	800c2d4 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c2c2:	4b07      	ldr	r3, [pc, #28]	; (800c2e0 <xTimerGenericCommand+0x9c>)
 800c2c4:	6818      	ldr	r0, [r3, #0]
 800c2c6:	f107 0110 	add.w	r1, r7, #16
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	683a      	ldr	r2, [r7, #0]
 800c2ce:	f7fe fc45 	bl	800ab5c <xQueueGenericSendFromISR>
 800c2d2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3728      	adds	r7, #40	; 0x28
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}
 800c2de:	bf00      	nop
 800c2e0:	20001c14 	.word	0x20001c14

0800c2e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b088      	sub	sp, #32
 800c2e8:	af02      	add	r7, sp, #8
 800c2ea:	6078      	str	r0, [r7, #4]
 800c2ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2ee:	4b23      	ldr	r3, [pc, #140]	; (800c37c <prvProcessExpiredTimer+0x98>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	68db      	ldr	r3, [r3, #12]
 800c2f4:	68db      	ldr	r3, [r3, #12]
 800c2f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	3304      	adds	r3, #4
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f7fe f9ab 	bl	800a658 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c308:	f003 0304 	and.w	r3, r3, #4
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d024      	beq.n	800c35a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	699a      	ldr	r2, [r3, #24]
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	18d1      	adds	r1, r2, r3
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	683a      	ldr	r2, [r7, #0]
 800c31c:	6978      	ldr	r0, [r7, #20]
 800c31e:	f000 f8d3 	bl	800c4c8 <prvInsertTimerInActiveList>
 800c322:	4603      	mov	r3, r0
 800c324:	2b00      	cmp	r3, #0
 800c326:	d021      	beq.n	800c36c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c328:	2300      	movs	r3, #0
 800c32a:	9300      	str	r3, [sp, #0]
 800c32c:	2300      	movs	r3, #0
 800c32e:	687a      	ldr	r2, [r7, #4]
 800c330:	2100      	movs	r1, #0
 800c332:	6978      	ldr	r0, [r7, #20]
 800c334:	f7ff ff86 	bl	800c244 <xTimerGenericCommand>
 800c338:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d115      	bne.n	800c36c <prvProcessExpiredTimer+0x88>
	__asm volatile
 800c340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c344:	b672      	cpsid	i
 800c346:	f383 8811 	msr	BASEPRI, r3
 800c34a:	f3bf 8f6f 	isb	sy
 800c34e:	f3bf 8f4f 	dsb	sy
 800c352:	b662      	cpsie	i
 800c354:	60fb      	str	r3, [r7, #12]
}
 800c356:	bf00      	nop
 800c358:	e7fe      	b.n	800c358 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c360:	f023 0301 	bic.w	r3, r3, #1
 800c364:	b2da      	uxtb	r2, r3
 800c366:	697b      	ldr	r3, [r7, #20]
 800c368:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c36c:	697b      	ldr	r3, [r7, #20]
 800c36e:	6a1b      	ldr	r3, [r3, #32]
 800c370:	6978      	ldr	r0, [r7, #20]
 800c372:	4798      	blx	r3
}
 800c374:	bf00      	nop
 800c376:	3718      	adds	r7, #24
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}
 800c37c:	20001c0c 	.word	0x20001c0c

0800c380 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b084      	sub	sp, #16
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c388:	f107 0308 	add.w	r3, r7, #8
 800c38c:	4618      	mov	r0, r3
 800c38e:	f000 f857 	bl	800c440 <prvGetNextExpireTime>
 800c392:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	4619      	mov	r1, r3
 800c398:	68f8      	ldr	r0, [r7, #12]
 800c39a:	f000 f803 	bl	800c3a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c39e:	f000 f8d5 	bl	800c54c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c3a2:	e7f1      	b.n	800c388 <prvTimerTask+0x8>

0800c3a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b084      	sub	sp, #16
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c3ae:	f7ff f933 	bl	800b618 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c3b2:	f107 0308 	add.w	r3, r7, #8
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f000 f866 	bl	800c488 <prvSampleTimeNow>
 800c3bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d130      	bne.n	800c426 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d10a      	bne.n	800c3e0 <prvProcessTimerOrBlockTask+0x3c>
 800c3ca:	687a      	ldr	r2, [r7, #4]
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	429a      	cmp	r2, r3
 800c3d0:	d806      	bhi.n	800c3e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c3d2:	f7ff f92f 	bl	800b634 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c3d6:	68f9      	ldr	r1, [r7, #12]
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f7ff ff83 	bl	800c2e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c3de:	e024      	b.n	800c42a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d008      	beq.n	800c3f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c3e6:	4b13      	ldr	r3, [pc, #76]	; (800c434 <prvProcessTimerOrBlockTask+0x90>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d101      	bne.n	800c3f4 <prvProcessTimerOrBlockTask+0x50>
 800c3f0:	2301      	movs	r3, #1
 800c3f2:	e000      	b.n	800c3f6 <prvProcessTimerOrBlockTask+0x52>
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c3f8:	4b0f      	ldr	r3, [pc, #60]	; (800c438 <prvProcessTimerOrBlockTask+0x94>)
 800c3fa:	6818      	ldr	r0, [r3, #0]
 800c3fc:	687a      	ldr	r2, [r7, #4]
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	1ad3      	subs	r3, r2, r3
 800c402:	683a      	ldr	r2, [r7, #0]
 800c404:	4619      	mov	r1, r3
 800c406:	f7fe fe69 	bl	800b0dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c40a:	f7ff f913 	bl	800b634 <xTaskResumeAll>
 800c40e:	4603      	mov	r3, r0
 800c410:	2b00      	cmp	r3, #0
 800c412:	d10a      	bne.n	800c42a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c414:	4b09      	ldr	r3, [pc, #36]	; (800c43c <prvProcessTimerOrBlockTask+0x98>)
 800c416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c41a:	601a      	str	r2, [r3, #0]
 800c41c:	f3bf 8f4f 	dsb	sy
 800c420:	f3bf 8f6f 	isb	sy
}
 800c424:	e001      	b.n	800c42a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c426:	f7ff f905 	bl	800b634 <xTaskResumeAll>
}
 800c42a:	bf00      	nop
 800c42c:	3710      	adds	r7, #16
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
 800c432:	bf00      	nop
 800c434:	20001c10 	.word	0x20001c10
 800c438:	20001c14 	.word	0x20001c14
 800c43c:	e000ed04 	.word	0xe000ed04

0800c440 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c440:	b480      	push	{r7}
 800c442:	b085      	sub	sp, #20
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c448:	4b0e      	ldr	r3, [pc, #56]	; (800c484 <prvGetNextExpireTime+0x44>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d101      	bne.n	800c456 <prvGetNextExpireTime+0x16>
 800c452:	2201      	movs	r2, #1
 800c454:	e000      	b.n	800c458 <prvGetNextExpireTime+0x18>
 800c456:	2200      	movs	r2, #0
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d105      	bne.n	800c470 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c464:	4b07      	ldr	r3, [pc, #28]	; (800c484 <prvGetNextExpireTime+0x44>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	68db      	ldr	r3, [r3, #12]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	60fb      	str	r3, [r7, #12]
 800c46e:	e001      	b.n	800c474 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c470:	2300      	movs	r3, #0
 800c472:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c474:	68fb      	ldr	r3, [r7, #12]
}
 800c476:	4618      	mov	r0, r3
 800c478:	3714      	adds	r7, #20
 800c47a:	46bd      	mov	sp, r7
 800c47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c480:	4770      	bx	lr
 800c482:	bf00      	nop
 800c484:	20001c0c 	.word	0x20001c0c

0800c488 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b084      	sub	sp, #16
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c490:	f7ff f970 	bl	800b774 <xTaskGetTickCount>
 800c494:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c496:	4b0b      	ldr	r3, [pc, #44]	; (800c4c4 <prvSampleTimeNow+0x3c>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	68fa      	ldr	r2, [r7, #12]
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d205      	bcs.n	800c4ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c4a0:	f000 f93c 	bl	800c71c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	601a      	str	r2, [r3, #0]
 800c4aa:	e002      	b.n	800c4b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c4b2:	4a04      	ldr	r2, [pc, #16]	; (800c4c4 <prvSampleTimeNow+0x3c>)
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
}
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	3710      	adds	r7, #16
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}
 800c4c2:	bf00      	nop
 800c4c4:	20001c1c 	.word	0x20001c1c

0800c4c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b086      	sub	sp, #24
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	60f8      	str	r0, [r7, #12]
 800c4d0:	60b9      	str	r1, [r7, #8]
 800c4d2:	607a      	str	r2, [r7, #4]
 800c4d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	68ba      	ldr	r2, [r7, #8]
 800c4de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	68fa      	ldr	r2, [r7, #12]
 800c4e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c4e6:	68ba      	ldr	r2, [r7, #8]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d812      	bhi.n	800c514 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4ee:	687a      	ldr	r2, [r7, #4]
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	1ad2      	subs	r2, r2, r3
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	699b      	ldr	r3, [r3, #24]
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	d302      	bcc.n	800c502 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	617b      	str	r3, [r7, #20]
 800c500:	e01b      	b.n	800c53a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c502:	4b10      	ldr	r3, [pc, #64]	; (800c544 <prvInsertTimerInActiveList+0x7c>)
 800c504:	681a      	ldr	r2, [r3, #0]
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	3304      	adds	r3, #4
 800c50a:	4619      	mov	r1, r3
 800c50c:	4610      	mov	r0, r2
 800c50e:	f7fe f86a 	bl	800a5e6 <vListInsert>
 800c512:	e012      	b.n	800c53a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c514:	687a      	ldr	r2, [r7, #4]
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	429a      	cmp	r2, r3
 800c51a:	d206      	bcs.n	800c52a <prvInsertTimerInActiveList+0x62>
 800c51c:	68ba      	ldr	r2, [r7, #8]
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	429a      	cmp	r2, r3
 800c522:	d302      	bcc.n	800c52a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c524:	2301      	movs	r3, #1
 800c526:	617b      	str	r3, [r7, #20]
 800c528:	e007      	b.n	800c53a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c52a:	4b07      	ldr	r3, [pc, #28]	; (800c548 <prvInsertTimerInActiveList+0x80>)
 800c52c:	681a      	ldr	r2, [r3, #0]
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	3304      	adds	r3, #4
 800c532:	4619      	mov	r1, r3
 800c534:	4610      	mov	r0, r2
 800c536:	f7fe f856 	bl	800a5e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c53a:	697b      	ldr	r3, [r7, #20]
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3718      	adds	r7, #24
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}
 800c544:	20001c10 	.word	0x20001c10
 800c548:	20001c0c 	.word	0x20001c0c

0800c54c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b08e      	sub	sp, #56	; 0x38
 800c550:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c552:	e0d0      	b.n	800c6f6 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2b00      	cmp	r3, #0
 800c558:	da1a      	bge.n	800c590 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c55a:	1d3b      	adds	r3, r7, #4
 800c55c:	3304      	adds	r3, #4
 800c55e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c562:	2b00      	cmp	r3, #0
 800c564:	d10c      	bne.n	800c580 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800c566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c56a:	b672      	cpsid	i
 800c56c:	f383 8811 	msr	BASEPRI, r3
 800c570:	f3bf 8f6f 	isb	sy
 800c574:	f3bf 8f4f 	dsb	sy
 800c578:	b662      	cpsie	i
 800c57a:	61fb      	str	r3, [r7, #28]
}
 800c57c:	bf00      	nop
 800c57e:	e7fe      	b.n	800c57e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c586:	6850      	ldr	r0, [r2, #4]
 800c588:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c58a:	6892      	ldr	r2, [r2, #8]
 800c58c:	4611      	mov	r1, r2
 800c58e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2b00      	cmp	r3, #0
 800c594:	f2c0 80ae 	blt.w	800c6f4 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c59e:	695b      	ldr	r3, [r3, #20]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d004      	beq.n	800c5ae <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a6:	3304      	adds	r3, #4
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f7fe f855 	bl	800a658 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c5ae:	463b      	mov	r3, r7
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f7ff ff69 	bl	800c488 <prvSampleTimeNow>
 800c5b6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2b09      	cmp	r3, #9
 800c5bc:	f200 809b 	bhi.w	800c6f6 <prvProcessReceivedCommands+0x1aa>
 800c5c0:	a201      	add	r2, pc, #4	; (adr r2, 800c5c8 <prvProcessReceivedCommands+0x7c>)
 800c5c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5c6:	bf00      	nop
 800c5c8:	0800c5f1 	.word	0x0800c5f1
 800c5cc:	0800c5f1 	.word	0x0800c5f1
 800c5d0:	0800c5f1 	.word	0x0800c5f1
 800c5d4:	0800c669 	.word	0x0800c669
 800c5d8:	0800c67d 	.word	0x0800c67d
 800c5dc:	0800c6cb 	.word	0x0800c6cb
 800c5e0:	0800c5f1 	.word	0x0800c5f1
 800c5e4:	0800c5f1 	.word	0x0800c5f1
 800c5e8:	0800c669 	.word	0x0800c669
 800c5ec:	0800c67d 	.word	0x0800c67d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5f6:	f043 0301 	orr.w	r3, r3, #1
 800c5fa:	b2da      	uxtb	r2, r3
 800c5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c602:	68ba      	ldr	r2, [r7, #8]
 800c604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c606:	699b      	ldr	r3, [r3, #24]
 800c608:	18d1      	adds	r1, r2, r3
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c60e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c610:	f7ff ff5a 	bl	800c4c8 <prvInsertTimerInActiveList>
 800c614:	4603      	mov	r3, r0
 800c616:	2b00      	cmp	r3, #0
 800c618:	d06d      	beq.n	800c6f6 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c61c:	6a1b      	ldr	r3, [r3, #32]
 800c61e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c620:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c624:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c628:	f003 0304 	and.w	r3, r3, #4
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d062      	beq.n	800c6f6 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c630:	68ba      	ldr	r2, [r7, #8]
 800c632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c634:	699b      	ldr	r3, [r3, #24]
 800c636:	441a      	add	r2, r3
 800c638:	2300      	movs	r3, #0
 800c63a:	9300      	str	r3, [sp, #0]
 800c63c:	2300      	movs	r3, #0
 800c63e:	2100      	movs	r1, #0
 800c640:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c642:	f7ff fdff 	bl	800c244 <xTimerGenericCommand>
 800c646:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c648:	6a3b      	ldr	r3, [r7, #32]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d153      	bne.n	800c6f6 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800c64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c652:	b672      	cpsid	i
 800c654:	f383 8811 	msr	BASEPRI, r3
 800c658:	f3bf 8f6f 	isb	sy
 800c65c:	f3bf 8f4f 	dsb	sy
 800c660:	b662      	cpsie	i
 800c662:	61bb      	str	r3, [r7, #24]
}
 800c664:	bf00      	nop
 800c666:	e7fe      	b.n	800c666 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c66a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c66e:	f023 0301 	bic.w	r3, r3, #1
 800c672:	b2da      	uxtb	r2, r3
 800c674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c676:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c67a:	e03c      	b.n	800c6f6 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c67e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c682:	f043 0301 	orr.w	r3, r3, #1
 800c686:	b2da      	uxtb	r2, r3
 800c688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c68a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c68e:	68ba      	ldr	r2, [r7, #8]
 800c690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c692:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c696:	699b      	ldr	r3, [r3, #24]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d10c      	bne.n	800c6b6 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800c69c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a0:	b672      	cpsid	i
 800c6a2:	f383 8811 	msr	BASEPRI, r3
 800c6a6:	f3bf 8f6f 	isb	sy
 800c6aa:	f3bf 8f4f 	dsb	sy
 800c6ae:	b662      	cpsie	i
 800c6b0:	617b      	str	r3, [r7, #20]
}
 800c6b2:	bf00      	nop
 800c6b4:	e7fe      	b.n	800c6b4 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b8:	699a      	ldr	r2, [r3, #24]
 800c6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6bc:	18d1      	adds	r1, r2, r3
 800c6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6c4:	f7ff ff00 	bl	800c4c8 <prvInsertTimerInActiveList>
					break;
 800c6c8:	e015      	b.n	800c6f6 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c6ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6d0:	f003 0302 	and.w	r3, r3, #2
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d103      	bne.n	800c6e0 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800c6d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6da:	f000 fbed 	bl	800ceb8 <vPortFree>
 800c6de:	e00a      	b.n	800c6f6 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6e6:	f023 0301 	bic.w	r3, r3, #1
 800c6ea:	b2da      	uxtb	r2, r3
 800c6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c6f2:	e000      	b.n	800c6f6 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c6f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c6f6:	4b08      	ldr	r3, [pc, #32]	; (800c718 <prvProcessReceivedCommands+0x1cc>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	1d39      	adds	r1, r7, #4
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	4618      	mov	r0, r3
 800c700:	f7fe facc 	bl	800ac9c <xQueueReceive>
 800c704:	4603      	mov	r3, r0
 800c706:	2b00      	cmp	r3, #0
 800c708:	f47f af24 	bne.w	800c554 <prvProcessReceivedCommands+0x8>
	}
}
 800c70c:	bf00      	nop
 800c70e:	bf00      	nop
 800c710:	3730      	adds	r7, #48	; 0x30
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}
 800c716:	bf00      	nop
 800c718:	20001c14 	.word	0x20001c14

0800c71c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b088      	sub	sp, #32
 800c720:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c722:	e04a      	b.n	800c7ba <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c724:	4b2e      	ldr	r3, [pc, #184]	; (800c7e0 <prvSwitchTimerLists+0xc4>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	68db      	ldr	r3, [r3, #12]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c72e:	4b2c      	ldr	r3, [pc, #176]	; (800c7e0 <prvSwitchTimerLists+0xc4>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	68db      	ldr	r3, [r3, #12]
 800c734:	68db      	ldr	r3, [r3, #12]
 800c736:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	3304      	adds	r3, #4
 800c73c:	4618      	mov	r0, r3
 800c73e:	f7fd ff8b 	bl	800a658 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	6a1b      	ldr	r3, [r3, #32]
 800c746:	68f8      	ldr	r0, [r7, #12]
 800c748:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c750:	f003 0304 	and.w	r3, r3, #4
 800c754:	2b00      	cmp	r3, #0
 800c756:	d030      	beq.n	800c7ba <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	699b      	ldr	r3, [r3, #24]
 800c75c:	693a      	ldr	r2, [r7, #16]
 800c75e:	4413      	add	r3, r2
 800c760:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c762:	68ba      	ldr	r2, [r7, #8]
 800c764:	693b      	ldr	r3, [r7, #16]
 800c766:	429a      	cmp	r2, r3
 800c768:	d90e      	bls.n	800c788 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	68ba      	ldr	r2, [r7, #8]
 800c76e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	68fa      	ldr	r2, [r7, #12]
 800c774:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c776:	4b1a      	ldr	r3, [pc, #104]	; (800c7e0 <prvSwitchTimerLists+0xc4>)
 800c778:	681a      	ldr	r2, [r3, #0]
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	3304      	adds	r3, #4
 800c77e:	4619      	mov	r1, r3
 800c780:	4610      	mov	r0, r2
 800c782:	f7fd ff30 	bl	800a5e6 <vListInsert>
 800c786:	e018      	b.n	800c7ba <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c788:	2300      	movs	r3, #0
 800c78a:	9300      	str	r3, [sp, #0]
 800c78c:	2300      	movs	r3, #0
 800c78e:	693a      	ldr	r2, [r7, #16]
 800c790:	2100      	movs	r1, #0
 800c792:	68f8      	ldr	r0, [r7, #12]
 800c794:	f7ff fd56 	bl	800c244 <xTimerGenericCommand>
 800c798:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d10c      	bne.n	800c7ba <prvSwitchTimerLists+0x9e>
	__asm volatile
 800c7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a4:	b672      	cpsid	i
 800c7a6:	f383 8811 	msr	BASEPRI, r3
 800c7aa:	f3bf 8f6f 	isb	sy
 800c7ae:	f3bf 8f4f 	dsb	sy
 800c7b2:	b662      	cpsie	i
 800c7b4:	603b      	str	r3, [r7, #0]
}
 800c7b6:	bf00      	nop
 800c7b8:	e7fe      	b.n	800c7b8 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c7ba:	4b09      	ldr	r3, [pc, #36]	; (800c7e0 <prvSwitchTimerLists+0xc4>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d1af      	bne.n	800c724 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c7c4:	4b06      	ldr	r3, [pc, #24]	; (800c7e0 <prvSwitchTimerLists+0xc4>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c7ca:	4b06      	ldr	r3, [pc, #24]	; (800c7e4 <prvSwitchTimerLists+0xc8>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	4a04      	ldr	r2, [pc, #16]	; (800c7e0 <prvSwitchTimerLists+0xc4>)
 800c7d0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c7d2:	4a04      	ldr	r2, [pc, #16]	; (800c7e4 <prvSwitchTimerLists+0xc8>)
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	6013      	str	r3, [r2, #0]
}
 800c7d8:	bf00      	nop
 800c7da:	3718      	adds	r7, #24
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd80      	pop	{r7, pc}
 800c7e0:	20001c0c 	.word	0x20001c0c
 800c7e4:	20001c10 	.word	0x20001c10

0800c7e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b082      	sub	sp, #8
 800c7ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c7ee:	f000 f96d 	bl	800cacc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c7f2:	4b15      	ldr	r3, [pc, #84]	; (800c848 <prvCheckForValidListAndQueue+0x60>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d120      	bne.n	800c83c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c7fa:	4814      	ldr	r0, [pc, #80]	; (800c84c <prvCheckForValidListAndQueue+0x64>)
 800c7fc:	f7fd fea2 	bl	800a544 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c800:	4813      	ldr	r0, [pc, #76]	; (800c850 <prvCheckForValidListAndQueue+0x68>)
 800c802:	f7fd fe9f 	bl	800a544 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c806:	4b13      	ldr	r3, [pc, #76]	; (800c854 <prvCheckForValidListAndQueue+0x6c>)
 800c808:	4a10      	ldr	r2, [pc, #64]	; (800c84c <prvCheckForValidListAndQueue+0x64>)
 800c80a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c80c:	4b12      	ldr	r3, [pc, #72]	; (800c858 <prvCheckForValidListAndQueue+0x70>)
 800c80e:	4a10      	ldr	r2, [pc, #64]	; (800c850 <prvCheckForValidListAndQueue+0x68>)
 800c810:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c812:	2300      	movs	r3, #0
 800c814:	9300      	str	r3, [sp, #0]
 800c816:	4b11      	ldr	r3, [pc, #68]	; (800c85c <prvCheckForValidListAndQueue+0x74>)
 800c818:	4a11      	ldr	r2, [pc, #68]	; (800c860 <prvCheckForValidListAndQueue+0x78>)
 800c81a:	2110      	movs	r1, #16
 800c81c:	200a      	movs	r0, #10
 800c81e:	f7fd ffaf 	bl	800a780 <xQueueGenericCreateStatic>
 800c822:	4603      	mov	r3, r0
 800c824:	4a08      	ldr	r2, [pc, #32]	; (800c848 <prvCheckForValidListAndQueue+0x60>)
 800c826:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c828:	4b07      	ldr	r3, [pc, #28]	; (800c848 <prvCheckForValidListAndQueue+0x60>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d005      	beq.n	800c83c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c830:	4b05      	ldr	r3, [pc, #20]	; (800c848 <prvCheckForValidListAndQueue+0x60>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	490b      	ldr	r1, [pc, #44]	; (800c864 <prvCheckForValidListAndQueue+0x7c>)
 800c836:	4618      	mov	r0, r3
 800c838:	f7fe fc26 	bl	800b088 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c83c:	f000 f97a 	bl	800cb34 <vPortExitCritical>
}
 800c840:	bf00      	nop
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}
 800c846:	bf00      	nop
 800c848:	20001c14 	.word	0x20001c14
 800c84c:	20001be4 	.word	0x20001be4
 800c850:	20001bf8 	.word	0x20001bf8
 800c854:	20001c0c 	.word	0x20001c0c
 800c858:	20001c10 	.word	0x20001c10
 800c85c:	20001cc0 	.word	0x20001cc0
 800c860:	20001c20 	.word	0x20001c20
 800c864:	0800e068 	.word	0x0800e068

0800c868 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b086      	sub	sp, #24
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d10c      	bne.n	800c894 <pvTimerGetTimerID+0x2c>
	__asm volatile
 800c87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c87e:	b672      	cpsid	i
 800c880:	f383 8811 	msr	BASEPRI, r3
 800c884:	f3bf 8f6f 	isb	sy
 800c888:	f3bf 8f4f 	dsb	sy
 800c88c:	b662      	cpsie	i
 800c88e:	60fb      	str	r3, [r7, #12]
}
 800c890:	bf00      	nop
 800c892:	e7fe      	b.n	800c892 <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 800c894:	f000 f91a 	bl	800cacc <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	69db      	ldr	r3, [r3, #28]
 800c89c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800c89e:	f000 f949 	bl	800cb34 <vPortExitCritical>

	return pvReturn;
 800c8a2:	693b      	ldr	r3, [r7, #16]
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3718      	adds	r7, #24
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}

0800c8ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	b085      	sub	sp, #20
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	60f8      	str	r0, [r7, #12]
 800c8b4:	60b9      	str	r1, [r7, #8]
 800c8b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	3b04      	subs	r3, #4
 800c8bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c8c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	3b04      	subs	r3, #4
 800c8ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c8cc:	68bb      	ldr	r3, [r7, #8]
 800c8ce:	f023 0201 	bic.w	r2, r3, #1
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	3b04      	subs	r3, #4
 800c8da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c8dc:	4a0c      	ldr	r2, [pc, #48]	; (800c910 <pxPortInitialiseStack+0x64>)
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	3b14      	subs	r3, #20
 800c8e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c8e8:	687a      	ldr	r2, [r7, #4]
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	3b04      	subs	r3, #4
 800c8f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	f06f 0202 	mvn.w	r2, #2
 800c8fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	3b20      	subs	r3, #32
 800c900:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c902:	68fb      	ldr	r3, [r7, #12]
}
 800c904:	4618      	mov	r0, r3
 800c906:	3714      	adds	r7, #20
 800c908:	46bd      	mov	sp, r7
 800c90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90e:	4770      	bx	lr
 800c910:	0800c915 	.word	0x0800c915

0800c914 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c914:	b480      	push	{r7}
 800c916:	b085      	sub	sp, #20
 800c918:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c91a:	2300      	movs	r3, #0
 800c91c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c91e:	4b14      	ldr	r3, [pc, #80]	; (800c970 <prvTaskExitError+0x5c>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c926:	d00c      	beq.n	800c942 <prvTaskExitError+0x2e>
	__asm volatile
 800c928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c92c:	b672      	cpsid	i
 800c92e:	f383 8811 	msr	BASEPRI, r3
 800c932:	f3bf 8f6f 	isb	sy
 800c936:	f3bf 8f4f 	dsb	sy
 800c93a:	b662      	cpsie	i
 800c93c:	60fb      	str	r3, [r7, #12]
}
 800c93e:	bf00      	nop
 800c940:	e7fe      	b.n	800c940 <prvTaskExitError+0x2c>
	__asm volatile
 800c942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c946:	b672      	cpsid	i
 800c948:	f383 8811 	msr	BASEPRI, r3
 800c94c:	f3bf 8f6f 	isb	sy
 800c950:	f3bf 8f4f 	dsb	sy
 800c954:	b662      	cpsie	i
 800c956:	60bb      	str	r3, [r7, #8]
}
 800c958:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c95a:	bf00      	nop
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d0fc      	beq.n	800c95c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c962:	bf00      	nop
 800c964:	bf00      	nop
 800c966:	3714      	adds	r7, #20
 800c968:	46bd      	mov	sp, r7
 800c96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96e:	4770      	bx	lr
 800c970:	20000098 	.word	0x20000098
	...

0800c980 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c980:	4b07      	ldr	r3, [pc, #28]	; (800c9a0 <pxCurrentTCBConst2>)
 800c982:	6819      	ldr	r1, [r3, #0]
 800c984:	6808      	ldr	r0, [r1, #0]
 800c986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c98a:	f380 8809 	msr	PSP, r0
 800c98e:	f3bf 8f6f 	isb	sy
 800c992:	f04f 0000 	mov.w	r0, #0
 800c996:	f380 8811 	msr	BASEPRI, r0
 800c99a:	4770      	bx	lr
 800c99c:	f3af 8000 	nop.w

0800c9a0 <pxCurrentTCBConst2>:
 800c9a0:	200016e4 	.word	0x200016e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c9a4:	bf00      	nop
 800c9a6:	bf00      	nop

0800c9a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c9a8:	4808      	ldr	r0, [pc, #32]	; (800c9cc <prvPortStartFirstTask+0x24>)
 800c9aa:	6800      	ldr	r0, [r0, #0]
 800c9ac:	6800      	ldr	r0, [r0, #0]
 800c9ae:	f380 8808 	msr	MSP, r0
 800c9b2:	f04f 0000 	mov.w	r0, #0
 800c9b6:	f380 8814 	msr	CONTROL, r0
 800c9ba:	b662      	cpsie	i
 800c9bc:	b661      	cpsie	f
 800c9be:	f3bf 8f4f 	dsb	sy
 800c9c2:	f3bf 8f6f 	isb	sy
 800c9c6:	df00      	svc	0
 800c9c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c9ca:	bf00      	nop
 800c9cc:	e000ed08 	.word	0xe000ed08

0800c9d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b084      	sub	sp, #16
 800c9d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c9d6:	4b37      	ldr	r3, [pc, #220]	; (800cab4 <xPortStartScheduler+0xe4>)
 800c9d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	781b      	ldrb	r3, [r3, #0]
 800c9de:	b2db      	uxtb	r3, r3
 800c9e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	22ff      	movs	r2, #255	; 0xff
 800c9e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	781b      	ldrb	r3, [r3, #0]
 800c9ec:	b2db      	uxtb	r3, r3
 800c9ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c9f0:	78fb      	ldrb	r3, [r7, #3]
 800c9f2:	b2db      	uxtb	r3, r3
 800c9f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c9f8:	b2da      	uxtb	r2, r3
 800c9fa:	4b2f      	ldr	r3, [pc, #188]	; (800cab8 <xPortStartScheduler+0xe8>)
 800c9fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c9fe:	4b2f      	ldr	r3, [pc, #188]	; (800cabc <xPortStartScheduler+0xec>)
 800ca00:	2207      	movs	r2, #7
 800ca02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ca04:	e009      	b.n	800ca1a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800ca06:	4b2d      	ldr	r3, [pc, #180]	; (800cabc <xPortStartScheduler+0xec>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	3b01      	subs	r3, #1
 800ca0c:	4a2b      	ldr	r2, [pc, #172]	; (800cabc <xPortStartScheduler+0xec>)
 800ca0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ca10:	78fb      	ldrb	r3, [r7, #3]
 800ca12:	b2db      	uxtb	r3, r3
 800ca14:	005b      	lsls	r3, r3, #1
 800ca16:	b2db      	uxtb	r3, r3
 800ca18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ca1a:	78fb      	ldrb	r3, [r7, #3]
 800ca1c:	b2db      	uxtb	r3, r3
 800ca1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca22:	2b80      	cmp	r3, #128	; 0x80
 800ca24:	d0ef      	beq.n	800ca06 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ca26:	4b25      	ldr	r3, [pc, #148]	; (800cabc <xPortStartScheduler+0xec>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	f1c3 0307 	rsb	r3, r3, #7
 800ca2e:	2b04      	cmp	r3, #4
 800ca30:	d00c      	beq.n	800ca4c <xPortStartScheduler+0x7c>
	__asm volatile
 800ca32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca36:	b672      	cpsid	i
 800ca38:	f383 8811 	msr	BASEPRI, r3
 800ca3c:	f3bf 8f6f 	isb	sy
 800ca40:	f3bf 8f4f 	dsb	sy
 800ca44:	b662      	cpsie	i
 800ca46:	60bb      	str	r3, [r7, #8]
}
 800ca48:	bf00      	nop
 800ca4a:	e7fe      	b.n	800ca4a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ca4c:	4b1b      	ldr	r3, [pc, #108]	; (800cabc <xPortStartScheduler+0xec>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	021b      	lsls	r3, r3, #8
 800ca52:	4a1a      	ldr	r2, [pc, #104]	; (800cabc <xPortStartScheduler+0xec>)
 800ca54:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ca56:	4b19      	ldr	r3, [pc, #100]	; (800cabc <xPortStartScheduler+0xec>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ca5e:	4a17      	ldr	r2, [pc, #92]	; (800cabc <xPortStartScheduler+0xec>)
 800ca60:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	b2da      	uxtb	r2, r3
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ca6a:	4b15      	ldr	r3, [pc, #84]	; (800cac0 <xPortStartScheduler+0xf0>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	4a14      	ldr	r2, [pc, #80]	; (800cac0 <xPortStartScheduler+0xf0>)
 800ca70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ca74:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ca76:	4b12      	ldr	r3, [pc, #72]	; (800cac0 <xPortStartScheduler+0xf0>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	4a11      	ldr	r2, [pc, #68]	; (800cac0 <xPortStartScheduler+0xf0>)
 800ca7c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ca80:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ca82:	f000 f8dd 	bl	800cc40 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ca86:	4b0f      	ldr	r3, [pc, #60]	; (800cac4 <xPortStartScheduler+0xf4>)
 800ca88:	2200      	movs	r2, #0
 800ca8a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ca8c:	f000 f8fc 	bl	800cc88 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ca90:	4b0d      	ldr	r3, [pc, #52]	; (800cac8 <xPortStartScheduler+0xf8>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	4a0c      	ldr	r2, [pc, #48]	; (800cac8 <xPortStartScheduler+0xf8>)
 800ca96:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ca9a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ca9c:	f7ff ff84 	bl	800c9a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800caa0:	f7fe ff46 	bl	800b930 <vTaskSwitchContext>
	prvTaskExitError();
 800caa4:	f7ff ff36 	bl	800c914 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800caa8:	2300      	movs	r3, #0
}
 800caaa:	4618      	mov	r0, r3
 800caac:	3710      	adds	r7, #16
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}
 800cab2:	bf00      	nop
 800cab4:	e000e400 	.word	0xe000e400
 800cab8:	20001d10 	.word	0x20001d10
 800cabc:	20001d14 	.word	0x20001d14
 800cac0:	e000ed20 	.word	0xe000ed20
 800cac4:	20000098 	.word	0x20000098
 800cac8:	e000ef34 	.word	0xe000ef34

0800cacc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cacc:	b480      	push	{r7}
 800cace:	b083      	sub	sp, #12
 800cad0:	af00      	add	r7, sp, #0
	__asm volatile
 800cad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad6:	b672      	cpsid	i
 800cad8:	f383 8811 	msr	BASEPRI, r3
 800cadc:	f3bf 8f6f 	isb	sy
 800cae0:	f3bf 8f4f 	dsb	sy
 800cae4:	b662      	cpsie	i
 800cae6:	607b      	str	r3, [r7, #4]
}
 800cae8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800caea:	4b10      	ldr	r3, [pc, #64]	; (800cb2c <vPortEnterCritical+0x60>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	3301      	adds	r3, #1
 800caf0:	4a0e      	ldr	r2, [pc, #56]	; (800cb2c <vPortEnterCritical+0x60>)
 800caf2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800caf4:	4b0d      	ldr	r3, [pc, #52]	; (800cb2c <vPortEnterCritical+0x60>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	2b01      	cmp	r3, #1
 800cafa:	d111      	bne.n	800cb20 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cafc:	4b0c      	ldr	r3, [pc, #48]	; (800cb30 <vPortEnterCritical+0x64>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	b2db      	uxtb	r3, r3
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d00c      	beq.n	800cb20 <vPortEnterCritical+0x54>
	__asm volatile
 800cb06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb0a:	b672      	cpsid	i
 800cb0c:	f383 8811 	msr	BASEPRI, r3
 800cb10:	f3bf 8f6f 	isb	sy
 800cb14:	f3bf 8f4f 	dsb	sy
 800cb18:	b662      	cpsie	i
 800cb1a:	603b      	str	r3, [r7, #0]
}
 800cb1c:	bf00      	nop
 800cb1e:	e7fe      	b.n	800cb1e <vPortEnterCritical+0x52>
	}
}
 800cb20:	bf00      	nop
 800cb22:	370c      	adds	r7, #12
 800cb24:	46bd      	mov	sp, r7
 800cb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2a:	4770      	bx	lr
 800cb2c:	20000098 	.word	0x20000098
 800cb30:	e000ed04 	.word	0xe000ed04

0800cb34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cb34:	b480      	push	{r7}
 800cb36:	b083      	sub	sp, #12
 800cb38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cb3a:	4b13      	ldr	r3, [pc, #76]	; (800cb88 <vPortExitCritical+0x54>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d10c      	bne.n	800cb5c <vPortExitCritical+0x28>
	__asm volatile
 800cb42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb46:	b672      	cpsid	i
 800cb48:	f383 8811 	msr	BASEPRI, r3
 800cb4c:	f3bf 8f6f 	isb	sy
 800cb50:	f3bf 8f4f 	dsb	sy
 800cb54:	b662      	cpsie	i
 800cb56:	607b      	str	r3, [r7, #4]
}
 800cb58:	bf00      	nop
 800cb5a:	e7fe      	b.n	800cb5a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800cb5c:	4b0a      	ldr	r3, [pc, #40]	; (800cb88 <vPortExitCritical+0x54>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	3b01      	subs	r3, #1
 800cb62:	4a09      	ldr	r2, [pc, #36]	; (800cb88 <vPortExitCritical+0x54>)
 800cb64:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cb66:	4b08      	ldr	r3, [pc, #32]	; (800cb88 <vPortExitCritical+0x54>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d105      	bne.n	800cb7a <vPortExitCritical+0x46>
 800cb6e:	2300      	movs	r3, #0
 800cb70:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	f383 8811 	msr	BASEPRI, r3
}
 800cb78:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cb7a:	bf00      	nop
 800cb7c:	370c      	adds	r7, #12
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb84:	4770      	bx	lr
 800cb86:	bf00      	nop
 800cb88:	20000098 	.word	0x20000098
 800cb8c:	00000000 	.word	0x00000000

0800cb90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cb90:	f3ef 8009 	mrs	r0, PSP
 800cb94:	f3bf 8f6f 	isb	sy
 800cb98:	4b15      	ldr	r3, [pc, #84]	; (800cbf0 <pxCurrentTCBConst>)
 800cb9a:	681a      	ldr	r2, [r3, #0]
 800cb9c:	f01e 0f10 	tst.w	lr, #16
 800cba0:	bf08      	it	eq
 800cba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbaa:	6010      	str	r0, [r2, #0]
 800cbac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cbb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cbb4:	b672      	cpsid	i
 800cbb6:	f380 8811 	msr	BASEPRI, r0
 800cbba:	f3bf 8f4f 	dsb	sy
 800cbbe:	f3bf 8f6f 	isb	sy
 800cbc2:	b662      	cpsie	i
 800cbc4:	f7fe feb4 	bl	800b930 <vTaskSwitchContext>
 800cbc8:	f04f 0000 	mov.w	r0, #0
 800cbcc:	f380 8811 	msr	BASEPRI, r0
 800cbd0:	bc09      	pop	{r0, r3}
 800cbd2:	6819      	ldr	r1, [r3, #0]
 800cbd4:	6808      	ldr	r0, [r1, #0]
 800cbd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbda:	f01e 0f10 	tst.w	lr, #16
 800cbde:	bf08      	it	eq
 800cbe0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cbe4:	f380 8809 	msr	PSP, r0
 800cbe8:	f3bf 8f6f 	isb	sy
 800cbec:	4770      	bx	lr
 800cbee:	bf00      	nop

0800cbf0 <pxCurrentTCBConst>:
 800cbf0:	200016e4 	.word	0x200016e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cbf4:	bf00      	nop
 800cbf6:	bf00      	nop

0800cbf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b082      	sub	sp, #8
 800cbfc:	af00      	add	r7, sp, #0
	__asm volatile
 800cbfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc02:	b672      	cpsid	i
 800cc04:	f383 8811 	msr	BASEPRI, r3
 800cc08:	f3bf 8f6f 	isb	sy
 800cc0c:	f3bf 8f4f 	dsb	sy
 800cc10:	b662      	cpsie	i
 800cc12:	607b      	str	r3, [r7, #4]
}
 800cc14:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cc16:	f7fe fdcf 	bl	800b7b8 <xTaskIncrementTick>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d003      	beq.n	800cc28 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cc20:	4b06      	ldr	r3, [pc, #24]	; (800cc3c <SysTick_Handler+0x44>)
 800cc22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc26:	601a      	str	r2, [r3, #0]
 800cc28:	2300      	movs	r3, #0
 800cc2a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	f383 8811 	msr	BASEPRI, r3
}
 800cc32:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cc34:	bf00      	nop
 800cc36:	3708      	adds	r7, #8
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bd80      	pop	{r7, pc}
 800cc3c:	e000ed04 	.word	0xe000ed04

0800cc40 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cc40:	b480      	push	{r7}
 800cc42:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cc44:	4b0b      	ldr	r3, [pc, #44]	; (800cc74 <vPortSetupTimerInterrupt+0x34>)
 800cc46:	2200      	movs	r2, #0
 800cc48:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cc4a:	4b0b      	ldr	r3, [pc, #44]	; (800cc78 <vPortSetupTimerInterrupt+0x38>)
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cc50:	4b0a      	ldr	r3, [pc, #40]	; (800cc7c <vPortSetupTimerInterrupt+0x3c>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	4a0a      	ldr	r2, [pc, #40]	; (800cc80 <vPortSetupTimerInterrupt+0x40>)
 800cc56:	fba2 2303 	umull	r2, r3, r2, r3
 800cc5a:	099b      	lsrs	r3, r3, #6
 800cc5c:	4a09      	ldr	r2, [pc, #36]	; (800cc84 <vPortSetupTimerInterrupt+0x44>)
 800cc5e:	3b01      	subs	r3, #1
 800cc60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cc62:	4b04      	ldr	r3, [pc, #16]	; (800cc74 <vPortSetupTimerInterrupt+0x34>)
 800cc64:	2207      	movs	r2, #7
 800cc66:	601a      	str	r2, [r3, #0]
}
 800cc68:	bf00      	nop
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc70:	4770      	bx	lr
 800cc72:	bf00      	nop
 800cc74:	e000e010 	.word	0xe000e010
 800cc78:	e000e018 	.word	0xe000e018
 800cc7c:	20000000 	.word	0x20000000
 800cc80:	10624dd3 	.word	0x10624dd3
 800cc84:	e000e014 	.word	0xe000e014

0800cc88 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cc88:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cc98 <vPortEnableVFP+0x10>
 800cc8c:	6801      	ldr	r1, [r0, #0]
 800cc8e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cc92:	6001      	str	r1, [r0, #0]
 800cc94:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cc96:	bf00      	nop
 800cc98:	e000ed88 	.word	0xe000ed88

0800cc9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cc9c:	b480      	push	{r7}
 800cc9e:	b085      	sub	sp, #20
 800cca0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cca2:	f3ef 8305 	mrs	r3, IPSR
 800cca6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	2b0f      	cmp	r3, #15
 800ccac:	d916      	bls.n	800ccdc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ccae:	4a19      	ldr	r2, [pc, #100]	; (800cd14 <vPortValidateInterruptPriority+0x78>)
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	4413      	add	r3, r2
 800ccb4:	781b      	ldrb	r3, [r3, #0]
 800ccb6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ccb8:	4b17      	ldr	r3, [pc, #92]	; (800cd18 <vPortValidateInterruptPriority+0x7c>)
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	7afa      	ldrb	r2, [r7, #11]
 800ccbe:	429a      	cmp	r2, r3
 800ccc0:	d20c      	bcs.n	800ccdc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800ccc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc6:	b672      	cpsid	i
 800ccc8:	f383 8811 	msr	BASEPRI, r3
 800cccc:	f3bf 8f6f 	isb	sy
 800ccd0:	f3bf 8f4f 	dsb	sy
 800ccd4:	b662      	cpsie	i
 800ccd6:	607b      	str	r3, [r7, #4]
}
 800ccd8:	bf00      	nop
 800ccda:	e7fe      	b.n	800ccda <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ccdc:	4b0f      	ldr	r3, [pc, #60]	; (800cd1c <vPortValidateInterruptPriority+0x80>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cce4:	4b0e      	ldr	r3, [pc, #56]	; (800cd20 <vPortValidateInterruptPriority+0x84>)
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	429a      	cmp	r2, r3
 800ccea:	d90c      	bls.n	800cd06 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800ccec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf0:	b672      	cpsid	i
 800ccf2:	f383 8811 	msr	BASEPRI, r3
 800ccf6:	f3bf 8f6f 	isb	sy
 800ccfa:	f3bf 8f4f 	dsb	sy
 800ccfe:	b662      	cpsie	i
 800cd00:	603b      	str	r3, [r7, #0]
}
 800cd02:	bf00      	nop
 800cd04:	e7fe      	b.n	800cd04 <vPortValidateInterruptPriority+0x68>
	}
 800cd06:	bf00      	nop
 800cd08:	3714      	adds	r7, #20
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd10:	4770      	bx	lr
 800cd12:	bf00      	nop
 800cd14:	e000e3f0 	.word	0xe000e3f0
 800cd18:	20001d10 	.word	0x20001d10
 800cd1c:	e000ed0c 	.word	0xe000ed0c
 800cd20:	20001d14 	.word	0x20001d14

0800cd24 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b08a      	sub	sp, #40	; 0x28
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cd30:	f7fe fc72 	bl	800b618 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cd34:	4b5b      	ldr	r3, [pc, #364]	; (800cea4 <pvPortMalloc+0x180>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d101      	bne.n	800cd40 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cd3c:	f000 f91a 	bl	800cf74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cd40:	4b59      	ldr	r3, [pc, #356]	; (800cea8 <pvPortMalloc+0x184>)
 800cd42:	681a      	ldr	r2, [r3, #0]
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	4013      	ands	r3, r2
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	f040 8092 	bne.w	800ce72 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d01f      	beq.n	800cd94 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800cd54:	2208      	movs	r2, #8
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	4413      	add	r3, r2
 800cd5a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	f003 0307 	and.w	r3, r3, #7
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d016      	beq.n	800cd94 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f023 0307 	bic.w	r3, r3, #7
 800cd6c:	3308      	adds	r3, #8
 800cd6e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f003 0307 	and.w	r3, r3, #7
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d00c      	beq.n	800cd94 <pvPortMalloc+0x70>
	__asm volatile
 800cd7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd7e:	b672      	cpsid	i
 800cd80:	f383 8811 	msr	BASEPRI, r3
 800cd84:	f3bf 8f6f 	isb	sy
 800cd88:	f3bf 8f4f 	dsb	sy
 800cd8c:	b662      	cpsie	i
 800cd8e:	617b      	str	r3, [r7, #20]
}
 800cd90:	bf00      	nop
 800cd92:	e7fe      	b.n	800cd92 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d06b      	beq.n	800ce72 <pvPortMalloc+0x14e>
 800cd9a:	4b44      	ldr	r3, [pc, #272]	; (800ceac <pvPortMalloc+0x188>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	687a      	ldr	r2, [r7, #4]
 800cda0:	429a      	cmp	r2, r3
 800cda2:	d866      	bhi.n	800ce72 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cda4:	4b42      	ldr	r3, [pc, #264]	; (800ceb0 <pvPortMalloc+0x18c>)
 800cda6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cda8:	4b41      	ldr	r3, [pc, #260]	; (800ceb0 <pvPortMalloc+0x18c>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cdae:	e004      	b.n	800cdba <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800cdb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cdb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cdba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdbc:	685b      	ldr	r3, [r3, #4]
 800cdbe:	687a      	ldr	r2, [r7, #4]
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	d903      	bls.n	800cdcc <pvPortMalloc+0xa8>
 800cdc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d1f1      	bne.n	800cdb0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cdcc:	4b35      	ldr	r3, [pc, #212]	; (800cea4 <pvPortMalloc+0x180>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	d04d      	beq.n	800ce72 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cdd6:	6a3b      	ldr	r3, [r7, #32]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	2208      	movs	r2, #8
 800cddc:	4413      	add	r3, r2
 800cdde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cde0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cde2:	681a      	ldr	r2, [r3, #0]
 800cde4:	6a3b      	ldr	r3, [r7, #32]
 800cde6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdea:	685a      	ldr	r2, [r3, #4]
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	1ad2      	subs	r2, r2, r3
 800cdf0:	2308      	movs	r3, #8
 800cdf2:	005b      	lsls	r3, r3, #1
 800cdf4:	429a      	cmp	r2, r3
 800cdf6:	d921      	bls.n	800ce3c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cdf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	4413      	add	r3, r2
 800cdfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce00:	69bb      	ldr	r3, [r7, #24]
 800ce02:	f003 0307 	and.w	r3, r3, #7
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d00c      	beq.n	800ce24 <pvPortMalloc+0x100>
	__asm volatile
 800ce0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce0e:	b672      	cpsid	i
 800ce10:	f383 8811 	msr	BASEPRI, r3
 800ce14:	f3bf 8f6f 	isb	sy
 800ce18:	f3bf 8f4f 	dsb	sy
 800ce1c:	b662      	cpsie	i
 800ce1e:	613b      	str	r3, [r7, #16]
}
 800ce20:	bf00      	nop
 800ce22:	e7fe      	b.n	800ce22 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ce24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce26:	685a      	ldr	r2, [r3, #4]
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	1ad2      	subs	r2, r2, r3
 800ce2c:	69bb      	ldr	r3, [r7, #24]
 800ce2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ce30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce32:	687a      	ldr	r2, [r7, #4]
 800ce34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ce36:	69b8      	ldr	r0, [r7, #24]
 800ce38:	f000 f8fe 	bl	800d038 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ce3c:	4b1b      	ldr	r3, [pc, #108]	; (800ceac <pvPortMalloc+0x188>)
 800ce3e:	681a      	ldr	r2, [r3, #0]
 800ce40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	1ad3      	subs	r3, r2, r3
 800ce46:	4a19      	ldr	r2, [pc, #100]	; (800ceac <pvPortMalloc+0x188>)
 800ce48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ce4a:	4b18      	ldr	r3, [pc, #96]	; (800ceac <pvPortMalloc+0x188>)
 800ce4c:	681a      	ldr	r2, [r3, #0]
 800ce4e:	4b19      	ldr	r3, [pc, #100]	; (800ceb4 <pvPortMalloc+0x190>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	429a      	cmp	r2, r3
 800ce54:	d203      	bcs.n	800ce5e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ce56:	4b15      	ldr	r3, [pc, #84]	; (800ceac <pvPortMalloc+0x188>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	4a16      	ldr	r2, [pc, #88]	; (800ceb4 <pvPortMalloc+0x190>)
 800ce5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ce5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce60:	685a      	ldr	r2, [r3, #4]
 800ce62:	4b11      	ldr	r3, [pc, #68]	; (800cea8 <pvPortMalloc+0x184>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	431a      	orrs	r2, r3
 800ce68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ce6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce6e:	2200      	movs	r2, #0
 800ce70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ce72:	f7fe fbdf 	bl	800b634 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce76:	69fb      	ldr	r3, [r7, #28]
 800ce78:	f003 0307 	and.w	r3, r3, #7
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d00c      	beq.n	800ce9a <pvPortMalloc+0x176>
	__asm volatile
 800ce80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce84:	b672      	cpsid	i
 800ce86:	f383 8811 	msr	BASEPRI, r3
 800ce8a:	f3bf 8f6f 	isb	sy
 800ce8e:	f3bf 8f4f 	dsb	sy
 800ce92:	b662      	cpsie	i
 800ce94:	60fb      	str	r3, [r7, #12]
}
 800ce96:	bf00      	nop
 800ce98:	e7fe      	b.n	800ce98 <pvPortMalloc+0x174>
	return pvReturn;
 800ce9a:	69fb      	ldr	r3, [r7, #28]
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3728      	adds	r7, #40	; 0x28
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}
 800cea4:	20005920 	.word	0x20005920
 800cea8:	2000592c 	.word	0x2000592c
 800ceac:	20005924 	.word	0x20005924
 800ceb0:	20005918 	.word	0x20005918
 800ceb4:	20005928 	.word	0x20005928

0800ceb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b086      	sub	sp, #24
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d04c      	beq.n	800cf64 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ceca:	2308      	movs	r3, #8
 800cecc:	425b      	negs	r3, r3
 800cece:	697a      	ldr	r2, [r7, #20]
 800ced0:	4413      	add	r3, r2
 800ced2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ced4:	697b      	ldr	r3, [r7, #20]
 800ced6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ced8:	693b      	ldr	r3, [r7, #16]
 800ceda:	685a      	ldr	r2, [r3, #4]
 800cedc:	4b23      	ldr	r3, [pc, #140]	; (800cf6c <vPortFree+0xb4>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	4013      	ands	r3, r2
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d10c      	bne.n	800cf00 <vPortFree+0x48>
	__asm volatile
 800cee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceea:	b672      	cpsid	i
 800ceec:	f383 8811 	msr	BASEPRI, r3
 800cef0:	f3bf 8f6f 	isb	sy
 800cef4:	f3bf 8f4f 	dsb	sy
 800cef8:	b662      	cpsie	i
 800cefa:	60fb      	str	r3, [r7, #12]
}
 800cefc:	bf00      	nop
 800cefe:	e7fe      	b.n	800cefe <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cf00:	693b      	ldr	r3, [r7, #16]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d00c      	beq.n	800cf22 <vPortFree+0x6a>
	__asm volatile
 800cf08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf0c:	b672      	cpsid	i
 800cf0e:	f383 8811 	msr	BASEPRI, r3
 800cf12:	f3bf 8f6f 	isb	sy
 800cf16:	f3bf 8f4f 	dsb	sy
 800cf1a:	b662      	cpsie	i
 800cf1c:	60bb      	str	r3, [r7, #8]
}
 800cf1e:	bf00      	nop
 800cf20:	e7fe      	b.n	800cf20 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cf22:	693b      	ldr	r3, [r7, #16]
 800cf24:	685a      	ldr	r2, [r3, #4]
 800cf26:	4b11      	ldr	r3, [pc, #68]	; (800cf6c <vPortFree+0xb4>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	4013      	ands	r3, r2
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d019      	beq.n	800cf64 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cf30:	693b      	ldr	r3, [r7, #16]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d115      	bne.n	800cf64 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cf38:	693b      	ldr	r3, [r7, #16]
 800cf3a:	685a      	ldr	r2, [r3, #4]
 800cf3c:	4b0b      	ldr	r3, [pc, #44]	; (800cf6c <vPortFree+0xb4>)
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	43db      	mvns	r3, r3
 800cf42:	401a      	ands	r2, r3
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cf48:	f7fe fb66 	bl	800b618 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cf4c:	693b      	ldr	r3, [r7, #16]
 800cf4e:	685a      	ldr	r2, [r3, #4]
 800cf50:	4b07      	ldr	r3, [pc, #28]	; (800cf70 <vPortFree+0xb8>)
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	4413      	add	r3, r2
 800cf56:	4a06      	ldr	r2, [pc, #24]	; (800cf70 <vPortFree+0xb8>)
 800cf58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cf5a:	6938      	ldr	r0, [r7, #16]
 800cf5c:	f000 f86c 	bl	800d038 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cf60:	f7fe fb68 	bl	800b634 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cf64:	bf00      	nop
 800cf66:	3718      	adds	r7, #24
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}
 800cf6c:	2000592c 	.word	0x2000592c
 800cf70:	20005924 	.word	0x20005924

0800cf74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cf74:	b480      	push	{r7}
 800cf76:	b085      	sub	sp, #20
 800cf78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cf7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cf7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cf80:	4b27      	ldr	r3, [pc, #156]	; (800d020 <prvHeapInit+0xac>)
 800cf82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	f003 0307 	and.w	r3, r3, #7
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d00c      	beq.n	800cfa8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	3307      	adds	r3, #7
 800cf92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	f023 0307 	bic.w	r3, r3, #7
 800cf9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cf9c:	68ba      	ldr	r2, [r7, #8]
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	1ad3      	subs	r3, r2, r3
 800cfa2:	4a1f      	ldr	r2, [pc, #124]	; (800d020 <prvHeapInit+0xac>)
 800cfa4:	4413      	add	r3, r2
 800cfa6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cfac:	4a1d      	ldr	r2, [pc, #116]	; (800d024 <prvHeapInit+0xb0>)
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cfb2:	4b1c      	ldr	r3, [pc, #112]	; (800d024 <prvHeapInit+0xb0>)
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	68ba      	ldr	r2, [r7, #8]
 800cfbc:	4413      	add	r3, r2
 800cfbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cfc0:	2208      	movs	r2, #8
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	1a9b      	subs	r3, r3, r2
 800cfc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	f023 0307 	bic.w	r3, r3, #7
 800cfce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	4a15      	ldr	r2, [pc, #84]	; (800d028 <prvHeapInit+0xb4>)
 800cfd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cfd6:	4b14      	ldr	r3, [pc, #80]	; (800d028 <prvHeapInit+0xb4>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cfde:	4b12      	ldr	r3, [pc, #72]	; (800d028 <prvHeapInit+0xb4>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	68fa      	ldr	r2, [r7, #12]
 800cfee:	1ad2      	subs	r2, r2, r3
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cff4:	4b0c      	ldr	r3, [pc, #48]	; (800d028 <prvHeapInit+0xb4>)
 800cff6:	681a      	ldr	r2, [r3, #0]
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	685b      	ldr	r3, [r3, #4]
 800d000:	4a0a      	ldr	r2, [pc, #40]	; (800d02c <prvHeapInit+0xb8>)
 800d002:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	685b      	ldr	r3, [r3, #4]
 800d008:	4a09      	ldr	r2, [pc, #36]	; (800d030 <prvHeapInit+0xbc>)
 800d00a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d00c:	4b09      	ldr	r3, [pc, #36]	; (800d034 <prvHeapInit+0xc0>)
 800d00e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d012:	601a      	str	r2, [r3, #0]
}
 800d014:	bf00      	nop
 800d016:	3714      	adds	r7, #20
 800d018:	46bd      	mov	sp, r7
 800d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01e:	4770      	bx	lr
 800d020:	20001d18 	.word	0x20001d18
 800d024:	20005918 	.word	0x20005918
 800d028:	20005920 	.word	0x20005920
 800d02c:	20005928 	.word	0x20005928
 800d030:	20005924 	.word	0x20005924
 800d034:	2000592c 	.word	0x2000592c

0800d038 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d038:	b480      	push	{r7}
 800d03a:	b085      	sub	sp, #20
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d040:	4b28      	ldr	r3, [pc, #160]	; (800d0e4 <prvInsertBlockIntoFreeList+0xac>)
 800d042:	60fb      	str	r3, [r7, #12]
 800d044:	e002      	b.n	800d04c <prvInsertBlockIntoFreeList+0x14>
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	60fb      	str	r3, [r7, #12]
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	687a      	ldr	r2, [r7, #4]
 800d052:	429a      	cmp	r2, r3
 800d054:	d8f7      	bhi.n	800d046 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	685b      	ldr	r3, [r3, #4]
 800d05e:	68ba      	ldr	r2, [r7, #8]
 800d060:	4413      	add	r3, r2
 800d062:	687a      	ldr	r2, [r7, #4]
 800d064:	429a      	cmp	r2, r3
 800d066:	d108      	bne.n	800d07a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	685a      	ldr	r2, [r3, #4]
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	685b      	ldr	r3, [r3, #4]
 800d070:	441a      	add	r2, r3
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	685b      	ldr	r3, [r3, #4]
 800d082:	68ba      	ldr	r2, [r7, #8]
 800d084:	441a      	add	r2, r3
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	429a      	cmp	r2, r3
 800d08c:	d118      	bne.n	800d0c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	681a      	ldr	r2, [r3, #0]
 800d092:	4b15      	ldr	r3, [pc, #84]	; (800d0e8 <prvInsertBlockIntoFreeList+0xb0>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	429a      	cmp	r2, r3
 800d098:	d00d      	beq.n	800d0b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	685a      	ldr	r2, [r3, #4]
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	685b      	ldr	r3, [r3, #4]
 800d0a4:	441a      	add	r2, r3
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	681a      	ldr	r2, [r3, #0]
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	601a      	str	r2, [r3, #0]
 800d0b4:	e008      	b.n	800d0c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d0b6:	4b0c      	ldr	r3, [pc, #48]	; (800d0e8 <prvInsertBlockIntoFreeList+0xb0>)
 800d0b8:	681a      	ldr	r2, [r3, #0]
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	601a      	str	r2, [r3, #0]
 800d0be:	e003      	b.n	800d0c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	681a      	ldr	r2, [r3, #0]
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d0c8:	68fa      	ldr	r2, [r7, #12]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	429a      	cmp	r2, r3
 800d0ce:	d002      	beq.n	800d0d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	687a      	ldr	r2, [r7, #4]
 800d0d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d0d6:	bf00      	nop
 800d0d8:	3714      	adds	r7, #20
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e0:	4770      	bx	lr
 800d0e2:	bf00      	nop
 800d0e4:	20005918 	.word	0x20005918
 800d0e8:	20005920 	.word	0x20005920

0800d0ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	4912      	ldr	r1, [pc, #72]	; (800d13c <MX_USB_DEVICE_Init+0x50>)
 800d0f4:	4812      	ldr	r0, [pc, #72]	; (800d140 <MX_USB_DEVICE_Init+0x54>)
 800d0f6:	f7fb fc6f 	bl	80089d8 <USBD_Init>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d001      	beq.n	800d104 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d100:	f7f4 ff46 	bl	8001f90 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d104:	490f      	ldr	r1, [pc, #60]	; (800d144 <MX_USB_DEVICE_Init+0x58>)
 800d106:	480e      	ldr	r0, [pc, #56]	; (800d140 <MX_USB_DEVICE_Init+0x54>)
 800d108:	f7fb fc96 	bl	8008a38 <USBD_RegisterClass>
 800d10c:	4603      	mov	r3, r0
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d001      	beq.n	800d116 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d112:	f7f4 ff3d 	bl	8001f90 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d116:	490c      	ldr	r1, [pc, #48]	; (800d148 <MX_USB_DEVICE_Init+0x5c>)
 800d118:	4809      	ldr	r0, [pc, #36]	; (800d140 <MX_USB_DEVICE_Init+0x54>)
 800d11a:	f7fb fb8d 	bl	8008838 <USBD_CDC_RegisterInterface>
 800d11e:	4603      	mov	r3, r0
 800d120:	2b00      	cmp	r3, #0
 800d122:	d001      	beq.n	800d128 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d124:	f7f4 ff34 	bl	8001f90 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d128:	4805      	ldr	r0, [pc, #20]	; (800d140 <MX_USB_DEVICE_Init+0x54>)
 800d12a:	f7fb fcbb 	bl	8008aa4 <USBD_Start>
 800d12e:	4603      	mov	r3, r0
 800d130:	2b00      	cmp	r3, #0
 800d132:	d001      	beq.n	800d138 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d134:	f7f4 ff2c 	bl	8001f90 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d138:	bf00      	nop
 800d13a:	bd80      	pop	{r7, pc}
 800d13c:	200000b0 	.word	0x200000b0
 800d140:	20005930 	.word	0x20005930
 800d144:	20000018 	.word	0x20000018
 800d148:	2000009c 	.word	0x2000009c

0800d14c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d150:	2200      	movs	r2, #0
 800d152:	4905      	ldr	r1, [pc, #20]	; (800d168 <CDC_Init_FS+0x1c>)
 800d154:	4805      	ldr	r0, [pc, #20]	; (800d16c <CDC_Init_FS+0x20>)
 800d156:	f7fb fb89 	bl	800886c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d15a:	4905      	ldr	r1, [pc, #20]	; (800d170 <CDC_Init_FS+0x24>)
 800d15c:	4803      	ldr	r0, [pc, #12]	; (800d16c <CDC_Init_FS+0x20>)
 800d15e:	f7fb fba7 	bl	80088b0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d162:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d164:	4618      	mov	r0, r3
 800d166:	bd80      	pop	{r7, pc}
 800d168:	2000640c 	.word	0x2000640c
 800d16c:	20005930 	.word	0x20005930
 800d170:	20005c0c 	.word	0x20005c0c

0800d174 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d174:	b480      	push	{r7}
 800d176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d178:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d17a:	4618      	mov	r0, r3
 800d17c:	46bd      	mov	sp, r7
 800d17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d182:	4770      	bx	lr

0800d184 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d184:	b480      	push	{r7}
 800d186:	b083      	sub	sp, #12
 800d188:	af00      	add	r7, sp, #0
 800d18a:	4603      	mov	r3, r0
 800d18c:	6039      	str	r1, [r7, #0]
 800d18e:	71fb      	strb	r3, [r7, #7]
 800d190:	4613      	mov	r3, r2
 800d192:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d194:	79fb      	ldrb	r3, [r7, #7]
 800d196:	2b23      	cmp	r3, #35	; 0x23
 800d198:	d84a      	bhi.n	800d230 <CDC_Control_FS+0xac>
 800d19a:	a201      	add	r2, pc, #4	; (adr r2, 800d1a0 <CDC_Control_FS+0x1c>)
 800d19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1a0:	0800d231 	.word	0x0800d231
 800d1a4:	0800d231 	.word	0x0800d231
 800d1a8:	0800d231 	.word	0x0800d231
 800d1ac:	0800d231 	.word	0x0800d231
 800d1b0:	0800d231 	.word	0x0800d231
 800d1b4:	0800d231 	.word	0x0800d231
 800d1b8:	0800d231 	.word	0x0800d231
 800d1bc:	0800d231 	.word	0x0800d231
 800d1c0:	0800d231 	.word	0x0800d231
 800d1c4:	0800d231 	.word	0x0800d231
 800d1c8:	0800d231 	.word	0x0800d231
 800d1cc:	0800d231 	.word	0x0800d231
 800d1d0:	0800d231 	.word	0x0800d231
 800d1d4:	0800d231 	.word	0x0800d231
 800d1d8:	0800d231 	.word	0x0800d231
 800d1dc:	0800d231 	.word	0x0800d231
 800d1e0:	0800d231 	.word	0x0800d231
 800d1e4:	0800d231 	.word	0x0800d231
 800d1e8:	0800d231 	.word	0x0800d231
 800d1ec:	0800d231 	.word	0x0800d231
 800d1f0:	0800d231 	.word	0x0800d231
 800d1f4:	0800d231 	.word	0x0800d231
 800d1f8:	0800d231 	.word	0x0800d231
 800d1fc:	0800d231 	.word	0x0800d231
 800d200:	0800d231 	.word	0x0800d231
 800d204:	0800d231 	.word	0x0800d231
 800d208:	0800d231 	.word	0x0800d231
 800d20c:	0800d231 	.word	0x0800d231
 800d210:	0800d231 	.word	0x0800d231
 800d214:	0800d231 	.word	0x0800d231
 800d218:	0800d231 	.word	0x0800d231
 800d21c:	0800d231 	.word	0x0800d231
 800d220:	0800d231 	.word	0x0800d231
 800d224:	0800d231 	.word	0x0800d231
 800d228:	0800d231 	.word	0x0800d231
 800d22c:	0800d231 	.word	0x0800d231
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d230:	bf00      	nop
  }

  return (USBD_OK);
 800d232:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d234:	4618      	mov	r0, r3
 800d236:	370c      	adds	r7, #12
 800d238:	46bd      	mov	sp, r7
 800d23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23e:	4770      	bx	lr

0800d240 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b082      	sub	sp, #8
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
 800d248:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d24a:	6879      	ldr	r1, [r7, #4]
 800d24c:	4805      	ldr	r0, [pc, #20]	; (800d264 <CDC_Receive_FS+0x24>)
 800d24e:	f7fb fb2f 	bl	80088b0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d252:	4804      	ldr	r0, [pc, #16]	; (800d264 <CDC_Receive_FS+0x24>)
 800d254:	f7fb fb8a 	bl	800896c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d258:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	3708      	adds	r7, #8
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}
 800d262:	bf00      	nop
 800d264:	20005930 	.word	0x20005930

0800d268 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b084      	sub	sp, #16
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
 800d270:	460b      	mov	r3, r1
 800d272:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d274:	2300      	movs	r3, #0
 800d276:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d278:	4b0d      	ldr	r3, [pc, #52]	; (800d2b0 <CDC_Transmit_FS+0x48>)
 800d27a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d27e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d280:	68bb      	ldr	r3, [r7, #8]
 800d282:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d286:	2b00      	cmp	r3, #0
 800d288:	d001      	beq.n	800d28e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d28a:	2301      	movs	r3, #1
 800d28c:	e00b      	b.n	800d2a6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d28e:	887b      	ldrh	r3, [r7, #2]
 800d290:	461a      	mov	r2, r3
 800d292:	6879      	ldr	r1, [r7, #4]
 800d294:	4806      	ldr	r0, [pc, #24]	; (800d2b0 <CDC_Transmit_FS+0x48>)
 800d296:	f7fb fae9 	bl	800886c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d29a:	4805      	ldr	r0, [pc, #20]	; (800d2b0 <CDC_Transmit_FS+0x48>)
 800d29c:	f7fb fb26 	bl	80088ec <USBD_CDC_TransmitPacket>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d2a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3710      	adds	r7, #16
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}
 800d2ae:	bf00      	nop
 800d2b0:	20005930 	.word	0x20005930

0800d2b4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d2b4:	b480      	push	{r7}
 800d2b6:	b087      	sub	sp, #28
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	60f8      	str	r0, [r7, #12]
 800d2bc:	60b9      	str	r1, [r7, #8]
 800d2be:	4613      	mov	r3, r2
 800d2c0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d2c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	371c      	adds	r7, #28
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d4:	4770      	bx	lr
	...

0800d2d8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2d8:	b480      	push	{r7}
 800d2da:	b083      	sub	sp, #12
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	4603      	mov	r3, r0
 800d2e0:	6039      	str	r1, [r7, #0]
 800d2e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	2212      	movs	r2, #18
 800d2e8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d2ea:	4b03      	ldr	r3, [pc, #12]	; (800d2f8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	370c      	adds	r7, #12
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f6:	4770      	bx	lr
 800d2f8:	200000d0 	.word	0x200000d0

0800d2fc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	b083      	sub	sp, #12
 800d300:	af00      	add	r7, sp, #0
 800d302:	4603      	mov	r3, r0
 800d304:	6039      	str	r1, [r7, #0]
 800d306:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	2204      	movs	r2, #4
 800d30c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d30e:	4b03      	ldr	r3, [pc, #12]	; (800d31c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d310:	4618      	mov	r0, r3
 800d312:	370c      	adds	r7, #12
 800d314:	46bd      	mov	sp, r7
 800d316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31a:	4770      	bx	lr
 800d31c:	200000f0 	.word	0x200000f0

0800d320 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b082      	sub	sp, #8
 800d324:	af00      	add	r7, sp, #0
 800d326:	4603      	mov	r3, r0
 800d328:	6039      	str	r1, [r7, #0]
 800d32a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d32c:	79fb      	ldrb	r3, [r7, #7]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d105      	bne.n	800d33e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d332:	683a      	ldr	r2, [r7, #0]
 800d334:	4907      	ldr	r1, [pc, #28]	; (800d354 <USBD_FS_ProductStrDescriptor+0x34>)
 800d336:	4808      	ldr	r0, [pc, #32]	; (800d358 <USBD_FS_ProductStrDescriptor+0x38>)
 800d338:	f7fc fd8a 	bl	8009e50 <USBD_GetString>
 800d33c:	e004      	b.n	800d348 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d33e:	683a      	ldr	r2, [r7, #0]
 800d340:	4904      	ldr	r1, [pc, #16]	; (800d354 <USBD_FS_ProductStrDescriptor+0x34>)
 800d342:	4805      	ldr	r0, [pc, #20]	; (800d358 <USBD_FS_ProductStrDescriptor+0x38>)
 800d344:	f7fc fd84 	bl	8009e50 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d348:	4b02      	ldr	r3, [pc, #8]	; (800d354 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d34a:	4618      	mov	r0, r3
 800d34c:	3708      	adds	r7, #8
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}
 800d352:	bf00      	nop
 800d354:	20006c0c 	.word	0x20006c0c
 800d358:	0800e070 	.word	0x0800e070

0800d35c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b082      	sub	sp, #8
 800d360:	af00      	add	r7, sp, #0
 800d362:	4603      	mov	r3, r0
 800d364:	6039      	str	r1, [r7, #0]
 800d366:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d368:	683a      	ldr	r2, [r7, #0]
 800d36a:	4904      	ldr	r1, [pc, #16]	; (800d37c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d36c:	4804      	ldr	r0, [pc, #16]	; (800d380 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d36e:	f7fc fd6f 	bl	8009e50 <USBD_GetString>
  return USBD_StrDesc;
 800d372:	4b02      	ldr	r3, [pc, #8]	; (800d37c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d374:	4618      	mov	r0, r3
 800d376:	3708      	adds	r7, #8
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}
 800d37c:	20006c0c 	.word	0x20006c0c
 800d380:	0800e088 	.word	0x0800e088

0800d384 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b082      	sub	sp, #8
 800d388:	af00      	add	r7, sp, #0
 800d38a:	4603      	mov	r3, r0
 800d38c:	6039      	str	r1, [r7, #0]
 800d38e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	221a      	movs	r2, #26
 800d394:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d396:	f000 f855 	bl	800d444 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d39a:	4b02      	ldr	r3, [pc, #8]	; (800d3a4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d39c:	4618      	mov	r0, r3
 800d39e:	3708      	adds	r7, #8
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd80      	pop	{r7, pc}
 800d3a4:	200000f4 	.word	0x200000f4

0800d3a8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b082      	sub	sp, #8
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	6039      	str	r1, [r7, #0]
 800d3b2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d3b4:	79fb      	ldrb	r3, [r7, #7]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d105      	bne.n	800d3c6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d3ba:	683a      	ldr	r2, [r7, #0]
 800d3bc:	4907      	ldr	r1, [pc, #28]	; (800d3dc <USBD_FS_ConfigStrDescriptor+0x34>)
 800d3be:	4808      	ldr	r0, [pc, #32]	; (800d3e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d3c0:	f7fc fd46 	bl	8009e50 <USBD_GetString>
 800d3c4:	e004      	b.n	800d3d0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d3c6:	683a      	ldr	r2, [r7, #0]
 800d3c8:	4904      	ldr	r1, [pc, #16]	; (800d3dc <USBD_FS_ConfigStrDescriptor+0x34>)
 800d3ca:	4805      	ldr	r0, [pc, #20]	; (800d3e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d3cc:	f7fc fd40 	bl	8009e50 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d3d0:	4b02      	ldr	r3, [pc, #8]	; (800d3dc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	3708      	adds	r7, #8
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}
 800d3da:	bf00      	nop
 800d3dc:	20006c0c 	.word	0x20006c0c
 800d3e0:	0800e09c 	.word	0x0800e09c

0800d3e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b082      	sub	sp, #8
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	6039      	str	r1, [r7, #0]
 800d3ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d3f0:	79fb      	ldrb	r3, [r7, #7]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d105      	bne.n	800d402 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d3f6:	683a      	ldr	r2, [r7, #0]
 800d3f8:	4907      	ldr	r1, [pc, #28]	; (800d418 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d3fa:	4808      	ldr	r0, [pc, #32]	; (800d41c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d3fc:	f7fc fd28 	bl	8009e50 <USBD_GetString>
 800d400:	e004      	b.n	800d40c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d402:	683a      	ldr	r2, [r7, #0]
 800d404:	4904      	ldr	r1, [pc, #16]	; (800d418 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d406:	4805      	ldr	r0, [pc, #20]	; (800d41c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d408:	f7fc fd22 	bl	8009e50 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d40c:	4b02      	ldr	r3, [pc, #8]	; (800d418 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3708      	adds	r7, #8
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}
 800d416:	bf00      	nop
 800d418:	20006c0c 	.word	0x20006c0c
 800d41c:	0800e0a8 	.word	0x0800e0a8

0800d420 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d420:	b480      	push	{r7}
 800d422:	b083      	sub	sp, #12
 800d424:	af00      	add	r7, sp, #0
 800d426:	4603      	mov	r3, r0
 800d428:	6039      	str	r1, [r7, #0]
 800d42a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	220c      	movs	r2, #12
 800d430:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800d432:	4b03      	ldr	r3, [pc, #12]	; (800d440 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800d434:	4618      	mov	r0, r3
 800d436:	370c      	adds	r7, #12
 800d438:	46bd      	mov	sp, r7
 800d43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43e:	4770      	bx	lr
 800d440:	200000e4 	.word	0x200000e4

0800d444 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b084      	sub	sp, #16
 800d448:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d44a:	4b0f      	ldr	r3, [pc, #60]	; (800d488 <Get_SerialNum+0x44>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d450:	4b0e      	ldr	r3, [pc, #56]	; (800d48c <Get_SerialNum+0x48>)
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d456:	4b0e      	ldr	r3, [pc, #56]	; (800d490 <Get_SerialNum+0x4c>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d45c:	68fa      	ldr	r2, [r7, #12]
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	4413      	add	r3, r2
 800d462:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d009      	beq.n	800d47e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d46a:	2208      	movs	r2, #8
 800d46c:	4909      	ldr	r1, [pc, #36]	; (800d494 <Get_SerialNum+0x50>)
 800d46e:	68f8      	ldr	r0, [r7, #12]
 800d470:	f000 f814 	bl	800d49c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d474:	2204      	movs	r2, #4
 800d476:	4908      	ldr	r1, [pc, #32]	; (800d498 <Get_SerialNum+0x54>)
 800d478:	68b8      	ldr	r0, [r7, #8]
 800d47a:	f000 f80f 	bl	800d49c <IntToUnicode>
  }
}
 800d47e:	bf00      	nop
 800d480:	3710      	adds	r7, #16
 800d482:	46bd      	mov	sp, r7
 800d484:	bd80      	pop	{r7, pc}
 800d486:	bf00      	nop
 800d488:	1ff0f420 	.word	0x1ff0f420
 800d48c:	1ff0f424 	.word	0x1ff0f424
 800d490:	1ff0f428 	.word	0x1ff0f428
 800d494:	200000f6 	.word	0x200000f6
 800d498:	20000106 	.word	0x20000106

0800d49c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d49c:	b480      	push	{r7}
 800d49e:	b087      	sub	sp, #28
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	60f8      	str	r0, [r7, #12]
 800d4a4:	60b9      	str	r1, [r7, #8]
 800d4a6:	4613      	mov	r3, r2
 800d4a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	75fb      	strb	r3, [r7, #23]
 800d4b2:	e027      	b.n	800d504 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	0f1b      	lsrs	r3, r3, #28
 800d4b8:	2b09      	cmp	r3, #9
 800d4ba:	d80b      	bhi.n	800d4d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	0f1b      	lsrs	r3, r3, #28
 800d4c0:	b2da      	uxtb	r2, r3
 800d4c2:	7dfb      	ldrb	r3, [r7, #23]
 800d4c4:	005b      	lsls	r3, r3, #1
 800d4c6:	4619      	mov	r1, r3
 800d4c8:	68bb      	ldr	r3, [r7, #8]
 800d4ca:	440b      	add	r3, r1
 800d4cc:	3230      	adds	r2, #48	; 0x30
 800d4ce:	b2d2      	uxtb	r2, r2
 800d4d0:	701a      	strb	r2, [r3, #0]
 800d4d2:	e00a      	b.n	800d4ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	0f1b      	lsrs	r3, r3, #28
 800d4d8:	b2da      	uxtb	r2, r3
 800d4da:	7dfb      	ldrb	r3, [r7, #23]
 800d4dc:	005b      	lsls	r3, r3, #1
 800d4de:	4619      	mov	r1, r3
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	440b      	add	r3, r1
 800d4e4:	3237      	adds	r2, #55	; 0x37
 800d4e6:	b2d2      	uxtb	r2, r2
 800d4e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	011b      	lsls	r3, r3, #4
 800d4ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d4f0:	7dfb      	ldrb	r3, [r7, #23]
 800d4f2:	005b      	lsls	r3, r3, #1
 800d4f4:	3301      	adds	r3, #1
 800d4f6:	68ba      	ldr	r2, [r7, #8]
 800d4f8:	4413      	add	r3, r2
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d4fe:	7dfb      	ldrb	r3, [r7, #23]
 800d500:	3301      	adds	r3, #1
 800d502:	75fb      	strb	r3, [r7, #23]
 800d504:	7dfa      	ldrb	r2, [r7, #23]
 800d506:	79fb      	ldrb	r3, [r7, #7]
 800d508:	429a      	cmp	r2, r3
 800d50a:	d3d3      	bcc.n	800d4b4 <IntToUnicode+0x18>
  }
}
 800d50c:	bf00      	nop
 800d50e:	bf00      	nop
 800d510:	371c      	adds	r7, #28
 800d512:	46bd      	mov	sp, r7
 800d514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d518:	4770      	bx	lr
	...

0800d51c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b0ae      	sub	sp, #184	; 0xb8
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d524:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800d528:	2200      	movs	r2, #0
 800d52a:	601a      	str	r2, [r3, #0]
 800d52c:	605a      	str	r2, [r3, #4]
 800d52e:	609a      	str	r2, [r3, #8]
 800d530:	60da      	str	r2, [r3, #12]
 800d532:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d534:	f107 0314 	add.w	r3, r7, #20
 800d538:	2290      	movs	r2, #144	; 0x90
 800d53a:	2100      	movs	r1, #0
 800d53c:	4618      	mov	r0, r3
 800d53e:	f000 fbb5 	bl	800dcac <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d54a:	d161      	bne.n	800d610 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800d54c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d550:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800d552:	2300      	movs	r3, #0
 800d554:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d558:	f107 0314 	add.w	r3, r7, #20
 800d55c:	4618      	mov	r0, r3
 800d55e:	f7f7 fdaf 	bl	80050c0 <HAL_RCCEx_PeriphCLKConfig>
 800d562:	4603      	mov	r3, r0
 800d564:	2b00      	cmp	r3, #0
 800d566:	d001      	beq.n	800d56c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800d568:	f7f4 fd12 	bl	8001f90 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d56c:	4b2a      	ldr	r3, [pc, #168]	; (800d618 <HAL_PCD_MspInit+0xfc>)
 800d56e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d570:	4a29      	ldr	r2, [pc, #164]	; (800d618 <HAL_PCD_MspInit+0xfc>)
 800d572:	f043 0301 	orr.w	r3, r3, #1
 800d576:	6313      	str	r3, [r2, #48]	; 0x30
 800d578:	4b27      	ldr	r3, [pc, #156]	; (800d618 <HAL_PCD_MspInit+0xfc>)
 800d57a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d57c:	f003 0301 	and.w	r3, r3, #1
 800d580:	613b      	str	r3, [r7, #16]
 800d582:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800d584:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800d588:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d58c:	2302      	movs	r3, #2
 800d58e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d592:	2300      	movs	r3, #0
 800d594:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d598:	2303      	movs	r3, #3
 800d59a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d59e:	230a      	movs	r3, #10
 800d5a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d5a4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800d5a8:	4619      	mov	r1, r3
 800d5aa:	481c      	ldr	r0, [pc, #112]	; (800d61c <HAL_PCD_MspInit+0x100>)
 800d5ac:	f7f5 fba4 	bl	8002cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800d5b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d5b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5be:	2300      	movs	r3, #0
 800d5c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800d5c4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800d5c8:	4619      	mov	r1, r3
 800d5ca:	4814      	ldr	r0, [pc, #80]	; (800d61c <HAL_PCD_MspInit+0x100>)
 800d5cc:	f7f5 fb94 	bl	8002cf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d5d0:	4b11      	ldr	r3, [pc, #68]	; (800d618 <HAL_PCD_MspInit+0xfc>)
 800d5d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5d4:	4a10      	ldr	r2, [pc, #64]	; (800d618 <HAL_PCD_MspInit+0xfc>)
 800d5d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5da:	6353      	str	r3, [r2, #52]	; 0x34
 800d5dc:	4b0e      	ldr	r3, [pc, #56]	; (800d618 <HAL_PCD_MspInit+0xfc>)
 800d5de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5e4:	60fb      	str	r3, [r7, #12]
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	4b0b      	ldr	r3, [pc, #44]	; (800d618 <HAL_PCD_MspInit+0xfc>)
 800d5ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5ec:	4a0a      	ldr	r2, [pc, #40]	; (800d618 <HAL_PCD_MspInit+0xfc>)
 800d5ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d5f2:	6453      	str	r3, [r2, #68]	; 0x44
 800d5f4:	4b08      	ldr	r3, [pc, #32]	; (800d618 <HAL_PCD_MspInit+0xfc>)
 800d5f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d5fc:	60bb      	str	r3, [r7, #8]
 800d5fe:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800d600:	2200      	movs	r2, #0
 800d602:	2105      	movs	r1, #5
 800d604:	2043      	movs	r0, #67	; 0x43
 800d606:	f7f5 f827 	bl	8002658 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d60a:	2043      	movs	r0, #67	; 0x43
 800d60c:	f7f5 f840 	bl	8002690 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d610:	bf00      	nop
 800d612:	37b8      	adds	r7, #184	; 0xb8
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}
 800d618:	40023800 	.word	0x40023800
 800d61c:	40020000 	.word	0x40020000

0800d620 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b082      	sub	sp, #8
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d634:	4619      	mov	r1, r3
 800d636:	4610      	mov	r0, r2
 800d638:	f7fb fa81 	bl	8008b3e <USBD_LL_SetupStage>
}
 800d63c:	bf00      	nop
 800d63e:	3708      	adds	r7, #8
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}

0800d644 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b082      	sub	sp, #8
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
 800d64c:	460b      	mov	r3, r1
 800d64e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800d656:	78fa      	ldrb	r2, [r7, #3]
 800d658:	6879      	ldr	r1, [r7, #4]
 800d65a:	4613      	mov	r3, r2
 800d65c:	00db      	lsls	r3, r3, #3
 800d65e:	4413      	add	r3, r2
 800d660:	009b      	lsls	r3, r3, #2
 800d662:	440b      	add	r3, r1
 800d664:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800d668:	681a      	ldr	r2, [r3, #0]
 800d66a:	78fb      	ldrb	r3, [r7, #3]
 800d66c:	4619      	mov	r1, r3
 800d66e:	f7fb fabb 	bl	8008be8 <USBD_LL_DataOutStage>
}
 800d672:	bf00      	nop
 800d674:	3708      	adds	r7, #8
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}

0800d67a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d67a:	b580      	push	{r7, lr}
 800d67c:	b082      	sub	sp, #8
 800d67e:	af00      	add	r7, sp, #0
 800d680:	6078      	str	r0, [r7, #4]
 800d682:	460b      	mov	r3, r1
 800d684:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800d68c:	78fa      	ldrb	r2, [r7, #3]
 800d68e:	6879      	ldr	r1, [r7, #4]
 800d690:	4613      	mov	r3, r2
 800d692:	00db      	lsls	r3, r3, #3
 800d694:	4413      	add	r3, r2
 800d696:	009b      	lsls	r3, r3, #2
 800d698:	440b      	add	r3, r1
 800d69a:	334c      	adds	r3, #76	; 0x4c
 800d69c:	681a      	ldr	r2, [r3, #0]
 800d69e:	78fb      	ldrb	r3, [r7, #3]
 800d6a0:	4619      	mov	r1, r3
 800d6a2:	f7fb fb54 	bl	8008d4e <USBD_LL_DataInStage>
}
 800d6a6:	bf00      	nop
 800d6a8:	3708      	adds	r7, #8
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}

0800d6ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6ae:	b580      	push	{r7, lr}
 800d6b0:	b082      	sub	sp, #8
 800d6b2:	af00      	add	r7, sp, #0
 800d6b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f7fb fc88 	bl	8008fd2 <USBD_LL_SOF>
}
 800d6c2:	bf00      	nop
 800d6c4:	3708      	adds	r7, #8
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}

0800d6ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6ca:	b580      	push	{r7, lr}
 800d6cc:	b084      	sub	sp, #16
 800d6ce:	af00      	add	r7, sp, #0
 800d6d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	68db      	ldr	r3, [r3, #12]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d102      	bne.n	800d6e4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	73fb      	strb	r3, [r7, #15]
 800d6e2:	e008      	b.n	800d6f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	68db      	ldr	r3, [r3, #12]
 800d6e8:	2b02      	cmp	r3, #2
 800d6ea:	d102      	bne.n	800d6f2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d6ec:	2301      	movs	r3, #1
 800d6ee:	73fb      	strb	r3, [r7, #15]
 800d6f0:	e001      	b.n	800d6f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d6f2:	f7f4 fc4d 	bl	8001f90 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d6fc:	7bfa      	ldrb	r2, [r7, #15]
 800d6fe:	4611      	mov	r1, r2
 800d700:	4618      	mov	r0, r3
 800d702:	f7fb fc28 	bl	8008f56 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d70c:	4618      	mov	r0, r3
 800d70e:	f7fb fbd0 	bl	8008eb2 <USBD_LL_Reset>
}
 800d712:	bf00      	nop
 800d714:	3710      	adds	r7, #16
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}
	...

0800d71c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b082      	sub	sp, #8
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d72a:	4618      	mov	r0, r3
 800d72c:	f7fb fc23 	bl	8008f76 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	687a      	ldr	r2, [r7, #4]
 800d73c:	6812      	ldr	r2, [r2, #0]
 800d73e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d742:	f043 0301 	orr.w	r3, r3, #1
 800d746:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6a1b      	ldr	r3, [r3, #32]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d005      	beq.n	800d75c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d750:	4b04      	ldr	r3, [pc, #16]	; (800d764 <HAL_PCD_SuspendCallback+0x48>)
 800d752:	691b      	ldr	r3, [r3, #16]
 800d754:	4a03      	ldr	r2, [pc, #12]	; (800d764 <HAL_PCD_SuspendCallback+0x48>)
 800d756:	f043 0306 	orr.w	r3, r3, #6
 800d75a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d75c:	bf00      	nop
 800d75e:	3708      	adds	r7, #8
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}
 800d764:	e000ed00 	.word	0xe000ed00

0800d768 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b082      	sub	sp, #8
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d776:	4618      	mov	r0, r3
 800d778:	f7fb fc13 	bl	8008fa2 <USBD_LL_Resume>
}
 800d77c:	bf00      	nop
 800d77e:	3708      	adds	r7, #8
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}

0800d784 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b082      	sub	sp, #8
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
 800d78c:	460b      	mov	r3, r1
 800d78e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d796:	78fa      	ldrb	r2, [r7, #3]
 800d798:	4611      	mov	r1, r2
 800d79a:	4618      	mov	r0, r3
 800d79c:	f7fb fc6b 	bl	8009076 <USBD_LL_IsoOUTIncomplete>
}
 800d7a0:	bf00      	nop
 800d7a2:	3708      	adds	r7, #8
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}

0800d7a8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b082      	sub	sp, #8
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
 800d7b0:	460b      	mov	r3, r1
 800d7b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d7ba:	78fa      	ldrb	r2, [r7, #3]
 800d7bc:	4611      	mov	r1, r2
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f7fb fc27 	bl	8009012 <USBD_LL_IsoINIncomplete>
}
 800d7c4:	bf00      	nop
 800d7c6:	3708      	adds	r7, #8
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}

0800d7cc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b082      	sub	sp, #8
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f7fb fc7d 	bl	80090da <USBD_LL_DevConnected>
}
 800d7e0:	bf00      	nop
 800d7e2:	3708      	adds	r7, #8
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd80      	pop	{r7, pc}

0800d7e8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b082      	sub	sp, #8
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f7fb fc7a 	bl	80090f0 <USBD_LL_DevDisconnected>
}
 800d7fc:	bf00      	nop
 800d7fe:	3708      	adds	r7, #8
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}

0800d804 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b082      	sub	sp, #8
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	781b      	ldrb	r3, [r3, #0]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d13c      	bne.n	800d88e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d814:	4a20      	ldr	r2, [pc, #128]	; (800d898 <USBD_LL_Init+0x94>)
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	4a1e      	ldr	r2, [pc, #120]	; (800d898 <USBD_LL_Init+0x94>)
 800d820:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d824:	4b1c      	ldr	r3, [pc, #112]	; (800d898 <USBD_LL_Init+0x94>)
 800d826:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d82a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d82c:	4b1a      	ldr	r3, [pc, #104]	; (800d898 <USBD_LL_Init+0x94>)
 800d82e:	2206      	movs	r2, #6
 800d830:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d832:	4b19      	ldr	r3, [pc, #100]	; (800d898 <USBD_LL_Init+0x94>)
 800d834:	2202      	movs	r2, #2
 800d836:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d838:	4b17      	ldr	r3, [pc, #92]	; (800d898 <USBD_LL_Init+0x94>)
 800d83a:	2200      	movs	r2, #0
 800d83c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d83e:	4b16      	ldr	r3, [pc, #88]	; (800d898 <USBD_LL_Init+0x94>)
 800d840:	2202      	movs	r2, #2
 800d842:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800d844:	4b14      	ldr	r3, [pc, #80]	; (800d898 <USBD_LL_Init+0x94>)
 800d846:	2201      	movs	r2, #1
 800d848:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d84a:	4b13      	ldr	r3, [pc, #76]	; (800d898 <USBD_LL_Init+0x94>)
 800d84c:	2200      	movs	r2, #0
 800d84e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d850:	4b11      	ldr	r3, [pc, #68]	; (800d898 <USBD_LL_Init+0x94>)
 800d852:	2200      	movs	r2, #0
 800d854:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800d856:	4b10      	ldr	r3, [pc, #64]	; (800d898 <USBD_LL_Init+0x94>)
 800d858:	2201      	movs	r2, #1
 800d85a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d85c:	4b0e      	ldr	r3, [pc, #56]	; (800d898 <USBD_LL_Init+0x94>)
 800d85e:	2200      	movs	r2, #0
 800d860:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d862:	480d      	ldr	r0, [pc, #52]	; (800d898 <USBD_LL_Init+0x94>)
 800d864:	f7f5 fc0d 	bl	8003082 <HAL_PCD_Init>
 800d868:	4603      	mov	r3, r0
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d001      	beq.n	800d872 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d86e:	f7f4 fb8f 	bl	8001f90 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d872:	2180      	movs	r1, #128	; 0x80
 800d874:	4808      	ldr	r0, [pc, #32]	; (800d898 <USBD_LL_Init+0x94>)
 800d876:	f7f6 fe88 	bl	800458a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d87a:	2240      	movs	r2, #64	; 0x40
 800d87c:	2100      	movs	r1, #0
 800d87e:	4806      	ldr	r0, [pc, #24]	; (800d898 <USBD_LL_Init+0x94>)
 800d880:	f7f6 fe3c 	bl	80044fc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d884:	2280      	movs	r2, #128	; 0x80
 800d886:	2101      	movs	r1, #1
 800d888:	4803      	ldr	r0, [pc, #12]	; (800d898 <USBD_LL_Init+0x94>)
 800d88a:	f7f6 fe37 	bl	80044fc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d88e:	2300      	movs	r3, #0
}
 800d890:	4618      	mov	r0, r3
 800d892:	3708      	adds	r7, #8
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}
 800d898:	20006e0c 	.word	0x20006e0c

0800d89c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b084      	sub	sp, #16
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f7f5 fd09 	bl	80032ca <HAL_PCD_Start>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8bc:	7bfb      	ldrb	r3, [r7, #15]
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f000 f97e 	bl	800dbc0 <USBD_Get_USB_Status>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	3710      	adds	r7, #16
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}

0800d8d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d8d2:	b580      	push	{r7, lr}
 800d8d4:	b084      	sub	sp, #16
 800d8d6:	af00      	add	r7, sp, #0
 800d8d8:	6078      	str	r0, [r7, #4]
 800d8da:	4608      	mov	r0, r1
 800d8dc:	4611      	mov	r1, r2
 800d8de:	461a      	mov	r2, r3
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	70fb      	strb	r3, [r7, #3]
 800d8e4:	460b      	mov	r3, r1
 800d8e6:	70bb      	strb	r3, [r7, #2]
 800d8e8:	4613      	mov	r3, r2
 800d8ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d8fa:	78bb      	ldrb	r3, [r7, #2]
 800d8fc:	883a      	ldrh	r2, [r7, #0]
 800d8fe:	78f9      	ldrb	r1, [r7, #3]
 800d900:	f7f6 f9f6 	bl	8003cf0 <HAL_PCD_EP_Open>
 800d904:	4603      	mov	r3, r0
 800d906:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d908:	7bfb      	ldrb	r3, [r7, #15]
 800d90a:	4618      	mov	r0, r3
 800d90c:	f000 f958 	bl	800dbc0 <USBD_Get_USB_Status>
 800d910:	4603      	mov	r3, r0
 800d912:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d914:	7bbb      	ldrb	r3, [r7, #14]
}
 800d916:	4618      	mov	r0, r3
 800d918:	3710      	adds	r7, #16
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd80      	pop	{r7, pc}

0800d91e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d91e:	b580      	push	{r7, lr}
 800d920:	b084      	sub	sp, #16
 800d922:	af00      	add	r7, sp, #0
 800d924:	6078      	str	r0, [r7, #4]
 800d926:	460b      	mov	r3, r1
 800d928:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d92a:	2300      	movs	r3, #0
 800d92c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d92e:	2300      	movs	r3, #0
 800d930:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d938:	78fa      	ldrb	r2, [r7, #3]
 800d93a:	4611      	mov	r1, r2
 800d93c:	4618      	mov	r0, r3
 800d93e:	f7f6 fa3f 	bl	8003dc0 <HAL_PCD_EP_Close>
 800d942:	4603      	mov	r3, r0
 800d944:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d946:	7bfb      	ldrb	r3, [r7, #15]
 800d948:	4618      	mov	r0, r3
 800d94a:	f000 f939 	bl	800dbc0 <USBD_Get_USB_Status>
 800d94e:	4603      	mov	r3, r0
 800d950:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d952:	7bbb      	ldrb	r3, [r7, #14]
}
 800d954:	4618      	mov	r0, r3
 800d956:	3710      	adds	r7, #16
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}

0800d95c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b084      	sub	sp, #16
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
 800d964:	460b      	mov	r3, r1
 800d966:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d968:	2300      	movs	r3, #0
 800d96a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d96c:	2300      	movs	r3, #0
 800d96e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d976:	78fa      	ldrb	r2, [r7, #3]
 800d978:	4611      	mov	r1, r2
 800d97a:	4618      	mov	r0, r3
 800d97c:	f7f6 fb17 	bl	8003fae <HAL_PCD_EP_SetStall>
 800d980:	4603      	mov	r3, r0
 800d982:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d984:	7bfb      	ldrb	r3, [r7, #15]
 800d986:	4618      	mov	r0, r3
 800d988:	f000 f91a 	bl	800dbc0 <USBD_Get_USB_Status>
 800d98c:	4603      	mov	r3, r0
 800d98e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d990:	7bbb      	ldrb	r3, [r7, #14]
}
 800d992:	4618      	mov	r0, r3
 800d994:	3710      	adds	r7, #16
 800d996:	46bd      	mov	sp, r7
 800d998:	bd80      	pop	{r7, pc}

0800d99a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d99a:	b580      	push	{r7, lr}
 800d99c:	b084      	sub	sp, #16
 800d99e:	af00      	add	r7, sp, #0
 800d9a0:	6078      	str	r0, [r7, #4]
 800d9a2:	460b      	mov	r3, r1
 800d9a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d9b4:	78fa      	ldrb	r2, [r7, #3]
 800d9b6:	4611      	mov	r1, r2
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f7f6 fb5c 	bl	8004076 <HAL_PCD_EP_ClrStall>
 800d9be:	4603      	mov	r3, r0
 800d9c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9c2:	7bfb      	ldrb	r3, [r7, #15]
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f000 f8fb 	bl	800dbc0 <USBD_Get_USB_Status>
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d9ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	3710      	adds	r7, #16
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}

0800d9d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d9d8:	b480      	push	{r7}
 800d9da:	b085      	sub	sp, #20
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
 800d9e0:	460b      	mov	r3, r1
 800d9e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d9ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d9ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	da0b      	bge.n	800da0c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d9f4:	78fb      	ldrb	r3, [r7, #3]
 800d9f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d9fa:	68f9      	ldr	r1, [r7, #12]
 800d9fc:	4613      	mov	r3, r2
 800d9fe:	00db      	lsls	r3, r3, #3
 800da00:	4413      	add	r3, r2
 800da02:	009b      	lsls	r3, r3, #2
 800da04:	440b      	add	r3, r1
 800da06:	333e      	adds	r3, #62	; 0x3e
 800da08:	781b      	ldrb	r3, [r3, #0]
 800da0a:	e00b      	b.n	800da24 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800da0c:	78fb      	ldrb	r3, [r7, #3]
 800da0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800da12:	68f9      	ldr	r1, [r7, #12]
 800da14:	4613      	mov	r3, r2
 800da16:	00db      	lsls	r3, r3, #3
 800da18:	4413      	add	r3, r2
 800da1a:	009b      	lsls	r3, r3, #2
 800da1c:	440b      	add	r3, r1
 800da1e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800da22:	781b      	ldrb	r3, [r3, #0]
  }
}
 800da24:	4618      	mov	r0, r3
 800da26:	3714      	adds	r7, #20
 800da28:	46bd      	mov	sp, r7
 800da2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2e:	4770      	bx	lr

0800da30 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b084      	sub	sp, #16
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
 800da38:	460b      	mov	r3, r1
 800da3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da3c:	2300      	movs	r3, #0
 800da3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da40:	2300      	movs	r3, #0
 800da42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800da4a:	78fa      	ldrb	r2, [r7, #3]
 800da4c:	4611      	mov	r1, r2
 800da4e:	4618      	mov	r0, r3
 800da50:	f7f6 f929 	bl	8003ca6 <HAL_PCD_SetAddress>
 800da54:	4603      	mov	r3, r0
 800da56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da58:	7bfb      	ldrb	r3, [r7, #15]
 800da5a:	4618      	mov	r0, r3
 800da5c:	f000 f8b0 	bl	800dbc0 <USBD_Get_USB_Status>
 800da60:	4603      	mov	r3, r0
 800da62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da64:	7bbb      	ldrb	r3, [r7, #14]
}
 800da66:	4618      	mov	r0, r3
 800da68:	3710      	adds	r7, #16
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}

0800da6e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800da6e:	b580      	push	{r7, lr}
 800da70:	b086      	sub	sp, #24
 800da72:	af00      	add	r7, sp, #0
 800da74:	60f8      	str	r0, [r7, #12]
 800da76:	607a      	str	r2, [r7, #4]
 800da78:	603b      	str	r3, [r7, #0]
 800da7a:	460b      	mov	r3, r1
 800da7c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da7e:	2300      	movs	r3, #0
 800da80:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da82:	2300      	movs	r3, #0
 800da84:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800da8c:	7af9      	ldrb	r1, [r7, #11]
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	687a      	ldr	r2, [r7, #4]
 800da92:	f7f6 fa42 	bl	8003f1a <HAL_PCD_EP_Transmit>
 800da96:	4603      	mov	r3, r0
 800da98:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da9a:	7dfb      	ldrb	r3, [r7, #23]
 800da9c:	4618      	mov	r0, r3
 800da9e:	f000 f88f 	bl	800dbc0 <USBD_Get_USB_Status>
 800daa2:	4603      	mov	r3, r0
 800daa4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800daa6:	7dbb      	ldrb	r3, [r7, #22]
}
 800daa8:	4618      	mov	r0, r3
 800daaa:	3718      	adds	r7, #24
 800daac:	46bd      	mov	sp, r7
 800daae:	bd80      	pop	{r7, pc}

0800dab0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b086      	sub	sp, #24
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	60f8      	str	r0, [r7, #12]
 800dab8:	607a      	str	r2, [r7, #4]
 800daba:	603b      	str	r3, [r7, #0]
 800dabc:	460b      	mov	r3, r1
 800dabe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dac0:	2300      	movs	r3, #0
 800dac2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dac4:	2300      	movs	r3, #0
 800dac6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dace:	7af9      	ldrb	r1, [r7, #11]
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	687a      	ldr	r2, [r7, #4]
 800dad4:	f7f6 f9be 	bl	8003e54 <HAL_PCD_EP_Receive>
 800dad8:	4603      	mov	r3, r0
 800dada:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dadc:	7dfb      	ldrb	r3, [r7, #23]
 800dade:	4618      	mov	r0, r3
 800dae0:	f000 f86e 	bl	800dbc0 <USBD_Get_USB_Status>
 800dae4:	4603      	mov	r3, r0
 800dae6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dae8:	7dbb      	ldrb	r3, [r7, #22]
}
 800daea:	4618      	mov	r0, r3
 800daec:	3718      	adds	r7, #24
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd80      	pop	{r7, pc}

0800daf2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800daf2:	b580      	push	{r7, lr}
 800daf4:	b082      	sub	sp, #8
 800daf6:	af00      	add	r7, sp, #0
 800daf8:	6078      	str	r0, [r7, #4]
 800dafa:	460b      	mov	r3, r1
 800dafc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800db04:	78fa      	ldrb	r2, [r7, #3]
 800db06:	4611      	mov	r1, r2
 800db08:	4618      	mov	r0, r3
 800db0a:	f7f6 f9ee 	bl	8003eea <HAL_PCD_EP_GetRxCount>
 800db0e:	4603      	mov	r3, r0
}
 800db10:	4618      	mov	r0, r3
 800db12:	3708      	adds	r7, #8
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}

0800db18 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b082      	sub	sp, #8
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
 800db20:	460b      	mov	r3, r1
 800db22:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800db24:	78fb      	ldrb	r3, [r7, #3]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d002      	beq.n	800db30 <HAL_PCDEx_LPM_Callback+0x18>
 800db2a:	2b01      	cmp	r3, #1
 800db2c:	d01f      	beq.n	800db6e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800db2e:	e03b      	b.n	800dba8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	6a1b      	ldr	r3, [r3, #32]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d007      	beq.n	800db48 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800db38:	f000 f83c 	bl	800dbb4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800db3c:	4b1c      	ldr	r3, [pc, #112]	; (800dbb0 <HAL_PCDEx_LPM_Callback+0x98>)
 800db3e:	691b      	ldr	r3, [r3, #16]
 800db40:	4a1b      	ldr	r2, [pc, #108]	; (800dbb0 <HAL_PCDEx_LPM_Callback+0x98>)
 800db42:	f023 0306 	bic.w	r3, r3, #6
 800db46:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	687a      	ldr	r2, [r7, #4]
 800db54:	6812      	ldr	r2, [r2, #0]
 800db56:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800db5a:	f023 0301 	bic.w	r3, r3, #1
 800db5e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800db66:	4618      	mov	r0, r3
 800db68:	f7fb fa1b 	bl	8008fa2 <USBD_LL_Resume>
    break;
 800db6c:	e01c      	b.n	800dba8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	687a      	ldr	r2, [r7, #4]
 800db7a:	6812      	ldr	r2, [r2, #0]
 800db7c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800db80:	f043 0301 	orr.w	r3, r3, #1
 800db84:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800db8c:	4618      	mov	r0, r3
 800db8e:	f7fb f9f2 	bl	8008f76 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6a1b      	ldr	r3, [r3, #32]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d005      	beq.n	800dba6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800db9a:	4b05      	ldr	r3, [pc, #20]	; (800dbb0 <HAL_PCDEx_LPM_Callback+0x98>)
 800db9c:	691b      	ldr	r3, [r3, #16]
 800db9e:	4a04      	ldr	r2, [pc, #16]	; (800dbb0 <HAL_PCDEx_LPM_Callback+0x98>)
 800dba0:	f043 0306 	orr.w	r3, r3, #6
 800dba4:	6113      	str	r3, [r2, #16]
    break;
 800dba6:	bf00      	nop
}
 800dba8:	bf00      	nop
 800dbaa:	3708      	adds	r7, #8
 800dbac:	46bd      	mov	sp, r7
 800dbae:	bd80      	pop	{r7, pc}
 800dbb0:	e000ed00 	.word	0xe000ed00

0800dbb4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800dbb8:	f7f4 f810 	bl	8001bdc <SystemClock_Config>
}
 800dbbc:	bf00      	nop
 800dbbe:	bd80      	pop	{r7, pc}

0800dbc0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dbc0:	b480      	push	{r7}
 800dbc2:	b085      	sub	sp, #20
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbca:	2300      	movs	r3, #0
 800dbcc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dbce:	79fb      	ldrb	r3, [r7, #7]
 800dbd0:	2b03      	cmp	r3, #3
 800dbd2:	d817      	bhi.n	800dc04 <USBD_Get_USB_Status+0x44>
 800dbd4:	a201      	add	r2, pc, #4	; (adr r2, 800dbdc <USBD_Get_USB_Status+0x1c>)
 800dbd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbda:	bf00      	nop
 800dbdc:	0800dbed 	.word	0x0800dbed
 800dbe0:	0800dbf3 	.word	0x0800dbf3
 800dbe4:	0800dbf9 	.word	0x0800dbf9
 800dbe8:	0800dbff 	.word	0x0800dbff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dbec:	2300      	movs	r3, #0
 800dbee:	73fb      	strb	r3, [r7, #15]
    break;
 800dbf0:	e00b      	b.n	800dc0a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dbf2:	2303      	movs	r3, #3
 800dbf4:	73fb      	strb	r3, [r7, #15]
    break;
 800dbf6:	e008      	b.n	800dc0a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	73fb      	strb	r3, [r7, #15]
    break;
 800dbfc:	e005      	b.n	800dc0a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dbfe:	2303      	movs	r3, #3
 800dc00:	73fb      	strb	r3, [r7, #15]
    break;
 800dc02:	e002      	b.n	800dc0a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dc04:	2303      	movs	r3, #3
 800dc06:	73fb      	strb	r3, [r7, #15]
    break;
 800dc08:	bf00      	nop
  }
  return usb_status;
 800dc0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	3714      	adds	r7, #20
 800dc10:	46bd      	mov	sp, r7
 800dc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc16:	4770      	bx	lr

0800dc18 <__errno>:
 800dc18:	4b01      	ldr	r3, [pc, #4]	; (800dc20 <__errno+0x8>)
 800dc1a:	6818      	ldr	r0, [r3, #0]
 800dc1c:	4770      	bx	lr
 800dc1e:	bf00      	nop
 800dc20:	20000110 	.word	0x20000110

0800dc24 <__libc_init_array>:
 800dc24:	b570      	push	{r4, r5, r6, lr}
 800dc26:	4d0d      	ldr	r5, [pc, #52]	; (800dc5c <__libc_init_array+0x38>)
 800dc28:	4c0d      	ldr	r4, [pc, #52]	; (800dc60 <__libc_init_array+0x3c>)
 800dc2a:	1b64      	subs	r4, r4, r5
 800dc2c:	10a4      	asrs	r4, r4, #2
 800dc2e:	2600      	movs	r6, #0
 800dc30:	42a6      	cmp	r6, r4
 800dc32:	d109      	bne.n	800dc48 <__libc_init_array+0x24>
 800dc34:	4d0b      	ldr	r5, [pc, #44]	; (800dc64 <__libc_init_array+0x40>)
 800dc36:	4c0c      	ldr	r4, [pc, #48]	; (800dc68 <__libc_init_array+0x44>)
 800dc38:	f000 f9a6 	bl	800df88 <_init>
 800dc3c:	1b64      	subs	r4, r4, r5
 800dc3e:	10a4      	asrs	r4, r4, #2
 800dc40:	2600      	movs	r6, #0
 800dc42:	42a6      	cmp	r6, r4
 800dc44:	d105      	bne.n	800dc52 <__libc_init_array+0x2e>
 800dc46:	bd70      	pop	{r4, r5, r6, pc}
 800dc48:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc4c:	4798      	blx	r3
 800dc4e:	3601      	adds	r6, #1
 800dc50:	e7ee      	b.n	800dc30 <__libc_init_array+0xc>
 800dc52:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc56:	4798      	blx	r3
 800dc58:	3601      	adds	r6, #1
 800dc5a:	e7f2      	b.n	800dc42 <__libc_init_array+0x1e>
 800dc5c:	0800e1d0 	.word	0x0800e1d0
 800dc60:	0800e1d0 	.word	0x0800e1d0
 800dc64:	0800e1d0 	.word	0x0800e1d0
 800dc68:	0800e1d4 	.word	0x0800e1d4

0800dc6c <__retarget_lock_acquire_recursive>:
 800dc6c:	4770      	bx	lr

0800dc6e <__retarget_lock_release_recursive>:
 800dc6e:	4770      	bx	lr

0800dc70 <malloc>:
 800dc70:	4b02      	ldr	r3, [pc, #8]	; (800dc7c <malloc+0xc>)
 800dc72:	4601      	mov	r1, r0
 800dc74:	6818      	ldr	r0, [r3, #0]
 800dc76:	f000 b88d 	b.w	800dd94 <_malloc_r>
 800dc7a:	bf00      	nop
 800dc7c:	20000110 	.word	0x20000110

0800dc80 <free>:
 800dc80:	4b02      	ldr	r3, [pc, #8]	; (800dc8c <free+0xc>)
 800dc82:	4601      	mov	r1, r0
 800dc84:	6818      	ldr	r0, [r3, #0]
 800dc86:	f000 b819 	b.w	800dcbc <_free_r>
 800dc8a:	bf00      	nop
 800dc8c:	20000110 	.word	0x20000110

0800dc90 <memcpy>:
 800dc90:	440a      	add	r2, r1
 800dc92:	4291      	cmp	r1, r2
 800dc94:	f100 33ff 	add.w	r3, r0, #4294967295
 800dc98:	d100      	bne.n	800dc9c <memcpy+0xc>
 800dc9a:	4770      	bx	lr
 800dc9c:	b510      	push	{r4, lr}
 800dc9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dca2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dca6:	4291      	cmp	r1, r2
 800dca8:	d1f9      	bne.n	800dc9e <memcpy+0xe>
 800dcaa:	bd10      	pop	{r4, pc}

0800dcac <memset>:
 800dcac:	4402      	add	r2, r0
 800dcae:	4603      	mov	r3, r0
 800dcb0:	4293      	cmp	r3, r2
 800dcb2:	d100      	bne.n	800dcb6 <memset+0xa>
 800dcb4:	4770      	bx	lr
 800dcb6:	f803 1b01 	strb.w	r1, [r3], #1
 800dcba:	e7f9      	b.n	800dcb0 <memset+0x4>

0800dcbc <_free_r>:
 800dcbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dcbe:	2900      	cmp	r1, #0
 800dcc0:	d044      	beq.n	800dd4c <_free_r+0x90>
 800dcc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dcc6:	9001      	str	r0, [sp, #4]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	f1a1 0404 	sub.w	r4, r1, #4
 800dcce:	bfb8      	it	lt
 800dcd0:	18e4      	addlt	r4, r4, r3
 800dcd2:	f000 f94d 	bl	800df70 <__malloc_lock>
 800dcd6:	4a1e      	ldr	r2, [pc, #120]	; (800dd50 <_free_r+0x94>)
 800dcd8:	9801      	ldr	r0, [sp, #4]
 800dcda:	6813      	ldr	r3, [r2, #0]
 800dcdc:	b933      	cbnz	r3, 800dcec <_free_r+0x30>
 800dcde:	6063      	str	r3, [r4, #4]
 800dce0:	6014      	str	r4, [r2, #0]
 800dce2:	b003      	add	sp, #12
 800dce4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dce8:	f000 b948 	b.w	800df7c <__malloc_unlock>
 800dcec:	42a3      	cmp	r3, r4
 800dcee:	d908      	bls.n	800dd02 <_free_r+0x46>
 800dcf0:	6825      	ldr	r5, [r4, #0]
 800dcf2:	1961      	adds	r1, r4, r5
 800dcf4:	428b      	cmp	r3, r1
 800dcf6:	bf01      	itttt	eq
 800dcf8:	6819      	ldreq	r1, [r3, #0]
 800dcfa:	685b      	ldreq	r3, [r3, #4]
 800dcfc:	1949      	addeq	r1, r1, r5
 800dcfe:	6021      	streq	r1, [r4, #0]
 800dd00:	e7ed      	b.n	800dcde <_free_r+0x22>
 800dd02:	461a      	mov	r2, r3
 800dd04:	685b      	ldr	r3, [r3, #4]
 800dd06:	b10b      	cbz	r3, 800dd0c <_free_r+0x50>
 800dd08:	42a3      	cmp	r3, r4
 800dd0a:	d9fa      	bls.n	800dd02 <_free_r+0x46>
 800dd0c:	6811      	ldr	r1, [r2, #0]
 800dd0e:	1855      	adds	r5, r2, r1
 800dd10:	42a5      	cmp	r5, r4
 800dd12:	d10b      	bne.n	800dd2c <_free_r+0x70>
 800dd14:	6824      	ldr	r4, [r4, #0]
 800dd16:	4421      	add	r1, r4
 800dd18:	1854      	adds	r4, r2, r1
 800dd1a:	42a3      	cmp	r3, r4
 800dd1c:	6011      	str	r1, [r2, #0]
 800dd1e:	d1e0      	bne.n	800dce2 <_free_r+0x26>
 800dd20:	681c      	ldr	r4, [r3, #0]
 800dd22:	685b      	ldr	r3, [r3, #4]
 800dd24:	6053      	str	r3, [r2, #4]
 800dd26:	4421      	add	r1, r4
 800dd28:	6011      	str	r1, [r2, #0]
 800dd2a:	e7da      	b.n	800dce2 <_free_r+0x26>
 800dd2c:	d902      	bls.n	800dd34 <_free_r+0x78>
 800dd2e:	230c      	movs	r3, #12
 800dd30:	6003      	str	r3, [r0, #0]
 800dd32:	e7d6      	b.n	800dce2 <_free_r+0x26>
 800dd34:	6825      	ldr	r5, [r4, #0]
 800dd36:	1961      	adds	r1, r4, r5
 800dd38:	428b      	cmp	r3, r1
 800dd3a:	bf04      	itt	eq
 800dd3c:	6819      	ldreq	r1, [r3, #0]
 800dd3e:	685b      	ldreq	r3, [r3, #4]
 800dd40:	6063      	str	r3, [r4, #4]
 800dd42:	bf04      	itt	eq
 800dd44:	1949      	addeq	r1, r1, r5
 800dd46:	6021      	streq	r1, [r4, #0]
 800dd48:	6054      	str	r4, [r2, #4]
 800dd4a:	e7ca      	b.n	800dce2 <_free_r+0x26>
 800dd4c:	b003      	add	sp, #12
 800dd4e:	bd30      	pop	{r4, r5, pc}
 800dd50:	20007318 	.word	0x20007318

0800dd54 <sbrk_aligned>:
 800dd54:	b570      	push	{r4, r5, r6, lr}
 800dd56:	4e0e      	ldr	r6, [pc, #56]	; (800dd90 <sbrk_aligned+0x3c>)
 800dd58:	460c      	mov	r4, r1
 800dd5a:	6831      	ldr	r1, [r6, #0]
 800dd5c:	4605      	mov	r5, r0
 800dd5e:	b911      	cbnz	r1, 800dd66 <sbrk_aligned+0x12>
 800dd60:	f000 f8f6 	bl	800df50 <_sbrk_r>
 800dd64:	6030      	str	r0, [r6, #0]
 800dd66:	4621      	mov	r1, r4
 800dd68:	4628      	mov	r0, r5
 800dd6a:	f000 f8f1 	bl	800df50 <_sbrk_r>
 800dd6e:	1c43      	adds	r3, r0, #1
 800dd70:	d00a      	beq.n	800dd88 <sbrk_aligned+0x34>
 800dd72:	1cc4      	adds	r4, r0, #3
 800dd74:	f024 0403 	bic.w	r4, r4, #3
 800dd78:	42a0      	cmp	r0, r4
 800dd7a:	d007      	beq.n	800dd8c <sbrk_aligned+0x38>
 800dd7c:	1a21      	subs	r1, r4, r0
 800dd7e:	4628      	mov	r0, r5
 800dd80:	f000 f8e6 	bl	800df50 <_sbrk_r>
 800dd84:	3001      	adds	r0, #1
 800dd86:	d101      	bne.n	800dd8c <sbrk_aligned+0x38>
 800dd88:	f04f 34ff 	mov.w	r4, #4294967295
 800dd8c:	4620      	mov	r0, r4
 800dd8e:	bd70      	pop	{r4, r5, r6, pc}
 800dd90:	2000731c 	.word	0x2000731c

0800dd94 <_malloc_r>:
 800dd94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd98:	1ccd      	adds	r5, r1, #3
 800dd9a:	f025 0503 	bic.w	r5, r5, #3
 800dd9e:	3508      	adds	r5, #8
 800dda0:	2d0c      	cmp	r5, #12
 800dda2:	bf38      	it	cc
 800dda4:	250c      	movcc	r5, #12
 800dda6:	2d00      	cmp	r5, #0
 800dda8:	4607      	mov	r7, r0
 800ddaa:	db01      	blt.n	800ddb0 <_malloc_r+0x1c>
 800ddac:	42a9      	cmp	r1, r5
 800ddae:	d905      	bls.n	800ddbc <_malloc_r+0x28>
 800ddb0:	230c      	movs	r3, #12
 800ddb2:	603b      	str	r3, [r7, #0]
 800ddb4:	2600      	movs	r6, #0
 800ddb6:	4630      	mov	r0, r6
 800ddb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddbc:	4e2e      	ldr	r6, [pc, #184]	; (800de78 <_malloc_r+0xe4>)
 800ddbe:	f000 f8d7 	bl	800df70 <__malloc_lock>
 800ddc2:	6833      	ldr	r3, [r6, #0]
 800ddc4:	461c      	mov	r4, r3
 800ddc6:	bb34      	cbnz	r4, 800de16 <_malloc_r+0x82>
 800ddc8:	4629      	mov	r1, r5
 800ddca:	4638      	mov	r0, r7
 800ddcc:	f7ff ffc2 	bl	800dd54 <sbrk_aligned>
 800ddd0:	1c43      	adds	r3, r0, #1
 800ddd2:	4604      	mov	r4, r0
 800ddd4:	d14d      	bne.n	800de72 <_malloc_r+0xde>
 800ddd6:	6834      	ldr	r4, [r6, #0]
 800ddd8:	4626      	mov	r6, r4
 800ddda:	2e00      	cmp	r6, #0
 800dddc:	d140      	bne.n	800de60 <_malloc_r+0xcc>
 800ddde:	6823      	ldr	r3, [r4, #0]
 800dde0:	4631      	mov	r1, r6
 800dde2:	4638      	mov	r0, r7
 800dde4:	eb04 0803 	add.w	r8, r4, r3
 800dde8:	f000 f8b2 	bl	800df50 <_sbrk_r>
 800ddec:	4580      	cmp	r8, r0
 800ddee:	d13a      	bne.n	800de66 <_malloc_r+0xd2>
 800ddf0:	6821      	ldr	r1, [r4, #0]
 800ddf2:	3503      	adds	r5, #3
 800ddf4:	1a6d      	subs	r5, r5, r1
 800ddf6:	f025 0503 	bic.w	r5, r5, #3
 800ddfa:	3508      	adds	r5, #8
 800ddfc:	2d0c      	cmp	r5, #12
 800ddfe:	bf38      	it	cc
 800de00:	250c      	movcc	r5, #12
 800de02:	4629      	mov	r1, r5
 800de04:	4638      	mov	r0, r7
 800de06:	f7ff ffa5 	bl	800dd54 <sbrk_aligned>
 800de0a:	3001      	adds	r0, #1
 800de0c:	d02b      	beq.n	800de66 <_malloc_r+0xd2>
 800de0e:	6823      	ldr	r3, [r4, #0]
 800de10:	442b      	add	r3, r5
 800de12:	6023      	str	r3, [r4, #0]
 800de14:	e00e      	b.n	800de34 <_malloc_r+0xa0>
 800de16:	6822      	ldr	r2, [r4, #0]
 800de18:	1b52      	subs	r2, r2, r5
 800de1a:	d41e      	bmi.n	800de5a <_malloc_r+0xc6>
 800de1c:	2a0b      	cmp	r2, #11
 800de1e:	d916      	bls.n	800de4e <_malloc_r+0xba>
 800de20:	1961      	adds	r1, r4, r5
 800de22:	42a3      	cmp	r3, r4
 800de24:	6025      	str	r5, [r4, #0]
 800de26:	bf18      	it	ne
 800de28:	6059      	strne	r1, [r3, #4]
 800de2a:	6863      	ldr	r3, [r4, #4]
 800de2c:	bf08      	it	eq
 800de2e:	6031      	streq	r1, [r6, #0]
 800de30:	5162      	str	r2, [r4, r5]
 800de32:	604b      	str	r3, [r1, #4]
 800de34:	4638      	mov	r0, r7
 800de36:	f104 060b 	add.w	r6, r4, #11
 800de3a:	f000 f89f 	bl	800df7c <__malloc_unlock>
 800de3e:	f026 0607 	bic.w	r6, r6, #7
 800de42:	1d23      	adds	r3, r4, #4
 800de44:	1af2      	subs	r2, r6, r3
 800de46:	d0b6      	beq.n	800ddb6 <_malloc_r+0x22>
 800de48:	1b9b      	subs	r3, r3, r6
 800de4a:	50a3      	str	r3, [r4, r2]
 800de4c:	e7b3      	b.n	800ddb6 <_malloc_r+0x22>
 800de4e:	6862      	ldr	r2, [r4, #4]
 800de50:	42a3      	cmp	r3, r4
 800de52:	bf0c      	ite	eq
 800de54:	6032      	streq	r2, [r6, #0]
 800de56:	605a      	strne	r2, [r3, #4]
 800de58:	e7ec      	b.n	800de34 <_malloc_r+0xa0>
 800de5a:	4623      	mov	r3, r4
 800de5c:	6864      	ldr	r4, [r4, #4]
 800de5e:	e7b2      	b.n	800ddc6 <_malloc_r+0x32>
 800de60:	4634      	mov	r4, r6
 800de62:	6876      	ldr	r6, [r6, #4]
 800de64:	e7b9      	b.n	800ddda <_malloc_r+0x46>
 800de66:	230c      	movs	r3, #12
 800de68:	603b      	str	r3, [r7, #0]
 800de6a:	4638      	mov	r0, r7
 800de6c:	f000 f886 	bl	800df7c <__malloc_unlock>
 800de70:	e7a1      	b.n	800ddb6 <_malloc_r+0x22>
 800de72:	6025      	str	r5, [r4, #0]
 800de74:	e7de      	b.n	800de34 <_malloc_r+0xa0>
 800de76:	bf00      	nop
 800de78:	20007318 	.word	0x20007318

0800de7c <cleanup_glue>:
 800de7c:	b538      	push	{r3, r4, r5, lr}
 800de7e:	460c      	mov	r4, r1
 800de80:	6809      	ldr	r1, [r1, #0]
 800de82:	4605      	mov	r5, r0
 800de84:	b109      	cbz	r1, 800de8a <cleanup_glue+0xe>
 800de86:	f7ff fff9 	bl	800de7c <cleanup_glue>
 800de8a:	4621      	mov	r1, r4
 800de8c:	4628      	mov	r0, r5
 800de8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de92:	f7ff bf13 	b.w	800dcbc <_free_r>
	...

0800de98 <_reclaim_reent>:
 800de98:	4b2c      	ldr	r3, [pc, #176]	; (800df4c <_reclaim_reent+0xb4>)
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	4283      	cmp	r3, r0
 800de9e:	b570      	push	{r4, r5, r6, lr}
 800dea0:	4604      	mov	r4, r0
 800dea2:	d051      	beq.n	800df48 <_reclaim_reent+0xb0>
 800dea4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800dea6:	b143      	cbz	r3, 800deba <_reclaim_reent+0x22>
 800dea8:	68db      	ldr	r3, [r3, #12]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d14a      	bne.n	800df44 <_reclaim_reent+0xac>
 800deae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800deb0:	6819      	ldr	r1, [r3, #0]
 800deb2:	b111      	cbz	r1, 800deba <_reclaim_reent+0x22>
 800deb4:	4620      	mov	r0, r4
 800deb6:	f7ff ff01 	bl	800dcbc <_free_r>
 800deba:	6961      	ldr	r1, [r4, #20]
 800debc:	b111      	cbz	r1, 800dec4 <_reclaim_reent+0x2c>
 800debe:	4620      	mov	r0, r4
 800dec0:	f7ff fefc 	bl	800dcbc <_free_r>
 800dec4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800dec6:	b111      	cbz	r1, 800dece <_reclaim_reent+0x36>
 800dec8:	4620      	mov	r0, r4
 800deca:	f7ff fef7 	bl	800dcbc <_free_r>
 800dece:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ded0:	b111      	cbz	r1, 800ded8 <_reclaim_reent+0x40>
 800ded2:	4620      	mov	r0, r4
 800ded4:	f7ff fef2 	bl	800dcbc <_free_r>
 800ded8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800deda:	b111      	cbz	r1, 800dee2 <_reclaim_reent+0x4a>
 800dedc:	4620      	mov	r0, r4
 800dede:	f7ff feed 	bl	800dcbc <_free_r>
 800dee2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800dee4:	b111      	cbz	r1, 800deec <_reclaim_reent+0x54>
 800dee6:	4620      	mov	r0, r4
 800dee8:	f7ff fee8 	bl	800dcbc <_free_r>
 800deec:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800deee:	b111      	cbz	r1, 800def6 <_reclaim_reent+0x5e>
 800def0:	4620      	mov	r0, r4
 800def2:	f7ff fee3 	bl	800dcbc <_free_r>
 800def6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800def8:	b111      	cbz	r1, 800df00 <_reclaim_reent+0x68>
 800defa:	4620      	mov	r0, r4
 800defc:	f7ff fede 	bl	800dcbc <_free_r>
 800df00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df02:	b111      	cbz	r1, 800df0a <_reclaim_reent+0x72>
 800df04:	4620      	mov	r0, r4
 800df06:	f7ff fed9 	bl	800dcbc <_free_r>
 800df0a:	69a3      	ldr	r3, [r4, #24]
 800df0c:	b1e3      	cbz	r3, 800df48 <_reclaim_reent+0xb0>
 800df0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800df10:	4620      	mov	r0, r4
 800df12:	4798      	blx	r3
 800df14:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800df16:	b1b9      	cbz	r1, 800df48 <_reclaim_reent+0xb0>
 800df18:	4620      	mov	r0, r4
 800df1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800df1e:	f7ff bfad 	b.w	800de7c <cleanup_glue>
 800df22:	5949      	ldr	r1, [r1, r5]
 800df24:	b941      	cbnz	r1, 800df38 <_reclaim_reent+0xa0>
 800df26:	3504      	adds	r5, #4
 800df28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df2a:	2d80      	cmp	r5, #128	; 0x80
 800df2c:	68d9      	ldr	r1, [r3, #12]
 800df2e:	d1f8      	bne.n	800df22 <_reclaim_reent+0x8a>
 800df30:	4620      	mov	r0, r4
 800df32:	f7ff fec3 	bl	800dcbc <_free_r>
 800df36:	e7ba      	b.n	800deae <_reclaim_reent+0x16>
 800df38:	680e      	ldr	r6, [r1, #0]
 800df3a:	4620      	mov	r0, r4
 800df3c:	f7ff febe 	bl	800dcbc <_free_r>
 800df40:	4631      	mov	r1, r6
 800df42:	e7ef      	b.n	800df24 <_reclaim_reent+0x8c>
 800df44:	2500      	movs	r5, #0
 800df46:	e7ef      	b.n	800df28 <_reclaim_reent+0x90>
 800df48:	bd70      	pop	{r4, r5, r6, pc}
 800df4a:	bf00      	nop
 800df4c:	20000110 	.word	0x20000110

0800df50 <_sbrk_r>:
 800df50:	b538      	push	{r3, r4, r5, lr}
 800df52:	4d06      	ldr	r5, [pc, #24]	; (800df6c <_sbrk_r+0x1c>)
 800df54:	2300      	movs	r3, #0
 800df56:	4604      	mov	r4, r0
 800df58:	4608      	mov	r0, r1
 800df5a:	602b      	str	r3, [r5, #0]
 800df5c:	f7f4 fa02 	bl	8002364 <_sbrk>
 800df60:	1c43      	adds	r3, r0, #1
 800df62:	d102      	bne.n	800df6a <_sbrk_r+0x1a>
 800df64:	682b      	ldr	r3, [r5, #0]
 800df66:	b103      	cbz	r3, 800df6a <_sbrk_r+0x1a>
 800df68:	6023      	str	r3, [r4, #0]
 800df6a:	bd38      	pop	{r3, r4, r5, pc}
 800df6c:	20007320 	.word	0x20007320

0800df70 <__malloc_lock>:
 800df70:	4801      	ldr	r0, [pc, #4]	; (800df78 <__malloc_lock+0x8>)
 800df72:	f7ff be7b 	b.w	800dc6c <__retarget_lock_acquire_recursive>
 800df76:	bf00      	nop
 800df78:	20007314 	.word	0x20007314

0800df7c <__malloc_unlock>:
 800df7c:	4801      	ldr	r0, [pc, #4]	; (800df84 <__malloc_unlock+0x8>)
 800df7e:	f7ff be76 	b.w	800dc6e <__retarget_lock_release_recursive>
 800df82:	bf00      	nop
 800df84:	20007314 	.word	0x20007314

0800df88 <_init>:
 800df88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df8a:	bf00      	nop
 800df8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df8e:	bc08      	pop	{r3}
 800df90:	469e      	mov	lr, r3
 800df92:	4770      	bx	lr

0800df94 <_fini>:
 800df94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df96:	bf00      	nop
 800df98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df9a:	bc08      	pop	{r3}
 800df9c:	469e      	mov	lr, r3
 800df9e:	4770      	bx	lr
